
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b35c  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004178  0811b600  0811b600  0001c600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0811f778  0811f778  00020778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0811f780  0811f780  00020780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0811f784  0811f784  00020784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000394  10000000  0811f788  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  10000394  0811fb1c  00021394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  100003f4  0811fb7c  000213f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017450  10000454  0811fbdc  00021454  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  100178a4  0811fbdc  000218a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021454  2**0
                  CONTENTS, READONLY
 12 .debug_info   000277fd  00000000  00000000  00021484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000688b  00000000  00000000  00048c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0004f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e3  00000000  00000000  00050f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004df71  00000000  00000000  00052463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031ab8  00000000  00000000  000a03d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001add69  00000000  00000000  000d1e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0027fbf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008678  00000000  00000000  0027fc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  002882b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000454 	.word	0x10000454
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0811b5e4 	.word	0x0811b5e4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000458 	.word	0x10000458
 81002dc:	0811b5e4 	.word	0x0811b5e4

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <strlen>:
 81003a0:	4603      	mov	r3, r0
 81003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81003a6:	2a00      	cmp	r2, #0
 81003a8:	d1fb      	bne.n	81003a2 <strlen+0x2>
 81003aa:	1a18      	subs	r0, r3, r0
 81003ac:	3801      	subs	r0, #1
 81003ae:	4770      	bx	lr

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	@ 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_uldivmod>:
 8100db8:	b953      	cbnz	r3, 8100dd0 <__aeabi_uldivmod+0x18>
 8100dba:	b94a      	cbnz	r2, 8100dd0 <__aeabi_uldivmod+0x18>
 8100dbc:	2900      	cmp	r1, #0
 8100dbe:	bf08      	it	eq
 8100dc0:	2800      	cmpeq	r0, #0
 8100dc2:	bf1c      	itt	ne
 8100dc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100dc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dcc:	f000 b9be 	b.w	810114c <__aeabi_idiv0>
 8100dd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100dd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100dd8:	f000 f83c 	bl	8100e54 <__udivmoddi4>
 8100ddc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100de4:	b004      	add	sp, #16
 8100de6:	4770      	bx	lr

08100de8 <__aeabi_d2lz>:
 8100de8:	b538      	push	{r3, r4, r5, lr}
 8100dea:	2200      	movs	r2, #0
 8100dec:	2300      	movs	r3, #0
 8100dee:	4604      	mov	r4, r0
 8100df0:	460d      	mov	r5, r1
 8100df2:	f7ff ff0b 	bl	8100c0c <__aeabi_dcmplt>
 8100df6:	b928      	cbnz	r0, 8100e04 <__aeabi_d2lz+0x1c>
 8100df8:	4620      	mov	r0, r4
 8100dfa:	4629      	mov	r1, r5
 8100dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100e00:	f000 b80a 	b.w	8100e18 <__aeabi_d2ulz>
 8100e04:	4620      	mov	r0, r4
 8100e06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100e0a:	f000 f805 	bl	8100e18 <__aeabi_d2ulz>
 8100e0e:	4240      	negs	r0, r0
 8100e10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e14:	bd38      	pop	{r3, r4, r5, pc}
 8100e16:	bf00      	nop

08100e18 <__aeabi_d2ulz>:
 8100e18:	b5d0      	push	{r4, r6, r7, lr}
 8100e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8100e4c <__aeabi_d2ulz+0x34>)
 8100e1c:	2200      	movs	r2, #0
 8100e1e:	4606      	mov	r6, r0
 8100e20:	460f      	mov	r7, r1
 8100e22:	f7ff fc81 	bl	8100728 <__aeabi_dmul>
 8100e26:	f7ff ff57 	bl	8100cd8 <__aeabi_d2uiz>
 8100e2a:	4604      	mov	r4, r0
 8100e2c:	f7ff fc02 	bl	8100634 <__aeabi_ui2d>
 8100e30:	4b07      	ldr	r3, [pc, #28]	@ (8100e50 <__aeabi_d2ulz+0x38>)
 8100e32:	2200      	movs	r2, #0
 8100e34:	f7ff fc78 	bl	8100728 <__aeabi_dmul>
 8100e38:	4602      	mov	r2, r0
 8100e3a:	460b      	mov	r3, r1
 8100e3c:	4630      	mov	r0, r6
 8100e3e:	4639      	mov	r1, r7
 8100e40:	f7ff faba 	bl	81003b8 <__aeabi_dsub>
 8100e44:	f7ff ff48 	bl	8100cd8 <__aeabi_d2uiz>
 8100e48:	4621      	mov	r1, r4
 8100e4a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e4c:	3df00000 	.word	0x3df00000
 8100e50:	41f00000 	.word	0x41f00000

08100e54 <__udivmoddi4>:
 8100e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e58:	9d08      	ldr	r5, [sp, #32]
 8100e5a:	468e      	mov	lr, r1
 8100e5c:	4604      	mov	r4, r0
 8100e5e:	4688      	mov	r8, r1
 8100e60:	2b00      	cmp	r3, #0
 8100e62:	d14a      	bne.n	8100efa <__udivmoddi4+0xa6>
 8100e64:	428a      	cmp	r2, r1
 8100e66:	4617      	mov	r7, r2
 8100e68:	d962      	bls.n	8100f30 <__udivmoddi4+0xdc>
 8100e6a:	fab2 f682 	clz	r6, r2
 8100e6e:	b14e      	cbz	r6, 8100e84 <__udivmoddi4+0x30>
 8100e70:	f1c6 0320 	rsb	r3, r6, #32
 8100e74:	fa01 f806 	lsl.w	r8, r1, r6
 8100e78:	fa20 f303 	lsr.w	r3, r0, r3
 8100e7c:	40b7      	lsls	r7, r6
 8100e7e:	ea43 0808 	orr.w	r8, r3, r8
 8100e82:	40b4      	lsls	r4, r6
 8100e84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e88:	fa1f fc87 	uxth.w	ip, r7
 8100e8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8100e90:	0c23      	lsrs	r3, r4, #16
 8100e92:	fb0e 8811 	mls	r8, lr, r1, r8
 8100e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100e9a:	fb01 f20c 	mul.w	r2, r1, ip
 8100e9e:	429a      	cmp	r2, r3
 8100ea0:	d909      	bls.n	8100eb6 <__udivmoddi4+0x62>
 8100ea2:	18fb      	adds	r3, r7, r3
 8100ea4:	f101 30ff 	add.w	r0, r1, #4294967295
 8100ea8:	f080 80ea 	bcs.w	8101080 <__udivmoddi4+0x22c>
 8100eac:	429a      	cmp	r2, r3
 8100eae:	f240 80e7 	bls.w	8101080 <__udivmoddi4+0x22c>
 8100eb2:	3902      	subs	r1, #2
 8100eb4:	443b      	add	r3, r7
 8100eb6:	1a9a      	subs	r2, r3, r2
 8100eb8:	b2a3      	uxth	r3, r4
 8100eba:	fbb2 f0fe 	udiv	r0, r2, lr
 8100ebe:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100ec6:	fb00 fc0c 	mul.w	ip, r0, ip
 8100eca:	459c      	cmp	ip, r3
 8100ecc:	d909      	bls.n	8100ee2 <__udivmoddi4+0x8e>
 8100ece:	18fb      	adds	r3, r7, r3
 8100ed0:	f100 32ff 	add.w	r2, r0, #4294967295
 8100ed4:	f080 80d6 	bcs.w	8101084 <__udivmoddi4+0x230>
 8100ed8:	459c      	cmp	ip, r3
 8100eda:	f240 80d3 	bls.w	8101084 <__udivmoddi4+0x230>
 8100ede:	443b      	add	r3, r7
 8100ee0:	3802      	subs	r0, #2
 8100ee2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ee6:	eba3 030c 	sub.w	r3, r3, ip
 8100eea:	2100      	movs	r1, #0
 8100eec:	b11d      	cbz	r5, 8100ef6 <__udivmoddi4+0xa2>
 8100eee:	40f3      	lsrs	r3, r6
 8100ef0:	2200      	movs	r2, #0
 8100ef2:	e9c5 3200 	strd	r3, r2, [r5]
 8100ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100efa:	428b      	cmp	r3, r1
 8100efc:	d905      	bls.n	8100f0a <__udivmoddi4+0xb6>
 8100efe:	b10d      	cbz	r5, 8100f04 <__udivmoddi4+0xb0>
 8100f00:	e9c5 0100 	strd	r0, r1, [r5]
 8100f04:	2100      	movs	r1, #0
 8100f06:	4608      	mov	r0, r1
 8100f08:	e7f5      	b.n	8100ef6 <__udivmoddi4+0xa2>
 8100f0a:	fab3 f183 	clz	r1, r3
 8100f0e:	2900      	cmp	r1, #0
 8100f10:	d146      	bne.n	8100fa0 <__udivmoddi4+0x14c>
 8100f12:	4573      	cmp	r3, lr
 8100f14:	d302      	bcc.n	8100f1c <__udivmoddi4+0xc8>
 8100f16:	4282      	cmp	r2, r0
 8100f18:	f200 8105 	bhi.w	8101126 <__udivmoddi4+0x2d2>
 8100f1c:	1a84      	subs	r4, r0, r2
 8100f1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8100f22:	2001      	movs	r0, #1
 8100f24:	4690      	mov	r8, r2
 8100f26:	2d00      	cmp	r5, #0
 8100f28:	d0e5      	beq.n	8100ef6 <__udivmoddi4+0xa2>
 8100f2a:	e9c5 4800 	strd	r4, r8, [r5]
 8100f2e:	e7e2      	b.n	8100ef6 <__udivmoddi4+0xa2>
 8100f30:	2a00      	cmp	r2, #0
 8100f32:	f000 8090 	beq.w	8101056 <__udivmoddi4+0x202>
 8100f36:	fab2 f682 	clz	r6, r2
 8100f3a:	2e00      	cmp	r6, #0
 8100f3c:	f040 80a4 	bne.w	8101088 <__udivmoddi4+0x234>
 8100f40:	1a8a      	subs	r2, r1, r2
 8100f42:	0c03      	lsrs	r3, r0, #16
 8100f44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f48:	b280      	uxth	r0, r0
 8100f4a:	b2bc      	uxth	r4, r7
 8100f4c:	2101      	movs	r1, #1
 8100f4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8100f52:	fb0e 221c 	mls	r2, lr, ip, r2
 8100f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100f5a:	fb04 f20c 	mul.w	r2, r4, ip
 8100f5e:	429a      	cmp	r2, r3
 8100f60:	d907      	bls.n	8100f72 <__udivmoddi4+0x11e>
 8100f62:	18fb      	adds	r3, r7, r3
 8100f64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8100f68:	d202      	bcs.n	8100f70 <__udivmoddi4+0x11c>
 8100f6a:	429a      	cmp	r2, r3
 8100f6c:	f200 80e0 	bhi.w	8101130 <__udivmoddi4+0x2dc>
 8100f70:	46c4      	mov	ip, r8
 8100f72:	1a9b      	subs	r3, r3, r2
 8100f74:	fbb3 f2fe 	udiv	r2, r3, lr
 8100f78:	fb0e 3312 	mls	r3, lr, r2, r3
 8100f7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100f80:	fb02 f404 	mul.w	r4, r2, r4
 8100f84:	429c      	cmp	r4, r3
 8100f86:	d907      	bls.n	8100f98 <__udivmoddi4+0x144>
 8100f88:	18fb      	adds	r3, r7, r3
 8100f8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8100f8e:	d202      	bcs.n	8100f96 <__udivmoddi4+0x142>
 8100f90:	429c      	cmp	r4, r3
 8100f92:	f200 80ca 	bhi.w	810112a <__udivmoddi4+0x2d6>
 8100f96:	4602      	mov	r2, r0
 8100f98:	1b1b      	subs	r3, r3, r4
 8100f9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100f9e:	e7a5      	b.n	8100eec <__udivmoddi4+0x98>
 8100fa0:	f1c1 0620 	rsb	r6, r1, #32
 8100fa4:	408b      	lsls	r3, r1
 8100fa6:	fa22 f706 	lsr.w	r7, r2, r6
 8100faa:	431f      	orrs	r7, r3
 8100fac:	fa0e f401 	lsl.w	r4, lr, r1
 8100fb0:	fa20 f306 	lsr.w	r3, r0, r6
 8100fb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8100fb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100fbc:	4323      	orrs	r3, r4
 8100fbe:	fa00 f801 	lsl.w	r8, r0, r1
 8100fc2:	fa1f fc87 	uxth.w	ip, r7
 8100fc6:	fbbe f0f9 	udiv	r0, lr, r9
 8100fca:	0c1c      	lsrs	r4, r3, #16
 8100fcc:	fb09 ee10 	mls	lr, r9, r0, lr
 8100fd0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100fd4:	fb00 fe0c 	mul.w	lr, r0, ip
 8100fd8:	45a6      	cmp	lr, r4
 8100fda:	fa02 f201 	lsl.w	r2, r2, r1
 8100fde:	d909      	bls.n	8100ff4 <__udivmoddi4+0x1a0>
 8100fe0:	193c      	adds	r4, r7, r4
 8100fe2:	f100 3aff 	add.w	sl, r0, #4294967295
 8100fe6:	f080 809c 	bcs.w	8101122 <__udivmoddi4+0x2ce>
 8100fea:	45a6      	cmp	lr, r4
 8100fec:	f240 8099 	bls.w	8101122 <__udivmoddi4+0x2ce>
 8100ff0:	3802      	subs	r0, #2
 8100ff2:	443c      	add	r4, r7
 8100ff4:	eba4 040e 	sub.w	r4, r4, lr
 8100ff8:	fa1f fe83 	uxth.w	lr, r3
 8100ffc:	fbb4 f3f9 	udiv	r3, r4, r9
 8101000:	fb09 4413 	mls	r4, r9, r3, r4
 8101004:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8101008:	fb03 fc0c 	mul.w	ip, r3, ip
 810100c:	45a4      	cmp	ip, r4
 810100e:	d908      	bls.n	8101022 <__udivmoddi4+0x1ce>
 8101010:	193c      	adds	r4, r7, r4
 8101012:	f103 3eff 	add.w	lr, r3, #4294967295
 8101016:	f080 8082 	bcs.w	810111e <__udivmoddi4+0x2ca>
 810101a:	45a4      	cmp	ip, r4
 810101c:	d97f      	bls.n	810111e <__udivmoddi4+0x2ca>
 810101e:	3b02      	subs	r3, #2
 8101020:	443c      	add	r4, r7
 8101022:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8101026:	eba4 040c 	sub.w	r4, r4, ip
 810102a:	fba0 ec02 	umull	lr, ip, r0, r2
 810102e:	4564      	cmp	r4, ip
 8101030:	4673      	mov	r3, lr
 8101032:	46e1      	mov	r9, ip
 8101034:	d362      	bcc.n	81010fc <__udivmoddi4+0x2a8>
 8101036:	d05f      	beq.n	81010f8 <__udivmoddi4+0x2a4>
 8101038:	b15d      	cbz	r5, 8101052 <__udivmoddi4+0x1fe>
 810103a:	ebb8 0203 	subs.w	r2, r8, r3
 810103e:	eb64 0409 	sbc.w	r4, r4, r9
 8101042:	fa04 f606 	lsl.w	r6, r4, r6
 8101046:	fa22 f301 	lsr.w	r3, r2, r1
 810104a:	431e      	orrs	r6, r3
 810104c:	40cc      	lsrs	r4, r1
 810104e:	e9c5 6400 	strd	r6, r4, [r5]
 8101052:	2100      	movs	r1, #0
 8101054:	e74f      	b.n	8100ef6 <__udivmoddi4+0xa2>
 8101056:	fbb1 fcf2 	udiv	ip, r1, r2
 810105a:	0c01      	lsrs	r1, r0, #16
 810105c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8101060:	b280      	uxth	r0, r0
 8101062:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8101066:	463b      	mov	r3, r7
 8101068:	4638      	mov	r0, r7
 810106a:	463c      	mov	r4, r7
 810106c:	46b8      	mov	r8, r7
 810106e:	46be      	mov	lr, r7
 8101070:	2620      	movs	r6, #32
 8101072:	fbb1 f1f7 	udiv	r1, r1, r7
 8101076:	eba2 0208 	sub.w	r2, r2, r8
 810107a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 810107e:	e766      	b.n	8100f4e <__udivmoddi4+0xfa>
 8101080:	4601      	mov	r1, r0
 8101082:	e718      	b.n	8100eb6 <__udivmoddi4+0x62>
 8101084:	4610      	mov	r0, r2
 8101086:	e72c      	b.n	8100ee2 <__udivmoddi4+0x8e>
 8101088:	f1c6 0220 	rsb	r2, r6, #32
 810108c:	fa2e f302 	lsr.w	r3, lr, r2
 8101090:	40b7      	lsls	r7, r6
 8101092:	40b1      	lsls	r1, r6
 8101094:	fa20 f202 	lsr.w	r2, r0, r2
 8101098:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810109c:	430a      	orrs	r2, r1
 810109e:	fbb3 f8fe 	udiv	r8, r3, lr
 81010a2:	b2bc      	uxth	r4, r7
 81010a4:	fb0e 3318 	mls	r3, lr, r8, r3
 81010a8:	0c11      	lsrs	r1, r2, #16
 81010aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010ae:	fb08 f904 	mul.w	r9, r8, r4
 81010b2:	40b0      	lsls	r0, r6
 81010b4:	4589      	cmp	r9, r1
 81010b6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 81010ba:	b280      	uxth	r0, r0
 81010bc:	d93e      	bls.n	810113c <__udivmoddi4+0x2e8>
 81010be:	1879      	adds	r1, r7, r1
 81010c0:	f108 3cff 	add.w	ip, r8, #4294967295
 81010c4:	d201      	bcs.n	81010ca <__udivmoddi4+0x276>
 81010c6:	4589      	cmp	r9, r1
 81010c8:	d81f      	bhi.n	810110a <__udivmoddi4+0x2b6>
 81010ca:	eba1 0109 	sub.w	r1, r1, r9
 81010ce:	fbb1 f9fe 	udiv	r9, r1, lr
 81010d2:	fb09 f804 	mul.w	r8, r9, r4
 81010d6:	fb0e 1119 	mls	r1, lr, r9, r1
 81010da:	b292      	uxth	r2, r2
 81010dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 81010e0:	4542      	cmp	r2, r8
 81010e2:	d229      	bcs.n	8101138 <__udivmoddi4+0x2e4>
 81010e4:	18ba      	adds	r2, r7, r2
 81010e6:	f109 31ff 	add.w	r1, r9, #4294967295
 81010ea:	d2c4      	bcs.n	8101076 <__udivmoddi4+0x222>
 81010ec:	4542      	cmp	r2, r8
 81010ee:	d2c2      	bcs.n	8101076 <__udivmoddi4+0x222>
 81010f0:	f1a9 0102 	sub.w	r1, r9, #2
 81010f4:	443a      	add	r2, r7
 81010f6:	e7be      	b.n	8101076 <__udivmoddi4+0x222>
 81010f8:	45f0      	cmp	r8, lr
 81010fa:	d29d      	bcs.n	8101038 <__udivmoddi4+0x1e4>
 81010fc:	ebbe 0302 	subs.w	r3, lr, r2
 8101100:	eb6c 0c07 	sbc.w	ip, ip, r7
 8101104:	3801      	subs	r0, #1
 8101106:	46e1      	mov	r9, ip
 8101108:	e796      	b.n	8101038 <__udivmoddi4+0x1e4>
 810110a:	eba7 0909 	sub.w	r9, r7, r9
 810110e:	4449      	add	r1, r9
 8101110:	f1a8 0c02 	sub.w	ip, r8, #2
 8101114:	fbb1 f9fe 	udiv	r9, r1, lr
 8101118:	fb09 f804 	mul.w	r8, r9, r4
 810111c:	e7db      	b.n	81010d6 <__udivmoddi4+0x282>
 810111e:	4673      	mov	r3, lr
 8101120:	e77f      	b.n	8101022 <__udivmoddi4+0x1ce>
 8101122:	4650      	mov	r0, sl
 8101124:	e766      	b.n	8100ff4 <__udivmoddi4+0x1a0>
 8101126:	4608      	mov	r0, r1
 8101128:	e6fd      	b.n	8100f26 <__udivmoddi4+0xd2>
 810112a:	443b      	add	r3, r7
 810112c:	3a02      	subs	r2, #2
 810112e:	e733      	b.n	8100f98 <__udivmoddi4+0x144>
 8101130:	f1ac 0c02 	sub.w	ip, ip, #2
 8101134:	443b      	add	r3, r7
 8101136:	e71c      	b.n	8100f72 <__udivmoddi4+0x11e>
 8101138:	4649      	mov	r1, r9
 810113a:	e79c      	b.n	8101076 <__udivmoddi4+0x222>
 810113c:	eba1 0109 	sub.w	r1, r1, r9
 8101140:	46c4      	mov	ip, r8
 8101142:	fbb1 f9fe 	udiv	r9, r1, lr
 8101146:	fb09 f804 	mul.w	r8, r9, r4
 810114a:	e7c4      	b.n	81010d6 <__udivmoddi4+0x282>

0810114c <__aeabi_idiv0>:
 810114c:	4770      	bx	lr
 810114e:	bf00      	nop

08101150 <_terminate>:
#include <string.h>

//#define VERBOSE_MODE
//#define UDP_VERBOSE

static void _terminate(LL_R2000_t* ctrl, void* pcb){
 8101150:	b580      	push	{r7, lr}
 8101152:	b084      	sub	sp, #16
 8101154:	af00      	add	r7, sp, #0
 8101156:	6078      	str	r0, [r7, #4]
 8101158:	6039      	str	r1, [r7, #0]
	#ifdef VERBOSE_MODE
	printf("R2000_LL : %s : Connexion terminated, memory freed\n", ctrl->label);
	#endif

	LL_R2000_operation_t op = ctrl->operation;
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	7a1b      	ldrb	r3, [r3, #8]
 810115e:	73fb      	strb	r3, [r7, #15]

	mem_free(ctrl->label);
 8101160:	687b      	ldr	r3, [r7, #4]
 8101162:	681b      	ldr	r3, [r3, #0]
 8101164:	4618      	mov	r0, r3
 8101166:	f00b fc13 	bl	810c990 <mem_free>
	mem_free(ctrl->args);
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	699b      	ldr	r3, [r3, #24]
 810116e:	4618      	mov	r0, r3
 8101170:	f00b fc0e 	bl	810c990 <mem_free>
	mem_free(ctrl);
 8101174:	6878      	ldr	r0, [r7, #4]
 8101176:	f00b fc0b 	bl	810c990 <mem_free>
	if(op == data_stream_udp){
 810117a:	7bfb      	ldrb	r3, [r7, #15]
 810117c:	2b02      	cmp	r3, #2
 810117e:	d106      	bne.n	810118e <_terminate+0x3e>
		udp_disconnect((struct udp_pcb*)pcb);
 8101180:	6838      	ldr	r0, [r7, #0]
 8101182:	f013 fb4d 	bl	8114820 <udp_disconnect>
		udp_remove((struct udp_pcb*)pcb);
 8101186:	6838      	ldr	r0, [r7, #0]
 8101188:	f013 fb92 	bl	81148b0 <udp_remove>
	} else {
		tcp_close((struct tcp_pcb*)pcb);
	}
}
 810118c:	e002      	b.n	8101194 <_terminate+0x44>
		tcp_close((struct tcp_pcb*)pcb);
 810118e:	6838      	ldr	r0, [r7, #0]
 8101190:	f00d fa78 	bl	810e684 <tcp_close>
}
 8101194:	bf00      	nop
 8101196:	3710      	adds	r7, #16
 8101198:	46bd      	mov	sp, r7
 810119a:	bd80      	pop	{r7, pc}

0810119c <_udpReceivedCallback>:

static void _udpReceivedCallback(void *ctrl_void, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port){
 810119c:	b580      	push	{r7, lr}
 810119e:	b084      	sub	sp, #16
 81011a0:	af00      	add	r7, sp, #0
 81011a2:	60f8      	str	r0, [r7, #12]
 81011a4:	60b9      	str	r1, [r7, #8]
 81011a6:	607a      	str	r2, [r7, #4]
 81011a8:	603b      	str	r3, [r7, #0]
	#ifdef UDP_VERBOSE
	printf("R2000_LL : %s : UDP Response received of length %d (total %d)\n", ((LL_R2000_t*)ctrl_void)->label, p->len, p->tot_len);
	#endif
	#endif

	if(((LL_R2000_t*)ctrl_void)->received_callback != NULL) (*(((LL_R2000_t*)ctrl_void)->received_callback))((LL_R2000_t*)ctrl_void,p);
 81011aa:	68fb      	ldr	r3, [r7, #12]
 81011ac:	695b      	ldr	r3, [r3, #20]
 81011ae:	2b00      	cmp	r3, #0
 81011b0:	d004      	beq.n	81011bc <_udpReceivedCallback+0x20>
 81011b2:	68fb      	ldr	r3, [r7, #12]
 81011b4:	695b      	ldr	r3, [r3, #20]
 81011b6:	6879      	ldr	r1, [r7, #4]
 81011b8:	68f8      	ldr	r0, [r7, #12]
 81011ba:	4798      	blx	r3

	pbuf_free(p);
 81011bc:	6878      	ldr	r0, [r7, #4]
 81011be:	f00c fdc3 	bl	810dd48 <pbuf_free>
}
 81011c2:	bf00      	nop
 81011c4:	3710      	adds	r7, #16
 81011c6:	46bd      	mov	sp, r7
 81011c8:	bd80      	pop	{r7, pc}
	...

081011cc <_tcpReceivedCallback>:

static err_t _tcpReceivedCallback(void *ctrl_void, struct tcp_pcb *pcb, struct pbuf *p, err_t err){
 81011cc:	b580      	push	{r7, lr}
 81011ce:	b086      	sub	sp, #24
 81011d0:	af00      	add	r7, sp, #0
 81011d2:	60f8      	str	r0, [r7, #12]
 81011d4:	60b9      	str	r1, [r7, #8]
 81011d6:	607a      	str	r2, [r7, #4]
 81011d8:	70fb      	strb	r3, [r7, #3]
	LL_R2000_t* ctrl = (LL_R2000_t*) ctrl_void; // WOULD SOMEONE TELL THE COMPILER TO SHUT THE FCK UP !?!
 81011da:	68fb      	ldr	r3, [r7, #12]
 81011dc:	617b      	str	r3, [r7, #20]

	#ifdef VERBOSE_MODE
	printf("R2000_LL : %s : TCP Response received of length %d (total %d)\n", ctrl->label, p->len, p->tot_len);
	#endif

	if(p->len > 2000) return; // TODO why the fuck is this required ?
 81011de:	687b      	ldr	r3, [r7, #4]
 81011e0:	895b      	ldrh	r3, [r3, #10]
 81011e2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 81011e6:	d851      	bhi.n	810128c <_tcpReceivedCallback+0xc0>

	tcp_recved(pcb,p->len); // acknowledge the data (cannot do it at the end as we might close the pcb before doing so)
 81011e8:	687b      	ldr	r3, [r7, #4]
 81011ea:	895b      	ldrh	r3, [r3, #10]
 81011ec:	4619      	mov	r1, r3
 81011ee:	68b8      	ldr	r0, [r7, #8]
 81011f0:	f00d fb98 	bl	810e924 <tcp_recved>

	if(ctrl->operation == http_request){
 81011f4:	697b      	ldr	r3, [r7, #20]
 81011f6:	7a1b      	ldrb	r3, [r3, #8]
 81011f8:	2b01      	cmp	r3, #1
 81011fa:	d135      	bne.n	8101268 <_tcpReceivedCallback+0x9c>
		if(p->len != 0) // strstr triggers a hardfault if provided an empty string
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	895b      	ldrh	r3, [r3, #10]
 8101200:	2b00      	cmp	r3, #0
 8101202:	d041      	beq.n	8101288 <_tcpReceivedCallback+0xbc>
			if(strstr(p->payload, "HTTP") != NULL){// first, search for the keyword "HTTP", which indicates that the data is a http header and not actual data
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	685b      	ldr	r3, [r3, #4]
 8101208:	4923      	ldr	r1, [pc, #140]	@ (8101298 <_tcpReceivedCallback+0xcc>)
 810120a:	4618      	mov	r0, r3
 810120c:	f016 fb05 	bl	811781a <strstr>
 8101210:	4603      	mov	r3, r0
 8101212:	2b00      	cmp	r3, #0
 8101214:	d00a      	beq.n	810122c <_tcpReceivedCallback+0x60>

				sscanf(p->payload + 9, "%d", (int*)&(ctrl->http_code)); // extract the number (or do nothing if there is none, which is the case for data)
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	685b      	ldr	r3, [r3, #4]
 810121a:	f103 0009 	add.w	r0, r3, #9
 810121e:	697b      	ldr	r3, [r7, #20]
 8101220:	330a      	adds	r3, #10
 8101222:	461a      	mov	r2, r3
 8101224:	491d      	ldr	r1, [pc, #116]	@ (810129c <_tcpReceivedCallback+0xd0>)
 8101226:	f016 f9a1 	bl	811756c <siscanf>
 810122a:	e02d      	b.n	8101288 <_tcpReceivedCallback+0xbc>

				#ifdef VERBOSE_MODE
				printf("R2000_LL : %s : Response is HTTP header, Code %d\n", ctrl->label, ctrl->http_code);
				#endif
			} else if (strstr(p->payload, "{") != NULL){ // data received is usable and should be treated as a json parsable string
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	685b      	ldr	r3, [r3, #4]
 8101230:	217b      	movs	r1, #123	@ 0x7b
 8101232:	4618      	mov	r0, r3
 8101234:	f016 fad2 	bl	81177dc <strchr>
 8101238:	4603      	mov	r3, r0
 810123a:	2b00      	cmp	r3, #0
 810123c:	d00d      	beq.n	810125a <_tcpReceivedCallback+0x8e>
				#ifdef VERBOSE_MODE
				printf("R2000_LL : %s : Response is JSON data\n", ctrl->label);
				#endif

				if(ctrl->received_callback != NULL) (*(ctrl->received_callback))(ctrl,p);
 810123e:	697b      	ldr	r3, [r7, #20]
 8101240:	695b      	ldr	r3, [r3, #20]
 8101242:	2b00      	cmp	r3, #0
 8101244:	d004      	beq.n	8101250 <_tcpReceivedCallback+0x84>
 8101246:	697b      	ldr	r3, [r7, #20]
 8101248:	695b      	ldr	r3, [r3, #20]
 810124a:	6879      	ldr	r1, [r7, #4]
 810124c:	6978      	ldr	r0, [r7, #20]
 810124e:	4798      	blx	r3

				// we received our response, we can terminate the connexion now
				_terminate(ctrl, pcb);
 8101250:	68b9      	ldr	r1, [r7, #8]
 8101252:	6978      	ldr	r0, [r7, #20]
 8101254:	f7ff ff7c 	bl	8101150 <_terminate>
 8101258:	e016      	b.n	8101288 <_tcpReceivedCallback+0xbc>

				#ifdef VERBOSE_MODE
				printf("R2000_LL : %s : Data reception complete (transaction closed)\n", ctrl->label);
				#endif
			} else {
				printf("R2000_LL : %s : Response of unknown form, cannot read\n", ctrl->label);
 810125a:	697b      	ldr	r3, [r7, #20]
 810125c:	681b      	ldr	r3, [r3, #0]
 810125e:	4619      	mov	r1, r3
 8101260:	480f      	ldr	r0, [pc, #60]	@ (81012a0 <_tcpReceivedCallback+0xd4>)
 8101262:	f016 f8e9 	bl	8117438 <iprintf>
 8101266:	e00f      	b.n	8101288 <_tcpReceivedCallback+0xbc>
			}
	} else if (ctrl->operation == data_stream_tcp){
 8101268:	697b      	ldr	r3, [r7, #20]
 810126a:	7a1b      	ldrb	r3, [r3, #8]
 810126c:	2b03      	cmp	r3, #3
 810126e:	d10b      	bne.n	8101288 <_tcpReceivedCallback+0xbc>
		#ifdef VERBOSE_MODE
		printf("R2000_LL : %s : Response is data stream\n", ((LL_R2000_t*)ctrl_void)->label);
		#endif
		if(ctrl->received_callback != NULL) (*(ctrl->received_callback))(ctrl,p);
 8101270:	697b      	ldr	r3, [r7, #20]
 8101272:	695b      	ldr	r3, [r3, #20]
 8101274:	2b00      	cmp	r3, #0
 8101276:	d004      	beq.n	8101282 <_tcpReceivedCallback+0xb6>
 8101278:	697b      	ldr	r3, [r7, #20]
 810127a:	695b      	ldr	r3, [r3, #20]
 810127c:	6879      	ldr	r1, [r7, #4]
 810127e:	6978      	ldr	r0, [r7, #20]
 8101280:	4798      	blx	r3

		pbuf_free(p);
 8101282:	6878      	ldr	r0, [r7, #4]
 8101284:	f00c fd60 	bl	810dd48 <pbuf_free>
	}

	return ERR_OK;
 8101288:	2300      	movs	r3, #0
 810128a:	e001      	b.n	8101290 <_tcpReceivedCallback+0xc4>
	if(p->len > 2000) return; // TODO why the fuck is this required ?
 810128c:	bf00      	nop
 810128e:	bf00      	nop
}
 8101290:	4618      	mov	r0, r3
 8101292:	3718      	adds	r7, #24
 8101294:	46bd      	mov	sp, r7
 8101296:	bd80      	pop	{r7, pc}
 8101298:	0811b600 	.word	0x0811b600
 810129c:	0811b608 	.word	0x0811b608
 81012a0:	0811b60c 	.word	0x0811b60c

081012a4 <_tcpConnectedCallback>:


// connection established callback, err is unused and only return 0
static err_t _tcpConnectedCallback(void *ctrl_void, struct tcp_pcb *pcb, err_t err){
 81012a4:	b590      	push	{r4, r7, lr}
 81012a6:	b087      	sub	sp, #28
 81012a8:	af00      	add	r7, sp, #0
 81012aa:	60f8      	str	r0, [r7, #12]
 81012ac:	60b9      	str	r1, [r7, #8]
 81012ae:	4613      	mov	r3, r2
 81012b0:	71fb      	strb	r3, [r7, #7]
	LL_R2000_t* ctrl = (LL_R2000_t*) ctrl_void; // sick and tired of casting void pointers
 81012b2:	68fb      	ldr	r3, [r7, #12]
 81012b4:	617b      	str	r3, [r7, #20]

	#ifdef VERBOSE_MODE
	printf("R2000_LL : %s : Connected !\n", ctrl->label);
	#endif

	switch (ctrl->operation){
 81012b6:	697b      	ldr	r3, [r7, #20]
 81012b8:	7a1b      	ldrb	r3, [r3, #8]
 81012ba:	2b01      	cmp	r3, #1
 81012bc:	d002      	beq.n	81012c4 <_tcpConnectedCallback+0x20>
 81012be:	2b03      	cmp	r3, #3
 81012c0:	d023      	beq.n	810130a <_tcpConnectedCallback+0x66>
 81012c2:	e01b      	b.n	81012fc <_tcpConnectedCallback+0x58>
	case http_request:
		err_t error = tcp_write(pcb, (char*)(ctrl->args), strlen((char*)ctrl->args), TCP_WRITE_FLAG_COPY);
 81012c4:	697b      	ldr	r3, [r7, #20]
 81012c6:	699c      	ldr	r4, [r3, #24]
 81012c8:	697b      	ldr	r3, [r7, #20]
 81012ca:	699b      	ldr	r3, [r3, #24]
 81012cc:	4618      	mov	r0, r3
 81012ce:	f7ff f867 	bl	81003a0 <strlen>
 81012d2:	4603      	mov	r3, r0
 81012d4:	b29a      	uxth	r2, r3
 81012d6:	2301      	movs	r3, #1
 81012d8:	4621      	mov	r1, r4
 81012da:	68b8      	ldr	r0, [r7, #8]
 81012dc:	f011 f9ac 	bl	8112638 <tcp_write>
 81012e0:	4603      	mov	r3, r0
 81012e2:	74fb      	strb	r3, [r7, #19]
		#ifdef VERBOSE_MODE
		if(error) printf("R2000_LL : %s : Failed to write (error %d)\n", ctrl->label, error);
		#endif

		error = tcp_output(pcb);
 81012e4:	68b8      	ldr	r0, [r7, #8]
 81012e6:	f011 ff91 	bl	811320c <tcp_output>
 81012ea:	4603      	mov	r3, r0
 81012ec:	74fb      	strb	r3, [r7, #19]
		#ifdef VERBOSE_MODE
		if(error) printf("R2000_LL : %s : Failed to output (error %d)\n", ctrl->label, error);
		#endif

		if(error) return error; // tcp_output will always fail if tcp_write does
 81012ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 81012f2:	2b00      	cmp	r3, #0
 81012f4:	d00b      	beq.n	810130e <_tcpConnectedCallback+0x6a>
 81012f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 81012fa:	e016      	b.n	810132a <_tcpConnectedCallback+0x86>
		break;
	default :
		#ifdef VERBOSE_MODE
		printf("R2000_LL : %s : Operation not supported, aborting...\n", ctrl->label);
		#endif
		_terminate(ctrl, pcb);
 81012fc:	68b9      	ldr	r1, [r7, #8]
 81012fe:	6978      	ldr	r0, [r7, #20]
 8101300:	f7ff ff26 	bl	8101150 <_terminate>
		return ERR_ARG;
 8101304:	f06f 030f 	mvn.w	r3, #15
 8101308:	e00f      	b.n	810132a <_tcpConnectedCallback+0x86>
		break;
 810130a:	bf00      	nop
 810130c:	e000      	b.n	8101310 <_tcpConnectedCallback+0x6c>
		break;
 810130e:	bf00      	nop
	}

	if(ctrl->sent_callback != NULL) (*(ctrl->sent_callback))(ctrl);
 8101310:	697b      	ldr	r3, [r7, #20]
 8101312:	691b      	ldr	r3, [r3, #16]
 8101314:	2b00      	cmp	r3, #0
 8101316:	d003      	beq.n	8101320 <_tcpConnectedCallback+0x7c>
 8101318:	697b      	ldr	r3, [r7, #20]
 810131a:	691b      	ldr	r3, [r3, #16]
 810131c:	6978      	ldr	r0, [r7, #20]
 810131e:	4798      	blx	r3

	//tcp_err(pcb, tcpErrorCallback);
	tcp_recv(pcb, _tcpReceivedCallback);
 8101320:	4904      	ldr	r1, [pc, #16]	@ (8101334 <_tcpConnectedCallback+0x90>)
 8101322:	68b8      	ldr	r0, [r7, #8]
 8101324:	f00e faea 	bl	810f8fc <tcp_recv>

	// tcp_close(pcb); // closing now makes the response retrieval abort
	return ERR_OK;
 8101328:	2300      	movs	r3, #0
}
 810132a:	4618      	mov	r0, r3
 810132c:	371c      	adds	r7, #28
 810132e:	46bd      	mov	sp, r7
 8101330:	bd90      	pop	{r4, r7, pc}
 8101332:	bf00      	nop
 8101334:	081011cd 	.word	0x081011cd

08101338 <lidarContact>:

err_t lidarContact(LL_R2000_t* LL_control_struct){
 8101338:	b5b0      	push	{r4, r5, r7, lr}
 810133a:	b086      	sub	sp, #24
 810133c:	af00      	add	r7, sp, #0
 810133e:	6078      	str	r0, [r7, #4]

	struct udp_pcb* udp_pcb = NULL;
 8101340:	2300      	movs	r3, #0
 8101342:	617b      	str	r3, [r7, #20]
	struct tcp_pcb* tcp_pcb = NULL;
 8101344:	2300      	movs	r3, #0
 8101346:	613b      	str	r3, [r7, #16]

	if(LL_control_struct->operation == data_stream_udp) udp_pcb = udp_new();
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	7a1b      	ldrb	r3, [r3, #8]
 810134c:	2b02      	cmp	r3, #2
 810134e:	d103      	bne.n	8101358 <lidarContact+0x20>
 8101350:	f013 faf0 	bl	8114934 <udp_new>
 8101354:	6178      	str	r0, [r7, #20]
 8101356:	e002      	b.n	810135e <lidarContact+0x26>
	else tcp_pcb = tcp_new();
 8101358:	f00e fab6 	bl	810f8c8 <tcp_new>
 810135c:	6138      	str	r0, [r7, #16]

	LL_R2000_t* ctrl = mem_malloc(sizeof(LL_R2000_t));
 810135e:	201c      	movs	r0, #28
 8101360:	f00b fc7c 	bl	810cc5c <mem_malloc>
 8101364:	60f8      	str	r0, [r7, #12]

	if(ctrl == NULL || (tcp_pcb == NULL && udp_pcb == NULL)){
 8101366:	68fb      	ldr	r3, [r7, #12]
 8101368:	2b00      	cmp	r3, #0
 810136a:	d005      	beq.n	8101378 <lidarContact+0x40>
 810136c:	693b      	ldr	r3, [r7, #16]
 810136e:	2b00      	cmp	r3, #0
 8101370:	d117      	bne.n	81013a2 <lidarContact+0x6a>
 8101372:	697b      	ldr	r3, [r7, #20]
 8101374:	2b00      	cmp	r3, #0
 8101376:	d114      	bne.n	81013a2 <lidarContact+0x6a>

		if(ctrl != NULL) mem_free(ctrl);
 8101378:	68fb      	ldr	r3, [r7, #12]
 810137a:	2b00      	cmp	r3, #0
 810137c:	d002      	beq.n	8101384 <lidarContact+0x4c>
 810137e:	68f8      	ldr	r0, [r7, #12]
 8101380:	f00b fb06 	bl	810c990 <mem_free>
		if(tcp_pcb != NULL) tcp_close(tcp_pcb);
 8101384:	693b      	ldr	r3, [r7, #16]
 8101386:	2b00      	cmp	r3, #0
 8101388:	d002      	beq.n	8101390 <lidarContact+0x58>
 810138a:	6938      	ldr	r0, [r7, #16]
 810138c:	f00d f97a 	bl	810e684 <tcp_close>
		if(udp_pcb != NULL) udp_remove(udp_pcb);
 8101390:	697b      	ldr	r3, [r7, #20]
 8101392:	2b00      	cmp	r3, #0
 8101394:	d002      	beq.n	810139c <lidarContact+0x64>
 8101396:	6978      	ldr	r0, [r7, #20]
 8101398:	f013 fa8a 	bl	81148b0 <udp_remove>

		#ifdef VERBOSE_MODE
		printf("R2000_LL : %s : Not enough memory !\n", ctrl->label);
		#endif
		return ERR_MEM; // could not create the request, abort
 810139c:	f04f 33ff 	mov.w	r3, #4294967295
 81013a0:	e027      	b.n	81013f2 <lidarContact+0xba>
	}

	*ctrl = *LL_control_struct; // copy the data over to save it
 81013a2:	68fa      	ldr	r2, [r7, #12]
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	4614      	mov	r4, r2
 81013a8:	461d      	mov	r5, r3
 81013aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81013ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81013ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81013b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if(LL_control_struct->operation == data_stream_udp) {
 81013b6:	687b      	ldr	r3, [r7, #4]
 81013b8:	7a1b      	ldrb	r3, [r3, #8]
 81013ba:	2b02      	cmp	r3, #2
 81013bc:	d10c      	bne.n	81013d8 <lidarContact+0xa0>
		udp_recv(udp_pcb, _udpReceivedCallback, ctrl);
 81013be:	68fa      	ldr	r2, [r7, #12]
 81013c0:	490e      	ldr	r1, [pc, #56]	@ (81013fc <lidarContact+0xc4>)
 81013c2:	6978      	ldr	r0, [r7, #20]
 81013c4:	f013 fa54 	bl	8114870 <udp_recv>
		udp_bind(udp_pcb, &gnetif.ip_addr, ctrl->port);
 81013c8:	68fb      	ldr	r3, [r7, #12]
 81013ca:	899b      	ldrh	r3, [r3, #12]
 81013cc:	461a      	mov	r2, r3
 81013ce:	490c      	ldr	r1, [pc, #48]	@ (8101400 <lidarContact+0xc8>)
 81013d0:	6978      	ldr	r0, [r7, #20]
 81013d2:	f013 f99d 	bl	8114710 <udp_bind>
 81013d6:	e00b      	b.n	81013f0 <lidarContact+0xb8>
	} else {
		tcp_arg(tcp_pcb, ctrl); // then save the pointer to the saved data as argument for the communication
 81013d8:	68f9      	ldr	r1, [r7, #12]
 81013da:	6938      	ldr	r0, [r7, #16]
 81013dc:	f00e fa7c 	bl	810f8d8 <tcp_arg>
		tcp_connect(tcp_pcb, &(ctrl->addr), ctrl->port, _tcpConnectedCallback);
 81013e0:	68fb      	ldr	r3, [r7, #12]
 81013e2:	1d19      	adds	r1, r3, #4
 81013e4:	68fb      	ldr	r3, [r7, #12]
 81013e6:	899a      	ldrh	r2, [r3, #12]
 81013e8:	4b06      	ldr	r3, [pc, #24]	@ (8101404 <lidarContact+0xcc>)
 81013ea:	6938      	ldr	r0, [r7, #16]
 81013ec:	f00d fb30 	bl	810ea50 <tcp_connect>
	}
	#ifdef VERBOSE_MODE
	printf("R2000_LL : %s : Connecting (%s)...\n", ctrl->label, (LL_control_struct->operation == data_stream_udp ? "UDP" : "TCP"));
	#endif

	return ERR_OK;
 81013f0:	2300      	movs	r3, #0
}
 81013f2:	4618      	mov	r0, r3
 81013f4:	3718      	adds	r7, #24
 81013f6:	46bd      	mov	sp, r7
 81013f8:	bdb0      	pop	{r4, r5, r7, pc}
 81013fa:	bf00      	nop
 81013fc:	0810119d 	.word	0x0810119d
 8101400:	1000f9dc 	.word	0x1000f9dc
 8101404:	081012a5 	.word	0x081012a5

08101408 <lidarInit>:
#include <stdio.h>
#include <string.h>

// ==================== Variables ==================== //

void lidarInit(R2000_t* lidar, uint8_t addr_A, uint8_t addr_B, uint8_t addr_C, uint8_t addr_D){
 8101408:	b580      	push	{r7, lr}
 810140a:	b082      	sub	sp, #8
 810140c:	af00      	add	r7, sp, #0
 810140e:	6078      	str	r0, [r7, #4]
 8101410:	4608      	mov	r0, r1
 8101412:	4611      	mov	r1, r2
 8101414:	461a      	mov	r2, r3
 8101416:	4603      	mov	r3, r0
 8101418:	70fb      	strb	r3, [r7, #3]
 810141a:	460b      	mov	r3, r1
 810141c:	70bb      	strb	r3, [r7, #2]
 810141e:	4613      	mov	r3, r2
 8101420:	707b      	strb	r3, [r7, #1]
	IP4_ADDR(&(lidar->address), addr_A, addr_B, addr_C, addr_D);
 8101422:	78fb      	ldrb	r3, [r7, #3]
 8101424:	061a      	lsls	r2, r3, #24
 8101426:	78bb      	ldrb	r3, [r7, #2]
 8101428:	041b      	lsls	r3, r3, #16
 810142a:	431a      	orrs	r2, r3
 810142c:	787b      	ldrb	r3, [r7, #1]
 810142e:	021b      	lsls	r3, r3, #8
 8101430:	431a      	orrs	r2, r3
 8101432:	7c3b      	ldrb	r3, [r7, #16]
 8101434:	4313      	orrs	r3, r2
 8101436:	061a      	lsls	r2, r3, #24
 8101438:	78fb      	ldrb	r3, [r7, #3]
 810143a:	0619      	lsls	r1, r3, #24
 810143c:	78bb      	ldrb	r3, [r7, #2]
 810143e:	041b      	lsls	r3, r3, #16
 8101440:	4319      	orrs	r1, r3
 8101442:	787b      	ldrb	r3, [r7, #1]
 8101444:	021b      	lsls	r3, r3, #8
 8101446:	4319      	orrs	r1, r3
 8101448:	7c3b      	ldrb	r3, [r7, #16]
 810144a:	430b      	orrs	r3, r1
 810144c:	021b      	lsls	r3, r3, #8
 810144e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8101452:	431a      	orrs	r2, r3
 8101454:	78fb      	ldrb	r3, [r7, #3]
 8101456:	0619      	lsls	r1, r3, #24
 8101458:	78bb      	ldrb	r3, [r7, #2]
 810145a:	041b      	lsls	r3, r3, #16
 810145c:	4319      	orrs	r1, r3
 810145e:	787b      	ldrb	r3, [r7, #1]
 8101460:	021b      	lsls	r3, r3, #8
 8101462:	4319      	orrs	r1, r3
 8101464:	7c3b      	ldrb	r3, [r7, #16]
 8101466:	430b      	orrs	r3, r1
 8101468:	0a1b      	lsrs	r3, r3, #8
 810146a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810146e:	431a      	orrs	r2, r3
 8101470:	78fb      	ldrb	r3, [r7, #3]
 8101472:	0619      	lsls	r1, r3, #24
 8101474:	78bb      	ldrb	r3, [r7, #2]
 8101476:	041b      	lsls	r3, r3, #16
 8101478:	4319      	orrs	r1, r3
 810147a:	787b      	ldrb	r3, [r7, #1]
 810147c:	021b      	lsls	r3, r3, #8
 810147e:	4319      	orrs	r1, r3
 8101480:	7c3b      	ldrb	r3, [r7, #16]
 8101482:	430b      	orrs	r3, r1
 8101484:	0e1b      	lsrs	r3, r3, #24
 8101486:	431a      	orrs	r2, r3
 8101488:	687b      	ldr	r3, [r7, #4]
 810148a:	601a      	str	r2, [r3, #0]

	printf("R2000 : Init\n");
 810148c:	4803      	ldr	r0, [pc, #12]	@ (810149c <lidarInit+0x94>)
 810148e:	f016 f843 	bl	8117518 <puts>
}
 8101492:	bf00      	nop
 8101494:	3708      	adds	r7, #8
 8101496:	46bd      	mov	sp, r7
 8101498:	bd80      	pop	{r7, pc}
 810149a:	bf00      	nop
 810149c:	0811b644 	.word	0x0811b644

081014a0 <lidarProcess>:


void lidarProcess(){
 81014a0:	b580      	push	{r7, lr}
 81014a2:	af00      	add	r7, sp, #0
	  ethernetif_input(&gnetif);
 81014a4:	4803      	ldr	r0, [pc, #12]	@ (81014b4 <lidarProcess+0x14>)
 81014a6:	f002 ffaf 	bl	8104408 <ethernetif_input>
	  sys_check_timeouts();
 81014aa:	f012 ff2d 	bl	8114308 <sys_check_timeouts>
}
 81014ae:	bf00      	nop
 81014b0:	bd80      	pop	{r7, pc}
 81014b2:	bf00      	nop
 81014b4:	1000f9d8 	.word	0x1000f9d8

081014b8 <lidarPrintLocalIP>:

void lidarRequest(R2000_t* lidar, lidar_commands_t command, lidar_parameters_t param, int32_t value){
	httpCommand(lidar->address,command,param,value);
}

void lidarPrintLocalIP(R2000_t* lidar){
 81014b8:	b590      	push	{r4, r7, lr}
 81014ba:	b097      	sub	sp, #92	@ 0x5c
 81014bc:	af02      	add	r7, sp, #8
 81014be:	6078      	str	r0, [r7, #4]

	uint32_t IP = gnetif.ip_addr.addr;
 81014c0:	4b27      	ldr	r3, [pc, #156]	@ (8101560 <lidarPrintLocalIP+0xa8>)
 81014c2:	685b      	ldr	r3, [r3, #4]
 81014c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t netmask = gnetif.netmask.addr;
 81014c6:	4b26      	ldr	r3, [pc, #152]	@ (8101560 <lidarPrintLocalIP+0xa8>)
 81014c8:	689b      	ldr	r3, [r3, #8]
 81014ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t gateway = gnetif.gw.addr;
 81014cc:	4b24      	ldr	r3, [pc, #144]	@ (8101560 <lidarPrintLocalIP+0xa8>)
 81014ce:	68db      	ldr	r3, [r3, #12]
 81014d0:	647b      	str	r3, [r7, #68]	@ 0x44

	char IP_str[17];
	char gateway_str[17];
	char netmask_str[17];

	sprintf(IP_str, "%ld.%ld.%ld.%ld",(IP & 0xff), ((IP >> 8) & 0xff), ((IP >> 16) & 0xff), (IP >> 24));
 81014d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81014d4:	b2d9      	uxtb	r1, r3
 81014d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81014d8:	0a1b      	lsrs	r3, r3, #8
 81014da:	b2dc      	uxtb	r4, r3
 81014dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81014de:	0c1b      	lsrs	r3, r3, #16
 81014e0:	b2db      	uxtb	r3, r3
 81014e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81014e4:	0e12      	lsrs	r2, r2, #24
 81014e6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 81014ea:	9201      	str	r2, [sp, #4]
 81014ec:	9300      	str	r3, [sp, #0]
 81014ee:	4623      	mov	r3, r4
 81014f0:	460a      	mov	r2, r1
 81014f2:	491c      	ldr	r1, [pc, #112]	@ (8101564 <lidarPrintLocalIP+0xac>)
 81014f4:	f016 f818 	bl	8117528 <siprintf>
	sprintf(gateway_str, "%ld.%ld.%ld.%ld",(gateway & 0xff), ((gateway >> 8) & 0xff), ((gateway >> 16) & 0xff), (gateway >> 24));
 81014f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81014fa:	b2d9      	uxtb	r1, r3
 81014fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81014fe:	0a1b      	lsrs	r3, r3, #8
 8101500:	b2dc      	uxtb	r4, r3
 8101502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101504:	0c1b      	lsrs	r3, r3, #16
 8101506:	b2db      	uxtb	r3, r3
 8101508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810150a:	0e12      	lsrs	r2, r2, #24
 810150c:	f107 001c 	add.w	r0, r7, #28
 8101510:	9201      	str	r2, [sp, #4]
 8101512:	9300      	str	r3, [sp, #0]
 8101514:	4623      	mov	r3, r4
 8101516:	460a      	mov	r2, r1
 8101518:	4912      	ldr	r1, [pc, #72]	@ (8101564 <lidarPrintLocalIP+0xac>)
 810151a:	f016 f805 	bl	8117528 <siprintf>
	sprintf(netmask_str, "%ld.%ld.%ld.%ld",(netmask & 0xff), ((netmask >> 8) & 0xff), ((netmask >> 16) & 0xff), (netmask >> 24));
 810151e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8101520:	b2d9      	uxtb	r1, r3
 8101522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8101524:	0a1b      	lsrs	r3, r3, #8
 8101526:	b2dc      	uxtb	r4, r3
 8101528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810152a:	0c1b      	lsrs	r3, r3, #16
 810152c:	b2db      	uxtb	r3, r3
 810152e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8101530:	0e12      	lsrs	r2, r2, #24
 8101532:	f107 0008 	add.w	r0, r7, #8
 8101536:	9201      	str	r2, [sp, #4]
 8101538:	9300      	str	r3, [sp, #0]
 810153a:	4623      	mov	r3, r4
 810153c:	460a      	mov	r2, r1
 810153e:	4909      	ldr	r1, [pc, #36]	@ (8101564 <lidarPrintLocalIP+0xac>)
 8101540:	f015 fff2 	bl	8117528 <siprintf>

	printf("R2000 : Local\n\tIP : %s\n\tGW : %s\n\tMask : %s\n", IP_str, gateway_str, netmask_str);
 8101544:	f107 0308 	add.w	r3, r7, #8
 8101548:	f107 021c 	add.w	r2, r7, #28
 810154c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8101550:	4805      	ldr	r0, [pc, #20]	@ (8101568 <lidarPrintLocalIP+0xb0>)
 8101552:	f015 ff71 	bl	8117438 <iprintf>
}
 8101556:	bf00      	nop
 8101558:	3754      	adds	r7, #84	@ 0x54
 810155a:	46bd      	mov	sp, r7
 810155c:	bd90      	pop	{r4, r7, pc}
 810155e:	bf00      	nop
 8101560:	1000f9d8 	.word	0x1000f9d8
 8101564:	0811b654 	.word	0x0811b654
 8101568:	0811b664 	.word	0x0811b664

0810156c <_responseReceivedCallback>:
	"lcm_sector_enable",
	"lcm_sector_warn_flags",
	"lcm_sector_error_flags"
};

static err_t _responseReceivedCallback(LL_R2000_t* ctrl, struct pbuf *p){
 810156c:	b590      	push	{r4, r7, lr}
 810156e:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 8101572:	af00      	add	r7, sp, #0
 8101574:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8101578:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 810157c:	6018      	str	r0, [r3, #0]
 810157e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8101582:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8101586:	6019      	str	r1, [r3, #0]

	if(p -> len != 0){
 8101588:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 810158c:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8101590:	681b      	ldr	r3, [r3, #0]
 8101592:	895b      	ldrh	r3, [r3, #10]
 8101594:	2b00      	cmp	r3, #0
 8101596:	d05f      	beq.n	8101658 <_responseReceivedCallback+0xec>
		#ifdef VERBOSE_MODE
		printf("%s", (uint8_t*)p->payload);
		#endif
		*/

		tokens_t tokens = {0};
 8101598:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 810159c:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 81015a0:	4618      	mov	r0, r3
 81015a2:	f640 0302 	movw	r3, #2050	@ 0x802
 81015a6:	461a      	mov	r2, r3
 81015a8:	2100      	movs	r1, #0
 81015aa:	f016 f90f 	bl	81177cc <memset>

		parse(&tokens, (uint8_t*)p->payload, p->len);
 81015ae:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 81015b2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 81015b6:	681b      	ldr	r3, [r3, #0]
 81015b8:	6859      	ldr	r1, [r3, #4]
 81015ba:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 81015be:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 81015c2:	681b      	ldr	r3, [r3, #0]
 81015c4:	895a      	ldrh	r2, [r3, #10]
 81015c6:	f107 0308 	add.w	r3, r7, #8
 81015ca:	4618      	mov	r0, r3
 81015cc:	f001 fcfc 	bl	8102fc8 <parse>
		#ifdef VERBOSE_MODE
		printf("R2000_CMD : %s : Parsed :\n", ctrl->label);
 81015d0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 81015d4:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 81015d8:	681b      	ldr	r3, [r3, #0]
 81015da:	681b      	ldr	r3, [r3, #0]
 81015dc:	4619      	mov	r1, r3
 81015de:	4821      	ldr	r0, [pc, #132]	@ (8101664 <_responseReceivedCallback+0xf8>)
 81015e0:	f015 ff2a 	bl	8117438 <iprintf>
		for(int i = 0; i < tokens.nb; i++){
 81015e4:	2300      	movs	r3, #0
 81015e6:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 81015ea:	e02a      	b.n	8101642 <_responseReceivedCallback+0xd6>
			//printf("mark : %d %d %d %d\n", tokens.tokens[i].head_start, tokens.tokens[i].head_end, tokens.tokens[i].data_start, tokens.tokens[i].data_end);
			printf("\tToken %d : %s : %s\n", i, getHeader(p->payload,&tokens.tokens[i]), getData(p->payload,&tokens.tokens[i]));
 81015ec:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 81015f0:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 81015f4:	681b      	ldr	r3, [r3, #0]
 81015f6:	6858      	ldr	r0, [r3, #4]
 81015f8:	f107 0208 	add.w	r2, r7, #8
 81015fc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8101600:	00db      	lsls	r3, r3, #3
 8101602:	4413      	add	r3, r2
 8101604:	4619      	mov	r1, r3
 8101606:	f001 fdad 	bl	8103164 <getHeader>
 810160a:	4604      	mov	r4, r0
 810160c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8101610:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8101614:	681b      	ldr	r3, [r3, #0]
 8101616:	6858      	ldr	r0, [r3, #4]
 8101618:	f107 0208 	add.w	r2, r7, #8
 810161c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8101620:	00db      	lsls	r3, r3, #3
 8101622:	4413      	add	r3, r2
 8101624:	4619      	mov	r1, r3
 8101626:	f001 fdc3 	bl	81031b0 <getData>
 810162a:	4603      	mov	r3, r0
 810162c:	4622      	mov	r2, r4
 810162e:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8101632:	480d      	ldr	r0, [pc, #52]	@ (8101668 <_responseReceivedCallback+0xfc>)
 8101634:	f015 ff00 	bl	8117438 <iprintf>
		for(int i = 0; i < tokens.nb; i++){
 8101638:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 810163c:	3301      	adds	r3, #1
 810163e:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8101642:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8101646:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 810164a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 810164e:	461a      	mov	r2, r3
 8101650:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8101654:	4293      	cmp	r3, r2
 8101656:	dbc9      	blt.n	81015ec <_responseReceivedCallback+0x80>
		}
		#endif

	}

	return ERR_OK;
 8101658:	2300      	movs	r3, #0
}
 810165a:	4618      	mov	r0, r3
 810165c:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 8101660:	46bd      	mov	sp, r7
 8101662:	bd90      	pop	{r4, r7, pc}
 8101664:	0811bb84 	.word	0x0811bb84
 8101668:	0811bba0 	.word	0x0811bba0

0810166c <_requestSentCallback>:


static err_t _requestSentCallback(LL_R2000_t* ctrl){
 810166c:	b590      	push	{r4, r7, lr}
 810166e:	b083      	sub	sp, #12
 8101670:	af00      	add	r7, sp, #0
 8101672:	6078      	str	r0, [r7, #4]
	((char*)ctrl->args)[strlen(((char*)ctrl->args)) - 4] = '\0'; // cut the line and carriage return before printing to terminal
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	699c      	ldr	r4, [r3, #24]
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	699b      	ldr	r3, [r3, #24]
 810167c:	4618      	mov	r0, r3
 810167e:	f7fe fe8f 	bl	81003a0 <strlen>
 8101682:	4603      	mov	r3, r0
 8101684:	3b04      	subs	r3, #4
 8101686:	4423      	add	r3, r4
 8101688:	2200      	movs	r2, #0
 810168a:	701a      	strb	r2, [r3, #0]
	#ifdef VERBOSE_MODE
	printf("R2000_CMD : %s : HTTP request sent %s\n", ctrl->label, (char*)(ctrl->args));
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	6819      	ldr	r1, [r3, #0]
 8101690:	687b      	ldr	r3, [r7, #4]
 8101692:	699b      	ldr	r3, [r3, #24]
 8101694:	461a      	mov	r2, r3
 8101696:	4804      	ldr	r0, [pc, #16]	@ (81016a8 <_requestSentCallback+0x3c>)
 8101698:	f015 fece 	bl	8117438 <iprintf>
	#endif

	return ERR_OK;
 810169c:	2300      	movs	r3, #0
}
 810169e:	4618      	mov	r0, r3
 81016a0:	370c      	adds	r7, #12
 81016a2:	46bd      	mov	sp, r7
 81016a4:	bd90      	pop	{r4, r7, pc}
 81016a6:	bf00      	nop
 81016a8:	0811bbb8 	.word	0x0811bbb8

081016ac <httpCommandRaw>:

err_t httpCommandRaw(ip_addr_t address, char* command, char* label, err_t (*received_callback)(struct LL_R2000_s* ctrl, struct pbuf *p)){
 81016ac:	b580      	push	{r7, lr}
 81016ae:	b08e      	sub	sp, #56	@ 0x38
 81016b0:	af00      	add	r7, sp, #0
 81016b2:	60f8      	str	r0, [r7, #12]
 81016b4:	60b9      	str	r1, [r7, #8]
 81016b6:	607a      	str	r2, [r7, #4]
 81016b8:	603b      	str	r3, [r7, #0]

	char* request = mem_malloc(strlen(command) +1);
 81016ba:	68b8      	ldr	r0, [r7, #8]
 81016bc:	f7fe fe70 	bl	81003a0 <strlen>
 81016c0:	4603      	mov	r3, r0
 81016c2:	b29b      	uxth	r3, r3
 81016c4:	3301      	adds	r3, #1
 81016c6:	b29b      	uxth	r3, r3
 81016c8:	4618      	mov	r0, r3
 81016ca:	f00b fac7 	bl	810cc5c <mem_malloc>
 81016ce:	6378      	str	r0, [r7, #52]	@ 0x34
	char* label_ptr = mem_malloc(strlen(label) +1);
 81016d0:	6878      	ldr	r0, [r7, #4]
 81016d2:	f7fe fe65 	bl	81003a0 <strlen>
 81016d6:	4603      	mov	r3, r0
 81016d8:	b29b      	uxth	r3, r3
 81016da:	3301      	adds	r3, #1
 81016dc:	b29b      	uxth	r3, r3
 81016de:	4618      	mov	r0, r3
 81016e0:	f00b fabc 	bl	810cc5c <mem_malloc>
 81016e4:	6338      	str	r0, [r7, #48]	@ 0x30

	if(request == NULL || label_ptr == NULL){
 81016e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81016e8:	2b00      	cmp	r3, #0
 81016ea:	d002      	beq.n	81016f2 <httpCommandRaw+0x46>
 81016ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81016ee:	2b00      	cmp	r3, #0
 81016f0:	d112      	bne.n	8101718 <httpCommandRaw+0x6c>

		if(request != NULL) mem_free(request);
 81016f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81016f4:	2b00      	cmp	r3, #0
 81016f6:	d002      	beq.n	81016fe <httpCommandRaw+0x52>
 81016f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81016fa:	f00b f949 	bl	810c990 <mem_free>
		if(label_ptr != NULL) mem_free(label_ptr);
 81016fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101700:	2b00      	cmp	r3, #0
 8101702:	d002      	beq.n	810170a <httpCommandRaw+0x5e>
 8101704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101706:	f00b f943 	bl	810c990 <mem_free>

		#ifdef VERBOSE_MODE
		printf("R2000_CMD : error ! not enough memory for %s\n", label);
 810170a:	6879      	ldr	r1, [r7, #4]
 810170c:	481d      	ldr	r0, [pc, #116]	@ (8101784 <httpCommandRaw+0xd8>)
 810170e:	f015 fe93 	bl	8117438 <iprintf>
		#endif
		return ERR_MEM; // could not create the request, abort
 8101712:	f04f 33ff 	mov.w	r3, #4294967295
 8101716:	e031      	b.n	810177c <httpCommandRaw+0xd0>
	}

	memcpy(label_ptr, label , strlen(label) +1); // +1 to include the end of string marker ('\0')
 8101718:	6878      	ldr	r0, [r7, #4]
 810171a:	f7fe fe41 	bl	81003a0 <strlen>
 810171e:	4603      	mov	r3, r0
 8101720:	3301      	adds	r3, #1
 8101722:	461a      	mov	r2, r3
 8101724:	6879      	ldr	r1, [r7, #4]
 8101726:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101728:	f016 f905 	bl	8117936 <memcpy>
	memcpy(request, command, strlen(command) +1); // +1 to include the end of string marker ('\0')
 810172c:	68b8      	ldr	r0, [r7, #8]
 810172e:	f7fe fe37 	bl	81003a0 <strlen>
 8101732:	4603      	mov	r3, r0
 8101734:	3301      	adds	r3, #1
 8101736:	461a      	mov	r2, r3
 8101738:	68b9      	ldr	r1, [r7, #8]
 810173a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810173c:	f016 f8fb 	bl	8117936 <memcpy>

	LL_R2000_t ctrl = {
 8101740:	f107 0314 	add.w	r3, r7, #20
 8101744:	2200      	movs	r2, #0
 8101746:	601a      	str	r2, [r3, #0]
 8101748:	605a      	str	r2, [r3, #4]
 810174a:	609a      	str	r2, [r3, #8]
 810174c:	60da      	str	r2, [r3, #12]
 810174e:	611a      	str	r2, [r3, #16]
 8101750:	615a      	str	r2, [r3, #20]
 8101752:	619a      	str	r2, [r3, #24]
 8101754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101756:	617b      	str	r3, [r7, #20]
 8101758:	68fb      	ldr	r3, [r7, #12]
 810175a:	61bb      	str	r3, [r7, #24]
 810175c:	2301      	movs	r3, #1
 810175e:	773b      	strb	r3, [r7, #28]
 8101760:	2350      	movs	r3, #80	@ 0x50
 8101762:	843b      	strh	r3, [r7, #32]
 8101764:	4b08      	ldr	r3, [pc, #32]	@ (8101788 <httpCommandRaw+0xdc>)
 8101766:	627b      	str	r3, [r7, #36]	@ 0x24
 8101768:	683b      	ldr	r3, [r7, #0]
 810176a:	62bb      	str	r3, [r7, #40]	@ 0x28
 810176c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		.port = 80,
		.sent_callback = _requestSentCallback,
		.received_callback = received_callback,
	};

	lidarContact(&ctrl);
 8101770:	f107 0314 	add.w	r3, r7, #20
 8101774:	4618      	mov	r0, r3
 8101776:	f7ff fddf 	bl	8101338 <lidarContact>

	return ERR_OK;
 810177a:	2300      	movs	r3, #0
}
 810177c:	4618      	mov	r0, r3
 810177e:	3738      	adds	r7, #56	@ 0x38
 8101780:	46bd      	mov	sp, r7
 8101782:	bd80      	pop	{r7, pc}
 8101784:	0811bbe0 	.word	0x0811bbe0
 8101788:	0810166d 	.word	0x0810166d

0810178c <httpCommandText>:

err_t httpCommandText(ip_addr_t address, char* command, char* label){
 810178c:	b580      	push	{r7, lr}
 810178e:	b084      	sub	sp, #16
 8101790:	af00      	add	r7, sp, #0
 8101792:	60f8      	str	r0, [r7, #12]
 8101794:	60b9      	str	r1, [r7, #8]
 8101796:	607a      	str	r2, [r7, #4]
	httpCommandRaw(address, command, label, _responseReceivedCallback);
 8101798:	4b05      	ldr	r3, [pc, #20]	@ (81017b0 <httpCommandText+0x24>)
 810179a:	687a      	ldr	r2, [r7, #4]
 810179c:	68b9      	ldr	r1, [r7, #8]
 810179e:	68f8      	ldr	r0, [r7, #12]
 81017a0:	f7ff ff84 	bl	81016ac <httpCommandRaw>
}
 81017a4:	bf00      	nop
 81017a6:	4618      	mov	r0, r3
 81017a8:	3710      	adds	r7, #16
 81017aa:	46bd      	mov	sp, r7
 81017ac:	bd80      	pop	{r7, pc}
 81017ae:	bf00      	nop
 81017b0:	0810156d 	.word	0x0810156d

081017b4 <_dataReceivedCallback>:
uint16_t points_received = 0;
bool full_scan_ready = false;
R2000_data_point_t lidar_points[MAX_POINTS_PER_SCAN];
const uint16_t magic = 0xa25c;

static err_t _dataReceivedCallback(LL_R2000_t* ctrl, struct pbuf *p){
 81017b4:	b580      	push	{r7, lr}
 81017b6:	b086      	sub	sp, #24
 81017b8:	af00      	add	r7, sp, #0
 81017ba:	6078      	str	r0, [r7, #4]
 81017bc:	6039      	str	r1, [r7, #0]
	if(offset){
		printf("data cut\n");
	}
*/

	R2000_data_header_t* header = (R2000_data_header_t*) &((uint8_t*)(p->payload))[/*offset +*/2]; // skip the magic bytes (2)
 81017be:	683b      	ldr	r3, [r7, #0]
 81017c0:	685b      	ldr	r3, [r3, #4]
 81017c2:	3302      	adds	r3, #2
 81017c4:	613b      	str	r3, [r7, #16]
	printf("angular incre %ld\n", header->angular_increment);
	printf("iq input %X\n", header->iq_input);
	printf("iq ovld %X\n", header->iq_overload);
	printf("iq time %ld\n", header->iq_timestamp_raw);
*/
	R2000_data_point_t* point = (R2000_data_point_t*) &((uint8_t*)(p->payload))[/*offset +*/header->header_size];
 81017c6:	683b      	ldr	r3, [r7, #0]
 81017c8:	685b      	ldr	r3, [r3, #4]
 81017ca:	693a      	ldr	r2, [r7, #16]
 81017cc:	88d2      	ldrh	r2, [r2, #6]
 81017ce:	b292      	uxth	r2, r2
 81017d0:	4413      	add	r3, r2
 81017d2:	60fb      	str	r3, [r7, #12]
	uint16_t cursor = header -> first_index;
 81017d4:	693b      	ldr	r3, [r7, #16]
 81017d6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 81017da:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 81017de:	021b      	lsls	r3, r3, #8
 81017e0:	4313      	orrs	r3, r2
 81017e2:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < header->num_points_packet; i++, cursor++){
 81017e4:	2300      	movs	r3, #0
 81017e6:	82bb      	strh	r3, [r7, #20]
 81017e8:	e024      	b.n	8101834 <_dataReceivedCallback+0x80>
		if(cursor >= MAX_POINTS_PER_SCAN){
 81017ea:	8afb      	ldrh	r3, [r7, #22]
 81017ec:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 81017f0:	d306      	bcc.n	8101800 <_dataReceivedCallback+0x4c>
			printf("Warning ! point buffer end reached ! (are you getting more than %d points per scan ?)", MAX_POINTS_PER_SCAN);
 81017f2:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 81017f6:	4820      	ldr	r0, [pc, #128]	@ (8101878 <_dataReceivedCallback+0xc4>)
 81017f8:	f015 fe1e 	bl	8117438 <iprintf>
			cursor = 0;
 81017fc:	2300      	movs	r3, #0
 81017fe:	82fb      	strh	r3, [r7, #22]
		}

		lidar_points[cursor] = point[i];
 8101800:	8aba      	ldrh	r2, [r7, #20]
 8101802:	4613      	mov	r3, r2
 8101804:	005b      	lsls	r3, r3, #1
 8101806:	4413      	add	r3, r2
 8101808:	005b      	lsls	r3, r3, #1
 810180a:	461a      	mov	r2, r3
 810180c:	68fb      	ldr	r3, [r7, #12]
 810180e:	1898      	adds	r0, r3, r2
 8101810:	8afa      	ldrh	r2, [r7, #22]
 8101812:	491a      	ldr	r1, [pc, #104]	@ (810187c <_dataReceivedCallback+0xc8>)
 8101814:	4613      	mov	r3, r2
 8101816:	005b      	lsls	r3, r3, #1
 8101818:	4413      	add	r3, r2
 810181a:	005b      	lsls	r3, r3, #1
 810181c:	440b      	add	r3, r1
 810181e:	4602      	mov	r2, r0
 8101820:	6811      	ldr	r1, [r2, #0]
 8101822:	6019      	str	r1, [r3, #0]
 8101824:	8892      	ldrh	r2, [r2, #4]
 8101826:	809a      	strh	r2, [r3, #4]
	for (uint16_t i = 0; i < header->num_points_packet; i++, cursor++){
 8101828:	8abb      	ldrh	r3, [r7, #20]
 810182a:	3301      	adds	r3, #1
 810182c:	82bb      	strh	r3, [r7, #20]
 810182e:	8afb      	ldrh	r3, [r7, #22]
 8101830:	3301      	adds	r3, #1
 8101832:	82fb      	strh	r3, [r7, #22]
 8101834:	693b      	ldr	r3, [r7, #16]
 8101836:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8101838:	b29b      	uxth	r3, r3
 810183a:	8aba      	ldrh	r2, [r7, #20]
 810183c:	429a      	cmp	r2, r3
 810183e:	d3d4      	bcc.n	81017ea <_dataReceivedCallback+0x36>

		//if(point[i].amplitude > 500 && point[i].amplitude < 4096)
		//	printf("p%d dis%ld am%d\n",cursor, point[i].distance, point[i].amplitude);
	}

	points_received += header->num_points_packet;
 8101840:	693b      	ldr	r3, [r7, #16]
 8101842:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8101844:	b29a      	uxth	r2, r3
 8101846:	4b0e      	ldr	r3, [pc, #56]	@ (8101880 <_dataReceivedCallback+0xcc>)
 8101848:	881b      	ldrh	r3, [r3, #0]
 810184a:	4413      	add	r3, r2
 810184c:	b29a      	uxth	r2, r3
 810184e:	4b0c      	ldr	r3, [pc, #48]	@ (8101880 <_dataReceivedCallback+0xcc>)
 8101850:	801a      	strh	r2, [r3, #0]

	if(cursor == header->num_points_scan){
 8101852:	693b      	ldr	r3, [r7, #16]
 8101854:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8101856:	b29b      	uxth	r3, r3
 8101858:	8afa      	ldrh	r2, [r7, #22]
 810185a:	429a      	cmp	r2, r3
 810185c:	d107      	bne.n	810186e <_dataReceivedCallback+0xba>
		points_to_be_received = header->num_points_scan;
 810185e:	693b      	ldr	r3, [r7, #16]
 8101860:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8101862:	b29a      	uxth	r2, r3
 8101864:	4b07      	ldr	r3, [pc, #28]	@ (8101884 <_dataReceivedCallback+0xd0>)
 8101866:	801a      	strh	r2, [r3, #0]
		full_scan_ready = true; // consider that, if the cursor reaches the end of the scan points, a full scan has been received
 8101868:	4b07      	ldr	r3, [pc, #28]	@ (8101888 <_dataReceivedCallback+0xd4>)
 810186a:	2201      	movs	r2, #1
 810186c:	701a      	strb	r2, [r3, #0]
	}
}
 810186e:	bf00      	nop
 8101870:	4618      	mov	r0, r3
 8101872:	3718      	adds	r7, #24
 8101874:	46bd      	mov	sp, r7
 8101876:	bd80      	pop	{r7, pc}
 8101878:	0811bc64 	.word	0x0811bc64
 810187c:	10000478 	.word	0x10000478
 8101880:	10000472 	.word	0x10000472
 8101884:	10000470 	.word	0x10000470
 8101888:	10000474 	.word	0x10000474

0810188c <_responseReceivedCallback>:

static err_t _responseReceivedCallback(LL_R2000_t* ctrl, struct pbuf *p){
 810188c:	b590      	push	{r4, r7, lr}
 810188e:	f6ad 1d4c 	subw	sp, sp, #2380	@ 0x94c
 8101892:	af00      	add	r7, sp, #0
 8101894:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101898:	f6a3 1344 	subw	r3, r3, #2372	@ 0x944
 810189c:	6018      	str	r0, [r3, #0]
 810189e:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 81018a2:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 81018a6:	6019      	str	r1, [r3, #0]
	if(p -> len == 0) return ERR_VAL;
 81018a8:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 81018ac:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 81018b0:	681b      	ldr	r3, [r3, #0]
 81018b2:	895b      	ldrh	r3, [r3, #10]
 81018b4:	2b00      	cmp	r3, #0
 81018b6:	d102      	bne.n	81018be <_responseReceivedCallback+0x32>
 81018b8:	f06f 0305 	mvn.w	r3, #5
 81018bc:	e1e3      	b.n	8101c86 <_responseReceivedCallback+0x3fa>
	#ifdef VERBOSE_MODE
	printf("R2000_DAT : %s : Raw response : \n%s", ctrl->label, (uint8_t*)p->payload);
	#endif
	*/

	tokens_t tokens = {0};
 81018be:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 81018c2:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 81018c6:	4618      	mov	r0, r3
 81018c8:	f640 0302 	movw	r3, #2050	@ 0x802
 81018cc:	461a      	mov	r2, r3
 81018ce:	2100      	movs	r1, #0
 81018d0:	f015 ff7c 	bl	81177cc <memset>
	parse(&tokens, (uint8_t*)p->payload, p->len);
 81018d4:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 81018d8:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 81018dc:	681b      	ldr	r3, [r3, #0]
 81018de:	6859      	ldr	r1, [r3, #4]
 81018e0:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 81018e4:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 81018e8:	681b      	ldr	r3, [r3, #0]
 81018ea:	895a      	ldrh	r2, [r3, #10]
 81018ec:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 81018f0:	4618      	mov	r0, r3
 81018f2:	f001 fb69 	bl	8102fc8 <parse>

	#ifdef VERBOSE_MODE
	printf("R2000_DAT : %s : Parsed :\n", ctrl->label);
 81018f6:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 81018fa:	f6a3 1344 	subw	r3, r3, #2372	@ 0x944
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	681b      	ldr	r3, [r3, #0]
 8101902:	4619      	mov	r1, r3
 8101904:	48ba      	ldr	r0, [pc, #744]	@ (8101bf0 <_responseReceivedCallback+0x364>)
 8101906:	f015 fd97 	bl	8117438 <iprintf>
	for(int i = 0; i < tokens.nb; i++){
 810190a:	2300      	movs	r3, #0
 810190c:	f8c7 3944 	str.w	r3, [r7, #2372]	@ 0x944
 8101910:	e02a      	b.n	8101968 <_responseReceivedCallback+0xdc>
		//printf("mark : %d %d %d %d\n", tokens.tokens[i].head_start, tokens.tokens[i].head_end, tokens.tokens[i].data_start, tokens.tokens[i].data_end);
		printf("\tToken %d : %s : %s\n", i, getHeader(p->payload,&tokens.tokens[i]), getData(p->payload,&tokens.tokens[i]));
 8101912:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101916:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 810191a:	681b      	ldr	r3, [r3, #0]
 810191c:	6858      	ldr	r0, [r3, #4]
 810191e:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8101922:	f8d7 3944 	ldr.w	r3, [r7, #2372]	@ 0x944
 8101926:	00db      	lsls	r3, r3, #3
 8101928:	4413      	add	r3, r2
 810192a:	4619      	mov	r1, r3
 810192c:	f001 fc1a 	bl	8103164 <getHeader>
 8101930:	4604      	mov	r4, r0
 8101932:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101936:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 810193a:	681b      	ldr	r3, [r3, #0]
 810193c:	6858      	ldr	r0, [r3, #4]
 810193e:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8101942:	f8d7 3944 	ldr.w	r3, [r7, #2372]	@ 0x944
 8101946:	00db      	lsls	r3, r3, #3
 8101948:	4413      	add	r3, r2
 810194a:	4619      	mov	r1, r3
 810194c:	f001 fc30 	bl	81031b0 <getData>
 8101950:	4603      	mov	r3, r0
 8101952:	4622      	mov	r2, r4
 8101954:	f8d7 1944 	ldr.w	r1, [r7, #2372]	@ 0x944
 8101958:	48a6      	ldr	r0, [pc, #664]	@ (8101bf4 <_responseReceivedCallback+0x368>)
 810195a:	f015 fd6d 	bl	8117438 <iprintf>
	for(int i = 0; i < tokens.nb; i++){
 810195e:	f8d7 3944 	ldr.w	r3, [r7, #2372]	@ 0x944
 8101962:	3301      	adds	r3, #1
 8101964:	f8c7 3944 	str.w	r3, [r7, #2372]	@ 0x944
 8101968:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 810196c:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8101970:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8101974:	461a      	mov	r2, r3
 8101976:	f8d7 3944 	ldr.w	r3, [r7, #2372]	@ 0x944
 810197a:	4293      	cmp	r3, r2
 810197c:	dbc9      	blt.n	8101912 <_responseReceivedCallback+0x86>
	}
	#endif

//#error huuummm ... il ne semble pas trouver de port dans les tokens ?

	R2000_data_stream_t* metadata = mem_malloc(sizeof(R2000_data_stream_t));
 810197e:	2016      	movs	r0, #22
 8101980:	f00b f96c 	bl	810cc5c <mem_malloc>
 8101984:	f8c7 093c 	str.w	r0, [r7, #2364]	@ 0x93c

	char label[] = {"Data stream"};
 8101988:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 810198c:	f5a3 6302 	sub.w	r3, r3, #2080	@ 0x820
 8101990:	4a99      	ldr	r2, [pc, #612]	@ (8101bf8 <_responseReceivedCallback+0x36c>)
 8101992:	ca07      	ldmia	r2, {r0, r1, r2}
 8101994:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	char* label_ptr = mem_malloc(strlen(label));
 8101998:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 810199c:	4618      	mov	r0, r3
 810199e:	f7fe fcff 	bl	81003a0 <strlen>
 81019a2:	4603      	mov	r3, r0
 81019a4:	b29b      	uxth	r3, r3
 81019a6:	4618      	mov	r0, r3
 81019a8:	f00b f958 	bl	810cc5c <mem_malloc>
 81019ac:	f8c7 0938 	str.w	r0, [r7, #2360]	@ 0x938

	if(metadata == NULL || label_ptr == NULL){
 81019b0:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 81019b4:	2b00      	cmp	r3, #0
 81019b6:	d003      	beq.n	81019c0 <_responseReceivedCallback+0x134>
 81019b8:	f8d7 3938 	ldr.w	r3, [r7, #2360]	@ 0x938
 81019bc:	2b00      	cmp	r3, #0
 81019be:	d11c      	bne.n	81019fa <_responseReceivedCallback+0x16e>

		if(metadata != NULL) mem_free(metadata);
 81019c0:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 81019c4:	2b00      	cmp	r3, #0
 81019c6:	d003      	beq.n	81019d0 <_responseReceivedCallback+0x144>
 81019c8:	f8d7 093c 	ldr.w	r0, [r7, #2364]	@ 0x93c
 81019cc:	f00a ffe0 	bl	810c990 <mem_free>
		if(label_ptr != NULL) mem_free(label_ptr);
 81019d0:	f8d7 3938 	ldr.w	r3, [r7, #2360]	@ 0x938
 81019d4:	2b00      	cmp	r3, #0
 81019d6:	d003      	beq.n	81019e0 <_responseReceivedCallback+0x154>
 81019d8:	f8d7 0938 	ldr.w	r0, [r7, #2360]	@ 0x938
 81019dc:	f00a ffd8 	bl	810c990 <mem_free>

		#ifdef VERBOSE_MODE
		printf("R2000_DAT : %s : Not enough memory !\n", ctrl->label);
 81019e0:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 81019e4:	f6a3 1344 	subw	r3, r3, #2372	@ 0x944
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	681b      	ldr	r3, [r3, #0]
 81019ec:	4619      	mov	r1, r3
 81019ee:	4883      	ldr	r0, [pc, #524]	@ (8101bfc <_responseReceivedCallback+0x370>)
 81019f0:	f015 fd22 	bl	8117438 <iprintf>
		#endif
		return ERR_MEM; // could not create the request, abort
 81019f4:	f04f 33ff 	mov.w	r3, #4294967295
 81019f8:	e145      	b.n	8101c86 <_responseReceivedCallback+0x3fa>
	}

	memcpy(label_ptr, label, strlen(label) + 1);
 81019fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 81019fe:	4618      	mov	r0, r3
 8101a00:	f7fe fcce 	bl	81003a0 <strlen>
 8101a04:	4603      	mov	r3, r0
 8101a06:	1c5a      	adds	r2, r3, #1
 8101a08:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8101a0c:	4619      	mov	r1, r3
 8101a0e:	f8d7 0938 	ldr.w	r0, [r7, #2360]	@ 0x938
 8101a12:	f015 ff90 	bl	8117936 <memcpy>

	for (uint16_t i = 0; i < tokens.nb; i++){
 8101a16:	2300      	movs	r3, #0
 8101a18:	f8a7 3942 	strh.w	r3, [r7, #2370]	@ 0x942
 8101a1c:	e08d      	b.n	8101b3a <_responseReceivedCallback+0x2ae>
		if(is_header("port")){
 8101a1e:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101a22:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8101a26:	681b      	ldr	r3, [r3, #0]
 8101a28:	6858      	ldr	r0, [r3, #4]
 8101a2a:	f8b7 3942 	ldrh.w	r3, [r7, #2370]	@ 0x942
 8101a2e:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8101a32:	00db      	lsls	r3, r3, #3
 8101a34:	4413      	add	r3, r2
 8101a36:	4619      	mov	r1, r3
 8101a38:	f001 fb94 	bl	8103164 <getHeader>
 8101a3c:	4603      	mov	r3, r0
 8101a3e:	4970      	ldr	r1, [pc, #448]	@ (8101c00 <_responseReceivedCallback+0x374>)
 8101a40:	4618      	mov	r0, r3
 8101a42:	f7fe fc4d 	bl	81002e0 <strcmp>
 8101a46:	4603      	mov	r3, r0
 8101a48:	2b00      	cmp	r3, #0
 8101a4a:	d116      	bne.n	8101a7a <_responseReceivedCallback+0x1ee>
			get_data_short(metadata->port);
 8101a4c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101a50:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	6858      	ldr	r0, [r3, #4]
 8101a58:	f8b7 3942 	ldrh.w	r3, [r7, #2370]	@ 0x942
 8101a5c:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8101a60:	00db      	lsls	r3, r3, #3
 8101a62:	4413      	add	r3, r2
 8101a64:	4619      	mov	r1, r3
 8101a66:	f001 fba3 	bl	81031b0 <getData>
 8101a6a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101a6e:	3312      	adds	r3, #18
 8101a70:	461a      	mov	r2, r3
 8101a72:	4964      	ldr	r1, [pc, #400]	@ (8101c04 <_responseReceivedCallback+0x378>)
 8101a74:	f015 fd7a 	bl	811756c <siscanf>
 8101a78:	e05a      	b.n	8101b30 <_responseReceivedCallback+0x2a4>
		} else if (is_header("handle")) {
 8101a7a:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101a7e:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8101a82:	681b      	ldr	r3, [r3, #0]
 8101a84:	6858      	ldr	r0, [r3, #4]
 8101a86:	f8b7 3942 	ldrh.w	r3, [r7, #2370]	@ 0x942
 8101a8a:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8101a8e:	00db      	lsls	r3, r3, #3
 8101a90:	4413      	add	r3, r2
 8101a92:	4619      	mov	r1, r3
 8101a94:	f001 fb66 	bl	8103164 <getHeader>
 8101a98:	4603      	mov	r3, r0
 8101a9a:	495b      	ldr	r1, [pc, #364]	@ (8101c08 <_responseReceivedCallback+0x37c>)
 8101a9c:	4618      	mov	r0, r3
 8101a9e:	f7fe fc1f 	bl	81002e0 <strcmp>
 8101aa2:	4603      	mov	r3, r0
 8101aa4:	2b00      	cmp	r3, #0
 8101aa6:	d116      	bne.n	8101ad6 <_responseReceivedCallback+0x24a>
			get_data_str(metadata->handle);
 8101aa8:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101aac:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8101ab0:	681b      	ldr	r3, [r3, #0]
 8101ab2:	6858      	ldr	r0, [r3, #4]
 8101ab4:	f8b7 3942 	ldrh.w	r3, [r7, #2370]	@ 0x942
 8101ab8:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8101abc:	00db      	lsls	r3, r3, #3
 8101abe:	4413      	add	r3, r2
 8101ac0:	4619      	mov	r1, r3
 8101ac2:	f001 fb75 	bl	81031b0 <getData>
 8101ac6:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101aca:	3301      	adds	r3, #1
 8101acc:	461a      	mov	r2, r3
 8101ace:	494f      	ldr	r1, [pc, #316]	@ (8101c0c <_responseReceivedCallback+0x380>)
 8101ad0:	f015 fd4c 	bl	811756c <siscanf>
 8101ad4:	e02c      	b.n	8101b30 <_responseReceivedCallback+0x2a4>
		} else if (is_header("error_code")) {
 8101ad6:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101ada:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	6858      	ldr	r0, [r3, #4]
 8101ae2:	f8b7 3942 	ldrh.w	r3, [r7, #2370]	@ 0x942
 8101ae6:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8101aea:	00db      	lsls	r3, r3, #3
 8101aec:	4413      	add	r3, r2
 8101aee:	4619      	mov	r1, r3
 8101af0:	f001 fb38 	bl	8103164 <getHeader>
 8101af4:	4603      	mov	r3, r0
 8101af6:	4946      	ldr	r1, [pc, #280]	@ (8101c10 <_responseReceivedCallback+0x384>)
 8101af8:	4618      	mov	r0, r3
 8101afa:	f7fe fbf1 	bl	81002e0 <strcmp>
 8101afe:	4603      	mov	r3, r0
 8101b00:	2b00      	cmp	r3, #0
 8101b02:	d115      	bne.n	8101b30 <_responseReceivedCallback+0x2a4>
			get_data_long(metadata->error_code);
 8101b04:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101b08:	f6a3 1348 	subw	r3, r3, #2376	@ 0x948
 8101b0c:	681b      	ldr	r3, [r3, #0]
 8101b0e:	6858      	ldr	r0, [r3, #4]
 8101b10:	f8b7 3942 	ldrh.w	r3, [r7, #2370]	@ 0x942
 8101b14:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8101b18:	00db      	lsls	r3, r3, #3
 8101b1a:	4413      	add	r3, r2
 8101b1c:	4619      	mov	r1, r3
 8101b1e:	f001 fb47 	bl	81031b0 <getData>
 8101b22:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101b26:	3314      	adds	r3, #20
 8101b28:	461a      	mov	r2, r3
 8101b2a:	493a      	ldr	r1, [pc, #232]	@ (8101c14 <_responseReceivedCallback+0x388>)
 8101b2c:	f015 fd1e 	bl	811756c <siscanf>
	for (uint16_t i = 0; i < tokens.nb; i++){
 8101b30:	f8b7 3942 	ldrh.w	r3, [r7, #2370]	@ 0x942
 8101b34:	3301      	adds	r3, #1
 8101b36:	f8a7 3942 	strh.w	r3, [r7, #2370]	@ 0x942
 8101b3a:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101b3e:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8101b42:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8101b46:	f8b7 2942 	ldrh.w	r2, [r7, #2370]	@ 0x942
 8101b4a:	429a      	cmp	r2, r3
 8101b4c:	f4ff af67 	bcc.w	8101a1e <_responseReceivedCallback+0x192>
		}
	}

	metadata->type = udp; // WARNING : StartDataStream's type needs to match this !!!
 8101b50:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101b54:	2201      	movs	r2, #1
 8101b56:	701a      	strb	r2, [r3, #0]
	// TODO : make the user select the connexion type
	// TODO : implement udp (need to bind to the port returned by the sensor)

	if(metadata->type == udp){
 8101b58:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101b5c:	781b      	ldrb	r3, [r3, #0]
 8101b5e:	2b01      	cmp	r3, #1
 8101b60:	d105      	bne.n	8101b6e <_responseReceivedCallback+0x2e2>
		metadata->port = incoming_udp_data_port;
 8101b62:	f243 0239 	movw	r2, #12345	@ 0x3039
 8101b66:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101b6a:	825a      	strh	r2, [r3, #18]
 8101b6c:	e019      	b.n	8101ba2 <_responseReceivedCallback+0x316>
	} else {
		if(metadata->port == 0){
 8101b6e:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101b72:	8a5b      	ldrh	r3, [r3, #18]
 8101b74:	2b00      	cmp	r3, #0
 8101b76:	d114      	bne.n	8101ba2 <_responseReceivedCallback+0x316>
			#ifdef VERBOSE_MODE
			printf("R2000_DAT : %s : Returned port is 0, aborting ...\n", ctrl->label);
 8101b78:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101b7c:	f6a3 1344 	subw	r3, r3, #2372	@ 0x944
 8101b80:	681b      	ldr	r3, [r3, #0]
 8101b82:	681b      	ldr	r3, [r3, #0]
 8101b84:	4619      	mov	r1, r3
 8101b86:	4824      	ldr	r0, [pc, #144]	@ (8101c18 <_responseReceivedCallback+0x38c>)
 8101b88:	f015 fc56 	bl	8117438 <iprintf>
			#endif
			mem_free(metadata);
 8101b8c:	f8d7 093c 	ldr.w	r0, [r7, #2364]	@ 0x93c
 8101b90:	f00a fefe 	bl	810c990 <mem_free>
			mem_free(label_ptr);
 8101b94:	f8d7 0938 	ldr.w	r0, [r7, #2360]	@ 0x938
 8101b98:	f00a fefa 	bl	810c990 <mem_free>
			return ERR_VAL;
 8101b9c:	f06f 0305 	mvn.w	r3, #5
 8101ba0:	e071      	b.n	8101c86 <_responseReceivedCallback+0x3fa>
		}
	}

	LL_R2000_t stream_ctrl = {
 8101ba2:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101ba6:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8101baa:	461a      	mov	r2, r3
 8101bac:	2300      	movs	r3, #0
 8101bae:	6013      	str	r3, [r2, #0]
 8101bb0:	6053      	str	r3, [r2, #4]
 8101bb2:	6093      	str	r3, [r2, #8]
 8101bb4:	60d3      	str	r3, [r2, #12]
 8101bb6:	6113      	str	r3, [r2, #16]
 8101bb8:	6153      	str	r3, [r2, #20]
 8101bba:	6193      	str	r3, [r2, #24]
 8101bbc:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101bc0:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8101bc4:	f8d7 2938 	ldr.w	r2, [r7, #2360]	@ 0x938
 8101bc8:	601a      	str	r2, [r3, #0]
 8101bca:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101bce:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8101bd2:	f607 1248 	addw	r2, r7, #2376	@ 0x948
 8101bd6:	f6a2 1244 	subw	r2, r2, #2372	@ 0x944
 8101bda:	6812      	ldr	r2, [r2, #0]
 8101bdc:	6852      	ldr	r2, [r2, #4]
 8101bde:	605a      	str	r2, [r3, #4]
		.label = label_ptr,
		.addr = ctrl->addr,
		.args = metadata,
		.operation = (metadata->type == tcp ? data_stream_tcp : data_stream_udp),
 8101be0:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101be4:	781b      	ldrb	r3, [r3, #0]
 8101be6:	2b00      	cmp	r3, #0
 8101be8:	d118      	bne.n	8101c1c <_responseReceivedCallback+0x390>
 8101bea:	2203      	movs	r2, #3
 8101bec:	e017      	b.n	8101c1e <_responseReceivedCallback+0x392>
 8101bee:	bf00      	nop
 8101bf0:	0811bcbc 	.word	0x0811bcbc
 8101bf4:	0811bcd8 	.word	0x0811bcd8
 8101bf8:	0811bdb4 	.word	0x0811bdb4
 8101bfc:	0811bcf0 	.word	0x0811bcf0
 8101c00:	0811bd18 	.word	0x0811bd18
 8101c04:	0811bd20 	.word	0x0811bd20
 8101c08:	0811bd24 	.word	0x0811bd24
 8101c0c:	0811bd2c 	.word	0x0811bd2c
 8101c10:	0811bd30 	.word	0x0811bd30
 8101c14:	0811bd3c 	.word	0x0811bd3c
 8101c18:	0811bd40 	.word	0x0811bd40
 8101c1c:	2202      	movs	r2, #2
	LL_R2000_t stream_ctrl = {
 8101c1e:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101c22:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8101c26:	721a      	strb	r2, [r3, #8]
		.port = metadata->port,
 8101c28:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101c2c:	8a5a      	ldrh	r2, [r3, #18]
	LL_R2000_t stream_ctrl = {
 8101c2e:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101c32:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8101c36:	819a      	strh	r2, [r3, #12]
 8101c38:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101c3c:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8101c40:	4a13      	ldr	r2, [pc, #76]	@ (8101c90 <_responseReceivedCallback+0x404>)
 8101c42:	615a      	str	r2, [r3, #20]
 8101c44:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101c48:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8101c4c:	f8d7 293c 	ldr.w	r2, [r7, #2364]	@ 0x93c
 8101c50:	619a      	str	r2, [r3, #24]
		.received_callback = _dataReceivedCallback,
	};

	lidarContact(&stream_ctrl);
 8101c52:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8101c56:	4618      	mov	r0, r3
 8101c58:	f7ff fb6e 	bl	8101338 <lidarContact>

	char string[256];
	sprintf(string, "GET /cmd/start_scanoutput?handle=%s HTTP/1.1\r\n\r\n", metadata->handle);
 8101c5c:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8101c60:	1c5a      	adds	r2, r3, #1
 8101c62:	f107 030c 	add.w	r3, r7, #12
 8101c66:	490b      	ldr	r1, [pc, #44]	@ (8101c94 <_responseReceivedCallback+0x408>)
 8101c68:	4618      	mov	r0, r3
 8101c6a:	f015 fc5d 	bl	8117528 <siprintf>
	httpCommandText(ctrl->addr, string, "Scan start");
 8101c6e:	f107 010c 	add.w	r1, r7, #12
 8101c72:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8101c76:	f6a3 1344 	subw	r3, r3, #2372	@ 0x944
 8101c7a:	681b      	ldr	r3, [r3, #0]
 8101c7c:	4a06      	ldr	r2, [pc, #24]	@ (8101c98 <_responseReceivedCallback+0x40c>)
 8101c7e:	6858      	ldr	r0, [r3, #4]
 8101c80:	f7ff fd84 	bl	810178c <httpCommandText>

	return ERR_OK;
 8101c84:	2300      	movs	r3, #0
}
 8101c86:	4618      	mov	r0, r3
 8101c88:	f607 174c 	addw	r7, r7, #2380	@ 0x94c
 8101c8c:	46bd      	mov	sp, r7
 8101c8e:	bd90      	pop	{r4, r7, pc}
 8101c90:	081017b5 	.word	0x081017b5
 8101c94:	0811bd74 	.word	0x0811bd74
 8101c98:	0811bda8 	.word	0x0811bda8

08101c9c <startDataStreamUDP>:

err_t startDataStreamUDP(ip_addr_t address){
 8101c9c:	b5b0      	push	{r4, r5, r7, lr}
 8101c9e:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8101ca2:	af02      	add	r7, sp, #8
 8101ca4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8101ca8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8101cac:	6018      	str	r0, [r3, #0]
	char string[256];

	char local_ip[17];
	uint32_t IP = gnetif.ip_addr.addr;
 8101cae:	4b37      	ldr	r3, [pc, #220]	@ (8101d8c <startDataStreamUDP+0xf0>)
 8101cb0:	685b      	ldr	r3, [r3, #4]
 8101cb2:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
	sprintf(local_ip, "%ld.%ld.%ld.%ld",(IP & 0xff), ((IP >> 8) & 0xff), ((IP >> 16) & 0xff), (IP >> 24));
 8101cb6:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8101cba:	b2d9      	uxtb	r1, r3
 8101cbc:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8101cc0:	0a1b      	lsrs	r3, r3, #8
 8101cc2:	b2dc      	uxtb	r4, r3
 8101cc4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8101cc8:	0c1b      	lsrs	r3, r3, #16
 8101cca:	b2db      	uxtb	r3, r3
 8101ccc:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8101cd0:	0e12      	lsrs	r2, r2, #24
 8101cd2:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101cd6:	9201      	str	r2, [sp, #4]
 8101cd8:	9300      	str	r3, [sp, #0]
 8101cda:	4623      	mov	r3, r4
 8101cdc:	460a      	mov	r2, r1
 8101cde:	492c      	ldr	r1, [pc, #176]	@ (8101d90 <startDataStreamUDP+0xf4>)
 8101ce0:	f015 fc22 	bl	8117528 <siprintf>

	sprintf(string, "GET /cmd/request_handle_udp?"
 8101ce4:	f243 0339 	movw	r3, #12345	@ 0x3039
 8101ce8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101cec:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8101cf0:	4928      	ldr	r1, [pc, #160]	@ (8101d94 <startDataStreamUDP+0xf8>)
 8101cf2:	f015 fc19 	bl	8117528 <siprintf>
					"&port=%d"
					//"&skip_scans=19"

					" HTTP/1.1\r\n\r\n", local_ip, incoming_udp_data_port);

	httpCommandRaw(address, string, "Handle rqst UDP", _responseReceivedCallback);
 8101cf6:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8101cfa:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8101cfe:	f5a3 700b 	sub.w	r0, r3, #556	@ 0x22c
 8101d02:	4b25      	ldr	r3, [pc, #148]	@ (8101d98 <startDataStreamUDP+0xfc>)
 8101d04:	4a25      	ldr	r2, [pc, #148]	@ (8101d9c <startDataStreamUDP+0x100>)
 8101d06:	6800      	ldr	r0, [r0, #0]
 8101d08:	f7ff fcd0 	bl	81016ac <httpCommandRaw>

	char filter_width[] = {"GET /cmd/set_parameter?filter_width=2 HTTP/1.1\r\n\r\n"};
 8101d0c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8101d10:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8101d14:	4a22      	ldr	r2, [pc, #136]	@ (8101da0 <startDataStreamUDP+0x104>)
 8101d16:	461c      	mov	r4, r3
 8101d18:	4615      	mov	r5, r2
 8101d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101d26:	682b      	ldr	r3, [r5, #0]
 8101d28:	461a      	mov	r2, r3
 8101d2a:	8022      	strh	r2, [r4, #0]
 8101d2c:	3402      	adds	r4, #2
 8101d2e:	0c1b      	lsrs	r3, r3, #16
 8101d30:	7023      	strb	r3, [r4, #0]
	char filter_type[] = {"GET /cmd/set_parameter?filter_type=remission HTTP/1.1\r\n\r\n"};
 8101d32:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8101d36:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8101d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8101da4 <startDataStreamUDP+0x108>)
 8101d3c:	461c      	mov	r4, r3
 8101d3e:	4615      	mov	r5, r2
 8101d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101d4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8101d50:	c403      	stmia	r4!, {r0, r1}
 8101d52:	8022      	strh	r2, [r4, #0]
	char filter_reflector[] = {"GET /cmd/set_parameter?filter_remission_threshold=reflector_std HTTP/1.1\r\n\r\n"};
 8101d54:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8101d58:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8101d5c:	4a12      	ldr	r2, [pc, #72]	@ (8101da8 <startDataStreamUDP+0x10c>)
 8101d5e:	4618      	mov	r0, r3
 8101d60:	4611      	mov	r1, r2
 8101d62:	234d      	movs	r3, #77	@ 0x4d
 8101d64:	461a      	mov	r2, r3
 8101d66:	f015 fde6 	bl	8117936 <memcpy>
	char filter_treshold[] = {"GET /cmd/set_parameter?filter_remission_threshold=reflector_std HTTP/1.1\r\n\r\n"};
 8101d6a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8101d6e:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8101d72:	4a0d      	ldr	r2, [pc, #52]	@ (8101da8 <startDataStreamUDP+0x10c>)
 8101d74:	4618      	mov	r0, r3
 8101d76:	4611      	mov	r1, r2
 8101d78:	234d      	movs	r3, #77	@ 0x4d
 8101d7a:	461a      	mov	r2, r3
 8101d7c:	f015 fddb 	bl	8117936 <memcpy>
	//httpCommandText(address, filter_type, "Filter Type");
	//httpCommandText(address, filter_width, "Filter Width");
	//httpCommandText(address, filter_reflector, "Filter Reflector");
	//httpCommandText(address, filter_treshold, "Filter Treshold");

	return ERR_OK;
 8101d80:	2300      	movs	r3, #0
}
 8101d82:	4618      	mov	r0, r3
 8101d84:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8101d88:	46bd      	mov	sp, r7
 8101d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8101d8c:	1000f9d8 	.word	0x1000f9d8
 8101d90:	0811bdc0 	.word	0x0811bdc0
 8101d94:	0811bdd0 	.word	0x0811bdd0
 8101d98:	0810188d 	.word	0x0810188d
 8101d9c:	0811be28 	.word	0x0811be28
 8101da0:	0811be38 	.word	0x0811be38
 8101da4:	0811be6c 	.word	0x0811be6c
 8101da8:	0811bea8 	.word	0x0811bea8

08101dac <_dist>:
#include <stdlib.h>
#include <stdbool.h>

#define VERBOSE

static float _dist(float x1, float y1, float x2, float y2){return sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));}
 8101dac:	b580      	push	{r7, lr}
 8101dae:	b084      	sub	sp, #16
 8101db0:	af00      	add	r7, sp, #0
 8101db2:	ed87 0a03 	vstr	s0, [r7, #12]
 8101db6:	edc7 0a02 	vstr	s1, [r7, #8]
 8101dba:	ed87 1a01 	vstr	s2, [r7, #4]
 8101dbe:	edc7 1a00 	vstr	s3, [r7]
 8101dc2:	ed97 7a01 	vldr	s14, [r7, #4]
 8101dc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8101dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101dce:	edd7 6a01 	vldr	s13, [r7, #4]
 8101dd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8101dd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101dde:	edd7 6a00 	vldr	s13, [r7]
 8101de2:	edd7 7a02 	vldr	s15, [r7, #8]
 8101de6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8101dea:	ed97 6a00 	vldr	s12, [r7]
 8101dee:	edd7 7a02 	vldr	s15, [r7, #8]
 8101df2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8101df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101dfe:	ee17 0a90 	vmov	r0, s15
 8101e02:	f7fe fc39 	bl	8100678 <__aeabi_f2d>
 8101e06:	4602      	mov	r2, r0
 8101e08:	460b      	mov	r3, r1
 8101e0a:	ec43 2b10 	vmov	d0, r2, r3
 8101e0e:	f012 fddb 	bl	81149c8 <sqrt>
 8101e12:	ec53 2b10 	vmov	r2, r3, d0
 8101e16:	4610      	mov	r0, r2
 8101e18:	4619      	mov	r1, r3
 8101e1a:	f7fe ff7d 	bl	8100d18 <__aeabi_d2f>
 8101e1e:	4603      	mov	r3, r0
 8101e20:	ee07 3a90 	vmov	s15, r3
 8101e24:	eeb0 0a67 	vmov.f32	s0, s15
 8101e28:	3710      	adds	r7, #16
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	bd80      	pop	{r7, pc}

08101e2e <_inside>:
static bool _inside(float x, float y, float x1, float y1, float x2, float y2){return (x > x1 && x < x2 && y > y1 && y < y2);}
 8101e2e:	b480      	push	{r7}
 8101e30:	b087      	sub	sp, #28
 8101e32:	af00      	add	r7, sp, #0
 8101e34:	ed87 0a05 	vstr	s0, [r7, #20]
 8101e38:	edc7 0a04 	vstr	s1, [r7, #16]
 8101e3c:	ed87 1a03 	vstr	s2, [r7, #12]
 8101e40:	edc7 1a02 	vstr	s3, [r7, #8]
 8101e44:	ed87 2a01 	vstr	s4, [r7, #4]
 8101e48:	edc7 2a00 	vstr	s5, [r7]
 8101e4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8101e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8101e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101e5c:	dd1c      	ble.n	8101e98 <_inside+0x6a>
 8101e5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8101e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8101e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101e6e:	d513      	bpl.n	8101e98 <_inside+0x6a>
 8101e70:	ed97 7a04 	vldr	s14, [r7, #16]
 8101e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8101e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101e80:	dd0a      	ble.n	8101e98 <_inside+0x6a>
 8101e82:	ed97 7a04 	vldr	s14, [r7, #16]
 8101e86:	edd7 7a00 	vldr	s15, [r7]
 8101e8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101e92:	d501      	bpl.n	8101e98 <_inside+0x6a>
 8101e94:	2301      	movs	r3, #1
 8101e96:	e000      	b.n	8101e9a <_inside+0x6c>
 8101e98:	2300      	movs	r3, #0
 8101e9a:	f003 0301 	and.w	r3, r3, #1
 8101e9e:	b2db      	uxtb	r3, r3
 8101ea0:	4618      	mov	r0, r3
 8101ea2:	371c      	adds	r7, #28
 8101ea4:	46bd      	mov	sp, r7
 8101ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eaa:	4770      	bx	lr

08101eac <setPosition>:

void setPosition(loc_t* handle, float x, float y, float theta){
 8101eac:	b4b0      	push	{r4, r5, r7}
 8101eae:	b087      	sub	sp, #28
 8101eb0:	af00      	add	r7, sp, #0
 8101eb2:	60f8      	str	r0, [r7, #12]
 8101eb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8101eb8:	edc7 0a01 	vstr	s1, [r7, #4]
 8101ebc:	ed87 1a00 	vstr	s2, [r7]
    handle->robot.x = x;
 8101ec0:	68fb      	ldr	r3, [r7, #12]
 8101ec2:	68ba      	ldr	r2, [r7, #8]
 8101ec4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle->robot.y = y;
 8101ec6:	68fb      	ldr	r3, [r7, #12]
 8101ec8:	687a      	ldr	r2, [r7, #4]
 8101eca:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle->robot.t = theta;
 8101ecc:	68fb      	ldr	r3, [r7, #12]
 8101ece:	683a      	ldr	r2, [r7, #0]
 8101ed0:	631a      	str	r2, [r3, #48]	@ 0x30

    handle->robot.trsl_spd = 0;
 8101ed2:	68fb      	ldr	r3, [r7, #12]
 8101ed4:	f04f 0200 	mov.w	r2, #0
 8101ed8:	635a      	str	r2, [r3, #52]	@ 0x34
    handle->robot.angular_spd = 0;
 8101eda:	68fb      	ldr	r3, [r7, #12]
 8101edc:	f04f 0200 	mov.w	r2, #0
 8101ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    handle->robot.trvled_x = 0;
 8101ee2:	68fb      	ldr	r3, [r7, #12]
 8101ee4:	f04f 0200 	mov.w	r2, #0
 8101ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle->robot.trvled_y = 0;
 8101eea:	68fb      	ldr	r3, [r7, #12]
 8101eec:	f04f 0200 	mov.w	r2, #0
 8101ef0:	649a      	str	r2, [r3, #72]	@ 0x48
    handle->robot.trvled_t = 0;
 8101ef2:	68fb      	ldr	r3, [r7, #12]
 8101ef4:	f04f 0200 	mov.w	r2, #0
 8101ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
    handle->robot.trvled_dist = 0;
 8101efa:	68fb      	ldr	r3, [r7, #12]
 8101efc:	f04f 0200 	mov.w	r2, #0
 8101f00:	651a      	str	r2, [r3, #80]	@ 0x50

    handle->prev_robot = handle->robot;
 8101f02:	68fa      	ldr	r2, [r7, #12]
 8101f04:	68fb      	ldr	r3, [r7, #12]
 8101f06:	f502 749c 	add.w	r4, r2, #312	@ 0x138
 8101f0a:	f103 0528 	add.w	r5, r3, #40	@ 0x28
 8101f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101f16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for(uint16_t i = 0; i < NUM_BEACONS; i ++){ // as we know where we are, and know the position of every beacon on the table, just associate them
 8101f1e:	2300      	movs	r3, #0
 8101f20:	82fb      	strh	r3, [r7, #22]
 8101f22:	e00d      	b.n	8101f40 <setPosition+0x94>
        handle->tracked_beacons[i].lock = false;
 8101f24:	8afa      	ldrh	r2, [r7, #22]
 8101f26:	68f9      	ldr	r1, [r7, #12]
 8101f28:	4613      	mov	r3, r2
 8101f2a:	005b      	lsls	r3, r3, #1
 8101f2c:	4413      	add	r3, r2
 8101f2e:	00db      	lsls	r3, r3, #3
 8101f30:	440b      	add	r3, r1
 8101f32:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8101f36:	2200      	movs	r2, #0
 8101f38:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < NUM_BEACONS; i ++){ // as we know where we are, and know the position of every beacon on the table, just associate them
 8101f3a:	8afb      	ldrh	r3, [r7, #22]
 8101f3c:	3301      	adds	r3, #1
 8101f3e:	82fb      	strh	r3, [r7, #22]
 8101f40:	8afb      	ldrh	r3, [r7, #22]
 8101f42:	2b02      	cmp	r3, #2
 8101f44:	d9ee      	bls.n	8101f24 <setPosition+0x78>
        //handle->tracked_beacons[i].angle = atan2(y, x) + theta;

        //while(handle->tracked_beacons[i].angle < M_PI) handle->tracked_beacons[i].angle += 2*M_PI;
        //while(handle->tracked_beacons[i].angle >= M_PI) handle->tracked_beacons[i].angle -= 2*M_PI;
    }
}
 8101f46:	bf00      	nop
 8101f48:	bf00      	nop
 8101f4a:	371c      	adds	r7, #28
 8101f4c:	46bd      	mov	sp, r7
 8101f4e:	bcb0      	pop	{r4, r5, r7}
 8101f50:	4770      	bx	lr
	...

08101f54 <updateField>:

// TODO : utiliser l'accélération
// TODO : invalider une association si un autre point est trop proche (et qu'il y en a deux autres disponnibles)
void updateField(loc_t* handle, lidar_point_t points[], uint16_t points_nb, uint32_t dt_ms){
 8101f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101f58:	b093      	sub	sp, #76	@ 0x4c
 8101f5a:	af08      	add	r7, sp, #32
 8101f5c:	6178      	str	r0, [r7, #20]
 8101f5e:	6139      	str	r1, [r7, #16]
 8101f60:	60bb      	str	r3, [r7, #8]
 8101f62:	4613      	mov	r3, r2
 8101f64:	81fb      	strh	r3, [r7, #14]

    // first, we determine the speed of the robot
    handle->robot.trvled_x = handle->robot.x - handle->prev_robot.x;
 8101f66:	697b      	ldr	r3, [r7, #20]
 8101f68:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8101f6c:	697b      	ldr	r3, [r7, #20]
 8101f6e:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8101f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101f76:	697b      	ldr	r3, [r7, #20]
 8101f78:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    handle->robot.trvled_y = handle->robot.y - handle->prev_robot.y;
 8101f7c:	697b      	ldr	r3, [r7, #20]
 8101f7e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8101f82:	697b      	ldr	r3, [r7, #20]
 8101f84:	edd3 7a4f 	vldr	s15, [r3, #316]	@ 0x13c
 8101f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101f8c:	697b      	ldr	r3, [r7, #20]
 8101f8e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    handle->robot.trvled_t = handle->robot.t - handle->prev_robot.t;
 8101f92:	697b      	ldr	r3, [r7, #20]
 8101f94:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8101f98:	697b      	ldr	r3, [r7, #20]
 8101f9a:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 8101f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101fa2:	697b      	ldr	r3, [r7, #20]
 8101fa4:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    handle->robot.trvled_dist = sqrt(handle->robot.trvled_x*handle->robot.trvled_x + handle->robot.trvled_y*handle->robot.trvled_y); // distance traveled
 8101fa8:	697b      	ldr	r3, [r7, #20]
 8101faa:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8101fae:	697b      	ldr	r3, [r7, #20]
 8101fb0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8101fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101fb8:	697b      	ldr	r3, [r7, #20]
 8101fba:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8101fbe:	697b      	ldr	r3, [r7, #20]
 8101fc0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8101fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101fcc:	ee17 0a90 	vmov	r0, s15
 8101fd0:	f7fe fb52 	bl	8100678 <__aeabi_f2d>
 8101fd4:	4602      	mov	r2, r0
 8101fd6:	460b      	mov	r3, r1
 8101fd8:	ec43 2b10 	vmov	d0, r2, r3
 8101fdc:	f012 fcf4 	bl	81149c8 <sqrt>
 8101fe0:	ec53 2b10 	vmov	r2, r3, d0
 8101fe4:	4610      	mov	r0, r2
 8101fe6:	4619      	mov	r1, r3
 8101fe8:	f7fe fe96 	bl	8100d18 <__aeabi_d2f>
 8101fec:	4602      	mov	r2, r0
 8101fee:	697b      	ldr	r3, [r7, #20]
 8101ff0:	651a      	str	r2, [r3, #80]	@ 0x50
    handle->robot.trvl_t = atan2(handle->robot.trvled_y, handle->robot.trvled_x); // angle at which that distance was traveled
 8101ff2:	697b      	ldr	r3, [r7, #20]
 8101ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101ff6:	4618      	mov	r0, r3
 8101ff8:	f7fe fb3e 	bl	8100678 <__aeabi_f2d>
 8101ffc:	4604      	mov	r4, r0
 8101ffe:	460d      	mov	r5, r1
 8102000:	697b      	ldr	r3, [r7, #20]
 8102002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102004:	4618      	mov	r0, r3
 8102006:	f7fe fb37 	bl	8100678 <__aeabi_f2d>
 810200a:	4602      	mov	r2, r0
 810200c:	460b      	mov	r3, r1
 810200e:	ec43 2b11 	vmov	d1, r2, r3
 8102012:	ec45 4b10 	vmov	d0, r4, r5
 8102016:	f012 fcd5 	bl	81149c4 <atan2>
 810201a:	ec53 2b10 	vmov	r2, r3, d0
 810201e:	4610      	mov	r0, r2
 8102020:	4619      	mov	r1, r3
 8102022:	f7fe fe79 	bl	8100d18 <__aeabi_d2f>
 8102026:	4602      	mov	r2, r0
 8102028:	697b      	ldr	r3, [r7, #20]
 810202a:	655a      	str	r2, [r3, #84]	@ 0x54

    handle->robot.trsl_spd = ((float)dt_ms/1000.0) * handle->robot.trvled_dist; // speed at which that distance was traveled
 810202c:	68bb      	ldr	r3, [r7, #8]
 810202e:	ee07 3a90 	vmov	s15, r3
 8102032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102036:	ee17 0a90 	vmov	r0, s15
 810203a:	f7fe fb1d 	bl	8100678 <__aeabi_f2d>
 810203e:	f04f 0200 	mov.w	r2, #0
 8102042:	4bb3      	ldr	r3, [pc, #716]	@ (8102310 <updateField+0x3bc>)
 8102044:	f7fe fc9a 	bl	810097c <__aeabi_ddiv>
 8102048:	4602      	mov	r2, r0
 810204a:	460b      	mov	r3, r1
 810204c:	4614      	mov	r4, r2
 810204e:	461d      	mov	r5, r3
 8102050:	697b      	ldr	r3, [r7, #20]
 8102052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102054:	4618      	mov	r0, r3
 8102056:	f7fe fb0f 	bl	8100678 <__aeabi_f2d>
 810205a:	4602      	mov	r2, r0
 810205c:	460b      	mov	r3, r1
 810205e:	4620      	mov	r0, r4
 8102060:	4629      	mov	r1, r5
 8102062:	f7fe fb61 	bl	8100728 <__aeabi_dmul>
 8102066:	4602      	mov	r2, r0
 8102068:	460b      	mov	r3, r1
 810206a:	4610      	mov	r0, r2
 810206c:	4619      	mov	r1, r3
 810206e:	f7fe fe53 	bl	8100d18 <__aeabi_d2f>
 8102072:	4602      	mov	r2, r0
 8102074:	697b      	ldr	r3, [r7, #20]
 8102076:	635a      	str	r2, [r3, #52]	@ 0x34
    handle->robot.trsl_spd_delta = (handle ->robot.trsl_spd - handle->prev_robot.trsl_spd);
 8102078:	697b      	ldr	r3, [r7, #20]
 810207a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 810207e:	697b      	ldr	r3, [r7, #20]
 8102080:	edd3 7a51 	vldr	s15, [r3, #324]	@ 0x144
 8102084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102088:	697b      	ldr	r3, [r7, #20]
 810208a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    handle->robot.angular_spd = ((float)dt_ms/1000.0) * handle->robot.trvled_t;
 810208e:	68bb      	ldr	r3, [r7, #8]
 8102090:	ee07 3a90 	vmov	s15, r3
 8102094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102098:	ee17 0a90 	vmov	r0, s15
 810209c:	f7fe faec 	bl	8100678 <__aeabi_f2d>
 81020a0:	f04f 0200 	mov.w	r2, #0
 81020a4:	4b9a      	ldr	r3, [pc, #616]	@ (8102310 <updateField+0x3bc>)
 81020a6:	f7fe fc69 	bl	810097c <__aeabi_ddiv>
 81020aa:	4602      	mov	r2, r0
 81020ac:	460b      	mov	r3, r1
 81020ae:	4614      	mov	r4, r2
 81020b0:	461d      	mov	r5, r3
 81020b2:	697b      	ldr	r3, [r7, #20]
 81020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81020b6:	4618      	mov	r0, r3
 81020b8:	f7fe fade 	bl	8100678 <__aeabi_f2d>
 81020bc:	4602      	mov	r2, r0
 81020be:	460b      	mov	r3, r1
 81020c0:	4620      	mov	r0, r4
 81020c2:	4629      	mov	r1, r5
 81020c4:	f7fe fb30 	bl	8100728 <__aeabi_dmul>
 81020c8:	4602      	mov	r2, r0
 81020ca:	460b      	mov	r3, r1
 81020cc:	4610      	mov	r0, r2
 81020ce:	4619      	mov	r1, r3
 81020d0:	f7fe fe22 	bl	8100d18 <__aeabi_d2f>
 81020d4:	4602      	mov	r2, r0
 81020d6:	697b      	ldr	r3, [r7, #20]
 81020d8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle->robot.angular_spd_delta = (handle ->robot.angular_spd - handle->prev_robot.angular_spd);
 81020da:	697b      	ldr	r3, [r7, #20]
 81020dc:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 81020e0:	697b      	ldr	r3, [r7, #20]
 81020e2:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 81020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81020ea:	697b      	ldr	r3, [r7, #20]
 81020ec:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40


    printf("toler : ");
 81020f0:	4888      	ldr	r0, [pc, #544]	@ (8102314 <updateField+0x3c0>)
 81020f2:	f015 f9a1 	bl	8117438 <iprintf>
    //then, determine the tolerance we have on beacon positions according to current speed
    for(uint16_t i = 0; i < NUM_BEACONS; i++){
 81020f6:	2300      	movs	r3, #0
 81020f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 81020fa:	e083      	b.n	8102204 <updateField+0x2b0>
        // TODO : tolerance according to speed
    	handle->tracked_beacons[i].tolerance = ((handle->tracked_beacons[i].dist + handle->robot.trvled_dist + handle->robot.trsl_spd_delta) * fabsf(handle->robot.trvled_t + handle->robot.angular_spd_delta)) + handle->robot.trvled_dist + handle->robot.trsl_spd_delta;
 81020fc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81020fe:	6979      	ldr	r1, [r7, #20]
 8102100:	4613      	mov	r3, r2
 8102102:	005b      	lsls	r3, r3, #1
 8102104:	4413      	add	r3, r2
 8102106:	00db      	lsls	r3, r3, #3
 8102108:	440b      	add	r3, r1
 810210a:	33f8      	adds	r3, #248	@ 0xf8
 810210c:	ed93 7a00 	vldr	s14, [r3]
 8102110:	697b      	ldr	r3, [r7, #20]
 8102112:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8102116:	ee37 7a27 	vadd.f32	s14, s14, s15
 810211a:	697b      	ldr	r3, [r7, #20]
 810211c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8102120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8102124:	697b      	ldr	r3, [r7, #20]
 8102126:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 810212a:	697b      	ldr	r3, [r7, #20]
 810212c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8102130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102134:	eef0 7ae7 	vabs.f32	s15, s15
 8102138:	ee27 7a27 	vmul.f32	s14, s14, s15
 810213c:	697b      	ldr	r3, [r7, #20]
 810213e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8102142:	ee37 7a27 	vadd.f32	s14, s14, s15
 8102146:	697b      	ldr	r3, [r7, #20]
 8102148:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 810214c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 810214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102152:	6979      	ldr	r1, [r7, #20]
 8102154:	4613      	mov	r3, r2
 8102156:	005b      	lsls	r3, r3, #1
 8102158:	4413      	add	r3, r2
 810215a:	00db      	lsls	r3, r3, #3
 810215c:	440b      	add	r3, r1
 810215e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8102162:	edc3 7a00 	vstr	s15, [r3]
    	handle->tracked_beacons[i].tolerance *= handle->tolerance_coef +1;
 8102166:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8102168:	6979      	ldr	r1, [r7, #20]
 810216a:	4613      	mov	r3, r2
 810216c:	005b      	lsls	r3, r3, #1
 810216e:	4413      	add	r3, r2
 8102170:	00db      	lsls	r3, r3, #3
 8102172:	440b      	add	r3, r1
 8102174:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8102178:	ed93 7a00 	vldr	s14, [r3]
 810217c:	697b      	ldr	r3, [r7, #20]
 810217e:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 8102182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810218a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 810218c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102190:	6979      	ldr	r1, [r7, #20]
 8102192:	4613      	mov	r3, r2
 8102194:	005b      	lsls	r3, r3, #1
 8102196:	4413      	add	r3, r2
 8102198:	00db      	lsls	r3, r3, #3
 810219a:	440b      	add	r3, r1
 810219c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81021a0:	edc3 7a00 	vstr	s15, [r3]
    	handle->tracked_beacons[i].tolerance += handle->tolerance_base;
 81021a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81021a6:	6979      	ldr	r1, [r7, #20]
 81021a8:	4613      	mov	r3, r2
 81021aa:	005b      	lsls	r3, r3, #1
 81021ac:	4413      	add	r3, r2
 81021ae:	00db      	lsls	r3, r3, #3
 81021b0:	440b      	add	r3, r1
 81021b2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81021b6:	ed93 7a00 	vldr	s14, [r3]
 81021ba:	697b      	ldr	r3, [r7, #20]
 81021bc:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 81021c0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81021c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 81021c6:	6979      	ldr	r1, [r7, #20]
 81021c8:	4613      	mov	r3, r2
 81021ca:	005b      	lsls	r3, r3, #1
 81021cc:	4413      	add	r3, r2
 81021ce:	00db      	lsls	r3, r3, #3
 81021d0:	440b      	add	r3, r1
 81021d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81021d6:	edc3 7a00 	vstr	s15, [r3]


    	printf("\t%.2f ", handle->tracked_beacons[i].tolerance);
 81021da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81021dc:	6979      	ldr	r1, [r7, #20]
 81021de:	4613      	mov	r3, r2
 81021e0:	005b      	lsls	r3, r3, #1
 81021e2:	4413      	add	r3, r2
 81021e4:	00db      	lsls	r3, r3, #3
 81021e6:	440b      	add	r3, r1
 81021e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	4618      	mov	r0, r3
 81021f0:	f7fe fa42 	bl	8100678 <__aeabi_f2d>
 81021f4:	4602      	mov	r2, r0
 81021f6:	460b      	mov	r3, r1
 81021f8:	4847      	ldr	r0, [pc, #284]	@ (8102318 <updateField+0x3c4>)
 81021fa:	f015 f91d 	bl	8117438 <iprintf>
    for(uint16_t i = 0; i < NUM_BEACONS; i++){
 81021fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8102200:	3301      	adds	r3, #1
 8102202:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8102204:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8102206:	2b02      	cmp	r3, #2
 8102208:	f67f af78 	bls.w	81020fc <updateField+0x1a8>
    }
    printf("\n");
 810220c:	200a      	movs	r0, #10
 810220e:	f015 f925 	bl	811745c <putchar>

    handle->prev_robot = handle->robot; // save current state for future calculations
 8102212:	697a      	ldr	r2, [r7, #20]
 8102214:	697b      	ldr	r3, [r7, #20]
 8102216:	f502 749c 	add.w	r4, r2, #312	@ 0x138
 810221a:	f103 0528 	add.w	r5, r3, #40	@ 0x28
 810221e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102226:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810222a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

#ifdef VERBOSE
    printf("travel x %.2f y %.2f trsl %.2f (towards %.4f), ang %.4f\n", handle->robot.trvled_x, handle->robot.trvled_y, handle->robot.trvled_dist, handle->robot.trvl_t, handle->robot.trvled_t);
 810222e:	697b      	ldr	r3, [r7, #20]
 8102230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102232:	4618      	mov	r0, r3
 8102234:	f7fe fa20 	bl	8100678 <__aeabi_f2d>
 8102238:	e9c7 0100 	strd	r0, r1, [r7]
 810223c:	697b      	ldr	r3, [r7, #20]
 810223e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102240:	4618      	mov	r0, r3
 8102242:	f7fe fa19 	bl	8100678 <__aeabi_f2d>
 8102246:	4604      	mov	r4, r0
 8102248:	460d      	mov	r5, r1
 810224a:	697b      	ldr	r3, [r7, #20]
 810224c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810224e:	4618      	mov	r0, r3
 8102250:	f7fe fa12 	bl	8100678 <__aeabi_f2d>
 8102254:	4680      	mov	r8, r0
 8102256:	4689      	mov	r9, r1
 8102258:	697b      	ldr	r3, [r7, #20]
 810225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810225c:	4618      	mov	r0, r3
 810225e:	f7fe fa0b 	bl	8100678 <__aeabi_f2d>
 8102262:	4682      	mov	sl, r0
 8102264:	468b      	mov	fp, r1
 8102266:	697b      	ldr	r3, [r7, #20]
 8102268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810226a:	4618      	mov	r0, r3
 810226c:	f7fe fa04 	bl	8100678 <__aeabi_f2d>
 8102270:	4602      	mov	r2, r0
 8102272:	460b      	mov	r3, r1
 8102274:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8102278:	e9cd ab04 	strd	sl, fp, [sp, #16]
 810227c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8102280:	e9cd 4500 	strd	r4, r5, [sp]
 8102284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8102288:	4824      	ldr	r0, [pc, #144]	@ (810231c <updateField+0x3c8>)
 810228a:	f015 f8d5 	bl	8117438 <iprintf>
    printf("spd trsl %.2f rot %.4f\n", handle->robot.trsl_spd, handle->robot.angular_spd);
 810228e:	697b      	ldr	r3, [r7, #20]
 8102290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102292:	4618      	mov	r0, r3
 8102294:	f7fe f9f0 	bl	8100678 <__aeabi_f2d>
 8102298:	4604      	mov	r4, r0
 810229a:	460d      	mov	r5, r1
 810229c:	697b      	ldr	r3, [r7, #20]
 810229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81022a0:	4618      	mov	r0, r3
 81022a2:	f7fe f9e9 	bl	8100678 <__aeabi_f2d>
 81022a6:	4602      	mov	r2, r0
 81022a8:	460b      	mov	r3, r1
 81022aa:	e9cd 2300 	strd	r2, r3, [sp]
 81022ae:	4622      	mov	r2, r4
 81022b0:	462b      	mov	r3, r5
 81022b2:	481b      	ldr	r0, [pc, #108]	@ (8102320 <updateField+0x3cc>)
 81022b4:	f015 f8c0 	bl	8117438 <iprintf>
#endif

    // then we can start the tracking operations
    for(uint16_t i = 0; i < NUM_BEACONS; i++) handle->tracked_beacons[i].lock = false; // start by considering every beacon is lost
 81022b8:	2300      	movs	r3, #0
 81022ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 81022bc:	e00d      	b.n	81022da <updateField+0x386>
 81022be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81022c0:	6979      	ldr	r1, [r7, #20]
 81022c2:	4613      	mov	r3, r2
 81022c4:	005b      	lsls	r3, r3, #1
 81022c6:	4413      	add	r3, r2
 81022c8:	00db      	lsls	r3, r3, #3
 81022ca:	440b      	add	r3, r1
 81022cc:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 81022d0:	2200      	movs	r2, #0
 81022d2:	701a      	strb	r2, [r3, #0]
 81022d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81022d6:	3301      	adds	r3, #1
 81022d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 81022da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81022dc:	2b02      	cmp	r3, #2
 81022de:	d9ee      	bls.n	81022be <updateField+0x36a>
    for(uint16_t i = 0; i < points_nb; i++) points[i].type = unknown; // and that every point seen by the lidar is of unknown type
 81022e0:	2300      	movs	r3, #0
 81022e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 81022e4:	e00c      	b.n	8102300 <updateField+0x3ac>
 81022e6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 81022e8:	4613      	mov	r3, r2
 81022ea:	009b      	lsls	r3, r3, #2
 81022ec:	4413      	add	r3, r2
 81022ee:	009b      	lsls	r3, r3, #2
 81022f0:	461a      	mov	r2, r3
 81022f2:	693b      	ldr	r3, [r7, #16]
 81022f4:	4413      	add	r3, r2
 81022f6:	2200      	movs	r2, #0
 81022f8:	741a      	strb	r2, [r3, #16]
 81022fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81022fc:	3301      	adds	r3, #1
 81022fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8102300:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8102302:	89fb      	ldrh	r3, [r7, #14]
 8102304:	429a      	cmp	r2, r3
 8102306:	d3ee      	bcc.n	81022e6 <updateField+0x392>

    for(uint16_t i = 0; i < points_nb; i++){
 8102308:	2300      	movs	r3, #0
 810230a:	843b      	strh	r3, [r7, #32]
 810230c:	e252      	b.n	81027b4 <updateField+0x860>
 810230e:	bf00      	nop
 8102310:	408f4000 	.word	0x408f4000
 8102314:	0811bf60 	.word	0x0811bf60
 8102318:	0811bf6c 	.word	0x0811bf6c
 810231c:	0811bf74 	.word	0x0811bf74
 8102320:	0811bfb0 	.word	0x0811bfb0
        // calculate the absolute corrdinates of the beacons according to the current position, taking speed into account to determine the expected position at time of the measure

    	// todo : note : acc is not taken into account in the xy axies, but is in the t axis
    	points[i].x = points[i].distance*cos(points[i].angle + handle->robot.t + handle->robot.trvled_t + handle->robot.angular_spd_delta) + handle->robot.x + handle->robot.trvled_x;
 8102324:	8c3a      	ldrh	r2, [r7, #32]
 8102326:	4613      	mov	r3, r2
 8102328:	009b      	lsls	r3, r3, #2
 810232a:	4413      	add	r3, r2
 810232c:	009b      	lsls	r3, r3, #2
 810232e:	461a      	mov	r2, r3
 8102330:	693b      	ldr	r3, [r7, #16]
 8102332:	4413      	add	r3, r2
 8102334:	685b      	ldr	r3, [r3, #4]
 8102336:	4618      	mov	r0, r3
 8102338:	f7fe f99e 	bl	8100678 <__aeabi_f2d>
 810233c:	4604      	mov	r4, r0
 810233e:	460d      	mov	r5, r1
 8102340:	8c3a      	ldrh	r2, [r7, #32]
 8102342:	4613      	mov	r3, r2
 8102344:	009b      	lsls	r3, r3, #2
 8102346:	4413      	add	r3, r2
 8102348:	009b      	lsls	r3, r3, #2
 810234a:	461a      	mov	r2, r3
 810234c:	693b      	ldr	r3, [r7, #16]
 810234e:	4413      	add	r3, r2
 8102350:	ed93 7a00 	vldr	s14, [r3]
 8102354:	697b      	ldr	r3, [r7, #20]
 8102356:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 810235a:	ee37 7a27 	vadd.f32	s14, s14, s15
 810235e:	697b      	ldr	r3, [r7, #20]
 8102360:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8102364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8102368:	697b      	ldr	r3, [r7, #20]
 810236a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 810236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102372:	ee17 0a90 	vmov	r0, s15
 8102376:	f7fe f97f 	bl	8100678 <__aeabi_f2d>
 810237a:	4602      	mov	r2, r0
 810237c:	460b      	mov	r3, r1
 810237e:	ec43 2b10 	vmov	d0, r2, r3
 8102382:	f012 fb4d 	bl	8114a20 <cos>
 8102386:	ec53 2b10 	vmov	r2, r3, d0
 810238a:	4620      	mov	r0, r4
 810238c:	4629      	mov	r1, r5
 810238e:	f7fe f9cb 	bl	8100728 <__aeabi_dmul>
 8102392:	4602      	mov	r2, r0
 8102394:	460b      	mov	r3, r1
 8102396:	4614      	mov	r4, r2
 8102398:	461d      	mov	r5, r3
 810239a:	697b      	ldr	r3, [r7, #20]
 810239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810239e:	4618      	mov	r0, r3
 81023a0:	f7fe f96a 	bl	8100678 <__aeabi_f2d>
 81023a4:	4602      	mov	r2, r0
 81023a6:	460b      	mov	r3, r1
 81023a8:	4620      	mov	r0, r4
 81023aa:	4629      	mov	r1, r5
 81023ac:	f7fe f806 	bl	81003bc <__adddf3>
 81023b0:	4602      	mov	r2, r0
 81023b2:	460b      	mov	r3, r1
 81023b4:	4614      	mov	r4, r2
 81023b6:	461d      	mov	r5, r3
 81023b8:	697b      	ldr	r3, [r7, #20]
 81023ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81023bc:	4618      	mov	r0, r3
 81023be:	f7fe f95b 	bl	8100678 <__aeabi_f2d>
 81023c2:	4602      	mov	r2, r0
 81023c4:	460b      	mov	r3, r1
 81023c6:	4620      	mov	r0, r4
 81023c8:	4629      	mov	r1, r5
 81023ca:	f7fd fff7 	bl	81003bc <__adddf3>
 81023ce:	4602      	mov	r2, r0
 81023d0:	460b      	mov	r3, r1
 81023d2:	4610      	mov	r0, r2
 81023d4:	4619      	mov	r1, r3
 81023d6:	8c3a      	ldrh	r2, [r7, #32]
 81023d8:	4613      	mov	r3, r2
 81023da:	009b      	lsls	r3, r3, #2
 81023dc:	4413      	add	r3, r2
 81023de:	009b      	lsls	r3, r3, #2
 81023e0:	461a      	mov	r2, r3
 81023e2:	693b      	ldr	r3, [r7, #16]
 81023e4:	189c      	adds	r4, r3, r2
 81023e6:	f7fe fc97 	bl	8100d18 <__aeabi_d2f>
 81023ea:	4603      	mov	r3, r0
 81023ec:	60a3      	str	r3, [r4, #8]
        points[i].y = points[i].distance*sin(points[i].angle + handle->robot.t + handle->robot.trvled_t + handle->robot.angular_spd_delta) + handle->robot.y + handle->robot.trvled_y;
 81023ee:	8c3a      	ldrh	r2, [r7, #32]
 81023f0:	4613      	mov	r3, r2
 81023f2:	009b      	lsls	r3, r3, #2
 81023f4:	4413      	add	r3, r2
 81023f6:	009b      	lsls	r3, r3, #2
 81023f8:	461a      	mov	r2, r3
 81023fa:	693b      	ldr	r3, [r7, #16]
 81023fc:	4413      	add	r3, r2
 81023fe:	685b      	ldr	r3, [r3, #4]
 8102400:	4618      	mov	r0, r3
 8102402:	f7fe f939 	bl	8100678 <__aeabi_f2d>
 8102406:	4604      	mov	r4, r0
 8102408:	460d      	mov	r5, r1
 810240a:	8c3a      	ldrh	r2, [r7, #32]
 810240c:	4613      	mov	r3, r2
 810240e:	009b      	lsls	r3, r3, #2
 8102410:	4413      	add	r3, r2
 8102412:	009b      	lsls	r3, r3, #2
 8102414:	461a      	mov	r2, r3
 8102416:	693b      	ldr	r3, [r7, #16]
 8102418:	4413      	add	r3, r2
 810241a:	ed93 7a00 	vldr	s14, [r3]
 810241e:	697b      	ldr	r3, [r7, #20]
 8102420:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8102424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8102428:	697b      	ldr	r3, [r7, #20]
 810242a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 810242e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8102432:	697b      	ldr	r3, [r7, #20]
 8102434:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8102438:	ee77 7a27 	vadd.f32	s15, s14, s15
 810243c:	ee17 0a90 	vmov	r0, s15
 8102440:	f7fe f91a 	bl	8100678 <__aeabi_f2d>
 8102444:	4602      	mov	r2, r0
 8102446:	460b      	mov	r3, r1
 8102448:	ec43 2b10 	vmov	d0, r2, r3
 810244c:	f012 fb3c 	bl	8114ac8 <sin>
 8102450:	ec53 2b10 	vmov	r2, r3, d0
 8102454:	4620      	mov	r0, r4
 8102456:	4629      	mov	r1, r5
 8102458:	f7fe f966 	bl	8100728 <__aeabi_dmul>
 810245c:	4602      	mov	r2, r0
 810245e:	460b      	mov	r3, r1
 8102460:	4614      	mov	r4, r2
 8102462:	461d      	mov	r5, r3
 8102464:	697b      	ldr	r3, [r7, #20]
 8102466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102468:	4618      	mov	r0, r3
 810246a:	f7fe f905 	bl	8100678 <__aeabi_f2d>
 810246e:	4602      	mov	r2, r0
 8102470:	460b      	mov	r3, r1
 8102472:	4620      	mov	r0, r4
 8102474:	4629      	mov	r1, r5
 8102476:	f7fd ffa1 	bl	81003bc <__adddf3>
 810247a:	4602      	mov	r2, r0
 810247c:	460b      	mov	r3, r1
 810247e:	4614      	mov	r4, r2
 8102480:	461d      	mov	r5, r3
 8102482:	697b      	ldr	r3, [r7, #20]
 8102484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102486:	4618      	mov	r0, r3
 8102488:	f7fe f8f6 	bl	8100678 <__aeabi_f2d>
 810248c:	4602      	mov	r2, r0
 810248e:	460b      	mov	r3, r1
 8102490:	4620      	mov	r0, r4
 8102492:	4629      	mov	r1, r5
 8102494:	f7fd ff92 	bl	81003bc <__adddf3>
 8102498:	4602      	mov	r2, r0
 810249a:	460b      	mov	r3, r1
 810249c:	4610      	mov	r0, r2
 810249e:	4619      	mov	r1, r3
 81024a0:	8c3a      	ldrh	r2, [r7, #32]
 81024a2:	4613      	mov	r3, r2
 81024a4:	009b      	lsls	r3, r3, #2
 81024a6:	4413      	add	r3, r2
 81024a8:	009b      	lsls	r3, r3, #2
 81024aa:	461a      	mov	r2, r3
 81024ac:	693b      	ldr	r3, [r7, #16]
 81024ae:	189c      	adds	r4, r3, r2
 81024b0:	f7fe fc32 	bl	8100d18 <__aeabi_d2f>
 81024b4:	4603      	mov	r3, r0
 81024b6:	60e3      	str	r3, [r4, #12]

        for(uint16_t j = 0; j < NUM_BEACONS; j++){ // then check if a real life beacon is indeed there
 81024b8:	2300      	movs	r3, #0
 81024ba:	83fb      	strh	r3, [r7, #30]
 81024bc:	e0fa      	b.n	81026b4 <updateField+0x760>
#ifdef VERBOSE
            //printf("point %d : comparing... x %.2f y %.2f (lidar) to x %.2f y %.2f (expected), dist %.2f (tolerance %.2f)\n", i, points[i].x, points[i].y, handle->field.beacons[j].x, handle->field.beacons[j].y, _dist(handle->field.beacons[j].x, handle->field.beacons[j].y, points[i].x, points[i].y), handle->tracked_beacons[j].tolerance);
#endif
            if(_dist(handle->field.beacons[j].x, handle->field.beacons[j].y, points[i].x, points[i].y) <= handle->tracked_beacons[j].tolerance){ // if so, save the distance and angle to that beacon
 81024be:	8bfb      	ldrh	r3, [r7, #30]
 81024c0:	697a      	ldr	r2, [r7, #20]
 81024c2:	00db      	lsls	r3, r3, #3
 81024c4:	4413      	add	r3, r2
 81024c6:	edd3 7a00 	vldr	s15, [r3]
 81024ca:	8bfb      	ldrh	r3, [r7, #30]
 81024cc:	697a      	ldr	r2, [r7, #20]
 81024ce:	00db      	lsls	r3, r3, #3
 81024d0:	4413      	add	r3, r2
 81024d2:	3304      	adds	r3, #4
 81024d4:	ed93 7a00 	vldr	s14, [r3]
 81024d8:	8c3a      	ldrh	r2, [r7, #32]
 81024da:	4613      	mov	r3, r2
 81024dc:	009b      	lsls	r3, r3, #2
 81024de:	4413      	add	r3, r2
 81024e0:	009b      	lsls	r3, r3, #2
 81024e2:	461a      	mov	r2, r3
 81024e4:	693b      	ldr	r3, [r7, #16]
 81024e6:	4413      	add	r3, r2
 81024e8:	edd3 6a02 	vldr	s13, [r3, #8]
 81024ec:	8c3a      	ldrh	r2, [r7, #32]
 81024ee:	4613      	mov	r3, r2
 81024f0:	009b      	lsls	r3, r3, #2
 81024f2:	4413      	add	r3, r2
 81024f4:	009b      	lsls	r3, r3, #2
 81024f6:	461a      	mov	r2, r3
 81024f8:	693b      	ldr	r3, [r7, #16]
 81024fa:	4413      	add	r3, r2
 81024fc:	ed93 6a03 	vldr	s12, [r3, #12]
 8102500:	eef0 1a46 	vmov.f32	s3, s12
 8102504:	eeb0 1a66 	vmov.f32	s2, s13
 8102508:	eef0 0a47 	vmov.f32	s1, s14
 810250c:	eeb0 0a67 	vmov.f32	s0, s15
 8102510:	f7ff fc4c 	bl	8101dac <_dist>
 8102514:	eeb0 7a40 	vmov.f32	s14, s0
 8102518:	8bfa      	ldrh	r2, [r7, #30]
 810251a:	6979      	ldr	r1, [r7, #20]
 810251c:	4613      	mov	r3, r2
 810251e:	005b      	lsls	r3, r3, #1
 8102520:	4413      	add	r3, r2
 8102522:	00db      	lsls	r3, r3, #3
 8102524:	440b      	add	r3, r1
 8102526:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 810252a:	edd3 7a00 	vldr	s15, [r3]
 810252e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8102532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102536:	f200 80ba 	bhi.w	81026ae <updateField+0x75a>
#ifdef VERBOSE
                printf("match ! (id %d, dist %.2f, toler %.2f)\n", j, _dist(handle->field.beacons[j].x, handle->field.beacons[j].y, points[i].x, points[i].y), handle->tracked_beacons[j].tolerance);
 810253a:	8bfe      	ldrh	r6, [r7, #30]
 810253c:	8bfb      	ldrh	r3, [r7, #30]
 810253e:	697a      	ldr	r2, [r7, #20]
 8102540:	00db      	lsls	r3, r3, #3
 8102542:	4413      	add	r3, r2
 8102544:	edd3 7a00 	vldr	s15, [r3]
 8102548:	8bfb      	ldrh	r3, [r7, #30]
 810254a:	697a      	ldr	r2, [r7, #20]
 810254c:	00db      	lsls	r3, r3, #3
 810254e:	4413      	add	r3, r2
 8102550:	3304      	adds	r3, #4
 8102552:	ed93 7a00 	vldr	s14, [r3]
 8102556:	8c3a      	ldrh	r2, [r7, #32]
 8102558:	4613      	mov	r3, r2
 810255a:	009b      	lsls	r3, r3, #2
 810255c:	4413      	add	r3, r2
 810255e:	009b      	lsls	r3, r3, #2
 8102560:	461a      	mov	r2, r3
 8102562:	693b      	ldr	r3, [r7, #16]
 8102564:	4413      	add	r3, r2
 8102566:	edd3 6a02 	vldr	s13, [r3, #8]
 810256a:	8c3a      	ldrh	r2, [r7, #32]
 810256c:	4613      	mov	r3, r2
 810256e:	009b      	lsls	r3, r3, #2
 8102570:	4413      	add	r3, r2
 8102572:	009b      	lsls	r3, r3, #2
 8102574:	461a      	mov	r2, r3
 8102576:	693b      	ldr	r3, [r7, #16]
 8102578:	4413      	add	r3, r2
 810257a:	ed93 6a03 	vldr	s12, [r3, #12]
 810257e:	eef0 1a46 	vmov.f32	s3, s12
 8102582:	eeb0 1a66 	vmov.f32	s2, s13
 8102586:	eef0 0a47 	vmov.f32	s1, s14
 810258a:	eeb0 0a67 	vmov.f32	s0, s15
 810258e:	f7ff fc0d 	bl	8101dac <_dist>
 8102592:	ee10 3a10 	vmov	r3, s0
 8102596:	4618      	mov	r0, r3
 8102598:	f7fe f86e 	bl	8100678 <__aeabi_f2d>
 810259c:	4604      	mov	r4, r0
 810259e:	460d      	mov	r5, r1
 81025a0:	8bfa      	ldrh	r2, [r7, #30]
 81025a2:	6979      	ldr	r1, [r7, #20]
 81025a4:	4613      	mov	r3, r2
 81025a6:	005b      	lsls	r3, r3, #1
 81025a8:	4413      	add	r3, r2
 81025aa:	00db      	lsls	r3, r3, #3
 81025ac:	440b      	add	r3, r1
 81025ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	4618      	mov	r0, r3
 81025b6:	f7fe f85f 	bl	8100678 <__aeabi_f2d>
 81025ba:	4602      	mov	r2, r0
 81025bc:	460b      	mov	r3, r1
 81025be:	e9cd 2300 	strd	r2, r3, [sp]
 81025c2:	4622      	mov	r2, r4
 81025c4:	462b      	mov	r3, r5
 81025c6:	4631      	mov	r1, r6
 81025c8:	4880      	ldr	r0, [pc, #512]	@ (81027cc <updateField+0x878>)
 81025ca:	f014 ff35 	bl	8117438 <iprintf>

                printf(">dist%d:%.2f\n", j,_dist(handle->field.beacons[j].x, handle->field.beacons[j].y, points[i].x, points[i].y));
 81025ce:	8bfc      	ldrh	r4, [r7, #30]
 81025d0:	8bfb      	ldrh	r3, [r7, #30]
 81025d2:	697a      	ldr	r2, [r7, #20]
 81025d4:	00db      	lsls	r3, r3, #3
 81025d6:	4413      	add	r3, r2
 81025d8:	edd3 7a00 	vldr	s15, [r3]
 81025dc:	8bfb      	ldrh	r3, [r7, #30]
 81025de:	697a      	ldr	r2, [r7, #20]
 81025e0:	00db      	lsls	r3, r3, #3
 81025e2:	4413      	add	r3, r2
 81025e4:	3304      	adds	r3, #4
 81025e6:	ed93 7a00 	vldr	s14, [r3]
 81025ea:	8c3a      	ldrh	r2, [r7, #32]
 81025ec:	4613      	mov	r3, r2
 81025ee:	009b      	lsls	r3, r3, #2
 81025f0:	4413      	add	r3, r2
 81025f2:	009b      	lsls	r3, r3, #2
 81025f4:	461a      	mov	r2, r3
 81025f6:	693b      	ldr	r3, [r7, #16]
 81025f8:	4413      	add	r3, r2
 81025fa:	edd3 6a02 	vldr	s13, [r3, #8]
 81025fe:	8c3a      	ldrh	r2, [r7, #32]
 8102600:	4613      	mov	r3, r2
 8102602:	009b      	lsls	r3, r3, #2
 8102604:	4413      	add	r3, r2
 8102606:	009b      	lsls	r3, r3, #2
 8102608:	461a      	mov	r2, r3
 810260a:	693b      	ldr	r3, [r7, #16]
 810260c:	4413      	add	r3, r2
 810260e:	ed93 6a03 	vldr	s12, [r3, #12]
 8102612:	eef0 1a46 	vmov.f32	s3, s12
 8102616:	eeb0 1a66 	vmov.f32	s2, s13
 810261a:	eef0 0a47 	vmov.f32	s1, s14
 810261e:	eeb0 0a67 	vmov.f32	s0, s15
 8102622:	f7ff fbc3 	bl	8101dac <_dist>
 8102626:	ee10 3a10 	vmov	r3, s0
 810262a:	4618      	mov	r0, r3
 810262c:	f7fe f824 	bl	8100678 <__aeabi_f2d>
 8102630:	4602      	mov	r2, r0
 8102632:	460b      	mov	r3, r1
 8102634:	4621      	mov	r1, r4
 8102636:	4866      	ldr	r0, [pc, #408]	@ (81027d0 <updateField+0x87c>)
 8102638:	f014 fefe 	bl	8117438 <iprintf>
#endif
                handle->tracked_beacons[j].dist = points[i].distance;
 810263c:	8c3a      	ldrh	r2, [r7, #32]
 810263e:	4613      	mov	r3, r2
 8102640:	009b      	lsls	r3, r3, #2
 8102642:	4413      	add	r3, r2
 8102644:	009b      	lsls	r3, r3, #2
 8102646:	461a      	mov	r2, r3
 8102648:	693b      	ldr	r3, [r7, #16]
 810264a:	4413      	add	r3, r2
 810264c:	8bfa      	ldrh	r2, [r7, #30]
 810264e:	6859      	ldr	r1, [r3, #4]
 8102650:	6978      	ldr	r0, [r7, #20]
 8102652:	4613      	mov	r3, r2
 8102654:	005b      	lsls	r3, r3, #1
 8102656:	4413      	add	r3, r2
 8102658:	00db      	lsls	r3, r3, #3
 810265a:	4403      	add	r3, r0
 810265c:	33f8      	adds	r3, #248	@ 0xf8
 810265e:	6019      	str	r1, [r3, #0]
                handle->tracked_beacons[j].angle = points[i].angle;
 8102660:	8c3a      	ldrh	r2, [r7, #32]
 8102662:	4613      	mov	r3, r2
 8102664:	009b      	lsls	r3, r3, #2
 8102666:	4413      	add	r3, r2
 8102668:	009b      	lsls	r3, r3, #2
 810266a:	461a      	mov	r2, r3
 810266c:	693b      	ldr	r3, [r7, #16]
 810266e:	4413      	add	r3, r2
 8102670:	8bfa      	ldrh	r2, [r7, #30]
 8102672:	6819      	ldr	r1, [r3, #0]
 8102674:	6978      	ldr	r0, [r7, #20]
 8102676:	4613      	mov	r3, r2
 8102678:	005b      	lsls	r3, r3, #1
 810267a:	4413      	add	r3, r2
 810267c:	00db      	lsls	r3, r3, #3
 810267e:	4403      	add	r3, r0
 8102680:	33fc      	adds	r3, #252	@ 0xfc
 8102682:	6019      	str	r1, [r3, #0]
                handle->tracked_beacons[j].lock = true;
 8102684:	8bfa      	ldrh	r2, [r7, #30]
 8102686:	6979      	ldr	r1, [r7, #20]
 8102688:	4613      	mov	r3, r2
 810268a:	005b      	lsls	r3, r3, #1
 810268c:	4413      	add	r3, r2
 810268e:	00db      	lsls	r3, r3, #3
 8102690:	440b      	add	r3, r1
 8102692:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8102696:	2201      	movs	r2, #1
 8102698:	701a      	strb	r2, [r3, #0]
                points[i].type = beacon;
 810269a:	8c3a      	ldrh	r2, [r7, #32]
 810269c:	4613      	mov	r3, r2
 810269e:	009b      	lsls	r3, r3, #2
 81026a0:	4413      	add	r3, r2
 81026a2:	009b      	lsls	r3, r3, #2
 81026a4:	461a      	mov	r2, r3
 81026a6:	693b      	ldr	r3, [r7, #16]
 81026a8:	4413      	add	r3, r2
 81026aa:	2202      	movs	r2, #2
 81026ac:	741a      	strb	r2, [r3, #16]
        for(uint16_t j = 0; j < NUM_BEACONS; j++){ // then check if a real life beacon is indeed there
 81026ae:	8bfb      	ldrh	r3, [r7, #30]
 81026b0:	3301      	adds	r3, #1
 81026b2:	83fb      	strh	r3, [r7, #30]
 81026b4:	8bfb      	ldrh	r3, [r7, #30]
 81026b6:	2b02      	cmp	r3, #2
 81026b8:	f67f af01 	bls.w	81024be <updateField+0x56a>
            }
        }

        uint16_t adv_cnt = 0;
 81026bc:	2300      	movs	r3, #0
 81026be:	83bb      	strh	r3, [r7, #28]
        for(uint16_t j = 0; j < points_nb; j++){
 81026c0:	2300      	movs	r3, #0
 81026c2:	837b      	strh	r3, [r7, #26]
 81026c4:	e06f      	b.n	81027a6 <updateField+0x852>
            if(points[j].type == unknown){ // point has not been attributed yet
 81026c6:	8b7a      	ldrh	r2, [r7, #26]
 81026c8:	4613      	mov	r3, r2
 81026ca:	009b      	lsls	r3, r3, #2
 81026cc:	4413      	add	r3, r2
 81026ce:	009b      	lsls	r3, r3, #2
 81026d0:	461a      	mov	r2, r3
 81026d2:	693b      	ldr	r3, [r7, #16]
 81026d4:	4413      	add	r3, r2
 81026d6:	7c1b      	ldrb	r3, [r3, #16]
 81026d8:	2b00      	cmp	r3, #0
 81026da:	d161      	bne.n	81027a0 <updateField+0x84c>
                if(_inside(points[j].x, points[j].y, handle->field.x1, handle->field.y1, handle->field.x2, handle->field.y2)){ // point is inside the playing field
 81026dc:	8b7a      	ldrh	r2, [r7, #26]
 81026de:	4613      	mov	r3, r2
 81026e0:	009b      	lsls	r3, r3, #2
 81026e2:	4413      	add	r3, r2
 81026e4:	009b      	lsls	r3, r3, #2
 81026e6:	461a      	mov	r2, r3
 81026e8:	693b      	ldr	r3, [r7, #16]
 81026ea:	4413      	add	r3, r2
 81026ec:	edd3 7a02 	vldr	s15, [r3, #8]
 81026f0:	8b7a      	ldrh	r2, [r7, #26]
 81026f2:	4613      	mov	r3, r2
 81026f4:	009b      	lsls	r3, r3, #2
 81026f6:	4413      	add	r3, r2
 81026f8:	009b      	lsls	r3, r3, #2
 81026fa:	461a      	mov	r2, r3
 81026fc:	693b      	ldr	r3, [r7, #16]
 81026fe:	4413      	add	r3, r2
 8102700:	ed93 7a03 	vldr	s14, [r3, #12]
 8102704:	697b      	ldr	r3, [r7, #20]
 8102706:	edd3 6a06 	vldr	s13, [r3, #24]
 810270a:	697b      	ldr	r3, [r7, #20]
 810270c:	ed93 6a07 	vldr	s12, [r3, #28]
 8102710:	697b      	ldr	r3, [r7, #20]
 8102712:	edd3 5a08 	vldr	s11, [r3, #32]
 8102716:	697b      	ldr	r3, [r7, #20]
 8102718:	ed93 5a09 	vldr	s10, [r3, #36]	@ 0x24
 810271c:	eef0 2a45 	vmov.f32	s5, s10
 8102720:	eeb0 2a65 	vmov.f32	s4, s11
 8102724:	eef0 1a46 	vmov.f32	s3, s12
 8102728:	eeb0 1a66 	vmov.f32	s2, s13
 810272c:	eef0 0a47 	vmov.f32	s1, s14
 8102730:	eeb0 0a67 	vmov.f32	s0, s15
 8102734:	f7ff fb7b 	bl	8101e2e <_inside>
 8102738:	4603      	mov	r3, r0
 810273a:	2b00      	cmp	r3, #0
 810273c:	d030      	beq.n	81027a0 <updateField+0x84c>
                    points[j].type = adversary;
 810273e:	8b7a      	ldrh	r2, [r7, #26]
 8102740:	4613      	mov	r3, r2
 8102742:	009b      	lsls	r3, r3, #2
 8102744:	4413      	add	r3, r2
 8102746:	009b      	lsls	r3, r3, #2
 8102748:	461a      	mov	r2, r3
 810274a:	693b      	ldr	r3, [r7, #16]
 810274c:	4413      	add	r3, r2
 810274e:	2201      	movs	r2, #1
 8102750:	741a      	strb	r2, [r3, #16]
                    handle->adversaries[adv_cnt].x = points[j].x;
 8102752:	8b7a      	ldrh	r2, [r7, #26]
 8102754:	4613      	mov	r3, r2
 8102756:	009b      	lsls	r3, r3, #2
 8102758:	4413      	add	r3, r2
 810275a:	009b      	lsls	r3, r3, #2
 810275c:	461a      	mov	r2, r3
 810275e:	693b      	ldr	r3, [r7, #16]
 8102760:	4413      	add	r3, r2
 8102762:	8bba      	ldrh	r2, [r7, #28]
 8102764:	6899      	ldr	r1, [r3, #8]
 8102766:	6978      	ldr	r0, [r7, #20]
 8102768:	4613      	mov	r3, r2
 810276a:	005b      	lsls	r3, r3, #1
 810276c:	4413      	add	r3, r2
 810276e:	011b      	lsls	r3, r3, #4
 8102770:	4403      	add	r3, r0
 8102772:	3358      	adds	r3, #88	@ 0x58
 8102774:	6019      	str	r1, [r3, #0]
                    handle->adversaries[adv_cnt].y = points[j].y;
 8102776:	8b7a      	ldrh	r2, [r7, #26]
 8102778:	4613      	mov	r3, r2
 810277a:	009b      	lsls	r3, r3, #2
 810277c:	4413      	add	r3, r2
 810277e:	009b      	lsls	r3, r3, #2
 8102780:	461a      	mov	r2, r3
 8102782:	693b      	ldr	r3, [r7, #16]
 8102784:	4413      	add	r3, r2
 8102786:	8bba      	ldrh	r2, [r7, #28]
 8102788:	68d9      	ldr	r1, [r3, #12]
 810278a:	6978      	ldr	r0, [r7, #20]
 810278c:	4613      	mov	r3, r2
 810278e:	005b      	lsls	r3, r3, #1
 8102790:	4413      	add	r3, r2
 8102792:	011b      	lsls	r3, r3, #4
 8102794:	4403      	add	r3, r0
 8102796:	335c      	adds	r3, #92	@ 0x5c
 8102798:	6019      	str	r1, [r3, #0]

                    adv_cnt++;
 810279a:	8bbb      	ldrh	r3, [r7, #28]
 810279c:	3301      	adds	r3, #1
 810279e:	83bb      	strh	r3, [r7, #28]
        for(uint16_t j = 0; j < points_nb; j++){
 81027a0:	8b7b      	ldrh	r3, [r7, #26]
 81027a2:	3301      	adds	r3, #1
 81027a4:	837b      	strh	r3, [r7, #26]
 81027a6:	8b7a      	ldrh	r2, [r7, #26]
 81027a8:	89fb      	ldrh	r3, [r7, #14]
 81027aa:	429a      	cmp	r2, r3
 81027ac:	d38b      	bcc.n	81026c6 <updateField+0x772>
    for(uint16_t i = 0; i < points_nb; i++){
 81027ae:	8c3b      	ldrh	r3, [r7, #32]
 81027b0:	3301      	adds	r3, #1
 81027b2:	843b      	strh	r3, [r7, #32]
 81027b4:	8c3a      	ldrh	r2, [r7, #32]
 81027b6:	89fb      	ldrh	r3, [r7, #14]
 81027b8:	429a      	cmp	r2, r3
 81027ba:	f4ff adb3 	bcc.w	8102324 <updateField+0x3d0>
                }
            }
        }
    }
}
 81027be:	bf00      	nop
 81027c0:	bf00      	nop
 81027c2:	372c      	adds	r7, #44	@ 0x2c
 81027c4:	46bd      	mov	sp, r7
 81027c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81027ca:	bf00      	nop
 81027cc:	0811bfc8 	.word	0x0811bfc8
 81027d0:	0811bff0 	.word	0x0811bff0
 81027d4:	00000000 	.word	0x00000000

081027d8 <trilateration>:

static void trilateration(point_t refs[], float d1, float d2, float d3, robot_t* result) {
 81027d8:	b580      	push	{r7, lr}
 81027da:	b08e      	sub	sp, #56	@ 0x38
 81027dc:	af00      	add	r7, sp, #0
 81027de:	6178      	str	r0, [r7, #20]
 81027e0:	ed87 0a04 	vstr	s0, [r7, #16]
 81027e4:	edc7 0a03 	vstr	s1, [r7, #12]
 81027e8:	ed87 1a02 	vstr	s2, [r7, #8]
 81027ec:	6079      	str	r1, [r7, #4]
    float A = 2 * (refs[1].x - refs[0].x);
 81027ee:	697b      	ldr	r3, [r7, #20]
 81027f0:	3308      	adds	r3, #8
 81027f2:	ed93 7a00 	vldr	s14, [r3]
 81027f6:	697b      	ldr	r3, [r7, #20]
 81027f8:	edd3 7a00 	vldr	s15, [r3]
 81027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102800:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8102804:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float B = 2 * (refs[1].y - refs[0].y);
 8102808:	697b      	ldr	r3, [r7, #20]
 810280a:	3308      	adds	r3, #8
 810280c:	ed93 7a01 	vldr	s14, [r3, #4]
 8102810:	697b      	ldr	r3, [r7, #20]
 8102812:	edd3 7a01 	vldr	s15, [r3, #4]
 8102816:	ee77 7a67 	vsub.f32	s15, s14, s15
 810281a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810281e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float C = d1 * d1 - d2 * d2 - refs[0].x * refs[0].x - refs[0].y * refs[0].y + refs[1].x * refs[1].x + refs[1].y * refs[1].y;
 8102822:	edd7 7a04 	vldr	s15, [r7, #16]
 8102826:	ee27 7aa7 	vmul.f32	s14, s15, s15
 810282a:	edd7 7a03 	vldr	s15, [r7, #12]
 810282e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8102832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102836:	697b      	ldr	r3, [r7, #20]
 8102838:	edd3 6a00 	vldr	s13, [r3]
 810283c:	697b      	ldr	r3, [r7, #20]
 810283e:	edd3 7a00 	vldr	s15, [r3]
 8102842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8102846:	ee37 7a67 	vsub.f32	s14, s14, s15
 810284a:	697b      	ldr	r3, [r7, #20]
 810284c:	edd3 6a01 	vldr	s13, [r3, #4]
 8102850:	697b      	ldr	r3, [r7, #20]
 8102852:	edd3 7a01 	vldr	s15, [r3, #4]
 8102856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810285a:	ee37 7a67 	vsub.f32	s14, s14, s15
 810285e:	697b      	ldr	r3, [r7, #20]
 8102860:	3308      	adds	r3, #8
 8102862:	edd3 6a00 	vldr	s13, [r3]
 8102866:	697b      	ldr	r3, [r7, #20]
 8102868:	3308      	adds	r3, #8
 810286a:	edd3 7a00 	vldr	s15, [r3]
 810286e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8102872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8102876:	697b      	ldr	r3, [r7, #20]
 8102878:	3308      	adds	r3, #8
 810287a:	edd3 6a01 	vldr	s13, [r3, #4]
 810287e:	697b      	ldr	r3, [r7, #20]
 8102880:	3308      	adds	r3, #8
 8102882:	edd3 7a01 	vldr	s15, [r3, #4]
 8102886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810288a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810288e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    float D = 2 * (refs[2].x - refs[0].x);
 8102892:	697b      	ldr	r3, [r7, #20]
 8102894:	3310      	adds	r3, #16
 8102896:	ed93 7a00 	vldr	s14, [r3]
 810289a:	697b      	ldr	r3, [r7, #20]
 810289c:	edd3 7a00 	vldr	s15, [r3]
 81028a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 81028a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81028a8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float E = 2 * (refs[2].y - refs[0].y);
 81028ac:	697b      	ldr	r3, [r7, #20]
 81028ae:	3310      	adds	r3, #16
 81028b0:	ed93 7a01 	vldr	s14, [r3, #4]
 81028b4:	697b      	ldr	r3, [r7, #20]
 81028b6:	edd3 7a01 	vldr	s15, [r3, #4]
 81028ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 81028be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81028c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float F = d1 * d1 - d3 * d3 - refs[0].x * refs[0].x - refs[0].y * refs[0].y + refs[2].x * refs[2].x + refs[2].y * refs[2].y;
 81028c6:	edd7 7a04 	vldr	s15, [r7, #16]
 81028ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81028ce:	edd7 7a02 	vldr	s15, [r7, #8]
 81028d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81028d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 81028da:	697b      	ldr	r3, [r7, #20]
 81028dc:	edd3 6a00 	vldr	s13, [r3]
 81028e0:	697b      	ldr	r3, [r7, #20]
 81028e2:	edd3 7a00 	vldr	s15, [r3]
 81028e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81028ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 81028ee:	697b      	ldr	r3, [r7, #20]
 81028f0:	edd3 6a01 	vldr	s13, [r3, #4]
 81028f4:	697b      	ldr	r3, [r7, #20]
 81028f6:	edd3 7a01 	vldr	s15, [r3, #4]
 81028fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81028fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102902:	697b      	ldr	r3, [r7, #20]
 8102904:	3310      	adds	r3, #16
 8102906:	edd3 6a00 	vldr	s13, [r3]
 810290a:	697b      	ldr	r3, [r7, #20]
 810290c:	3310      	adds	r3, #16
 810290e:	edd3 7a00 	vldr	s15, [r3]
 8102912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8102916:	ee37 7a27 	vadd.f32	s14, s14, s15
 810291a:	697b      	ldr	r3, [r7, #20]
 810291c:	3310      	adds	r3, #16
 810291e:	edd3 6a01 	vldr	s13, [r3, #4]
 8102922:	697b      	ldr	r3, [r7, #20]
 8102924:	3310      	adds	r3, #16
 8102926:	edd3 7a01 	vldr	s15, [r3, #4]
 810292a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102932:	edc7 7a08 	vstr	s15, [r7, #32]

    float denominator = A * E - B * D;
 8102936:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 810293a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 810293e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102942:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8102946:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 810294a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810294e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102952:	edc7 7a07 	vstr	s15, [r7, #28]
    if (fabs(denominator) < 1e-6) {
 8102956:	edd7 7a07 	vldr	s15, [r7, #28]
 810295a:	eef0 7ae7 	vabs.f32	s15, s15
 810295e:	ee17 0a90 	vmov	r0, s15
 8102962:	f7fd fe89 	bl	8100678 <__aeabi_f2d>
 8102966:	a31d      	add	r3, pc, #116	@ (adr r3, 81029dc <trilateration+0x204>)
 8102968:	e9d3 2300 	ldrd	r2, r3, [r3]
 810296c:	f7fe f94e 	bl	8100c0c <__aeabi_dcmplt>
 8102970:	4603      	mov	r3, r0
 8102972:	2b00      	cmp	r3, #0
 8102974:	d003      	beq.n	810297e <trilateration+0x1a6>
        printf("Unable to locate\n");
 8102976:	4818      	ldr	r0, [pc, #96]	@ (81029d8 <trilateration+0x200>)
 8102978:	f014 fdce 	bl	8117518 <puts>
        return;
 810297c:	e029      	b.n	81029d2 <trilateration+0x1fa>
    }

    result->x = (C * E - B * F) / denominator;
 810297e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102982:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8102986:	ee27 7a27 	vmul.f32	s14, s14, s15
 810298a:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 810298e:	edd7 7a08 	vldr	s15, [r7, #32]
 8102992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8102996:	ee77 6a67 	vsub.f32	s13, s14, s15
 810299a:	ed97 7a07 	vldr	s14, [r7, #28]
 810299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	edc3 7a00 	vstr	s15, [r3]
    result->y = (A * F - C * D) / denominator;
 81029a8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 81029ac:	edd7 7a08 	vldr	s15, [r7, #32]
 81029b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 81029b4:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 81029b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 81029bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81029c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 81029c4:	ed97 7a07 	vldr	s14, [r7, #28]
 81029c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029cc:	687b      	ldr	r3, [r7, #4]
 81029ce:	edc3 7a01 	vstr	s15, [r3, #4]
}
 81029d2:	3738      	adds	r7, #56	@ 0x38
 81029d4:	46bd      	mov	sp, r7
 81029d6:	bd80      	pop	{r7, pc}
 81029d8:	0811c000 	.word	0x0811c000
 81029dc:	a0b5ed8d 	.word	0xa0b5ed8d
 81029e0:	3eb0c6f7 	.word	0x3eb0c6f7
 81029e4:	00000000 	.word	0x00000000

081029e8 <bilateration>:


static void bilateration(loc_t* handle, uint16_t valid_1, uint16_t valid_2) {
 81029e8:	b580      	push	{r7, lr}
 81029ea:	ed2d 8b02 	vpush	{d8}
 81029ee:	b092      	sub	sp, #72	@ 0x48
 81029f0:	af00      	add	r7, sp, #0
 81029f2:	6078      	str	r0, [r7, #4]
 81029f4:	460b      	mov	r3, r1
 81029f6:	807b      	strh	r3, [r7, #2]
 81029f8:	4613      	mov	r3, r2
 81029fa:	803b      	strh	r3, [r7, #0]
	float x0 = handle->field.beacons[valid_1].x, y0 = handle->field.beacons[valid_1].y;
 81029fc:	887b      	ldrh	r3, [r7, #2]
 81029fe:	687a      	ldr	r2, [r7, #4]
 8102a00:	00db      	lsls	r3, r3, #3
 8102a02:	4413      	add	r3, r2
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8102a08:	887b      	ldrh	r3, [r7, #2]
 8102a0a:	687a      	ldr	r2, [r7, #4]
 8102a0c:	00db      	lsls	r3, r3, #3
 8102a0e:	4413      	add	r3, r2
 8102a10:	3304      	adds	r3, #4
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	643b      	str	r3, [r7, #64]	@ 0x40
    float x1 = handle->field.beacons[valid_2].x, y1 = handle->field.beacons[valid_2].y;
 8102a16:	883b      	ldrh	r3, [r7, #0]
 8102a18:	687a      	ldr	r2, [r7, #4]
 8102a1a:	00db      	lsls	r3, r3, #3
 8102a1c:	4413      	add	r3, r2
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102a22:	883b      	ldrh	r3, [r7, #0]
 8102a24:	687a      	ldr	r2, [r7, #4]
 8102a26:	00db      	lsls	r3, r3, #3
 8102a28:	4413      	add	r3, r2
 8102a2a:	3304      	adds	r3, #4
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	63bb      	str	r3, [r7, #56]	@ 0x38

    float d1 = handle->tracked_beacons[valid_1].dist;
 8102a30:	887a      	ldrh	r2, [r7, #2]
 8102a32:	6879      	ldr	r1, [r7, #4]
 8102a34:	4613      	mov	r3, r2
 8102a36:	005b      	lsls	r3, r3, #1
 8102a38:	4413      	add	r3, r2
 8102a3a:	00db      	lsls	r3, r3, #3
 8102a3c:	440b      	add	r3, r1
 8102a3e:	33f8      	adds	r3, #248	@ 0xf8
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	637b      	str	r3, [r7, #52]	@ 0x34
    float d2 = handle->tracked_beacons[valid_2].dist;
 8102a44:	883a      	ldrh	r2, [r7, #0]
 8102a46:	6879      	ldr	r1, [r7, #4]
 8102a48:	4613      	mov	r3, r2
 8102a4a:	005b      	lsls	r3, r3, #1
 8102a4c:	4413      	add	r3, r2
 8102a4e:	00db      	lsls	r3, r3, #3
 8102a50:	440b      	add	r3, r1
 8102a52:	33f8      	adds	r3, #248	@ 0xf8
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	633b      	str	r3, [r7, #48]	@ 0x30

    float d = sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));
 8102a58:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8102a5c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102a60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102a64:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8102a68:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102a6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8102a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102a74:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8102a78:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8102a7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8102a80:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 8102a84:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8102a88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8102a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8102a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102a94:	ee17 0a90 	vmov	r0, s15
 8102a98:	f7fd fdee 	bl	8100678 <__aeabi_f2d>
 8102a9c:	4602      	mov	r2, r0
 8102a9e:	460b      	mov	r3, r1
 8102aa0:	ec43 2b10 	vmov	d0, r2, r3
 8102aa4:	f011 ff90 	bl	81149c8 <sqrt>
 8102aa8:	ec53 2b10 	vmov	r2, r3, d0
 8102aac:	4610      	mov	r0, r2
 8102aae:	4619      	mov	r1, r3
 8102ab0:	f7fe f932 	bl	8100d18 <__aeabi_d2f>
 8102ab4:	4603      	mov	r3, r0
 8102ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (d > d1 + d2 || d < fabs(d1 - d2)) {
 8102ab8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8102abc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8102ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102ac4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8102acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102ad0:	dc0e      	bgt.n	8102af0 <bilateration+0x108>
 8102ad2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8102ad6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8102ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102ade:	eef0 7ae7 	vabs.f32	s15, s15
 8102ae2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8102aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102aee:	d503      	bpl.n	8102af8 <bilateration+0x110>
        printf("Unable to locate (2 beacons)\n");
 8102af0:	4883      	ldr	r0, [pc, #524]	@ (8102d00 <bilateration+0x318>)
 8102af2:	f014 fd11 	bl	8117518 <puts>
        return;
 8102af6:	e0f8      	b.n	8102cea <bilateration+0x302>
    }

    float a = (d1 * d1 - d2 * d2 + d * d) / (2 * d);
 8102af8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8102afc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8102b00:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8102b04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8102b08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102b0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8102b10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8102b14:	ee77 6a27 	vadd.f32	s13, s14, s15
 8102b18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8102b1c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8102b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102b24:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float h = sqrt(d1 * d1 - a * a);
 8102b28:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8102b2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8102b30:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8102b34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8102b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102b3c:	ee17 0a90 	vmov	r0, s15
 8102b40:	f7fd fd9a 	bl	8100678 <__aeabi_f2d>
 8102b44:	4602      	mov	r2, r0
 8102b46:	460b      	mov	r3, r1
 8102b48:	ec43 2b10 	vmov	d0, r2, r3
 8102b4c:	f011 ff3c 	bl	81149c8 <sqrt>
 8102b50:	ec53 2b10 	vmov	r2, r3, d0
 8102b54:	4610      	mov	r0, r2
 8102b56:	4619      	mov	r1, r3
 8102b58:	f7fe f8de 	bl	8100d18 <__aeabi_d2f>
 8102b5c:	4603      	mov	r3, r0
 8102b5e:	627b      	str	r3, [r7, #36]	@ 0x24

    float xm = x0 + a * (x1 - x0) / d;
 8102b60:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8102b64:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102b6c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8102b70:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102b74:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102b7c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8102b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102b84:	edc7 7a08 	vstr	s15, [r7, #32]
    float ym = y0 + a * (y1 - y0) / d;
 8102b88:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8102b8c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8102b90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102b94:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8102b98:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102b9c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102ba4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8102ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102bac:	edc7 7a07 	vstr	s15, [r7, #28]

    float xs1 = xm + h * (y1 - y0) / d;
 8102bb0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8102bb4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8102bb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102bbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8102bc0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102bc4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bcc:	ed97 7a08 	vldr	s14, [r7, #32]
 8102bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102bd4:	edc7 7a06 	vstr	s15, [r7, #24]
    float ys1 = ym - h * (x1 - x0) / d;
 8102bd8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8102bdc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102be0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102be4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8102be8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102bec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bf4:	ed97 7a07 	vldr	s14, [r7, #28]
 8102bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102bfc:	edc7 7a05 	vstr	s15, [r7, #20]

    float xs2 = xm - h * (y1 - y0) / d;
 8102c00:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8102c04:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8102c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102c0c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8102c10:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102c14:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102c1c:	ed97 7a08 	vldr	s14, [r7, #32]
 8102c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102c24:	edc7 7a04 	vstr	s15, [r7, #16]
    float ys2 = ym + h * (x1 - x0) / d;
 8102c28:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8102c2c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8102c30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102c34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8102c38:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102c3c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8102c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8102c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102c4c:	edc7 7a03 	vstr	s15, [r7, #12]

    if (fabs(h) < 1e-6) {
 8102c50:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8102c54:	eef0 7ae7 	vabs.f32	s15, s15
 8102c58:	ee17 0a90 	vmov	r0, s15
 8102c5c:	f7fd fd0c 	bl	8100678 <__aeabi_f2d>
 8102c60:	a325      	add	r3, pc, #148	@ (adr r3, 8102cf8 <bilateration+0x310>)
 8102c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c66:	f7fd ffd1 	bl	8100c0c <__aeabi_dcmplt>
 8102c6a:	4603      	mov	r3, r0
 8102c6c:	2b00      	cmp	r3, #0
 8102c6e:	d006      	beq.n	8102c7e <bilateration+0x296>
    	handle->robot.x = xs1;
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	69ba      	ldr	r2, [r7, #24]
 8102c74:	629a      	str	r2, [r3, #40]	@ 0x28
        handle->robot.y = ys1;
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	697a      	ldr	r2, [r7, #20]
 8102c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8102c7c:	e035      	b.n	8102cea <bilateration+0x302>
    } else {
    	if (_dist(xs1, ys1, handle->robot.x, handle->robot.y) < _dist(xs2, ys2, handle->robot.x, handle->robot.y)) {
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8102c8a:	eef0 1a47 	vmov.f32	s3, s14
 8102c8e:	eeb0 1a67 	vmov.f32	s2, s15
 8102c92:	edd7 0a05 	vldr	s1, [r7, #20]
 8102c96:	ed97 0a06 	vldr	s0, [r7, #24]
 8102c9a:	f7ff f887 	bl	8101dac <_dist>
 8102c9e:	eeb0 8a40 	vmov.f32	s16, s0
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8102cae:	eef0 1a47 	vmov.f32	s3, s14
 8102cb2:	eeb0 1a67 	vmov.f32	s2, s15
 8102cb6:	edd7 0a03 	vldr	s1, [r7, #12]
 8102cba:	ed97 0a04 	vldr	s0, [r7, #16]
 8102cbe:	f7ff f875 	bl	8101dac <_dist>
 8102cc2:	eef0 7a40 	vmov.f32	s15, s0
 8102cc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8102cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102cce:	d506      	bpl.n	8102cde <bilateration+0x2f6>
    		handle->robot.x = xs1;
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	69ba      	ldr	r2, [r7, #24]
 8102cd4:	629a      	str	r2, [r3, #40]	@ 0x28
    		handle->robot.y = ys1;
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	697a      	ldr	r2, [r7, #20]
 8102cda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8102cdc:	e005      	b.n	8102cea <bilateration+0x302>
        } else {
        	handle->robot.x = xs2;
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	693a      	ldr	r2, [r7, #16]
 8102ce2:	629a      	str	r2, [r3, #40]	@ 0x28
        	handle->robot.y = ys2;
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	68fa      	ldr	r2, [r7, #12]
 8102ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
        }
    }
}
 8102cea:	3748      	adds	r7, #72	@ 0x48
 8102cec:	46bd      	mov	sp, r7
 8102cee:	ecbd 8b02 	vpop	{d8}
 8102cf2:	bd80      	pop	{r7, pc}
 8102cf4:	f3af 8000 	nop.w
 8102cf8:	a0b5ed8d 	.word	0xa0b5ed8d
 8102cfc:	3eb0c6f7 	.word	0x3eb0c6f7
 8102d00:	0811c014 	.word	0x0811c014
 8102d04:	00000000 	.word	0x00000000

08102d08 <angleFinder>:

static void angleFinder(robot_t* robot, point_t* ref, beacon_t* meas){ // needs position to be determined !
 8102d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8102d0c:	b08a      	sub	sp, #40	@ 0x28
 8102d0e:	af04      	add	r7, sp, #16
 8102d10:	60f8      	str	r0, [r7, #12]
 8102d12:	60b9      	str	r1, [r7, #8]
 8102d14:	607a      	str	r2, [r7, #4]

    float ref_angle = atan2f((ref->y - robot->y), (ref->x - robot->x));
 8102d16:	68bb      	ldr	r3, [r7, #8]
 8102d18:	ed93 7a01 	vldr	s14, [r3, #4]
 8102d1c:	68fb      	ldr	r3, [r7, #12]
 8102d1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8102d22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8102d26:	68bb      	ldr	r3, [r7, #8]
 8102d28:	ed93 7a00 	vldr	s14, [r3]
 8102d2c:	68fb      	ldr	r3, [r7, #12]
 8102d2e:	edd3 7a00 	vldr	s15, [r3]
 8102d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102d36:	eef0 0a67 	vmov.f32	s1, s15
 8102d3a:	eeb0 0a66 	vmov.f32	s0, s13
 8102d3e:	f011 ff17 	bl	8114b70 <atan2f>
 8102d42:	ed87 0a05 	vstr	s0, [r7, #20]

    robot->t = ref_angle - meas->angle; // the beacon's angle relative to the coordinates system, minus the beacon's angle relative to the robot
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	edd3 7a03 	vldr	s15, [r3, #12]
 8102d4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8102d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	edc3 7a02 	vstr	s15, [r3, #8]

    while(robot->t < M_PI) robot->t += 2*M_PI;
 8102d5a:	e012      	b.n	8102d82 <angleFinder+0x7a>
 8102d5c:	68fb      	ldr	r3, [r7, #12]
 8102d5e:	689b      	ldr	r3, [r3, #8]
 8102d60:	4618      	mov	r0, r3
 8102d62:	f7fd fc89 	bl	8100678 <__aeabi_f2d>
 8102d66:	a32f      	add	r3, pc, #188	@ (adr r3, 8102e24 <angleFinder+0x11c>)
 8102d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d6c:	f7fd fb26 	bl	81003bc <__adddf3>
 8102d70:	4602      	mov	r2, r0
 8102d72:	460b      	mov	r3, r1
 8102d74:	4610      	mov	r0, r2
 8102d76:	4619      	mov	r1, r3
 8102d78:	f7fd ffce 	bl	8100d18 <__aeabi_d2f>
 8102d7c:	4602      	mov	r2, r0
 8102d7e:	68fb      	ldr	r3, [r7, #12]
 8102d80:	609a      	str	r2, [r3, #8]
 8102d82:	68fb      	ldr	r3, [r7, #12]
 8102d84:	689b      	ldr	r3, [r3, #8]
 8102d86:	4618      	mov	r0, r3
 8102d88:	f7fd fc76 	bl	8100678 <__aeabi_f2d>
 8102d8c:	a327      	add	r3, pc, #156	@ (adr r3, 8102e2c <angleFinder+0x124>)
 8102d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d92:	f7fd ff3b 	bl	8100c0c <__aeabi_dcmplt>
 8102d96:	4603      	mov	r3, r0
 8102d98:	2b00      	cmp	r3, #0
 8102d9a:	d1df      	bne.n	8102d5c <angleFinder+0x54>
    while(robot->t >= M_PI) robot->t -= 2*M_PI;
 8102d9c:	e012      	b.n	8102dc4 <angleFinder+0xbc>
 8102d9e:	68fb      	ldr	r3, [r7, #12]
 8102da0:	689b      	ldr	r3, [r3, #8]
 8102da2:	4618      	mov	r0, r3
 8102da4:	f7fd fc68 	bl	8100678 <__aeabi_f2d>
 8102da8:	a31e      	add	r3, pc, #120	@ (adr r3, 8102e24 <angleFinder+0x11c>)
 8102daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dae:	f7fd fb03 	bl	81003b8 <__aeabi_dsub>
 8102db2:	4602      	mov	r2, r0
 8102db4:	460b      	mov	r3, r1
 8102db6:	4610      	mov	r0, r2
 8102db8:	4619      	mov	r1, r3
 8102dba:	f7fd ffad 	bl	8100d18 <__aeabi_d2f>
 8102dbe:	4602      	mov	r2, r0
 8102dc0:	68fb      	ldr	r3, [r7, #12]
 8102dc2:	609a      	str	r2, [r3, #8]
 8102dc4:	68fb      	ldr	r3, [r7, #12]
 8102dc6:	689b      	ldr	r3, [r3, #8]
 8102dc8:	4618      	mov	r0, r3
 8102dca:	f7fd fc55 	bl	8100678 <__aeabi_f2d>
 8102dce:	a317      	add	r3, pc, #92	@ (adr r3, 8102e2c <angleFinder+0x124>)
 8102dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dd4:	f7fd ff2e 	bl	8100c34 <__aeabi_dcmpge>
 8102dd8:	4603      	mov	r3, r0
 8102dda:	2b00      	cmp	r3, #0
 8102ddc:	d1df      	bne.n	8102d9e <angleFinder+0x96>
#ifdef VERBOSE
    printf("angle rob_t %.3f ref %.3f meas %.3f \n", robot->t, ref_angle, meas->angle);
 8102dde:	68fb      	ldr	r3, [r7, #12]
 8102de0:	689b      	ldr	r3, [r3, #8]
 8102de2:	4618      	mov	r0, r3
 8102de4:	f7fd fc48 	bl	8100678 <__aeabi_f2d>
 8102de8:	4680      	mov	r8, r0
 8102dea:	4689      	mov	r9, r1
 8102dec:	6978      	ldr	r0, [r7, #20]
 8102dee:	f7fd fc43 	bl	8100678 <__aeabi_f2d>
 8102df2:	4604      	mov	r4, r0
 8102df4:	460d      	mov	r5, r1
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	68db      	ldr	r3, [r3, #12]
 8102dfa:	4618      	mov	r0, r3
 8102dfc:	f7fd fc3c 	bl	8100678 <__aeabi_f2d>
 8102e00:	4602      	mov	r2, r0
 8102e02:	460b      	mov	r3, r1
 8102e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8102e08:	e9cd 4500 	strd	r4, r5, [sp]
 8102e0c:	4642      	mov	r2, r8
 8102e0e:	464b      	mov	r3, r9
 8102e10:	4803      	ldr	r0, [pc, #12]	@ (8102e20 <angleFinder+0x118>)
 8102e12:	f014 fb11 	bl	8117438 <iprintf>
#endif
}
 8102e16:	bf00      	nop
 8102e18:	3718      	adds	r7, #24
 8102e1a:	46bd      	mov	sp, r7
 8102e1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8102e20:	0811c034 	.word	0x0811c034
 8102e24:	54442d18 	.word	0x54442d18
 8102e28:	401921fb 	.word	0x401921fb
 8102e2c:	54442d18 	.word	0x54442d18
 8102e30:	400921fb 	.word	0x400921fb

08102e34 <computePosition>:

void computePosition(loc_t* handle){
 8102e34:	b580      	push	{r7, lr}
 8102e36:	b086      	sub	sp, #24
 8102e38:	af00      	add	r7, sp, #0
 8102e3a:	6078      	str	r0, [r7, #4]
    uint16_t nb_beacons = 0;
 8102e3c:	2300      	movs	r3, #0
 8102e3e:	82fb      	strh	r3, [r7, #22]
    for(uint16_t i = 0; i < NUM_BEACONS; i ++){ // first, figure out how many of the beacons we can see (and use)
 8102e40:	2300      	movs	r3, #0
 8102e42:	82bb      	strh	r3, [r7, #20]
 8102e44:	e011      	b.n	8102e6a <computePosition+0x36>
        if(handle->tracked_beacons[i].lock) nb_beacons++;
 8102e46:	8aba      	ldrh	r2, [r7, #20]
 8102e48:	6879      	ldr	r1, [r7, #4]
 8102e4a:	4613      	mov	r3, r2
 8102e4c:	005b      	lsls	r3, r3, #1
 8102e4e:	4413      	add	r3, r2
 8102e50:	00db      	lsls	r3, r3, #3
 8102e52:	440b      	add	r3, r1
 8102e54:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8102e58:	781b      	ldrb	r3, [r3, #0]
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	d002      	beq.n	8102e64 <computePosition+0x30>
 8102e5e:	8afb      	ldrh	r3, [r7, #22]
 8102e60:	3301      	adds	r3, #1
 8102e62:	82fb      	strh	r3, [r7, #22]
    for(uint16_t i = 0; i < NUM_BEACONS; i ++){ // first, figure out how many of the beacons we can see (and use)
 8102e64:	8abb      	ldrh	r3, [r7, #20]
 8102e66:	3301      	adds	r3, #1
 8102e68:	82bb      	strh	r3, [r7, #20]
 8102e6a:	8abb      	ldrh	r3, [r7, #20]
 8102e6c:	2b02      	cmp	r3, #2
 8102e6e:	d9ea      	bls.n	8102e46 <computePosition+0x12>
    }

    switch (nb_beacons){
 8102e70:	8afb      	ldrh	r3, [r7, #22]
 8102e72:	2b03      	cmp	r3, #3
 8102e74:	d00b      	beq.n	8102e8e <computePosition+0x5a>
 8102e76:	2b03      	cmp	r3, #3
 8102e78:	dc06      	bgt.n	8102e88 <computePosition+0x54>
 8102e7a:	2b01      	cmp	r3, #1
 8102e7c:	dc02      	bgt.n	8102e84 <computePosition+0x50>
 8102e7e:	2b00      	cmp	r3, #0
 8102e80:	da62      	bge.n	8102f48 <computePosition+0x114>
 8102e82:	e001      	b.n	8102e88 <computePosition+0x54>
 8102e84:	2b02      	cmp	r3, #2
 8102e86:	d022      	beq.n	8102ece <computePosition+0x9a>
        default :
            printf("More than 3 beacons available, using only 3\n");
 8102e88:	4833      	ldr	r0, [pc, #204]	@ (8102f58 <computePosition+0x124>)
 8102e8a:	f014 fb45 	bl	8117518 <puts>
        case 3 :
            trilateration(handle->field.beacons, handle->tracked_beacons[0].dist, handle->tracked_beacons[1].dist, handle->tracked_beacons[2].dist, &(handle->robot));
 8102e8e:	687a      	ldr	r2, [r7, #4]
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	ed93 7a44 	vldr	s14, [r3, #272]	@ 0x110
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	edd3 6a4a 	vldr	s13, [r3, #296]	@ 0x128
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	3328      	adds	r3, #40	@ 0x28
 8102ea6:	4619      	mov	r1, r3
 8102ea8:	eeb0 1a66 	vmov.f32	s2, s13
 8102eac:	eef0 0a47 	vmov.f32	s1, s14
 8102eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8102eb4:	4610      	mov	r0, r2
 8102eb6:	f7ff fc8f 	bl	81027d8 <trilateration>
            angleFinder(&(handle->robot),&(handle->field.beacons[0]), &(handle->tracked_beacons[0]));
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8102ec0:	6879      	ldr	r1, [r7, #4]
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	33f0      	adds	r3, #240	@ 0xf0
 8102ec6:	461a      	mov	r2, r3
 8102ec8:	f7ff ff1e 	bl	8102d08 <angleFinder>
            break;
 8102ecc:	e040      	b.n	8102f50 <computePosition+0x11c>
        case 2 :
        	uint16_t valid_1 = -1;
 8102ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102ed2:	827b      	strh	r3, [r7, #18]
			uint16_t valid_2 = -1;
 8102ed4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102ed8:	823b      	strh	r3, [r7, #16]

        	for(uint16_t i = 0; i < NUM_BEACONS; i++){
 8102eda:	2300      	movs	r3, #0
 8102edc:	81fb      	strh	r3, [r7, #14]
 8102ede:	e018      	b.n	8102f12 <computePosition+0xde>
        		if(handle->tracked_beacons[i].lock){
 8102ee0:	89fa      	ldrh	r2, [r7, #14]
 8102ee2:	6879      	ldr	r1, [r7, #4]
 8102ee4:	4613      	mov	r3, r2
 8102ee6:	005b      	lsls	r3, r3, #1
 8102ee8:	4413      	add	r3, r2
 8102eea:	00db      	lsls	r3, r3, #3
 8102eec:	440b      	add	r3, r1
 8102eee:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8102ef2:	781b      	ldrb	r3, [r3, #0]
 8102ef4:	2b00      	cmp	r3, #0
 8102ef6:	d009      	beq.n	8102f0c <computePosition+0xd8>
        			if(valid_1 == (uint16_t)-1) valid_1 = i;
 8102ef8:	8a7b      	ldrh	r3, [r7, #18]
 8102efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8102efe:	4293      	cmp	r3, r2
 8102f00:	d102      	bne.n	8102f08 <computePosition+0xd4>
 8102f02:	89fb      	ldrh	r3, [r7, #14]
 8102f04:	827b      	strh	r3, [r7, #18]
 8102f06:	e001      	b.n	8102f0c <computePosition+0xd8>
        			else valid_2 = i;
 8102f08:	89fb      	ldrh	r3, [r7, #14]
 8102f0a:	823b      	strh	r3, [r7, #16]
        	for(uint16_t i = 0; i < NUM_BEACONS; i++){
 8102f0c:	89fb      	ldrh	r3, [r7, #14]
 8102f0e:	3301      	adds	r3, #1
 8102f10:	81fb      	strh	r3, [r7, #14]
 8102f12:	89fb      	ldrh	r3, [r7, #14]
 8102f14:	2b02      	cmp	r3, #2
 8102f16:	d9e3      	bls.n	8102ee0 <computePosition+0xac>
        		}
        	}

            bilateration(handle, valid_1, valid_2);
 8102f18:	8a3a      	ldrh	r2, [r7, #16]
 8102f1a:	8a7b      	ldrh	r3, [r7, #18]
 8102f1c:	4619      	mov	r1, r3
 8102f1e:	6878      	ldr	r0, [r7, #4]
 8102f20:	f7ff fd62 	bl	81029e8 <bilateration>
            angleFinder(&(handle->robot),&(handle->field.beacons[valid_1]), &(handle->tracked_beacons[valid_1]));
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8102f2a:	8a7b      	ldrh	r3, [r7, #18]
 8102f2c:	00db      	lsls	r3, r3, #3
 8102f2e:	687a      	ldr	r2, [r7, #4]
 8102f30:	18d1      	adds	r1, r2, r3
 8102f32:	8a7a      	ldrh	r2, [r7, #18]
 8102f34:	4613      	mov	r3, r2
 8102f36:	005b      	lsls	r3, r3, #1
 8102f38:	4413      	add	r3, r2
 8102f3a:	00db      	lsls	r3, r3, #3
 8102f3c:	33f0      	adds	r3, #240	@ 0xf0
 8102f3e:	687a      	ldr	r2, [r7, #4]
 8102f40:	4413      	add	r3, r2
 8102f42:	461a      	mov	r2, r3
 8102f44:	f7ff fee0 	bl	8102d08 <angleFinder>
        case 1 : // figure out position based on only one beacon is both impossible without another source of information, and risky, as we could quite easily loose it
        case 0 :
            printf("Not enough beacons !\n");
 8102f48:	4804      	ldr	r0, [pc, #16]	@ (8102f5c <computePosition+0x128>)
 8102f4a:	f014 fae5 	bl	8117518 <puts>
            break;
 8102f4e:	bf00      	nop
    }
}
 8102f50:	bf00      	nop
 8102f52:	3718      	adds	r7, #24
 8102f54:	46bd      	mov	sp, r7
 8102f56:	bd80      	pop	{r7, pc}
 8102f58:	0811c05c 	.word	0x0811c05c
 8102f5c:	0811c088 	.word	0x0811c088

08102f60 <_getToNextCtrlChr>:

uint8_t control_chars[] = {'\0','"',',',':','{','}'};

char header_buffer[MAX_TOKEN_LENGHT], data_buffer[MAX_TOKEN_LENGHT]; // having only one buffer seems to cause issues when both getHeader and getData are called inside the same function (printf for example)

static uint8_t _getToNextCtrlChr(uint16_t* cursor, uint8_t data[], uint16_t max_index){
 8102f60:	b480      	push	{r7}
 8102f62:	b087      	sub	sp, #28
 8102f64:	af00      	add	r7, sp, #0
 8102f66:	60f8      	str	r0, [r7, #12]
 8102f68:	60b9      	str	r1, [r7, #8]
 8102f6a:	4613      	mov	r3, r2
 8102f6c:	80fb      	strh	r3, [r7, #6]
	while(*cursor < max_index){
 8102f6e:	e01d      	b.n	8102fac <_getToNextCtrlChr+0x4c>
		for (uint16_t i = 0; i < sizeof(control_chars)/sizeof(control_chars[0]); i ++){
 8102f70:	2300      	movs	r3, #0
 8102f72:	82fb      	strh	r3, [r7, #22]
 8102f74:	e011      	b.n	8102f9a <_getToNextCtrlChr+0x3a>
			if(data[*cursor] == control_chars[i]) return control_chars[i];
 8102f76:	68fb      	ldr	r3, [r7, #12]
 8102f78:	881b      	ldrh	r3, [r3, #0]
 8102f7a:	461a      	mov	r2, r3
 8102f7c:	68bb      	ldr	r3, [r7, #8]
 8102f7e:	4413      	add	r3, r2
 8102f80:	781a      	ldrb	r2, [r3, #0]
 8102f82:	8afb      	ldrh	r3, [r7, #22]
 8102f84:	490f      	ldr	r1, [pc, #60]	@ (8102fc4 <_getToNextCtrlChr+0x64>)
 8102f86:	5ccb      	ldrb	r3, [r1, r3]
 8102f88:	429a      	cmp	r2, r3
 8102f8a:	d103      	bne.n	8102f94 <_getToNextCtrlChr+0x34>
 8102f8c:	8afb      	ldrh	r3, [r7, #22]
 8102f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8102fc4 <_getToNextCtrlChr+0x64>)
 8102f90:	5cd3      	ldrb	r3, [r2, r3]
 8102f92:	e011      	b.n	8102fb8 <_getToNextCtrlChr+0x58>
		for (uint16_t i = 0; i < sizeof(control_chars)/sizeof(control_chars[0]); i ++){
 8102f94:	8afb      	ldrh	r3, [r7, #22]
 8102f96:	3301      	adds	r3, #1
 8102f98:	82fb      	strh	r3, [r7, #22]
 8102f9a:	8afb      	ldrh	r3, [r7, #22]
 8102f9c:	2b05      	cmp	r3, #5
 8102f9e:	d9ea      	bls.n	8102f76 <_getToNextCtrlChr+0x16>
		}
		(*cursor)++;
 8102fa0:	68fb      	ldr	r3, [r7, #12]
 8102fa2:	881b      	ldrh	r3, [r3, #0]
 8102fa4:	3301      	adds	r3, #1
 8102fa6:	b29a      	uxth	r2, r3
 8102fa8:	68fb      	ldr	r3, [r7, #12]
 8102faa:	801a      	strh	r2, [r3, #0]
	while(*cursor < max_index){
 8102fac:	68fb      	ldr	r3, [r7, #12]
 8102fae:	881b      	ldrh	r3, [r3, #0]
 8102fb0:	88fa      	ldrh	r2, [r7, #6]
 8102fb2:	429a      	cmp	r2, r3
 8102fb4:	d8dc      	bhi.n	8102f70 <_getToNextCtrlChr+0x10>
	}

	return '\0';
 8102fb6:	2300      	movs	r3, #0
}
 8102fb8:	4618      	mov	r0, r3
 8102fba:	371c      	adds	r7, #28
 8102fbc:	46bd      	mov	sp, r7
 8102fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc2:	4770      	bx	lr
 8102fc4:	10000000 	.word	0x10000000

08102fc8 <parse>:

#define current_token tokens->tokens[tokens->nb]

parse_err_t parse(tokens_t* tokens, uint8_t data[], uint16_t len){
 8102fc8:	b580      	push	{r7, lr}
 8102fca:	b086      	sub	sp, #24
 8102fcc:	af00      	add	r7, sp, #0
 8102fce:	60f8      	str	r0, [r7, #12]
 8102fd0:	60b9      	str	r1, [r7, #8]
 8102fd2:	4613      	mov	r3, r2
 8102fd4:	80fb      	strh	r3, [r7, #6]
	uint16_t cursor = 0; // cursor
 8102fd6:	2300      	movs	r3, #0
 8102fd8:	82bb      	strh	r3, [r7, #20]
	tokens->nb = 0;
 8102fda:	68fb      	ldr	r3, [r7, #12]
 8102fdc:	2200      	movs	r2, #0
 8102fde:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
	uint8_t apostrophe_cnt = 0;
 8102fe2:	2300      	movs	r3, #0
 8102fe4:	75fb      	strb	r3, [r7, #23]

	if(_getToNextCtrlChr(&cursor, data, len) != '{') return not_found;
 8102fe6:	88fa      	ldrh	r2, [r7, #6]
 8102fe8:	f107 0314 	add.w	r3, r7, #20
 8102fec:	68b9      	ldr	r1, [r7, #8]
 8102fee:	4618      	mov	r0, r3
 8102ff0:	f7ff ffb6 	bl	8102f60 <_getToNextCtrlChr>
 8102ff4:	4603      	mov	r3, r0
 8102ff6:	2b7b      	cmp	r3, #123	@ 0x7b
 8102ff8:	f000 80aa 	beq.w	8103150 <parse+0x188>
 8102ffc:	2300      	movs	r3, #0
 8102ffe:	e0ad      	b.n	810315c <parse+0x194>

	while(cursor < len){
		cursor++; // ignore the previous control character (not to find it again 0 chars away)
 8103000:	8abb      	ldrh	r3, [r7, #20]
 8103002:	3301      	adds	r3, #1
 8103004:	b29b      	uxth	r3, r3
 8103006:	82bb      	strh	r3, [r7, #20]
		switch(_getToNextCtrlChr(&cursor, data, len)){
 8103008:	88fa      	ldrh	r2, [r7, #6]
 810300a:	f107 0314 	add.w	r3, r7, #20
 810300e:	68b9      	ldr	r1, [r7, #8]
 8103010:	4618      	mov	r0, r3
 8103012:	f7ff ffa5 	bl	8102f60 <_getToNextCtrlChr>
 8103016:	4603      	mov	r3, r0
 8103018:	2b7d      	cmp	r3, #125	@ 0x7d
 810301a:	f000 808c 	beq.w	8103136 <parse+0x16e>
 810301e:	2b7d      	cmp	r3, #125	@ 0x7d
 8103020:	f300 8093 	bgt.w	810314a <parse+0x182>
 8103024:	2b7b      	cmp	r3, #123	@ 0x7b
 8103026:	f000 8084 	beq.w	8103132 <parse+0x16a>
 810302a:	2b7b      	cmp	r3, #123	@ 0x7b
 810302c:	f300 808d 	bgt.w	810314a <parse+0x182>
 8103030:	2b3a      	cmp	r3, #58	@ 0x3a
 8103032:	d06a      	beq.n	810310a <parse+0x142>
 8103034:	2b3a      	cmp	r3, #58	@ 0x3a
 8103036:	f300 8088 	bgt.w	810314a <parse+0x182>
 810303a:	2b22      	cmp	r3, #34	@ 0x22
 810303c:	d002      	beq.n	8103044 <parse+0x7c>
 810303e:	2b2c      	cmp	r3, #44	@ 0x2c
 8103040:	d045      	beq.n	81030ce <parse+0x106>
 8103042:	e082      	b.n	810314a <parse+0x182>
		case '"' :
			switch (apostrophe_cnt){
 8103044:	7dfb      	ldrb	r3, [r7, #23]
 8103046:	2b03      	cmp	r3, #3
 8103048:	d83b      	bhi.n	81030c2 <parse+0xfa>
 810304a:	a201      	add	r2, pc, #4	@ (adr r2, 8103050 <parse+0x88>)
 810304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103050:	08103061 	.word	0x08103061
 8103054:	08103075 	.word	0x08103075
 8103058:	0810308f 	.word	0x0810308f
 810305c:	081030a9 	.word	0x081030a9
				case 0 : current_token.head_start = cursor + 1; break;
 8103060:	8abb      	ldrh	r3, [r7, #20]
 8103062:	68fa      	ldr	r2, [r7, #12]
 8103064:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	@ 0x800
 8103068:	3301      	adds	r3, #1
 810306a:	b299      	uxth	r1, r3
 810306c:	68fb      	ldr	r3, [r7, #12]
 810306e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
 8103072:	e028      	b.n	81030c6 <parse+0xfe>
				case 1 : current_token.head_end = cursor - 1; break;
 8103074:	8abb      	ldrh	r3, [r7, #20]
 8103076:	68fa      	ldr	r2, [r7, #12]
 8103078:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	@ 0x800
 810307c:	4610      	mov	r0, r2
 810307e:	3b01      	subs	r3, #1
 8103080:	b299      	uxth	r1, r3
 8103082:	68fa      	ldr	r2, [r7, #12]
 8103084:	00c3      	lsls	r3, r0, #3
 8103086:	4413      	add	r3, r2
 8103088:	460a      	mov	r2, r1
 810308a:	805a      	strh	r2, [r3, #2]
 810308c:	e01b      	b.n	81030c6 <parse+0xfe>
				case 2 : current_token.data_start = cursor + 1; break;
 810308e:	8abb      	ldrh	r3, [r7, #20]
 8103090:	68fa      	ldr	r2, [r7, #12]
 8103092:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	@ 0x800
 8103096:	4610      	mov	r0, r2
 8103098:	3301      	adds	r3, #1
 810309a:	b299      	uxth	r1, r3
 810309c:	68fa      	ldr	r2, [r7, #12]
 810309e:	00c3      	lsls	r3, r0, #3
 81030a0:	4413      	add	r3, r2
 81030a2:	460a      	mov	r2, r1
 81030a4:	809a      	strh	r2, [r3, #4]
 81030a6:	e00e      	b.n	81030c6 <parse+0xfe>
				case 3 : current_token.data_end = cursor - 1; break;
 81030a8:	8abb      	ldrh	r3, [r7, #20]
 81030aa:	68fa      	ldr	r2, [r7, #12]
 81030ac:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	@ 0x800
 81030b0:	4610      	mov	r0, r2
 81030b2:	3b01      	subs	r3, #1
 81030b4:	b299      	uxth	r1, r3
 81030b6:	68fa      	ldr	r2, [r7, #12]
 81030b8:	00c3      	lsls	r3, r0, #3
 81030ba:	4413      	add	r3, r2
 81030bc:	460a      	mov	r2, r1
 81030be:	80da      	strh	r2, [r3, #6]
 81030c0:	e001      	b.n	81030c6 <parse+0xfe>
				default : return format;
 81030c2:	2301      	movs	r3, #1
 81030c4:	e04a      	b.n	810315c <parse+0x194>
			}
			apostrophe_cnt ++;
 81030c6:	7dfb      	ldrb	r3, [r7, #23]
 81030c8:	3301      	adds	r3, #1
 81030ca:	75fb      	strb	r3, [r7, #23]

			break;
 81030cc:	e040      	b.n	8103150 <parse+0x188>
		case ',' :
			if(data[cursor -1] != '"') current_token.data_end = cursor -1;
 81030ce:	8abb      	ldrh	r3, [r7, #20]
 81030d0:	3b01      	subs	r3, #1
 81030d2:	68ba      	ldr	r2, [r7, #8]
 81030d4:	4413      	add	r3, r2
 81030d6:	781b      	ldrb	r3, [r3, #0]
 81030d8:	2b22      	cmp	r3, #34	@ 0x22
 81030da:	d00b      	beq.n	81030f4 <parse+0x12c>
 81030dc:	8abb      	ldrh	r3, [r7, #20]
 81030de:	68fa      	ldr	r2, [r7, #12]
 81030e0:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	@ 0x800
 81030e4:	4610      	mov	r0, r2
 81030e6:	3b01      	subs	r3, #1
 81030e8:	b299      	uxth	r1, r3
 81030ea:	68fa      	ldr	r2, [r7, #12]
 81030ec:	00c3      	lsls	r3, r0, #3
 81030ee:	4413      	add	r3, r2
 81030f0:	460a      	mov	r2, r1
 81030f2:	80da      	strh	r2, [r3, #6]

			tokens->nb++;
 81030f4:	68fb      	ldr	r3, [r7, #12]
 81030f6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 81030fa:	3301      	adds	r3, #1
 81030fc:	b29a      	uxth	r2, r3
 81030fe:	68fb      	ldr	r3, [r7, #12]
 8103100:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
			apostrophe_cnt = 0;
 8103104:	2300      	movs	r3, #0
 8103106:	75fb      	strb	r3, [r7, #23]
			break;
 8103108:	e022      	b.n	8103150 <parse+0x188>
		case ':' :
			if(data[cursor +1] != '"') current_token.data_start = cursor +1;
 810310a:	8abb      	ldrh	r3, [r7, #20]
 810310c:	3301      	adds	r3, #1
 810310e:	68ba      	ldr	r2, [r7, #8]
 8103110:	4413      	add	r3, r2
 8103112:	781b      	ldrb	r3, [r3, #0]
 8103114:	2b22      	cmp	r3, #34	@ 0x22
 8103116:	d01a      	beq.n	810314e <parse+0x186>
 8103118:	8abb      	ldrh	r3, [r7, #20]
 810311a:	68fa      	ldr	r2, [r7, #12]
 810311c:	f8b2 2800 	ldrh.w	r2, [r2, #2048]	@ 0x800
 8103120:	4610      	mov	r0, r2
 8103122:	3301      	adds	r3, #1
 8103124:	b299      	uxth	r1, r3
 8103126:	68fa      	ldr	r2, [r7, #12]
 8103128:	00c3      	lsls	r3, r0, #3
 810312a:	4413      	add	r3, r2
 810312c:	460a      	mov	r2, r1
 810312e:	809a      	strh	r2, [r3, #4]
			break;
 8103130:	e00d      	b.n	810314e <parse+0x186>
		case '{' :
			return format;
 8103132:	2301      	movs	r3, #1
 8103134:	e012      	b.n	810315c <parse+0x194>
		case '}' :
			tokens->nb++; // the last token is not followed by a ',' as the '}' replaces it
 8103136:	68fb      	ldr	r3, [r7, #12]
 8103138:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 810313c:	3301      	adds	r3, #1
 810313e:	b29a      	uxth	r2, r3
 8103140:	68fb      	ldr	r3, [r7, #12]
 8103142:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
			return done;
 8103146:	2302      	movs	r3, #2
 8103148:	e008      	b.n	810315c <parse+0x194>
		default : return format;
 810314a:	2301      	movs	r3, #1
 810314c:	e006      	b.n	810315c <parse+0x194>
			break;
 810314e:	bf00      	nop
	while(cursor < len){
 8103150:	8abb      	ldrh	r3, [r7, #20]
 8103152:	88fa      	ldrh	r2, [r7, #6]
 8103154:	429a      	cmp	r2, r3
 8103156:	f63f af53 	bhi.w	8103000 <parse+0x38>
		}
	}

	return format; // got to the end of the buffer without finding a '}' to indicate the end of the json string
 810315a:	2301      	movs	r3, #1
}
 810315c:	4618      	mov	r0, r3
 810315e:	3718      	adds	r7, #24
 8103160:	46bd      	mov	sp, r7
 8103162:	bd80      	pop	{r7, pc}

08103164 <getHeader>:

char* getHeader(uint8_t buffer[], token_t* token){
 8103164:	b580      	push	{r7, lr}
 8103166:	b082      	sub	sp, #8
 8103168:	af00      	add	r7, sp, #0
 810316a:	6078      	str	r0, [r7, #4]
 810316c:	6039      	str	r1, [r7, #0]
	memcpy(header_buffer, &buffer[token->head_start], token->head_end - token->head_start +1);
 810316e:	683b      	ldr	r3, [r7, #0]
 8103170:	881b      	ldrh	r3, [r3, #0]
 8103172:	461a      	mov	r2, r3
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	1899      	adds	r1, r3, r2
 8103178:	683b      	ldr	r3, [r7, #0]
 810317a:	885b      	ldrh	r3, [r3, #2]
 810317c:	461a      	mov	r2, r3
 810317e:	683b      	ldr	r3, [r7, #0]
 8103180:	881b      	ldrh	r3, [r3, #0]
 8103182:	1ad3      	subs	r3, r2, r3
 8103184:	3301      	adds	r3, #1
 8103186:	461a      	mov	r2, r3
 8103188:	4808      	ldr	r0, [pc, #32]	@ (81031ac <getHeader+0x48>)
 810318a:	f014 fbd4 	bl	8117936 <memcpy>
	header_buffer[token->head_end - token->head_start +1] = '\0';
 810318e:	683b      	ldr	r3, [r7, #0]
 8103190:	885b      	ldrh	r3, [r3, #2]
 8103192:	461a      	mov	r2, r3
 8103194:	683b      	ldr	r3, [r7, #0]
 8103196:	881b      	ldrh	r3, [r3, #0]
 8103198:	1ad3      	subs	r3, r2, r3
 810319a:	3301      	adds	r3, #1
 810319c:	4a03      	ldr	r2, [pc, #12]	@ (81031ac <getHeader+0x48>)
 810319e:	2100      	movs	r1, #0
 81031a0:	54d1      	strb	r1, [r2, r3]
	return header_buffer;
 81031a2:	4b02      	ldr	r3, [pc, #8]	@ (81031ac <getHeader+0x48>)
}
 81031a4:	4618      	mov	r0, r3
 81031a6:	3708      	adds	r7, #8
 81031a8:	46bd      	mov	sp, r7
 81031aa:	bd80      	pop	{r7, pc}
 81031ac:	10003cb8 	.word	0x10003cb8

081031b0 <getData>:
char* getData(uint8_t buffer[], token_t* token){
 81031b0:	b580      	push	{r7, lr}
 81031b2:	b082      	sub	sp, #8
 81031b4:	af00      	add	r7, sp, #0
 81031b6:	6078      	str	r0, [r7, #4]
 81031b8:	6039      	str	r1, [r7, #0]
	memcpy(data_buffer, &buffer[token->data_start], token->data_end - token->data_start +1);
 81031ba:	683b      	ldr	r3, [r7, #0]
 81031bc:	889b      	ldrh	r3, [r3, #4]
 81031be:	461a      	mov	r2, r3
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	1899      	adds	r1, r3, r2
 81031c4:	683b      	ldr	r3, [r7, #0]
 81031c6:	88db      	ldrh	r3, [r3, #6]
 81031c8:	461a      	mov	r2, r3
 81031ca:	683b      	ldr	r3, [r7, #0]
 81031cc:	889b      	ldrh	r3, [r3, #4]
 81031ce:	1ad3      	subs	r3, r2, r3
 81031d0:	3301      	adds	r3, #1
 81031d2:	461a      	mov	r2, r3
 81031d4:	4808      	ldr	r0, [pc, #32]	@ (81031f8 <getData+0x48>)
 81031d6:	f014 fbae 	bl	8117936 <memcpy>
	data_buffer[token->data_end - token->data_start +1] = '\0';
 81031da:	683b      	ldr	r3, [r7, #0]
 81031dc:	88db      	ldrh	r3, [r3, #6]
 81031de:	461a      	mov	r2, r3
 81031e0:	683b      	ldr	r3, [r7, #0]
 81031e2:	889b      	ldrh	r3, [r3, #4]
 81031e4:	1ad3      	subs	r3, r2, r3
 81031e6:	3301      	adds	r3, #1
 81031e8:	4a03      	ldr	r2, [pc, #12]	@ (81031f8 <getData+0x48>)
 81031ea:	2100      	movs	r1, #0
 81031ec:	54d1      	strb	r1, [r2, r3]
	return data_buffer;
 81031ee:	4b02      	ldr	r3, [pc, #8]	@ (81031f8 <getData+0x48>)
}
 81031f0:	4618      	mov	r0, r3
 81031f2:	3708      	adds	r7, #8
 81031f4:	46bd      	mov	sp, r7
 81031f6:	bd80      	pop	{r7, pc}
 81031f8:	10003d38 	.word	0x10003d38
 81031fc:	00000000 	.word	0x00000000

08103200 <_isolateBeacons>:
    }

    printf("simulated robot :\nx %.2f y %.2f t %.4f\n", true_robot->x, true_robot->y, true_robot->t);
}

static uint16_t _isolateBeacons(R2000_data_point_t* buff, uint16_t buff_amnt, uint16_t buff_max, lidar_point_t* lidar_filtered){
 8103200:	b5b0      	push	{r4, r5, r7, lr}
 8103202:	b08c      	sub	sp, #48	@ 0x30
 8103204:	af00      	add	r7, sp, #0
 8103206:	60f8      	str	r0, [r7, #12]
 8103208:	607b      	str	r3, [r7, #4]
 810320a:	460b      	mov	r3, r1
 810320c:	817b      	strh	r3, [r7, #10]
 810320e:	4613      	mov	r3, r2
 8103210:	813b      	strh	r3, [r7, #8]
	uint16_t last_valid = 0;
 8103212:	2300      	movs	r3, #0
 8103214:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t valid_amnt = 0;
 8103216:	2300      	movs	r3, #0
 8103218:	85bb      	strh	r3, [r7, #44]	@ 0x2c


	uint32_t dist_sum = 0;
 810321a:	2300      	movs	r3, #0
 810321c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t ang_sum = 0;
 810321e:	2300      	movs	r3, #0
 8103220:	627b      	str	r3, [r7, #36]	@ 0x24

	uint16_t out_index = 0;
 8103222:	2300      	movs	r3, #0
 8103224:	847b      	strh	r3, [r7, #34]	@ 0x22

	int32_t offset = 0;
 8103226:	2300      	movs	r3, #0
 8103228:	61fb      	str	r3, [r7, #28]
	for(int32_t i = 0; i < offset + MAX_GAP_FILTER; i++){ // offset the whole thing by the amount of valid continuous points in the negative values to handle crossing 0
 810322a:	2300      	movs	r3, #0
 810322c:	61bb      	str	r3, [r7, #24]
 810322e:	e014      	b.n	810325a <_isolateBeacons+0x5a>
		if(buff[buff_max - i].amplitude > MIN_AMP_FILTER) offset = i;
 8103230:	893a      	ldrh	r2, [r7, #8]
 8103232:	69bb      	ldr	r3, [r7, #24]
 8103234:	1ad3      	subs	r3, r2, r3
 8103236:	461a      	mov	r2, r3
 8103238:	4613      	mov	r3, r2
 810323a:	005b      	lsls	r3, r3, #1
 810323c:	4413      	add	r3, r2
 810323e:	005b      	lsls	r3, r3, #1
 8103240:	461a      	mov	r2, r3
 8103242:	68fb      	ldr	r3, [r7, #12]
 8103244:	4413      	add	r3, r2
 8103246:	889b      	ldrh	r3, [r3, #4]
 8103248:	b29b      	uxth	r3, r3
 810324a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810324e:	d901      	bls.n	8103254 <_isolateBeacons+0x54>
 8103250:	69bb      	ldr	r3, [r7, #24]
 8103252:	61fb      	str	r3, [r7, #28]
	for(int32_t i = 0; i < offset + MAX_GAP_FILTER; i++){ // offset the whole thing by the amount of valid continuous points in the negative values to handle crossing 0
 8103254:	69bb      	ldr	r3, [r7, #24]
 8103256:	3301      	adds	r3, #1
 8103258:	61bb      	str	r3, [r7, #24]
 810325a:	69fb      	ldr	r3, [r7, #28]
 810325c:	3309      	adds	r3, #9
 810325e:	69ba      	ldr	r2, [r7, #24]
 8103260:	429a      	cmp	r2, r3
 8103262:	dde5      	ble.n	8103230 <_isolateBeacons+0x30>
	}
	//printf("offset %ld\n", offset);

	for(int32_t i = offset; i < buff_amnt + offset + MAX_GAP_FILTER; i++){
 8103264:	69fb      	ldr	r3, [r7, #28]
 8103266:	617b      	str	r3, [r7, #20]
 8103268:	e104      	b.n	8103474 <_isolateBeacons+0x274>

		if(buff[i % buff_max].amplitude > MIN_AMP_FILTER){
 810326a:	893a      	ldrh	r2, [r7, #8]
 810326c:	697b      	ldr	r3, [r7, #20]
 810326e:	fb93 f1f2 	sdiv	r1, r3, r2
 8103272:	fb01 f202 	mul.w	r2, r1, r2
 8103276:	1a9b      	subs	r3, r3, r2
 8103278:	461a      	mov	r2, r3
 810327a:	4613      	mov	r3, r2
 810327c:	005b      	lsls	r3, r3, #1
 810327e:	4413      	add	r3, r2
 8103280:	005b      	lsls	r3, r3, #1
 8103282:	461a      	mov	r2, r3
 8103284:	68fb      	ldr	r3, [r7, #12]
 8103286:	4413      	add	r3, r2
 8103288:	889b      	ldrh	r3, [r3, #4]
 810328a:	b29b      	uxth	r3, r3
 810328c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8103290:	d91b      	bls.n	81032ca <_isolateBeacons+0xca>
			last_valid = i;
 8103292:	697b      	ldr	r3, [r7, #20]
 8103294:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			dist_sum += buff[i % buff_max].distance;
 8103296:	893a      	ldrh	r2, [r7, #8]
 8103298:	697b      	ldr	r3, [r7, #20]
 810329a:	fb93 f1f2 	sdiv	r1, r3, r2
 810329e:	fb01 f202 	mul.w	r2, r1, r2
 81032a2:	1a9b      	subs	r3, r3, r2
 81032a4:	461a      	mov	r2, r3
 81032a6:	4613      	mov	r3, r2
 81032a8:	005b      	lsls	r3, r3, #1
 81032aa:	4413      	add	r3, r2
 81032ac:	005b      	lsls	r3, r3, #1
 81032ae:	461a      	mov	r2, r3
 81032b0:	68fb      	ldr	r3, [r7, #12]
 81032b2:	4413      	add	r3, r2
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81032b8:	4413      	add	r3, r2
 81032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
			ang_sum += i;
 81032bc:	697b      	ldr	r3, [r7, #20]
 81032be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81032c0:	4413      	add	r3, r2
 81032c2:	627b      	str	r3, [r7, #36]	@ 0x24
			valid_amnt++;
 81032c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 81032c6:	3301      	adds	r3, #1
 81032c8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

			//printf("point %ld valid\n", i);
		}

		if((i - last_valid > MAX_GAP_FILTER) && valid_amnt != 0){ // last valid point was too far, compute and consider as a beacon
 81032ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 81032cc:	697a      	ldr	r2, [r7, #20]
 81032ce:	1ad3      	subs	r3, r2, r3
 81032d0:	2b0a      	cmp	r3, #10
 81032d2:	f340 80cc 	ble.w	810346e <_isolateBeacons+0x26e>
 81032d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 81032d8:	2b00      	cmp	r3, #0
 81032da:	f000 80c8 	beq.w	810346e <_isolateBeacons+0x26e>
			lidar_filtered[out_index].distance = ((float)dist_sum / ((float) valid_amnt)) + BEACON_RADIUS;
 81032de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81032e0:	ee07 3a90 	vmov	s15, r3
 81032e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 81032ea:	ee07 3a90 	vmov	s15, r3
 81032ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81032f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 81032f8:	4613      	mov	r3, r2
 81032fa:	009b      	lsls	r3, r3, #2
 81032fc:	4413      	add	r3, r2
 81032fe:	009b      	lsls	r3, r3, #2
 8103300:	461a      	mov	r2, r3
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	4413      	add	r3, r2
 8103306:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 81034a8 <_isolateBeacons+0x2a8>
 810330a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810330e:	edc3 7a01 	vstr	s15, [r3, #4]
			float raw_angle = ((float)ang_sum) / ((float) valid_amnt); // moyenne
 8103312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103314:	ee07 3a90 	vmov	s15, r3
 8103318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810331c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 810331e:	ee07 3a90 	vmov	s15, r3
 8103322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810332a:	edc7 7a04 	vstr	s15, [r7, #16]
			//float raw_angle = last_valid - ((float) valid_amnt / 2.0); // medianne
			lidar_filtered[out_index].angle = (raw_angle * (2*M_PI)) / (float)buff_max;
 810332e:	6938      	ldr	r0, [r7, #16]
 8103330:	f7fd f9a2 	bl	8100678 <__aeabi_f2d>
 8103334:	a356      	add	r3, pc, #344	@ (adr r3, 8103490 <_isolateBeacons+0x290>)
 8103336:	e9d3 2300 	ldrd	r2, r3, [r3]
 810333a:	f7fd f9f5 	bl	8100728 <__aeabi_dmul>
 810333e:	4602      	mov	r2, r0
 8103340:	460b      	mov	r3, r1
 8103342:	4614      	mov	r4, r2
 8103344:	461d      	mov	r5, r3
 8103346:	893b      	ldrh	r3, [r7, #8]
 8103348:	ee07 3a90 	vmov	s15, r3
 810334c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103350:	ee17 0a90 	vmov	r0, s15
 8103354:	f7fd f990 	bl	8100678 <__aeabi_f2d>
 8103358:	4602      	mov	r2, r0
 810335a:	460b      	mov	r3, r1
 810335c:	4620      	mov	r0, r4
 810335e:	4629      	mov	r1, r5
 8103360:	f7fd fb0c 	bl	810097c <__aeabi_ddiv>
 8103364:	4602      	mov	r2, r0
 8103366:	460b      	mov	r3, r1
 8103368:	4610      	mov	r0, r2
 810336a:	4619      	mov	r1, r3
 810336c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 810336e:	4613      	mov	r3, r2
 8103370:	009b      	lsls	r3, r3, #2
 8103372:	4413      	add	r3, r2
 8103374:	009b      	lsls	r3, r3, #2
 8103376:	461a      	mov	r2, r3
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	189c      	adds	r4, r3, r2
 810337c:	f7fd fccc 	bl	8100d18 <__aeabi_d2f>
 8103380:	4603      	mov	r3, r0
 8103382:	6023      	str	r3, [r4, #0]

			while(lidar_filtered[out_index].angle > M_PI) lidar_filtered[out_index].angle -= 2*M_PI;
 8103384:	e020      	b.n	81033c8 <_isolateBeacons+0x1c8>
 8103386:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8103388:	4613      	mov	r3, r2
 810338a:	009b      	lsls	r3, r3, #2
 810338c:	4413      	add	r3, r2
 810338e:	009b      	lsls	r3, r3, #2
 8103390:	461a      	mov	r2, r3
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	4413      	add	r3, r2
 8103396:	681b      	ldr	r3, [r3, #0]
 8103398:	4618      	mov	r0, r3
 810339a:	f7fd f96d 	bl	8100678 <__aeabi_f2d>
 810339e:	a33c      	add	r3, pc, #240	@ (adr r3, 8103490 <_isolateBeacons+0x290>)
 81033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033a4:	f7fd f808 	bl	81003b8 <__aeabi_dsub>
 81033a8:	4602      	mov	r2, r0
 81033aa:	460b      	mov	r3, r1
 81033ac:	4610      	mov	r0, r2
 81033ae:	4619      	mov	r1, r3
 81033b0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 81033b2:	4613      	mov	r3, r2
 81033b4:	009b      	lsls	r3, r3, #2
 81033b6:	4413      	add	r3, r2
 81033b8:	009b      	lsls	r3, r3, #2
 81033ba:	461a      	mov	r2, r3
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	189c      	adds	r4, r3, r2
 81033c0:	f7fd fcaa 	bl	8100d18 <__aeabi_d2f>
 81033c4:	4603      	mov	r3, r0
 81033c6:	6023      	str	r3, [r4, #0]
 81033c8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 81033ca:	4613      	mov	r3, r2
 81033cc:	009b      	lsls	r3, r3, #2
 81033ce:	4413      	add	r3, r2
 81033d0:	009b      	lsls	r3, r3, #2
 81033d2:	461a      	mov	r2, r3
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	4413      	add	r3, r2
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4618      	mov	r0, r3
 81033dc:	f7fd f94c 	bl	8100678 <__aeabi_f2d>
 81033e0:	a32d      	add	r3, pc, #180	@ (adr r3, 8103498 <_isolateBeacons+0x298>)
 81033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033e6:	f7fd fc2f 	bl	8100c48 <__aeabi_dcmpgt>
 81033ea:	4603      	mov	r3, r0
 81033ec:	2b00      	cmp	r3, #0
 81033ee:	d1ca      	bne.n	8103386 <_isolateBeacons+0x186>
			while(lidar_filtered[out_index].angle <= -M_PI) lidar_filtered[out_index].angle += 2*M_PI;
 81033f0:	e020      	b.n	8103434 <_isolateBeacons+0x234>
 81033f2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 81033f4:	4613      	mov	r3, r2
 81033f6:	009b      	lsls	r3, r3, #2
 81033f8:	4413      	add	r3, r2
 81033fa:	009b      	lsls	r3, r3, #2
 81033fc:	461a      	mov	r2, r3
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	4413      	add	r3, r2
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	4618      	mov	r0, r3
 8103406:	f7fd f937 	bl	8100678 <__aeabi_f2d>
 810340a:	a321      	add	r3, pc, #132	@ (adr r3, 8103490 <_isolateBeacons+0x290>)
 810340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103410:	f7fc ffd4 	bl	81003bc <__adddf3>
 8103414:	4602      	mov	r2, r0
 8103416:	460b      	mov	r3, r1
 8103418:	4610      	mov	r0, r2
 810341a:	4619      	mov	r1, r3
 810341c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 810341e:	4613      	mov	r3, r2
 8103420:	009b      	lsls	r3, r3, #2
 8103422:	4413      	add	r3, r2
 8103424:	009b      	lsls	r3, r3, #2
 8103426:	461a      	mov	r2, r3
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	189c      	adds	r4, r3, r2
 810342c:	f7fd fc74 	bl	8100d18 <__aeabi_d2f>
 8103430:	4603      	mov	r3, r0
 8103432:	6023      	str	r3, [r4, #0]
 8103434:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8103436:	4613      	mov	r3, r2
 8103438:	009b      	lsls	r3, r3, #2
 810343a:	4413      	add	r3, r2
 810343c:	009b      	lsls	r3, r3, #2
 810343e:	461a      	mov	r2, r3
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	4413      	add	r3, r2
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	4618      	mov	r0, r3
 8103448:	f7fd f916 	bl	8100678 <__aeabi_f2d>
 810344c:	a314      	add	r3, pc, #80	@ (adr r3, 81034a0 <_isolateBeacons+0x2a0>)
 810344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103452:	f7fd fbe5 	bl	8100c20 <__aeabi_dcmple>
 8103456:	4603      	mov	r3, r0
 8103458:	2b00      	cmp	r3, #0
 810345a:	d1ca      	bne.n	81033f2 <_isolateBeacons+0x1f2>

			//printf("raw %.2f\n",raw_angle);

			out_index ++;
 810345c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810345e:	3301      	adds	r3, #1
 8103460:	847b      	strh	r3, [r7, #34]	@ 0x22
			dist_sum = 0;
 8103462:	2300      	movs	r3, #0
 8103464:	62bb      	str	r3, [r7, #40]	@ 0x28
			ang_sum = 0;
 8103466:	2300      	movs	r3, #0
 8103468:	627b      	str	r3, [r7, #36]	@ 0x24
			valid_amnt = 0;
 810346a:	2300      	movs	r3, #0
 810346c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	for(int32_t i = offset; i < buff_amnt + offset + MAX_GAP_FILTER; i++){
 810346e:	697b      	ldr	r3, [r7, #20]
 8103470:	3301      	adds	r3, #1
 8103472:	617b      	str	r3, [r7, #20]
 8103474:	897a      	ldrh	r2, [r7, #10]
 8103476:	69fb      	ldr	r3, [r7, #28]
 8103478:	4413      	add	r3, r2
 810347a:	3309      	adds	r3, #9
 810347c:	697a      	ldr	r2, [r7, #20]
 810347e:	429a      	cmp	r2, r3
 8103480:	f77f aef3 	ble.w	810326a <_isolateBeacons+0x6a>
		}
	}

	return out_index;
 8103484:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
}
 8103486:	4618      	mov	r0, r3
 8103488:	3730      	adds	r7, #48	@ 0x30
 810348a:	46bd      	mov	sp, r7
 810348c:	bdb0      	pop	{r4, r5, r7, pc}
 810348e:	bf00      	nop
 8103490:	54442d18 	.word	0x54442d18
 8103494:	401921fb 	.word	0x401921fb
 8103498:	54442d18 	.word	0x54442d18
 810349c:	400921fb 	.word	0x400921fb
 81034a0:	54442d18 	.word	0x54442d18
 81034a4:	c00921fb 	.word	0xc00921fb
 81034a8:	42200000 	.word	0x42200000

081034ac <setup>:


inline void setup(){
 81034ac:	b580      	push	{r7, lr}
 81034ae:	b082      	sub	sp, #8
 81034b0:	af02      	add	r7, sp, #8
	lidarInit(&lidar,192,168,1,4);
 81034b2:	2304      	movs	r3, #4
 81034b4:	9300      	str	r3, [sp, #0]
 81034b6:	2301      	movs	r3, #1
 81034b8:	22a8      	movs	r2, #168	@ 0xa8
 81034ba:	21c0      	movs	r1, #192	@ 0xc0
 81034bc:	480f      	ldr	r0, [pc, #60]	@ (81034fc <setup+0x50>)
 81034be:	f7fd ffa3 	bl	8101408 <lidarInit>
	lidarPrintLocalIP(&lidar);
 81034c2:	480e      	ldr	r0, [pc, #56]	@ (81034fc <setup+0x50>)
 81034c4:	f7fd fff8 	bl	81014b8 <lidarPrintLocalIP>

	startDataStreamUDP(lidar.address);
 81034c8:	4b0c      	ldr	r3, [pc, #48]	@ (81034fc <setup+0x50>)
 81034ca:	6818      	ldr	r0, [r3, #0]
 81034cc:	f7fe fbe6 	bl	8101c9c <startDataStreamUDP>

    setPosition(&loc, true_robot.x, true_robot.y, true_robot.t);
 81034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8103500 <setup+0x54>)
 81034d2:	edd3 7a00 	vldr	s15, [r3]
 81034d6:	4b0a      	ldr	r3, [pc, #40]	@ (8103500 <setup+0x54>)
 81034d8:	ed93 7a01 	vldr	s14, [r3, #4]
 81034dc:	4b08      	ldr	r3, [pc, #32]	@ (8103500 <setup+0x54>)
 81034de:	edd3 6a02 	vldr	s13, [r3, #8]
 81034e2:	eeb0 1a66 	vmov.f32	s2, s13
 81034e6:	eef0 0a47 	vmov.f32	s1, s14
 81034ea:	eeb0 0a67 	vmov.f32	s0, s15
 81034ee:	4805      	ldr	r0, [pc, #20]	@ (8103504 <setup+0x58>)
 81034f0:	f7fe fcdc 	bl	8101eac <setPosition>
}
 81034f4:	bf00      	nop
 81034f6:	46bd      	mov	sp, r7
 81034f8:	bd80      	pop	{r7, pc}
 81034fa:	bf00      	nop
 81034fc:	10003db8 	.word	0x10003db8
 8103500:	10000170 	.word	0x10000170
 8103504:	10000008 	.word	0x10000008

08103508 <loop>:

inline void loop(){
 8103508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810350c:	ed2d 8b06 	vpush	{d8-d10}
 8103510:	b092      	sub	sp, #72	@ 0x48
 8103512:	af0a      	add	r7, sp, #40	@ 0x28
	lidarProcess();
 8103514:	f7fd ffc4 	bl	81014a0 <lidarProcess>

	if(full_scan_ready){
 8103518:	4b1b      	ldr	r3, [pc, #108]	@ (8103588 <loop+0x80>)
 810351a:	781b      	ldrb	r3, [r3, #0]
 810351c:	2b00      	cmp	r3, #0
 810351e:	f000 8251 	beq.w	81039c4 <loop+0x4bc>
		uint32_t tick = HAL_GetTick();
 8103522:	f001 fc25 	bl	8104d70 <HAL_GetTick>
 8103526:	6178      	str	r0, [r7, #20]

		printf("\n\nfull scan %d/%d pts, %.1f Hz\n", points_received, points_to_be_received, 1000.0/((float)(tick - last_tick)));
 8103528:	4b18      	ldr	r3, [pc, #96]	@ (810358c <loop+0x84>)
 810352a:	881b      	ldrh	r3, [r3, #0]
 810352c:	461c      	mov	r4, r3
 810352e:	4b18      	ldr	r3, [pc, #96]	@ (8103590 <loop+0x88>)
 8103530:	881b      	ldrh	r3, [r3, #0]
 8103532:	461d      	mov	r5, r3
 8103534:	4b17      	ldr	r3, [pc, #92]	@ (8103594 <loop+0x8c>)
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	697a      	ldr	r2, [r7, #20]
 810353a:	1ad3      	subs	r3, r2, r3
 810353c:	ee07 3a90 	vmov	s15, r3
 8103540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103544:	ee17 0a90 	vmov	r0, s15
 8103548:	f7fd f896 	bl	8100678 <__aeabi_f2d>
 810354c:	4602      	mov	r2, r0
 810354e:	460b      	mov	r3, r1
 8103550:	f04f 0000 	mov.w	r0, #0
 8103554:	4910      	ldr	r1, [pc, #64]	@ (8103598 <loop+0x90>)
 8103556:	f7fd fa11 	bl	810097c <__aeabi_ddiv>
 810355a:	4602      	mov	r2, r0
 810355c:	460b      	mov	r3, r1
 810355e:	e9cd 2300 	strd	r2, r3, [sp]
 8103562:	462a      	mov	r2, r5
 8103564:	4621      	mov	r1, r4
 8103566:	480d      	ldr	r0, [pc, #52]	@ (810359c <loop+0x94>)
 8103568:	f013 ff66 	bl	8117438 <iprintf>

		uint16_t pts_found = _isolateBeacons(lidar_points, points_received, points_to_be_received, remarkable_pts);
 810356c:	4b07      	ldr	r3, [pc, #28]	@ (810358c <loop+0x84>)
 810356e:	8819      	ldrh	r1, [r3, #0]
 8103570:	4b07      	ldr	r3, [pc, #28]	@ (8103590 <loop+0x88>)
 8103572:	881a      	ldrh	r2, [r3, #0]
 8103574:	4b0a      	ldr	r3, [pc, #40]	@ (81035a0 <loop+0x98>)
 8103576:	480b      	ldr	r0, [pc, #44]	@ (81035a4 <loop+0x9c>)
 8103578:	f7ff fe42 	bl	8103200 <_isolateBeacons>
 810357c:	4603      	mov	r3, r0
 810357e:	827b      	strh	r3, [r7, #18]
				printf("%.2f:%.2f;", lidar_points[i].distance * cos((((float)i * M_PI) / points_to_be_received) - loc.robot.t) + loc.robot.x, lidar_points[i].distance * sin((((float)i * M_PI) / points_to_be_received) - loc.robot.t) + loc.robot.y);
		}
		printf("|xy,clr\n");
*/

		for(uint16_t i = 0; i < pts_found; i++){
 8103580:	2300      	movs	r3, #0
 8103582:	83fb      	strh	r3, [r7, #30]
 8103584:	e0fd      	b.n	8103782 <loop+0x27a>
 8103586:	bf00      	nop
 8103588:	10000474 	.word	0x10000474
 810358c:	10000472 	.word	0x10000472
 8103590:	10000470 	.word	0x10000470
 8103594:	1000f93c 	.word	0x1000f93c
 8103598:	408f4000 	.word	0x408f4000
 810359c:	0811c12c 	.word	0x0811c12c
 81035a0:	10003dbc 	.word	0x10003dbc
 81035a4:	10000478 	.word	0x10000478
			printf("beacon dist %.2f ang %.2f (x %.3f y %.3f rel ; x %.3f y %.3f abs)\n", remarkable_pts[i].distance, remarkable_pts[i].angle, remarkable_pts[i].distance * cos(remarkable_pts[i].angle), remarkable_pts[i].distance * sin(remarkable_pts[i].angle), remarkable_pts[i].distance * cos(remarkable_pts[i].angle) + loc.robot.x, remarkable_pts[i].distance * sin(remarkable_pts[i].angle) + loc.robot.y);
 81035a8:	8bfa      	ldrh	r2, [r7, #30]
 81035aa:	49b5      	ldr	r1, [pc, #724]	@ (8103880 <loop+0x378>)
 81035ac:	4613      	mov	r3, r2
 81035ae:	009b      	lsls	r3, r3, #2
 81035b0:	4413      	add	r3, r2
 81035b2:	009b      	lsls	r3, r3, #2
 81035b4:	440b      	add	r3, r1
 81035b6:	3304      	adds	r3, #4
 81035b8:	681b      	ldr	r3, [r3, #0]
 81035ba:	4618      	mov	r0, r3
 81035bc:	f7fd f85c 	bl	8100678 <__aeabi_f2d>
 81035c0:	4682      	mov	sl, r0
 81035c2:	468b      	mov	fp, r1
 81035c4:	8bfa      	ldrh	r2, [r7, #30]
 81035c6:	49ae      	ldr	r1, [pc, #696]	@ (8103880 <loop+0x378>)
 81035c8:	4613      	mov	r3, r2
 81035ca:	009b      	lsls	r3, r3, #2
 81035cc:	4413      	add	r3, r2
 81035ce:	009b      	lsls	r3, r3, #2
 81035d0:	440b      	add	r3, r1
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	4618      	mov	r0, r3
 81035d6:	f7fd f84f 	bl	8100678 <__aeabi_f2d>
 81035da:	4680      	mov	r8, r0
 81035dc:	4689      	mov	r9, r1
 81035de:	8bfa      	ldrh	r2, [r7, #30]
 81035e0:	49a7      	ldr	r1, [pc, #668]	@ (8103880 <loop+0x378>)
 81035e2:	4613      	mov	r3, r2
 81035e4:	009b      	lsls	r3, r3, #2
 81035e6:	4413      	add	r3, r2
 81035e8:	009b      	lsls	r3, r3, #2
 81035ea:	440b      	add	r3, r1
 81035ec:	3304      	adds	r3, #4
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	4618      	mov	r0, r3
 81035f2:	f7fd f841 	bl	8100678 <__aeabi_f2d>
 81035f6:	4604      	mov	r4, r0
 81035f8:	460d      	mov	r5, r1
 81035fa:	8bfa      	ldrh	r2, [r7, #30]
 81035fc:	49a0      	ldr	r1, [pc, #640]	@ (8103880 <loop+0x378>)
 81035fe:	4613      	mov	r3, r2
 8103600:	009b      	lsls	r3, r3, #2
 8103602:	4413      	add	r3, r2
 8103604:	009b      	lsls	r3, r3, #2
 8103606:	440b      	add	r3, r1
 8103608:	681b      	ldr	r3, [r3, #0]
 810360a:	4618      	mov	r0, r3
 810360c:	f7fd f834 	bl	8100678 <__aeabi_f2d>
 8103610:	4602      	mov	r2, r0
 8103612:	460b      	mov	r3, r1
 8103614:	ec43 2b10 	vmov	d0, r2, r3
 8103618:	f011 fa02 	bl	8114a20 <cos>
 810361c:	ec53 2b10 	vmov	r2, r3, d0
 8103620:	4620      	mov	r0, r4
 8103622:	4629      	mov	r1, r5
 8103624:	f7fd f880 	bl	8100728 <__aeabi_dmul>
 8103628:	4602      	mov	r2, r0
 810362a:	460b      	mov	r3, r1
 810362c:	ec43 2b19 	vmov	d9, r2, r3
 8103630:	8bfa      	ldrh	r2, [r7, #30]
 8103632:	4993      	ldr	r1, [pc, #588]	@ (8103880 <loop+0x378>)
 8103634:	4613      	mov	r3, r2
 8103636:	009b      	lsls	r3, r3, #2
 8103638:	4413      	add	r3, r2
 810363a:	009b      	lsls	r3, r3, #2
 810363c:	440b      	add	r3, r1
 810363e:	3304      	adds	r3, #4
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4618      	mov	r0, r3
 8103644:	f7fd f818 	bl	8100678 <__aeabi_f2d>
 8103648:	4604      	mov	r4, r0
 810364a:	460d      	mov	r5, r1
 810364c:	8bfa      	ldrh	r2, [r7, #30]
 810364e:	498c      	ldr	r1, [pc, #560]	@ (8103880 <loop+0x378>)
 8103650:	4613      	mov	r3, r2
 8103652:	009b      	lsls	r3, r3, #2
 8103654:	4413      	add	r3, r2
 8103656:	009b      	lsls	r3, r3, #2
 8103658:	440b      	add	r3, r1
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4618      	mov	r0, r3
 810365e:	f7fd f80b 	bl	8100678 <__aeabi_f2d>
 8103662:	4602      	mov	r2, r0
 8103664:	460b      	mov	r3, r1
 8103666:	ec43 2b10 	vmov	d0, r2, r3
 810366a:	f011 fa2d 	bl	8114ac8 <sin>
 810366e:	ec53 2b10 	vmov	r2, r3, d0
 8103672:	4620      	mov	r0, r4
 8103674:	4629      	mov	r1, r5
 8103676:	f7fd f857 	bl	8100728 <__aeabi_dmul>
 810367a:	4602      	mov	r2, r0
 810367c:	460b      	mov	r3, r1
 810367e:	ec43 2b1a 	vmov	d10, r2, r3
 8103682:	8bfa      	ldrh	r2, [r7, #30]
 8103684:	497e      	ldr	r1, [pc, #504]	@ (8103880 <loop+0x378>)
 8103686:	4613      	mov	r3, r2
 8103688:	009b      	lsls	r3, r3, #2
 810368a:	4413      	add	r3, r2
 810368c:	009b      	lsls	r3, r3, #2
 810368e:	440b      	add	r3, r1
 8103690:	3304      	adds	r3, #4
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	4618      	mov	r0, r3
 8103696:	f7fc ffef 	bl	8100678 <__aeabi_f2d>
 810369a:	4604      	mov	r4, r0
 810369c:	460d      	mov	r5, r1
 810369e:	8bfa      	ldrh	r2, [r7, #30]
 81036a0:	4977      	ldr	r1, [pc, #476]	@ (8103880 <loop+0x378>)
 81036a2:	4613      	mov	r3, r2
 81036a4:	009b      	lsls	r3, r3, #2
 81036a6:	4413      	add	r3, r2
 81036a8:	009b      	lsls	r3, r3, #2
 81036aa:	440b      	add	r3, r1
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	4618      	mov	r0, r3
 81036b0:	f7fc ffe2 	bl	8100678 <__aeabi_f2d>
 81036b4:	4602      	mov	r2, r0
 81036b6:	460b      	mov	r3, r1
 81036b8:	ec43 2b10 	vmov	d0, r2, r3
 81036bc:	f011 f9b0 	bl	8114a20 <cos>
 81036c0:	ec53 2b10 	vmov	r2, r3, d0
 81036c4:	4620      	mov	r0, r4
 81036c6:	4629      	mov	r1, r5
 81036c8:	f7fd f82e 	bl	8100728 <__aeabi_dmul>
 81036cc:	4602      	mov	r2, r0
 81036ce:	460b      	mov	r3, r1
 81036d0:	4614      	mov	r4, r2
 81036d2:	461d      	mov	r5, r3
 81036d4:	4b6b      	ldr	r3, [pc, #428]	@ (8103884 <loop+0x37c>)
 81036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81036d8:	4618      	mov	r0, r3
 81036da:	f7fc ffcd 	bl	8100678 <__aeabi_f2d>
 81036de:	4602      	mov	r2, r0
 81036e0:	460b      	mov	r3, r1
 81036e2:	4620      	mov	r0, r4
 81036e4:	4629      	mov	r1, r5
 81036e6:	f7fc fe69 	bl	81003bc <__adddf3>
 81036ea:	4602      	mov	r2, r0
 81036ec:	460b      	mov	r3, r1
 81036ee:	ec43 2b18 	vmov	d8, r2, r3
 81036f2:	8bfa      	ldrh	r2, [r7, #30]
 81036f4:	4962      	ldr	r1, [pc, #392]	@ (8103880 <loop+0x378>)
 81036f6:	4613      	mov	r3, r2
 81036f8:	009b      	lsls	r3, r3, #2
 81036fa:	4413      	add	r3, r2
 81036fc:	009b      	lsls	r3, r3, #2
 81036fe:	440b      	add	r3, r1
 8103700:	3304      	adds	r3, #4
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	4618      	mov	r0, r3
 8103706:	f7fc ffb7 	bl	8100678 <__aeabi_f2d>
 810370a:	4604      	mov	r4, r0
 810370c:	460d      	mov	r5, r1
 810370e:	8bfa      	ldrh	r2, [r7, #30]
 8103710:	495b      	ldr	r1, [pc, #364]	@ (8103880 <loop+0x378>)
 8103712:	4613      	mov	r3, r2
 8103714:	009b      	lsls	r3, r3, #2
 8103716:	4413      	add	r3, r2
 8103718:	009b      	lsls	r3, r3, #2
 810371a:	440b      	add	r3, r1
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	4618      	mov	r0, r3
 8103720:	f7fc ffaa 	bl	8100678 <__aeabi_f2d>
 8103724:	4602      	mov	r2, r0
 8103726:	460b      	mov	r3, r1
 8103728:	ec43 2b10 	vmov	d0, r2, r3
 810372c:	f011 f9cc 	bl	8114ac8 <sin>
 8103730:	ec53 2b10 	vmov	r2, r3, d0
 8103734:	4620      	mov	r0, r4
 8103736:	4629      	mov	r1, r5
 8103738:	f7fc fff6 	bl	8100728 <__aeabi_dmul>
 810373c:	4602      	mov	r2, r0
 810373e:	460b      	mov	r3, r1
 8103740:	4614      	mov	r4, r2
 8103742:	461d      	mov	r5, r3
 8103744:	4b4f      	ldr	r3, [pc, #316]	@ (8103884 <loop+0x37c>)
 8103746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103748:	4618      	mov	r0, r3
 810374a:	f7fc ff95 	bl	8100678 <__aeabi_f2d>
 810374e:	4602      	mov	r2, r0
 8103750:	460b      	mov	r3, r1
 8103752:	4620      	mov	r0, r4
 8103754:	4629      	mov	r1, r5
 8103756:	f7fc fe31 	bl	81003bc <__adddf3>
 810375a:	4602      	mov	r2, r0
 810375c:	460b      	mov	r3, r1
 810375e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8103762:	ed8d 8b06 	vstr	d8, [sp, #24]
 8103766:	ed8d ab04 	vstr	d10, [sp, #16]
 810376a:	ed8d 9b02 	vstr	d9, [sp, #8]
 810376e:	e9cd 8900 	strd	r8, r9, [sp]
 8103772:	4652      	mov	r2, sl
 8103774:	465b      	mov	r3, fp
 8103776:	4844      	ldr	r0, [pc, #272]	@ (8103888 <loop+0x380>)
 8103778:	f013 fe5e 	bl	8117438 <iprintf>
		for(uint16_t i = 0; i < pts_found; i++){
 810377c:	8bfb      	ldrh	r3, [r7, #30]
 810377e:	3301      	adds	r3, #1
 8103780:	83fb      	strh	r3, [r7, #30]
 8103782:	8bfa      	ldrh	r2, [r7, #30]
 8103784:	8a7b      	ldrh	r3, [r7, #18]
 8103786:	429a      	cmp	r2, r3
 8103788:	f4ff af0e 	bcc.w	81035a8 <loop+0xa0>
		}

		printf(">beac_nb:%df\n", pts_found);
 810378c:	8a7b      	ldrh	r3, [r7, #18]
 810378e:	4619      	mov	r1, r3
 8103790:	483e      	ldr	r0, [pc, #248]	@ (810388c <loop+0x384>)
 8103792:	f013 fe51 	bl	8117438 <iprintf>

		//testingMove(&loc, &true_robot, lidar_pts, 20, 0.1);

		updateField(&loc, remarkable_pts, pts_found, tick - last_tick);
 8103796:	4b3e      	ldr	r3, [pc, #248]	@ (8103890 <loop+0x388>)
 8103798:	681b      	ldr	r3, [r3, #0]
 810379a:	697a      	ldr	r2, [r7, #20]
 810379c:	1ad3      	subs	r3, r2, r3
 810379e:	8a7a      	ldrh	r2, [r7, #18]
 81037a0:	4937      	ldr	r1, [pc, #220]	@ (8103880 <loop+0x378>)
 81037a2:	4838      	ldr	r0, [pc, #224]	@ (8103884 <loop+0x37c>)
 81037a4:	f7fe fbd6 	bl	8101f54 <updateField>
		computePosition(&loc);
 81037a8:	4836      	ldr	r0, [pc, #216]	@ (8103884 <loop+0x37c>)
 81037aa:	f7ff fb43 	bl	8102e34 <computePosition>

		printf("robot x %.2f y %.2f t %.4f trsl_spd %.2f rot_spd %.2f trvled %.2f\n",
				 loc.robot.x,
 81037ae:	4b35      	ldr	r3, [pc, #212]	@ (8103884 <loop+0x37c>)
 81037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		printf("robot x %.2f y %.2f t %.4f trsl_spd %.2f rot_spd %.2f trvled %.2f\n",
 81037b2:	4618      	mov	r0, r3
 81037b4:	f7fc ff60 	bl	8100678 <__aeabi_f2d>
 81037b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
		         loc.robot.y,
 81037bc:	4b31      	ldr	r3, [pc, #196]	@ (8103884 <loop+0x37c>)
 81037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
		printf("robot x %.2f y %.2f t %.4f trsl_spd %.2f rot_spd %.2f trvled %.2f\n",
 81037c0:	4618      	mov	r0, r3
 81037c2:	f7fc ff59 	bl	8100678 <__aeabi_f2d>
 81037c6:	4604      	mov	r4, r0
 81037c8:	460d      	mov	r5, r1
		         loc.robot.t,
 81037ca:	4b2e      	ldr	r3, [pc, #184]	@ (8103884 <loop+0x37c>)
 81037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
		printf("robot x %.2f y %.2f t %.4f trsl_spd %.2f rot_spd %.2f trvled %.2f\n",
 81037ce:	4618      	mov	r0, r3
 81037d0:	f7fc ff52 	bl	8100678 <__aeabi_f2d>
 81037d4:	4680      	mov	r8, r0
 81037d6:	4689      	mov	r9, r1
		         loc.robot.trsl_spd,
 81037d8:	4b2a      	ldr	r3, [pc, #168]	@ (8103884 <loop+0x37c>)
 81037da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		printf("robot x %.2f y %.2f t %.4f trsl_spd %.2f rot_spd %.2f trvled %.2f\n",
 81037dc:	4618      	mov	r0, r3
 81037de:	f7fc ff4b 	bl	8100678 <__aeabi_f2d>
 81037e2:	4682      	mov	sl, r0
 81037e4:	468b      	mov	fp, r1
		         loc.robot.angular_spd,
 81037e6:	4b27      	ldr	r3, [pc, #156]	@ (8103884 <loop+0x37c>)
 81037e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
		printf("robot x %.2f y %.2f t %.4f trsl_spd %.2f rot_spd %.2f trvled %.2f\n",
 81037ea:	4618      	mov	r0, r3
 81037ec:	f7fc ff44 	bl	8100678 <__aeabi_f2d>
 81037f0:	e9c7 0100 	strd	r0, r1, [r7]
				 loc.robot.trvled_t
 81037f4:	4b23      	ldr	r3, [pc, #140]	@ (8103884 <loop+0x37c>)
 81037f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		printf("robot x %.2f y %.2f t %.4f trsl_spd %.2f rot_spd %.2f trvled %.2f\n",
 81037f8:	4618      	mov	r0, r3
 81037fa:	f7fc ff3d 	bl	8100678 <__aeabi_f2d>
 81037fe:	4602      	mov	r2, r0
 8103800:	460b      	mov	r3, r1
 8103802:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8103806:	ed97 7b00 	vldr	d7, [r7]
 810380a:	ed8d 7b06 	vstr	d7, [sp, #24]
 810380e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8103812:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8103816:	e9cd 4500 	strd	r4, r5, [sp]
 810381a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 810381e:	481d      	ldr	r0, [pc, #116]	@ (8103894 <loop+0x38c>)
 8103820:	f013 fe0a 	bl	8117438 <iprintf>
		 );

		printf(">pos:");
 8103824:	481c      	ldr	r0, [pc, #112]	@ (8103898 <loop+0x390>)
 8103826:	f013 fe07 	bl	8117438 <iprintf>
		printf("%.f:%.f;%.f:%.f;", loc.field.x1, loc.field.y1, loc.field.x2, loc.field.y2);
 810382a:	4b16      	ldr	r3, [pc, #88]	@ (8103884 <loop+0x37c>)
 810382c:	699b      	ldr	r3, [r3, #24]
 810382e:	4618      	mov	r0, r3
 8103830:	f7fc ff22 	bl	8100678 <__aeabi_f2d>
 8103834:	4682      	mov	sl, r0
 8103836:	468b      	mov	fp, r1
 8103838:	4b12      	ldr	r3, [pc, #72]	@ (8103884 <loop+0x37c>)
 810383a:	69db      	ldr	r3, [r3, #28]
 810383c:	4618      	mov	r0, r3
 810383e:	f7fc ff1b 	bl	8100678 <__aeabi_f2d>
 8103842:	4604      	mov	r4, r0
 8103844:	460d      	mov	r5, r1
 8103846:	4b0f      	ldr	r3, [pc, #60]	@ (8103884 <loop+0x37c>)
 8103848:	6a1b      	ldr	r3, [r3, #32]
 810384a:	4618      	mov	r0, r3
 810384c:	f7fc ff14 	bl	8100678 <__aeabi_f2d>
 8103850:	4680      	mov	r8, r0
 8103852:	4689      	mov	r9, r1
 8103854:	4b0b      	ldr	r3, [pc, #44]	@ (8103884 <loop+0x37c>)
 8103856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103858:	4618      	mov	r0, r3
 810385a:	f7fc ff0d 	bl	8100678 <__aeabi_f2d>
 810385e:	4602      	mov	r2, r0
 8103860:	460b      	mov	r3, r1
 8103862:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8103866:	e9cd 8902 	strd	r8, r9, [sp, #8]
 810386a:	e9cd 4500 	strd	r4, r5, [sp]
 810386e:	4652      	mov	r2, sl
 8103870:	465b      	mov	r3, fp
 8103872:	480a      	ldr	r0, [pc, #40]	@ (810389c <loop+0x394>)
 8103874:	f013 fde0 	bl	8117438 <iprintf>
		for(uint16_t i = 0; i < pts_found; i++){
 8103878:	2300      	movs	r3, #0
 810387a:	83bb      	strh	r3, [r7, #28]
 810387c:	e036      	b.n	81038ec <loop+0x3e4>
 810387e:	bf00      	nop
 8103880:	10003dbc 	.word	0x10003dbc
 8103884:	10000008 	.word	0x10000008
 8103888:	0811c14c 	.word	0x0811c14c
 810388c:	0811c190 	.word	0x0811c190
 8103890:	1000f93c 	.word	0x1000f93c
 8103894:	0811c1a0 	.word	0x0811c1a0
 8103898:	0811c1e4 	.word	0x0811c1e4
 810389c:	0811c1ec 	.word	0x0811c1ec
			printf("%.2f:%.2f;", remarkable_pts[i].x, remarkable_pts[i].y);
 81038a0:	8bba      	ldrh	r2, [r7, #28]
 81038a2:	494c      	ldr	r1, [pc, #304]	@ (81039d4 <loop+0x4cc>)
 81038a4:	4613      	mov	r3, r2
 81038a6:	009b      	lsls	r3, r3, #2
 81038a8:	4413      	add	r3, r2
 81038aa:	009b      	lsls	r3, r3, #2
 81038ac:	440b      	add	r3, r1
 81038ae:	3308      	adds	r3, #8
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	4618      	mov	r0, r3
 81038b4:	f7fc fee0 	bl	8100678 <__aeabi_f2d>
 81038b8:	4604      	mov	r4, r0
 81038ba:	460d      	mov	r5, r1
 81038bc:	8bba      	ldrh	r2, [r7, #28]
 81038be:	4945      	ldr	r1, [pc, #276]	@ (81039d4 <loop+0x4cc>)
 81038c0:	4613      	mov	r3, r2
 81038c2:	009b      	lsls	r3, r3, #2
 81038c4:	4413      	add	r3, r2
 81038c6:	009b      	lsls	r3, r3, #2
 81038c8:	440b      	add	r3, r1
 81038ca:	330c      	adds	r3, #12
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	4618      	mov	r0, r3
 81038d0:	f7fc fed2 	bl	8100678 <__aeabi_f2d>
 81038d4:	4602      	mov	r2, r0
 81038d6:	460b      	mov	r3, r1
 81038d8:	e9cd 2300 	strd	r2, r3, [sp]
 81038dc:	4622      	mov	r2, r4
 81038de:	462b      	mov	r3, r5
 81038e0:	483d      	ldr	r0, [pc, #244]	@ (81039d8 <loop+0x4d0>)
 81038e2:	f013 fda9 	bl	8117438 <iprintf>
		for(uint16_t i = 0; i < pts_found; i++){
 81038e6:	8bbb      	ldrh	r3, [r7, #28]
 81038e8:	3301      	adds	r3, #1
 81038ea:	83bb      	strh	r3, [r7, #28]
 81038ec:	8bba      	ldrh	r2, [r7, #28]
 81038ee:	8a7b      	ldrh	r3, [r7, #18]
 81038f0:	429a      	cmp	r2, r3
 81038f2:	d3d5      	bcc.n	81038a0 <loop+0x398>
		}
		printf("%.2f:%.2f;", loc.robot.x, loc.robot.y);
 81038f4:	4b39      	ldr	r3, [pc, #228]	@ (81039dc <loop+0x4d4>)
 81038f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81038f8:	4618      	mov	r0, r3
 81038fa:	f7fc febd 	bl	8100678 <__aeabi_f2d>
 81038fe:	4604      	mov	r4, r0
 8103900:	460d      	mov	r5, r1
 8103902:	4b36      	ldr	r3, [pc, #216]	@ (81039dc <loop+0x4d4>)
 8103904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103906:	4618      	mov	r0, r3
 8103908:	f7fc feb6 	bl	8100678 <__aeabi_f2d>
 810390c:	4602      	mov	r2, r0
 810390e:	460b      	mov	r3, r1
 8103910:	e9cd 2300 	strd	r2, r3, [sp]
 8103914:	4622      	mov	r2, r4
 8103916:	462b      	mov	r3, r5
 8103918:	482f      	ldr	r0, [pc, #188]	@ (81039d8 <loop+0x4d0>)
 810391a:	f013 fd8d 	bl	8117438 <iprintf>
		printf("|xy,clr\n");
 810391e:	4830      	ldr	r0, [pc, #192]	@ (81039e0 <loop+0x4d8>)
 8103920:	f013 fdfa 	bl	8117518 <puts>

		printf(">ang:%.2f\n", loc.robot.t);
 8103924:	4b2d      	ldr	r3, [pc, #180]	@ (81039dc <loop+0x4d4>)
 8103926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103928:	4618      	mov	r0, r3
 810392a:	f7fc fea5 	bl	8100678 <__aeabi_f2d>
 810392e:	4602      	mov	r2, r0
 8103930:	460b      	mov	r3, r1
 8103932:	482c      	ldr	r0, [pc, #176]	@ (81039e4 <loop+0x4dc>)
 8103934:	f013 fd80 	bl	8117438 <iprintf>
		printf(">trsl_spd:%.3f\n", loc.robot.trsl_spd);
 8103938:	4b28      	ldr	r3, [pc, #160]	@ (81039dc <loop+0x4d4>)
 810393a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810393c:	4618      	mov	r0, r3
 810393e:	f7fc fe9b 	bl	8100678 <__aeabi_f2d>
 8103942:	4602      	mov	r2, r0
 8103944:	460b      	mov	r3, r1
 8103946:	4828      	ldr	r0, [pc, #160]	@ (81039e8 <loop+0x4e0>)
 8103948:	f013 fd76 	bl	8117438 <iprintf>
		printf(">rot_spd:%.5f\n", loc.robot.angular_spd);
 810394c:	4b23      	ldr	r3, [pc, #140]	@ (81039dc <loop+0x4d4>)
 810394e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103950:	4618      	mov	r0, r3
 8103952:	f7fc fe91 	bl	8100678 <__aeabi_f2d>
 8103956:	4602      	mov	r2, r0
 8103958:	460b      	mov	r3, r1
 810395a:	4824      	ldr	r0, [pc, #144]	@ (81039ec <loop+0x4e4>)
 810395c:	f013 fd6c 	bl	8117438 <iprintf>

		for(uint16_t i = 0; i < 3; i++){
 8103960:	2300      	movs	r3, #0
 8103962:	837b      	strh	r3, [r7, #26]
 8103964:	e022      	b.n	81039ac <loop+0x4a4>
			if(loc.tracked_beacons[i].lock) printf(">toler%d:%.2f\n",i, loc.tracked_beacons[i].tolerance);
 8103966:	8b7a      	ldrh	r2, [r7, #26]
 8103968:	491c      	ldr	r1, [pc, #112]	@ (81039dc <loop+0x4d4>)
 810396a:	4613      	mov	r3, r2
 810396c:	005b      	lsls	r3, r3, #1
 810396e:	4413      	add	r3, r2
 8103970:	00db      	lsls	r3, r3, #3
 8103972:	440b      	add	r3, r1
 8103974:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8103978:	781b      	ldrb	r3, [r3, #0]
 810397a:	2b00      	cmp	r3, #0
 810397c:	d013      	beq.n	81039a6 <loop+0x49e>
 810397e:	8b7c      	ldrh	r4, [r7, #26]
 8103980:	8b7a      	ldrh	r2, [r7, #26]
 8103982:	4916      	ldr	r1, [pc, #88]	@ (81039dc <loop+0x4d4>)
 8103984:	4613      	mov	r3, r2
 8103986:	005b      	lsls	r3, r3, #1
 8103988:	4413      	add	r3, r2
 810398a:	00db      	lsls	r3, r3, #3
 810398c:	440b      	add	r3, r1
 810398e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	4618      	mov	r0, r3
 8103996:	f7fc fe6f 	bl	8100678 <__aeabi_f2d>
 810399a:	4602      	mov	r2, r0
 810399c:	460b      	mov	r3, r1
 810399e:	4621      	mov	r1, r4
 81039a0:	4813      	ldr	r0, [pc, #76]	@ (81039f0 <loop+0x4e8>)
 81039a2:	f013 fd49 	bl	8117438 <iprintf>
		for(uint16_t i = 0; i < 3; i++){
 81039a6:	8b7b      	ldrh	r3, [r7, #26]
 81039a8:	3301      	adds	r3, #1
 81039aa:	837b      	strh	r3, [r7, #26]
 81039ac:	8b7b      	ldrh	r3, [r7, #26]
 81039ae:	2b02      	cmp	r3, #2
 81039b0:	d9d9      	bls.n	8103966 <loop+0x45e>
		}

		full_scan_ready = false;
 81039b2:	4b10      	ldr	r3, [pc, #64]	@ (81039f4 <loop+0x4ec>)
 81039b4:	2200      	movs	r2, #0
 81039b6:	701a      	strb	r2, [r3, #0]
		points_received = 0;
 81039b8:	4b0f      	ldr	r3, [pc, #60]	@ (81039f8 <loop+0x4f0>)
 81039ba:	2200      	movs	r2, #0
 81039bc:	801a      	strh	r2, [r3, #0]
		last_tick = tick;
 81039be:	4a0f      	ldr	r2, [pc, #60]	@ (81039fc <loop+0x4f4>)
 81039c0:	697b      	ldr	r3, [r7, #20]
 81039c2:	6013      	str	r3, [r2, #0]
	}
}
 81039c4:	bf00      	nop
 81039c6:	3720      	adds	r7, #32
 81039c8:	46bd      	mov	sp, r7
 81039ca:	ecbd 8b06 	vpop	{d8-d10}
 81039ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81039d2:	bf00      	nop
 81039d4:	10003dbc 	.word	0x10003dbc
 81039d8:	0811c200 	.word	0x0811c200
 81039dc:	10000008 	.word	0x10000008
 81039e0:	0811c20c 	.word	0x0811c20c
 81039e4:	0811c214 	.word	0x0811c214
 81039e8:	0811c220 	.word	0x0811c220
 81039ec:	0811c230 	.word	0x0811c230
 81039f0:	0811c240 	.word	0x0811c240
 81039f4:	10000474 	.word	0x10000474
 81039f8:	10000472 	.word	0x10000472
 81039fc:	1000f93c 	.word	0x1000f93c

08103a00 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


uint8_t __io_putchar(char ch){
 8103a00:	b580      	push	{r7, lr}
 8103a02:	b082      	sub	sp, #8
 8103a04:	af00      	add	r7, sp, #0
 8103a06:	4603      	mov	r3, r0
 8103a08:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8103a0a:	1df9      	adds	r1, r7, #7
 8103a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8103a10:	2201      	movs	r2, #1
 8103a12:	4804      	ldr	r0, [pc, #16]	@ (8103a24 <__io_putchar+0x24>)
 8103a14:	f005 f982 	bl	8108d1c <HAL_UART_Transmit>
	return ch;
 8103a18:	79fb      	ldrb	r3, [r7, #7]
}
 8103a1a:	4618      	mov	r0, r3
 8103a1c:	3708      	adds	r7, #8
 8103a1e:	46bd      	mov	sp, r7
 8103a20:	bd80      	pop	{r7, pc}
 8103a22:	bf00      	nop
 8103a24:	1000f940 	.word	0x1000f940

08103a28 <__io_getchar>:
uint8_t __io_getchar(char ch){
 8103a28:	b580      	push	{r7, lr}
 8103a2a:	b082      	sub	sp, #8
 8103a2c:	af00      	add	r7, sp, #0
 8103a2e:	4603      	mov	r3, r0
 8103a30:	71fb      	strb	r3, [r7, #7]
    return HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8103a32:	1df9      	adds	r1, r7, #7
 8103a34:	f04f 33ff 	mov.w	r3, #4294967295
 8103a38:	2201      	movs	r2, #1
 8103a3a:	4804      	ldr	r0, [pc, #16]	@ (8103a4c <__io_getchar+0x24>)
 8103a3c:	f005 f96e 	bl	8108d1c <HAL_UART_Transmit>
 8103a40:	4603      	mov	r3, r0
}
 8103a42:	4618      	mov	r0, r3
 8103a44:	3708      	adds	r7, #8
 8103a46:	46bd      	mov	sp, r7
 8103a48:	bd80      	pop	{r7, pc}
 8103a4a:	bf00      	nop
 8103a4c:	1000f940 	.word	0x1000f940

08103a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8103a50:	b580      	push	{r7, lr}
 8103a52:	b082      	sub	sp, #8
 8103a54:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8103a56:	4b25      	ldr	r3, [pc, #148]	@ (8103aec <main+0x9c>)
 8103a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103a5c:	4a23      	ldr	r2, [pc, #140]	@ (8103aec <main+0x9c>)
 8103a5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8103a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103a66:	4b21      	ldr	r3, [pc, #132]	@ (8103aec <main+0x9c>)
 8103a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103a70:	607b      	str	r3, [r7, #4]
 8103a72:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8103a74:	2001      	movs	r0, #1
 8103a76:	f003 f823 	bl	8106ac0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8103a7a:	f003 f8ad 	bl	8106bd8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8103a7e:	2201      	movs	r2, #1
 8103a80:	2102      	movs	r1, #2
 8103a82:	2000      	movs	r0, #0
 8103a84:	f003 f82e 	bl	8106ae4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8103a88:	4b19      	ldr	r3, [pc, #100]	@ (8103af0 <main+0xa0>)
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8103a90:	2b70      	cmp	r3, #112	@ 0x70
 8103a92:	d108      	bne.n	8103aa6 <main+0x56>
 8103a94:	4b17      	ldr	r3, [pc, #92]	@ (8103af4 <main+0xa4>)
 8103a96:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8103a9a:	4a16      	ldr	r2, [pc, #88]	@ (8103af4 <main+0xa4>)
 8103a9c:	f043 0301 	orr.w	r3, r3, #1
 8103aa0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8103aa4:	e007      	b.n	8103ab6 <main+0x66>
 8103aa6:	4b13      	ldr	r3, [pc, #76]	@ (8103af4 <main+0xa4>)
 8103aa8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8103aac:	4a11      	ldr	r2, [pc, #68]	@ (8103af4 <main+0xa4>)
 8103aae:	f043 0301 	orr.w	r3, r3, #1
 8103ab2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8103ab6:	f001 f8b3 	bl	8104c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  HAL_Delay(2000); // allow the clock to settle (seems necessary for LWIP to work properly)
 8103aba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8103abe:	f001 f963 	bl	8104d88 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8103ac2:	f000 f869 	bl	8103b98 <MX_MDMA_Init>
  MX_GPIO_Init();
 8103ac6:	f000 f881 	bl	8103bcc <MX_GPIO_Init>
  MX_LWIP_Init();
 8103aca:	f000 fa3b 	bl	8103f44 <MX_LWIP_Init>
  MX_USART1_UART_Init();
 8103ace:	f000 f817 	bl	8103b00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("HAL Init done ...\n");
 8103ad2:	4809      	ldr	r0, [pc, #36]	@ (8103af8 <main+0xa8>)
 8103ad4:	f013 fd20 	bl	8117518 <puts>
  setup();
 8103ad8:	f7ff fce8 	bl	81034ac <setup>
  printf("User Init done ...\n");
 8103adc:	4807      	ldr	r0, [pc, #28]	@ (8103afc <main+0xac>)
 8103ade:	f013 fd1b 	bl	8117518 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8103ae2:	f7ff fd11 	bl	8103508 <loop>
  {
 8103ae6:	bf00      	nop
 8103ae8:	e7fb      	b.n	8103ae2 <main+0x92>
 8103aea:	bf00      	nop
 8103aec:	58024400 	.word	0x58024400
 8103af0:	e000ed00 	.word	0xe000ed00
 8103af4:	58026400 	.word	0x58026400
 8103af8:	0811c250 	.word	0x0811c250
 8103afc:	0811c264 	.word	0x0811c264

08103b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8103b00:	b580      	push	{r7, lr}
 8103b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8103b04:	4b22      	ldr	r3, [pc, #136]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b06:	4a23      	ldr	r2, [pc, #140]	@ (8103b94 <MX_USART1_UART_Init+0x94>)
 8103b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8103b0a:	4b21      	ldr	r3, [pc, #132]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b0c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8103b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8103b12:	4b1f      	ldr	r3, [pc, #124]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b14:	2200      	movs	r2, #0
 8103b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8103b18:	4b1d      	ldr	r3, [pc, #116]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b1a:	2200      	movs	r2, #0
 8103b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8103b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b20:	2200      	movs	r2, #0
 8103b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8103b24:	4b1a      	ldr	r3, [pc, #104]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b26:	220c      	movs	r2, #12
 8103b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103b2a:	4b19      	ldr	r3, [pc, #100]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b2c:	2200      	movs	r2, #0
 8103b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8103b30:	4b17      	ldr	r3, [pc, #92]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b32:	2200      	movs	r2, #0
 8103b34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103b36:	4b16      	ldr	r3, [pc, #88]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b38:	2200      	movs	r2, #0
 8103b3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103b3c:	4b14      	ldr	r3, [pc, #80]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b3e:	2200      	movs	r2, #0
 8103b40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103b42:	4b13      	ldr	r3, [pc, #76]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b44:	2200      	movs	r2, #0
 8103b46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8103b48:	4811      	ldr	r0, [pc, #68]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b4a:	f005 f897 	bl	8108c7c <HAL_UART_Init>
 8103b4e:	4603      	mov	r3, r0
 8103b50:	2b00      	cmp	r3, #0
 8103b52:	d001      	beq.n	8103b58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8103b54:	f000 f872 	bl	8103c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103b58:	2100      	movs	r1, #0
 8103b5a:	480d      	ldr	r0, [pc, #52]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b5c:	f006 f926 	bl	8109dac <HAL_UARTEx_SetTxFifoThreshold>
 8103b60:	4603      	mov	r3, r0
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	d001      	beq.n	8103b6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8103b66:	f000 f869 	bl	8103c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103b6a:	2100      	movs	r1, #0
 8103b6c:	4808      	ldr	r0, [pc, #32]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b6e:	f006 f95b 	bl	8109e28 <HAL_UARTEx_SetRxFifoThreshold>
 8103b72:	4603      	mov	r3, r0
 8103b74:	2b00      	cmp	r3, #0
 8103b76:	d001      	beq.n	8103b7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8103b78:	f000 f860 	bl	8103c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8103b7c:	4804      	ldr	r0, [pc, #16]	@ (8103b90 <MX_USART1_UART_Init+0x90>)
 8103b7e:	f006 f8dc 	bl	8109d3a <HAL_UARTEx_DisableFifoMode>
 8103b82:	4603      	mov	r3, r0
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d001      	beq.n	8103b8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8103b88:	f000 f858 	bl	8103c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8103b8c:	bf00      	nop
 8103b8e:	bd80      	pop	{r7, pc}
 8103b90:	1000f940 	.word	0x1000f940
 8103b94:	40011000 	.word	0x40011000

08103b98 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8103b98:	b480      	push	{r7}
 8103b9a:	b083      	sub	sp, #12
 8103b9c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8103b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8103bc8 <MX_MDMA_Init+0x30>)
 8103ba0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8103ba4:	4a08      	ldr	r2, [pc, #32]	@ (8103bc8 <MX_MDMA_Init+0x30>)
 8103ba6:	f043 0301 	orr.w	r3, r3, #1
 8103baa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8103bae:	4b06      	ldr	r3, [pc, #24]	@ (8103bc8 <MX_MDMA_Init+0x30>)
 8103bb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8103bb4:	f003 0301 	and.w	r3, r3, #1
 8103bb8:	607b      	str	r3, [r7, #4]
 8103bba:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8103bbc:	bf00      	nop
 8103bbe:	370c      	adds	r7, #12
 8103bc0:	46bd      	mov	sp, r7
 8103bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bc6:	4770      	bx	lr
 8103bc8:	58024400 	.word	0x58024400

08103bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8103bcc:	b480      	push	{r7}
 8103bce:	b085      	sub	sp, #20
 8103bd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8103bd2:	4b19      	ldr	r3, [pc, #100]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103bd8:	4a17      	ldr	r2, [pc, #92]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8103bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103be2:	4b15      	ldr	r3, [pc, #84]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103bec:	60fb      	str	r3, [r7, #12]
 8103bee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8103bf0:	4b11      	ldr	r3, [pc, #68]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103bf6:	4a10      	ldr	r2, [pc, #64]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103bf8:	f043 0301 	orr.w	r3, r3, #1
 8103bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c00:	4b0d      	ldr	r3, [pc, #52]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c06:	f003 0301 	and.w	r3, r3, #1
 8103c0a:	60bb      	str	r3, [r7, #8]
 8103c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8103c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c14:	4a08      	ldr	r2, [pc, #32]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103c16:	f043 0304 	orr.w	r3, r3, #4
 8103c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c1e:	4b06      	ldr	r3, [pc, #24]	@ (8103c38 <MX_GPIO_Init+0x6c>)
 8103c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c24:	f003 0304 	and.w	r3, r3, #4
 8103c28:	607b      	str	r3, [r7, #4]
 8103c2a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8103c2c:	bf00      	nop
 8103c2e:	3714      	adds	r7, #20
 8103c30:	46bd      	mov	sp, r7
 8103c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c36:	4770      	bx	lr
 8103c38:	58024400 	.word	0x58024400

08103c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8103c3c:	b480      	push	{r7}
 8103c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8103c40:	b672      	cpsid	i
}
 8103c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8103c44:	bf00      	nop
 8103c46:	e7fd      	b.n	8103c44 <Error_Handler+0x8>

08103c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8103c48:	b480      	push	{r7}
 8103c4a:	b083      	sub	sp, #12
 8103c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8103c78 <HAL_MspInit+0x30>)
 8103c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103c54:	4a08      	ldr	r2, [pc, #32]	@ (8103c78 <HAL_MspInit+0x30>)
 8103c56:	f043 0302 	orr.w	r3, r3, #2
 8103c5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103c5e:	4b06      	ldr	r3, [pc, #24]	@ (8103c78 <HAL_MspInit+0x30>)
 8103c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103c64:	f003 0302 	and.w	r3, r3, #2
 8103c68:	607b      	str	r3, [r7, #4]
 8103c6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103c6c:	bf00      	nop
 8103c6e:	370c      	adds	r7, #12
 8103c70:	46bd      	mov	sp, r7
 8103c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c76:	4770      	bx	lr
 8103c78:	58024400 	.word	0x58024400

08103c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8103c7c:	b580      	push	{r7, lr}
 8103c7e:	b0bc      	sub	sp, #240	@ 0xf0
 8103c80:	af00      	add	r7, sp, #0
 8103c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103c84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8103c88:	2200      	movs	r2, #0
 8103c8a:	601a      	str	r2, [r3, #0]
 8103c8c:	605a      	str	r2, [r3, #4]
 8103c8e:	609a      	str	r2, [r3, #8]
 8103c90:	60da      	str	r2, [r3, #12]
 8103c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103c94:	f107 0310 	add.w	r3, r7, #16
 8103c98:	22c8      	movs	r2, #200	@ 0xc8
 8103c9a:	2100      	movs	r1, #0
 8103c9c:	4618      	mov	r0, r3
 8103c9e:	f013 fd95 	bl	81177cc <memset>
  if(huart->Instance==USART1)
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	681b      	ldr	r3, [r3, #0]
 8103ca6:	4a27      	ldr	r2, [pc, #156]	@ (8103d44 <HAL_UART_MspInit+0xc8>)
 8103ca8:	4293      	cmp	r3, r2
 8103caa:	d146      	bne.n	8103d3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8103cac:	f04f 0201 	mov.w	r2, #1
 8103cb0:	f04f 0300 	mov.w	r3, #0
 8103cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8103cb8:	2300      	movs	r3, #0
 8103cba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103cbe:	f107 0310 	add.w	r3, r7, #16
 8103cc2:	4618      	mov	r0, r3
 8103cc4:	f003 f96e 	bl	8106fa4 <HAL_RCCEx_PeriphCLKConfig>
 8103cc8:	4603      	mov	r3, r0
 8103cca:	2b00      	cmp	r3, #0
 8103ccc:	d001      	beq.n	8103cd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8103cce:	f7ff ffb5 	bl	8103c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8103cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8103d48 <HAL_UART_MspInit+0xcc>)
 8103cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8103d48 <HAL_UART_MspInit+0xcc>)
 8103cda:	f043 0310 	orr.w	r3, r3, #16
 8103cde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103ce2:	4b19      	ldr	r3, [pc, #100]	@ (8103d48 <HAL_UART_MspInit+0xcc>)
 8103ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103ce8:	f003 0310 	and.w	r3, r3, #16
 8103cec:	60fb      	str	r3, [r7, #12]
 8103cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103cf0:	4b15      	ldr	r3, [pc, #84]	@ (8103d48 <HAL_UART_MspInit+0xcc>)
 8103cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103cf6:	4a14      	ldr	r2, [pc, #80]	@ (8103d48 <HAL_UART_MspInit+0xcc>)
 8103cf8:	f043 0301 	orr.w	r3, r3, #1
 8103cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103d00:	4b11      	ldr	r3, [pc, #68]	@ (8103d48 <HAL_UART_MspInit+0xcc>)
 8103d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d06:	f003 0301 	and.w	r3, r3, #1
 8103d0a:	60bb      	str	r3, [r7, #8]
 8103d0c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8103d0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8103d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103d16:	2302      	movs	r3, #2
 8103d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103d1c:	2300      	movs	r3, #0
 8103d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103d22:	2300      	movs	r3, #0
 8103d24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8103d28:	2307      	movs	r3, #7
 8103d2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103d2e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8103d32:	4619      	mov	r1, r3
 8103d34:	4805      	ldr	r0, [pc, #20]	@ (8103d4c <HAL_UART_MspInit+0xd0>)
 8103d36:	f002 fd13 	bl	8106760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8103d3a:	bf00      	nop
 8103d3c:	37f0      	adds	r7, #240	@ 0xf0
 8103d3e:	46bd      	mov	sp, r7
 8103d40:	bd80      	pop	{r7, pc}
 8103d42:	bf00      	nop
 8103d44:	40011000 	.word	0x40011000
 8103d48:	58024400 	.word	0x58024400
 8103d4c:	58020000 	.word	0x58020000

08103d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8103d50:	b480      	push	{r7}
 8103d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8103d54:	bf00      	nop
 8103d56:	e7fd      	b.n	8103d54 <NMI_Handler+0x4>

08103d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8103d58:	b480      	push	{r7}
 8103d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8103d5c:	bf00      	nop
 8103d5e:	e7fd      	b.n	8103d5c <HardFault_Handler+0x4>

08103d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8103d60:	b480      	push	{r7}
 8103d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103d64:	bf00      	nop
 8103d66:	e7fd      	b.n	8103d64 <MemManage_Handler+0x4>

08103d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8103d68:	b480      	push	{r7}
 8103d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8103d6c:	bf00      	nop
 8103d6e:	e7fd      	b.n	8103d6c <BusFault_Handler+0x4>

08103d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8103d70:	b480      	push	{r7}
 8103d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103d74:	bf00      	nop
 8103d76:	e7fd      	b.n	8103d74 <UsageFault_Handler+0x4>

08103d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8103d78:	b480      	push	{r7}
 8103d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8103d7c:	bf00      	nop
 8103d7e:	46bd      	mov	sp, r7
 8103d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d84:	4770      	bx	lr

08103d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8103d86:	b480      	push	{r7}
 8103d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8103d8a:	bf00      	nop
 8103d8c:	46bd      	mov	sp, r7
 8103d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d92:	4770      	bx	lr

08103d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8103d94:	b480      	push	{r7}
 8103d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8103d98:	bf00      	nop
 8103d9a:	46bd      	mov	sp, r7
 8103d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103da0:	4770      	bx	lr

08103da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8103da2:	b580      	push	{r7, lr}
 8103da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8103da6:	f000 ffcf 	bl	8104d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8103daa:	bf00      	nop
 8103dac:	bd80      	pop	{r7, pc}

08103dae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8103dae:	b480      	push	{r7}
 8103db0:	af00      	add	r7, sp, #0
	return 1;
 8103db2:	2301      	movs	r3, #1
}
 8103db4:	4618      	mov	r0, r3
 8103db6:	46bd      	mov	sp, r7
 8103db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dbc:	4770      	bx	lr
	...

08103dc0 <_kill>:

int _kill(int pid, int sig)
{
 8103dc0:	b480      	push	{r7}
 8103dc2:	b083      	sub	sp, #12
 8103dc4:	af00      	add	r7, sp, #0
 8103dc6:	6078      	str	r0, [r7, #4]
 8103dc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8103dca:	4b05      	ldr	r3, [pc, #20]	@ (8103de0 <_kill+0x20>)
 8103dcc:	2216      	movs	r2, #22
 8103dce:	601a      	str	r2, [r3, #0]
	return -1;
 8103dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103dd4:	4618      	mov	r0, r3
 8103dd6:	370c      	adds	r7, #12
 8103dd8:	46bd      	mov	sp, r7
 8103dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dde:	4770      	bx	lr
 8103de0:	10017894 	.word	0x10017894

08103de4 <_exit>:

void _exit (int status)
{
 8103de4:	b580      	push	{r7, lr}
 8103de6:	b082      	sub	sp, #8
 8103de8:	af00      	add	r7, sp, #0
 8103dea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8103dec:	f04f 31ff 	mov.w	r1, #4294967295
 8103df0:	6878      	ldr	r0, [r7, #4]
 8103df2:	f7ff ffe5 	bl	8103dc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8103df6:	bf00      	nop
 8103df8:	e7fd      	b.n	8103df6 <_exit+0x12>

08103dfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8103dfa:	b580      	push	{r7, lr}
 8103dfc:	b086      	sub	sp, #24
 8103dfe:	af00      	add	r7, sp, #0
 8103e00:	60f8      	str	r0, [r7, #12]
 8103e02:	60b9      	str	r1, [r7, #8]
 8103e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103e06:	2300      	movs	r3, #0
 8103e08:	617b      	str	r3, [r7, #20]
 8103e0a:	e00a      	b.n	8103e22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8103e0c:	f7ff fe0c 	bl	8103a28 <__io_getchar>
 8103e10:	4601      	mov	r1, r0
 8103e12:	68bb      	ldr	r3, [r7, #8]
 8103e14:	1c5a      	adds	r2, r3, #1
 8103e16:	60ba      	str	r2, [r7, #8]
 8103e18:	b2ca      	uxtb	r2, r1
 8103e1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103e1c:	697b      	ldr	r3, [r7, #20]
 8103e1e:	3301      	adds	r3, #1
 8103e20:	617b      	str	r3, [r7, #20]
 8103e22:	697a      	ldr	r2, [r7, #20]
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	429a      	cmp	r2, r3
 8103e28:	dbf0      	blt.n	8103e0c <_read+0x12>
	}

return len;
 8103e2a:	687b      	ldr	r3, [r7, #4]
}
 8103e2c:	4618      	mov	r0, r3
 8103e2e:	3718      	adds	r7, #24
 8103e30:	46bd      	mov	sp, r7
 8103e32:	bd80      	pop	{r7, pc}

08103e34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8103e34:	b580      	push	{r7, lr}
 8103e36:	b086      	sub	sp, #24
 8103e38:	af00      	add	r7, sp, #0
 8103e3a:	60f8      	str	r0, [r7, #12]
 8103e3c:	60b9      	str	r1, [r7, #8]
 8103e3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103e40:	2300      	movs	r3, #0
 8103e42:	617b      	str	r3, [r7, #20]
 8103e44:	e009      	b.n	8103e5a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8103e46:	68bb      	ldr	r3, [r7, #8]
 8103e48:	1c5a      	adds	r2, r3, #1
 8103e4a:	60ba      	str	r2, [r7, #8]
 8103e4c:	781b      	ldrb	r3, [r3, #0]
 8103e4e:	4618      	mov	r0, r3
 8103e50:	f7ff fdd6 	bl	8103a00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103e54:	697b      	ldr	r3, [r7, #20]
 8103e56:	3301      	adds	r3, #1
 8103e58:	617b      	str	r3, [r7, #20]
 8103e5a:	697a      	ldr	r2, [r7, #20]
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	429a      	cmp	r2, r3
 8103e60:	dbf1      	blt.n	8103e46 <_write+0x12>
	}
	return len;
 8103e62:	687b      	ldr	r3, [r7, #4]
}
 8103e64:	4618      	mov	r0, r3
 8103e66:	3718      	adds	r7, #24
 8103e68:	46bd      	mov	sp, r7
 8103e6a:	bd80      	pop	{r7, pc}

08103e6c <_close>:

int _close(int file)
{
 8103e6c:	b480      	push	{r7}
 8103e6e:	b083      	sub	sp, #12
 8103e70:	af00      	add	r7, sp, #0
 8103e72:	6078      	str	r0, [r7, #4]
	return -1;
 8103e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103e78:	4618      	mov	r0, r3
 8103e7a:	370c      	adds	r7, #12
 8103e7c:	46bd      	mov	sp, r7
 8103e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e82:	4770      	bx	lr

08103e84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8103e84:	b480      	push	{r7}
 8103e86:	b083      	sub	sp, #12
 8103e88:	af00      	add	r7, sp, #0
 8103e8a:	6078      	str	r0, [r7, #4]
 8103e8c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8103e8e:	683b      	ldr	r3, [r7, #0]
 8103e90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8103e94:	605a      	str	r2, [r3, #4]
	return 0;
 8103e96:	2300      	movs	r3, #0
}
 8103e98:	4618      	mov	r0, r3
 8103e9a:	370c      	adds	r7, #12
 8103e9c:	46bd      	mov	sp, r7
 8103e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ea2:	4770      	bx	lr

08103ea4 <_isatty>:

int _isatty(int file)
{
 8103ea4:	b480      	push	{r7}
 8103ea6:	b083      	sub	sp, #12
 8103ea8:	af00      	add	r7, sp, #0
 8103eaa:	6078      	str	r0, [r7, #4]
	return 1;
 8103eac:	2301      	movs	r3, #1
}
 8103eae:	4618      	mov	r0, r3
 8103eb0:	370c      	adds	r7, #12
 8103eb2:	46bd      	mov	sp, r7
 8103eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eb8:	4770      	bx	lr

08103eba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103eba:	b480      	push	{r7}
 8103ebc:	b085      	sub	sp, #20
 8103ebe:	af00      	add	r7, sp, #0
 8103ec0:	60f8      	str	r0, [r7, #12]
 8103ec2:	60b9      	str	r1, [r7, #8]
 8103ec4:	607a      	str	r2, [r7, #4]
	return 0;
 8103ec6:	2300      	movs	r3, #0
}
 8103ec8:	4618      	mov	r0, r3
 8103eca:	3714      	adds	r7, #20
 8103ecc:	46bd      	mov	sp, r7
 8103ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ed2:	4770      	bx	lr

08103ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8103ed4:	b480      	push	{r7}
 8103ed6:	b087      	sub	sp, #28
 8103ed8:	af00      	add	r7, sp, #0
 8103eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103edc:	4a14      	ldr	r2, [pc, #80]	@ (8103f30 <_sbrk+0x5c>)
 8103ede:	4b15      	ldr	r3, [pc, #84]	@ (8103f34 <_sbrk+0x60>)
 8103ee0:	1ad3      	subs	r3, r2, r3
 8103ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8103ee4:	697b      	ldr	r3, [r7, #20]
 8103ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103ee8:	4b13      	ldr	r3, [pc, #76]	@ (8103f38 <_sbrk+0x64>)
 8103eea:	681b      	ldr	r3, [r3, #0]
 8103eec:	2b00      	cmp	r3, #0
 8103eee:	d102      	bne.n	8103ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103ef0:	4b11      	ldr	r3, [pc, #68]	@ (8103f38 <_sbrk+0x64>)
 8103ef2:	4a12      	ldr	r2, [pc, #72]	@ (8103f3c <_sbrk+0x68>)
 8103ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8103ef6:	4b10      	ldr	r3, [pc, #64]	@ (8103f38 <_sbrk+0x64>)
 8103ef8:	681a      	ldr	r2, [r3, #0]
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	4413      	add	r3, r2
 8103efe:	693a      	ldr	r2, [r7, #16]
 8103f00:	429a      	cmp	r2, r3
 8103f02:	d205      	bcs.n	8103f10 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8103f04:	4b0e      	ldr	r3, [pc, #56]	@ (8103f40 <_sbrk+0x6c>)
 8103f06:	220c      	movs	r2, #12
 8103f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8103f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8103f0e:	e009      	b.n	8103f24 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8103f10:	4b09      	ldr	r3, [pc, #36]	@ (8103f38 <_sbrk+0x64>)
 8103f12:	681b      	ldr	r3, [r3, #0]
 8103f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8103f16:	4b08      	ldr	r3, [pc, #32]	@ (8103f38 <_sbrk+0x64>)
 8103f18:	681a      	ldr	r2, [r3, #0]
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	4413      	add	r3, r2
 8103f1e:	4a06      	ldr	r2, [pc, #24]	@ (8103f38 <_sbrk+0x64>)
 8103f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8103f22:	68fb      	ldr	r3, [r7, #12]
}
 8103f24:	4618      	mov	r0, r3
 8103f26:	371c      	adds	r7, #28
 8103f28:	46bd      	mov	sp, r7
 8103f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f2e:	4770      	bx	lr
 8103f30:	10048000 	.word	0x10048000
 8103f34:	00001000 	.word	0x00001000
 8103f38:	1000f9d4 	.word	0x1000f9d4
 8103f3c:	100178a8 	.word	0x100178a8
 8103f40:	10017894 	.word	0x10017894

08103f44 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8103f44:	b580      	push	{r7, lr}
 8103f46:	b084      	sub	sp, #16
 8103f48:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8103f4a:	4b87      	ldr	r3, [pc, #540]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103f4c:	22c0      	movs	r2, #192	@ 0xc0
 8103f4e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8103f50:	4b85      	ldr	r3, [pc, #532]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103f52:	22a8      	movs	r2, #168	@ 0xa8
 8103f54:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8103f56:	4b84      	ldr	r3, [pc, #528]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103f58:	2201      	movs	r2, #1
 8103f5a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8103f5c:	4b82      	ldr	r3, [pc, #520]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103f5e:	220a      	movs	r2, #10
 8103f60:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8103f62:	4b82      	ldr	r3, [pc, #520]	@ (810416c <MX_LWIP_Init+0x228>)
 8103f64:	22ff      	movs	r2, #255	@ 0xff
 8103f66:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8103f68:	4b80      	ldr	r3, [pc, #512]	@ (810416c <MX_LWIP_Init+0x228>)
 8103f6a:	22ff      	movs	r2, #255	@ 0xff
 8103f6c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8103f6e:	4b7f      	ldr	r3, [pc, #508]	@ (810416c <MX_LWIP_Init+0x228>)
 8103f70:	22ff      	movs	r2, #255	@ 0xff
 8103f72:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8103f74:	4b7d      	ldr	r3, [pc, #500]	@ (810416c <MX_LWIP_Init+0x228>)
 8103f76:	2200      	movs	r2, #0
 8103f78:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8103f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8103f7c:	2200      	movs	r2, #0
 8103f7e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8103f80:	4b7b      	ldr	r3, [pc, #492]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8103f82:	2200      	movs	r2, #0
 8103f84:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8103f86:	4b7a      	ldr	r3, [pc, #488]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8103f88:	2200      	movs	r2, #0
 8103f8a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8103f8c:	4b78      	ldr	r3, [pc, #480]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8103f8e:	2200      	movs	r2, #0
 8103f90:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8103f92:	f007 fa97 	bl	810b4c4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8103f96:	4b74      	ldr	r3, [pc, #464]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103f98:	781b      	ldrb	r3, [r3, #0]
 8103f9a:	061a      	lsls	r2, r3, #24
 8103f9c:	4b72      	ldr	r3, [pc, #456]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103f9e:	785b      	ldrb	r3, [r3, #1]
 8103fa0:	041b      	lsls	r3, r3, #16
 8103fa2:	431a      	orrs	r2, r3
 8103fa4:	4b70      	ldr	r3, [pc, #448]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fa6:	789b      	ldrb	r3, [r3, #2]
 8103fa8:	021b      	lsls	r3, r3, #8
 8103faa:	4313      	orrs	r3, r2
 8103fac:	4a6e      	ldr	r2, [pc, #440]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fae:	78d2      	ldrb	r2, [r2, #3]
 8103fb0:	4313      	orrs	r3, r2
 8103fb2:	061a      	lsls	r2, r3, #24
 8103fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fb6:	781b      	ldrb	r3, [r3, #0]
 8103fb8:	0619      	lsls	r1, r3, #24
 8103fba:	4b6b      	ldr	r3, [pc, #428]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fbc:	785b      	ldrb	r3, [r3, #1]
 8103fbe:	041b      	lsls	r3, r3, #16
 8103fc0:	4319      	orrs	r1, r3
 8103fc2:	4b69      	ldr	r3, [pc, #420]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fc4:	789b      	ldrb	r3, [r3, #2]
 8103fc6:	021b      	lsls	r3, r3, #8
 8103fc8:	430b      	orrs	r3, r1
 8103fca:	4967      	ldr	r1, [pc, #412]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fcc:	78c9      	ldrb	r1, [r1, #3]
 8103fce:	430b      	orrs	r3, r1
 8103fd0:	021b      	lsls	r3, r3, #8
 8103fd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103fd6:	431a      	orrs	r2, r3
 8103fd8:	4b63      	ldr	r3, [pc, #396]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fda:	781b      	ldrb	r3, [r3, #0]
 8103fdc:	0619      	lsls	r1, r3, #24
 8103fde:	4b62      	ldr	r3, [pc, #392]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fe0:	785b      	ldrb	r3, [r3, #1]
 8103fe2:	041b      	lsls	r3, r3, #16
 8103fe4:	4319      	orrs	r1, r3
 8103fe6:	4b60      	ldr	r3, [pc, #384]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103fe8:	789b      	ldrb	r3, [r3, #2]
 8103fea:	021b      	lsls	r3, r3, #8
 8103fec:	430b      	orrs	r3, r1
 8103fee:	495e      	ldr	r1, [pc, #376]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103ff0:	78c9      	ldrb	r1, [r1, #3]
 8103ff2:	430b      	orrs	r3, r1
 8103ff4:	0a1b      	lsrs	r3, r3, #8
 8103ff6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103ffa:	431a      	orrs	r2, r3
 8103ffc:	4b5a      	ldr	r3, [pc, #360]	@ (8104168 <MX_LWIP_Init+0x224>)
 8103ffe:	781b      	ldrb	r3, [r3, #0]
 8104000:	0619      	lsls	r1, r3, #24
 8104002:	4b59      	ldr	r3, [pc, #356]	@ (8104168 <MX_LWIP_Init+0x224>)
 8104004:	785b      	ldrb	r3, [r3, #1]
 8104006:	041b      	lsls	r3, r3, #16
 8104008:	4319      	orrs	r1, r3
 810400a:	4b57      	ldr	r3, [pc, #348]	@ (8104168 <MX_LWIP_Init+0x224>)
 810400c:	789b      	ldrb	r3, [r3, #2]
 810400e:	021b      	lsls	r3, r3, #8
 8104010:	430b      	orrs	r3, r1
 8104012:	4955      	ldr	r1, [pc, #340]	@ (8104168 <MX_LWIP_Init+0x224>)
 8104014:	78c9      	ldrb	r1, [r1, #3]
 8104016:	430b      	orrs	r3, r1
 8104018:	0e1b      	lsrs	r3, r3, #24
 810401a:	4313      	orrs	r3, r2
 810401c:	4a55      	ldr	r2, [pc, #340]	@ (8104174 <MX_LWIP_Init+0x230>)
 810401e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8104020:	4b52      	ldr	r3, [pc, #328]	@ (810416c <MX_LWIP_Init+0x228>)
 8104022:	781b      	ldrb	r3, [r3, #0]
 8104024:	061a      	lsls	r2, r3, #24
 8104026:	4b51      	ldr	r3, [pc, #324]	@ (810416c <MX_LWIP_Init+0x228>)
 8104028:	785b      	ldrb	r3, [r3, #1]
 810402a:	041b      	lsls	r3, r3, #16
 810402c:	431a      	orrs	r2, r3
 810402e:	4b4f      	ldr	r3, [pc, #316]	@ (810416c <MX_LWIP_Init+0x228>)
 8104030:	789b      	ldrb	r3, [r3, #2]
 8104032:	021b      	lsls	r3, r3, #8
 8104034:	4313      	orrs	r3, r2
 8104036:	4a4d      	ldr	r2, [pc, #308]	@ (810416c <MX_LWIP_Init+0x228>)
 8104038:	78d2      	ldrb	r2, [r2, #3]
 810403a:	4313      	orrs	r3, r2
 810403c:	061a      	lsls	r2, r3, #24
 810403e:	4b4b      	ldr	r3, [pc, #300]	@ (810416c <MX_LWIP_Init+0x228>)
 8104040:	781b      	ldrb	r3, [r3, #0]
 8104042:	0619      	lsls	r1, r3, #24
 8104044:	4b49      	ldr	r3, [pc, #292]	@ (810416c <MX_LWIP_Init+0x228>)
 8104046:	785b      	ldrb	r3, [r3, #1]
 8104048:	041b      	lsls	r3, r3, #16
 810404a:	4319      	orrs	r1, r3
 810404c:	4b47      	ldr	r3, [pc, #284]	@ (810416c <MX_LWIP_Init+0x228>)
 810404e:	789b      	ldrb	r3, [r3, #2]
 8104050:	021b      	lsls	r3, r3, #8
 8104052:	430b      	orrs	r3, r1
 8104054:	4945      	ldr	r1, [pc, #276]	@ (810416c <MX_LWIP_Init+0x228>)
 8104056:	78c9      	ldrb	r1, [r1, #3]
 8104058:	430b      	orrs	r3, r1
 810405a:	021b      	lsls	r3, r3, #8
 810405c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8104060:	431a      	orrs	r2, r3
 8104062:	4b42      	ldr	r3, [pc, #264]	@ (810416c <MX_LWIP_Init+0x228>)
 8104064:	781b      	ldrb	r3, [r3, #0]
 8104066:	0619      	lsls	r1, r3, #24
 8104068:	4b40      	ldr	r3, [pc, #256]	@ (810416c <MX_LWIP_Init+0x228>)
 810406a:	785b      	ldrb	r3, [r3, #1]
 810406c:	041b      	lsls	r3, r3, #16
 810406e:	4319      	orrs	r1, r3
 8104070:	4b3e      	ldr	r3, [pc, #248]	@ (810416c <MX_LWIP_Init+0x228>)
 8104072:	789b      	ldrb	r3, [r3, #2]
 8104074:	021b      	lsls	r3, r3, #8
 8104076:	430b      	orrs	r3, r1
 8104078:	493c      	ldr	r1, [pc, #240]	@ (810416c <MX_LWIP_Init+0x228>)
 810407a:	78c9      	ldrb	r1, [r1, #3]
 810407c:	430b      	orrs	r3, r1
 810407e:	0a1b      	lsrs	r3, r3, #8
 8104080:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8104084:	431a      	orrs	r2, r3
 8104086:	4b39      	ldr	r3, [pc, #228]	@ (810416c <MX_LWIP_Init+0x228>)
 8104088:	781b      	ldrb	r3, [r3, #0]
 810408a:	0619      	lsls	r1, r3, #24
 810408c:	4b37      	ldr	r3, [pc, #220]	@ (810416c <MX_LWIP_Init+0x228>)
 810408e:	785b      	ldrb	r3, [r3, #1]
 8104090:	041b      	lsls	r3, r3, #16
 8104092:	4319      	orrs	r1, r3
 8104094:	4b35      	ldr	r3, [pc, #212]	@ (810416c <MX_LWIP_Init+0x228>)
 8104096:	789b      	ldrb	r3, [r3, #2]
 8104098:	021b      	lsls	r3, r3, #8
 810409a:	430b      	orrs	r3, r1
 810409c:	4933      	ldr	r1, [pc, #204]	@ (810416c <MX_LWIP_Init+0x228>)
 810409e:	78c9      	ldrb	r1, [r1, #3]
 81040a0:	430b      	orrs	r3, r1
 81040a2:	0e1b      	lsrs	r3, r3, #24
 81040a4:	4313      	orrs	r3, r2
 81040a6:	4a34      	ldr	r2, [pc, #208]	@ (8104178 <MX_LWIP_Init+0x234>)
 81040a8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 81040aa:	4b31      	ldr	r3, [pc, #196]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040ac:	781b      	ldrb	r3, [r3, #0]
 81040ae:	061a      	lsls	r2, r3, #24
 81040b0:	4b2f      	ldr	r3, [pc, #188]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040b2:	785b      	ldrb	r3, [r3, #1]
 81040b4:	041b      	lsls	r3, r3, #16
 81040b6:	431a      	orrs	r2, r3
 81040b8:	4b2d      	ldr	r3, [pc, #180]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040ba:	789b      	ldrb	r3, [r3, #2]
 81040bc:	021b      	lsls	r3, r3, #8
 81040be:	4313      	orrs	r3, r2
 81040c0:	4a2b      	ldr	r2, [pc, #172]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040c2:	78d2      	ldrb	r2, [r2, #3]
 81040c4:	4313      	orrs	r3, r2
 81040c6:	061a      	lsls	r2, r3, #24
 81040c8:	4b29      	ldr	r3, [pc, #164]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040ca:	781b      	ldrb	r3, [r3, #0]
 81040cc:	0619      	lsls	r1, r3, #24
 81040ce:	4b28      	ldr	r3, [pc, #160]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040d0:	785b      	ldrb	r3, [r3, #1]
 81040d2:	041b      	lsls	r3, r3, #16
 81040d4:	4319      	orrs	r1, r3
 81040d6:	4b26      	ldr	r3, [pc, #152]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040d8:	789b      	ldrb	r3, [r3, #2]
 81040da:	021b      	lsls	r3, r3, #8
 81040dc:	430b      	orrs	r3, r1
 81040de:	4924      	ldr	r1, [pc, #144]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040e0:	78c9      	ldrb	r1, [r1, #3]
 81040e2:	430b      	orrs	r3, r1
 81040e4:	021b      	lsls	r3, r3, #8
 81040e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81040ea:	431a      	orrs	r2, r3
 81040ec:	4b20      	ldr	r3, [pc, #128]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040ee:	781b      	ldrb	r3, [r3, #0]
 81040f0:	0619      	lsls	r1, r3, #24
 81040f2:	4b1f      	ldr	r3, [pc, #124]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040f4:	785b      	ldrb	r3, [r3, #1]
 81040f6:	041b      	lsls	r3, r3, #16
 81040f8:	4319      	orrs	r1, r3
 81040fa:	4b1d      	ldr	r3, [pc, #116]	@ (8104170 <MX_LWIP_Init+0x22c>)
 81040fc:	789b      	ldrb	r3, [r3, #2]
 81040fe:	021b      	lsls	r3, r3, #8
 8104100:	430b      	orrs	r3, r1
 8104102:	491b      	ldr	r1, [pc, #108]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8104104:	78c9      	ldrb	r1, [r1, #3]
 8104106:	430b      	orrs	r3, r1
 8104108:	0a1b      	lsrs	r3, r3, #8
 810410a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810410e:	431a      	orrs	r2, r3
 8104110:	4b17      	ldr	r3, [pc, #92]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8104112:	781b      	ldrb	r3, [r3, #0]
 8104114:	0619      	lsls	r1, r3, #24
 8104116:	4b16      	ldr	r3, [pc, #88]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8104118:	785b      	ldrb	r3, [r3, #1]
 810411a:	041b      	lsls	r3, r3, #16
 810411c:	4319      	orrs	r1, r3
 810411e:	4b14      	ldr	r3, [pc, #80]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8104120:	789b      	ldrb	r3, [r3, #2]
 8104122:	021b      	lsls	r3, r3, #8
 8104124:	430b      	orrs	r3, r1
 8104126:	4912      	ldr	r1, [pc, #72]	@ (8104170 <MX_LWIP_Init+0x22c>)
 8104128:	78c9      	ldrb	r1, [r1, #3]
 810412a:	430b      	orrs	r3, r1
 810412c:	0e1b      	lsrs	r3, r3, #24
 810412e:	4313      	orrs	r3, r2
 8104130:	4a12      	ldr	r2, [pc, #72]	@ (810417c <MX_LWIP_Init+0x238>)
 8104132:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8104134:	4b12      	ldr	r3, [pc, #72]	@ (8104180 <MX_LWIP_Init+0x23c>)
 8104136:	9302      	str	r3, [sp, #8]
 8104138:	4b12      	ldr	r3, [pc, #72]	@ (8104184 <MX_LWIP_Init+0x240>)
 810413a:	9301      	str	r3, [sp, #4]
 810413c:	2300      	movs	r3, #0
 810413e:	9300      	str	r3, [sp, #0]
 8104140:	4b0e      	ldr	r3, [pc, #56]	@ (810417c <MX_LWIP_Init+0x238>)
 8104142:	4a0d      	ldr	r2, [pc, #52]	@ (8104178 <MX_LWIP_Init+0x234>)
 8104144:	490b      	ldr	r1, [pc, #44]	@ (8104174 <MX_LWIP_Init+0x230>)
 8104146:	4810      	ldr	r0, [pc, #64]	@ (8104188 <MX_LWIP_Init+0x244>)
 8104148:	f008 ffba 	bl	810d0c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 810414c:	480e      	ldr	r0, [pc, #56]	@ (8104188 <MX_LWIP_Init+0x244>)
 810414e:	f009 f969 	bl	810d424 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8104152:	480d      	ldr	r0, [pc, #52]	@ (8104188 <MX_LWIP_Init+0x244>)
 8104154:	f009 f976 	bl	810d444 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8104158:	490c      	ldr	r1, [pc, #48]	@ (810418c <MX_LWIP_Init+0x248>)
 810415a:	480b      	ldr	r0, [pc, #44]	@ (8104188 <MX_LWIP_Init+0x244>)
 810415c:	f009 fa74 	bl	810d648 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8104160:	bf00      	nop
 8104162:	46bd      	mov	sp, r7
 8104164:	bd80      	pop	{r7, pc}
 8104166:	bf00      	nop
 8104168:	1000fa18 	.word	0x1000fa18
 810416c:	1000fa1c 	.word	0x1000fa1c
 8104170:	1000fa20 	.word	0x1000fa20
 8104174:	1000fa0c 	.word	0x1000fa0c
 8104178:	1000fa10 	.word	0x1000fa10
 810417c:	1000fa14 	.word	0x1000fa14
 8104180:	0810ae39 	.word	0x0810ae39
 8104184:	08104449 	.word	0x08104449
 8104188:	1000f9d8 	.word	0x1000f9d8
 810418c:	08104191 	.word	0x08104191

08104190 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8104190:	b480      	push	{r7}
 8104192:	b083      	sub	sp, #12
 8104194:	af00      	add	r7, sp, #0
 8104196:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8104198:	bf00      	nop
 810419a:	370c      	adds	r7, #12
 810419c:	46bd      	mov	sp, r7
 810419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041a2:	4770      	bx	lr

081041a4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 81041a4:	b580      	push	{r7, lr}
 81041a6:	b084      	sub	sp, #16
 81041a8:	af00      	add	r7, sp, #0
 81041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 81041ac:	2300      	movs	r3, #0
 81041ae:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 81041b0:	4b3f      	ldr	r3, [pc, #252]	@ (81042b0 <low_level_init+0x10c>)
 81041b2:	4a40      	ldr	r2, [pc, #256]	@ (81042b4 <low_level_init+0x110>)
 81041b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81041b6:	2300      	movs	r3, #0
 81041b8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 81041ba:	2380      	movs	r3, #128	@ 0x80
 81041bc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 81041be:	23e1      	movs	r3, #225	@ 0xe1
 81041c0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 81041c2:	2300      	movs	r3, #0
 81041c4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 81041c6:	2300      	movs	r3, #0
 81041c8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 81041ca:	2300      	movs	r3, #0
 81041cc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 81041ce:	4a38      	ldr	r2, [pc, #224]	@ (81042b0 <low_level_init+0x10c>)
 81041d0:	f107 0308 	add.w	r3, r7, #8
 81041d4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81041d6:	4b36      	ldr	r3, [pc, #216]	@ (81042b0 <low_level_init+0x10c>)
 81041d8:	2201      	movs	r2, #1
 81041da:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81041dc:	4b34      	ldr	r3, [pc, #208]	@ (81042b0 <low_level_init+0x10c>)
 81041de:	4a36      	ldr	r2, [pc, #216]	@ (81042b8 <low_level_init+0x114>)
 81041e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81041e2:	4b33      	ldr	r3, [pc, #204]	@ (81042b0 <low_level_init+0x10c>)
 81041e4:	4a35      	ldr	r2, [pc, #212]	@ (81042bc <low_level_init+0x118>)
 81041e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 81041e8:	4b31      	ldr	r3, [pc, #196]	@ (81042b0 <low_level_init+0x10c>)
 81041ea:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81041ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 81041f0:	482f      	ldr	r0, [pc, #188]	@ (81042b0 <low_level_init+0x10c>)
 81041f2:	f000 fef7 	bl	8104fe4 <HAL_ETH_Init>
 81041f6:	4603      	mov	r3, r0
 81041f8:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 81041fa:	2238      	movs	r2, #56	@ 0x38
 81041fc:	2100      	movs	r1, #0
 81041fe:	4830      	ldr	r0, [pc, #192]	@ (81042c0 <low_level_init+0x11c>)
 8104200:	f013 fae4 	bl	81177cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8104204:	4b2e      	ldr	r3, [pc, #184]	@ (81042c0 <low_level_init+0x11c>)
 8104206:	2221      	movs	r2, #33	@ 0x21
 8104208:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810420a:	4b2d      	ldr	r3, [pc, #180]	@ (81042c0 <low_level_init+0x11c>)
 810420c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8104210:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8104212:	4b2b      	ldr	r3, [pc, #172]	@ (81042c0 <low_level_init+0x11c>)
 8104214:	2200      	movs	r2, #0
 8104216:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8104218:	482a      	ldr	r0, [pc, #168]	@ (81042c4 <low_level_init+0x120>)
 810421a:	f008 fe19 	bl	810ce50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	2206      	movs	r2, #6
 8104222:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8104226:	4b22      	ldr	r3, [pc, #136]	@ (81042b0 <low_level_init+0x10c>)
 8104228:	685b      	ldr	r3, [r3, #4]
 810422a:	781a      	ldrb	r2, [r3, #0]
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8104232:	4b1f      	ldr	r3, [pc, #124]	@ (81042b0 <low_level_init+0x10c>)
 8104234:	685b      	ldr	r3, [r3, #4]
 8104236:	785a      	ldrb	r2, [r3, #1]
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 810423e:	4b1c      	ldr	r3, [pc, #112]	@ (81042b0 <low_level_init+0x10c>)
 8104240:	685b      	ldr	r3, [r3, #4]
 8104242:	789a      	ldrb	r2, [r3, #2]
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 810424a:	4b19      	ldr	r3, [pc, #100]	@ (81042b0 <low_level_init+0x10c>)
 810424c:	685b      	ldr	r3, [r3, #4]
 810424e:	78da      	ldrb	r2, [r3, #3]
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8104256:	4b16      	ldr	r3, [pc, #88]	@ (81042b0 <low_level_init+0x10c>)
 8104258:	685b      	ldr	r3, [r3, #4]
 810425a:	791a      	ldrb	r2, [r3, #4]
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8104262:	4b13      	ldr	r3, [pc, #76]	@ (81042b0 <low_level_init+0x10c>)
 8104264:	685b      	ldr	r3, [r3, #4]
 8104266:	795a      	ldrb	r2, [r3, #5]
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8104274:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810427c:	f043 030a 	orr.w	r3, r3, #10
 8104280:	b2da      	uxtb	r2, r3
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8104288:	490f      	ldr	r1, [pc, #60]	@ (81042c8 <low_level_init+0x124>)
 810428a:	4810      	ldr	r0, [pc, #64]	@ (81042cc <low_level_init+0x128>)
 810428c:	f000 fb4b 	bl	8104926 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8104290:	480e      	ldr	r0, [pc, #56]	@ (81042cc <low_level_init+0x128>)
 8104292:	f000 fb7a 	bl	810498a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8104296:	7bfb      	ldrb	r3, [r7, #15]
 8104298:	2b00      	cmp	r3, #0
 810429a:	d103      	bne.n	81042a4 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 810429c:	6878      	ldr	r0, [r7, #4]
 810429e:	f000 fa1d 	bl	81046dc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 81042a2:	e001      	b.n	81042a8 <low_level_init+0x104>
    Error_Handler();
 81042a4:	f7ff fcca 	bl	8103c3c <Error_Handler>
}
 81042a8:	bf00      	nop
 81042aa:	3710      	adds	r7, #16
 81042ac:	46bd      	mov	sp, r7
 81042ae:	bd80      	pop	{r7, pc}
 81042b0:	100143b0 	.word	0x100143b0
 81042b4:	40028000 	.word	0x40028000
 81042b8:	100003f4 	.word	0x100003f4
 81042bc:	10000394 	.word	0x10000394
 81042c0:	10014460 	.word	0x10014460
 81042c4:	0811ef24 	.word	0x0811ef24
 81042c8:	100001a0 	.word	0x100001a0
 81042cc:	10014498 	.word	0x10014498

081042d0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 81042d0:	b580      	push	{r7, lr}
 81042d2:	b092      	sub	sp, #72	@ 0x48
 81042d4:	af00      	add	r7, sp, #0
 81042d6:	6078      	str	r0, [r7, #4]
 81042d8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 81042da:	2300      	movs	r3, #0
 81042dc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 81042de:	2300      	movs	r3, #0
 81042e0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 81042e2:	2300      	movs	r3, #0
 81042e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 81042e8:	f107 030c 	add.w	r3, r7, #12
 81042ec:	2230      	movs	r2, #48	@ 0x30
 81042ee:	2100      	movs	r1, #0
 81042f0:	4618      	mov	r0, r3
 81042f2:	f013 fa6b 	bl	81177cc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 81042f6:	f107 030c 	add.w	r3, r7, #12
 81042fa:	2230      	movs	r2, #48	@ 0x30
 81042fc:	2100      	movs	r1, #0
 81042fe:	4618      	mov	r0, r3
 8104300:	f013 fa64 	bl	81177cc <memset>

  for(q = p; q != NULL; q = q->next)
 8104304:	683b      	ldr	r3, [r7, #0]
 8104306:	643b      	str	r3, [r7, #64]	@ 0x40
 8104308:	e045      	b.n	8104396 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 810430a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810430c:	2b03      	cmp	r3, #3
 810430e:	d902      	bls.n	8104316 <low_level_output+0x46>
      return ERR_IF;
 8104310:	f06f 030b 	mvn.w	r3, #11
 8104314:	e055      	b.n	81043c2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8104316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104318:	6859      	ldr	r1, [r3, #4]
 810431a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810431c:	4613      	mov	r3, r2
 810431e:	005b      	lsls	r3, r3, #1
 8104320:	4413      	add	r3, r2
 8104322:	009b      	lsls	r3, r3, #2
 8104324:	3348      	adds	r3, #72	@ 0x48
 8104326:	443b      	add	r3, r7
 8104328:	3b3c      	subs	r3, #60	@ 0x3c
 810432a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 810432c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810432e:	895b      	ldrh	r3, [r3, #10]
 8104330:	4619      	mov	r1, r3
 8104332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104334:	4613      	mov	r3, r2
 8104336:	005b      	lsls	r3, r3, #1
 8104338:	4413      	add	r3, r2
 810433a:	009b      	lsls	r3, r3, #2
 810433c:	3348      	adds	r3, #72	@ 0x48
 810433e:	443b      	add	r3, r7
 8104340:	3b38      	subs	r3, #56	@ 0x38
 8104342:	6019      	str	r1, [r3, #0]

    if(i>0)
 8104344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104346:	2b00      	cmp	r3, #0
 8104348:	d011      	beq.n	810436e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 810434a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810434c:	1e5a      	subs	r2, r3, #1
 810434e:	f107 000c 	add.w	r0, r7, #12
 8104352:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8104354:	460b      	mov	r3, r1
 8104356:	005b      	lsls	r3, r3, #1
 8104358:	440b      	add	r3, r1
 810435a:	009b      	lsls	r3, r3, #2
 810435c:	18c1      	adds	r1, r0, r3
 810435e:	4613      	mov	r3, r2
 8104360:	005b      	lsls	r3, r3, #1
 8104362:	4413      	add	r3, r2
 8104364:	009b      	lsls	r3, r3, #2
 8104366:	3348      	adds	r3, #72	@ 0x48
 8104368:	443b      	add	r3, r7
 810436a:	3b34      	subs	r3, #52	@ 0x34
 810436c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 810436e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	2b00      	cmp	r3, #0
 8104374:	d109      	bne.n	810438a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8104376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104378:	4613      	mov	r3, r2
 810437a:	005b      	lsls	r3, r3, #1
 810437c:	4413      	add	r3, r2
 810437e:	009b      	lsls	r3, r3, #2
 8104380:	3348      	adds	r3, #72	@ 0x48
 8104382:	443b      	add	r3, r7
 8104384:	3b34      	subs	r3, #52	@ 0x34
 8104386:	2200      	movs	r2, #0
 8104388:	601a      	str	r2, [r3, #0]
    }

    i++;
 810438a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810438c:	3301      	adds	r3, #1
 810438e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8104390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	643b      	str	r3, [r7, #64]	@ 0x40
 8104396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104398:	2b00      	cmp	r3, #0
 810439a:	d1b6      	bne.n	810430a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 810439c:	683b      	ldr	r3, [r7, #0]
 810439e:	891b      	ldrh	r3, [r3, #8]
 81043a0:	461a      	mov	r2, r3
 81043a2:	4b0a      	ldr	r3, [pc, #40]	@ (81043cc <low_level_output+0xfc>)
 81043a4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 81043a6:	4a09      	ldr	r2, [pc, #36]	@ (81043cc <low_level_output+0xfc>)
 81043a8:	f107 030c 	add.w	r3, r7, #12
 81043ac:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 81043ae:	4a07      	ldr	r2, [pc, #28]	@ (81043cc <low_level_output+0xfc>)
 81043b0:	683b      	ldr	r3, [r7, #0]
 81043b2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 81043b4:	2214      	movs	r2, #20
 81043b6:	4905      	ldr	r1, [pc, #20]	@ (81043cc <low_level_output+0xfc>)
 81043b8:	4805      	ldr	r0, [pc, #20]	@ (81043d0 <low_level_output+0x100>)
 81043ba:	f000 ffab 	bl	8105314 <HAL_ETH_Transmit>

  return errval;
 81043be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 81043c2:	4618      	mov	r0, r3
 81043c4:	3748      	adds	r7, #72	@ 0x48
 81043c6:	46bd      	mov	sp, r7
 81043c8:	bd80      	pop	{r7, pc}
 81043ca:	bf00      	nop
 81043cc:	10014460 	.word	0x10014460
 81043d0:	100143b0 	.word	0x100143b0

081043d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 81043d4:	b580      	push	{r7, lr}
 81043d6:	b084      	sub	sp, #16
 81043d8:	af00      	add	r7, sp, #0
 81043da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 81043dc:	2300      	movs	r3, #0
 81043de:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 81043e0:	4b07      	ldr	r3, [pc, #28]	@ (8104400 <low_level_input+0x2c>)
 81043e2:	781b      	ldrb	r3, [r3, #0]
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d105      	bne.n	81043f4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 81043e8:	f107 030c 	add.w	r3, r7, #12
 81043ec:	4619      	mov	r1, r3
 81043ee:	4805      	ldr	r0, [pc, #20]	@ (8104404 <low_level_input+0x30>)
 81043f0:	f001 f827 	bl	8105442 <HAL_ETH_ReadData>
  }

  return p;
 81043f4:	68fb      	ldr	r3, [r7, #12]
}
 81043f6:	4618      	mov	r0, r3
 81043f8:	3710      	adds	r7, #16
 81043fa:	46bd      	mov	sp, r7
 81043fc:	bd80      	pop	{r7, pc}
 81043fe:	bf00      	nop
 8104400:	100143ac 	.word	0x100143ac
 8104404:	100143b0 	.word	0x100143b0

08104408 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8104408:	b580      	push	{r7, lr}
 810440a:	b084      	sub	sp, #16
 810440c:	af00      	add	r7, sp, #0
 810440e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8104410:	2300      	movs	r3, #0
 8104412:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8104414:	6878      	ldr	r0, [r7, #4]
 8104416:	f7ff ffdd 	bl	81043d4 <low_level_input>
 810441a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	2b00      	cmp	r3, #0
 8104420:	d00a      	beq.n	8104438 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	691b      	ldr	r3, [r3, #16]
 8104426:	6879      	ldr	r1, [r7, #4]
 8104428:	68f8      	ldr	r0, [r7, #12]
 810442a:	4798      	blx	r3
 810442c:	4603      	mov	r3, r0
 810442e:	2b00      	cmp	r3, #0
 8104430:	d002      	beq.n	8104438 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8104432:	68f8      	ldr	r0, [r7, #12]
 8104434:	f009 fc88 	bl	810dd48 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8104438:	68fb      	ldr	r3, [r7, #12]
 810443a:	2b00      	cmp	r3, #0
 810443c:	d1ea      	bne.n	8104414 <ethernetif_input+0xc>
}
 810443e:	bf00      	nop
 8104440:	bf00      	nop
 8104442:	3710      	adds	r7, #16
 8104444:	46bd      	mov	sp, r7
 8104446:	bd80      	pop	{r7, pc}

08104448 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8104448:	b580      	push	{r7, lr}
 810444a:	b082      	sub	sp, #8
 810444c:	af00      	add	r7, sp, #0
 810444e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	2b00      	cmp	r3, #0
 8104454:	d106      	bne.n	8104464 <ethernetif_init+0x1c>
 8104456:	4b0e      	ldr	r3, [pc, #56]	@ (8104490 <ethernetif_init+0x48>)
 8104458:	f240 127b 	movw	r2, #379	@ 0x17b
 810445c:	490d      	ldr	r1, [pc, #52]	@ (8104494 <ethernetif_init+0x4c>)
 810445e:	480e      	ldr	r0, [pc, #56]	@ (8104498 <ethernetif_init+0x50>)
 8104460:	f012 ffea 	bl	8117438 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	2273      	movs	r2, #115	@ 0x73
 8104468:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	2274      	movs	r2, #116	@ 0x74
 8104470:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	4a09      	ldr	r2, [pc, #36]	@ (810449c <ethernetif_init+0x54>)
 8104478:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	4a08      	ldr	r2, [pc, #32]	@ (81044a0 <ethernetif_init+0x58>)
 810447e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8104480:	6878      	ldr	r0, [r7, #4]
 8104482:	f7ff fe8f 	bl	81041a4 <low_level_init>

  return ERR_OK;
 8104486:	2300      	movs	r3, #0
}
 8104488:	4618      	mov	r0, r3
 810448a:	3708      	adds	r7, #8
 810448c:	46bd      	mov	sp, r7
 810448e:	bd80      	pop	{r7, pc}
 8104490:	0811c278 	.word	0x0811c278
 8104494:	0811c2c8 	.word	0x0811c2c8
 8104498:	0811c2d8 	.word	0x0811c2d8
 810449c:	0810a839 	.word	0x0810a839
 81044a0:	081042d1 	.word	0x081042d1

081044a4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 81044a4:	b580      	push	{r7, lr}
 81044a6:	b084      	sub	sp, #16
 81044a8:	af00      	add	r7, sp, #0
 81044aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 81044b0:	68f9      	ldr	r1, [r7, #12]
 81044b2:	4807      	ldr	r0, [pc, #28]	@ (81044d0 <pbuf_free_custom+0x2c>)
 81044b4:	f008 fdae 	bl	810d014 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 81044b8:	4b06      	ldr	r3, [pc, #24]	@ (81044d4 <pbuf_free_custom+0x30>)
 81044ba:	781b      	ldrb	r3, [r3, #0]
 81044bc:	2b01      	cmp	r3, #1
 81044be:	d102      	bne.n	81044c6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 81044c0:	4b04      	ldr	r3, [pc, #16]	@ (81044d4 <pbuf_free_custom+0x30>)
 81044c2:	2200      	movs	r2, #0
 81044c4:	701a      	strb	r2, [r3, #0]
  }
}
 81044c6:	bf00      	nop
 81044c8:	3710      	adds	r7, #16
 81044ca:	46bd      	mov	sp, r7
 81044cc:	bd80      	pop	{r7, pc}
 81044ce:	bf00      	nop
 81044d0:	0811ef24 	.word	0x0811ef24
 81044d4:	100143ac 	.word	0x100143ac

081044d8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 81044d8:	b580      	push	{r7, lr}
 81044da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 81044dc:	f000 fc48 	bl	8104d70 <HAL_GetTick>
 81044e0:	4603      	mov	r3, r0
}
 81044e2:	4618      	mov	r0, r3
 81044e4:	bd80      	pop	{r7, pc}
	...

081044e8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 81044e8:	b580      	push	{r7, lr}
 81044ea:	b08e      	sub	sp, #56	@ 0x38
 81044ec:	af00      	add	r7, sp, #0
 81044ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81044f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81044f4:	2200      	movs	r2, #0
 81044f6:	601a      	str	r2, [r3, #0]
 81044f8:	605a      	str	r2, [r3, #4]
 81044fa:	609a      	str	r2, [r3, #8]
 81044fc:	60da      	str	r2, [r3, #12]
 81044fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	4a49      	ldr	r2, [pc, #292]	@ (810462c <HAL_ETH_MspInit+0x144>)
 8104506:	4293      	cmp	r3, r2
 8104508:	f040 808b 	bne.w	8104622 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 810450c:	4b48      	ldr	r3, [pc, #288]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 810450e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104512:	4a47      	ldr	r2, [pc, #284]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 8104514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8104518:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810451c:	4b44      	ldr	r3, [pc, #272]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 810451e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104522:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104526:	623b      	str	r3, [r7, #32]
 8104528:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 810452a:	4b41      	ldr	r3, [pc, #260]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 810452c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104530:	4a3f      	ldr	r2, [pc, #252]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 8104532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8104536:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810453a:	4b3d      	ldr	r3, [pc, #244]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 810453c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104544:	61fb      	str	r3, [r7, #28]
 8104546:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8104548:	4b39      	ldr	r3, [pc, #228]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 810454a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810454e:	4a38      	ldr	r2, [pc, #224]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 8104550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104554:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104558:	4b35      	ldr	r3, [pc, #212]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 810455a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104562:	61bb      	str	r3, [r7, #24]
 8104564:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8104566:	4b32      	ldr	r3, [pc, #200]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 8104568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810456c:	4a30      	ldr	r2, [pc, #192]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 810456e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8104572:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104576:	4b2e      	ldr	r3, [pc, #184]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 8104578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810457c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104580:	617b      	str	r3, [r7, #20]
 8104582:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8104584:	4b2a      	ldr	r3, [pc, #168]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 8104586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810458a:	4a29      	ldr	r2, [pc, #164]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 810458c:	f043 0304 	orr.w	r3, r3, #4
 8104590:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104594:	4b26      	ldr	r3, [pc, #152]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 8104596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810459a:	f003 0304 	and.w	r3, r3, #4
 810459e:	613b      	str	r3, [r7, #16]
 81045a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81045a2:	4b23      	ldr	r3, [pc, #140]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 81045a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81045a8:	4a21      	ldr	r2, [pc, #132]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 81045aa:	f043 0301 	orr.w	r3, r3, #1
 81045ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81045b2:	4b1f      	ldr	r3, [pc, #124]	@ (8104630 <HAL_ETH_MspInit+0x148>)
 81045b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81045b8:	f003 0301 	and.w	r3, r3, #1
 81045bc:	60fb      	str	r3, [r7, #12]
 81045be:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 81045c0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 81045c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81045c6:	2302      	movs	r3, #2
 81045c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81045ca:	2300      	movs	r3, #0
 81045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81045ce:	2300      	movs	r3, #0
 81045d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81045d2:	230b      	movs	r3, #11
 81045d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81045d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81045da:	4619      	mov	r1, r3
 81045dc:	4815      	ldr	r0, [pc, #84]	@ (8104634 <HAL_ETH_MspInit+0x14c>)
 81045de:	f002 f8bf 	bl	8106760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 81045e2:	2332      	movs	r3, #50	@ 0x32
 81045e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81045e6:	2302      	movs	r3, #2
 81045e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81045ea:	2300      	movs	r3, #0
 81045ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81045ee:	2300      	movs	r3, #0
 81045f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81045f2:	230b      	movs	r3, #11
 81045f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81045f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81045fa:	4619      	mov	r1, r3
 81045fc:	480e      	ldr	r0, [pc, #56]	@ (8104638 <HAL_ETH_MspInit+0x150>)
 81045fe:	f002 f8af 	bl	8106760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8104602:	2386      	movs	r3, #134	@ 0x86
 8104604:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104606:	2302      	movs	r3, #2
 8104608:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810460a:	2300      	movs	r3, #0
 810460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810460e:	2300      	movs	r3, #0
 8104610:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8104612:	230b      	movs	r3, #11
 8104614:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8104616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810461a:	4619      	mov	r1, r3
 810461c:	4807      	ldr	r0, [pc, #28]	@ (810463c <HAL_ETH_MspInit+0x154>)
 810461e:	f002 f89f 	bl	8106760 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8104622:	bf00      	nop
 8104624:	3738      	adds	r7, #56	@ 0x38
 8104626:	46bd      	mov	sp, r7
 8104628:	bd80      	pop	{r7, pc}
 810462a:	bf00      	nop
 810462c:	40028000 	.word	0x40028000
 8104630:	58024400 	.word	0x58024400
 8104634:	58021800 	.word	0x58021800
 8104638:	58020800 	.word	0x58020800
 810463c:	58020000 	.word	0x58020000

08104640 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8104640:	b580      	push	{r7, lr}
 8104642:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8104644:	4802      	ldr	r0, [pc, #8]	@ (8104650 <ETH_PHY_IO_Init+0x10>)
 8104646:	f001 fac1 	bl	8105bcc <HAL_ETH_SetMDIOClockRange>

  return 0;
 810464a:	2300      	movs	r3, #0
}
 810464c:	4618      	mov	r0, r3
 810464e:	bd80      	pop	{r7, pc}
 8104650:	100143b0 	.word	0x100143b0

08104654 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8104654:	b480      	push	{r7}
 8104656:	af00      	add	r7, sp, #0
  return 0;
 8104658:	2300      	movs	r3, #0
}
 810465a:	4618      	mov	r0, r3
 810465c:	46bd      	mov	sp, r7
 810465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104662:	4770      	bx	lr

08104664 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8104664:	b580      	push	{r7, lr}
 8104666:	b084      	sub	sp, #16
 8104668:	af00      	add	r7, sp, #0
 810466a:	60f8      	str	r0, [r7, #12]
 810466c:	60b9      	str	r1, [r7, #8]
 810466e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	68ba      	ldr	r2, [r7, #8]
 8104674:	68f9      	ldr	r1, [r7, #12]
 8104676:	4807      	ldr	r0, [pc, #28]	@ (8104694 <ETH_PHY_IO_ReadReg+0x30>)
 8104678:	f001 f811 	bl	810569e <HAL_ETH_ReadPHYRegister>
 810467c:	4603      	mov	r3, r0
 810467e:	2b00      	cmp	r3, #0
 8104680:	d002      	beq.n	8104688 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8104682:	f04f 33ff 	mov.w	r3, #4294967295
 8104686:	e000      	b.n	810468a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8104688:	2300      	movs	r3, #0
}
 810468a:	4618      	mov	r0, r3
 810468c:	3710      	adds	r7, #16
 810468e:	46bd      	mov	sp, r7
 8104690:	bd80      	pop	{r7, pc}
 8104692:	bf00      	nop
 8104694:	100143b0 	.word	0x100143b0

08104698 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8104698:	b580      	push	{r7, lr}
 810469a:	b084      	sub	sp, #16
 810469c:	af00      	add	r7, sp, #0
 810469e:	60f8      	str	r0, [r7, #12]
 81046a0:	60b9      	str	r1, [r7, #8]
 81046a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	68ba      	ldr	r2, [r7, #8]
 81046a8:	68f9      	ldr	r1, [r7, #12]
 81046aa:	4807      	ldr	r0, [pc, #28]	@ (81046c8 <ETH_PHY_IO_WriteReg+0x30>)
 81046ac:	f001 f84c 	bl	8105748 <HAL_ETH_WritePHYRegister>
 81046b0:	4603      	mov	r3, r0
 81046b2:	2b00      	cmp	r3, #0
 81046b4:	d002      	beq.n	81046bc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 81046b6:	f04f 33ff 	mov.w	r3, #4294967295
 81046ba:	e000      	b.n	81046be <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 81046bc:	2300      	movs	r3, #0
}
 81046be:	4618      	mov	r0, r3
 81046c0:	3710      	adds	r7, #16
 81046c2:	46bd      	mov	sp, r7
 81046c4:	bd80      	pop	{r7, pc}
 81046c6:	bf00      	nop
 81046c8:	100143b0 	.word	0x100143b0

081046cc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 81046cc:	b580      	push	{r7, lr}
 81046ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 81046d0:	f000 fb4e 	bl	8104d70 <HAL_GetTick>
 81046d4:	4603      	mov	r3, r0
}
 81046d6:	4618      	mov	r0, r3
 81046d8:	bd80      	pop	{r7, pc}
	...

081046dc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 81046dc:	b580      	push	{r7, lr}
 81046de:	b0a0      	sub	sp, #128	@ 0x80
 81046e0:	af00      	add	r7, sp, #0
 81046e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 81046e4:	f107 030c 	add.w	r3, r7, #12
 81046e8:	2264      	movs	r2, #100	@ 0x64
 81046ea:	2100      	movs	r1, #0
 81046ec:	4618      	mov	r0, r3
 81046ee:	f013 f86d 	bl	81177cc <memset>
  int32_t PHYLinkState = 0;
 81046f2:	2300      	movs	r3, #0
 81046f4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 81046f6:	2300      	movs	r3, #0
 81046f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81046fa:	2300      	movs	r3, #0
 81046fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 81046fe:	2300      	movs	r3, #0
 8104700:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8104702:	483a      	ldr	r0, [pc, #232]	@ (81047ec <ethernet_link_check_state+0x110>)
 8104704:	f000 f9e9 	bl	8104ada <LAN8742_GetLinkState>
 8104708:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8104710:	089b      	lsrs	r3, r3, #2
 8104712:	f003 0301 	and.w	r3, r3, #1
 8104716:	b2db      	uxtb	r3, r3
 8104718:	2b00      	cmp	r3, #0
 810471a:	d00c      	beq.n	8104736 <ethernet_link_check_state+0x5a>
 810471c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810471e:	2b01      	cmp	r3, #1
 8104720:	dc09      	bgt.n	8104736 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8104722:	4833      	ldr	r0, [pc, #204]	@ (81047f0 <ethernet_link_check_state+0x114>)
 8104724:	f000 fda6 	bl	8105274 <HAL_ETH_Stop>
    netif_set_down(netif);
 8104728:	6878      	ldr	r0, [r7, #4]
 810472a:	f008 fef7 	bl	810d51c <netif_set_down>
    netif_set_link_down(netif);
 810472e:	6878      	ldr	r0, [r7, #4]
 8104730:	f008 ff5a 	bl	810d5e8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8104734:	e055      	b.n	81047e2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810473c:	f003 0304 	and.w	r3, r3, #4
 8104740:	2b00      	cmp	r3, #0
 8104742:	d14e      	bne.n	81047e2 <ethernet_link_check_state+0x106>
 8104744:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104746:	2b01      	cmp	r3, #1
 8104748:	dd4b      	ble.n	81047e2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 810474a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810474c:	3b02      	subs	r3, #2
 810474e:	2b03      	cmp	r3, #3
 8104750:	d82a      	bhi.n	81047a8 <ethernet_link_check_state+0xcc>
 8104752:	a201      	add	r2, pc, #4	@ (adr r2, 8104758 <ethernet_link_check_state+0x7c>)
 8104754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104758:	08104769 	.word	0x08104769
 810475c:	0810477b 	.word	0x0810477b
 8104760:	0810478b 	.word	0x0810478b
 8104764:	0810479b 	.word	0x0810479b
      duplex = ETH_FULLDUPLEX_MODE;
 8104768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810476c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 810476e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104772:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104774:	2301      	movs	r3, #1
 8104776:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8104778:	e017      	b.n	81047aa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 810477a:	2300      	movs	r3, #0
 810477c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 810477e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104782:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104784:	2301      	movs	r3, #1
 8104786:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8104788:	e00f      	b.n	81047aa <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 810478a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810478e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8104790:	2300      	movs	r3, #0
 8104792:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104794:	2301      	movs	r3, #1
 8104796:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8104798:	e007      	b.n	81047aa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 810479a:	2300      	movs	r3, #0
 810479c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 810479e:	2300      	movs	r3, #0
 81047a0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 81047a2:	2301      	movs	r3, #1
 81047a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 81047a6:	e000      	b.n	81047aa <ethernet_link_check_state+0xce>
      break;
 81047a8:	bf00      	nop
    if(linkchanged)
 81047aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81047ac:	2b00      	cmp	r3, #0
 81047ae:	d018      	beq.n	81047e2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 81047b0:	f107 030c 	add.w	r3, r7, #12
 81047b4:	4619      	mov	r1, r3
 81047b6:	480e      	ldr	r0, [pc, #56]	@ (81047f0 <ethernet_link_check_state+0x114>)
 81047b8:	f001 f81a 	bl	81057f0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 81047bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81047be:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 81047c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81047c2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 81047c4:	f107 030c 	add.w	r3, r7, #12
 81047c8:	4619      	mov	r1, r3
 81047ca:	4809      	ldr	r0, [pc, #36]	@ (81047f0 <ethernet_link_check_state+0x114>)
 81047cc:	f001 f9e4 	bl	8105b98 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 81047d0:	4807      	ldr	r0, [pc, #28]	@ (81047f0 <ethernet_link_check_state+0x114>)
 81047d2:	f000 fced 	bl	81051b0 <HAL_ETH_Start>
      netif_set_up(netif);
 81047d6:	6878      	ldr	r0, [r7, #4]
 81047d8:	f008 fe34 	bl	810d444 <netif_set_up>
      netif_set_link_up(netif);
 81047dc:	6878      	ldr	r0, [r7, #4]
 81047de:	f008 fecf 	bl	810d580 <netif_set_link_up>
}
 81047e2:	bf00      	nop
 81047e4:	3780      	adds	r7, #128	@ 0x80
 81047e6:	46bd      	mov	sp, r7
 81047e8:	bd80      	pop	{r7, pc}
 81047ea:	bf00      	nop
 81047ec:	10014498 	.word	0x10014498
 81047f0:	100143b0 	.word	0x100143b0

081047f4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 81047f4:	b580      	push	{r7, lr}
 81047f6:	b086      	sub	sp, #24
 81047f8:	af02      	add	r7, sp, #8
 81047fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 81047fc:	4812      	ldr	r0, [pc, #72]	@ (8104848 <HAL_ETH_RxAllocateCallback+0x54>)
 81047fe:	f008 fb9b 	bl	810cf38 <memp_malloc_pool>
 8104802:	60f8      	str	r0, [r7, #12]
  if (p)
 8104804:	68fb      	ldr	r3, [r7, #12]
 8104806:	2b00      	cmp	r3, #0
 8104808:	d014      	beq.n	8104834 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 810480a:	68fb      	ldr	r3, [r7, #12]
 810480c:	f103 0220 	add.w	r2, r3, #32
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8104814:	68fb      	ldr	r3, [r7, #12]
 8104816:	4a0d      	ldr	r2, [pc, #52]	@ (810484c <HAL_ETH_RxAllocateCallback+0x58>)
 8104818:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8104822:	9201      	str	r2, [sp, #4]
 8104824:	9300      	str	r3, [sp, #0]
 8104826:	68fb      	ldr	r3, [r7, #12]
 8104828:	2241      	movs	r2, #65	@ 0x41
 810482a:	2100      	movs	r1, #0
 810482c:	2000      	movs	r0, #0
 810482e:	f009 f8d1 	bl	810d9d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8104832:	e005      	b.n	8104840 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8104834:	4b06      	ldr	r3, [pc, #24]	@ (8104850 <HAL_ETH_RxAllocateCallback+0x5c>)
 8104836:	2201      	movs	r2, #1
 8104838:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	2200      	movs	r2, #0
 810483e:	601a      	str	r2, [r3, #0]
}
 8104840:	bf00      	nop
 8104842:	3710      	adds	r7, #16
 8104844:	46bd      	mov	sp, r7
 8104846:	bd80      	pop	{r7, pc}
 8104848:	0811ef24 	.word	0x0811ef24
 810484c:	081044a5 	.word	0x081044a5
 8104850:	100143ac 	.word	0x100143ac

08104854 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8104854:	b480      	push	{r7}
 8104856:	b089      	sub	sp, #36	@ 0x24
 8104858:	af00      	add	r7, sp, #0
 810485a:	60f8      	str	r0, [r7, #12]
 810485c:	60b9      	str	r1, [r7, #8]
 810485e:	607a      	str	r2, [r7, #4]
 8104860:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8104862:	68fb      	ldr	r3, [r7, #12]
 8104864:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8104866:	68bb      	ldr	r3, [r7, #8]
 8104868:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 810486a:	2300      	movs	r3, #0
 810486c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	3b20      	subs	r3, #32
 8104872:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8104874:	69fb      	ldr	r3, [r7, #28]
 8104876:	2200      	movs	r2, #0
 8104878:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 810487a:	69fb      	ldr	r3, [r7, #28]
 810487c:	2200      	movs	r2, #0
 810487e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8104880:	69fb      	ldr	r3, [r7, #28]
 8104882:	887a      	ldrh	r2, [r7, #2]
 8104884:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8104886:	69bb      	ldr	r3, [r7, #24]
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	2b00      	cmp	r3, #0
 810488c:	d103      	bne.n	8104896 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 810488e:	69bb      	ldr	r3, [r7, #24]
 8104890:	69fa      	ldr	r2, [r7, #28]
 8104892:	601a      	str	r2, [r3, #0]
 8104894:	e003      	b.n	810489e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8104896:	697b      	ldr	r3, [r7, #20]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	69fa      	ldr	r2, [r7, #28]
 810489c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 810489e:	697b      	ldr	r3, [r7, #20]
 81048a0:	69fa      	ldr	r2, [r7, #28]
 81048a2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 81048a4:	69bb      	ldr	r3, [r7, #24]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	61fb      	str	r3, [r7, #28]
 81048aa:	e009      	b.n	81048c0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 81048ac:	69fb      	ldr	r3, [r7, #28]
 81048ae:	891a      	ldrh	r2, [r3, #8]
 81048b0:	887b      	ldrh	r3, [r7, #2]
 81048b2:	4413      	add	r3, r2
 81048b4:	b29a      	uxth	r2, r3
 81048b6:	69fb      	ldr	r3, [r7, #28]
 81048b8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 81048ba:	69fb      	ldr	r3, [r7, #28]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	61fb      	str	r3, [r7, #28]
 81048c0:	69fb      	ldr	r3, [r7, #28]
 81048c2:	2b00      	cmp	r3, #0
 81048c4:	d1f2      	bne.n	81048ac <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 81048c6:	bf00      	nop
 81048c8:	bf00      	nop
 81048ca:	3724      	adds	r7, #36	@ 0x24
 81048cc:	46bd      	mov	sp, r7
 81048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048d2:	4770      	bx	lr

081048d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81048d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810490c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81048d8:	f000 f986 	bl	8104be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81048dc:	480c      	ldr	r0, [pc, #48]	@ (8104910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81048de:	490d      	ldr	r1, [pc, #52]	@ (8104914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81048e0:	4a0d      	ldr	r2, [pc, #52]	@ (8104918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81048e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81048e4:	e002      	b.n	81048ec <LoopCopyDataInit>

081048e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81048e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81048e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81048ea:	3304      	adds	r3, #4

081048ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81048ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81048ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81048f0:	d3f9      	bcc.n	81048e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81048f2:	4a0a      	ldr	r2, [pc, #40]	@ (810491c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81048f4:	4c0a      	ldr	r4, [pc, #40]	@ (8104920 <LoopFillZerobss+0x22>)
  movs r3, #0
 81048f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81048f8:	e001      	b.n	81048fe <LoopFillZerobss>

081048fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81048fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81048fc:	3204      	adds	r2, #4

081048fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81048fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104900:	d3fb      	bcc.n	81048fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104902:	f012 fff1 	bl	81178e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104906:	f7ff f8a3 	bl	8103a50 <main>
  bx  lr
 810490a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810490c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104910:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104914:	10000394 	.word	0x10000394
  ldr r2, =_sidata
 8104918:	0811f788 	.word	0x0811f788
  ldr r2, =_sbss
 810491c:	10000454 	.word	0x10000454
  ldr r4, =_ebss
 8104920:	100178a4 	.word	0x100178a4

08104924 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104924:	e7fe      	b.n	8104924 <ADC3_IRQHandler>

08104926 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8104926:	b480      	push	{r7}
 8104928:	b083      	sub	sp, #12
 810492a:	af00      	add	r7, sp, #0
 810492c:	6078      	str	r0, [r7, #4]
 810492e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	2b00      	cmp	r3, #0
 8104934:	d00b      	beq.n	810494e <LAN8742_RegisterBusIO+0x28>
 8104936:	683b      	ldr	r3, [r7, #0]
 8104938:	68db      	ldr	r3, [r3, #12]
 810493a:	2b00      	cmp	r3, #0
 810493c:	d007      	beq.n	810494e <LAN8742_RegisterBusIO+0x28>
 810493e:	683b      	ldr	r3, [r7, #0]
 8104940:	689b      	ldr	r3, [r3, #8]
 8104942:	2b00      	cmp	r3, #0
 8104944:	d003      	beq.n	810494e <LAN8742_RegisterBusIO+0x28>
 8104946:	683b      	ldr	r3, [r7, #0]
 8104948:	691b      	ldr	r3, [r3, #16]
 810494a:	2b00      	cmp	r3, #0
 810494c:	d102      	bne.n	8104954 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 810494e:	f04f 33ff 	mov.w	r3, #4294967295
 8104952:	e014      	b.n	810497e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8104954:	683b      	ldr	r3, [r7, #0]
 8104956:	681a      	ldr	r2, [r3, #0]
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 810495c:	683b      	ldr	r3, [r7, #0]
 810495e:	685a      	ldr	r2, [r3, #4]
 8104960:	687b      	ldr	r3, [r7, #4]
 8104962:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8104964:	683b      	ldr	r3, [r7, #0]
 8104966:	68da      	ldr	r2, [r3, #12]
 8104968:	687b      	ldr	r3, [r7, #4]
 810496a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 810496c:	683b      	ldr	r3, [r7, #0]
 810496e:	689a      	ldr	r2, [r3, #8]
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8104974:	683b      	ldr	r3, [r7, #0]
 8104976:	691a      	ldr	r2, [r3, #16]
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 810497c:	2300      	movs	r3, #0
}
 810497e:	4618      	mov	r0, r3
 8104980:	370c      	adds	r7, #12
 8104982:	46bd      	mov	sp, r7
 8104984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104988:	4770      	bx	lr

0810498a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 810498a:	b580      	push	{r7, lr}
 810498c:	b086      	sub	sp, #24
 810498e:	af00      	add	r7, sp, #0
 8104990:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8104992:	2300      	movs	r3, #0
 8104994:	60fb      	str	r3, [r7, #12]
 8104996:	2300      	movs	r3, #0
 8104998:	60bb      	str	r3, [r7, #8]
 810499a:	2300      	movs	r3, #0
 810499c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 810499e:	2300      	movs	r3, #0
 81049a0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	685b      	ldr	r3, [r3, #4]
 81049a6:	2b00      	cmp	r3, #0
 81049a8:	d17c      	bne.n	8104aa4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 81049aa:	687b      	ldr	r3, [r7, #4]
 81049ac:	689b      	ldr	r3, [r3, #8]
 81049ae:	2b00      	cmp	r3, #0
 81049b0:	d002      	beq.n	81049b8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	689b      	ldr	r3, [r3, #8]
 81049b6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 81049b8:	687b      	ldr	r3, [r7, #4]
 81049ba:	2220      	movs	r2, #32
 81049bc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 81049be:	2300      	movs	r3, #0
 81049c0:	617b      	str	r3, [r7, #20]
 81049c2:	e01c      	b.n	81049fe <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 81049c4:	687b      	ldr	r3, [r7, #4]
 81049c6:	695b      	ldr	r3, [r3, #20]
 81049c8:	f107 0208 	add.w	r2, r7, #8
 81049cc:	2112      	movs	r1, #18
 81049ce:	6978      	ldr	r0, [r7, #20]
 81049d0:	4798      	blx	r3
 81049d2:	4603      	mov	r3, r0
 81049d4:	2b00      	cmp	r3, #0
 81049d6:	da03      	bge.n	81049e0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 81049d8:	f06f 0304 	mvn.w	r3, #4
 81049dc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 81049de:	e00b      	b.n	81049f8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 81049e0:	68bb      	ldr	r3, [r7, #8]
 81049e2:	f003 031f 	and.w	r3, r3, #31
 81049e6:	697a      	ldr	r2, [r7, #20]
 81049e8:	429a      	cmp	r2, r3
 81049ea:	d105      	bne.n	81049f8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 81049ec:	687b      	ldr	r3, [r7, #4]
 81049ee:	697a      	ldr	r2, [r7, #20]
 81049f0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 81049f2:	2300      	movs	r3, #0
 81049f4:	613b      	str	r3, [r7, #16]
         break;
 81049f6:	e005      	b.n	8104a04 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 81049f8:	697b      	ldr	r3, [r7, #20]
 81049fa:	3301      	adds	r3, #1
 81049fc:	617b      	str	r3, [r7, #20]
 81049fe:	697b      	ldr	r3, [r7, #20]
 8104a00:	2b1f      	cmp	r3, #31
 8104a02:	d9df      	bls.n	81049c4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	2b1f      	cmp	r3, #31
 8104a0a:	d902      	bls.n	8104a12 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8104a0c:	f06f 0302 	mvn.w	r3, #2
 8104a10:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8104a12:	693b      	ldr	r3, [r7, #16]
 8104a14:	2b00      	cmp	r3, #0
 8104a16:	d145      	bne.n	8104aa4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	691b      	ldr	r3, [r3, #16]
 8104a1c:	687a      	ldr	r2, [r7, #4]
 8104a1e:	6810      	ldr	r0, [r2, #0]
 8104a20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8104a24:	2100      	movs	r1, #0
 8104a26:	4798      	blx	r3
 8104a28:	4603      	mov	r3, r0
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	db37      	blt.n	8104a9e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	695b      	ldr	r3, [r3, #20]
 8104a32:	687a      	ldr	r2, [r7, #4]
 8104a34:	6810      	ldr	r0, [r2, #0]
 8104a36:	f107 0208 	add.w	r2, r7, #8
 8104a3a:	2100      	movs	r1, #0
 8104a3c:	4798      	blx	r3
 8104a3e:	4603      	mov	r3, r0
 8104a40:	2b00      	cmp	r3, #0
 8104a42:	db28      	blt.n	8104a96 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	699b      	ldr	r3, [r3, #24]
 8104a48:	4798      	blx	r3
 8104a4a:	4603      	mov	r3, r0
 8104a4c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8104a4e:	e01c      	b.n	8104a8a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	699b      	ldr	r3, [r3, #24]
 8104a54:	4798      	blx	r3
 8104a56:	4603      	mov	r3, r0
 8104a58:	461a      	mov	r2, r3
 8104a5a:	68fb      	ldr	r3, [r7, #12]
 8104a5c:	1ad3      	subs	r3, r2, r3
 8104a5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8104a62:	d80e      	bhi.n	8104a82 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	695b      	ldr	r3, [r3, #20]
 8104a68:	687a      	ldr	r2, [r7, #4]
 8104a6a:	6810      	ldr	r0, [r2, #0]
 8104a6c:	f107 0208 	add.w	r2, r7, #8
 8104a70:	2100      	movs	r1, #0
 8104a72:	4798      	blx	r3
 8104a74:	4603      	mov	r3, r0
 8104a76:	2b00      	cmp	r3, #0
 8104a78:	da07      	bge.n	8104a8a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8104a7a:	f06f 0304 	mvn.w	r3, #4
 8104a7e:	613b      	str	r3, [r7, #16]
                 break;
 8104a80:	e010      	b.n	8104aa4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8104a82:	f06f 0301 	mvn.w	r3, #1
 8104a86:	613b      	str	r3, [r7, #16]
               break;
 8104a88:	e00c      	b.n	8104aa4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8104a8a:	68bb      	ldr	r3, [r7, #8]
 8104a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104a90:	2b00      	cmp	r3, #0
 8104a92:	d1dd      	bne.n	8104a50 <LAN8742_Init+0xc6>
 8104a94:	e006      	b.n	8104aa4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8104a96:	f06f 0304 	mvn.w	r3, #4
 8104a9a:	613b      	str	r3, [r7, #16]
 8104a9c:	e002      	b.n	8104aa4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8104a9e:	f06f 0303 	mvn.w	r3, #3
 8104aa2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8104aa4:	693b      	ldr	r3, [r7, #16]
 8104aa6:	2b00      	cmp	r3, #0
 8104aa8:	d112      	bne.n	8104ad0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8104aaa:	687b      	ldr	r3, [r7, #4]
 8104aac:	699b      	ldr	r3, [r3, #24]
 8104aae:	4798      	blx	r3
 8104ab0:	4603      	mov	r3, r0
 8104ab2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8104ab4:	bf00      	nop
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	699b      	ldr	r3, [r3, #24]
 8104aba:	4798      	blx	r3
 8104abc:	4603      	mov	r3, r0
 8104abe:	461a      	mov	r2, r3
 8104ac0:	68fb      	ldr	r3, [r7, #12]
 8104ac2:	1ad3      	subs	r3, r2, r3
 8104ac4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8104ac8:	d9f5      	bls.n	8104ab6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8104aca:	687b      	ldr	r3, [r7, #4]
 8104acc:	2201      	movs	r2, #1
 8104ace:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8104ad0:	693b      	ldr	r3, [r7, #16]
 }
 8104ad2:	4618      	mov	r0, r3
 8104ad4:	3718      	adds	r7, #24
 8104ad6:	46bd      	mov	sp, r7
 8104ad8:	bd80      	pop	{r7, pc}

08104ada <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8104ada:	b580      	push	{r7, lr}
 8104adc:	b084      	sub	sp, #16
 8104ade:	af00      	add	r7, sp, #0
 8104ae0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8104ae2:	2300      	movs	r3, #0
 8104ae4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	695b      	ldr	r3, [r3, #20]
 8104aea:	687a      	ldr	r2, [r7, #4]
 8104aec:	6810      	ldr	r0, [r2, #0]
 8104aee:	f107 020c 	add.w	r2, r7, #12
 8104af2:	2101      	movs	r1, #1
 8104af4:	4798      	blx	r3
 8104af6:	4603      	mov	r3, r0
 8104af8:	2b00      	cmp	r3, #0
 8104afa:	da02      	bge.n	8104b02 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8104afc:	f06f 0304 	mvn.w	r3, #4
 8104b00:	e06e      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	695b      	ldr	r3, [r3, #20]
 8104b06:	687a      	ldr	r2, [r7, #4]
 8104b08:	6810      	ldr	r0, [r2, #0]
 8104b0a:	f107 020c 	add.w	r2, r7, #12
 8104b0e:	2101      	movs	r1, #1
 8104b10:	4798      	blx	r3
 8104b12:	4603      	mov	r3, r0
 8104b14:	2b00      	cmp	r3, #0
 8104b16:	da02      	bge.n	8104b1e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8104b18:	f06f 0304 	mvn.w	r3, #4
 8104b1c:	e060      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8104b1e:	68fb      	ldr	r3, [r7, #12]
 8104b20:	f003 0304 	and.w	r3, r3, #4
 8104b24:	2b00      	cmp	r3, #0
 8104b26:	d101      	bne.n	8104b2c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8104b28:	2301      	movs	r3, #1
 8104b2a:	e059      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8104b2c:	687b      	ldr	r3, [r7, #4]
 8104b2e:	695b      	ldr	r3, [r3, #20]
 8104b30:	687a      	ldr	r2, [r7, #4]
 8104b32:	6810      	ldr	r0, [r2, #0]
 8104b34:	f107 020c 	add.w	r2, r7, #12
 8104b38:	2100      	movs	r1, #0
 8104b3a:	4798      	blx	r3
 8104b3c:	4603      	mov	r3, r0
 8104b3e:	2b00      	cmp	r3, #0
 8104b40:	da02      	bge.n	8104b48 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8104b42:	f06f 0304 	mvn.w	r3, #4
 8104b46:	e04b      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104b4e:	2b00      	cmp	r3, #0
 8104b50:	d11b      	bne.n	8104b8a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8104b52:	68fb      	ldr	r3, [r7, #12]
 8104b54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8104b58:	2b00      	cmp	r3, #0
 8104b5a:	d006      	beq.n	8104b6a <LAN8742_GetLinkState+0x90>
 8104b5c:	68fb      	ldr	r3, [r7, #12]
 8104b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104b62:	2b00      	cmp	r3, #0
 8104b64:	d001      	beq.n	8104b6a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8104b66:	2302      	movs	r3, #2
 8104b68:	e03a      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8104b6a:	68fb      	ldr	r3, [r7, #12]
 8104b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8104b70:	2b00      	cmp	r3, #0
 8104b72:	d001      	beq.n	8104b78 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8104b74:	2303      	movs	r3, #3
 8104b76:	e033      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8104b78:	68fb      	ldr	r3, [r7, #12]
 8104b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104b7e:	2b00      	cmp	r3, #0
 8104b80:	d001      	beq.n	8104b86 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8104b82:	2304      	movs	r3, #4
 8104b84:	e02c      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8104b86:	2305      	movs	r3, #5
 8104b88:	e02a      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	695b      	ldr	r3, [r3, #20]
 8104b8e:	687a      	ldr	r2, [r7, #4]
 8104b90:	6810      	ldr	r0, [r2, #0]
 8104b92:	f107 020c 	add.w	r2, r7, #12
 8104b96:	211f      	movs	r1, #31
 8104b98:	4798      	blx	r3
 8104b9a:	4603      	mov	r3, r0
 8104b9c:	2b00      	cmp	r3, #0
 8104b9e:	da02      	bge.n	8104ba6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8104ba0:	f06f 0304 	mvn.w	r3, #4
 8104ba4:	e01c      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8104ba6:	68fb      	ldr	r3, [r7, #12]
 8104ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104bac:	2b00      	cmp	r3, #0
 8104bae:	d101      	bne.n	8104bb4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8104bb0:	2306      	movs	r3, #6
 8104bb2:	e015      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8104bb4:	68fb      	ldr	r3, [r7, #12]
 8104bb6:	f003 031c 	and.w	r3, r3, #28
 8104bba:	2b18      	cmp	r3, #24
 8104bbc:	d101      	bne.n	8104bc2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8104bbe:	2302      	movs	r3, #2
 8104bc0:	e00e      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8104bc2:	68fb      	ldr	r3, [r7, #12]
 8104bc4:	f003 031c 	and.w	r3, r3, #28
 8104bc8:	2b08      	cmp	r3, #8
 8104bca:	d101      	bne.n	8104bd0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8104bcc:	2303      	movs	r3, #3
 8104bce:	e007      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8104bd0:	68fb      	ldr	r3, [r7, #12]
 8104bd2:	f003 031c 	and.w	r3, r3, #28
 8104bd6:	2b14      	cmp	r3, #20
 8104bd8:	d101      	bne.n	8104bde <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8104bda:	2304      	movs	r3, #4
 8104bdc:	e000      	b.n	8104be0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8104bde:	2305      	movs	r3, #5
    }				
  }
}
 8104be0:	4618      	mov	r0, r3
 8104be2:	3710      	adds	r7, #16
 8104be4:	46bd      	mov	sp, r7
 8104be6:	bd80      	pop	{r7, pc}

08104be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8104be8:	b480      	push	{r7}
 8104bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8104bec:	4b0b      	ldr	r3, [pc, #44]	@ (8104c1c <SystemInit+0x34>)
 8104bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8104c1c <SystemInit+0x34>)
 8104bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8104bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8104bfc:	4b07      	ldr	r3, [pc, #28]	@ (8104c1c <SystemInit+0x34>)
 8104bfe:	691b      	ldr	r3, [r3, #16]
 8104c00:	4a06      	ldr	r2, [pc, #24]	@ (8104c1c <SystemInit+0x34>)
 8104c02:	f043 0310 	orr.w	r3, r3, #16
 8104c06:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8104c08:	4b04      	ldr	r3, [pc, #16]	@ (8104c1c <SystemInit+0x34>)
 8104c0a:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8104c0e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8104c10:	bf00      	nop
 8104c12:	46bd      	mov	sp, r7
 8104c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c18:	4770      	bx	lr
 8104c1a:	bf00      	nop
 8104c1c:	e000ed00 	.word	0xe000ed00

08104c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8104c20:	b580      	push	{r7, lr}
 8104c22:	b082      	sub	sp, #8
 8104c24:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8104c26:	4b28      	ldr	r3, [pc, #160]	@ (8104cc8 <HAL_Init+0xa8>)
 8104c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104c2c:	4a26      	ldr	r2, [pc, #152]	@ (8104cc8 <HAL_Init+0xa8>)
 8104c2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8104c32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104c36:	4b24      	ldr	r3, [pc, #144]	@ (8104cc8 <HAL_Init+0xa8>)
 8104c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104c40:	603b      	str	r3, [r7, #0]
 8104c42:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8104c44:	4b21      	ldr	r3, [pc, #132]	@ (8104ccc <HAL_Init+0xac>)
 8104c46:	681b      	ldr	r3, [r3, #0]
 8104c48:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8104c4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104c50:	4a1e      	ldr	r2, [pc, #120]	@ (8104ccc <HAL_Init+0xac>)
 8104c52:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8104c56:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8104c58:	4b1c      	ldr	r3, [pc, #112]	@ (8104ccc <HAL_Init+0xac>)
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8104ccc <HAL_Init+0xac>)
 8104c5e:	f043 0301 	orr.w	r3, r3, #1
 8104c62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8104c64:	2003      	movs	r0, #3
 8104c66:	f000 f979 	bl	8104f5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8104c6a:	f001 ffc3 	bl	8106bf4 <HAL_RCC_GetSysClockFreq>
 8104c6e:	4602      	mov	r2, r0
 8104c70:	4b15      	ldr	r3, [pc, #84]	@ (8104cc8 <HAL_Init+0xa8>)
 8104c72:	699b      	ldr	r3, [r3, #24]
 8104c74:	0a1b      	lsrs	r3, r3, #8
 8104c76:	f003 030f 	and.w	r3, r3, #15
 8104c7a:	4915      	ldr	r1, [pc, #84]	@ (8104cd0 <HAL_Init+0xb0>)
 8104c7c:	5ccb      	ldrb	r3, [r1, r3]
 8104c7e:	f003 031f 	and.w	r3, r3, #31
 8104c82:	fa22 f303 	lsr.w	r3, r2, r3
 8104c86:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104c88:	4b0f      	ldr	r3, [pc, #60]	@ (8104cc8 <HAL_Init+0xa8>)
 8104c8a:	699b      	ldr	r3, [r3, #24]
 8104c8c:	f003 030f 	and.w	r3, r3, #15
 8104c90:	4a0f      	ldr	r2, [pc, #60]	@ (8104cd0 <HAL_Init+0xb0>)
 8104c92:	5cd3      	ldrb	r3, [r2, r3]
 8104c94:	f003 031f 	and.w	r3, r3, #31
 8104c98:	687a      	ldr	r2, [r7, #4]
 8104c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8104c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8104cd4 <HAL_Init+0xb4>)
 8104ca0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8104cd4 <HAL_Init+0xb4>)
 8104ca4:	681b      	ldr	r3, [r3, #0]
 8104ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8104cd8 <HAL_Init+0xb8>)
 8104ca8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8104caa:	2000      	movs	r0, #0
 8104cac:	f000 f816 	bl	8104cdc <HAL_InitTick>
 8104cb0:	4603      	mov	r3, r0
 8104cb2:	2b00      	cmp	r3, #0
 8104cb4:	d001      	beq.n	8104cba <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8104cb6:	2301      	movs	r3, #1
 8104cb8:	e002      	b.n	8104cc0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8104cba:	f7fe ffc5 	bl	8103c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104cbe:	2300      	movs	r3, #0
}
 8104cc0:	4618      	mov	r0, r3
 8104cc2:	3708      	adds	r7, #8
 8104cc4:	46bd      	mov	sp, r7
 8104cc6:	bd80      	pop	{r7, pc}
 8104cc8:	58024400 	.word	0x58024400
 8104ccc:	40024400 	.word	0x40024400
 8104cd0:	0811ef30 	.word	0x0811ef30
 8104cd4:	100001b8 	.word	0x100001b8
 8104cd8:	100001b4 	.word	0x100001b4

08104cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104cdc:	b580      	push	{r7, lr}
 8104cde:	b082      	sub	sp, #8
 8104ce0:	af00      	add	r7, sp, #0
 8104ce2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104ce4:	4b15      	ldr	r3, [pc, #84]	@ (8104d3c <HAL_InitTick+0x60>)
 8104ce6:	781b      	ldrb	r3, [r3, #0]
 8104ce8:	2b00      	cmp	r3, #0
 8104cea:	d101      	bne.n	8104cf0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8104cec:	2301      	movs	r3, #1
 8104cee:	e021      	b.n	8104d34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8104cf0:	4b13      	ldr	r3, [pc, #76]	@ (8104d40 <HAL_InitTick+0x64>)
 8104cf2:	681a      	ldr	r2, [r3, #0]
 8104cf4:	4b11      	ldr	r3, [pc, #68]	@ (8104d3c <HAL_InitTick+0x60>)
 8104cf6:	781b      	ldrb	r3, [r3, #0]
 8104cf8:	4619      	mov	r1, r3
 8104cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8104cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8104d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8104d06:	4618      	mov	r0, r3
 8104d08:	f000 f94d 	bl	8104fa6 <HAL_SYSTICK_Config>
 8104d0c:	4603      	mov	r3, r0
 8104d0e:	2b00      	cmp	r3, #0
 8104d10:	d001      	beq.n	8104d16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8104d12:	2301      	movs	r3, #1
 8104d14:	e00e      	b.n	8104d34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	2b0f      	cmp	r3, #15
 8104d1a:	d80a      	bhi.n	8104d32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8104d1c:	2200      	movs	r2, #0
 8104d1e:	6879      	ldr	r1, [r7, #4]
 8104d20:	f04f 30ff 	mov.w	r0, #4294967295
 8104d24:	f000 f925 	bl	8104f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8104d28:	4a06      	ldr	r2, [pc, #24]	@ (8104d44 <HAL_InitTick+0x68>)
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8104d2e:	2300      	movs	r3, #0
 8104d30:	e000      	b.n	8104d34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8104d32:	2301      	movs	r3, #1
}
 8104d34:	4618      	mov	r0, r3
 8104d36:	3708      	adds	r7, #8
 8104d38:	46bd      	mov	sp, r7
 8104d3a:	bd80      	pop	{r7, pc}
 8104d3c:	100001c0 	.word	0x100001c0
 8104d40:	100001b4 	.word	0x100001b4
 8104d44:	100001bc 	.word	0x100001bc

08104d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8104d48:	b480      	push	{r7}
 8104d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8104d4c:	4b06      	ldr	r3, [pc, #24]	@ (8104d68 <HAL_IncTick+0x20>)
 8104d4e:	781b      	ldrb	r3, [r3, #0]
 8104d50:	461a      	mov	r2, r3
 8104d52:	4b06      	ldr	r3, [pc, #24]	@ (8104d6c <HAL_IncTick+0x24>)
 8104d54:	681b      	ldr	r3, [r3, #0]
 8104d56:	4413      	add	r3, r2
 8104d58:	4a04      	ldr	r2, [pc, #16]	@ (8104d6c <HAL_IncTick+0x24>)
 8104d5a:	6013      	str	r3, [r2, #0]
}
 8104d5c:	bf00      	nop
 8104d5e:	46bd      	mov	sp, r7
 8104d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d64:	4770      	bx	lr
 8104d66:	bf00      	nop
 8104d68:	100001c0 	.word	0x100001c0
 8104d6c:	100144b8 	.word	0x100144b8

08104d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8104d70:	b480      	push	{r7}
 8104d72:	af00      	add	r7, sp, #0
  return uwTick;
 8104d74:	4b03      	ldr	r3, [pc, #12]	@ (8104d84 <HAL_GetTick+0x14>)
 8104d76:	681b      	ldr	r3, [r3, #0]
}
 8104d78:	4618      	mov	r0, r3
 8104d7a:	46bd      	mov	sp, r7
 8104d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d80:	4770      	bx	lr
 8104d82:	bf00      	nop
 8104d84:	100144b8 	.word	0x100144b8

08104d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8104d88:	b580      	push	{r7, lr}
 8104d8a:	b084      	sub	sp, #16
 8104d8c:	af00      	add	r7, sp, #0
 8104d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8104d90:	f7ff ffee 	bl	8104d70 <HAL_GetTick>
 8104d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8104d96:	687b      	ldr	r3, [r7, #4]
 8104d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104da0:	d005      	beq.n	8104dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8104da2:	4b0a      	ldr	r3, [pc, #40]	@ (8104dcc <HAL_Delay+0x44>)
 8104da4:	781b      	ldrb	r3, [r3, #0]
 8104da6:	461a      	mov	r2, r3
 8104da8:	68fb      	ldr	r3, [r7, #12]
 8104daa:	4413      	add	r3, r2
 8104dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8104dae:	bf00      	nop
 8104db0:	f7ff ffde 	bl	8104d70 <HAL_GetTick>
 8104db4:	4602      	mov	r2, r0
 8104db6:	68bb      	ldr	r3, [r7, #8]
 8104db8:	1ad3      	subs	r3, r2, r3
 8104dba:	68fa      	ldr	r2, [r7, #12]
 8104dbc:	429a      	cmp	r2, r3
 8104dbe:	d8f7      	bhi.n	8104db0 <HAL_Delay+0x28>
  {
  }
}
 8104dc0:	bf00      	nop
 8104dc2:	bf00      	nop
 8104dc4:	3710      	adds	r7, #16
 8104dc6:	46bd      	mov	sp, r7
 8104dc8:	bd80      	pop	{r7, pc}
 8104dca:	bf00      	nop
 8104dcc:	100001c0 	.word	0x100001c0

08104dd0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8104dd0:	b480      	push	{r7}
 8104dd2:	b083      	sub	sp, #12
 8104dd4:	af00      	add	r7, sp, #0
 8104dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8104dd8:	4b06      	ldr	r3, [pc, #24]	@ (8104df4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8104dda:	685b      	ldr	r3, [r3, #4]
 8104ddc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8104de0:	4904      	ldr	r1, [pc, #16]	@ (8104df4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	4313      	orrs	r3, r2
 8104de6:	604b      	str	r3, [r1, #4]
}
 8104de8:	bf00      	nop
 8104dea:	370c      	adds	r7, #12
 8104dec:	46bd      	mov	sp, r7
 8104dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104df2:	4770      	bx	lr
 8104df4:	58000400 	.word	0x58000400

08104df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104df8:	b480      	push	{r7}
 8104dfa:	b085      	sub	sp, #20
 8104dfc:	af00      	add	r7, sp, #0
 8104dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	f003 0307 	and.w	r3, r3, #7
 8104e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104e08:	4b0c      	ldr	r3, [pc, #48]	@ (8104e3c <__NVIC_SetPriorityGrouping+0x44>)
 8104e0a:	68db      	ldr	r3, [r3, #12]
 8104e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104e0e:	68ba      	ldr	r2, [r7, #8]
 8104e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8104e14:	4013      	ands	r3, r2
 8104e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104e18:	68fb      	ldr	r3, [r7, #12]
 8104e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104e1c:	68bb      	ldr	r3, [r7, #8]
 8104e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8104e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104e2a:	4a04      	ldr	r2, [pc, #16]	@ (8104e3c <__NVIC_SetPriorityGrouping+0x44>)
 8104e2c:	68bb      	ldr	r3, [r7, #8]
 8104e2e:	60d3      	str	r3, [r2, #12]
}
 8104e30:	bf00      	nop
 8104e32:	3714      	adds	r7, #20
 8104e34:	46bd      	mov	sp, r7
 8104e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e3a:	4770      	bx	lr
 8104e3c:	e000ed00 	.word	0xe000ed00

08104e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104e40:	b480      	push	{r7}
 8104e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104e44:	4b04      	ldr	r3, [pc, #16]	@ (8104e58 <__NVIC_GetPriorityGrouping+0x18>)
 8104e46:	68db      	ldr	r3, [r3, #12]
 8104e48:	0a1b      	lsrs	r3, r3, #8
 8104e4a:	f003 0307 	and.w	r3, r3, #7
}
 8104e4e:	4618      	mov	r0, r3
 8104e50:	46bd      	mov	sp, r7
 8104e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e56:	4770      	bx	lr
 8104e58:	e000ed00 	.word	0xe000ed00

08104e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104e5c:	b480      	push	{r7}
 8104e5e:	b083      	sub	sp, #12
 8104e60:	af00      	add	r7, sp, #0
 8104e62:	4603      	mov	r3, r0
 8104e64:	6039      	str	r1, [r7, #0]
 8104e66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104e6c:	2b00      	cmp	r3, #0
 8104e6e:	db0a      	blt.n	8104e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104e70:	683b      	ldr	r3, [r7, #0]
 8104e72:	b2da      	uxtb	r2, r3
 8104e74:	490c      	ldr	r1, [pc, #48]	@ (8104ea8 <__NVIC_SetPriority+0x4c>)
 8104e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104e7a:	0112      	lsls	r2, r2, #4
 8104e7c:	b2d2      	uxtb	r2, r2
 8104e7e:	440b      	add	r3, r1
 8104e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8104e84:	e00a      	b.n	8104e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104e86:	683b      	ldr	r3, [r7, #0]
 8104e88:	b2da      	uxtb	r2, r3
 8104e8a:	4908      	ldr	r1, [pc, #32]	@ (8104eac <__NVIC_SetPriority+0x50>)
 8104e8c:	88fb      	ldrh	r3, [r7, #6]
 8104e8e:	f003 030f 	and.w	r3, r3, #15
 8104e92:	3b04      	subs	r3, #4
 8104e94:	0112      	lsls	r2, r2, #4
 8104e96:	b2d2      	uxtb	r2, r2
 8104e98:	440b      	add	r3, r1
 8104e9a:	761a      	strb	r2, [r3, #24]
}
 8104e9c:	bf00      	nop
 8104e9e:	370c      	adds	r7, #12
 8104ea0:	46bd      	mov	sp, r7
 8104ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ea6:	4770      	bx	lr
 8104ea8:	e000e100 	.word	0xe000e100
 8104eac:	e000ed00 	.word	0xe000ed00

08104eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104eb0:	b480      	push	{r7}
 8104eb2:	b089      	sub	sp, #36	@ 0x24
 8104eb4:	af00      	add	r7, sp, #0
 8104eb6:	60f8      	str	r0, [r7, #12]
 8104eb8:	60b9      	str	r1, [r7, #8]
 8104eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104ebc:	68fb      	ldr	r3, [r7, #12]
 8104ebe:	f003 0307 	and.w	r3, r3, #7
 8104ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104ec4:	69fb      	ldr	r3, [r7, #28]
 8104ec6:	f1c3 0307 	rsb	r3, r3, #7
 8104eca:	2b04      	cmp	r3, #4
 8104ecc:	bf28      	it	cs
 8104ece:	2304      	movcs	r3, #4
 8104ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104ed2:	69fb      	ldr	r3, [r7, #28]
 8104ed4:	3304      	adds	r3, #4
 8104ed6:	2b06      	cmp	r3, #6
 8104ed8:	d902      	bls.n	8104ee0 <NVIC_EncodePriority+0x30>
 8104eda:	69fb      	ldr	r3, [r7, #28]
 8104edc:	3b03      	subs	r3, #3
 8104ede:	e000      	b.n	8104ee2 <NVIC_EncodePriority+0x32>
 8104ee0:	2300      	movs	r3, #0
 8104ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8104ee8:	69bb      	ldr	r3, [r7, #24]
 8104eea:	fa02 f303 	lsl.w	r3, r2, r3
 8104eee:	43da      	mvns	r2, r3
 8104ef0:	68bb      	ldr	r3, [r7, #8]
 8104ef2:	401a      	ands	r2, r3
 8104ef4:	697b      	ldr	r3, [r7, #20]
 8104ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8104efc:	697b      	ldr	r3, [r7, #20]
 8104efe:	fa01 f303 	lsl.w	r3, r1, r3
 8104f02:	43d9      	mvns	r1, r3
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104f08:	4313      	orrs	r3, r2
         );
}
 8104f0a:	4618      	mov	r0, r3
 8104f0c:	3724      	adds	r7, #36	@ 0x24
 8104f0e:	46bd      	mov	sp, r7
 8104f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f14:	4770      	bx	lr
	...

08104f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104f18:	b580      	push	{r7, lr}
 8104f1a:	b082      	sub	sp, #8
 8104f1c:	af00      	add	r7, sp, #0
 8104f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	3b01      	subs	r3, #1
 8104f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104f28:	d301      	bcc.n	8104f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8104f2a:	2301      	movs	r3, #1
 8104f2c:	e00f      	b.n	8104f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8104f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8104f58 <SysTick_Config+0x40>)
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	3b01      	subs	r3, #1
 8104f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104f36:	210f      	movs	r1, #15
 8104f38:	f04f 30ff 	mov.w	r0, #4294967295
 8104f3c:	f7ff ff8e 	bl	8104e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104f40:	4b05      	ldr	r3, [pc, #20]	@ (8104f58 <SysTick_Config+0x40>)
 8104f42:	2200      	movs	r2, #0
 8104f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104f46:	4b04      	ldr	r3, [pc, #16]	@ (8104f58 <SysTick_Config+0x40>)
 8104f48:	2207      	movs	r2, #7
 8104f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8104f4c:	2300      	movs	r3, #0
}
 8104f4e:	4618      	mov	r0, r3
 8104f50:	3708      	adds	r7, #8
 8104f52:	46bd      	mov	sp, r7
 8104f54:	bd80      	pop	{r7, pc}
 8104f56:	bf00      	nop
 8104f58:	e000e010 	.word	0xe000e010

08104f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104f5c:	b580      	push	{r7, lr}
 8104f5e:	b082      	sub	sp, #8
 8104f60:	af00      	add	r7, sp, #0
 8104f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104f64:	6878      	ldr	r0, [r7, #4]
 8104f66:	f7ff ff47 	bl	8104df8 <__NVIC_SetPriorityGrouping>
}
 8104f6a:	bf00      	nop
 8104f6c:	3708      	adds	r7, #8
 8104f6e:	46bd      	mov	sp, r7
 8104f70:	bd80      	pop	{r7, pc}

08104f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104f72:	b580      	push	{r7, lr}
 8104f74:	b086      	sub	sp, #24
 8104f76:	af00      	add	r7, sp, #0
 8104f78:	4603      	mov	r3, r0
 8104f7a:	60b9      	str	r1, [r7, #8]
 8104f7c:	607a      	str	r2, [r7, #4]
 8104f7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104f80:	f7ff ff5e 	bl	8104e40 <__NVIC_GetPriorityGrouping>
 8104f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104f86:	687a      	ldr	r2, [r7, #4]
 8104f88:	68b9      	ldr	r1, [r7, #8]
 8104f8a:	6978      	ldr	r0, [r7, #20]
 8104f8c:	f7ff ff90 	bl	8104eb0 <NVIC_EncodePriority>
 8104f90:	4602      	mov	r2, r0
 8104f92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104f96:	4611      	mov	r1, r2
 8104f98:	4618      	mov	r0, r3
 8104f9a:	f7ff ff5f 	bl	8104e5c <__NVIC_SetPriority>
}
 8104f9e:	bf00      	nop
 8104fa0:	3718      	adds	r7, #24
 8104fa2:	46bd      	mov	sp, r7
 8104fa4:	bd80      	pop	{r7, pc}

08104fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104fa6:	b580      	push	{r7, lr}
 8104fa8:	b082      	sub	sp, #8
 8104faa:	af00      	add	r7, sp, #0
 8104fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8104fae:	6878      	ldr	r0, [r7, #4]
 8104fb0:	f7ff ffb2 	bl	8104f18 <SysTick_Config>
 8104fb4:	4603      	mov	r3, r0
}
 8104fb6:	4618      	mov	r0, r3
 8104fb8:	3708      	adds	r7, #8
 8104fba:	46bd      	mov	sp, r7
 8104fbc:	bd80      	pop	{r7, pc}
	...

08104fc0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104fc0:	b480      	push	{r7}
 8104fc2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104fc4:	4b06      	ldr	r3, [pc, #24]	@ (8104fe0 <HAL_GetCurrentCPUID+0x20>)
 8104fc6:	681b      	ldr	r3, [r3, #0]
 8104fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8104fcc:	2b70      	cmp	r3, #112	@ 0x70
 8104fce:	d101      	bne.n	8104fd4 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8104fd0:	2303      	movs	r3, #3
 8104fd2:	e000      	b.n	8104fd6 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8104fd4:	2301      	movs	r3, #1
  }
}
 8104fd6:	4618      	mov	r0, r3
 8104fd8:	46bd      	mov	sp, r7
 8104fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fde:	4770      	bx	lr
 8104fe0:	e000ed00 	.word	0xe000ed00

08104fe4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8104fe4:	b580      	push	{r7, lr}
 8104fe6:	b084      	sub	sp, #16
 8104fe8:	af00      	add	r7, sp, #0
 8104fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8104fec:	687b      	ldr	r3, [r7, #4]
 8104fee:	2b00      	cmp	r3, #0
 8104ff0:	d101      	bne.n	8104ff6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8104ff2:	2301      	movs	r3, #1
 8104ff4:	e0d1      	b.n	810519a <HAL_ETH_Init+0x1b6>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104ffc:	2b00      	cmp	r3, #0
 8104ffe:	d106      	bne.n	810500e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	2223      	movs	r2, #35	@ 0x23
 8105004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8105008:	6878      	ldr	r0, [r7, #4]
 810500a:	f7ff fa6d 	bl	81044e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810500e:	4b65      	ldr	r3, [pc, #404]	@ (81051a4 <HAL_ETH_Init+0x1c0>)
 8105010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105014:	4a63      	ldr	r2, [pc, #396]	@ (81051a4 <HAL_ETH_Init+0x1c0>)
 8105016:	f043 0302 	orr.w	r3, r3, #2
 810501a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810501e:	4b61      	ldr	r3, [pc, #388]	@ (81051a4 <HAL_ETH_Init+0x1c0>)
 8105020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105024:	f003 0302 	and.w	r3, r3, #2
 8105028:	60bb      	str	r3, [r7, #8]
 810502a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	7a1b      	ldrb	r3, [r3, #8]
 8105030:	2b00      	cmp	r3, #0
 8105032:	d103      	bne.n	810503c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8105034:	2000      	movs	r0, #0
 8105036:	f7ff fecb 	bl	8104dd0 <HAL_SYSCFG_ETHInterfaceSelect>
 810503a:	e003      	b.n	8105044 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 810503c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8105040:	f7ff fec6 	bl	8104dd0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8105044:	4b58      	ldr	r3, [pc, #352]	@ (81051a8 <HAL_ETH_Init+0x1c4>)
 8105046:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	681b      	ldr	r3, [r3, #0]
 810504c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	687a      	ldr	r2, [r7, #4]
 8105054:	6812      	ldr	r2, [r2, #0]
 8105056:	f043 0301 	orr.w	r3, r3, #1
 810505a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810505e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8105060:	f7ff fe86 	bl	8104d70 <HAL_GetTick>
 8105064:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8105066:	e011      	b.n	810508c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8105068:	f7ff fe82 	bl	8104d70 <HAL_GetTick>
 810506c:	4602      	mov	r2, r0
 810506e:	68fb      	ldr	r3, [r7, #12]
 8105070:	1ad3      	subs	r3, r2, r3
 8105072:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8105076:	d909      	bls.n	810508c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	2204      	movs	r2, #4
 810507c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	22e0      	movs	r2, #224	@ 0xe0
 8105084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8105088:	2301      	movs	r3, #1
 810508a:	e086      	b.n	810519a <HAL_ETH_Init+0x1b6>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105094:	681b      	ldr	r3, [r3, #0]
 8105096:	f003 0301 	and.w	r3, r3, #1
 810509a:	2b00      	cmp	r3, #0
 810509c:	d1e4      	bne.n	8105068 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 810509e:	6878      	ldr	r0, [r7, #4]
 81050a0:	f000 fd94 	bl	8105bcc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81050a4:	f001 ff20 	bl	8106ee8 <HAL_RCC_GetHCLKFreq>
 81050a8:	4603      	mov	r3, r0
 81050aa:	4a40      	ldr	r2, [pc, #256]	@ (81051ac <HAL_ETH_Init+0x1c8>)
 81050ac:	fba2 2303 	umull	r2, r3, r2, r3
 81050b0:	0c9a      	lsrs	r2, r3, #18
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	3a01      	subs	r2, #1
 81050b8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 81050bc:	6878      	ldr	r0, [r7, #4]
 81050be:	f000 ff7f 	bl	8105fc0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	681b      	ldr	r3, [r3, #0]
 81050c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81050ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 81050ce:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 81050d2:	687a      	ldr	r2, [r7, #4]
 81050d4:	6812      	ldr	r2, [r2, #0]
 81050d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81050da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81050de:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	695b      	ldr	r3, [r3, #20]
 81050e6:	f003 0303 	and.w	r3, r3, #3
 81050ea:	2b00      	cmp	r3, #0
 81050ec:	d009      	beq.n	8105102 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	2201      	movs	r2, #1
 81050f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	22e0      	movs	r2, #224	@ 0xe0
 81050fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 81050fe:	2301      	movs	r3, #1
 8105100:	e04b      	b.n	810519a <HAL_ETH_Init+0x1b6>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810510a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810510e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8105112:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8105116:	687a      	ldr	r2, [r7, #4]
 8105118:	6952      	ldr	r2, [r2, #20]
 810511a:	0051      	lsls	r1, r2, #1
 810511c:	687a      	ldr	r2, [r7, #4]
 810511e:	6812      	ldr	r2, [r2, #0]
 8105120:	430b      	orrs	r3, r1
 8105122:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105126:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810512a:	6878      	ldr	r0, [r7, #4]
 810512c:	f000 ffe5 	bl	81060fa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8105130:	6878      	ldr	r0, [r7, #4]
 8105132:	f001 f82b 	bl	810618c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	685b      	ldr	r3, [r3, #4]
 810513a:	3305      	adds	r3, #5
 810513c:	781b      	ldrb	r3, [r3, #0]
 810513e:	021a      	lsls	r2, r3, #8
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	685b      	ldr	r3, [r3, #4]
 8105144:	3304      	adds	r3, #4
 8105146:	781b      	ldrb	r3, [r3, #0]
 8105148:	4619      	mov	r1, r3
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	681b      	ldr	r3, [r3, #0]
 810514e:	430a      	orrs	r2, r1
 8105150:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	685b      	ldr	r3, [r3, #4]
 8105158:	3303      	adds	r3, #3
 810515a:	781b      	ldrb	r3, [r3, #0]
 810515c:	061a      	lsls	r2, r3, #24
 810515e:	687b      	ldr	r3, [r7, #4]
 8105160:	685b      	ldr	r3, [r3, #4]
 8105162:	3302      	adds	r3, #2
 8105164:	781b      	ldrb	r3, [r3, #0]
 8105166:	041b      	lsls	r3, r3, #16
 8105168:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	685b      	ldr	r3, [r3, #4]
 810516e:	3301      	adds	r3, #1
 8105170:	781b      	ldrb	r3, [r3, #0]
 8105172:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8105174:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8105176:	687b      	ldr	r3, [r7, #4]
 8105178:	685b      	ldr	r3, [r3, #4]
 810517a:	781b      	ldrb	r3, [r3, #0]
 810517c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8105182:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8105184:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8105188:	687b      	ldr	r3, [r7, #4]
 810518a:	2200      	movs	r2, #0
 810518c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	2210      	movs	r2, #16
 8105194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8105198:	2300      	movs	r3, #0
}
 810519a:	4618      	mov	r0, r3
 810519c:	3710      	adds	r7, #16
 810519e:	46bd      	mov	sp, r7
 81051a0:	bd80      	pop	{r7, pc}
 81051a2:	bf00      	nop
 81051a4:	58024400 	.word	0x58024400
 81051a8:	58000400 	.word	0x58000400
 81051ac:	431bde83 	.word	0x431bde83

081051b0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 81051b0:	b580      	push	{r7, lr}
 81051b2:	b082      	sub	sp, #8
 81051b4:	af00      	add	r7, sp, #0
 81051b6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81051be:	2b10      	cmp	r3, #16
 81051c0:	d153      	bne.n	810526a <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	2223      	movs	r2, #35	@ 0x23
 81051c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	2204      	movs	r2, #4
 81051ce:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 81051d0:	6878      	ldr	r0, [r7, #4]
 81051d2:	f000 f9f6 	bl	81055c2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	681a      	ldr	r2, [r3, #0]
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	f042 0202 	orr.w	r2, r2, #2
 81051e4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	681b      	ldr	r3, [r3, #0]
 81051ea:	681a      	ldr	r2, [r3, #0]
 81051ec:	687b      	ldr	r3, [r7, #4]
 81051ee:	681b      	ldr	r3, [r3, #0]
 81051f0:	f042 0201 	orr.w	r2, r2, #1
 81051f4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	681b      	ldr	r3, [r3, #0]
 81051fa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	f042 0201 	orr.w	r2, r2, #1
 8105206:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	681b      	ldr	r3, [r3, #0]
 810520e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105212:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8105216:	687a      	ldr	r2, [r7, #4]
 8105218:	6812      	ldr	r2, [r2, #0]
 810521a:	f043 0301 	orr.w	r3, r3, #1
 810521e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105222:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810522e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8105232:	687a      	ldr	r2, [r7, #4]
 8105234:	6812      	ldr	r2, [r2, #0]
 8105236:	f043 0301 	orr.w	r3, r3, #1
 810523a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810523e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810524a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810524e:	687a      	ldr	r2, [r7, #4]
 8105250:	6812      	ldr	r2, [r2, #0]
 8105252:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8105256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810525a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	2223      	movs	r2, #35	@ 0x23
 8105262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8105266:	2300      	movs	r3, #0
 8105268:	e000      	b.n	810526c <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 810526a:	2301      	movs	r3, #1
  }
}
 810526c:	4618      	mov	r0, r3
 810526e:	3708      	adds	r7, #8
 8105270:	46bd      	mov	sp, r7
 8105272:	bd80      	pop	{r7, pc}

08105274 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8105274:	b480      	push	{r7}
 8105276:	b083      	sub	sp, #12
 8105278:	af00      	add	r7, sp, #0
 810527a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105282:	2b23      	cmp	r3, #35	@ 0x23
 8105284:	d13f      	bne.n	8105306 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	2223      	movs	r2, #35	@ 0x23
 810528a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	681b      	ldr	r3, [r3, #0]
 8105292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105296:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810529a:	687a      	ldr	r2, [r7, #4]
 810529c:	6812      	ldr	r2, [r2, #0]
 810529e:	f023 0301 	bic.w	r3, r3, #1
 81052a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81052a6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	681b      	ldr	r3, [r3, #0]
 81052ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81052b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81052b6:	687a      	ldr	r2, [r7, #4]
 81052b8:	6812      	ldr	r2, [r2, #0]
 81052ba:	f023 0301 	bic.w	r3, r3, #1
 81052be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81052c2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	681b      	ldr	r3, [r3, #0]
 81052ca:	681a      	ldr	r2, [r3, #0]
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	f022 0201 	bic.w	r2, r2, #1
 81052d4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	681b      	ldr	r3, [r3, #0]
 81052da:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	f042 0201 	orr.w	r2, r2, #1
 81052e6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	681a      	ldr	r2, [r3, #0]
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	f022 0202 	bic.w	r2, r2, #2
 81052f8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 81052fa:	687b      	ldr	r3, [r7, #4]
 81052fc:	2210      	movs	r2, #16
 81052fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8105302:	2300      	movs	r3, #0
 8105304:	e000      	b.n	8105308 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8105306:	2301      	movs	r3, #1
  }
}
 8105308:	4618      	mov	r0, r3
 810530a:	370c      	adds	r7, #12
 810530c:	46bd      	mov	sp, r7
 810530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105312:	4770      	bx	lr

08105314 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8105314:	b580      	push	{r7, lr}
 8105316:	b086      	sub	sp, #24
 8105318:	af00      	add	r7, sp, #0
 810531a:	60f8      	str	r0, [r7, #12]
 810531c:	60b9      	str	r1, [r7, #8]
 810531e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8105320:	68bb      	ldr	r3, [r7, #8]
 8105322:	2b00      	cmp	r3, #0
 8105324:	d109      	bne.n	810533a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8105326:	68fb      	ldr	r3, [r7, #12]
 8105328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810532c:	f043 0201 	orr.w	r2, r3, #1
 8105330:	68fb      	ldr	r3, [r7, #12]
 8105332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8105336:	2301      	movs	r3, #1
 8105338:	e07f      	b.n	810543a <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810533a:	68fb      	ldr	r3, [r7, #12]
 810533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105340:	2b23      	cmp	r3, #35	@ 0x23
 8105342:	d179      	bne.n	8105438 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8105344:	2200      	movs	r2, #0
 8105346:	68b9      	ldr	r1, [r7, #8]
 8105348:	68f8      	ldr	r0, [r7, #12]
 810534a:	f000 ff7c 	bl	8106246 <ETH_Prepare_Tx_Descriptors>
 810534e:	4603      	mov	r3, r0
 8105350:	2b00      	cmp	r3, #0
 8105352:	d009      	beq.n	8105368 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8105354:	68fb      	ldr	r3, [r7, #12]
 8105356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810535a:	f043 0202 	orr.w	r2, r3, #2
 810535e:	68fb      	ldr	r3, [r7, #12]
 8105360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8105364:	2301      	movs	r3, #1
 8105366:	e068      	b.n	810543a <HAL_ETH_Transmit+0x126>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8105368:	f3bf 8f4f 	dsb	sy
}
 810536c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 810536e:	68fb      	ldr	r3, [r7, #12]
 8105370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8105372:	68fb      	ldr	r3, [r7, #12]
 8105374:	3206      	adds	r2, #6
 8105376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810537a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 810537c:	68fb      	ldr	r3, [r7, #12]
 810537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105380:	1c5a      	adds	r2, r3, #1
 8105382:	68fb      	ldr	r3, [r7, #12]
 8105384:	629a      	str	r2, [r3, #40]	@ 0x28
 8105386:	68fb      	ldr	r3, [r7, #12]
 8105388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810538a:	2b03      	cmp	r3, #3
 810538c:	d904      	bls.n	8105398 <HAL_ETH_Transmit+0x84>
 810538e:	68fb      	ldr	r3, [r7, #12]
 8105390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105392:	1f1a      	subs	r2, r3, #4
 8105394:	68fb      	ldr	r3, [r7, #12]
 8105396:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8105398:	68fb      	ldr	r3, [r7, #12]
 810539a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 810539c:	68fb      	ldr	r3, [r7, #12]
 810539e:	681a      	ldr	r2, [r3, #0]
 81053a0:	68fb      	ldr	r3, [r7, #12]
 81053a2:	3106      	adds	r1, #6
 81053a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 81053a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81053ac:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 81053b0:	f7ff fcde 	bl	8104d70 <HAL_GetTick>
 81053b4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 81053b6:	e039      	b.n	810542c <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 81053b8:	68fb      	ldr	r3, [r7, #12]
 81053ba:	681b      	ldr	r3, [r3, #0]
 81053bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81053c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 81053c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81053c8:	2b00      	cmp	r3, #0
 81053ca:	d012      	beq.n	81053f2 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 81053cc:	68fb      	ldr	r3, [r7, #12]
 81053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81053d2:	f043 0208 	orr.w	r2, r3, #8
 81053d6:	68fb      	ldr	r3, [r7, #12]
 81053d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 81053dc:	68fb      	ldr	r3, [r7, #12]
 81053de:	681b      	ldr	r3, [r3, #0]
 81053e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81053e4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 81053e8:	68fb      	ldr	r3, [r7, #12]
 81053ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 81053ee:	2301      	movs	r3, #1
 81053f0:	e023      	b.n	810543a <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81053f8:	d018      	beq.n	810542c <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81053fa:	f7ff fcb9 	bl	8104d70 <HAL_GetTick>
 81053fe:	4602      	mov	r2, r0
 8105400:	693b      	ldr	r3, [r7, #16]
 8105402:	1ad3      	subs	r3, r2, r3
 8105404:	687a      	ldr	r2, [r7, #4]
 8105406:	429a      	cmp	r2, r3
 8105408:	d302      	bcc.n	8105410 <HAL_ETH_Transmit+0xfc>
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	2b00      	cmp	r3, #0
 810540e:	d10d      	bne.n	810542c <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8105410:	68fb      	ldr	r3, [r7, #12]
 8105412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105416:	f043 0204 	orr.w	r2, r3, #4
 810541a:	68fb      	ldr	r3, [r7, #12]
 810541c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8105420:	697b      	ldr	r3, [r7, #20]
 8105422:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8105426:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8105428:	2301      	movs	r3, #1
 810542a:	e006      	b.n	810543a <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 810542c:	697b      	ldr	r3, [r7, #20]
 810542e:	68db      	ldr	r3, [r3, #12]
 8105430:	2b00      	cmp	r3, #0
 8105432:	dbc1      	blt.n	81053b8 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8105434:	2300      	movs	r3, #0
 8105436:	e000      	b.n	810543a <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8105438:	2301      	movs	r3, #1
  }
}
 810543a:	4618      	mov	r0, r3
 810543c:	3718      	adds	r7, #24
 810543e:	46bd      	mov	sp, r7
 8105440:	bd80      	pop	{r7, pc}

08105442 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8105442:	b580      	push	{r7, lr}
 8105444:	b088      	sub	sp, #32
 8105446:	af00      	add	r7, sp, #0
 8105448:	6078      	str	r0, [r7, #4]
 810544a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 810544c:	2300      	movs	r3, #0
 810544e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8105450:	2300      	movs	r3, #0
 8105452:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8105454:	683b      	ldr	r3, [r7, #0]
 8105456:	2b00      	cmp	r3, #0
 8105458:	d109      	bne.n	810546e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105460:	f043 0201 	orr.w	r2, r3, #1
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 810546a:	2301      	movs	r3, #1
 810546c:	e0a5      	b.n	81055ba <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105474:	2b23      	cmp	r3, #35	@ 0x23
 8105476:	d001      	beq.n	810547c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8105478:	2301      	movs	r3, #1
 810547a:	e09e      	b.n	81055ba <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105480:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	69fa      	ldr	r2, [r7, #28]
 8105486:	3212      	adds	r2, #18
 8105488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810548c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105492:	f1c3 0304 	rsb	r3, r3, #4
 8105496:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8105498:	e067      	b.n	810556a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 810549a:	69bb      	ldr	r3, [r7, #24]
 810549c:	68db      	ldr	r3, [r3, #12]
 810549e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81054a2:	2b00      	cmp	r3, #0
 81054a4:	d007      	beq.n	81054b6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 81054a6:	69bb      	ldr	r3, [r7, #24]
 81054a8:	685a      	ldr	r2, [r3, #4]
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 81054ae:	69bb      	ldr	r3, [r7, #24]
 81054b0:	681a      	ldr	r2, [r3, #0]
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 81054b6:	69bb      	ldr	r3, [r7, #24]
 81054b8:	68db      	ldr	r3, [r3, #12]
 81054ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81054be:	2b00      	cmp	r3, #0
 81054c0:	d103      	bne.n	81054ca <HAL_ETH_ReadData+0x88>
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81054c6:	2b00      	cmp	r3, #0
 81054c8:	d03d      	beq.n	8105546 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 81054ca:	69bb      	ldr	r3, [r7, #24]
 81054cc:	68db      	ldr	r3, [r3, #12]
 81054ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81054d2:	2b00      	cmp	r3, #0
 81054d4:	d005      	beq.n	81054e2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	2200      	movs	r2, #0
 81054da:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	2200      	movs	r2, #0
 81054e0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	695b      	ldr	r3, [r3, #20]
 81054e6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 81054e8:	69bb      	ldr	r3, [r7, #24]
 81054ea:	68db      	ldr	r3, [r3, #12]
 81054ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81054f0:	2b00      	cmp	r3, #0
 81054f2:	d00d      	beq.n	8105510 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 81054f4:	69bb      	ldr	r3, [r7, #24]
 81054f6:	68db      	ldr	r3, [r3, #12]
 81054f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105500:	1ad3      	subs	r3, r2, r3
 8105502:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8105504:	69bb      	ldr	r3, [r7, #24]
 8105506:	68da      	ldr	r2, [r3, #12]
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 810550c:	2301      	movs	r3, #1
 810550e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 810551c:	69bb      	ldr	r3, [r7, #24]
 810551e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8105520:	461a      	mov	r2, r3
 8105522:	693b      	ldr	r3, [r7, #16]
 8105524:	b29b      	uxth	r3, r3
 8105526:	f7ff f995 	bl	8104854 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810552e:	1c5a      	adds	r2, r3, #1
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8105538:	693b      	ldr	r3, [r7, #16]
 810553a:	441a      	add	r2, r3
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8105540:	69bb      	ldr	r3, [r7, #24]
 8105542:	2200      	movs	r2, #0
 8105544:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8105546:	69fb      	ldr	r3, [r7, #28]
 8105548:	3301      	adds	r3, #1
 810554a:	61fb      	str	r3, [r7, #28]
 810554c:	69fb      	ldr	r3, [r7, #28]
 810554e:	2b03      	cmp	r3, #3
 8105550:	d902      	bls.n	8105558 <HAL_ETH_ReadData+0x116>
 8105552:	69fb      	ldr	r3, [r7, #28]
 8105554:	3b04      	subs	r3, #4
 8105556:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8105558:	687b      	ldr	r3, [r7, #4]
 810555a:	69fa      	ldr	r2, [r7, #28]
 810555c:	3212      	adds	r2, #18
 810555e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105562:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8105564:	697b      	ldr	r3, [r7, #20]
 8105566:	3301      	adds	r3, #1
 8105568:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 810556a:	69bb      	ldr	r3, [r7, #24]
 810556c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 810556e:	2b00      	cmp	r3, #0
 8105570:	db06      	blt.n	8105580 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8105572:	697a      	ldr	r2, [r7, #20]
 8105574:	68bb      	ldr	r3, [r7, #8]
 8105576:	429a      	cmp	r2, r3
 8105578:	d202      	bcs.n	8105580 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 810557a:	7bfb      	ldrb	r3, [r7, #15]
 810557c:	2b00      	cmp	r3, #0
 810557e:	d08c      	beq.n	810549a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8105584:	697b      	ldr	r3, [r7, #20]
 8105586:	441a      	add	r2, r3
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105590:	2b00      	cmp	r3, #0
 8105592:	d002      	beq.n	810559a <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8105594:	6878      	ldr	r0, [r7, #4]
 8105596:	f000 f814 	bl	81055c2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	69fa      	ldr	r2, [r7, #28]
 810559e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 81055a0:	7bfb      	ldrb	r3, [r7, #15]
 81055a2:	2b01      	cmp	r3, #1
 81055a4:	d108      	bne.n	81055b8 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 81055aa:	683b      	ldr	r3, [r7, #0]
 81055ac:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	2200      	movs	r2, #0
 81055b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 81055b4:	2300      	movs	r3, #0
 81055b6:	e000      	b.n	81055ba <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 81055b8:	2301      	movs	r3, #1
}
 81055ba:	4618      	mov	r0, r3
 81055bc:	3720      	adds	r7, #32
 81055be:	46bd      	mov	sp, r7
 81055c0:	bd80      	pop	{r7, pc}

081055c2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 81055c2:	b580      	push	{r7, lr}
 81055c4:	b088      	sub	sp, #32
 81055c6:	af00      	add	r7, sp, #0
 81055c8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 81055ca:	2300      	movs	r3, #0
 81055cc:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 81055ce:	2301      	movs	r3, #1
 81055d0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81055d6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	69fa      	ldr	r2, [r7, #28]
 81055dc:	3212      	adds	r2, #18
 81055de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81055e2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81055e8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 81055ea:	e03b      	b.n	8105664 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 81055ec:	697b      	ldr	r3, [r7, #20]
 81055ee:	691b      	ldr	r3, [r3, #16]
 81055f0:	2b00      	cmp	r3, #0
 81055f2:	d112      	bne.n	810561a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 81055f4:	f107 030c 	add.w	r3, r7, #12
 81055f8:	4618      	mov	r0, r3
 81055fa:	f7ff f8fb 	bl	81047f4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 81055fe:	68fb      	ldr	r3, [r7, #12]
 8105600:	2b00      	cmp	r3, #0
 8105602:	d102      	bne.n	810560a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8105604:	2300      	movs	r3, #0
 8105606:	74fb      	strb	r3, [r7, #19]
 8105608:	e007      	b.n	810561a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 810560a:	68fb      	ldr	r3, [r7, #12]
 810560c:	461a      	mov	r2, r3
 810560e:	697b      	ldr	r3, [r7, #20]
 8105610:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8105612:	68fb      	ldr	r3, [r7, #12]
 8105614:	461a      	mov	r2, r3
 8105616:	697b      	ldr	r3, [r7, #20]
 8105618:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 810561a:	7cfb      	ldrb	r3, [r7, #19]
 810561c:	2b00      	cmp	r3, #0
 810561e:	d021      	beq.n	8105664 <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8105620:	f3bf 8f5f 	dmb	sy
}
 8105624:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810562a:	2b00      	cmp	r3, #0
 810562c:	d004      	beq.n	8105638 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 810562e:	697b      	ldr	r3, [r7, #20]
 8105630:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8105634:	60da      	str	r2, [r3, #12]
 8105636:	e003      	b.n	8105640 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8105638:	697b      	ldr	r3, [r7, #20]
 810563a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 810563e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8105640:	69fb      	ldr	r3, [r7, #28]
 8105642:	3301      	adds	r3, #1
 8105644:	61fb      	str	r3, [r7, #28]
 8105646:	69fb      	ldr	r3, [r7, #28]
 8105648:	2b03      	cmp	r3, #3
 810564a:	d902      	bls.n	8105652 <ETH_UpdateDescriptor+0x90>
 810564c:	69fb      	ldr	r3, [r7, #28]
 810564e:	3b04      	subs	r3, #4
 8105650:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	69fa      	ldr	r2, [r7, #28]
 8105656:	3212      	adds	r2, #18
 8105658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810565c:	617b      	str	r3, [r7, #20]
      desccount--;
 810565e:	69bb      	ldr	r3, [r7, #24]
 8105660:	3b01      	subs	r3, #1
 8105662:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8105664:	69bb      	ldr	r3, [r7, #24]
 8105666:	2b00      	cmp	r3, #0
 8105668:	d002      	beq.n	8105670 <ETH_UpdateDescriptor+0xae>
 810566a:	7cfb      	ldrb	r3, [r7, #19]
 810566c:	2b00      	cmp	r3, #0
 810566e:	d1bd      	bne.n	81055ec <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8105670:	687b      	ldr	r3, [r7, #4]
 8105672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105674:	69ba      	ldr	r2, [r7, #24]
 8105676:	429a      	cmp	r2, r3
 8105678:	d00d      	beq.n	8105696 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105682:	461a      	mov	r2, r3
 8105684:	2300      	movs	r3, #0
 8105686:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	69fa      	ldr	r2, [r7, #28]
 810568e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	69ba      	ldr	r2, [r7, #24]
 8105694:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8105696:	bf00      	nop
 8105698:	3720      	adds	r7, #32
 810569a:	46bd      	mov	sp, r7
 810569c:	bd80      	pop	{r7, pc}

0810569e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 810569e:	b580      	push	{r7, lr}
 81056a0:	b086      	sub	sp, #24
 81056a2:	af00      	add	r7, sp, #0
 81056a4:	60f8      	str	r0, [r7, #12]
 81056a6:	60b9      	str	r1, [r7, #8]
 81056a8:	607a      	str	r2, [r7, #4]
 81056aa:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 81056ac:	68fb      	ldr	r3, [r7, #12]
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81056b4:	f003 0301 	and.w	r3, r3, #1
 81056b8:	2b00      	cmp	r3, #0
 81056ba:	d001      	beq.n	81056c0 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 81056bc:	2301      	movs	r3, #1
 81056be:	e03e      	b.n	810573e <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 81056c0:	68fb      	ldr	r3, [r7, #12]
 81056c2:	681b      	ldr	r3, [r3, #0]
 81056c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81056c8:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 81056ca:	697b      	ldr	r3, [r7, #20]
 81056cc:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 81056d0:	68bb      	ldr	r3, [r7, #8]
 81056d2:	055b      	lsls	r3, r3, #21
 81056d4:	4313      	orrs	r3, r2
 81056d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 81056d8:	697b      	ldr	r3, [r7, #20]
 81056da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	041b      	lsls	r3, r3, #16
 81056e2:	4313      	orrs	r3, r2
 81056e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 81056e6:	697b      	ldr	r3, [r7, #20]
 81056e8:	f043 030c 	orr.w	r3, r3, #12
 81056ec:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 81056ee:	697b      	ldr	r3, [r7, #20]
 81056f0:	f043 0301 	orr.w	r3, r3, #1
 81056f4:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 81056f6:	68fb      	ldr	r3, [r7, #12]
 81056f8:	681b      	ldr	r3, [r3, #0]
 81056fa:	697a      	ldr	r2, [r7, #20]
 81056fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8105700:	f7ff fb36 	bl	8104d70 <HAL_GetTick>
 8105704:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8105706:	e009      	b.n	810571c <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8105708:	f7ff fb32 	bl	8104d70 <HAL_GetTick>
 810570c:	4602      	mov	r2, r0
 810570e:	693b      	ldr	r3, [r7, #16]
 8105710:	1ad3      	subs	r3, r2, r3
 8105712:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105716:	d901      	bls.n	810571c <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8105718:	2301      	movs	r3, #1
 810571a:	e010      	b.n	810573e <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810571c:	68fb      	ldr	r3, [r7, #12]
 810571e:	681b      	ldr	r3, [r3, #0]
 8105720:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105724:	f003 0301 	and.w	r3, r3, #1
 8105728:	2b00      	cmp	r3, #0
 810572a:	d1ed      	bne.n	8105708 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8105734:	b29b      	uxth	r3, r3
 8105736:	461a      	mov	r2, r3
 8105738:	683b      	ldr	r3, [r7, #0]
 810573a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810573c:	2300      	movs	r3, #0
}
 810573e:	4618      	mov	r0, r3
 8105740:	3718      	adds	r7, #24
 8105742:	46bd      	mov	sp, r7
 8105744:	bd80      	pop	{r7, pc}
	...

08105748 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8105748:	b580      	push	{r7, lr}
 810574a:	b086      	sub	sp, #24
 810574c:	af00      	add	r7, sp, #0
 810574e:	60f8      	str	r0, [r7, #12]
 8105750:	60b9      	str	r1, [r7, #8]
 8105752:	607a      	str	r2, [r7, #4]
 8105754:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8105756:	68fb      	ldr	r3, [r7, #12]
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810575e:	f003 0301 	and.w	r3, r3, #1
 8105762:	2b00      	cmp	r3, #0
 8105764:	d001      	beq.n	810576a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8105766:	2301      	movs	r3, #1
 8105768:	e03c      	b.n	81057e4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810576a:	68fb      	ldr	r3, [r7, #12]
 810576c:	681b      	ldr	r3, [r3, #0]
 810576e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105772:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8105774:	697b      	ldr	r3, [r7, #20]
 8105776:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810577a:	68bb      	ldr	r3, [r7, #8]
 810577c:	055b      	lsls	r3, r3, #21
 810577e:	4313      	orrs	r3, r2
 8105780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8105782:	697b      	ldr	r3, [r7, #20]
 8105784:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	041b      	lsls	r3, r3, #16
 810578c:	4313      	orrs	r3, r2
 810578e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8105790:	697b      	ldr	r3, [r7, #20]
 8105792:	f023 030c 	bic.w	r3, r3, #12
 8105796:	f043 0304 	orr.w	r3, r3, #4
 810579a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810579c:	697b      	ldr	r3, [r7, #20]
 810579e:	f043 0301 	orr.w	r3, r3, #1
 81057a2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 81057a4:	683b      	ldr	r3, [r7, #0]
 81057a6:	b29a      	uxth	r2, r3
 81057a8:	4b10      	ldr	r3, [pc, #64]	@ (81057ec <HAL_ETH_WritePHYRegister+0xa4>)
 81057aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 81057ae:	4a0f      	ldr	r2, [pc, #60]	@ (81057ec <HAL_ETH_WritePHYRegister+0xa4>)
 81057b0:	697b      	ldr	r3, [r7, #20]
 81057b2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 81057b6:	f7ff fadb 	bl	8104d70 <HAL_GetTick>
 81057ba:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 81057bc:	e009      	b.n	81057d2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 81057be:	f7ff fad7 	bl	8104d70 <HAL_GetTick>
 81057c2:	4602      	mov	r2, r0
 81057c4:	693b      	ldr	r3, [r7, #16]
 81057c6:	1ad3      	subs	r3, r2, r3
 81057c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 81057cc:	d901      	bls.n	81057d2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 81057ce:	2301      	movs	r3, #1
 81057d0:	e008      	b.n	81057e4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 81057d2:	68fb      	ldr	r3, [r7, #12]
 81057d4:	681b      	ldr	r3, [r3, #0]
 81057d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81057da:	f003 0301 	and.w	r3, r3, #1
 81057de:	2b00      	cmp	r3, #0
 81057e0:	d1ed      	bne.n	81057be <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 81057e2:	2300      	movs	r3, #0
}
 81057e4:	4618      	mov	r0, r3
 81057e6:	3718      	adds	r7, #24
 81057e8:	46bd      	mov	sp, r7
 81057ea:	bd80      	pop	{r7, pc}
 81057ec:	40028000 	.word	0x40028000

081057f0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 81057f0:	b480      	push	{r7}
 81057f2:	b083      	sub	sp, #12
 81057f4:	af00      	add	r7, sp, #0
 81057f6:	6078      	str	r0, [r7, #4]
 81057f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 81057fa:	683b      	ldr	r3, [r7, #0]
 81057fc:	2b00      	cmp	r3, #0
 81057fe:	d101      	bne.n	8105804 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8105800:	2301      	movs	r3, #1
 8105802:	e1c3      	b.n	8105b8c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	681b      	ldr	r3, [r3, #0]
 810580a:	f003 020c 	and.w	r2, r3, #12
 810580e:	683b      	ldr	r3, [r7, #0]
 8105810:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	681b      	ldr	r3, [r3, #0]
 8105816:	681b      	ldr	r3, [r3, #0]
 8105818:	f003 0310 	and.w	r3, r3, #16
 810581c:	2b00      	cmp	r3, #0
 810581e:	bf14      	ite	ne
 8105820:	2301      	movne	r3, #1
 8105822:	2300      	moveq	r3, #0
 8105824:	b2db      	uxtb	r3, r3
 8105826:	461a      	mov	r2, r3
 8105828:	683b      	ldr	r3, [r7, #0]
 810582a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 810582e:	687b      	ldr	r3, [r7, #4]
 8105830:	681b      	ldr	r3, [r3, #0]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8105838:	683b      	ldr	r3, [r7, #0]
 810583a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	681b      	ldr	r3, [r3, #0]
 8105840:	681b      	ldr	r3, [r3, #0]
 8105842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105846:	2b00      	cmp	r3, #0
 8105848:	bf0c      	ite	eq
 810584a:	2301      	moveq	r3, #1
 810584c:	2300      	movne	r3, #0
 810584e:	b2db      	uxtb	r3, r3
 8105850:	461a      	mov	r2, r3
 8105852:	683b      	ldr	r3, [r7, #0]
 8105854:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8105862:	2b00      	cmp	r3, #0
 8105864:	bf14      	ite	ne
 8105866:	2301      	movne	r3, #1
 8105868:	2300      	moveq	r3, #0
 810586a:	b2db      	uxtb	r3, r3
 810586c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810586e:	683b      	ldr	r3, [r7, #0]
 8105870:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8105872:	687b      	ldr	r3, [r7, #4]
 8105874:	681b      	ldr	r3, [r3, #0]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810587c:	2b00      	cmp	r3, #0
 810587e:	bf0c      	ite	eq
 8105880:	2301      	moveq	r3, #1
 8105882:	2300      	movne	r3, #0
 8105884:	b2db      	uxtb	r3, r3
 8105886:	461a      	mov	r2, r3
 8105888:	683b      	ldr	r3, [r7, #0]
 810588a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	681b      	ldr	r3, [r3, #0]
 8105890:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8105892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8105896:	2b00      	cmp	r3, #0
 8105898:	bf14      	ite	ne
 810589a:	2301      	movne	r3, #1
 810589c:	2300      	moveq	r3, #0
 810589e:	b2db      	uxtb	r3, r3
 81058a0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 81058a2:	683b      	ldr	r3, [r7, #0]
 81058a4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81058b0:	2b00      	cmp	r3, #0
 81058b2:	bf14      	ite	ne
 81058b4:	2301      	movne	r3, #1
 81058b6:	2300      	moveq	r3, #0
 81058b8:	b2db      	uxtb	r3, r3
 81058ba:	461a      	mov	r2, r3
 81058bc:	683b      	ldr	r3, [r7, #0]
 81058be:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	681b      	ldr	r3, [r3, #0]
 81058c4:	681b      	ldr	r3, [r3, #0]
 81058c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 81058ca:	683b      	ldr	r3, [r7, #0]
 81058cc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	681b      	ldr	r3, [r3, #0]
 81058d2:	681b      	ldr	r3, [r3, #0]
 81058d4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 81058d8:	683b      	ldr	r3, [r7, #0]
 81058da:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	681b      	ldr	r3, [r3, #0]
 81058e0:	681b      	ldr	r3, [r3, #0]
 81058e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81058e6:	2b00      	cmp	r3, #0
 81058e8:	bf14      	ite	ne
 81058ea:	2301      	movne	r3, #1
 81058ec:	2300      	moveq	r3, #0
 81058ee:	b2db      	uxtb	r3, r3
 81058f0:	461a      	mov	r2, r3
 81058f2:	683b      	ldr	r3, [r7, #0]
 81058f4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	681b      	ldr	r3, [r3, #0]
 81058fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105900:	2b00      	cmp	r3, #0
 8105902:	bf0c      	ite	eq
 8105904:	2301      	moveq	r3, #1
 8105906:	2300      	movne	r3, #0
 8105908:	b2db      	uxtb	r3, r3
 810590a:	461a      	mov	r2, r3
 810590c:	683b      	ldr	r3, [r7, #0]
 810590e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	681b      	ldr	r3, [r3, #0]
 8105916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810591a:	2b00      	cmp	r3, #0
 810591c:	bf0c      	ite	eq
 810591e:	2301      	moveq	r3, #1
 8105920:	2300      	movne	r3, #0
 8105922:	b2db      	uxtb	r3, r3
 8105924:	461a      	mov	r2, r3
 8105926:	683b      	ldr	r3, [r7, #0]
 8105928:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	681b      	ldr	r3, [r3, #0]
 8105930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105934:	2b00      	cmp	r3, #0
 8105936:	bf14      	ite	ne
 8105938:	2301      	movne	r3, #1
 810593a:	2300      	moveq	r3, #0
 810593c:	b2db      	uxtb	r3, r3
 810593e:	461a      	mov	r2, r3
 8105940:	683b      	ldr	r3, [r7, #0]
 8105942:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	681b      	ldr	r3, [r3, #0]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810594e:	2b00      	cmp	r3, #0
 8105950:	bf14      	ite	ne
 8105952:	2301      	movne	r3, #1
 8105954:	2300      	moveq	r3, #0
 8105956:	b2db      	uxtb	r3, r3
 8105958:	461a      	mov	r2, r3
 810595a:	683b      	ldr	r3, [r7, #0]
 810595c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 810595e:	687b      	ldr	r3, [r7, #4]
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105968:	2b00      	cmp	r3, #0
 810596a:	bf14      	ite	ne
 810596c:	2301      	movne	r3, #1
 810596e:	2300      	moveq	r3, #0
 8105970:	b2db      	uxtb	r3, r3
 8105972:	461a      	mov	r2, r3
 8105974:	683b      	ldr	r3, [r7, #0]
 8105976:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 810597e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105982:	2b00      	cmp	r3, #0
 8105984:	bf14      	ite	ne
 8105986:	2301      	movne	r3, #1
 8105988:	2300      	moveq	r3, #0
 810598a:	b2db      	uxtb	r3, r3
 810598c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810598e:	683b      	ldr	r3, [r7, #0]
 8105990:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	681b      	ldr	r3, [r3, #0]
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 810599c:	683b      	ldr	r3, [r7, #0]
 810599e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	681b      	ldr	r3, [r3, #0]
 81059a4:	681b      	ldr	r3, [r3, #0]
 81059a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81059aa:	2b00      	cmp	r3, #0
 81059ac:	bf14      	ite	ne
 81059ae:	2301      	movne	r3, #1
 81059b0:	2300      	moveq	r3, #0
 81059b2:	b2db      	uxtb	r3, r3
 81059b4:	461a      	mov	r2, r3
 81059b6:	683b      	ldr	r3, [r7, #0]
 81059b8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	681b      	ldr	r3, [r3, #0]
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 81059c4:	683b      	ldr	r3, [r7, #0]
 81059c6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	685b      	ldr	r3, [r3, #4]
 81059ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 81059d2:	683b      	ldr	r3, [r7, #0]
 81059d4:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 81059d6:	687b      	ldr	r3, [r7, #4]
 81059d8:	681b      	ldr	r3, [r3, #0]
 81059da:	685b      	ldr	r3, [r3, #4]
 81059dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81059e0:	2b00      	cmp	r3, #0
 81059e2:	bf0c      	ite	eq
 81059e4:	2301      	moveq	r3, #1
 81059e6:	2300      	movne	r3, #0
 81059e8:	b2db      	uxtb	r3, r3
 81059ea:	461a      	mov	r2, r3
 81059ec:	683b      	ldr	r3, [r7, #0]
 81059ee:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	681b      	ldr	r3, [r3, #0]
 81059f6:	685b      	ldr	r3, [r3, #4]
 81059f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81059fc:	2b00      	cmp	r3, #0
 81059fe:	bf14      	ite	ne
 8105a00:	2301      	movne	r3, #1
 8105a02:	2300      	moveq	r3, #0
 8105a04:	b2db      	uxtb	r3, r3
 8105a06:	461a      	mov	r2, r3
 8105a08:	683b      	ldr	r3, [r7, #0]
 8105a0a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8105a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105a18:	2b00      	cmp	r3, #0
 8105a1a:	bf14      	ite	ne
 8105a1c:	2301      	movne	r3, #1
 8105a1e:	2300      	moveq	r3, #0
 8105a20:	b2db      	uxtb	r3, r3
 8105a22:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8105a24:	683b      	ldr	r3, [r7, #0]
 8105a26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	681b      	ldr	r3, [r3, #0]
 8105a2e:	685b      	ldr	r3, [r3, #4]
 8105a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8105a34:	2b00      	cmp	r3, #0
 8105a36:	bf14      	ite	ne
 8105a38:	2301      	movne	r3, #1
 8105a3a:	2300      	moveq	r3, #0
 8105a3c:	b2db      	uxtb	r3, r3
 8105a3e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8105a40:	683b      	ldr	r3, [r7, #0]
 8105a42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8105a46:	687b      	ldr	r3, [r7, #4]
 8105a48:	681b      	ldr	r3, [r3, #0]
 8105a4a:	685b      	ldr	r3, [r3, #4]
 8105a4c:	0e5b      	lsrs	r3, r3, #25
 8105a4e:	f003 021f 	and.w	r2, r3, #31
 8105a52:	683b      	ldr	r3, [r7, #0]
 8105a54:	63da      	str	r2, [r3, #60]	@ 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	68db      	ldr	r3, [r3, #12]
 8105a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105a60:	2b00      	cmp	r3, #0
 8105a62:	bf14      	ite	ne
 8105a64:	2301      	movne	r3, #1
 8105a66:	2300      	moveq	r3, #0
 8105a68:	b2db      	uxtb	r3, r3
 8105a6a:	461a      	mov	r2, r3
 8105a6c:	683b      	ldr	r3, [r7, #0]
 8105a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	681b      	ldr	r3, [r3, #0]
 8105a76:	68db      	ldr	r3, [r3, #12]
 8105a78:	f003 020f 	and.w	r2, r3, #15
 8105a7c:	683b      	ldr	r3, [r7, #0]
 8105a7e:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105a86:	f003 0302 	and.w	r3, r3, #2
 8105a8a:	2b00      	cmp	r3, #0
 8105a8c:	bf14      	ite	ne
 8105a8e:	2301      	movne	r3, #1
 8105a90:	2300      	moveq	r3, #0
 8105a92:	b2db      	uxtb	r3, r3
 8105a94:	461a      	mov	r2, r3
 8105a96:	683b      	ldr	r3, [r7, #0]
 8105a98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681b      	ldr	r3, [r3, #0]
 8105aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	bf0c      	ite	eq
 8105aaa:	2301      	moveq	r3, #1
 8105aac:	2300      	movne	r3, #0
 8105aae:	b2db      	uxtb	r3, r3
 8105ab0:	461a      	mov	r2, r3
 8105ab2:	683b      	ldr	r3, [r7, #0]
 8105ab4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105abe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105ac2:	683b      	ldr	r3, [r7, #0]
 8105ac4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105acc:	0c1b      	lsrs	r3, r3, #16
 8105ace:	b29a      	uxth	r2, r3
 8105ad0:	683b      	ldr	r3, [r7, #0]
 8105ad2:	649a      	str	r2, [r3, #72]	@ 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	681b      	ldr	r3, [r3, #0]
 8105ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105adc:	f003 0301 	and.w	r3, r3, #1
 8105ae0:	2b00      	cmp	r3, #0
 8105ae2:	bf14      	ite	ne
 8105ae4:	2301      	movne	r3, #1
 8105ae6:	2300      	moveq	r3, #0
 8105ae8:	b2db      	uxtb	r3, r3
 8105aea:	461a      	mov	r2, r3
 8105aec:	683b      	ldr	r3, [r7, #0]
 8105aee:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	681b      	ldr	r3, [r3, #0]
 8105af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105afa:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8105afe:	2b00      	cmp	r3, #0
 8105b00:	bf14      	ite	ne
 8105b02:	2301      	movne	r3, #1
 8105b04:	2300      	moveq	r3, #0
 8105b06:	b2db      	uxtb	r3, r3
 8105b08:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8105b0a:	683b      	ldr	r3, [r7, #0]
 8105b0c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	681b      	ldr	r3, [r3, #0]
 8105b14:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8105b18:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8105b1c:	683b      	ldr	r3, [r7, #0]
 8105b1e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105b28:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8105b2c:	683b      	ldr	r3, [r7, #0]
 8105b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	681b      	ldr	r3, [r3, #0]
 8105b34:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8105b38:	f003 0308 	and.w	r3, r3, #8
 8105b3c:	2b00      	cmp	r3, #0
 8105b3e:	bf14      	ite	ne
 8105b40:	2301      	movne	r3, #1
 8105b42:	2300      	moveq	r3, #0
 8105b44:	b2db      	uxtb	r3, r3
 8105b46:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8105b48:	683b      	ldr	r3, [r7, #0]
 8105b4a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	681b      	ldr	r3, [r3, #0]
 8105b52:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105b56:	f003 0310 	and.w	r3, r3, #16
 8105b5a:	2b00      	cmp	r3, #0
 8105b5c:	bf14      	ite	ne
 8105b5e:	2301      	movne	r3, #1
 8105b60:	2300      	moveq	r3, #0
 8105b62:	b2db      	uxtb	r3, r3
 8105b64:	461a      	mov	r2, r3
 8105b66:	683b      	ldr	r3, [r7, #0]
 8105b68:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8105b6c:	687b      	ldr	r3, [r7, #4]
 8105b6e:	681b      	ldr	r3, [r3, #0]
 8105b70:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8105b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105b78:	2b00      	cmp	r3, #0
 8105b7a:	bf0c      	ite	eq
 8105b7c:	2301      	moveq	r3, #1
 8105b7e:	2300      	movne	r3, #0
 8105b80:	b2db      	uxtb	r3, r3
 8105b82:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8105b84:	683b      	ldr	r3, [r7, #0]
 8105b86:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8105b8a:	2300      	movs	r3, #0
}
 8105b8c:	4618      	mov	r0, r3
 8105b8e:	370c      	adds	r7, #12
 8105b90:	46bd      	mov	sp, r7
 8105b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b96:	4770      	bx	lr

08105b98 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8105b98:	b580      	push	{r7, lr}
 8105b9a:	b082      	sub	sp, #8
 8105b9c:	af00      	add	r7, sp, #0
 8105b9e:	6078      	str	r0, [r7, #4]
 8105ba0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8105ba2:	683b      	ldr	r3, [r7, #0]
 8105ba4:	2b00      	cmp	r3, #0
 8105ba6:	d101      	bne.n	8105bac <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8105ba8:	2301      	movs	r3, #1
 8105baa:	e00b      	b.n	8105bc4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105bb2:	2b10      	cmp	r3, #16
 8105bb4:	d105      	bne.n	8105bc2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8105bb6:	6839      	ldr	r1, [r7, #0]
 8105bb8:	6878      	ldr	r0, [r7, #4]
 8105bba:	f000 f85f 	bl	8105c7c <ETH_SetMACConfig>

    return HAL_OK;
 8105bbe:	2300      	movs	r3, #0
 8105bc0:	e000      	b.n	8105bc4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8105bc2:	2301      	movs	r3, #1
  }
}
 8105bc4:	4618      	mov	r0, r3
 8105bc6:	3708      	adds	r7, #8
 8105bc8:	46bd      	mov	sp, r7
 8105bca:	bd80      	pop	{r7, pc}

08105bcc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8105bcc:	b580      	push	{r7, lr}
 8105bce:	b084      	sub	sp, #16
 8105bd0:	af00      	add	r7, sp, #0
 8105bd2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105bdc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8105bde:	68fb      	ldr	r3, [r7, #12]
 8105be0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8105be4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8105be6:	f001 f97f 	bl	8106ee8 <HAL_RCC_GetHCLKFreq>
 8105bea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8105bec:	68bb      	ldr	r3, [r7, #8]
 8105bee:	4a1e      	ldr	r2, [pc, #120]	@ (8105c68 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8105bf0:	4293      	cmp	r3, r2
 8105bf2:	d908      	bls.n	8105c06 <HAL_ETH_SetMDIOClockRange+0x3a>
 8105bf4:	68bb      	ldr	r3, [r7, #8]
 8105bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8105c6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8105bf8:	4293      	cmp	r3, r2
 8105bfa:	d804      	bhi.n	8105c06 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8105bfc:	68fb      	ldr	r3, [r7, #12]
 8105bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8105c02:	60fb      	str	r3, [r7, #12]
 8105c04:	e027      	b.n	8105c56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8105c06:	68bb      	ldr	r3, [r7, #8]
 8105c08:	4a18      	ldr	r2, [pc, #96]	@ (8105c6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8105c0a:	4293      	cmp	r3, r2
 8105c0c:	d908      	bls.n	8105c20 <HAL_ETH_SetMDIOClockRange+0x54>
 8105c0e:	68bb      	ldr	r3, [r7, #8]
 8105c10:	4a17      	ldr	r2, [pc, #92]	@ (8105c70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8105c12:	4293      	cmp	r3, r2
 8105c14:	d204      	bcs.n	8105c20 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8105c1c:	60fb      	str	r3, [r7, #12]
 8105c1e:	e01a      	b.n	8105c56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8105c20:	68bb      	ldr	r3, [r7, #8]
 8105c22:	4a13      	ldr	r2, [pc, #76]	@ (8105c70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8105c24:	4293      	cmp	r3, r2
 8105c26:	d303      	bcc.n	8105c30 <HAL_ETH_SetMDIOClockRange+0x64>
 8105c28:	68bb      	ldr	r3, [r7, #8]
 8105c2a:	4a12      	ldr	r2, [pc, #72]	@ (8105c74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8105c2c:	4293      	cmp	r3, r2
 8105c2e:	d911      	bls.n	8105c54 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8105c30:	68bb      	ldr	r3, [r7, #8]
 8105c32:	4a10      	ldr	r2, [pc, #64]	@ (8105c74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8105c34:	4293      	cmp	r3, r2
 8105c36:	d908      	bls.n	8105c4a <HAL_ETH_SetMDIOClockRange+0x7e>
 8105c38:	68bb      	ldr	r3, [r7, #8]
 8105c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8105c78 <HAL_ETH_SetMDIOClockRange+0xac>)
 8105c3c:	4293      	cmp	r3, r2
 8105c3e:	d804      	bhi.n	8105c4a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8105c40:	68fb      	ldr	r3, [r7, #12]
 8105c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105c46:	60fb      	str	r3, [r7, #12]
 8105c48:	e005      	b.n	8105c56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8105c4a:	68fb      	ldr	r3, [r7, #12]
 8105c4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8105c50:	60fb      	str	r3, [r7, #12]
 8105c52:	e000      	b.n	8105c56 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8105c54:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8105c56:	687b      	ldr	r3, [r7, #4]
 8105c58:	681b      	ldr	r3, [r3, #0]
 8105c5a:	68fa      	ldr	r2, [r7, #12]
 8105c5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8105c60:	bf00      	nop
 8105c62:	3710      	adds	r7, #16
 8105c64:	46bd      	mov	sp, r7
 8105c66:	bd80      	pop	{r7, pc}
 8105c68:	01312cff 	.word	0x01312cff
 8105c6c:	02160ebf 	.word	0x02160ebf
 8105c70:	03938700 	.word	0x03938700
 8105c74:	05f5e0ff 	.word	0x05f5e0ff
 8105c78:	08f0d17f 	.word	0x08f0d17f

08105c7c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8105c7c:	b480      	push	{r7}
 8105c7e:	b085      	sub	sp, #20
 8105c80:	af00      	add	r7, sp, #0
 8105c82:	6078      	str	r0, [r7, #4]
 8105c84:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8105c86:	683b      	ldr	r3, [r7, #0]
 8105c88:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8105c8a:	683b      	ldr	r3, [r7, #0]
 8105c8c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8105c8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8105c90:	683b      	ldr	r3, [r7, #0]
 8105c92:	791b      	ldrb	r3, [r3, #4]
 8105c94:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8105c96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8105c98:	683b      	ldr	r3, [r7, #0]
 8105c9a:	7b1b      	ldrb	r3, [r3, #12]
 8105c9c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8105c9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8105ca0:	683b      	ldr	r3, [r7, #0]
 8105ca2:	7b5b      	ldrb	r3, [r3, #13]
 8105ca4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8105ca6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8105ca8:	683b      	ldr	r3, [r7, #0]
 8105caa:	7b9b      	ldrb	r3, [r3, #14]
 8105cac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8105cae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8105cb0:	683b      	ldr	r3, [r7, #0]
 8105cb2:	7bdb      	ldrb	r3, [r3, #15]
 8105cb4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8105cb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8105cb8:	683a      	ldr	r2, [r7, #0]
 8105cba:	7c12      	ldrb	r2, [r2, #16]
 8105cbc:	2a00      	cmp	r2, #0
 8105cbe:	d102      	bne.n	8105cc6 <ETH_SetMACConfig+0x4a>
 8105cc0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8105cc4:	e000      	b.n	8105cc8 <ETH_SetMACConfig+0x4c>
 8105cc6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8105cc8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8105cca:	683a      	ldr	r2, [r7, #0]
 8105ccc:	7c52      	ldrb	r2, [r2, #17]
 8105cce:	2a00      	cmp	r2, #0
 8105cd0:	d102      	bne.n	8105cd8 <ETH_SetMACConfig+0x5c>
 8105cd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8105cd6:	e000      	b.n	8105cda <ETH_SetMACConfig+0x5e>
 8105cd8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8105cda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8105cdc:	683b      	ldr	r3, [r7, #0]
 8105cde:	7c9b      	ldrb	r3, [r3, #18]
 8105ce0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8105ce2:	431a      	orrs	r2, r3
               macconf->Speed |
 8105ce4:	683b      	ldr	r3, [r7, #0]
 8105ce6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8105ce8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8105cea:	683b      	ldr	r3, [r7, #0]
 8105cec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8105cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8105cf0:	683b      	ldr	r3, [r7, #0]
 8105cf2:	7f1b      	ldrb	r3, [r3, #28]
 8105cf4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8105cf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8105cf8:	683b      	ldr	r3, [r7, #0]
 8105cfa:	7f5b      	ldrb	r3, [r3, #29]
 8105cfc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8105cfe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8105d00:	683a      	ldr	r2, [r7, #0]
 8105d02:	7f92      	ldrb	r2, [r2, #30]
 8105d04:	2a00      	cmp	r2, #0
 8105d06:	d102      	bne.n	8105d0e <ETH_SetMACConfig+0x92>
 8105d08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8105d0c:	e000      	b.n	8105d10 <ETH_SetMACConfig+0x94>
 8105d0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8105d10:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8105d12:	683b      	ldr	r3, [r7, #0]
 8105d14:	7fdb      	ldrb	r3, [r3, #31]
 8105d16:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8105d18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8105d1a:	683a      	ldr	r2, [r7, #0]
 8105d1c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8105d20:	2a00      	cmp	r2, #0
 8105d22:	d102      	bne.n	8105d2a <ETH_SetMACConfig+0xae>
 8105d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8105d28:	e000      	b.n	8105d2c <ETH_SetMACConfig+0xb0>
 8105d2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8105d2c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8105d2e:	683b      	ldr	r3, [r7, #0]
 8105d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8105d32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8105d34:	683b      	ldr	r3, [r7, #0]
 8105d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8105d3a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8105d3c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8105d3e:	683b      	ldr	r3, [r7, #0]
 8105d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8105d42:	4313      	orrs	r3, r2
 8105d44:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	681a      	ldr	r2, [r3, #0]
 8105d4c:	4b57      	ldr	r3, [pc, #348]	@ (8105eac <ETH_SetMACConfig+0x230>)
 8105d4e:	4013      	ands	r3, r2
 8105d50:	687a      	ldr	r2, [r7, #4]
 8105d52:	6812      	ldr	r2, [r2, #0]
 8105d54:	68f9      	ldr	r1, [r7, #12]
 8105d56:	430b      	orrs	r3, r1
 8105d58:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8105d5a:	683b      	ldr	r3, [r7, #0]
 8105d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105d5e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8105d60:	683b      	ldr	r3, [r7, #0]
 8105d62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8105d66:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8105d68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8105d6a:	683b      	ldr	r3, [r7, #0]
 8105d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8105d70:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8105d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8105d74:	683b      	ldr	r3, [r7, #0]
 8105d76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8105d7a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8105d7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8105d7e:	683a      	ldr	r2, [r7, #0]
 8105d80:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8105d84:	2a00      	cmp	r2, #0
 8105d86:	d102      	bne.n	8105d8e <ETH_SetMACConfig+0x112>
 8105d88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8105d8c:	e000      	b.n	8105d90 <ETH_SetMACConfig+0x114>
 8105d8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8105d90:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8105d92:	683b      	ldr	r3, [r7, #0]
 8105d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8105d96:	4313      	orrs	r3, r2
 8105d98:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	685a      	ldr	r2, [r3, #4]
 8105da0:	4b43      	ldr	r3, [pc, #268]	@ (8105eb0 <ETH_SetMACConfig+0x234>)
 8105da2:	4013      	ands	r3, r2
 8105da4:	687a      	ldr	r2, [r7, #4]
 8105da6:	6812      	ldr	r2, [r2, #0]
 8105da8:	68f9      	ldr	r1, [r7, #12]
 8105daa:	430b      	orrs	r3, r1
 8105dac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8105dae:	683b      	ldr	r3, [r7, #0]
 8105db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105db4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8105db6:	683b      	ldr	r3, [r7, #0]
 8105db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8105dba:	4313      	orrs	r3, r2
 8105dbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	68db      	ldr	r3, [r3, #12]
 8105dc4:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8105dc8:	f023 0301 	bic.w	r3, r3, #1
 8105dcc:	687a      	ldr	r2, [r7, #4]
 8105dce:	6812      	ldr	r2, [r2, #0]
 8105dd0:	68f9      	ldr	r1, [r7, #12]
 8105dd2:	430b      	orrs	r3, r1
 8105dd4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105dd6:	683b      	ldr	r3, [r7, #0]
 8105dd8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8105ddc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8105dde:	683b      	ldr	r3, [r7, #0]
 8105de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105de2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8105de4:	683a      	ldr	r2, [r7, #0]
 8105de6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8105dea:	2a00      	cmp	r2, #0
 8105dec:	d101      	bne.n	8105df2 <ETH_SetMACConfig+0x176>
 8105dee:	2280      	movs	r2, #128	@ 0x80
 8105df0:	e000      	b.n	8105df4 <ETH_SetMACConfig+0x178>
 8105df2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8105df4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8105df6:	683b      	ldr	r3, [r7, #0]
 8105df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105dfa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105dfc:	4313      	orrs	r3, r2
 8105dfe:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8105e00:	687b      	ldr	r3, [r7, #4]
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105e06:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8105e0a:	4013      	ands	r3, r2
 8105e0c:	687a      	ldr	r2, [r7, #4]
 8105e0e:	6812      	ldr	r2, [r2, #0]
 8105e10:	68f9      	ldr	r1, [r7, #12]
 8105e12:	430b      	orrs	r3, r1
 8105e14:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8105e16:	683b      	ldr	r3, [r7, #0]
 8105e18:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8105e1c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8105e1e:	683b      	ldr	r3, [r7, #0]
 8105e20:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8105e24:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8105e26:	4313      	orrs	r3, r2
 8105e28:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	681b      	ldr	r3, [r3, #0]
 8105e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105e32:	f023 0103 	bic.w	r1, r3, #3
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	68fa      	ldr	r2, [r7, #12]
 8105e3c:	430a      	orrs	r2, r1
 8105e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8105e4a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8105e4e:	683b      	ldr	r3, [r7, #0]
 8105e50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	681b      	ldr	r3, [r3, #0]
 8105e56:	430a      	orrs	r2, r1
 8105e58:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8105e5c:	683b      	ldr	r3, [r7, #0]
 8105e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8105e60:	683a      	ldr	r2, [r7, #0]
 8105e62:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8105e66:	2a00      	cmp	r2, #0
 8105e68:	d101      	bne.n	8105e6e <ETH_SetMACConfig+0x1f2>
 8105e6a:	2240      	movs	r2, #64	@ 0x40
 8105e6c:	e000      	b.n	8105e70 <ETH_SetMACConfig+0x1f4>
 8105e6e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8105e70:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8105e72:	683b      	ldr	r3, [r7, #0]
 8105e74:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8105e78:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8105e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8105e7c:	683b      	ldr	r3, [r7, #0]
 8105e7e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8105e82:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8105e84:	4313      	orrs	r3, r2
 8105e86:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	681b      	ldr	r3, [r3, #0]
 8105e8c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105e90:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	68fa      	ldr	r2, [r7, #12]
 8105e9a:	430a      	orrs	r2, r1
 8105e9c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8105ea0:	bf00      	nop
 8105ea2:	3714      	adds	r7, #20
 8105ea4:	46bd      	mov	sp, r7
 8105ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eaa:	4770      	bx	lr
 8105eac:	00048083 	.word	0x00048083
 8105eb0:	c0f88000 	.word	0xc0f88000

08105eb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8105eb4:	b480      	push	{r7}
 8105eb6:	b085      	sub	sp, #20
 8105eb8:	af00      	add	r7, sp, #0
 8105eba:	6078      	str	r0, [r7, #4]
 8105ebc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8105ecc:	f023 0302 	bic.w	r3, r3, #2
 8105ed0:	683a      	ldr	r2, [r7, #0]
 8105ed2:	6811      	ldr	r1, [r2, #0]
 8105ed4:	687a      	ldr	r2, [r7, #4]
 8105ed6:	6812      	ldr	r2, [r2, #0]
 8105ed8:	430b      	orrs	r3, r1
 8105eda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105ede:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105ee0:	683b      	ldr	r3, [r7, #0]
 8105ee2:	791b      	ldrb	r3, [r3, #4]
 8105ee4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8105ee6:	683b      	ldr	r3, [r7, #0]
 8105ee8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105eea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8105eec:	683b      	ldr	r3, [r7, #0]
 8105eee:	7b1b      	ldrb	r3, [r3, #12]
 8105ef0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105ef2:	4313      	orrs	r3, r2
 8105ef4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	681b      	ldr	r3, [r3, #0]
 8105efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105efe:	685b      	ldr	r3, [r3, #4]
 8105f00:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8105f04:	f023 0301 	bic.w	r3, r3, #1
 8105f08:	687a      	ldr	r2, [r7, #4]
 8105f0a:	6812      	ldr	r2, [r2, #0]
 8105f0c:	68f9      	ldr	r1, [r7, #12]
 8105f0e:	430b      	orrs	r3, r1
 8105f10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105f14:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105f16:	683b      	ldr	r3, [r7, #0]
 8105f18:	7b5b      	ldrb	r3, [r3, #13]
 8105f1a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8105f1c:	683b      	ldr	r3, [r7, #0]
 8105f1e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105f20:	4313      	orrs	r3, r2
 8105f22:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	681b      	ldr	r3, [r3, #0]
 8105f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105f2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8105f30:	4b21      	ldr	r3, [pc, #132]	@ (8105fb8 <ETH_SetDMAConfig+0x104>)
 8105f32:	4013      	ands	r3, r2
 8105f34:	687a      	ldr	r2, [r7, #4]
 8105f36:	6812      	ldr	r2, [r2, #0]
 8105f38:	68f9      	ldr	r1, [r7, #12]
 8105f3a:	430b      	orrs	r3, r1
 8105f3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105f40:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8105f44:	683b      	ldr	r3, [r7, #0]
 8105f46:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8105f48:	683b      	ldr	r3, [r7, #0]
 8105f4a:	7d1b      	ldrb	r3, [r3, #20]
 8105f4c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8105f4e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8105f50:	683b      	ldr	r3, [r7, #0]
 8105f52:	7f5b      	ldrb	r3, [r3, #29]
 8105f54:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8105f56:	4313      	orrs	r3, r2
 8105f58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	681b      	ldr	r3, [r3, #0]
 8105f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105f62:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8105f66:	4b15      	ldr	r3, [pc, #84]	@ (8105fbc <ETH_SetDMAConfig+0x108>)
 8105f68:	4013      	ands	r3, r2
 8105f6a:	687a      	ldr	r2, [r7, #4]
 8105f6c:	6812      	ldr	r2, [r2, #0]
 8105f6e:	68f9      	ldr	r1, [r7, #12]
 8105f70:	430b      	orrs	r3, r1
 8105f72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105f76:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8105f7a:	683b      	ldr	r3, [r7, #0]
 8105f7c:	7f1b      	ldrb	r3, [r3, #28]
 8105f7e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8105f80:	683b      	ldr	r3, [r7, #0]
 8105f82:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8105f84:	4313      	orrs	r3, r2
 8105f86:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105f90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8105f94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8105f98:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8105f9c:	687a      	ldr	r2, [r7, #4]
 8105f9e:	6812      	ldr	r2, [r2, #0]
 8105fa0:	68f9      	ldr	r1, [r7, #12]
 8105fa2:	430b      	orrs	r3, r1
 8105fa4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105fa8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8105fac:	bf00      	nop
 8105fae:	3714      	adds	r7, #20
 8105fb0:	46bd      	mov	sp, r7
 8105fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fb6:	4770      	bx	lr
 8105fb8:	fffec000 	.word	0xfffec000
 8105fbc:	ffc0efef 	.word	0xffc0efef

08105fc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8105fc0:	b580      	push	{r7, lr}
 8105fc2:	b0a4      	sub	sp, #144	@ 0x90
 8105fc4:	af00      	add	r7, sp, #0
 8105fc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8105fc8:	2301      	movs	r3, #1
 8105fca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8105fce:	2300      	movs	r3, #0
 8105fd0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8105fd2:	2300      	movs	r3, #0
 8105fd4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8105fd8:	2300      	movs	r3, #0
 8105fda:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8105fde:	2301      	movs	r3, #1
 8105fe0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8105fe4:	2301      	movs	r3, #1
 8105fe6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8105fea:	2301      	movs	r3, #1
 8105fec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8105ff0:	2300      	movs	r3, #0
 8105ff2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8105ff6:	2301      	movs	r3, #1
 8105ff8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8105ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8106000:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8106002:	2300      	movs	r3, #0
 8106004:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8106008:	2300      	movs	r3, #0
 810600a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810600c:	2300      	movs	r3, #0
 810600e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8106012:	2300      	movs	r3, #0
 8106014:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8106018:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 810601c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810601e:	2300      	movs	r3, #0
 8106020:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8106024:	2300      	movs	r3, #0
 8106026:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8106028:	2301      	movs	r3, #1
 810602a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810602e:	2300      	movs	r3, #0
 8106030:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8106034:	2300      	movs	r3, #0
 8106036:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810603a:	2300      	movs	r3, #0
 810603c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 810603e:	2300      	movs	r3, #0
 8106040:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8106042:	2300      	movs	r3, #0
 8106044:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8106046:	2300      	movs	r3, #0
 8106048:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 810604c:	2300      	movs	r3, #0
 810604e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8106052:	2301      	movs	r3, #1
 8106054:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8106058:	2320      	movs	r3, #32
 810605a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 810605e:	2301      	movs	r3, #1
 8106060:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8106064:	2300      	movs	r3, #0
 8106066:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810606a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 810606e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8106070:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8106074:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8106076:	2300      	movs	r3, #0
 8106078:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 810607c:	2302      	movs	r3, #2
 810607e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8106082:	2300      	movs	r3, #0
 8106084:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8106088:	2300      	movs	r3, #0
 810608a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 810608e:	2300      	movs	r3, #0
 8106090:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8106094:	2301      	movs	r3, #1
 8106096:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810609a:	2300      	movs	r3, #0
 810609c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810609e:	2301      	movs	r3, #1
 81060a0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81060a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81060a8:	4619      	mov	r1, r3
 81060aa:	6878      	ldr	r0, [r7, #4]
 81060ac:	f7ff fde6 	bl	8105c7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81060b0:	2301      	movs	r3, #1
 81060b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81060b4:	2301      	movs	r3, #1
 81060b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81060b8:	2300      	movs	r3, #0
 81060ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81060bc:	2300      	movs	r3, #0
 81060be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81060c2:	2300      	movs	r3, #0
 81060c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81060c6:	2300      	movs	r3, #0
 81060c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 81060ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81060ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 81060d0:	2300      	movs	r3, #0
 81060d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 81060d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 81060d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 81060da:	2300      	movs	r3, #0
 81060dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 81060e0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 81060e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 81060e6:	f107 0308 	add.w	r3, r7, #8
 81060ea:	4619      	mov	r1, r3
 81060ec:	6878      	ldr	r0, [r7, #4]
 81060ee:	f7ff fee1 	bl	8105eb4 <ETH_SetDMAConfig>
}
 81060f2:	bf00      	nop
 81060f4:	3790      	adds	r7, #144	@ 0x90
 81060f6:	46bd      	mov	sp, r7
 81060f8:	bd80      	pop	{r7, pc}

081060fa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 81060fa:	b480      	push	{r7}
 81060fc:	b085      	sub	sp, #20
 81060fe:	af00      	add	r7, sp, #0
 8106100:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8106102:	2300      	movs	r3, #0
 8106104:	60fb      	str	r3, [r7, #12]
 8106106:	e01d      	b.n	8106144 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	68d9      	ldr	r1, [r3, #12]
 810610c:	68fa      	ldr	r2, [r7, #12]
 810610e:	4613      	mov	r3, r2
 8106110:	005b      	lsls	r3, r3, #1
 8106112:	4413      	add	r3, r2
 8106114:	00db      	lsls	r3, r3, #3
 8106116:	440b      	add	r3, r1
 8106118:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 810611a:	68bb      	ldr	r3, [r7, #8]
 810611c:	2200      	movs	r2, #0
 810611e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8106120:	68bb      	ldr	r3, [r7, #8]
 8106122:	2200      	movs	r2, #0
 8106124:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8106126:	68bb      	ldr	r3, [r7, #8]
 8106128:	2200      	movs	r2, #0
 810612a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 810612c:	68bb      	ldr	r3, [r7, #8]
 810612e:	2200      	movs	r2, #0
 8106130:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8106132:	68b9      	ldr	r1, [r7, #8]
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	68fa      	ldr	r2, [r7, #12]
 8106138:	3206      	adds	r2, #6
 810613a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810613e:	68fb      	ldr	r3, [r7, #12]
 8106140:	3301      	adds	r3, #1
 8106142:	60fb      	str	r3, [r7, #12]
 8106144:	68fb      	ldr	r3, [r7, #12]
 8106146:	2b03      	cmp	r3, #3
 8106148:	d9de      	bls.n	8106108 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810614a:	687b      	ldr	r3, [r7, #4]
 810614c:	2200      	movs	r2, #0
 810614e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	681b      	ldr	r3, [r3, #0]
 8106154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8106158:	461a      	mov	r2, r3
 810615a:	2303      	movs	r3, #3
 810615c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	68da      	ldr	r2, [r3, #12]
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810616c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	68da      	ldr	r2, [r3, #12]
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810617c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8106180:	bf00      	nop
 8106182:	3714      	adds	r7, #20
 8106184:	46bd      	mov	sp, r7
 8106186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810618a:	4770      	bx	lr

0810618c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 810618c:	b480      	push	{r7}
 810618e:	b085      	sub	sp, #20
 8106190:	af00      	add	r7, sp, #0
 8106192:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8106194:	2300      	movs	r3, #0
 8106196:	60fb      	str	r3, [r7, #12]
 8106198:	e023      	b.n	81061e2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	6919      	ldr	r1, [r3, #16]
 810619e:	68fa      	ldr	r2, [r7, #12]
 81061a0:	4613      	mov	r3, r2
 81061a2:	005b      	lsls	r3, r3, #1
 81061a4:	4413      	add	r3, r2
 81061a6:	00db      	lsls	r3, r3, #3
 81061a8:	440b      	add	r3, r1
 81061aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 81061ac:	68bb      	ldr	r3, [r7, #8]
 81061ae:	2200      	movs	r2, #0
 81061b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 81061b2:	68bb      	ldr	r3, [r7, #8]
 81061b4:	2200      	movs	r2, #0
 81061b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 81061b8:	68bb      	ldr	r3, [r7, #8]
 81061ba:	2200      	movs	r2, #0
 81061bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 81061be:	68bb      	ldr	r3, [r7, #8]
 81061c0:	2200      	movs	r2, #0
 81061c2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 81061c4:	68bb      	ldr	r3, [r7, #8]
 81061c6:	2200      	movs	r2, #0
 81061c8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 81061ca:	68bb      	ldr	r3, [r7, #8]
 81061cc:	2200      	movs	r2, #0
 81061ce:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 81061d0:	68b9      	ldr	r1, [r7, #8]
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	68fa      	ldr	r2, [r7, #12]
 81061d6:	3212      	adds	r2, #18
 81061d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81061dc:	68fb      	ldr	r3, [r7, #12]
 81061de:	3301      	adds	r3, #1
 81061e0:	60fb      	str	r3, [r7, #12]
 81061e2:	68fb      	ldr	r3, [r7, #12]
 81061e4:	2b03      	cmp	r3, #3
 81061e6:	d9d8      	bls.n	810619a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	2200      	movs	r2, #0
 81061ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	2200      	movs	r2, #0
 81061f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	2200      	movs	r2, #0
 81061f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	2200      	movs	r2, #0
 81061fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	2200      	movs	r2, #0
 8106204:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	681b      	ldr	r3, [r3, #0]
 810620a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810620e:	461a      	mov	r2, r3
 8106210:	2303      	movs	r3, #3
 8106212:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	691a      	ldr	r2, [r3, #16]
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8106222:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	691b      	ldr	r3, [r3, #16]
 810622a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	681b      	ldr	r3, [r3, #0]
 8106232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8106236:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810623a:	bf00      	nop
 810623c:	3714      	adds	r7, #20
 810623e:	46bd      	mov	sp, r7
 8106240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106244:	4770      	bx	lr

08106246 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8106246:	b480      	push	{r7}
 8106248:	b08d      	sub	sp, #52	@ 0x34
 810624a:	af00      	add	r7, sp, #0
 810624c:	60f8      	str	r0, [r7, #12]
 810624e:	60b9      	str	r1, [r7, #8]
 8106250:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8106252:	68fb      	ldr	r3, [r7, #12]
 8106254:	3318      	adds	r3, #24
 8106256:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8106258:	697b      	ldr	r3, [r7, #20]
 810625a:	691b      	ldr	r3, [r3, #16]
 810625c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 810625e:	697b      	ldr	r3, [r7, #20]
 8106260:	691b      	ldr	r3, [r3, #16]
 8106262:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8106264:	2300      	movs	r3, #0
 8106266:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8106268:	697b      	ldr	r3, [r7, #20]
 810626a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106270:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8106272:	68bb      	ldr	r3, [r7, #8]
 8106274:	689b      	ldr	r3, [r3, #8]
 8106276:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8106278:	2300      	movs	r3, #0
 810627a:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 810627c:	6a3b      	ldr	r3, [r7, #32]
 810627e:	68db      	ldr	r3, [r3, #12]
 8106280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8106284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8106288:	d007      	beq.n	810629a <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 810628a:	697a      	ldr	r2, [r7, #20]
 810628c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810628e:	3304      	adds	r3, #4
 8106290:	009b      	lsls	r3, r3, #2
 8106292:	4413      	add	r3, r2
 8106294:	685b      	ldr	r3, [r3, #4]
 8106296:	2b00      	cmp	r3, #0
 8106298:	d001      	beq.n	810629e <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 810629a:	2302      	movs	r3, #2
 810629c:	e25a      	b.n	8106754 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810629e:	68bb      	ldr	r3, [r7, #8]
 81062a0:	681b      	ldr	r3, [r3, #0]
 81062a2:	f003 0304 	and.w	r3, r3, #4
 81062a6:	2b00      	cmp	r3, #0
 81062a8:	d044      	beq.n	8106334 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 81062aa:	6a3b      	ldr	r3, [r7, #32]
 81062ac:	68db      	ldr	r3, [r3, #12]
 81062ae:	0c1b      	lsrs	r3, r3, #16
 81062b0:	041b      	lsls	r3, r3, #16
 81062b2:	68ba      	ldr	r2, [r7, #8]
 81062b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 81062b6:	431a      	orrs	r2, r3
 81062b8:	6a3b      	ldr	r3, [r7, #32]
 81062ba:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 81062bc:	6a3b      	ldr	r3, [r7, #32]
 81062be:	68db      	ldr	r3, [r3, #12]
 81062c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 81062c4:	6a3b      	ldr	r3, [r7, #32]
 81062c6:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 81062c8:	68fb      	ldr	r3, [r7, #12]
 81062ca:	681b      	ldr	r3, [r3, #0]
 81062cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81062ce:	68fb      	ldr	r3, [r7, #12]
 81062d0:	681b      	ldr	r3, [r3, #0]
 81062d2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 81062d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 81062d8:	68bb      	ldr	r3, [r7, #8]
 81062da:	681b      	ldr	r3, [r3, #0]
 81062dc:	f003 0308 	and.w	r3, r3, #8
 81062e0:	2b00      	cmp	r3, #0
 81062e2:	d027      	beq.n	8106334 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 81062e4:	6a3b      	ldr	r3, [r7, #32]
 81062e6:	689b      	ldr	r3, [r3, #8]
 81062e8:	b29a      	uxth	r2, r3
 81062ea:	68bb      	ldr	r3, [r7, #8]
 81062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062ee:	041b      	lsls	r3, r3, #16
 81062f0:	431a      	orrs	r2, r3
 81062f2:	6a3b      	ldr	r3, [r7, #32]
 81062f4:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 81062f6:	6a3b      	ldr	r3, [r7, #32]
 81062f8:	68db      	ldr	r3, [r3, #12]
 81062fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 81062fe:	6a3b      	ldr	r3, [r7, #32]
 8106300:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8106302:	6a3b      	ldr	r3, [r7, #32]
 8106304:	68db      	ldr	r3, [r3, #12]
 8106306:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 810630a:	68bb      	ldr	r3, [r7, #8]
 810630c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810630e:	431a      	orrs	r2, r3
 8106310:	6a3b      	ldr	r3, [r7, #32]
 8106312:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8106314:	68fb      	ldr	r3, [r7, #12]
 8106316:	681b      	ldr	r3, [r3, #0]
 8106318:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810631a:	68fb      	ldr	r3, [r7, #12]
 810631c:	681b      	ldr	r3, [r3, #0]
 810631e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8106322:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8106324:	68fb      	ldr	r3, [r7, #12]
 8106326:	681b      	ldr	r3, [r3, #0]
 8106328:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810632a:	68fb      	ldr	r3, [r7, #12]
 810632c:	681b      	ldr	r3, [r3, #0]
 810632e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8106332:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8106334:	68bb      	ldr	r3, [r7, #8]
 8106336:	681b      	ldr	r3, [r3, #0]
 8106338:	f003 0310 	and.w	r3, r3, #16
 810633c:	2b00      	cmp	r3, #0
 810633e:	d010      	beq.n	8106362 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8106340:	6a3b      	ldr	r3, [r7, #32]
 8106342:	689b      	ldr	r3, [r3, #8]
 8106344:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8106348:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810634c:	68ba      	ldr	r2, [r7, #8]
 810634e:	6992      	ldr	r2, [r2, #24]
 8106350:	431a      	orrs	r2, r3
 8106352:	6a3b      	ldr	r3, [r7, #32]
 8106354:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8106356:	6a3b      	ldr	r3, [r7, #32]
 8106358:	68db      	ldr	r3, [r3, #12]
 810635a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 810635e:	6a3b      	ldr	r3, [r7, #32]
 8106360:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8106362:	68bb      	ldr	r3, [r7, #8]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	f003 0304 	and.w	r3, r3, #4
 810636a:	2b00      	cmp	r3, #0
 810636c:	d105      	bne.n	810637a <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 810636e:	68bb      	ldr	r3, [r7, #8]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	f003 0310 	and.w	r3, r3, #16
 8106376:	2b00      	cmp	r3, #0
 8106378:	d036      	beq.n	81063e8 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 810637a:	6a3b      	ldr	r3, [r7, #32]
 810637c:	68db      	ldr	r3, [r3, #12]
 810637e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8106382:	6a3b      	ldr	r3, [r7, #32]
 8106384:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8106386:	f3bf 8f5f 	dmb	sy
}
 810638a:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 810638c:	6a3b      	ldr	r3, [r7, #32]
 810638e:	68db      	ldr	r3, [r3, #12]
 8106390:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8106394:	6a3b      	ldr	r3, [r7, #32]
 8106396:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8106398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810639a:	3301      	adds	r3, #1
 810639c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810639e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81063a0:	2b03      	cmp	r3, #3
 81063a2:	d902      	bls.n	81063aa <ETH_Prepare_Tx_Descriptors+0x164>
 81063a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81063a6:	3b04      	subs	r3, #4
 81063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81063aa:	697b      	ldr	r3, [r7, #20]
 81063ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81063ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81063b2:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 81063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81063b6:	3301      	adds	r3, #1
 81063b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 81063ba:	6a3b      	ldr	r3, [r7, #32]
 81063bc:	68db      	ldr	r3, [r3, #12]
 81063be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81063c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81063c6:	d10f      	bne.n	81063e8 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 81063c8:	697b      	ldr	r3, [r7, #20]
 81063ca:	693a      	ldr	r2, [r7, #16]
 81063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81063d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 81063d2:	f3bf 8f5f 	dmb	sy
}
 81063d6:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 81063d8:	6a3b      	ldr	r3, [r7, #32]
 81063da:	68db      	ldr	r3, [r3, #12]
 81063dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 81063e0:	6a3b      	ldr	r3, [r7, #32]
 81063e2:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 81063e4:	2302      	movs	r3, #2
 81063e6:	e1b5      	b.n	8106754 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 81063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81063ea:	3301      	adds	r3, #1
 81063ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 81063ee:	69fb      	ldr	r3, [r7, #28]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	461a      	mov	r2, r3
 81063f4:	6a3b      	ldr	r3, [r7, #32]
 81063f6:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 81063f8:	6a3b      	ldr	r3, [r7, #32]
 81063fa:	689b      	ldr	r3, [r3, #8]
 81063fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8106400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8106404:	69fa      	ldr	r2, [r7, #28]
 8106406:	6852      	ldr	r2, [r2, #4]
 8106408:	431a      	orrs	r2, r3
 810640a:	6a3b      	ldr	r3, [r7, #32]
 810640c:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 810640e:	69fb      	ldr	r3, [r7, #28]
 8106410:	689b      	ldr	r3, [r3, #8]
 8106412:	2b00      	cmp	r3, #0
 8106414:	d014      	beq.n	8106440 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8106416:	69fb      	ldr	r3, [r7, #28]
 8106418:	689b      	ldr	r3, [r3, #8]
 810641a:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 810641c:	69fb      	ldr	r3, [r7, #28]
 810641e:	681b      	ldr	r3, [r3, #0]
 8106420:	461a      	mov	r2, r3
 8106422:	6a3b      	ldr	r3, [r7, #32]
 8106424:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8106426:	6a3b      	ldr	r3, [r7, #32]
 8106428:	689b      	ldr	r3, [r3, #8]
 810642a:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810642e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8106432:	69fa      	ldr	r2, [r7, #28]
 8106434:	6852      	ldr	r2, [r2, #4]
 8106436:	0412      	lsls	r2, r2, #16
 8106438:	431a      	orrs	r2, r3
 810643a:	6a3b      	ldr	r3, [r7, #32]
 810643c:	609a      	str	r2, [r3, #8]
 810643e:	e00a      	b.n	8106456 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8106440:	6a3b      	ldr	r3, [r7, #32]
 8106442:	2200      	movs	r2, #0
 8106444:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8106446:	6a3b      	ldr	r3, [r7, #32]
 8106448:	689b      	ldr	r3, [r3, #8]
 810644a:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810644e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8106452:	6a3a      	ldr	r2, [r7, #32]
 8106454:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8106456:	68bb      	ldr	r3, [r7, #8]
 8106458:	681b      	ldr	r3, [r3, #0]
 810645a:	f003 0310 	and.w	r3, r3, #16
 810645e:	2b00      	cmp	r3, #0
 8106460:	d019      	beq.n	8106496 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8106462:	6a3b      	ldr	r3, [r7, #32]
 8106464:	68db      	ldr	r3, [r3, #12]
 8106466:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 810646a:	68bb      	ldr	r3, [r7, #8]
 810646c:	6a1b      	ldr	r3, [r3, #32]
 810646e:	04db      	lsls	r3, r3, #19
 8106470:	431a      	orrs	r2, r3
 8106472:	6a3b      	ldr	r3, [r7, #32]
 8106474:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8106476:	6a3b      	ldr	r3, [r7, #32]
 8106478:	68db      	ldr	r3, [r3, #12]
 810647a:	0c9b      	lsrs	r3, r3, #18
 810647c:	049b      	lsls	r3, r3, #18
 810647e:	68ba      	ldr	r2, [r7, #8]
 8106480:	69d2      	ldr	r2, [r2, #28]
 8106482:	431a      	orrs	r2, r3
 8106484:	6a3b      	ldr	r3, [r7, #32]
 8106486:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8106488:	6a3b      	ldr	r3, [r7, #32]
 810648a:	68db      	ldr	r3, [r3, #12]
 810648c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8106490:	6a3b      	ldr	r3, [r7, #32]
 8106492:	60da      	str	r2, [r3, #12]
 8106494:	e028      	b.n	81064e8 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8106496:	6a3b      	ldr	r3, [r7, #32]
 8106498:	68db      	ldr	r3, [r3, #12]
 810649a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810649e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 81064a2:	68ba      	ldr	r2, [r7, #8]
 81064a4:	6852      	ldr	r2, [r2, #4]
 81064a6:	431a      	orrs	r2, r3
 81064a8:	6a3b      	ldr	r3, [r7, #32]
 81064aa:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 81064ac:	68bb      	ldr	r3, [r7, #8]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	f003 0301 	and.w	r3, r3, #1
 81064b4:	2b00      	cmp	r3, #0
 81064b6:	d008      	beq.n	81064ca <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 81064b8:	6a3b      	ldr	r3, [r7, #32]
 81064ba:	68db      	ldr	r3, [r3, #12]
 81064bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 81064c0:	68bb      	ldr	r3, [r7, #8]
 81064c2:	695b      	ldr	r3, [r3, #20]
 81064c4:	431a      	orrs	r2, r3
 81064c6:	6a3b      	ldr	r3, [r7, #32]
 81064c8:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 81064ca:	68bb      	ldr	r3, [r7, #8]
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	f003 0320 	and.w	r3, r3, #32
 81064d2:	2b00      	cmp	r3, #0
 81064d4:	d008      	beq.n	81064e8 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 81064d6:	6a3b      	ldr	r3, [r7, #32]
 81064d8:	68db      	ldr	r3, [r3, #12]
 81064da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 81064de:	68bb      	ldr	r3, [r7, #8]
 81064e0:	691b      	ldr	r3, [r3, #16]
 81064e2:	431a      	orrs	r2, r3
 81064e4:	6a3b      	ldr	r3, [r7, #32]
 81064e6:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 81064e8:	68bb      	ldr	r3, [r7, #8]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	f003 0304 	and.w	r3, r3, #4
 81064f0:	2b00      	cmp	r3, #0
 81064f2:	d008      	beq.n	8106506 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 81064f4:	6a3b      	ldr	r3, [r7, #32]
 81064f6:	689b      	ldr	r3, [r3, #8]
 81064f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81064fc:	68bb      	ldr	r3, [r7, #8]
 81064fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106500:	431a      	orrs	r2, r3
 8106502:	6a3b      	ldr	r3, [r7, #32]
 8106504:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8106506:	6a3b      	ldr	r3, [r7, #32]
 8106508:	68db      	ldr	r3, [r3, #12]
 810650a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810650e:	6a3b      	ldr	r3, [r7, #32]
 8106510:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8106512:	6a3b      	ldr	r3, [r7, #32]
 8106514:	68db      	ldr	r3, [r3, #12]
 8106516:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810651a:	6a3b      	ldr	r3, [r7, #32]
 810651c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810651e:	f3bf 8f5f 	dmb	sy
}
 8106522:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8106524:	6a3b      	ldr	r3, [r7, #32]
 8106526:	68db      	ldr	r3, [r3, #12]
 8106528:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810652c:	6a3b      	ldr	r3, [r7, #32]
 810652e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8106530:	68bb      	ldr	r3, [r7, #8]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	f003 0302 	and.w	r3, r3, #2
 8106538:	2b00      	cmp	r3, #0
 810653a:	f000 80d9 	beq.w	81066f0 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 810653e:	6a3b      	ldr	r3, [r7, #32]
 8106540:	68db      	ldr	r3, [r3, #12]
 8106542:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8106546:	68bb      	ldr	r3, [r7, #8]
 8106548:	68db      	ldr	r3, [r3, #12]
 810654a:	431a      	orrs	r2, r3
 810654c:	6a3b      	ldr	r3, [r7, #32]
 810654e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8106550:	e0ce      	b.n	81066f0 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8106552:	6a3b      	ldr	r3, [r7, #32]
 8106554:	68db      	ldr	r3, [r3, #12]
 8106556:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 810655a:	6a3b      	ldr	r3, [r7, #32]
 810655c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810655e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106560:	3301      	adds	r3, #1
 8106562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106566:	2b03      	cmp	r3, #3
 8106568:	d902      	bls.n	8106570 <ETH_Prepare_Tx_Descriptors+0x32a>
 810656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810656c:	3b04      	subs	r3, #4
 810656e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8106570:	697b      	ldr	r3, [r7, #20]
 8106572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106578:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 810657a:	6a3b      	ldr	r3, [r7, #32]
 810657c:	68db      	ldr	r3, [r3, #12]
 810657e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8106582:	6a3b      	ldr	r3, [r7, #32]
 8106584:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8106586:	6a3b      	ldr	r3, [r7, #32]
 8106588:	68db      	ldr	r3, [r3, #12]
 810658a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810658e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8106592:	d007      	beq.n	81065a4 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8106594:	697a      	ldr	r2, [r7, #20]
 8106596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106598:	3304      	adds	r3, #4
 810659a:	009b      	lsls	r3, r3, #2
 810659c:	4413      	add	r3, r2
 810659e:	685b      	ldr	r3, [r3, #4]
 81065a0:	2b00      	cmp	r3, #0
 81065a2:	d029      	beq.n	81065f8 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 81065a4:	693b      	ldr	r3, [r7, #16]
 81065a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81065a8:	697b      	ldr	r3, [r7, #20]
 81065aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81065ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81065b0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 81065b2:	2300      	movs	r3, #0
 81065b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 81065b6:	e019      	b.n	81065ec <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 81065b8:	f3bf 8f5f 	dmb	sy
}
 81065bc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 81065be:	6a3b      	ldr	r3, [r7, #32]
 81065c0:	68db      	ldr	r3, [r3, #12]
 81065c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 81065c6:	6a3b      	ldr	r3, [r7, #32]
 81065c8:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 81065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81065cc:	3301      	adds	r3, #1
 81065ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81065d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81065d2:	2b03      	cmp	r3, #3
 81065d4:	d902      	bls.n	81065dc <ETH_Prepare_Tx_Descriptors+0x396>
 81065d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81065d8:	3b04      	subs	r3, #4
 81065da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81065dc:	697b      	ldr	r3, [r7, #20]
 81065de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81065e4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 81065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81065e8:	3301      	adds	r3, #1
 81065ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 81065ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81065f0:	429a      	cmp	r2, r3
 81065f2:	d3e1      	bcc.n	81065b8 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 81065f4:	2302      	movs	r3, #2
 81065f6:	e0ad      	b.n	8106754 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 81065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81065fa:	3301      	adds	r3, #1
 81065fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 81065fe:	69fb      	ldr	r3, [r7, #28]
 8106600:	689b      	ldr	r3, [r3, #8]
 8106602:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8106604:	69fb      	ldr	r3, [r7, #28]
 8106606:	681b      	ldr	r3, [r3, #0]
 8106608:	461a      	mov	r2, r3
 810660a:	6a3b      	ldr	r3, [r7, #32]
 810660c:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810660e:	6a3b      	ldr	r3, [r7, #32]
 8106610:	689b      	ldr	r3, [r3, #8]
 8106612:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8106616:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810661a:	69fa      	ldr	r2, [r7, #28]
 810661c:	6852      	ldr	r2, [r2, #4]
 810661e:	431a      	orrs	r2, r3
 8106620:	6a3b      	ldr	r3, [r7, #32]
 8106622:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8106624:	69fb      	ldr	r3, [r7, #28]
 8106626:	689b      	ldr	r3, [r3, #8]
 8106628:	2b00      	cmp	r3, #0
 810662a:	d014      	beq.n	8106656 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 810662c:	69fb      	ldr	r3, [r7, #28]
 810662e:	689b      	ldr	r3, [r3, #8]
 8106630:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8106632:	69fb      	ldr	r3, [r7, #28]
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	461a      	mov	r2, r3
 8106638:	6a3b      	ldr	r3, [r7, #32]
 810663a:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810663c:	6a3b      	ldr	r3, [r7, #32]
 810663e:	689b      	ldr	r3, [r3, #8]
 8106640:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8106644:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8106648:	69fa      	ldr	r2, [r7, #28]
 810664a:	6852      	ldr	r2, [r2, #4]
 810664c:	0412      	lsls	r2, r2, #16
 810664e:	431a      	orrs	r2, r3
 8106650:	6a3b      	ldr	r3, [r7, #32]
 8106652:	609a      	str	r2, [r3, #8]
 8106654:	e00a      	b.n	810666c <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8106656:	6a3b      	ldr	r3, [r7, #32]
 8106658:	2200      	movs	r2, #0
 810665a:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810665c:	6a3b      	ldr	r3, [r7, #32]
 810665e:	689b      	ldr	r3, [r3, #8]
 8106660:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8106664:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8106668:	6a3a      	ldr	r2, [r7, #32]
 810666a:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810666c:	68bb      	ldr	r3, [r7, #8]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	f003 0310 	and.w	r3, r3, #16
 8106674:	2b00      	cmp	r3, #0
 8106676:	d00f      	beq.n	8106698 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8106678:	6a3b      	ldr	r3, [r7, #32]
 810667a:	68db      	ldr	r3, [r3, #12]
 810667c:	0c9b      	lsrs	r3, r3, #18
 810667e:	049b      	lsls	r3, r3, #18
 8106680:	68ba      	ldr	r2, [r7, #8]
 8106682:	69d2      	ldr	r2, [r2, #28]
 8106684:	431a      	orrs	r2, r3
 8106686:	6a3b      	ldr	r3, [r7, #32]
 8106688:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810668a:	6a3b      	ldr	r3, [r7, #32]
 810668c:	68db      	ldr	r3, [r3, #12]
 810668e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8106692:	6a3b      	ldr	r3, [r7, #32]
 8106694:	60da      	str	r2, [r3, #12]
 8106696:	e019      	b.n	81066cc <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8106698:	6a3b      	ldr	r3, [r7, #32]
 810669a:	68db      	ldr	r3, [r3, #12]
 810669c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 81066a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 81066a4:	68ba      	ldr	r2, [r7, #8]
 81066a6:	6852      	ldr	r2, [r2, #4]
 81066a8:	431a      	orrs	r2, r3
 81066aa:	6a3b      	ldr	r3, [r7, #32]
 81066ac:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 81066ae:	68bb      	ldr	r3, [r7, #8]
 81066b0:	681b      	ldr	r3, [r3, #0]
 81066b2:	f003 0301 	and.w	r3, r3, #1
 81066b6:	2b00      	cmp	r3, #0
 81066b8:	d008      	beq.n	81066cc <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 81066ba:	6a3b      	ldr	r3, [r7, #32]
 81066bc:	68db      	ldr	r3, [r3, #12]
 81066be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 81066c2:	68bb      	ldr	r3, [r7, #8]
 81066c4:	695b      	ldr	r3, [r3, #20]
 81066c6:	431a      	orrs	r2, r3
 81066c8:	6a3b      	ldr	r3, [r7, #32]
 81066ca:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 81066cc:	69bb      	ldr	r3, [r7, #24]
 81066ce:	3301      	adds	r3, #1
 81066d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 81066d2:	f3bf 8f5f 	dmb	sy
}
 81066d6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 81066d8:	6a3b      	ldr	r3, [r7, #32]
 81066da:	68db      	ldr	r3, [r3, #12]
 81066dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 81066e0:	6a3b      	ldr	r3, [r7, #32]
 81066e2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 81066e4:	6a3b      	ldr	r3, [r7, #32]
 81066e6:	68db      	ldr	r3, [r3, #12]
 81066e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 81066ec:	6a3b      	ldr	r3, [r7, #32]
 81066ee:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 81066f0:	69fb      	ldr	r3, [r7, #28]
 81066f2:	689b      	ldr	r3, [r3, #8]
 81066f4:	2b00      	cmp	r3, #0
 81066f6:	f47f af2c 	bne.w	8106552 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 81066fa:	687b      	ldr	r3, [r7, #4]
 81066fc:	2b00      	cmp	r3, #0
 81066fe:	d006      	beq.n	810670e <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8106700:	6a3b      	ldr	r3, [r7, #32]
 8106702:	689b      	ldr	r3, [r3, #8]
 8106704:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8106708:	6a3b      	ldr	r3, [r7, #32]
 810670a:	609a      	str	r2, [r3, #8]
 810670c:	e005      	b.n	810671a <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810670e:	6a3b      	ldr	r3, [r7, #32]
 8106710:	689b      	ldr	r3, [r3, #8]
 8106712:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8106716:	6a3b      	ldr	r3, [r7, #32]
 8106718:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810671a:	6a3b      	ldr	r3, [r7, #32]
 810671c:	68db      	ldr	r3, [r3, #12]
 810671e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8106722:	6a3b      	ldr	r3, [r7, #32]
 8106724:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8106726:	697b      	ldr	r3, [r7, #20]
 8106728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810672a:	6979      	ldr	r1, [r7, #20]
 810672c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810672e:	3304      	adds	r3, #4
 8106730:	009b      	lsls	r3, r3, #2
 8106732:	440b      	add	r3, r1
 8106734:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8106736:	697b      	ldr	r3, [r7, #20]
 8106738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810673a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 810673c:	b672      	cpsid	i
}
 810673e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8106740:	697b      	ldr	r3, [r7, #20]
 8106742:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8106744:	69bb      	ldr	r3, [r7, #24]
 8106746:	4413      	add	r3, r2
 8106748:	1c5a      	adds	r2, r3, #1
 810674a:	697b      	ldr	r3, [r7, #20]
 810674c:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 810674e:	b662      	cpsie	i
}
 8106750:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8106752:	2300      	movs	r3, #0
}
 8106754:	4618      	mov	r0, r3
 8106756:	3734      	adds	r7, #52	@ 0x34
 8106758:	46bd      	mov	sp, r7
 810675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810675e:	4770      	bx	lr

08106760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106760:	b480      	push	{r7}
 8106762:	b089      	sub	sp, #36	@ 0x24
 8106764:	af00      	add	r7, sp, #0
 8106766:	6078      	str	r0, [r7, #4]
 8106768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810676a:	2300      	movs	r3, #0
 810676c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810676e:	4b89      	ldr	r3, [pc, #548]	@ (8106994 <HAL_GPIO_Init+0x234>)
 8106770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106772:	e194      	b.n	8106a9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106774:	683b      	ldr	r3, [r7, #0]
 8106776:	681a      	ldr	r2, [r3, #0]
 8106778:	2101      	movs	r1, #1
 810677a:	69fb      	ldr	r3, [r7, #28]
 810677c:	fa01 f303 	lsl.w	r3, r1, r3
 8106780:	4013      	ands	r3, r2
 8106782:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106784:	693b      	ldr	r3, [r7, #16]
 8106786:	2b00      	cmp	r3, #0
 8106788:	f000 8186 	beq.w	8106a98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810678c:	683b      	ldr	r3, [r7, #0]
 810678e:	685b      	ldr	r3, [r3, #4]
 8106790:	f003 0303 	and.w	r3, r3, #3
 8106794:	2b01      	cmp	r3, #1
 8106796:	d005      	beq.n	81067a4 <HAL_GPIO_Init+0x44>
 8106798:	683b      	ldr	r3, [r7, #0]
 810679a:	685b      	ldr	r3, [r3, #4]
 810679c:	f003 0303 	and.w	r3, r3, #3
 81067a0:	2b02      	cmp	r3, #2
 81067a2:	d130      	bne.n	8106806 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	689b      	ldr	r3, [r3, #8]
 81067a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81067aa:	69fb      	ldr	r3, [r7, #28]
 81067ac:	005b      	lsls	r3, r3, #1
 81067ae:	2203      	movs	r2, #3
 81067b0:	fa02 f303 	lsl.w	r3, r2, r3
 81067b4:	43db      	mvns	r3, r3
 81067b6:	69ba      	ldr	r2, [r7, #24]
 81067b8:	4013      	ands	r3, r2
 81067ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81067bc:	683b      	ldr	r3, [r7, #0]
 81067be:	68da      	ldr	r2, [r3, #12]
 81067c0:	69fb      	ldr	r3, [r7, #28]
 81067c2:	005b      	lsls	r3, r3, #1
 81067c4:	fa02 f303 	lsl.w	r3, r2, r3
 81067c8:	69ba      	ldr	r2, [r7, #24]
 81067ca:	4313      	orrs	r3, r2
 81067cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	69ba      	ldr	r2, [r7, #24]
 81067d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	685b      	ldr	r3, [r3, #4]
 81067d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81067da:	2201      	movs	r2, #1
 81067dc:	69fb      	ldr	r3, [r7, #28]
 81067de:	fa02 f303 	lsl.w	r3, r2, r3
 81067e2:	43db      	mvns	r3, r3
 81067e4:	69ba      	ldr	r2, [r7, #24]
 81067e6:	4013      	ands	r3, r2
 81067e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81067ea:	683b      	ldr	r3, [r7, #0]
 81067ec:	685b      	ldr	r3, [r3, #4]
 81067ee:	091b      	lsrs	r3, r3, #4
 81067f0:	f003 0201 	and.w	r2, r3, #1
 81067f4:	69fb      	ldr	r3, [r7, #28]
 81067f6:	fa02 f303 	lsl.w	r3, r2, r3
 81067fa:	69ba      	ldr	r2, [r7, #24]
 81067fc:	4313      	orrs	r3, r2
 81067fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	69ba      	ldr	r2, [r7, #24]
 8106804:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8106806:	683b      	ldr	r3, [r7, #0]
 8106808:	685b      	ldr	r3, [r3, #4]
 810680a:	f003 0303 	and.w	r3, r3, #3
 810680e:	2b03      	cmp	r3, #3
 8106810:	d017      	beq.n	8106842 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	68db      	ldr	r3, [r3, #12]
 8106816:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106818:	69fb      	ldr	r3, [r7, #28]
 810681a:	005b      	lsls	r3, r3, #1
 810681c:	2203      	movs	r2, #3
 810681e:	fa02 f303 	lsl.w	r3, r2, r3
 8106822:	43db      	mvns	r3, r3
 8106824:	69ba      	ldr	r2, [r7, #24]
 8106826:	4013      	ands	r3, r2
 8106828:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810682a:	683b      	ldr	r3, [r7, #0]
 810682c:	689a      	ldr	r2, [r3, #8]
 810682e:	69fb      	ldr	r3, [r7, #28]
 8106830:	005b      	lsls	r3, r3, #1
 8106832:	fa02 f303 	lsl.w	r3, r2, r3
 8106836:	69ba      	ldr	r2, [r7, #24]
 8106838:	4313      	orrs	r3, r2
 810683a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	69ba      	ldr	r2, [r7, #24]
 8106840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8106842:	683b      	ldr	r3, [r7, #0]
 8106844:	685b      	ldr	r3, [r3, #4]
 8106846:	f003 0303 	and.w	r3, r3, #3
 810684a:	2b02      	cmp	r3, #2
 810684c:	d123      	bne.n	8106896 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810684e:	69fb      	ldr	r3, [r7, #28]
 8106850:	08da      	lsrs	r2, r3, #3
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	3208      	adds	r2, #8
 8106856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810685a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810685c:	69fb      	ldr	r3, [r7, #28]
 810685e:	f003 0307 	and.w	r3, r3, #7
 8106862:	009b      	lsls	r3, r3, #2
 8106864:	220f      	movs	r2, #15
 8106866:	fa02 f303 	lsl.w	r3, r2, r3
 810686a:	43db      	mvns	r3, r3
 810686c:	69ba      	ldr	r2, [r7, #24]
 810686e:	4013      	ands	r3, r2
 8106870:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106872:	683b      	ldr	r3, [r7, #0]
 8106874:	691a      	ldr	r2, [r3, #16]
 8106876:	69fb      	ldr	r3, [r7, #28]
 8106878:	f003 0307 	and.w	r3, r3, #7
 810687c:	009b      	lsls	r3, r3, #2
 810687e:	fa02 f303 	lsl.w	r3, r2, r3
 8106882:	69ba      	ldr	r2, [r7, #24]
 8106884:	4313      	orrs	r3, r2
 8106886:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106888:	69fb      	ldr	r3, [r7, #28]
 810688a:	08da      	lsrs	r2, r3, #3
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	3208      	adds	r2, #8
 8106890:	69b9      	ldr	r1, [r7, #24]
 8106892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810689c:	69fb      	ldr	r3, [r7, #28]
 810689e:	005b      	lsls	r3, r3, #1
 81068a0:	2203      	movs	r2, #3
 81068a2:	fa02 f303 	lsl.w	r3, r2, r3
 81068a6:	43db      	mvns	r3, r3
 81068a8:	69ba      	ldr	r2, [r7, #24]
 81068aa:	4013      	ands	r3, r2
 81068ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81068ae:	683b      	ldr	r3, [r7, #0]
 81068b0:	685b      	ldr	r3, [r3, #4]
 81068b2:	f003 0203 	and.w	r2, r3, #3
 81068b6:	69fb      	ldr	r3, [r7, #28]
 81068b8:	005b      	lsls	r3, r3, #1
 81068ba:	fa02 f303 	lsl.w	r3, r2, r3
 81068be:	69ba      	ldr	r2, [r7, #24]
 81068c0:	4313      	orrs	r3, r2
 81068c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	69ba      	ldr	r2, [r7, #24]
 81068c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81068ca:	683b      	ldr	r3, [r7, #0]
 81068cc:	685b      	ldr	r3, [r3, #4]
 81068ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81068d2:	2b00      	cmp	r3, #0
 81068d4:	f000 80e0 	beq.w	8106a98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81068d8:	4b2f      	ldr	r3, [pc, #188]	@ (8106998 <HAL_GPIO_Init+0x238>)
 81068da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81068de:	4a2e      	ldr	r2, [pc, #184]	@ (8106998 <HAL_GPIO_Init+0x238>)
 81068e0:	f043 0302 	orr.w	r3, r3, #2
 81068e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81068e8:	4b2b      	ldr	r3, [pc, #172]	@ (8106998 <HAL_GPIO_Init+0x238>)
 81068ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81068ee:	f003 0302 	and.w	r3, r3, #2
 81068f2:	60fb      	str	r3, [r7, #12]
 81068f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81068f6:	4a29      	ldr	r2, [pc, #164]	@ (810699c <HAL_GPIO_Init+0x23c>)
 81068f8:	69fb      	ldr	r3, [r7, #28]
 81068fa:	089b      	lsrs	r3, r3, #2
 81068fc:	3302      	adds	r3, #2
 81068fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106904:	69fb      	ldr	r3, [r7, #28]
 8106906:	f003 0303 	and.w	r3, r3, #3
 810690a:	009b      	lsls	r3, r3, #2
 810690c:	220f      	movs	r2, #15
 810690e:	fa02 f303 	lsl.w	r3, r2, r3
 8106912:	43db      	mvns	r3, r3
 8106914:	69ba      	ldr	r2, [r7, #24]
 8106916:	4013      	ands	r3, r2
 8106918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810691a:	687b      	ldr	r3, [r7, #4]
 810691c:	4a20      	ldr	r2, [pc, #128]	@ (81069a0 <HAL_GPIO_Init+0x240>)
 810691e:	4293      	cmp	r3, r2
 8106920:	d052      	beq.n	81069c8 <HAL_GPIO_Init+0x268>
 8106922:	687b      	ldr	r3, [r7, #4]
 8106924:	4a1f      	ldr	r2, [pc, #124]	@ (81069a4 <HAL_GPIO_Init+0x244>)
 8106926:	4293      	cmp	r3, r2
 8106928:	d031      	beq.n	810698e <HAL_GPIO_Init+0x22e>
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	4a1e      	ldr	r2, [pc, #120]	@ (81069a8 <HAL_GPIO_Init+0x248>)
 810692e:	4293      	cmp	r3, r2
 8106930:	d02b      	beq.n	810698a <HAL_GPIO_Init+0x22a>
 8106932:	687b      	ldr	r3, [r7, #4]
 8106934:	4a1d      	ldr	r2, [pc, #116]	@ (81069ac <HAL_GPIO_Init+0x24c>)
 8106936:	4293      	cmp	r3, r2
 8106938:	d025      	beq.n	8106986 <HAL_GPIO_Init+0x226>
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	4a1c      	ldr	r2, [pc, #112]	@ (81069b0 <HAL_GPIO_Init+0x250>)
 810693e:	4293      	cmp	r3, r2
 8106940:	d01f      	beq.n	8106982 <HAL_GPIO_Init+0x222>
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	4a1b      	ldr	r2, [pc, #108]	@ (81069b4 <HAL_GPIO_Init+0x254>)
 8106946:	4293      	cmp	r3, r2
 8106948:	d019      	beq.n	810697e <HAL_GPIO_Init+0x21e>
 810694a:	687b      	ldr	r3, [r7, #4]
 810694c:	4a1a      	ldr	r2, [pc, #104]	@ (81069b8 <HAL_GPIO_Init+0x258>)
 810694e:	4293      	cmp	r3, r2
 8106950:	d013      	beq.n	810697a <HAL_GPIO_Init+0x21a>
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	4a19      	ldr	r2, [pc, #100]	@ (81069bc <HAL_GPIO_Init+0x25c>)
 8106956:	4293      	cmp	r3, r2
 8106958:	d00d      	beq.n	8106976 <HAL_GPIO_Init+0x216>
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	4a18      	ldr	r2, [pc, #96]	@ (81069c0 <HAL_GPIO_Init+0x260>)
 810695e:	4293      	cmp	r3, r2
 8106960:	d007      	beq.n	8106972 <HAL_GPIO_Init+0x212>
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	4a17      	ldr	r2, [pc, #92]	@ (81069c4 <HAL_GPIO_Init+0x264>)
 8106966:	4293      	cmp	r3, r2
 8106968:	d101      	bne.n	810696e <HAL_GPIO_Init+0x20e>
 810696a:	2309      	movs	r3, #9
 810696c:	e02d      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 810696e:	230a      	movs	r3, #10
 8106970:	e02b      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 8106972:	2308      	movs	r3, #8
 8106974:	e029      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 8106976:	2307      	movs	r3, #7
 8106978:	e027      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 810697a:	2306      	movs	r3, #6
 810697c:	e025      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 810697e:	2305      	movs	r3, #5
 8106980:	e023      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 8106982:	2304      	movs	r3, #4
 8106984:	e021      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 8106986:	2303      	movs	r3, #3
 8106988:	e01f      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 810698a:	2302      	movs	r3, #2
 810698c:	e01d      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 810698e:	2301      	movs	r3, #1
 8106990:	e01b      	b.n	81069ca <HAL_GPIO_Init+0x26a>
 8106992:	bf00      	nop
 8106994:	580000c0 	.word	0x580000c0
 8106998:	58024400 	.word	0x58024400
 810699c:	58000400 	.word	0x58000400
 81069a0:	58020000 	.word	0x58020000
 81069a4:	58020400 	.word	0x58020400
 81069a8:	58020800 	.word	0x58020800
 81069ac:	58020c00 	.word	0x58020c00
 81069b0:	58021000 	.word	0x58021000
 81069b4:	58021400 	.word	0x58021400
 81069b8:	58021800 	.word	0x58021800
 81069bc:	58021c00 	.word	0x58021c00
 81069c0:	58022000 	.word	0x58022000
 81069c4:	58022400 	.word	0x58022400
 81069c8:	2300      	movs	r3, #0
 81069ca:	69fa      	ldr	r2, [r7, #28]
 81069cc:	f002 0203 	and.w	r2, r2, #3
 81069d0:	0092      	lsls	r2, r2, #2
 81069d2:	4093      	lsls	r3, r2
 81069d4:	69ba      	ldr	r2, [r7, #24]
 81069d6:	4313      	orrs	r3, r2
 81069d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81069da:	4938      	ldr	r1, [pc, #224]	@ (8106abc <HAL_GPIO_Init+0x35c>)
 81069dc:	69fb      	ldr	r3, [r7, #28]
 81069de:	089b      	lsrs	r3, r3, #2
 81069e0:	3302      	adds	r3, #2
 81069e2:	69ba      	ldr	r2, [r7, #24]
 81069e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81069e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81069ec:	681b      	ldr	r3, [r3, #0]
 81069ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81069f0:	693b      	ldr	r3, [r7, #16]
 81069f2:	43db      	mvns	r3, r3
 81069f4:	69ba      	ldr	r2, [r7, #24]
 81069f6:	4013      	ands	r3, r2
 81069f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81069fa:	683b      	ldr	r3, [r7, #0]
 81069fc:	685b      	ldr	r3, [r3, #4]
 81069fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8106a02:	2b00      	cmp	r3, #0
 8106a04:	d003      	beq.n	8106a0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8106a06:	69ba      	ldr	r2, [r7, #24]
 8106a08:	693b      	ldr	r3, [r7, #16]
 8106a0a:	4313      	orrs	r3, r2
 8106a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106a12:	69bb      	ldr	r3, [r7, #24]
 8106a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106a1a:	685b      	ldr	r3, [r3, #4]
 8106a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106a1e:	693b      	ldr	r3, [r7, #16]
 8106a20:	43db      	mvns	r3, r3
 8106a22:	69ba      	ldr	r2, [r7, #24]
 8106a24:	4013      	ands	r3, r2
 8106a26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8106a28:	683b      	ldr	r3, [r7, #0]
 8106a2a:	685b      	ldr	r3, [r3, #4]
 8106a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8106a30:	2b00      	cmp	r3, #0
 8106a32:	d003      	beq.n	8106a3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8106a34:	69ba      	ldr	r2, [r7, #24]
 8106a36:	693b      	ldr	r3, [r7, #16]
 8106a38:	4313      	orrs	r3, r2
 8106a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106a40:	69bb      	ldr	r3, [r7, #24]
 8106a42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8106a44:	697b      	ldr	r3, [r7, #20]
 8106a46:	685b      	ldr	r3, [r3, #4]
 8106a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106a4a:	693b      	ldr	r3, [r7, #16]
 8106a4c:	43db      	mvns	r3, r3
 8106a4e:	69ba      	ldr	r2, [r7, #24]
 8106a50:	4013      	ands	r3, r2
 8106a52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8106a54:	683b      	ldr	r3, [r7, #0]
 8106a56:	685b      	ldr	r3, [r3, #4]
 8106a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106a5c:	2b00      	cmp	r3, #0
 8106a5e:	d003      	beq.n	8106a68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8106a60:	69ba      	ldr	r2, [r7, #24]
 8106a62:	693b      	ldr	r3, [r7, #16]
 8106a64:	4313      	orrs	r3, r2
 8106a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106a68:	697b      	ldr	r3, [r7, #20]
 8106a6a:	69ba      	ldr	r2, [r7, #24]
 8106a6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106a6e:	697b      	ldr	r3, [r7, #20]
 8106a70:	681b      	ldr	r3, [r3, #0]
 8106a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106a74:	693b      	ldr	r3, [r7, #16]
 8106a76:	43db      	mvns	r3, r3
 8106a78:	69ba      	ldr	r2, [r7, #24]
 8106a7a:	4013      	ands	r3, r2
 8106a7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8106a7e:	683b      	ldr	r3, [r7, #0]
 8106a80:	685b      	ldr	r3, [r3, #4]
 8106a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106a86:	2b00      	cmp	r3, #0
 8106a88:	d003      	beq.n	8106a92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8106a8a:	69ba      	ldr	r2, [r7, #24]
 8106a8c:	693b      	ldr	r3, [r7, #16]
 8106a8e:	4313      	orrs	r3, r2
 8106a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106a92:	697b      	ldr	r3, [r7, #20]
 8106a94:	69ba      	ldr	r2, [r7, #24]
 8106a96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8106a98:	69fb      	ldr	r3, [r7, #28]
 8106a9a:	3301      	adds	r3, #1
 8106a9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106a9e:	683b      	ldr	r3, [r7, #0]
 8106aa0:	681a      	ldr	r2, [r3, #0]
 8106aa2:	69fb      	ldr	r3, [r7, #28]
 8106aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8106aa8:	2b00      	cmp	r3, #0
 8106aaa:	f47f ae63 	bne.w	8106774 <HAL_GPIO_Init+0x14>
  }
}
 8106aae:	bf00      	nop
 8106ab0:	bf00      	nop
 8106ab2:	3724      	adds	r7, #36	@ 0x24
 8106ab4:	46bd      	mov	sp, r7
 8106ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106aba:	4770      	bx	lr
 8106abc:	58000400 	.word	0x58000400

08106ac0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106ac0:	b480      	push	{r7}
 8106ac2:	b083      	sub	sp, #12
 8106ac4:	af00      	add	r7, sp, #0
 8106ac6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106ac8:	4b05      	ldr	r3, [pc, #20]	@ (8106ae0 <HAL_HSEM_ActivateNotification+0x20>)
 8106aca:	681a      	ldr	r2, [r3, #0]
 8106acc:	4904      	ldr	r1, [pc, #16]	@ (8106ae0 <HAL_HSEM_ActivateNotification+0x20>)
 8106ace:	687b      	ldr	r3, [r7, #4]
 8106ad0:	4313      	orrs	r3, r2
 8106ad2:	600b      	str	r3, [r1, #0]
#endif
}
 8106ad4:	bf00      	nop
 8106ad6:	370c      	adds	r7, #12
 8106ad8:	46bd      	mov	sp, r7
 8106ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ade:	4770      	bx	lr
 8106ae0:	58026510 	.word	0x58026510

08106ae4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8106ae4:	b580      	push	{r7, lr}
 8106ae6:	b084      	sub	sp, #16
 8106ae8:	af00      	add	r7, sp, #0
 8106aea:	60f8      	str	r0, [r7, #12]
 8106aec:	460b      	mov	r3, r1
 8106aee:	607a      	str	r2, [r7, #4]
 8106af0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8106af2:	4b37      	ldr	r3, [pc, #220]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106af4:	681b      	ldr	r3, [r3, #0]
 8106af6:	f023 0201 	bic.w	r2, r3, #1
 8106afa:	4935      	ldr	r1, [pc, #212]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106afc:	68fb      	ldr	r3, [r7, #12]
 8106afe:	4313      	orrs	r3, r2
 8106b00:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8106b02:	687b      	ldr	r3, [r7, #4]
 8106b04:	2b00      	cmp	r3, #0
 8106b06:	d123      	bne.n	8106b50 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106b08:	f7fe fa5a 	bl	8104fc0 <HAL_GetCurrentCPUID>
 8106b0c:	4603      	mov	r3, r0
 8106b0e:	2b03      	cmp	r3, #3
 8106b10:	d158      	bne.n	8106bc4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8106b12:	4b2f      	ldr	r3, [pc, #188]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106b14:	691b      	ldr	r3, [r3, #16]
 8106b16:	4a2e      	ldr	r2, [pc, #184]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106b18:	f023 0301 	bic.w	r3, r3, #1
 8106b1c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8106bd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106b20:	691b      	ldr	r3, [r3, #16]
 8106b22:	4a2c      	ldr	r2, [pc, #176]	@ (8106bd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106b24:	f043 0304 	orr.w	r3, r3, #4
 8106b28:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106b2a:	f3bf 8f4f 	dsb	sy
}
 8106b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106b30:	f3bf 8f6f 	isb	sy
}
 8106b34:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106b36:	7afb      	ldrb	r3, [r7, #11]
 8106b38:	2b01      	cmp	r3, #1
 8106b3a:	d101      	bne.n	8106b40 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106b3c:	bf30      	wfi
 8106b3e:	e000      	b.n	8106b42 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106b40:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106b42:	4b24      	ldr	r3, [pc, #144]	@ (8106bd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106b44:	691b      	ldr	r3, [r3, #16]
 8106b46:	4a23      	ldr	r2, [pc, #140]	@ (8106bd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106b48:	f023 0304 	bic.w	r3, r3, #4
 8106b4c:	6113      	str	r3, [r2, #16]
 8106b4e:	e03c      	b.n	8106bca <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106b50:	687b      	ldr	r3, [r7, #4]
 8106b52:	2b01      	cmp	r3, #1
 8106b54:	d123      	bne.n	8106b9e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8106b56:	f7fe fa33 	bl	8104fc0 <HAL_GetCurrentCPUID>
 8106b5a:	4603      	mov	r3, r0
 8106b5c:	2b01      	cmp	r3, #1
 8106b5e:	d133      	bne.n	8106bc8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8106b60:	4b1b      	ldr	r3, [pc, #108]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106b62:	695b      	ldr	r3, [r3, #20]
 8106b64:	4a1a      	ldr	r2, [pc, #104]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106b66:	f023 0302 	bic.w	r3, r3, #2
 8106b6a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106b6c:	4b19      	ldr	r3, [pc, #100]	@ (8106bd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106b6e:	691b      	ldr	r3, [r3, #16]
 8106b70:	4a18      	ldr	r2, [pc, #96]	@ (8106bd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106b72:	f043 0304 	orr.w	r3, r3, #4
 8106b76:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106b78:	f3bf 8f4f 	dsb	sy
}
 8106b7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106b7e:	f3bf 8f6f 	isb	sy
}
 8106b82:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106b84:	7afb      	ldrb	r3, [r7, #11]
 8106b86:	2b01      	cmp	r3, #1
 8106b88:	d101      	bne.n	8106b8e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106b8a:	bf30      	wfi
 8106b8c:	e000      	b.n	8106b90 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106b8e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106b90:	4b10      	ldr	r3, [pc, #64]	@ (8106bd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106b92:	691b      	ldr	r3, [r3, #16]
 8106b94:	4a0f      	ldr	r2, [pc, #60]	@ (8106bd4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106b96:	f023 0304 	bic.w	r3, r3, #4
 8106b9a:	6113      	str	r3, [r2, #16]
 8106b9c:	e015      	b.n	8106bca <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106b9e:	f7fe fa0f 	bl	8104fc0 <HAL_GetCurrentCPUID>
 8106ba2:	4603      	mov	r3, r0
 8106ba4:	2b03      	cmp	r3, #3
 8106ba6:	d106      	bne.n	8106bb6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106ba8:	4b09      	ldr	r3, [pc, #36]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106baa:	691b      	ldr	r3, [r3, #16]
 8106bac:	4a08      	ldr	r2, [pc, #32]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106bae:	f023 0304 	bic.w	r3, r3, #4
 8106bb2:	6113      	str	r3, [r2, #16]
 8106bb4:	e009      	b.n	8106bca <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8106bb6:	4b06      	ldr	r3, [pc, #24]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106bb8:	695b      	ldr	r3, [r3, #20]
 8106bba:	4a05      	ldr	r2, [pc, #20]	@ (8106bd0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106bbc:	f023 0304 	bic.w	r3, r3, #4
 8106bc0:	6153      	str	r3, [r2, #20]
 8106bc2:	e002      	b.n	8106bca <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106bc4:	bf00      	nop
 8106bc6:	e000      	b.n	8106bca <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106bc8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8106bca:	3710      	adds	r7, #16
 8106bcc:	46bd      	mov	sp, r7
 8106bce:	bd80      	pop	{r7, pc}
 8106bd0:	58024800 	.word	0x58024800
 8106bd4:	e000ed00 	.word	0xe000ed00

08106bd8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106bd8:	b580      	push	{r7, lr}
 8106bda:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106bdc:	f7fe f9f0 	bl	8104fc0 <HAL_GetCurrentCPUID>
 8106be0:	4603      	mov	r3, r0
 8106be2:	2b03      	cmp	r3, #3
 8106be4:	d101      	bne.n	8106bea <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106be6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106be8:	e001      	b.n	8106bee <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8106bea:	bf40      	sev
    __WFE ();
 8106bec:	bf20      	wfe
}
 8106bee:	bf00      	nop
 8106bf0:	bd80      	pop	{r7, pc}
	...

08106bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106bf4:	b480      	push	{r7}
 8106bf6:	b089      	sub	sp, #36	@ 0x24
 8106bf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106bfa:	4bb3      	ldr	r3, [pc, #716]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106bfc:	691b      	ldr	r3, [r3, #16]
 8106bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8106c02:	2b18      	cmp	r3, #24
 8106c04:	f200 8155 	bhi.w	8106eb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8106c08:	a201      	add	r2, pc, #4	@ (adr r2, 8106c10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8106c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106c0e:	bf00      	nop
 8106c10:	08106c75 	.word	0x08106c75
 8106c14:	08106eb3 	.word	0x08106eb3
 8106c18:	08106eb3 	.word	0x08106eb3
 8106c1c:	08106eb3 	.word	0x08106eb3
 8106c20:	08106eb3 	.word	0x08106eb3
 8106c24:	08106eb3 	.word	0x08106eb3
 8106c28:	08106eb3 	.word	0x08106eb3
 8106c2c:	08106eb3 	.word	0x08106eb3
 8106c30:	08106c9b 	.word	0x08106c9b
 8106c34:	08106eb3 	.word	0x08106eb3
 8106c38:	08106eb3 	.word	0x08106eb3
 8106c3c:	08106eb3 	.word	0x08106eb3
 8106c40:	08106eb3 	.word	0x08106eb3
 8106c44:	08106eb3 	.word	0x08106eb3
 8106c48:	08106eb3 	.word	0x08106eb3
 8106c4c:	08106eb3 	.word	0x08106eb3
 8106c50:	08106ca1 	.word	0x08106ca1
 8106c54:	08106eb3 	.word	0x08106eb3
 8106c58:	08106eb3 	.word	0x08106eb3
 8106c5c:	08106eb3 	.word	0x08106eb3
 8106c60:	08106eb3 	.word	0x08106eb3
 8106c64:	08106eb3 	.word	0x08106eb3
 8106c68:	08106eb3 	.word	0x08106eb3
 8106c6c:	08106eb3 	.word	0x08106eb3
 8106c70:	08106ca7 	.word	0x08106ca7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106c74:	4b94      	ldr	r3, [pc, #592]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c76:	681b      	ldr	r3, [r3, #0]
 8106c78:	f003 0320 	and.w	r3, r3, #32
 8106c7c:	2b00      	cmp	r3, #0
 8106c7e:	d009      	beq.n	8106c94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106c80:	4b91      	ldr	r3, [pc, #580]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c82:	681b      	ldr	r3, [r3, #0]
 8106c84:	08db      	lsrs	r3, r3, #3
 8106c86:	f003 0303 	and.w	r3, r3, #3
 8106c8a:	4a90      	ldr	r2, [pc, #576]	@ (8106ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8106c90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8106c92:	e111      	b.n	8106eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106c94:	4b8d      	ldr	r3, [pc, #564]	@ (8106ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106c96:	61bb      	str	r3, [r7, #24]
      break;
 8106c98:	e10e      	b.n	8106eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8106c9a:	4b8d      	ldr	r3, [pc, #564]	@ (8106ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106c9c:	61bb      	str	r3, [r7, #24]
      break;
 8106c9e:	e10b      	b.n	8106eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8106ca0:	4b8c      	ldr	r3, [pc, #560]	@ (8106ed4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8106ca2:	61bb      	str	r3, [r7, #24]
      break;
 8106ca4:	e108      	b.n	8106eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106ca6:	4b88      	ldr	r3, [pc, #544]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106caa:	f003 0303 	and.w	r3, r3, #3
 8106cae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8106cb0:	4b85      	ldr	r3, [pc, #532]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106cb4:	091b      	lsrs	r3, r3, #4
 8106cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106cba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106cbc:	4b82      	ldr	r3, [pc, #520]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106cc0:	f003 0301 	and.w	r3, r3, #1
 8106cc4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106cc6:	4b80      	ldr	r3, [pc, #512]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106cca:	08db      	lsrs	r3, r3, #3
 8106ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106cd0:	68fa      	ldr	r2, [r7, #12]
 8106cd2:	fb02 f303 	mul.w	r3, r2, r3
 8106cd6:	ee07 3a90 	vmov	s15, r3
 8106cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cde:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8106ce2:	693b      	ldr	r3, [r7, #16]
 8106ce4:	2b00      	cmp	r3, #0
 8106ce6:	f000 80e1 	beq.w	8106eac <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8106cea:	697b      	ldr	r3, [r7, #20]
 8106cec:	2b02      	cmp	r3, #2
 8106cee:	f000 8083 	beq.w	8106df8 <HAL_RCC_GetSysClockFreq+0x204>
 8106cf2:	697b      	ldr	r3, [r7, #20]
 8106cf4:	2b02      	cmp	r3, #2
 8106cf6:	f200 80a1 	bhi.w	8106e3c <HAL_RCC_GetSysClockFreq+0x248>
 8106cfa:	697b      	ldr	r3, [r7, #20]
 8106cfc:	2b00      	cmp	r3, #0
 8106cfe:	d003      	beq.n	8106d08 <HAL_RCC_GetSysClockFreq+0x114>
 8106d00:	697b      	ldr	r3, [r7, #20]
 8106d02:	2b01      	cmp	r3, #1
 8106d04:	d056      	beq.n	8106db4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106d06:	e099      	b.n	8106e3c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106d08:	4b6f      	ldr	r3, [pc, #444]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d0a:	681b      	ldr	r3, [r3, #0]
 8106d0c:	f003 0320 	and.w	r3, r3, #32
 8106d10:	2b00      	cmp	r3, #0
 8106d12:	d02d      	beq.n	8106d70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106d14:	4b6c      	ldr	r3, [pc, #432]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d16:	681b      	ldr	r3, [r3, #0]
 8106d18:	08db      	lsrs	r3, r3, #3
 8106d1a:	f003 0303 	and.w	r3, r3, #3
 8106d1e:	4a6b      	ldr	r2, [pc, #428]	@ (8106ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106d20:	fa22 f303 	lsr.w	r3, r2, r3
 8106d24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	ee07 3a90 	vmov	s15, r3
 8106d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d30:	693b      	ldr	r3, [r7, #16]
 8106d32:	ee07 3a90 	vmov	s15, r3
 8106d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d3e:	4b62      	ldr	r3, [pc, #392]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d46:	ee07 3a90 	vmov	s15, r3
 8106d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106d52:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8106d6e:	e087      	b.n	8106e80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106d70:	693b      	ldr	r3, [r7, #16]
 8106d72:	ee07 3a90 	vmov	s15, r3
 8106d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d7a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8106edc <HAL_RCC_GetSysClockFreq+0x2e8>
 8106d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d82:	4b51      	ldr	r3, [pc, #324]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d8a:	ee07 3a90 	vmov	s15, r3
 8106d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8106d96:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106dae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106db2:	e065      	b.n	8106e80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106db4:	693b      	ldr	r3, [r7, #16]
 8106db6:	ee07 3a90 	vmov	s15, r3
 8106dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106dbe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8106ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106dc6:	4b40      	ldr	r3, [pc, #256]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106dce:	ee07 3a90 	vmov	s15, r3
 8106dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8106dda:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106df2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106df6:	e043      	b.n	8106e80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106df8:	693b      	ldr	r3, [r7, #16]
 8106dfa:	ee07 3a90 	vmov	s15, r3
 8106dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8106ee4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e12:	ee07 3a90 	vmov	s15, r3
 8106e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8106e1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106e3a:	e021      	b.n	8106e80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106e3c:	693b      	ldr	r3, [r7, #16]
 8106e3e:	ee07 3a90 	vmov	s15, r3
 8106e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8106ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e56:	ee07 3a90 	vmov	s15, r3
 8106e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106e62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106e7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106e80:	4b11      	ldr	r3, [pc, #68]	@ (8106ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106e84:	0a5b      	lsrs	r3, r3, #9
 8106e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106e8a:	3301      	adds	r3, #1
 8106e8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106e8e:	683b      	ldr	r3, [r7, #0]
 8106e90:	ee07 3a90 	vmov	s15, r3
 8106e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8106e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ea4:	ee17 3a90 	vmov	r3, s15
 8106ea8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106eaa:	e005      	b.n	8106eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106eac:	2300      	movs	r3, #0
 8106eae:	61bb      	str	r3, [r7, #24]
      break;
 8106eb0:	e002      	b.n	8106eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8106eb2:	4b07      	ldr	r3, [pc, #28]	@ (8106ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106eb4:	61bb      	str	r3, [r7, #24]
      break;
 8106eb6:	bf00      	nop
  }

  return sysclockfreq;
 8106eb8:	69bb      	ldr	r3, [r7, #24]
}
 8106eba:	4618      	mov	r0, r3
 8106ebc:	3724      	adds	r7, #36	@ 0x24
 8106ebe:	46bd      	mov	sp, r7
 8106ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ec4:	4770      	bx	lr
 8106ec6:	bf00      	nop
 8106ec8:	58024400 	.word	0x58024400
 8106ecc:	03d09000 	.word	0x03d09000
 8106ed0:	003d0900 	.word	0x003d0900
 8106ed4:	017d7840 	.word	0x017d7840
 8106ed8:	46000000 	.word	0x46000000
 8106edc:	4c742400 	.word	0x4c742400
 8106ee0:	4a742400 	.word	0x4a742400
 8106ee4:	4bbebc20 	.word	0x4bbebc20

08106ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106ee8:	b580      	push	{r7, lr}
 8106eea:	b082      	sub	sp, #8
 8106eec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106eee:	f7ff fe81 	bl	8106bf4 <HAL_RCC_GetSysClockFreq>
 8106ef2:	4602      	mov	r2, r0
 8106ef4:	4b11      	ldr	r3, [pc, #68]	@ (8106f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8106ef6:	699b      	ldr	r3, [r3, #24]
 8106ef8:	0a1b      	lsrs	r3, r3, #8
 8106efa:	f003 030f 	and.w	r3, r3, #15
 8106efe:	4910      	ldr	r1, [pc, #64]	@ (8106f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8106f00:	5ccb      	ldrb	r3, [r1, r3]
 8106f02:	f003 031f 	and.w	r3, r3, #31
 8106f06:	fa22 f303 	lsr.w	r3, r2, r3
 8106f0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8106f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8106f0e:	699b      	ldr	r3, [r3, #24]
 8106f10:	f003 030f 	and.w	r3, r3, #15
 8106f14:	4a0a      	ldr	r2, [pc, #40]	@ (8106f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8106f16:	5cd3      	ldrb	r3, [r2, r3]
 8106f18:	f003 031f 	and.w	r3, r3, #31
 8106f1c:	687a      	ldr	r2, [r7, #4]
 8106f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8106f22:	4a08      	ldr	r2, [pc, #32]	@ (8106f44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106f24:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106f26:	4b07      	ldr	r3, [pc, #28]	@ (8106f44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	4a07      	ldr	r2, [pc, #28]	@ (8106f48 <HAL_RCC_GetHCLKFreq+0x60>)
 8106f2c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106f2e:	4b05      	ldr	r3, [pc, #20]	@ (8106f44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106f30:	681b      	ldr	r3, [r3, #0]
}
 8106f32:	4618      	mov	r0, r3
 8106f34:	3708      	adds	r7, #8
 8106f36:	46bd      	mov	sp, r7
 8106f38:	bd80      	pop	{r7, pc}
 8106f3a:	bf00      	nop
 8106f3c:	58024400 	.word	0x58024400
 8106f40:	0811ef30 	.word	0x0811ef30
 8106f44:	100001b8 	.word	0x100001b8
 8106f48:	100001b4 	.word	0x100001b4

08106f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106f4c:	b580      	push	{r7, lr}
 8106f4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106f50:	f7ff ffca 	bl	8106ee8 <HAL_RCC_GetHCLKFreq>
 8106f54:	4602      	mov	r2, r0
 8106f56:	4b06      	ldr	r3, [pc, #24]	@ (8106f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106f58:	69db      	ldr	r3, [r3, #28]
 8106f5a:	091b      	lsrs	r3, r3, #4
 8106f5c:	f003 0307 	and.w	r3, r3, #7
 8106f60:	4904      	ldr	r1, [pc, #16]	@ (8106f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106f62:	5ccb      	ldrb	r3, [r1, r3]
 8106f64:	f003 031f 	and.w	r3, r3, #31
 8106f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106f6c:	4618      	mov	r0, r3
 8106f6e:	bd80      	pop	{r7, pc}
 8106f70:	58024400 	.word	0x58024400
 8106f74:	0811ef30 	.word	0x0811ef30

08106f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106f78:	b580      	push	{r7, lr}
 8106f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106f7c:	f7ff ffb4 	bl	8106ee8 <HAL_RCC_GetHCLKFreq>
 8106f80:	4602      	mov	r2, r0
 8106f82:	4b06      	ldr	r3, [pc, #24]	@ (8106f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8106f84:	69db      	ldr	r3, [r3, #28]
 8106f86:	0a1b      	lsrs	r3, r3, #8
 8106f88:	f003 0307 	and.w	r3, r3, #7
 8106f8c:	4904      	ldr	r1, [pc, #16]	@ (8106fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106f8e:	5ccb      	ldrb	r3, [r1, r3]
 8106f90:	f003 031f 	and.w	r3, r3, #31
 8106f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106f98:	4618      	mov	r0, r3
 8106f9a:	bd80      	pop	{r7, pc}
 8106f9c:	58024400 	.word	0x58024400
 8106fa0:	0811ef30 	.word	0x0811ef30

08106fa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106fa8:	b0cc      	sub	sp, #304	@ 0x130
 8106faa:	af00      	add	r7, sp, #0
 8106fac:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106fb0:	2300      	movs	r3, #0
 8106fb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106fb6:	2300      	movs	r3, #0
 8106fb8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fc4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8106fc8:	2500      	movs	r5, #0
 8106fca:	ea54 0305 	orrs.w	r3, r4, r5
 8106fce:	d049      	beq.n	8107064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106fd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106fda:	d02f      	beq.n	810703c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106fdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106fe0:	d828      	bhi.n	8107034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106fe2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106fe6:	d01a      	beq.n	810701e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106fe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106fec:	d822      	bhi.n	8107034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106fee:	2b00      	cmp	r3, #0
 8106ff0:	d003      	beq.n	8106ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8106ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106ff6:	d007      	beq.n	8107008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106ff8:	e01c      	b.n	8107034 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106ffa:	4bb8      	ldr	r3, [pc, #736]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106ffe:	4ab7      	ldr	r2, [pc, #732]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107004:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107006:	e01a      	b.n	810703e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810700c:	3308      	adds	r3, #8
 810700e:	2102      	movs	r1, #2
 8107010:	4618      	mov	r0, r3
 8107012:	f001 fccf 	bl	81089b4 <RCCEx_PLL2_Config>
 8107016:	4603      	mov	r3, r0
 8107018:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810701c:	e00f      	b.n	810703e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810701e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107022:	3328      	adds	r3, #40	@ 0x28
 8107024:	2102      	movs	r1, #2
 8107026:	4618      	mov	r0, r3
 8107028:	f001 fd76 	bl	8108b18 <RCCEx_PLL3_Config>
 810702c:	4603      	mov	r3, r0
 810702e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107032:	e004      	b.n	810703e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107034:	2301      	movs	r3, #1
 8107036:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810703a:	e000      	b.n	810703e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810703c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810703e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107042:	2b00      	cmp	r3, #0
 8107044:	d10a      	bne.n	810705c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8107046:	4ba5      	ldr	r3, [pc, #660]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810704a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810704e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107054:	4aa1      	ldr	r2, [pc, #644]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107056:	430b      	orrs	r3, r1
 8107058:	6513      	str	r3, [r2, #80]	@ 0x50
 810705a:	e003      	b.n	8107064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810705c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107060:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8107064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107068:	e9d3 2300 	ldrd	r2, r3, [r3]
 810706c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8107070:	f04f 0900 	mov.w	r9, #0
 8107074:	ea58 0309 	orrs.w	r3, r8, r9
 8107078:	d047      	beq.n	810710a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810707a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810707e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107080:	2b04      	cmp	r3, #4
 8107082:	d82a      	bhi.n	81070da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8107084:	a201      	add	r2, pc, #4	@ (adr r2, 810708c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8107086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810708a:	bf00      	nop
 810708c:	081070a1 	.word	0x081070a1
 8107090:	081070af 	.word	0x081070af
 8107094:	081070c5 	.word	0x081070c5
 8107098:	081070e3 	.word	0x081070e3
 810709c:	081070e3 	.word	0x081070e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81070a0:	4b8e      	ldr	r3, [pc, #568]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81070a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070a4:	4a8d      	ldr	r2, [pc, #564]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81070a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81070aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81070ac:	e01a      	b.n	81070e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81070ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070b2:	3308      	adds	r3, #8
 81070b4:	2100      	movs	r1, #0
 81070b6:	4618      	mov	r0, r3
 81070b8:	f001 fc7c 	bl	81089b4 <RCCEx_PLL2_Config>
 81070bc:	4603      	mov	r3, r0
 81070be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81070c2:	e00f      	b.n	81070e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81070c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070c8:	3328      	adds	r3, #40	@ 0x28
 81070ca:	2100      	movs	r1, #0
 81070cc:	4618      	mov	r0, r3
 81070ce:	f001 fd23 	bl	8108b18 <RCCEx_PLL3_Config>
 81070d2:	4603      	mov	r3, r0
 81070d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81070d8:	e004      	b.n	81070e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81070da:	2301      	movs	r3, #1
 81070dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81070e0:	e000      	b.n	81070e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81070e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81070e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81070e8:	2b00      	cmp	r3, #0
 81070ea:	d10a      	bne.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81070ec:	4b7b      	ldr	r3, [pc, #492]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81070ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81070f0:	f023 0107 	bic.w	r1, r3, #7
 81070f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81070fa:	4a78      	ldr	r2, [pc, #480]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81070fc:	430b      	orrs	r3, r1
 81070fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8107100:	e003      	b.n	810710a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107102:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107106:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810710a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107112:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8107116:	f04f 0b00 	mov.w	fp, #0
 810711a:	ea5a 030b 	orrs.w	r3, sl, fp
 810711e:	d04c      	beq.n	81071ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8107120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810712a:	d030      	beq.n	810718e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810712c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107130:	d829      	bhi.n	8107186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107132:	2bc0      	cmp	r3, #192	@ 0xc0
 8107134:	d02d      	beq.n	8107192 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8107136:	2bc0      	cmp	r3, #192	@ 0xc0
 8107138:	d825      	bhi.n	8107186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810713a:	2b80      	cmp	r3, #128	@ 0x80
 810713c:	d018      	beq.n	8107170 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810713e:	2b80      	cmp	r3, #128	@ 0x80
 8107140:	d821      	bhi.n	8107186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107142:	2b00      	cmp	r3, #0
 8107144:	d002      	beq.n	810714c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8107146:	2b40      	cmp	r3, #64	@ 0x40
 8107148:	d007      	beq.n	810715a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810714a:	e01c      	b.n	8107186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810714c:	4b63      	ldr	r3, [pc, #396]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810714e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107150:	4a62      	ldr	r2, [pc, #392]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107158:	e01c      	b.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810715a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810715e:	3308      	adds	r3, #8
 8107160:	2100      	movs	r1, #0
 8107162:	4618      	mov	r0, r3
 8107164:	f001 fc26 	bl	81089b4 <RCCEx_PLL2_Config>
 8107168:	4603      	mov	r3, r0
 810716a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810716e:	e011      	b.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107170:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107174:	3328      	adds	r3, #40	@ 0x28
 8107176:	2100      	movs	r1, #0
 8107178:	4618      	mov	r0, r3
 810717a:	f001 fccd 	bl	8108b18 <RCCEx_PLL3_Config>
 810717e:	4603      	mov	r3, r0
 8107180:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107184:	e006      	b.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107186:	2301      	movs	r3, #1
 8107188:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810718c:	e002      	b.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810718e:	bf00      	nop
 8107190:	e000      	b.n	8107194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8107192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107194:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107198:	2b00      	cmp	r3, #0
 810719a:	d10a      	bne.n	81071b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810719c:	4b4f      	ldr	r3, [pc, #316]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810719e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81071a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81071a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81071aa:	4a4c      	ldr	r2, [pc, #304]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81071ac:	430b      	orrs	r3, r1
 81071ae:	6513      	str	r3, [r2, #80]	@ 0x50
 81071b0:	e003      	b.n	81071ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81071b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81071ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81071c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 81071ca:	2300      	movs	r3, #0
 81071cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 81071d0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 81071d4:	460b      	mov	r3, r1
 81071d6:	4313      	orrs	r3, r2
 81071d8:	d053      	beq.n	8107282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81071da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81071e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81071e6:	d035      	beq.n	8107254 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81071e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81071ec:	d82e      	bhi.n	810724c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81071ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81071f2:	d031      	beq.n	8107258 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81071f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81071f8:	d828      	bhi.n	810724c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81071fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81071fe:	d01a      	beq.n	8107236 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8107200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107204:	d822      	bhi.n	810724c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107206:	2b00      	cmp	r3, #0
 8107208:	d003      	beq.n	8107212 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810720a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810720e:	d007      	beq.n	8107220 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8107210:	e01c      	b.n	810724c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107212:	4b32      	ldr	r3, [pc, #200]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107216:	4a31      	ldr	r2, [pc, #196]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810721c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810721e:	e01c      	b.n	810725a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107224:	3308      	adds	r3, #8
 8107226:	2100      	movs	r1, #0
 8107228:	4618      	mov	r0, r3
 810722a:	f001 fbc3 	bl	81089b4 <RCCEx_PLL2_Config>
 810722e:	4603      	mov	r3, r0
 8107230:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8107234:	e011      	b.n	810725a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107236:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810723a:	3328      	adds	r3, #40	@ 0x28
 810723c:	2100      	movs	r1, #0
 810723e:	4618      	mov	r0, r3
 8107240:	f001 fc6a 	bl	8108b18 <RCCEx_PLL3_Config>
 8107244:	4603      	mov	r3, r0
 8107246:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810724a:	e006      	b.n	810725a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810724c:	2301      	movs	r3, #1
 810724e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107252:	e002      	b.n	810725a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8107254:	bf00      	nop
 8107256:	e000      	b.n	810725a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8107258:	bf00      	nop
    }

    if (ret == HAL_OK)
 810725a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810725e:	2b00      	cmp	r3, #0
 8107260:	d10b      	bne.n	810727a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8107262:	4b1e      	ldr	r3, [pc, #120]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107266:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810726a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810726e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8107272:	4a1a      	ldr	r2, [pc, #104]	@ (81072dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107274:	430b      	orrs	r3, r1
 8107276:	6593      	str	r3, [r2, #88]	@ 0x58
 8107278:	e003      	b.n	8107282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810727a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810727e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8107282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107286:	e9d3 2300 	ldrd	r2, r3, [r3]
 810728a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810728e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8107292:	2300      	movs	r3, #0
 8107294:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8107298:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810729c:	460b      	mov	r3, r1
 810729e:	4313      	orrs	r3, r2
 81072a0:	d056      	beq.n	8107350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81072a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81072aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81072ae:	d038      	beq.n	8107322 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81072b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81072b4:	d831      	bhi.n	810731a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81072b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81072ba:	d034      	beq.n	8107326 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81072bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81072c0:	d82b      	bhi.n	810731a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81072c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81072c6:	d01d      	beq.n	8107304 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81072c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81072cc:	d825      	bhi.n	810731a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81072ce:	2b00      	cmp	r3, #0
 81072d0:	d006      	beq.n	81072e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81072d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81072d6:	d00a      	beq.n	81072ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81072d8:	e01f      	b.n	810731a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81072da:	bf00      	nop
 81072dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81072e0:	4ba2      	ldr	r3, [pc, #648]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072e4:	4aa1      	ldr	r2, [pc, #644]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81072e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81072ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81072ec:	e01c      	b.n	8107328 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81072ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072f2:	3308      	adds	r3, #8
 81072f4:	2100      	movs	r1, #0
 81072f6:	4618      	mov	r0, r3
 81072f8:	f001 fb5c 	bl	81089b4 <RCCEx_PLL2_Config>
 81072fc:	4603      	mov	r3, r0
 81072fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8107302:	e011      	b.n	8107328 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107308:	3328      	adds	r3, #40	@ 0x28
 810730a:	2100      	movs	r1, #0
 810730c:	4618      	mov	r0, r3
 810730e:	f001 fc03 	bl	8108b18 <RCCEx_PLL3_Config>
 8107312:	4603      	mov	r3, r0
 8107314:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107318:	e006      	b.n	8107328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810731a:	2301      	movs	r3, #1
 810731c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107320:	e002      	b.n	8107328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8107322:	bf00      	nop
 8107324:	e000      	b.n	8107328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8107326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107328:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810732c:	2b00      	cmp	r3, #0
 810732e:	d10b      	bne.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8107330:	4b8e      	ldr	r3, [pc, #568]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107334:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8107338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810733c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8107340:	4a8a      	ldr	r2, [pc, #552]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107342:	430b      	orrs	r3, r1
 8107344:	6593      	str	r3, [r2, #88]	@ 0x58
 8107346:	e003      	b.n	8107350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107348:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810734c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8107350:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107358:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810735c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8107360:	2300      	movs	r3, #0
 8107362:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8107366:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810736a:	460b      	mov	r3, r1
 810736c:	4313      	orrs	r3, r2
 810736e:	d03a      	beq.n	81073e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8107370:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107376:	2b30      	cmp	r3, #48	@ 0x30
 8107378:	d01f      	beq.n	81073ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 810737a:	2b30      	cmp	r3, #48	@ 0x30
 810737c:	d819      	bhi.n	81073b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810737e:	2b20      	cmp	r3, #32
 8107380:	d00c      	beq.n	810739c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8107382:	2b20      	cmp	r3, #32
 8107384:	d815      	bhi.n	81073b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8107386:	2b00      	cmp	r3, #0
 8107388:	d019      	beq.n	81073be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810738a:	2b10      	cmp	r3, #16
 810738c:	d111      	bne.n	81073b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810738e:	4b77      	ldr	r3, [pc, #476]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107392:	4a76      	ldr	r2, [pc, #472]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107398:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810739a:	e011      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810739c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073a0:	3308      	adds	r3, #8
 81073a2:	2102      	movs	r1, #2
 81073a4:	4618      	mov	r0, r3
 81073a6:	f001 fb05 	bl	81089b4 <RCCEx_PLL2_Config>
 81073aa:	4603      	mov	r3, r0
 81073ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81073b0:	e006      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81073b2:	2301      	movs	r3, #1
 81073b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81073b8:	e002      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81073ba:	bf00      	nop
 81073bc:	e000      	b.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81073be:	bf00      	nop
    }

    if (ret == HAL_OK)
 81073c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81073c4:	2b00      	cmp	r3, #0
 81073c6:	d10a      	bne.n	81073de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81073c8:	4b68      	ldr	r3, [pc, #416]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81073ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81073cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81073d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81073d6:	4a65      	ldr	r2, [pc, #404]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81073d8:	430b      	orrs	r3, r1
 81073da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81073dc:	e003      	b.n	81073e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81073e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81073e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81073f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81073f6:	2300      	movs	r3, #0
 81073f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81073fc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8107400:	460b      	mov	r3, r1
 8107402:	4313      	orrs	r3, r2
 8107404:	d051      	beq.n	81074aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8107406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810740a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810740c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107410:	d035      	beq.n	810747e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8107412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107416:	d82e      	bhi.n	8107476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107418:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810741c:	d031      	beq.n	8107482 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810741e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107422:	d828      	bhi.n	8107476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107428:	d01a      	beq.n	8107460 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810742a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810742e:	d822      	bhi.n	8107476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107430:	2b00      	cmp	r3, #0
 8107432:	d003      	beq.n	810743c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8107434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107438:	d007      	beq.n	810744a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810743a:	e01c      	b.n	8107476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810743c:	4b4b      	ldr	r3, [pc, #300]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107440:	4a4a      	ldr	r2, [pc, #296]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107448:	e01c      	b.n	8107484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810744a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810744e:	3308      	adds	r3, #8
 8107450:	2100      	movs	r1, #0
 8107452:	4618      	mov	r0, r3
 8107454:	f001 faae 	bl	81089b4 <RCCEx_PLL2_Config>
 8107458:	4603      	mov	r3, r0
 810745a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810745e:	e011      	b.n	8107484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107464:	3328      	adds	r3, #40	@ 0x28
 8107466:	2100      	movs	r1, #0
 8107468:	4618      	mov	r0, r3
 810746a:	f001 fb55 	bl	8108b18 <RCCEx_PLL3_Config>
 810746e:	4603      	mov	r3, r0
 8107470:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107474:	e006      	b.n	8107484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107476:	2301      	movs	r3, #1
 8107478:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810747c:	e002      	b.n	8107484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810747e:	bf00      	nop
 8107480:	e000      	b.n	8107484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107484:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107488:	2b00      	cmp	r3, #0
 810748a:	d10a      	bne.n	81074a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810748c:	4b37      	ldr	r3, [pc, #220]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810748e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107490:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8107494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810749a:	4a34      	ldr	r2, [pc, #208]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810749c:	430b      	orrs	r3, r1
 810749e:	6513      	str	r3, [r2, #80]	@ 0x50
 81074a0:	e003      	b.n	81074aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81074a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81074aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81074b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81074ba:	2300      	movs	r3, #0
 81074bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81074c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81074c4:	460b      	mov	r3, r1
 81074c6:	4313      	orrs	r3, r2
 81074c8:	d056      	beq.n	8107578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81074ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81074ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81074d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81074d4:	d033      	beq.n	810753e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81074d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81074da:	d82c      	bhi.n	8107536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81074dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81074e0:	d02f      	beq.n	8107542 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81074e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81074e6:	d826      	bhi.n	8107536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81074e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81074ec:	d02b      	beq.n	8107546 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81074ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81074f2:	d820      	bhi.n	8107536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81074f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81074f8:	d012      	beq.n	8107520 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81074fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81074fe:	d81a      	bhi.n	8107536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107500:	2b00      	cmp	r3, #0
 8107502:	d022      	beq.n	810754a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8107504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107508:	d115      	bne.n	8107536 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810750a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810750e:	3308      	adds	r3, #8
 8107510:	2101      	movs	r1, #1
 8107512:	4618      	mov	r0, r3
 8107514:	f001 fa4e 	bl	81089b4 <RCCEx_PLL2_Config>
 8107518:	4603      	mov	r3, r0
 810751a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810751e:	e015      	b.n	810754c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107520:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107524:	3328      	adds	r3, #40	@ 0x28
 8107526:	2101      	movs	r1, #1
 8107528:	4618      	mov	r0, r3
 810752a:	f001 faf5 	bl	8108b18 <RCCEx_PLL3_Config>
 810752e:	4603      	mov	r3, r0
 8107530:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8107534:	e00a      	b.n	810754c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107536:	2301      	movs	r3, #1
 8107538:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810753c:	e006      	b.n	810754c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810753e:	bf00      	nop
 8107540:	e004      	b.n	810754c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107542:	bf00      	nop
 8107544:	e002      	b.n	810754c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107546:	bf00      	nop
 8107548:	e000      	b.n	810754c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810754a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810754c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107550:	2b00      	cmp	r3, #0
 8107552:	d10d      	bne.n	8107570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8107554:	4b05      	ldr	r3, [pc, #20]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107558:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810755c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107560:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8107562:	4a02      	ldr	r2, [pc, #8]	@ (810756c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107564:	430b      	orrs	r3, r1
 8107566:	6513      	str	r3, [r2, #80]	@ 0x50
 8107568:	e006      	b.n	8107578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810756a:	bf00      	nop
 810756c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107570:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107574:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8107578:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107580:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8107584:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8107588:	2300      	movs	r3, #0
 810758a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810758e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8107592:	460b      	mov	r3, r1
 8107594:	4313      	orrs	r3, r2
 8107596:	d055      	beq.n	8107644 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8107598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810759c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81075a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81075a4:	d033      	beq.n	810760e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81075a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81075aa:	d82c      	bhi.n	8107606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81075b0:	d02f      	beq.n	8107612 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81075b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81075b6:	d826      	bhi.n	8107606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81075b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81075bc:	d02b      	beq.n	8107616 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81075be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81075c2:	d820      	bhi.n	8107606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81075c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81075c8:	d012      	beq.n	81075f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81075ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81075ce:	d81a      	bhi.n	8107606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81075d0:	2b00      	cmp	r3, #0
 81075d2:	d022      	beq.n	810761a <HAL_RCCEx_PeriphCLKConfig+0x676>
 81075d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81075d8:	d115      	bne.n	8107606 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81075da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075de:	3308      	adds	r3, #8
 81075e0:	2101      	movs	r1, #1
 81075e2:	4618      	mov	r0, r3
 81075e4:	f001 f9e6 	bl	81089b4 <RCCEx_PLL2_Config>
 81075e8:	4603      	mov	r3, r0
 81075ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81075ee:	e015      	b.n	810761c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81075f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81075f4:	3328      	adds	r3, #40	@ 0x28
 81075f6:	2101      	movs	r1, #1
 81075f8:	4618      	mov	r0, r3
 81075fa:	f001 fa8d 	bl	8108b18 <RCCEx_PLL3_Config>
 81075fe:	4603      	mov	r3, r0
 8107600:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8107604:	e00a      	b.n	810761c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8107606:	2301      	movs	r3, #1
 8107608:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810760c:	e006      	b.n	810761c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810760e:	bf00      	nop
 8107610:	e004      	b.n	810761c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107612:	bf00      	nop
 8107614:	e002      	b.n	810761c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107616:	bf00      	nop
 8107618:	e000      	b.n	810761c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810761a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810761c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107620:	2b00      	cmp	r3, #0
 8107622:	d10b      	bne.n	810763c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8107624:	4bb7      	ldr	r3, [pc, #732]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8107626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107628:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810762c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107634:	4ab3      	ldr	r2, [pc, #716]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8107636:	430b      	orrs	r3, r1
 8107638:	6593      	str	r3, [r2, #88]	@ 0x58
 810763a:	e003      	b.n	8107644 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810763c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107640:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8107644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107648:	e9d3 2300 	ldrd	r2, r3, [r3]
 810764c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8107650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8107654:	2300      	movs	r3, #0
 8107656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810765a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810765e:	460b      	mov	r3, r1
 8107660:	4313      	orrs	r3, r2
 8107662:	d02a      	beq.n	81076ba <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8107664:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810766a:	2b00      	cmp	r3, #0
 810766c:	d011      	beq.n	8107692 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810766e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107672:	d10a      	bne.n	810768a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107674:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107678:	3308      	adds	r3, #8
 810767a:	2101      	movs	r1, #1
 810767c:	4618      	mov	r0, r3
 810767e:	f001 f999 	bl	81089b4 <RCCEx_PLL2_Config>
 8107682:	4603      	mov	r3, r0
 8107684:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8107688:	e004      	b.n	8107694 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810768a:	2301      	movs	r3, #1
 810768c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107690:	e000      	b.n	8107694 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8107692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107694:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107698:	2b00      	cmp	r3, #0
 810769a:	d10a      	bne.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810769c:	4b99      	ldr	r3, [pc, #612]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810769e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81076a0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81076a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81076a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81076aa:	4a96      	ldr	r2, [pc, #600]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81076ac:	430b      	orrs	r3, r1
 81076ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81076b0:	e003      	b.n	81076ba <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81076b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81076ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076c2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81076c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81076ca:	2300      	movs	r3, #0
 81076cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81076d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81076d4:	460b      	mov	r3, r1
 81076d6:	4313      	orrs	r3, r2
 81076d8:	d037      	beq.n	810774a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81076da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81076de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81076e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81076e4:	d00e      	beq.n	8107704 <HAL_RCCEx_PeriphCLKConfig+0x760>
 81076e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81076ea:	d816      	bhi.n	810771a <HAL_RCCEx_PeriphCLKConfig+0x776>
 81076ec:	2b00      	cmp	r3, #0
 81076ee:	d018      	beq.n	8107722 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 81076f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81076f4:	d111      	bne.n	810771a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81076f6:	4b83      	ldr	r3, [pc, #524]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81076f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076fa:	4a82      	ldr	r2, [pc, #520]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81076fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8107702:	e00f      	b.n	8107724 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107704:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107708:	3308      	adds	r3, #8
 810770a:	2101      	movs	r1, #1
 810770c:	4618      	mov	r0, r3
 810770e:	f001 f951 	bl	81089b4 <RCCEx_PLL2_Config>
 8107712:	4603      	mov	r3, r0
 8107714:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8107718:	e004      	b.n	8107724 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810771a:	2301      	movs	r3, #1
 810771c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107720:	e000      	b.n	8107724 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8107722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107724:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107728:	2b00      	cmp	r3, #0
 810772a:	d10a      	bne.n	8107742 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810772c:	4b75      	ldr	r3, [pc, #468]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810772e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107730:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810773a:	4a72      	ldr	r2, [pc, #456]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810773c:	430b      	orrs	r3, r1
 810773e:	6513      	str	r3, [r2, #80]	@ 0x50
 8107740:	e003      	b.n	810774a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107746:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810774a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107752:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8107756:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810775a:	2300      	movs	r3, #0
 810775c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8107760:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8107764:	460b      	mov	r3, r1
 8107766:	4313      	orrs	r3, r2
 8107768:	d03a      	beq.n	81077e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810776a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810776e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107770:	2b03      	cmp	r3, #3
 8107772:	d81d      	bhi.n	81077b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8107774:	a201      	add	r2, pc, #4	@ (adr r2, 810777c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8107776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810777a:	bf00      	nop
 810777c:	081077b9 	.word	0x081077b9
 8107780:	0810778d 	.word	0x0810778d
 8107784:	0810779b 	.word	0x0810779b
 8107788:	081077b9 	.word	0x081077b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810778c:	4b5d      	ldr	r3, [pc, #372]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107790:	4a5c      	ldr	r2, [pc, #368]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8107792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8107798:	e00f      	b.n	81077ba <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810779a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810779e:	3308      	adds	r3, #8
 81077a0:	2102      	movs	r1, #2
 81077a2:	4618      	mov	r0, r3
 81077a4:	f001 f906 	bl	81089b4 <RCCEx_PLL2_Config>
 81077a8:	4603      	mov	r3, r0
 81077aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81077ae:	e004      	b.n	81077ba <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81077b0:	2301      	movs	r3, #1
 81077b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81077b6:	e000      	b.n	81077ba <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81077b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81077ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81077be:	2b00      	cmp	r3, #0
 81077c0:	d10a      	bne.n	81077d8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81077c2:	4b50      	ldr	r3, [pc, #320]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81077c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81077c6:	f023 0103 	bic.w	r1, r3, #3
 81077ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81077ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81077d0:	4a4c      	ldr	r2, [pc, #304]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81077d2:	430b      	orrs	r3, r1
 81077d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81077d6:	e003      	b.n	81077e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81077d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81077dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81077e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81077ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81077f0:	2300      	movs	r3, #0
 81077f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81077f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81077fa:	460b      	mov	r3, r1
 81077fc:	4313      	orrs	r3, r2
 81077fe:	f000 80a0 	beq.w	8107942 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8107802:	4b41      	ldr	r3, [pc, #260]	@ (8107908 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8107804:	681b      	ldr	r3, [r3, #0]
 8107806:	4a40      	ldr	r2, [pc, #256]	@ (8107908 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8107808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810780c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810780e:	f7fd faaf 	bl	8104d70 <HAL_GetTick>
 8107812:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107816:	e00b      	b.n	8107830 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8107818:	f7fd faaa 	bl	8104d70 <HAL_GetTick>
 810781c:	4602      	mov	r2, r0
 810781e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8107822:	1ad3      	subs	r3, r2, r3
 8107824:	2b64      	cmp	r3, #100	@ 0x64
 8107826:	d903      	bls.n	8107830 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8107828:	2303      	movs	r3, #3
 810782a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810782e:	e005      	b.n	810783c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107830:	4b35      	ldr	r3, [pc, #212]	@ (8107908 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8107832:	681b      	ldr	r3, [r3, #0]
 8107834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107838:	2b00      	cmp	r3, #0
 810783a:	d0ed      	beq.n	8107818 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810783c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107840:	2b00      	cmp	r3, #0
 8107842:	d17a      	bne.n	810793a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8107844:	4b2f      	ldr	r3, [pc, #188]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8107846:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8107848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810784c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107850:	4053      	eors	r3, r2
 8107852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107856:	2b00      	cmp	r3, #0
 8107858:	d015      	beq.n	8107886 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810785a:	4b2a      	ldr	r3, [pc, #168]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810785c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810785e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107862:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8107866:	4b27      	ldr	r3, [pc, #156]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8107868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810786a:	4a26      	ldr	r2, [pc, #152]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810786c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8107870:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8107872:	4b24      	ldr	r3, [pc, #144]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8107874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107876:	4a23      	ldr	r2, [pc, #140]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8107878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810787c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810787e:	4a21      	ldr	r2, [pc, #132]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8107880:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8107884:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8107886:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810788a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810788e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107892:	d118      	bne.n	81078c6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8107894:	f7fd fa6c 	bl	8104d70 <HAL_GetTick>
 8107898:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810789c:	e00d      	b.n	81078ba <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810789e:	f7fd fa67 	bl	8104d70 <HAL_GetTick>
 81078a2:	4602      	mov	r2, r0
 81078a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81078a8:	1ad2      	subs	r2, r2, r3
 81078aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 81078ae:	429a      	cmp	r2, r3
 81078b0:	d903      	bls.n	81078ba <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 81078b2:	2303      	movs	r3, #3
 81078b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 81078b8:	e005      	b.n	81078c6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81078ba:	4b12      	ldr	r3, [pc, #72]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81078bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81078be:	f003 0302 	and.w	r3, r3, #2
 81078c2:	2b00      	cmp	r3, #0
 81078c4:	d0eb      	beq.n	810789e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 81078c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81078ca:	2b00      	cmp	r3, #0
 81078cc:	d130      	bne.n	8107930 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81078ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81078d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81078d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81078da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81078de:	d115      	bne.n	810790c <HAL_RCCEx_PeriphCLKConfig+0x968>
 81078e0:	4b08      	ldr	r3, [pc, #32]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81078e2:	691b      	ldr	r3, [r3, #16]
 81078e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81078e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81078ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81078f0:	091b      	lsrs	r3, r3, #4
 81078f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81078f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81078fa:	4a02      	ldr	r2, [pc, #8]	@ (8107904 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81078fc:	430b      	orrs	r3, r1
 81078fe:	6113      	str	r3, [r2, #16]
 8107900:	e00a      	b.n	8107918 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8107902:	bf00      	nop
 8107904:	58024400 	.word	0x58024400
 8107908:	58024800 	.word	0x58024800
 810790c:	4bd4      	ldr	r3, [pc, #848]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810790e:	691b      	ldr	r3, [r3, #16]
 8107910:	4ad3      	ldr	r2, [pc, #844]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8107912:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8107916:	6113      	str	r3, [r2, #16]
 8107918:	4bd1      	ldr	r3, [pc, #836]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810791a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810791c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107920:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8107928:	4acd      	ldr	r2, [pc, #820]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810792a:	430b      	orrs	r3, r1
 810792c:	6713      	str	r3, [r2, #112]	@ 0x70
 810792e:	e008      	b.n	8107942 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8107930:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107934:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8107938:	e003      	b.n	8107942 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810793a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810793e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8107942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107946:	e9d3 2300 	ldrd	r2, r3, [r3]
 810794a:	f002 0301 	and.w	r3, r2, #1
 810794e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8107952:	2300      	movs	r3, #0
 8107954:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8107958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810795c:	460b      	mov	r3, r1
 810795e:	4313      	orrs	r3, r2
 8107960:	f000 808b 	beq.w	8107a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8107964:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810796c:	2b28      	cmp	r3, #40	@ 0x28
 810796e:	d86b      	bhi.n	8107a48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8107970:	a201      	add	r2, pc, #4	@ (adr r2, 8107978 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8107972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107976:	bf00      	nop
 8107978:	08107a51 	.word	0x08107a51
 810797c:	08107a49 	.word	0x08107a49
 8107980:	08107a49 	.word	0x08107a49
 8107984:	08107a49 	.word	0x08107a49
 8107988:	08107a49 	.word	0x08107a49
 810798c:	08107a49 	.word	0x08107a49
 8107990:	08107a49 	.word	0x08107a49
 8107994:	08107a49 	.word	0x08107a49
 8107998:	08107a1d 	.word	0x08107a1d
 810799c:	08107a49 	.word	0x08107a49
 81079a0:	08107a49 	.word	0x08107a49
 81079a4:	08107a49 	.word	0x08107a49
 81079a8:	08107a49 	.word	0x08107a49
 81079ac:	08107a49 	.word	0x08107a49
 81079b0:	08107a49 	.word	0x08107a49
 81079b4:	08107a49 	.word	0x08107a49
 81079b8:	08107a33 	.word	0x08107a33
 81079bc:	08107a49 	.word	0x08107a49
 81079c0:	08107a49 	.word	0x08107a49
 81079c4:	08107a49 	.word	0x08107a49
 81079c8:	08107a49 	.word	0x08107a49
 81079cc:	08107a49 	.word	0x08107a49
 81079d0:	08107a49 	.word	0x08107a49
 81079d4:	08107a49 	.word	0x08107a49
 81079d8:	08107a51 	.word	0x08107a51
 81079dc:	08107a49 	.word	0x08107a49
 81079e0:	08107a49 	.word	0x08107a49
 81079e4:	08107a49 	.word	0x08107a49
 81079e8:	08107a49 	.word	0x08107a49
 81079ec:	08107a49 	.word	0x08107a49
 81079f0:	08107a49 	.word	0x08107a49
 81079f4:	08107a49 	.word	0x08107a49
 81079f8:	08107a51 	.word	0x08107a51
 81079fc:	08107a49 	.word	0x08107a49
 8107a00:	08107a49 	.word	0x08107a49
 8107a04:	08107a49 	.word	0x08107a49
 8107a08:	08107a49 	.word	0x08107a49
 8107a0c:	08107a49 	.word	0x08107a49
 8107a10:	08107a49 	.word	0x08107a49
 8107a14:	08107a49 	.word	0x08107a49
 8107a18:	08107a51 	.word	0x08107a51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107a20:	3308      	adds	r3, #8
 8107a22:	2101      	movs	r1, #1
 8107a24:	4618      	mov	r0, r3
 8107a26:	f000 ffc5 	bl	81089b4 <RCCEx_PLL2_Config>
 8107a2a:	4603      	mov	r3, r0
 8107a2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8107a30:	e00f      	b.n	8107a52 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107a36:	3328      	adds	r3, #40	@ 0x28
 8107a38:	2101      	movs	r1, #1
 8107a3a:	4618      	mov	r0, r3
 8107a3c:	f001 f86c 	bl	8108b18 <RCCEx_PLL3_Config>
 8107a40:	4603      	mov	r3, r0
 8107a42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8107a46:	e004      	b.n	8107a52 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107a48:	2301      	movs	r3, #1
 8107a4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107a4e:	e000      	b.n	8107a52 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8107a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107a52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107a56:	2b00      	cmp	r3, #0
 8107a58:	d10b      	bne.n	8107a72 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8107a5a:	4b81      	ldr	r3, [pc, #516]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8107a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107a5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8107a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8107a6a:	4a7d      	ldr	r2, [pc, #500]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8107a6c:	430b      	orrs	r3, r1
 8107a6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8107a70:	e003      	b.n	8107a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107a76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8107a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a82:	f002 0302 	and.w	r3, r2, #2
 8107a86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8107a8a:	2300      	movs	r3, #0
 8107a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8107a90:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8107a94:	460b      	mov	r3, r1
 8107a96:	4313      	orrs	r3, r2
 8107a98:	d042      	beq.n	8107b20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8107a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8107aa0:	2b05      	cmp	r3, #5
 8107aa2:	d825      	bhi.n	8107af0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8107aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8107aac <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8107aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107aaa:	bf00      	nop
 8107aac:	08107af9 	.word	0x08107af9
 8107ab0:	08107ac5 	.word	0x08107ac5
 8107ab4:	08107adb 	.word	0x08107adb
 8107ab8:	08107af9 	.word	0x08107af9
 8107abc:	08107af9 	.word	0x08107af9
 8107ac0:	08107af9 	.word	0x08107af9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107ac8:	3308      	adds	r3, #8
 8107aca:	2101      	movs	r1, #1
 8107acc:	4618      	mov	r0, r3
 8107ace:	f000 ff71 	bl	81089b4 <RCCEx_PLL2_Config>
 8107ad2:	4603      	mov	r3, r0
 8107ad4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107ad8:	e00f      	b.n	8107afa <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107ada:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107ade:	3328      	adds	r3, #40	@ 0x28
 8107ae0:	2101      	movs	r1, #1
 8107ae2:	4618      	mov	r0, r3
 8107ae4:	f001 f818 	bl	8108b18 <RCCEx_PLL3_Config>
 8107ae8:	4603      	mov	r3, r0
 8107aea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107aee:	e004      	b.n	8107afa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107af0:	2301      	movs	r3, #1
 8107af2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107af6:	e000      	b.n	8107afa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8107af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107afa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107afe:	2b00      	cmp	r3, #0
 8107b00:	d10a      	bne.n	8107b18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8107b02:	4b57      	ldr	r3, [pc, #348]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8107b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107b06:	f023 0107 	bic.w	r1, r3, #7
 8107b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8107b10:	4a53      	ldr	r2, [pc, #332]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8107b12:	430b      	orrs	r3, r1
 8107b14:	6553      	str	r3, [r2, #84]	@ 0x54
 8107b16:	e003      	b.n	8107b20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107b1c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8107b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b28:	f002 0304 	and.w	r3, r2, #4
 8107b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8107b30:	2300      	movs	r3, #0
 8107b32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8107b36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8107b3a:	460b      	mov	r3, r1
 8107b3c:	4313      	orrs	r3, r2
 8107b3e:	d044      	beq.n	8107bca <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8107b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107b48:	2b05      	cmp	r3, #5
 8107b4a:	d825      	bhi.n	8107b98 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8107b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8107b54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8107b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b52:	bf00      	nop
 8107b54:	08107ba1 	.word	0x08107ba1
 8107b58:	08107b6d 	.word	0x08107b6d
 8107b5c:	08107b83 	.word	0x08107b83
 8107b60:	08107ba1 	.word	0x08107ba1
 8107b64:	08107ba1 	.word	0x08107ba1
 8107b68:	08107ba1 	.word	0x08107ba1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107b70:	3308      	adds	r3, #8
 8107b72:	2101      	movs	r1, #1
 8107b74:	4618      	mov	r0, r3
 8107b76:	f000 ff1d 	bl	81089b4 <RCCEx_PLL2_Config>
 8107b7a:	4603      	mov	r3, r0
 8107b7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107b80:	e00f      	b.n	8107ba2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107b86:	3328      	adds	r3, #40	@ 0x28
 8107b88:	2101      	movs	r1, #1
 8107b8a:	4618      	mov	r0, r3
 8107b8c:	f000 ffc4 	bl	8108b18 <RCCEx_PLL3_Config>
 8107b90:	4603      	mov	r3, r0
 8107b92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107b96:	e004      	b.n	8107ba2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107b98:	2301      	movs	r3, #1
 8107b9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107b9e:	e000      	b.n	8107ba2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8107ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107ba2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107ba6:	2b00      	cmp	r3, #0
 8107ba8:	d10b      	bne.n	8107bc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8107baa:	4b2d      	ldr	r3, [pc, #180]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8107bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107bae:	f023 0107 	bic.w	r1, r3, #7
 8107bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107bba:	4a29      	ldr	r2, [pc, #164]	@ (8107c60 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8107bbc:	430b      	orrs	r3, r1
 8107bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8107bc0:	e003      	b.n	8107bca <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107bc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107bc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107bd2:	f002 0320 	and.w	r3, r2, #32
 8107bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8107bda:	2300      	movs	r3, #0
 8107bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8107be0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8107be4:	460b      	mov	r3, r1
 8107be6:	4313      	orrs	r3, r2
 8107be8:	d057      	beq.n	8107c9a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8107bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107bf6:	d035      	beq.n	8107c64 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8107bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107bfc:	d82c      	bhi.n	8107c58 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8107bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107c02:	d031      	beq.n	8107c68 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8107c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107c08:	d826      	bhi.n	8107c58 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8107c0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107c0e:	d02d      	beq.n	8107c6c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8107c10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107c14:	d820      	bhi.n	8107c58 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8107c16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107c1a:	d012      	beq.n	8107c42 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8107c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107c20:	d81a      	bhi.n	8107c58 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8107c22:	2b00      	cmp	r3, #0
 8107c24:	d024      	beq.n	8107c70 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8107c26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107c2a:	d115      	bne.n	8107c58 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107c30:	3308      	adds	r3, #8
 8107c32:	2100      	movs	r1, #0
 8107c34:	4618      	mov	r0, r3
 8107c36:	f000 febd 	bl	81089b4 <RCCEx_PLL2_Config>
 8107c3a:	4603      	mov	r3, r0
 8107c3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107c40:	e017      	b.n	8107c72 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107c46:	3328      	adds	r3, #40	@ 0x28
 8107c48:	2102      	movs	r1, #2
 8107c4a:	4618      	mov	r0, r3
 8107c4c:	f000 ff64 	bl	8108b18 <RCCEx_PLL3_Config>
 8107c50:	4603      	mov	r3, r0
 8107c52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107c56:	e00c      	b.n	8107c72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107c58:	2301      	movs	r3, #1
 8107c5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107c5e:	e008      	b.n	8107c72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8107c60:	58024400 	.word	0x58024400
        break;
 8107c64:	bf00      	nop
 8107c66:	e004      	b.n	8107c72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8107c68:	bf00      	nop
 8107c6a:	e002      	b.n	8107c72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8107c6c:	bf00      	nop
 8107c6e:	e000      	b.n	8107c72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8107c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107c72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107c76:	2b00      	cmp	r3, #0
 8107c78:	d10b      	bne.n	8107c92 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107c7a:	4bc2      	ldr	r3, [pc, #776]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107c7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8107c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107c8a:	4abe      	ldr	r2, [pc, #760]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107c8c:	430b      	orrs	r3, r1
 8107c8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8107c90:	e003      	b.n	8107c9a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107c92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107c96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8107c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ca2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8107ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8107caa:	2300      	movs	r3, #0
 8107cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8107cb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8107cb4:	460b      	mov	r3, r1
 8107cb6:	4313      	orrs	r3, r2
 8107cb8:	d055      	beq.n	8107d66 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8107cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107cc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107cc6:	d033      	beq.n	8107d30 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8107cc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107ccc:	d82c      	bhi.n	8107d28 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8107cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107cd2:	d02f      	beq.n	8107d34 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8107cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107cd8:	d826      	bhi.n	8107d28 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8107cda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107cde:	d02b      	beq.n	8107d38 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8107ce0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107ce4:	d820      	bhi.n	8107d28 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8107ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107cea:	d012      	beq.n	8107d12 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8107cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107cf0:	d81a      	bhi.n	8107d28 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8107cf2:	2b00      	cmp	r3, #0
 8107cf4:	d022      	beq.n	8107d3c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8107cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107cfa:	d115      	bne.n	8107d28 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107d00:	3308      	adds	r3, #8
 8107d02:	2100      	movs	r1, #0
 8107d04:	4618      	mov	r0, r3
 8107d06:	f000 fe55 	bl	81089b4 <RCCEx_PLL2_Config>
 8107d0a:	4603      	mov	r3, r0
 8107d0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107d10:	e015      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107d16:	3328      	adds	r3, #40	@ 0x28
 8107d18:	2102      	movs	r1, #2
 8107d1a:	4618      	mov	r0, r3
 8107d1c:	f000 fefc 	bl	8108b18 <RCCEx_PLL3_Config>
 8107d20:	4603      	mov	r3, r0
 8107d22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107d26:	e00a      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107d28:	2301      	movs	r3, #1
 8107d2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107d2e:	e006      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8107d30:	bf00      	nop
 8107d32:	e004      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8107d34:	bf00      	nop
 8107d36:	e002      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8107d38:	bf00      	nop
 8107d3a:	e000      	b.n	8107d3e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8107d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107d3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107d42:	2b00      	cmp	r3, #0
 8107d44:	d10b      	bne.n	8107d5e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8107d46:	4b8f      	ldr	r3, [pc, #572]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107d4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8107d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107d56:	4a8b      	ldr	r2, [pc, #556]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107d58:	430b      	orrs	r3, r1
 8107d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8107d5c:	e003      	b.n	8107d66 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107d5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107d62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8107d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d6e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8107d72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8107d76:	2300      	movs	r3, #0
 8107d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8107d7c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8107d80:	460b      	mov	r3, r1
 8107d82:	4313      	orrs	r3, r2
 8107d84:	d055      	beq.n	8107e32 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107d8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107d8e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107d92:	d033      	beq.n	8107dfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8107d94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107d98:	d82c      	bhi.n	8107df4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8107d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107d9e:	d02f      	beq.n	8107e00 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8107da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107da4:	d826      	bhi.n	8107df4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8107da6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107daa:	d02b      	beq.n	8107e04 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8107dac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107db0:	d820      	bhi.n	8107df4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8107db2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107db6:	d012      	beq.n	8107dde <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8107db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107dbc:	d81a      	bhi.n	8107df4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8107dbe:	2b00      	cmp	r3, #0
 8107dc0:	d022      	beq.n	8107e08 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8107dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107dc6:	d115      	bne.n	8107df4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107dcc:	3308      	adds	r3, #8
 8107dce:	2100      	movs	r1, #0
 8107dd0:	4618      	mov	r0, r3
 8107dd2:	f000 fdef 	bl	81089b4 <RCCEx_PLL2_Config>
 8107dd6:	4603      	mov	r3, r0
 8107dd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107ddc:	e015      	b.n	8107e0a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107de2:	3328      	adds	r3, #40	@ 0x28
 8107de4:	2102      	movs	r1, #2
 8107de6:	4618      	mov	r0, r3
 8107de8:	f000 fe96 	bl	8108b18 <RCCEx_PLL3_Config>
 8107dec:	4603      	mov	r3, r0
 8107dee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107df2:	e00a      	b.n	8107e0a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107df4:	2301      	movs	r3, #1
 8107df6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107dfa:	e006      	b.n	8107e0a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107dfc:	bf00      	nop
 8107dfe:	e004      	b.n	8107e0a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107e00:	bf00      	nop
 8107e02:	e002      	b.n	8107e0a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107e04:	bf00      	nop
 8107e06:	e000      	b.n	8107e0a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8107e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107e0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107e0e:	2b00      	cmp	r3, #0
 8107e10:	d10b      	bne.n	8107e2a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8107e12:	4b5c      	ldr	r3, [pc, #368]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107e16:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8107e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8107e22:	4a58      	ldr	r2, [pc, #352]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107e24:	430b      	orrs	r3, r1
 8107e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8107e28:	e003      	b.n	8107e32 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107e2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107e2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8107e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e3a:	f002 0308 	and.w	r3, r2, #8
 8107e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8107e42:	2300      	movs	r3, #0
 8107e44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8107e48:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8107e4c:	460b      	mov	r3, r1
 8107e4e:	4313      	orrs	r3, r2
 8107e50:	d01e      	beq.n	8107e90 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8107e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107e5e:	d10c      	bne.n	8107e7a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107e64:	3328      	adds	r3, #40	@ 0x28
 8107e66:	2102      	movs	r1, #2
 8107e68:	4618      	mov	r0, r3
 8107e6a:	f000 fe55 	bl	8108b18 <RCCEx_PLL3_Config>
 8107e6e:	4603      	mov	r3, r0
 8107e70:	2b00      	cmp	r3, #0
 8107e72:	d002      	beq.n	8107e7a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8107e74:	2301      	movs	r3, #1
 8107e76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107e7a:	4b42      	ldr	r3, [pc, #264]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8107e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107e8c:	430b      	orrs	r3, r1
 8107e8e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e98:	f002 0310 	and.w	r3, r2, #16
 8107e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8107ea0:	2300      	movs	r3, #0
 8107ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107ea6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8107eaa:	460b      	mov	r3, r1
 8107eac:	4313      	orrs	r3, r2
 8107eae:	d01e      	beq.n	8107eee <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8107eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107ebc:	d10c      	bne.n	8107ed8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107ec2:	3328      	adds	r3, #40	@ 0x28
 8107ec4:	2102      	movs	r1, #2
 8107ec6:	4618      	mov	r0, r3
 8107ec8:	f000 fe26 	bl	8108b18 <RCCEx_PLL3_Config>
 8107ecc:	4603      	mov	r3, r0
 8107ece:	2b00      	cmp	r3, #0
 8107ed0:	d002      	beq.n	8107ed8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8107ed2:	2301      	movs	r3, #1
 8107ed4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107edc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8107ee0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8107ee8:	4a26      	ldr	r2, [pc, #152]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107eea:	430b      	orrs	r3, r1
 8107eec:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ef6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107efa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8107efe:	2300      	movs	r3, #0
 8107f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8107f04:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107f08:	460b      	mov	r3, r1
 8107f0a:	4313      	orrs	r3, r2
 8107f0c:	d040      	beq.n	8107f90 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8107f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8107f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107f1a:	d022      	beq.n	8107f62 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8107f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107f20:	d81b      	bhi.n	8107f5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107f22:	2b00      	cmp	r3, #0
 8107f24:	d003      	beq.n	8107f2e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8107f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107f2a:	d00b      	beq.n	8107f44 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8107f2c:	e015      	b.n	8107f5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107f32:	3308      	adds	r3, #8
 8107f34:	2100      	movs	r1, #0
 8107f36:	4618      	mov	r0, r3
 8107f38:	f000 fd3c 	bl	81089b4 <RCCEx_PLL2_Config>
 8107f3c:	4603      	mov	r3, r0
 8107f3e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107f42:	e00f      	b.n	8107f64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107f48:	3328      	adds	r3, #40	@ 0x28
 8107f4a:	2102      	movs	r1, #2
 8107f4c:	4618      	mov	r0, r3
 8107f4e:	f000 fde3 	bl	8108b18 <RCCEx_PLL3_Config>
 8107f52:	4603      	mov	r3, r0
 8107f54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107f58:	e004      	b.n	8107f64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107f5a:	2301      	movs	r3, #1
 8107f5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107f60:	e000      	b.n	8107f64 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8107f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107f64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107f68:	2b00      	cmp	r3, #0
 8107f6a:	d10d      	bne.n	8107f88 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107f6c:	4b05      	ldr	r3, [pc, #20]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107f70:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8107f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107f78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8107f7c:	4a01      	ldr	r2, [pc, #4]	@ (8107f84 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8107f7e:	430b      	orrs	r3, r1
 8107f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8107f82:	e005      	b.n	8107f90 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8107f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107f88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107f8c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f98:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8107f9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8107f9e:	2300      	movs	r3, #0
 8107fa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8107fa2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8107fa6:	460b      	mov	r3, r1
 8107fa8:	4313      	orrs	r3, r2
 8107faa:	d03b      	beq.n	8108024 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8107fb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107fb8:	d01f      	beq.n	8107ffa <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8107fba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107fbe:	d818      	bhi.n	8107ff2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8107fc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107fc4:	d003      	beq.n	8107fce <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8107fc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107fca:	d007      	beq.n	8107fdc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8107fcc:	e011      	b.n	8107ff2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107fce:	4b64      	ldr	r3, [pc, #400]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107fd2:	4a63      	ldr	r2, [pc, #396]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107fda:	e00f      	b.n	8107ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107fe0:	3328      	adds	r3, #40	@ 0x28
 8107fe2:	2101      	movs	r1, #1
 8107fe4:	4618      	mov	r0, r3
 8107fe6:	f000 fd97 	bl	8108b18 <RCCEx_PLL3_Config>
 8107fea:	4603      	mov	r3, r0
 8107fec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8107ff0:	e004      	b.n	8107ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107ff2:	2301      	movs	r3, #1
 8107ff4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107ff8:	e000      	b.n	8107ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8107ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107ffc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108000:	2b00      	cmp	r3, #0
 8108002:	d10b      	bne.n	810801c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8108004:	4b56      	ldr	r3, [pc, #344]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8108006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108008:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810800c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8108014:	4a52      	ldr	r2, [pc, #328]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8108016:	430b      	orrs	r3, r1
 8108018:	6553      	str	r3, [r2, #84]	@ 0x54
 810801a:	e003      	b.n	8108024 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810801c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108020:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8108024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108028:	e9d3 2300 	ldrd	r2, r3, [r3]
 810802c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8108030:	673b      	str	r3, [r7, #112]	@ 0x70
 8108032:	2300      	movs	r3, #0
 8108034:	677b      	str	r3, [r7, #116]	@ 0x74
 8108036:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810803a:	460b      	mov	r3, r1
 810803c:	4313      	orrs	r3, r2
 810803e:	d031      	beq.n	81080a4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8108040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108046:	2b00      	cmp	r3, #0
 8108048:	d003      	beq.n	8108052 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810804a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810804e:	d007      	beq.n	8108060 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8108050:	e011      	b.n	8108076 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108052:	4b43      	ldr	r3, [pc, #268]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8108054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108056:	4a42      	ldr	r2, [pc, #264]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8108058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810805c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810805e:	e00e      	b.n	810807e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108064:	3308      	adds	r3, #8
 8108066:	2102      	movs	r1, #2
 8108068:	4618      	mov	r0, r3
 810806a:	f000 fca3 	bl	81089b4 <RCCEx_PLL2_Config>
 810806e:	4603      	mov	r3, r0
 8108070:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8108074:	e003      	b.n	810807e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8108076:	2301      	movs	r3, #1
 8108078:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810807c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810807e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108082:	2b00      	cmp	r3, #0
 8108084:	d10a      	bne.n	810809c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8108086:	4b36      	ldr	r3, [pc, #216]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8108088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810808a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810808e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108094:	4a32      	ldr	r2, [pc, #200]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8108096:	430b      	orrs	r3, r1
 8108098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810809a:	e003      	b.n	81080a4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810809c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81080a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81080a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81080b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 81080b2:	2300      	movs	r3, #0
 81080b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81080b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81080ba:	460b      	mov	r3, r1
 81080bc:	4313      	orrs	r3, r2
 81080be:	d00c      	beq.n	81080da <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81080c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81080c4:	3328      	adds	r3, #40	@ 0x28
 81080c6:	2102      	movs	r1, #2
 81080c8:	4618      	mov	r0, r3
 81080ca:	f000 fd25 	bl	8108b18 <RCCEx_PLL3_Config>
 81080ce:	4603      	mov	r3, r0
 81080d0:	2b00      	cmp	r3, #0
 81080d2:	d002      	beq.n	81080da <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 81080d4:	2301      	movs	r3, #1
 81080d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81080da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81080e6:	663b      	str	r3, [r7, #96]	@ 0x60
 81080e8:	2300      	movs	r3, #0
 81080ea:	667b      	str	r3, [r7, #100]	@ 0x64
 81080ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81080f0:	460b      	mov	r3, r1
 81080f2:	4313      	orrs	r3, r2
 81080f4:	d03a      	beq.n	810816c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 81080f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81080fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81080fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108102:	d018      	beq.n	8108136 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8108104:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108108:	d811      	bhi.n	810812e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810810a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810810e:	d014      	beq.n	810813a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8108110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108114:	d80b      	bhi.n	810812e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8108116:	2b00      	cmp	r3, #0
 8108118:	d011      	beq.n	810813e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810811a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810811e:	d106      	bne.n	810812e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108120:	4b0f      	ldr	r3, [pc, #60]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8108122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108124:	4a0e      	ldr	r2, [pc, #56]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8108126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810812a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810812c:	e008      	b.n	8108140 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810812e:	2301      	movs	r3, #1
 8108130:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8108134:	e004      	b.n	8108140 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8108136:	bf00      	nop
 8108138:	e002      	b.n	8108140 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810813a:	bf00      	nop
 810813c:	e000      	b.n	8108140 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810813e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108140:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108144:	2b00      	cmp	r3, #0
 8108146:	d10d      	bne.n	8108164 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8108148:	4b05      	ldr	r3, [pc, #20]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810814a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810814c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8108150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108158:	4a01      	ldr	r2, [pc, #4]	@ (8108160 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810815a:	430b      	orrs	r3, r1
 810815c:	6553      	str	r3, [r2, #84]	@ 0x54
 810815e:	e005      	b.n	810816c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8108160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108164:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108168:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810816c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108174:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8108178:	65bb      	str	r3, [r7, #88]	@ 0x58
 810817a:	2300      	movs	r3, #0
 810817c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810817e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8108182:	460b      	mov	r3, r1
 8108184:	4313      	orrs	r3, r2
 8108186:	d009      	beq.n	810819c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8108188:	4baa      	ldr	r3, [pc, #680]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810818a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810818c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8108190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108196:	4aa7      	ldr	r2, [pc, #668]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8108198:	430b      	orrs	r3, r1
 810819a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810819c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081a4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81081a8:	653b      	str	r3, [r7, #80]	@ 0x50
 81081aa:	2300      	movs	r3, #0
 81081ac:	657b      	str	r3, [r7, #84]	@ 0x54
 81081ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81081b2:	460b      	mov	r3, r1
 81081b4:	4313      	orrs	r3, r2
 81081b6:	d00a      	beq.n	81081ce <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81081b8:	4b9e      	ldr	r3, [pc, #632]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81081ba:	691b      	ldr	r3, [r3, #16]
 81081bc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81081c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81081c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81081c8:	4a9a      	ldr	r2, [pc, #616]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81081ca:	430b      	orrs	r3, r1
 81081cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81081ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081d6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81081da:	64bb      	str	r3, [r7, #72]	@ 0x48
 81081dc:	2300      	movs	r3, #0
 81081de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81081e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81081e4:	460b      	mov	r3, r1
 81081e6:	4313      	orrs	r3, r2
 81081e8:	d009      	beq.n	81081fe <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81081ea:	4b92      	ldr	r3, [pc, #584]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81081ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81081ee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81081f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81081f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81081f8:	4a8e      	ldr	r2, [pc, #568]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81081fa:	430b      	orrs	r3, r1
 81081fc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81081fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108206:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810820a:	643b      	str	r3, [r7, #64]	@ 0x40
 810820c:	2300      	movs	r3, #0
 810820e:	647b      	str	r3, [r7, #68]	@ 0x44
 8108210:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8108214:	460b      	mov	r3, r1
 8108216:	4313      	orrs	r3, r2
 8108218:	d00e      	beq.n	8108238 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810821a:	4b86      	ldr	r3, [pc, #536]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810821c:	691b      	ldr	r3, [r3, #16]
 810821e:	4a85      	ldr	r2, [pc, #532]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8108220:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8108224:	6113      	str	r3, [r2, #16]
 8108226:	4b83      	ldr	r3, [pc, #524]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8108228:	6919      	ldr	r1, [r3, #16]
 810822a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810822e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8108232:	4a80      	ldr	r2, [pc, #512]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8108234:	430b      	orrs	r3, r1
 8108236:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8108238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108240:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8108244:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108246:	2300      	movs	r3, #0
 8108248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810824a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810824e:	460b      	mov	r3, r1
 8108250:	4313      	orrs	r3, r2
 8108252:	d009      	beq.n	8108268 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8108254:	4b77      	ldr	r3, [pc, #476]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8108256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108258:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810825c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108262:	4a74      	ldr	r2, [pc, #464]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8108264:	430b      	orrs	r3, r1
 8108266:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8108268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108270:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8108274:	633b      	str	r3, [r7, #48]	@ 0x30
 8108276:	2300      	movs	r3, #0
 8108278:	637b      	str	r3, [r7, #52]	@ 0x34
 810827a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810827e:	460b      	mov	r3, r1
 8108280:	4313      	orrs	r3, r2
 8108282:	d00a      	beq.n	810829a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8108284:	4b6b      	ldr	r3, [pc, #428]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8108286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108288:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810828c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108294:	4a67      	ldr	r2, [pc, #412]	@ (8108434 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8108296:	430b      	orrs	r3, r1
 8108298:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810829a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81082a2:	2100      	movs	r1, #0
 81082a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 81082a6:	f003 0301 	and.w	r3, r3, #1
 81082aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81082ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81082b0:	460b      	mov	r3, r1
 81082b2:	4313      	orrs	r3, r2
 81082b4:	d011      	beq.n	81082da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81082b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81082ba:	3308      	adds	r3, #8
 81082bc:	2100      	movs	r1, #0
 81082be:	4618      	mov	r0, r3
 81082c0:	f000 fb78 	bl	81089b4 <RCCEx_PLL2_Config>
 81082c4:	4603      	mov	r3, r0
 81082c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81082ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81082ce:	2b00      	cmp	r3, #0
 81082d0:	d003      	beq.n	81082da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81082d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81082d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81082da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81082e2:	2100      	movs	r1, #0
 81082e4:	6239      	str	r1, [r7, #32]
 81082e6:	f003 0302 	and.w	r3, r3, #2
 81082ea:	627b      	str	r3, [r7, #36]	@ 0x24
 81082ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81082f0:	460b      	mov	r3, r1
 81082f2:	4313      	orrs	r3, r2
 81082f4:	d011      	beq.n	810831a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81082f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81082fa:	3308      	adds	r3, #8
 81082fc:	2101      	movs	r1, #1
 81082fe:	4618      	mov	r0, r3
 8108300:	f000 fb58 	bl	81089b4 <RCCEx_PLL2_Config>
 8108304:	4603      	mov	r3, r0
 8108306:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810830a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810830e:	2b00      	cmp	r3, #0
 8108310:	d003      	beq.n	810831a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108312:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108316:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810831a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108322:	2100      	movs	r1, #0
 8108324:	61b9      	str	r1, [r7, #24]
 8108326:	f003 0304 	and.w	r3, r3, #4
 810832a:	61fb      	str	r3, [r7, #28]
 810832c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8108330:	460b      	mov	r3, r1
 8108332:	4313      	orrs	r3, r2
 8108334:	d011      	beq.n	810835a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810833a:	3308      	adds	r3, #8
 810833c:	2102      	movs	r1, #2
 810833e:	4618      	mov	r0, r3
 8108340:	f000 fb38 	bl	81089b4 <RCCEx_PLL2_Config>
 8108344:	4603      	mov	r3, r0
 8108346:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810834a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810834e:	2b00      	cmp	r3, #0
 8108350:	d003      	beq.n	810835a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108352:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108356:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810835a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108362:	2100      	movs	r1, #0
 8108364:	6139      	str	r1, [r7, #16]
 8108366:	f003 0308 	and.w	r3, r3, #8
 810836a:	617b      	str	r3, [r7, #20]
 810836c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8108370:	460b      	mov	r3, r1
 8108372:	4313      	orrs	r3, r2
 8108374:	d011      	beq.n	810839a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810837a:	3328      	adds	r3, #40	@ 0x28
 810837c:	2100      	movs	r1, #0
 810837e:	4618      	mov	r0, r3
 8108380:	f000 fbca 	bl	8108b18 <RCCEx_PLL3_Config>
 8108384:	4603      	mov	r3, r0
 8108386:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810838a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810838e:	2b00      	cmp	r3, #0
 8108390:	d003      	beq.n	810839a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108392:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108396:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810839a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81083a2:	2100      	movs	r1, #0
 81083a4:	60b9      	str	r1, [r7, #8]
 81083a6:	f003 0310 	and.w	r3, r3, #16
 81083aa:	60fb      	str	r3, [r7, #12]
 81083ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81083b0:	460b      	mov	r3, r1
 81083b2:	4313      	orrs	r3, r2
 81083b4:	d011      	beq.n	81083da <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81083b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81083ba:	3328      	adds	r3, #40	@ 0x28
 81083bc:	2101      	movs	r1, #1
 81083be:	4618      	mov	r0, r3
 81083c0:	f000 fbaa 	bl	8108b18 <RCCEx_PLL3_Config>
 81083c4:	4603      	mov	r3, r0
 81083c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81083ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81083ce:	2b00      	cmp	r3, #0
 81083d0:	d003      	beq.n	81083da <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81083d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81083d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81083da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81083e2:	2100      	movs	r1, #0
 81083e4:	6039      	str	r1, [r7, #0]
 81083e6:	f003 0320 	and.w	r3, r3, #32
 81083ea:	607b      	str	r3, [r7, #4]
 81083ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 81083f0:	460b      	mov	r3, r1
 81083f2:	4313      	orrs	r3, r2
 81083f4:	d011      	beq.n	810841a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81083f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81083fa:	3328      	adds	r3, #40	@ 0x28
 81083fc:	2102      	movs	r1, #2
 81083fe:	4618      	mov	r0, r3
 8108400:	f000 fb8a 	bl	8108b18 <RCCEx_PLL3_Config>
 8108404:	4603      	mov	r3, r0
 8108406:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810840a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810840e:	2b00      	cmp	r3, #0
 8108410:	d003      	beq.n	810841a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108412:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8108416:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 810841a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810841e:	2b00      	cmp	r3, #0
 8108420:	d101      	bne.n	8108426 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8108422:	2300      	movs	r3, #0
 8108424:	e000      	b.n	8108428 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8108426:	2301      	movs	r3, #1
}
 8108428:	4618      	mov	r0, r3
 810842a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810842e:	46bd      	mov	sp, r7
 8108430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108434:	58024400 	.word	0x58024400

08108438 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8108438:	b580      	push	{r7, lr}
 810843a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810843c:	f7fe fd54 	bl	8106ee8 <HAL_RCC_GetHCLKFreq>
 8108440:	4602      	mov	r2, r0
 8108442:	4b06      	ldr	r3, [pc, #24]	@ (810845c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8108444:	6a1b      	ldr	r3, [r3, #32]
 8108446:	091b      	lsrs	r3, r3, #4
 8108448:	f003 0307 	and.w	r3, r3, #7
 810844c:	4904      	ldr	r1, [pc, #16]	@ (8108460 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810844e:	5ccb      	ldrb	r3, [r1, r3]
 8108450:	f003 031f 	and.w	r3, r3, #31
 8108454:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8108458:	4618      	mov	r0, r3
 810845a:	bd80      	pop	{r7, pc}
 810845c:	58024400 	.word	0x58024400
 8108460:	0811ef30 	.word	0x0811ef30

08108464 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8108464:	b480      	push	{r7}
 8108466:	b089      	sub	sp, #36	@ 0x24
 8108468:	af00      	add	r7, sp, #0
 810846a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810846c:	4ba1      	ldr	r3, [pc, #644]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810846e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108470:	f003 0303 	and.w	r3, r3, #3
 8108474:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8108476:	4b9f      	ldr	r3, [pc, #636]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810847a:	0b1b      	lsrs	r3, r3, #12
 810847c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108480:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8108482:	4b9c      	ldr	r3, [pc, #624]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108486:	091b      	lsrs	r3, r3, #4
 8108488:	f003 0301 	and.w	r3, r3, #1
 810848c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810848e:	4b99      	ldr	r3, [pc, #612]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108492:	08db      	lsrs	r3, r3, #3
 8108494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108498:	693a      	ldr	r2, [r7, #16]
 810849a:	fb02 f303 	mul.w	r3, r2, r3
 810849e:	ee07 3a90 	vmov	s15, r3
 81084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81084aa:	697b      	ldr	r3, [r7, #20]
 81084ac:	2b00      	cmp	r3, #0
 81084ae:	f000 8111 	beq.w	81086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81084b2:	69bb      	ldr	r3, [r7, #24]
 81084b4:	2b02      	cmp	r3, #2
 81084b6:	f000 8083 	beq.w	81085c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81084ba:	69bb      	ldr	r3, [r7, #24]
 81084bc:	2b02      	cmp	r3, #2
 81084be:	f200 80a1 	bhi.w	8108604 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81084c2:	69bb      	ldr	r3, [r7, #24]
 81084c4:	2b00      	cmp	r3, #0
 81084c6:	d003      	beq.n	81084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81084c8:	69bb      	ldr	r3, [r7, #24]
 81084ca:	2b01      	cmp	r3, #1
 81084cc:	d056      	beq.n	810857c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81084ce:	e099      	b.n	8108604 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81084d0:	4b88      	ldr	r3, [pc, #544]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084d2:	681b      	ldr	r3, [r3, #0]
 81084d4:	f003 0320 	and.w	r3, r3, #32
 81084d8:	2b00      	cmp	r3, #0
 81084da:	d02d      	beq.n	8108538 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81084dc:	4b85      	ldr	r3, [pc, #532]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81084de:	681b      	ldr	r3, [r3, #0]
 81084e0:	08db      	lsrs	r3, r3, #3
 81084e2:	f003 0303 	and.w	r3, r3, #3
 81084e6:	4a84      	ldr	r2, [pc, #528]	@ (81086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81084e8:	fa22 f303 	lsr.w	r3, r2, r3
 81084ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81084ee:	68bb      	ldr	r3, [r7, #8]
 81084f0:	ee07 3a90 	vmov	s15, r3
 81084f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81084f8:	697b      	ldr	r3, [r7, #20]
 81084fa:	ee07 3a90 	vmov	s15, r3
 81084fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108506:	4b7b      	ldr	r3, [pc, #492]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810850a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810850e:	ee07 3a90 	vmov	s15, r3
 8108512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108516:	ed97 6a03 	vldr	s12, [r7, #12]
 810851a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81086fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810851e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810852a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810852e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108532:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108536:	e087      	b.n	8108648 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108538:	697b      	ldr	r3, [r7, #20]
 810853a:	ee07 3a90 	vmov	s15, r3
 810853e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108542:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108700 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8108546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810854a:	4b6a      	ldr	r3, [pc, #424]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810854e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108552:	ee07 3a90 	vmov	s15, r3
 8108556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810855a:	ed97 6a03 	vldr	s12, [r7, #12]
 810855e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81086fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810856a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810856e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810857a:	e065      	b.n	8108648 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810857c:	697b      	ldr	r3, [r7, #20]
 810857e:	ee07 3a90 	vmov	s15, r3
 8108582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108586:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108704 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810858a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810858e:	4b59      	ldr	r3, [pc, #356]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108596:	ee07 3a90 	vmov	s15, r3
 810859a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810859e:	ed97 6a03 	vldr	s12, [r7, #12]
 81085a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81086fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81085a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81085aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81085ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81085b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81085b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81085ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81085be:	e043      	b.n	8108648 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81085c0:	697b      	ldr	r3, [r7, #20]
 81085c2:	ee07 3a90 	vmov	s15, r3
 81085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108708 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81085ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81085d2:	4b48      	ldr	r3, [pc, #288]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81085d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81085da:	ee07 3a90 	vmov	s15, r3
 81085de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81085e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81085e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81086fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81085ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81085ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81085f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81085f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81085fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81085fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108602:	e021      	b.n	8108648 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108604:	697b      	ldr	r3, [r7, #20]
 8108606:	ee07 3a90 	vmov	s15, r3
 810860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810860e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108704 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108616:	4b37      	ldr	r3, [pc, #220]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810861a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810861e:	ee07 3a90 	vmov	s15, r3
 8108622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108626:	ed97 6a03 	vldr	s12, [r7, #12]
 810862a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81086fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810862e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810863a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810863e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108646:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8108648:	4b2a      	ldr	r3, [pc, #168]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810864a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810864c:	0a5b      	lsrs	r3, r3, #9
 810864e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108652:	ee07 3a90 	vmov	s15, r3
 8108656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810865a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810865e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108662:	edd7 6a07 	vldr	s13, [r7, #28]
 8108666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810866a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810866e:	ee17 2a90 	vmov	r2, s15
 8108672:	687b      	ldr	r3, [r7, #4]
 8108674:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8108676:	4b1f      	ldr	r3, [pc, #124]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810867a:	0c1b      	lsrs	r3, r3, #16
 810867c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108680:	ee07 3a90 	vmov	s15, r3
 8108684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108688:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810868c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108690:	edd7 6a07 	vldr	s13, [r7, #28]
 8108694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810869c:	ee17 2a90 	vmov	r2, s15
 81086a0:	687b      	ldr	r3, [r7, #4]
 81086a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81086a4:	4b13      	ldr	r3, [pc, #76]	@ (81086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81086a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81086a8:	0e1b      	lsrs	r3, r3, #24
 81086aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81086ae:	ee07 3a90 	vmov	s15, r3
 81086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81086ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 81086be:	edd7 6a07 	vldr	s13, [r7, #28]
 81086c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81086c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81086ca:	ee17 2a90 	vmov	r2, s15
 81086ce:	687b      	ldr	r3, [r7, #4]
 81086d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81086d2:	e008      	b.n	81086e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81086d4:	687b      	ldr	r3, [r7, #4]
 81086d6:	2200      	movs	r2, #0
 81086d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81086da:	687b      	ldr	r3, [r7, #4]
 81086dc:	2200      	movs	r2, #0
 81086de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81086e0:	687b      	ldr	r3, [r7, #4]
 81086e2:	2200      	movs	r2, #0
 81086e4:	609a      	str	r2, [r3, #8]
}
 81086e6:	bf00      	nop
 81086e8:	3724      	adds	r7, #36	@ 0x24
 81086ea:	46bd      	mov	sp, r7
 81086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086f0:	4770      	bx	lr
 81086f2:	bf00      	nop
 81086f4:	58024400 	.word	0x58024400
 81086f8:	03d09000 	.word	0x03d09000
 81086fc:	46000000 	.word	0x46000000
 8108700:	4c742400 	.word	0x4c742400
 8108704:	4a742400 	.word	0x4a742400
 8108708:	4bbebc20 	.word	0x4bbebc20

0810870c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810870c:	b480      	push	{r7}
 810870e:	b089      	sub	sp, #36	@ 0x24
 8108710:	af00      	add	r7, sp, #0
 8108712:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108714:	4ba1      	ldr	r3, [pc, #644]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108718:	f003 0303 	and.w	r3, r3, #3
 810871c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810871e:	4b9f      	ldr	r3, [pc, #636]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108722:	0d1b      	lsrs	r3, r3, #20
 8108724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108728:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810872a:	4b9c      	ldr	r3, [pc, #624]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810872e:	0a1b      	lsrs	r3, r3, #8
 8108730:	f003 0301 	and.w	r3, r3, #1
 8108734:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8108736:	4b99      	ldr	r3, [pc, #612]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810873a:	08db      	lsrs	r3, r3, #3
 810873c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108740:	693a      	ldr	r2, [r7, #16]
 8108742:	fb02 f303 	mul.w	r3, r2, r3
 8108746:	ee07 3a90 	vmov	s15, r3
 810874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810874e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8108752:	697b      	ldr	r3, [r7, #20]
 8108754:	2b00      	cmp	r3, #0
 8108756:	f000 8111 	beq.w	810897c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810875a:	69bb      	ldr	r3, [r7, #24]
 810875c:	2b02      	cmp	r3, #2
 810875e:	f000 8083 	beq.w	8108868 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8108762:	69bb      	ldr	r3, [r7, #24]
 8108764:	2b02      	cmp	r3, #2
 8108766:	f200 80a1 	bhi.w	81088ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810876a:	69bb      	ldr	r3, [r7, #24]
 810876c:	2b00      	cmp	r3, #0
 810876e:	d003      	beq.n	8108778 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108770:	69bb      	ldr	r3, [r7, #24]
 8108772:	2b01      	cmp	r3, #1
 8108774:	d056      	beq.n	8108824 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8108776:	e099      	b.n	81088ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108778:	4b88      	ldr	r3, [pc, #544]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810877a:	681b      	ldr	r3, [r3, #0]
 810877c:	f003 0320 	and.w	r3, r3, #32
 8108780:	2b00      	cmp	r3, #0
 8108782:	d02d      	beq.n	81087e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108784:	4b85      	ldr	r3, [pc, #532]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108786:	681b      	ldr	r3, [r3, #0]
 8108788:	08db      	lsrs	r3, r3, #3
 810878a:	f003 0303 	and.w	r3, r3, #3
 810878e:	4a84      	ldr	r2, [pc, #528]	@ (81089a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108790:	fa22 f303 	lsr.w	r3, r2, r3
 8108794:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108796:	68bb      	ldr	r3, [r7, #8]
 8108798:	ee07 3a90 	vmov	s15, r3
 810879c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087a0:	697b      	ldr	r3, [r7, #20]
 81087a2:	ee07 3a90 	vmov	s15, r3
 81087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087ae:	4b7b      	ldr	r3, [pc, #492]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81087b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81087b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087b6:	ee07 3a90 	vmov	s15, r3
 81087ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087be:	ed97 6a03 	vldr	s12, [r7, #12]
 81087c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81087c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81087ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81087d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81087de:	e087      	b.n	81088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81087e0:	697b      	ldr	r3, [r7, #20]
 81087e2:	ee07 3a90 	vmov	s15, r3
 81087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81087ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087f2:	4b6a      	ldr	r3, [pc, #424]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81087f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81087f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087fa:	ee07 3a90 	vmov	s15, r3
 81087fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108802:	ed97 6a03 	vldr	s12, [r7, #12]
 8108806:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810880a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810880e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810881a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810881e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108822:	e065      	b.n	81088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108824:	697b      	ldr	r3, [r7, #20]
 8108826:	ee07 3a90 	vmov	s15, r3
 810882a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810882e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108836:	4b59      	ldr	r3, [pc, #356]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810883a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810883e:	ee07 3a90 	vmov	s15, r3
 8108842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108846:	ed97 6a03 	vldr	s12, [r7, #12]
 810884a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810884e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810885a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108866:	e043      	b.n	81088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108868:	697b      	ldr	r3, [r7, #20]
 810886a:	ee07 3a90 	vmov	s15, r3
 810886e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108872:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8108876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810887a:	4b48      	ldr	r3, [pc, #288]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810887c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810887e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108882:	ee07 3a90 	vmov	s15, r3
 8108886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810888a:	ed97 6a03 	vldr	s12, [r7, #12]
 810888e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810889a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810889e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81088a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81088a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81088aa:	e021      	b.n	81088f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81088ac:	697b      	ldr	r3, [r7, #20]
 81088ae:	ee07 3a90 	vmov	s15, r3
 81088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81088ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81088be:	4b37      	ldr	r3, [pc, #220]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81088c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81088c6:	ee07 3a90 	vmov	s15, r3
 81088ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81088d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81088d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81088da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81088e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81088e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81088ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81088ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81088f0:	4b2a      	ldr	r3, [pc, #168]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81088f4:	0a5b      	lsrs	r3, r3, #9
 81088f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81088fa:	ee07 3a90 	vmov	s15, r3
 81088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108902:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108906:	ee37 7a87 	vadd.f32	s14, s15, s14
 810890a:	edd7 6a07 	vldr	s13, [r7, #28]
 810890e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108916:	ee17 2a90 	vmov	r2, s15
 810891a:	687b      	ldr	r3, [r7, #4]
 810891c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810891e:	4b1f      	ldr	r3, [pc, #124]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108922:	0c1b      	lsrs	r3, r3, #16
 8108924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108928:	ee07 3a90 	vmov	s15, r3
 810892c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108930:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108934:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108938:	edd7 6a07 	vldr	s13, [r7, #28]
 810893c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108944:	ee17 2a90 	vmov	r2, s15
 8108948:	687b      	ldr	r3, [r7, #4]
 810894a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810894c:	4b13      	ldr	r3, [pc, #76]	@ (810899c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810894e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108950:	0e1b      	lsrs	r3, r3, #24
 8108952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108956:	ee07 3a90 	vmov	s15, r3
 810895a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810895e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108966:	edd7 6a07 	vldr	s13, [r7, #28]
 810896a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810896e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108972:	ee17 2a90 	vmov	r2, s15
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810897a:	e008      	b.n	810898e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	2200      	movs	r2, #0
 8108980:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8108982:	687b      	ldr	r3, [r7, #4]
 8108984:	2200      	movs	r2, #0
 8108986:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108988:	687b      	ldr	r3, [r7, #4]
 810898a:	2200      	movs	r2, #0
 810898c:	609a      	str	r2, [r3, #8]
}
 810898e:	bf00      	nop
 8108990:	3724      	adds	r7, #36	@ 0x24
 8108992:	46bd      	mov	sp, r7
 8108994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108998:	4770      	bx	lr
 810899a:	bf00      	nop
 810899c:	58024400 	.word	0x58024400
 81089a0:	03d09000 	.word	0x03d09000
 81089a4:	46000000 	.word	0x46000000
 81089a8:	4c742400 	.word	0x4c742400
 81089ac:	4a742400 	.word	0x4a742400
 81089b0:	4bbebc20 	.word	0x4bbebc20

081089b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81089b4:	b580      	push	{r7, lr}
 81089b6:	b084      	sub	sp, #16
 81089b8:	af00      	add	r7, sp, #0
 81089ba:	6078      	str	r0, [r7, #4]
 81089bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81089be:	2300      	movs	r3, #0
 81089c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81089c2:	4b54      	ldr	r3, [pc, #336]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 81089c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81089c6:	f003 0303 	and.w	r3, r3, #3
 81089ca:	2b03      	cmp	r3, #3
 81089cc:	d101      	bne.n	81089d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81089ce:	2301      	movs	r3, #1
 81089d0:	e09b      	b.n	8108b0a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81089d2:	4b50      	ldr	r3, [pc, #320]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 81089d4:	681b      	ldr	r3, [r3, #0]
 81089d6:	4a4f      	ldr	r2, [pc, #316]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 81089d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81089dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81089de:	f7fc f9c7 	bl	8104d70 <HAL_GetTick>
 81089e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81089e4:	e008      	b.n	81089f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81089e6:	f7fc f9c3 	bl	8104d70 <HAL_GetTick>
 81089ea:	4602      	mov	r2, r0
 81089ec:	68bb      	ldr	r3, [r7, #8]
 81089ee:	1ad3      	subs	r3, r2, r3
 81089f0:	2b02      	cmp	r3, #2
 81089f2:	d901      	bls.n	81089f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81089f4:	2303      	movs	r3, #3
 81089f6:	e088      	b.n	8108b0a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81089f8:	4b46      	ldr	r3, [pc, #280]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 81089fa:	681b      	ldr	r3, [r3, #0]
 81089fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108a00:	2b00      	cmp	r3, #0
 8108a02:	d1f0      	bne.n	81089e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108a04:	4b43      	ldr	r3, [pc, #268]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108a0c:	687b      	ldr	r3, [r7, #4]
 8108a0e:	681b      	ldr	r3, [r3, #0]
 8108a10:	031b      	lsls	r3, r3, #12
 8108a12:	4940      	ldr	r1, [pc, #256]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a14:	4313      	orrs	r3, r2
 8108a16:	628b      	str	r3, [r1, #40]	@ 0x28
 8108a18:	687b      	ldr	r3, [r7, #4]
 8108a1a:	685b      	ldr	r3, [r3, #4]
 8108a1c:	3b01      	subs	r3, #1
 8108a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	689b      	ldr	r3, [r3, #8]
 8108a26:	3b01      	subs	r3, #1
 8108a28:	025b      	lsls	r3, r3, #9
 8108a2a:	b29b      	uxth	r3, r3
 8108a2c:	431a      	orrs	r2, r3
 8108a2e:	687b      	ldr	r3, [r7, #4]
 8108a30:	68db      	ldr	r3, [r3, #12]
 8108a32:	3b01      	subs	r3, #1
 8108a34:	041b      	lsls	r3, r3, #16
 8108a36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108a3a:	431a      	orrs	r2, r3
 8108a3c:	687b      	ldr	r3, [r7, #4]
 8108a3e:	691b      	ldr	r3, [r3, #16]
 8108a40:	3b01      	subs	r3, #1
 8108a42:	061b      	lsls	r3, r3, #24
 8108a44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108a48:	4932      	ldr	r1, [pc, #200]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a4a:	4313      	orrs	r3, r2
 8108a4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108a4e:	4b31      	ldr	r3, [pc, #196]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	695b      	ldr	r3, [r3, #20]
 8108a5a:	492e      	ldr	r1, [pc, #184]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a5c:	4313      	orrs	r3, r2
 8108a5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108a60:	4b2c      	ldr	r3, [pc, #176]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a64:	f023 0220 	bic.w	r2, r3, #32
 8108a68:	687b      	ldr	r3, [r7, #4]
 8108a6a:	699b      	ldr	r3, [r3, #24]
 8108a6c:	4929      	ldr	r1, [pc, #164]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a6e:	4313      	orrs	r3, r2
 8108a70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108a72:	4b28      	ldr	r3, [pc, #160]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a76:	4a27      	ldr	r2, [pc, #156]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a78:	f023 0310 	bic.w	r3, r3, #16
 8108a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108a7e:	4b25      	ldr	r3, [pc, #148]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108a82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108a86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108a8a:	687a      	ldr	r2, [r7, #4]
 8108a8c:	69d2      	ldr	r2, [r2, #28]
 8108a8e:	00d2      	lsls	r2, r2, #3
 8108a90:	4920      	ldr	r1, [pc, #128]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a92:	4313      	orrs	r3, r2
 8108a94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108a96:	4b1f      	ldr	r3, [pc, #124]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108a9c:	f043 0310 	orr.w	r3, r3, #16
 8108aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108aa2:	683b      	ldr	r3, [r7, #0]
 8108aa4:	2b00      	cmp	r3, #0
 8108aa6:	d106      	bne.n	8108ab6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108aac:	4a19      	ldr	r2, [pc, #100]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108aae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108ab4:	e00f      	b.n	8108ad6 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108ab6:	683b      	ldr	r3, [r7, #0]
 8108ab8:	2b01      	cmp	r3, #1
 8108aba:	d106      	bne.n	8108aca <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108abc:	4b15      	ldr	r3, [pc, #84]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ac0:	4a14      	ldr	r2, [pc, #80]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108ac8:	e005      	b.n	8108ad6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108aca:	4b12      	ldr	r3, [pc, #72]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ace:	4a11      	ldr	r2, [pc, #68]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108ad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108ad8:	681b      	ldr	r3, [r3, #0]
 8108ada:	4a0e      	ldr	r2, [pc, #56]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108adc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108ae2:	f7fc f945 	bl	8104d70 <HAL_GetTick>
 8108ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108ae8:	e008      	b.n	8108afc <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108aea:	f7fc f941 	bl	8104d70 <HAL_GetTick>
 8108aee:	4602      	mov	r2, r0
 8108af0:	68bb      	ldr	r3, [r7, #8]
 8108af2:	1ad3      	subs	r3, r2, r3
 8108af4:	2b02      	cmp	r3, #2
 8108af6:	d901      	bls.n	8108afc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108af8:	2303      	movs	r3, #3
 8108afa:	e006      	b.n	8108b0a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108afc:	4b05      	ldr	r3, [pc, #20]	@ (8108b14 <RCCEx_PLL2_Config+0x160>)
 8108afe:	681b      	ldr	r3, [r3, #0]
 8108b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108b04:	2b00      	cmp	r3, #0
 8108b06:	d0f0      	beq.n	8108aea <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8108b0a:	4618      	mov	r0, r3
 8108b0c:	3710      	adds	r7, #16
 8108b0e:	46bd      	mov	sp, r7
 8108b10:	bd80      	pop	{r7, pc}
 8108b12:	bf00      	nop
 8108b14:	58024400 	.word	0x58024400

08108b18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108b18:	b580      	push	{r7, lr}
 8108b1a:	b084      	sub	sp, #16
 8108b1c:	af00      	add	r7, sp, #0
 8108b1e:	6078      	str	r0, [r7, #4]
 8108b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108b22:	2300      	movs	r3, #0
 8108b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108b26:	4b54      	ldr	r3, [pc, #336]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b2a:	f003 0303 	and.w	r3, r3, #3
 8108b2e:	2b03      	cmp	r3, #3
 8108b30:	d101      	bne.n	8108b36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108b32:	2301      	movs	r3, #1
 8108b34:	e09b      	b.n	8108c6e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108b36:	4b50      	ldr	r3, [pc, #320]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108b38:	681b      	ldr	r3, [r3, #0]
 8108b3a:	4a4f      	ldr	r2, [pc, #316]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108b42:	f7fc f915 	bl	8104d70 <HAL_GetTick>
 8108b46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108b48:	e008      	b.n	8108b5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108b4a:	f7fc f911 	bl	8104d70 <HAL_GetTick>
 8108b4e:	4602      	mov	r2, r0
 8108b50:	68bb      	ldr	r3, [r7, #8]
 8108b52:	1ad3      	subs	r3, r2, r3
 8108b54:	2b02      	cmp	r3, #2
 8108b56:	d901      	bls.n	8108b5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108b58:	2303      	movs	r3, #3
 8108b5a:	e088      	b.n	8108c6e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108b5c:	4b46      	ldr	r3, [pc, #280]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108b5e:	681b      	ldr	r3, [r3, #0]
 8108b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108b64:	2b00      	cmp	r3, #0
 8108b66:	d1f0      	bne.n	8108b4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108b68:	4b43      	ldr	r3, [pc, #268]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108b70:	687b      	ldr	r3, [r7, #4]
 8108b72:	681b      	ldr	r3, [r3, #0]
 8108b74:	051b      	lsls	r3, r3, #20
 8108b76:	4940      	ldr	r1, [pc, #256]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108b78:	4313      	orrs	r3, r2
 8108b7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8108b7c:	687b      	ldr	r3, [r7, #4]
 8108b7e:	685b      	ldr	r3, [r3, #4]
 8108b80:	3b01      	subs	r3, #1
 8108b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108b86:	687b      	ldr	r3, [r7, #4]
 8108b88:	689b      	ldr	r3, [r3, #8]
 8108b8a:	3b01      	subs	r3, #1
 8108b8c:	025b      	lsls	r3, r3, #9
 8108b8e:	b29b      	uxth	r3, r3
 8108b90:	431a      	orrs	r2, r3
 8108b92:	687b      	ldr	r3, [r7, #4]
 8108b94:	68db      	ldr	r3, [r3, #12]
 8108b96:	3b01      	subs	r3, #1
 8108b98:	041b      	lsls	r3, r3, #16
 8108b9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108b9e:	431a      	orrs	r2, r3
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	691b      	ldr	r3, [r3, #16]
 8108ba4:	3b01      	subs	r3, #1
 8108ba6:	061b      	lsls	r3, r3, #24
 8108ba8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108bac:	4932      	ldr	r1, [pc, #200]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bae:	4313      	orrs	r3, r2
 8108bb0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108bb2:	4b31      	ldr	r3, [pc, #196]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108bba:	687b      	ldr	r3, [r7, #4]
 8108bbc:	695b      	ldr	r3, [r3, #20]
 8108bbe:	492e      	ldr	r1, [pc, #184]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bc0:	4313      	orrs	r3, r2
 8108bc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108bcc:	687b      	ldr	r3, [r7, #4]
 8108bce:	699b      	ldr	r3, [r3, #24]
 8108bd0:	4929      	ldr	r1, [pc, #164]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bd2:	4313      	orrs	r3, r2
 8108bd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108bd6:	4b28      	ldr	r3, [pc, #160]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bda:	4a27      	ldr	r2, [pc, #156]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8108be2:	4b25      	ldr	r3, [pc, #148]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108be6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108bea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108bee:	687a      	ldr	r2, [r7, #4]
 8108bf0:	69d2      	ldr	r2, [r2, #28]
 8108bf2:	00d2      	lsls	r2, r2, #3
 8108bf4:	4920      	ldr	r1, [pc, #128]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bf6:	4313      	orrs	r3, r2
 8108bf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108c06:	683b      	ldr	r3, [r7, #0]
 8108c08:	2b00      	cmp	r3, #0
 8108c0a:	d106      	bne.n	8108c1a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108c10:	4a19      	ldr	r2, [pc, #100]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8108c16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108c18:	e00f      	b.n	8108c3a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108c1a:	683b      	ldr	r3, [r7, #0]
 8108c1c:	2b01      	cmp	r3, #1
 8108c1e:	d106      	bne.n	8108c2e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108c20:	4b15      	ldr	r3, [pc, #84]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108c24:	4a14      	ldr	r2, [pc, #80]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108c2c:	e005      	b.n	8108c3a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108c2e:	4b12      	ldr	r3, [pc, #72]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108c32:	4a11      	ldr	r2, [pc, #68]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108c38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c3c:	681b      	ldr	r3, [r3, #0]
 8108c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108c46:	f7fc f893 	bl	8104d70 <HAL_GetTick>
 8108c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108c4c:	e008      	b.n	8108c60 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108c4e:	f7fc f88f 	bl	8104d70 <HAL_GetTick>
 8108c52:	4602      	mov	r2, r0
 8108c54:	68bb      	ldr	r3, [r7, #8]
 8108c56:	1ad3      	subs	r3, r2, r3
 8108c58:	2b02      	cmp	r3, #2
 8108c5a:	d901      	bls.n	8108c60 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108c5c:	2303      	movs	r3, #3
 8108c5e:	e006      	b.n	8108c6e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108c60:	4b05      	ldr	r3, [pc, #20]	@ (8108c78 <RCCEx_PLL3_Config+0x160>)
 8108c62:	681b      	ldr	r3, [r3, #0]
 8108c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108c68:	2b00      	cmp	r3, #0
 8108c6a:	d0f0      	beq.n	8108c4e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8108c6e:	4618      	mov	r0, r3
 8108c70:	3710      	adds	r7, #16
 8108c72:	46bd      	mov	sp, r7
 8108c74:	bd80      	pop	{r7, pc}
 8108c76:	bf00      	nop
 8108c78:	58024400 	.word	0x58024400

08108c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8108c7c:	b580      	push	{r7, lr}
 8108c7e:	b082      	sub	sp, #8
 8108c80:	af00      	add	r7, sp, #0
 8108c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108c84:	687b      	ldr	r3, [r7, #4]
 8108c86:	2b00      	cmp	r3, #0
 8108c88:	d101      	bne.n	8108c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8108c8a:	2301      	movs	r3, #1
 8108c8c:	e042      	b.n	8108d14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8108c8e:	687b      	ldr	r3, [r7, #4]
 8108c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108c94:	2b00      	cmp	r3, #0
 8108c96:	d106      	bne.n	8108ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108c98:	687b      	ldr	r3, [r7, #4]
 8108c9a:	2200      	movs	r2, #0
 8108c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108ca0:	6878      	ldr	r0, [r7, #4]
 8108ca2:	f7fa ffeb 	bl	8103c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108ca6:	687b      	ldr	r3, [r7, #4]
 8108ca8:	2224      	movs	r2, #36	@ 0x24
 8108caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8108cae:	687b      	ldr	r3, [r7, #4]
 8108cb0:	681b      	ldr	r3, [r3, #0]
 8108cb2:	681a      	ldr	r2, [r3, #0]
 8108cb4:	687b      	ldr	r3, [r7, #4]
 8108cb6:	681b      	ldr	r3, [r3, #0]
 8108cb8:	f022 0201 	bic.w	r2, r2, #1
 8108cbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108cbe:	6878      	ldr	r0, [r7, #4]
 8108cc0:	f000 f8ba 	bl	8108e38 <UART_SetConfig>
 8108cc4:	4603      	mov	r3, r0
 8108cc6:	2b01      	cmp	r3, #1
 8108cc8:	d101      	bne.n	8108cce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8108cca:	2301      	movs	r3, #1
 8108ccc:	e022      	b.n	8108d14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108cce:	687b      	ldr	r3, [r7, #4]
 8108cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108cd2:	2b00      	cmp	r3, #0
 8108cd4:	d002      	beq.n	8108cdc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8108cd6:	6878      	ldr	r0, [r7, #4]
 8108cd8:	f000 fe16 	bl	8109908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8108cdc:	687b      	ldr	r3, [r7, #4]
 8108cde:	681b      	ldr	r3, [r3, #0]
 8108ce0:	685a      	ldr	r2, [r3, #4]
 8108ce2:	687b      	ldr	r3, [r7, #4]
 8108ce4:	681b      	ldr	r3, [r3, #0]
 8108ce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8108cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8108cec:	687b      	ldr	r3, [r7, #4]
 8108cee:	681b      	ldr	r3, [r3, #0]
 8108cf0:	689a      	ldr	r2, [r3, #8]
 8108cf2:	687b      	ldr	r3, [r7, #4]
 8108cf4:	681b      	ldr	r3, [r3, #0]
 8108cf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8108cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8108cfc:	687b      	ldr	r3, [r7, #4]
 8108cfe:	681b      	ldr	r3, [r3, #0]
 8108d00:	681a      	ldr	r2, [r3, #0]
 8108d02:	687b      	ldr	r3, [r7, #4]
 8108d04:	681b      	ldr	r3, [r3, #0]
 8108d06:	f042 0201 	orr.w	r2, r2, #1
 8108d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8108d0c:	6878      	ldr	r0, [r7, #4]
 8108d0e:	f000 fe9d 	bl	8109a4c <UART_CheckIdleState>
 8108d12:	4603      	mov	r3, r0
}
 8108d14:	4618      	mov	r0, r3
 8108d16:	3708      	adds	r7, #8
 8108d18:	46bd      	mov	sp, r7
 8108d1a:	bd80      	pop	{r7, pc}

08108d1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8108d1c:	b580      	push	{r7, lr}
 8108d1e:	b08a      	sub	sp, #40	@ 0x28
 8108d20:	af02      	add	r7, sp, #8
 8108d22:	60f8      	str	r0, [r7, #12]
 8108d24:	60b9      	str	r1, [r7, #8]
 8108d26:	603b      	str	r3, [r7, #0]
 8108d28:	4613      	mov	r3, r2
 8108d2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8108d2c:	68fb      	ldr	r3, [r7, #12]
 8108d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108d32:	2b20      	cmp	r3, #32
 8108d34:	d17b      	bne.n	8108e2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108d36:	68bb      	ldr	r3, [r7, #8]
 8108d38:	2b00      	cmp	r3, #0
 8108d3a:	d002      	beq.n	8108d42 <HAL_UART_Transmit+0x26>
 8108d3c:	88fb      	ldrh	r3, [r7, #6]
 8108d3e:	2b00      	cmp	r3, #0
 8108d40:	d101      	bne.n	8108d46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108d42:	2301      	movs	r3, #1
 8108d44:	e074      	b.n	8108e30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108d46:	68fb      	ldr	r3, [r7, #12]
 8108d48:	2200      	movs	r2, #0
 8108d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108d4e:	68fb      	ldr	r3, [r7, #12]
 8108d50:	2221      	movs	r2, #33	@ 0x21
 8108d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108d56:	f7fc f80b 	bl	8104d70 <HAL_GetTick>
 8108d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8108d5c:	68fb      	ldr	r3, [r7, #12]
 8108d5e:	88fa      	ldrh	r2, [r7, #6]
 8108d60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8108d64:	68fb      	ldr	r3, [r7, #12]
 8108d66:	88fa      	ldrh	r2, [r7, #6]
 8108d68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8108d6c:	68fb      	ldr	r3, [r7, #12]
 8108d6e:	689b      	ldr	r3, [r3, #8]
 8108d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108d74:	d108      	bne.n	8108d88 <HAL_UART_Transmit+0x6c>
 8108d76:	68fb      	ldr	r3, [r7, #12]
 8108d78:	691b      	ldr	r3, [r3, #16]
 8108d7a:	2b00      	cmp	r3, #0
 8108d7c:	d104      	bne.n	8108d88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8108d7e:	2300      	movs	r3, #0
 8108d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108d82:	68bb      	ldr	r3, [r7, #8]
 8108d84:	61bb      	str	r3, [r7, #24]
 8108d86:	e003      	b.n	8108d90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108d88:	68bb      	ldr	r3, [r7, #8]
 8108d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108d8c:	2300      	movs	r3, #0
 8108d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108d90:	e030      	b.n	8108df4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108d92:	683b      	ldr	r3, [r7, #0]
 8108d94:	9300      	str	r3, [sp, #0]
 8108d96:	697b      	ldr	r3, [r7, #20]
 8108d98:	2200      	movs	r2, #0
 8108d9a:	2180      	movs	r1, #128	@ 0x80
 8108d9c:	68f8      	ldr	r0, [r7, #12]
 8108d9e:	f000 feff 	bl	8109ba0 <UART_WaitOnFlagUntilTimeout>
 8108da2:	4603      	mov	r3, r0
 8108da4:	2b00      	cmp	r3, #0
 8108da6:	d005      	beq.n	8108db4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108da8:	68fb      	ldr	r3, [r7, #12]
 8108daa:	2220      	movs	r2, #32
 8108dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8108db0:	2303      	movs	r3, #3
 8108db2:	e03d      	b.n	8108e30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8108db4:	69fb      	ldr	r3, [r7, #28]
 8108db6:	2b00      	cmp	r3, #0
 8108db8:	d10b      	bne.n	8108dd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108dba:	69bb      	ldr	r3, [r7, #24]
 8108dbc:	881b      	ldrh	r3, [r3, #0]
 8108dbe:	461a      	mov	r2, r3
 8108dc0:	68fb      	ldr	r3, [r7, #12]
 8108dc2:	681b      	ldr	r3, [r3, #0]
 8108dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108dc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8108dca:	69bb      	ldr	r3, [r7, #24]
 8108dcc:	3302      	adds	r3, #2
 8108dce:	61bb      	str	r3, [r7, #24]
 8108dd0:	e007      	b.n	8108de2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8108dd2:	69fb      	ldr	r3, [r7, #28]
 8108dd4:	781a      	ldrb	r2, [r3, #0]
 8108dd6:	68fb      	ldr	r3, [r7, #12]
 8108dd8:	681b      	ldr	r3, [r3, #0]
 8108dda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8108ddc:	69fb      	ldr	r3, [r7, #28]
 8108dde:	3301      	adds	r3, #1
 8108de0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8108de2:	68fb      	ldr	r3, [r7, #12]
 8108de4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8108de8:	b29b      	uxth	r3, r3
 8108dea:	3b01      	subs	r3, #1
 8108dec:	b29a      	uxth	r2, r3
 8108dee:	68fb      	ldr	r3, [r7, #12]
 8108df0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8108df4:	68fb      	ldr	r3, [r7, #12]
 8108df6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8108dfa:	b29b      	uxth	r3, r3
 8108dfc:	2b00      	cmp	r3, #0
 8108dfe:	d1c8      	bne.n	8108d92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108e00:	683b      	ldr	r3, [r7, #0]
 8108e02:	9300      	str	r3, [sp, #0]
 8108e04:	697b      	ldr	r3, [r7, #20]
 8108e06:	2200      	movs	r2, #0
 8108e08:	2140      	movs	r1, #64	@ 0x40
 8108e0a:	68f8      	ldr	r0, [r7, #12]
 8108e0c:	f000 fec8 	bl	8109ba0 <UART_WaitOnFlagUntilTimeout>
 8108e10:	4603      	mov	r3, r0
 8108e12:	2b00      	cmp	r3, #0
 8108e14:	d005      	beq.n	8108e22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8108e16:	68fb      	ldr	r3, [r7, #12]
 8108e18:	2220      	movs	r2, #32
 8108e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8108e1e:	2303      	movs	r3, #3
 8108e20:	e006      	b.n	8108e30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108e22:	68fb      	ldr	r3, [r7, #12]
 8108e24:	2220      	movs	r2, #32
 8108e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8108e2a:	2300      	movs	r3, #0
 8108e2c:	e000      	b.n	8108e30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8108e2e:	2302      	movs	r3, #2
  }
}
 8108e30:	4618      	mov	r0, r3
 8108e32:	3720      	adds	r7, #32
 8108e34:	46bd      	mov	sp, r7
 8108e36:	bd80      	pop	{r7, pc}

08108e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108e3c:	b092      	sub	sp, #72	@ 0x48
 8108e3e:	af00      	add	r7, sp, #0
 8108e40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108e42:	2300      	movs	r3, #0
 8108e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108e48:	697b      	ldr	r3, [r7, #20]
 8108e4a:	689a      	ldr	r2, [r3, #8]
 8108e4c:	697b      	ldr	r3, [r7, #20]
 8108e4e:	691b      	ldr	r3, [r3, #16]
 8108e50:	431a      	orrs	r2, r3
 8108e52:	697b      	ldr	r3, [r7, #20]
 8108e54:	695b      	ldr	r3, [r3, #20]
 8108e56:	431a      	orrs	r2, r3
 8108e58:	697b      	ldr	r3, [r7, #20]
 8108e5a:	69db      	ldr	r3, [r3, #28]
 8108e5c:	4313      	orrs	r3, r2
 8108e5e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108e60:	697b      	ldr	r3, [r7, #20]
 8108e62:	681b      	ldr	r3, [r3, #0]
 8108e64:	681a      	ldr	r2, [r3, #0]
 8108e66:	4bbd      	ldr	r3, [pc, #756]	@ (810915c <UART_SetConfig+0x324>)
 8108e68:	4013      	ands	r3, r2
 8108e6a:	697a      	ldr	r2, [r7, #20]
 8108e6c:	6812      	ldr	r2, [r2, #0]
 8108e6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108e70:	430b      	orrs	r3, r1
 8108e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108e74:	697b      	ldr	r3, [r7, #20]
 8108e76:	681b      	ldr	r3, [r3, #0]
 8108e78:	685b      	ldr	r3, [r3, #4]
 8108e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8108e7e:	697b      	ldr	r3, [r7, #20]
 8108e80:	68da      	ldr	r2, [r3, #12]
 8108e82:	697b      	ldr	r3, [r7, #20]
 8108e84:	681b      	ldr	r3, [r3, #0]
 8108e86:	430a      	orrs	r2, r1
 8108e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108e8a:	697b      	ldr	r3, [r7, #20]
 8108e8c:	699b      	ldr	r3, [r3, #24]
 8108e8e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108e90:	697b      	ldr	r3, [r7, #20]
 8108e92:	681b      	ldr	r3, [r3, #0]
 8108e94:	4ab2      	ldr	r2, [pc, #712]	@ (8109160 <UART_SetConfig+0x328>)
 8108e96:	4293      	cmp	r3, r2
 8108e98:	d004      	beq.n	8108ea4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108e9a:	697b      	ldr	r3, [r7, #20]
 8108e9c:	6a1b      	ldr	r3, [r3, #32]
 8108e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108ea0:	4313      	orrs	r3, r2
 8108ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108ea4:	697b      	ldr	r3, [r7, #20]
 8108ea6:	681b      	ldr	r3, [r3, #0]
 8108ea8:	689b      	ldr	r3, [r3, #8]
 8108eaa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8108eae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8108eb2:	697a      	ldr	r2, [r7, #20]
 8108eb4:	6812      	ldr	r2, [r2, #0]
 8108eb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108eb8:	430b      	orrs	r3, r1
 8108eba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108ebc:	697b      	ldr	r3, [r7, #20]
 8108ebe:	681b      	ldr	r3, [r3, #0]
 8108ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ec2:	f023 010f 	bic.w	r1, r3, #15
 8108ec6:	697b      	ldr	r3, [r7, #20]
 8108ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8108eca:	697b      	ldr	r3, [r7, #20]
 8108ecc:	681b      	ldr	r3, [r3, #0]
 8108ece:	430a      	orrs	r2, r1
 8108ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108ed2:	697b      	ldr	r3, [r7, #20]
 8108ed4:	681b      	ldr	r3, [r3, #0]
 8108ed6:	4aa3      	ldr	r2, [pc, #652]	@ (8109164 <UART_SetConfig+0x32c>)
 8108ed8:	4293      	cmp	r3, r2
 8108eda:	d177      	bne.n	8108fcc <UART_SetConfig+0x194>
 8108edc:	4ba2      	ldr	r3, [pc, #648]	@ (8109168 <UART_SetConfig+0x330>)
 8108ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108ee0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108ee4:	2b28      	cmp	r3, #40	@ 0x28
 8108ee6:	d86d      	bhi.n	8108fc4 <UART_SetConfig+0x18c>
 8108ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8108ef0 <UART_SetConfig+0xb8>)
 8108eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108eee:	bf00      	nop
 8108ef0:	08108f95 	.word	0x08108f95
 8108ef4:	08108fc5 	.word	0x08108fc5
 8108ef8:	08108fc5 	.word	0x08108fc5
 8108efc:	08108fc5 	.word	0x08108fc5
 8108f00:	08108fc5 	.word	0x08108fc5
 8108f04:	08108fc5 	.word	0x08108fc5
 8108f08:	08108fc5 	.word	0x08108fc5
 8108f0c:	08108fc5 	.word	0x08108fc5
 8108f10:	08108f9d 	.word	0x08108f9d
 8108f14:	08108fc5 	.word	0x08108fc5
 8108f18:	08108fc5 	.word	0x08108fc5
 8108f1c:	08108fc5 	.word	0x08108fc5
 8108f20:	08108fc5 	.word	0x08108fc5
 8108f24:	08108fc5 	.word	0x08108fc5
 8108f28:	08108fc5 	.word	0x08108fc5
 8108f2c:	08108fc5 	.word	0x08108fc5
 8108f30:	08108fa5 	.word	0x08108fa5
 8108f34:	08108fc5 	.word	0x08108fc5
 8108f38:	08108fc5 	.word	0x08108fc5
 8108f3c:	08108fc5 	.word	0x08108fc5
 8108f40:	08108fc5 	.word	0x08108fc5
 8108f44:	08108fc5 	.word	0x08108fc5
 8108f48:	08108fc5 	.word	0x08108fc5
 8108f4c:	08108fc5 	.word	0x08108fc5
 8108f50:	08108fad 	.word	0x08108fad
 8108f54:	08108fc5 	.word	0x08108fc5
 8108f58:	08108fc5 	.word	0x08108fc5
 8108f5c:	08108fc5 	.word	0x08108fc5
 8108f60:	08108fc5 	.word	0x08108fc5
 8108f64:	08108fc5 	.word	0x08108fc5
 8108f68:	08108fc5 	.word	0x08108fc5
 8108f6c:	08108fc5 	.word	0x08108fc5
 8108f70:	08108fb5 	.word	0x08108fb5
 8108f74:	08108fc5 	.word	0x08108fc5
 8108f78:	08108fc5 	.word	0x08108fc5
 8108f7c:	08108fc5 	.word	0x08108fc5
 8108f80:	08108fc5 	.word	0x08108fc5
 8108f84:	08108fc5 	.word	0x08108fc5
 8108f88:	08108fc5 	.word	0x08108fc5
 8108f8c:	08108fc5 	.word	0x08108fc5
 8108f90:	08108fbd 	.word	0x08108fbd
 8108f94:	2301      	movs	r3, #1
 8108f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108f9a:	e220      	b.n	81093de <UART_SetConfig+0x5a6>
 8108f9c:	2304      	movs	r3, #4
 8108f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108fa2:	e21c      	b.n	81093de <UART_SetConfig+0x5a6>
 8108fa4:	2308      	movs	r3, #8
 8108fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108faa:	e218      	b.n	81093de <UART_SetConfig+0x5a6>
 8108fac:	2310      	movs	r3, #16
 8108fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108fb2:	e214      	b.n	81093de <UART_SetConfig+0x5a6>
 8108fb4:	2320      	movs	r3, #32
 8108fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108fba:	e210      	b.n	81093de <UART_SetConfig+0x5a6>
 8108fbc:	2340      	movs	r3, #64	@ 0x40
 8108fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108fc2:	e20c      	b.n	81093de <UART_SetConfig+0x5a6>
 8108fc4:	2380      	movs	r3, #128	@ 0x80
 8108fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108fca:	e208      	b.n	81093de <UART_SetConfig+0x5a6>
 8108fcc:	697b      	ldr	r3, [r7, #20]
 8108fce:	681b      	ldr	r3, [r3, #0]
 8108fd0:	4a66      	ldr	r2, [pc, #408]	@ (810916c <UART_SetConfig+0x334>)
 8108fd2:	4293      	cmp	r3, r2
 8108fd4:	d130      	bne.n	8109038 <UART_SetConfig+0x200>
 8108fd6:	4b64      	ldr	r3, [pc, #400]	@ (8109168 <UART_SetConfig+0x330>)
 8108fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108fda:	f003 0307 	and.w	r3, r3, #7
 8108fde:	2b05      	cmp	r3, #5
 8108fe0:	d826      	bhi.n	8109030 <UART_SetConfig+0x1f8>
 8108fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8108fe8 <UART_SetConfig+0x1b0>)
 8108fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108fe8:	08109001 	.word	0x08109001
 8108fec:	08109009 	.word	0x08109009
 8108ff0:	08109011 	.word	0x08109011
 8108ff4:	08109019 	.word	0x08109019
 8108ff8:	08109021 	.word	0x08109021
 8108ffc:	08109029 	.word	0x08109029
 8109000:	2300      	movs	r3, #0
 8109002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109006:	e1ea      	b.n	81093de <UART_SetConfig+0x5a6>
 8109008:	2304      	movs	r3, #4
 810900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810900e:	e1e6      	b.n	81093de <UART_SetConfig+0x5a6>
 8109010:	2308      	movs	r3, #8
 8109012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109016:	e1e2      	b.n	81093de <UART_SetConfig+0x5a6>
 8109018:	2310      	movs	r3, #16
 810901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810901e:	e1de      	b.n	81093de <UART_SetConfig+0x5a6>
 8109020:	2320      	movs	r3, #32
 8109022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109026:	e1da      	b.n	81093de <UART_SetConfig+0x5a6>
 8109028:	2340      	movs	r3, #64	@ 0x40
 810902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810902e:	e1d6      	b.n	81093de <UART_SetConfig+0x5a6>
 8109030:	2380      	movs	r3, #128	@ 0x80
 8109032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109036:	e1d2      	b.n	81093de <UART_SetConfig+0x5a6>
 8109038:	697b      	ldr	r3, [r7, #20]
 810903a:	681b      	ldr	r3, [r3, #0]
 810903c:	4a4c      	ldr	r2, [pc, #304]	@ (8109170 <UART_SetConfig+0x338>)
 810903e:	4293      	cmp	r3, r2
 8109040:	d130      	bne.n	81090a4 <UART_SetConfig+0x26c>
 8109042:	4b49      	ldr	r3, [pc, #292]	@ (8109168 <UART_SetConfig+0x330>)
 8109044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109046:	f003 0307 	and.w	r3, r3, #7
 810904a:	2b05      	cmp	r3, #5
 810904c:	d826      	bhi.n	810909c <UART_SetConfig+0x264>
 810904e:	a201      	add	r2, pc, #4	@ (adr r2, 8109054 <UART_SetConfig+0x21c>)
 8109050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109054:	0810906d 	.word	0x0810906d
 8109058:	08109075 	.word	0x08109075
 810905c:	0810907d 	.word	0x0810907d
 8109060:	08109085 	.word	0x08109085
 8109064:	0810908d 	.word	0x0810908d
 8109068:	08109095 	.word	0x08109095
 810906c:	2300      	movs	r3, #0
 810906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109072:	e1b4      	b.n	81093de <UART_SetConfig+0x5a6>
 8109074:	2304      	movs	r3, #4
 8109076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810907a:	e1b0      	b.n	81093de <UART_SetConfig+0x5a6>
 810907c:	2308      	movs	r3, #8
 810907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109082:	e1ac      	b.n	81093de <UART_SetConfig+0x5a6>
 8109084:	2310      	movs	r3, #16
 8109086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810908a:	e1a8      	b.n	81093de <UART_SetConfig+0x5a6>
 810908c:	2320      	movs	r3, #32
 810908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109092:	e1a4      	b.n	81093de <UART_SetConfig+0x5a6>
 8109094:	2340      	movs	r3, #64	@ 0x40
 8109096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810909a:	e1a0      	b.n	81093de <UART_SetConfig+0x5a6>
 810909c:	2380      	movs	r3, #128	@ 0x80
 810909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090a2:	e19c      	b.n	81093de <UART_SetConfig+0x5a6>
 81090a4:	697b      	ldr	r3, [r7, #20]
 81090a6:	681b      	ldr	r3, [r3, #0]
 81090a8:	4a32      	ldr	r2, [pc, #200]	@ (8109174 <UART_SetConfig+0x33c>)
 81090aa:	4293      	cmp	r3, r2
 81090ac:	d130      	bne.n	8109110 <UART_SetConfig+0x2d8>
 81090ae:	4b2e      	ldr	r3, [pc, #184]	@ (8109168 <UART_SetConfig+0x330>)
 81090b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81090b2:	f003 0307 	and.w	r3, r3, #7
 81090b6:	2b05      	cmp	r3, #5
 81090b8:	d826      	bhi.n	8109108 <UART_SetConfig+0x2d0>
 81090ba:	a201      	add	r2, pc, #4	@ (adr r2, 81090c0 <UART_SetConfig+0x288>)
 81090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81090c0:	081090d9 	.word	0x081090d9
 81090c4:	081090e1 	.word	0x081090e1
 81090c8:	081090e9 	.word	0x081090e9
 81090cc:	081090f1 	.word	0x081090f1
 81090d0:	081090f9 	.word	0x081090f9
 81090d4:	08109101 	.word	0x08109101
 81090d8:	2300      	movs	r3, #0
 81090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090de:	e17e      	b.n	81093de <UART_SetConfig+0x5a6>
 81090e0:	2304      	movs	r3, #4
 81090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090e6:	e17a      	b.n	81093de <UART_SetConfig+0x5a6>
 81090e8:	2308      	movs	r3, #8
 81090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090ee:	e176      	b.n	81093de <UART_SetConfig+0x5a6>
 81090f0:	2310      	movs	r3, #16
 81090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090f6:	e172      	b.n	81093de <UART_SetConfig+0x5a6>
 81090f8:	2320      	movs	r3, #32
 81090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81090fe:	e16e      	b.n	81093de <UART_SetConfig+0x5a6>
 8109100:	2340      	movs	r3, #64	@ 0x40
 8109102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109106:	e16a      	b.n	81093de <UART_SetConfig+0x5a6>
 8109108:	2380      	movs	r3, #128	@ 0x80
 810910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810910e:	e166      	b.n	81093de <UART_SetConfig+0x5a6>
 8109110:	697b      	ldr	r3, [r7, #20]
 8109112:	681b      	ldr	r3, [r3, #0]
 8109114:	4a18      	ldr	r2, [pc, #96]	@ (8109178 <UART_SetConfig+0x340>)
 8109116:	4293      	cmp	r3, r2
 8109118:	d140      	bne.n	810919c <UART_SetConfig+0x364>
 810911a:	4b13      	ldr	r3, [pc, #76]	@ (8109168 <UART_SetConfig+0x330>)
 810911c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810911e:	f003 0307 	and.w	r3, r3, #7
 8109122:	2b05      	cmp	r3, #5
 8109124:	d836      	bhi.n	8109194 <UART_SetConfig+0x35c>
 8109126:	a201      	add	r2, pc, #4	@ (adr r2, 810912c <UART_SetConfig+0x2f4>)
 8109128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810912c:	08109145 	.word	0x08109145
 8109130:	0810914d 	.word	0x0810914d
 8109134:	08109155 	.word	0x08109155
 8109138:	0810917d 	.word	0x0810917d
 810913c:	08109185 	.word	0x08109185
 8109140:	0810918d 	.word	0x0810918d
 8109144:	2300      	movs	r3, #0
 8109146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810914a:	e148      	b.n	81093de <UART_SetConfig+0x5a6>
 810914c:	2304      	movs	r3, #4
 810914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109152:	e144      	b.n	81093de <UART_SetConfig+0x5a6>
 8109154:	2308      	movs	r3, #8
 8109156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810915a:	e140      	b.n	81093de <UART_SetConfig+0x5a6>
 810915c:	cfff69f3 	.word	0xcfff69f3
 8109160:	58000c00 	.word	0x58000c00
 8109164:	40011000 	.word	0x40011000
 8109168:	58024400 	.word	0x58024400
 810916c:	40004400 	.word	0x40004400
 8109170:	40004800 	.word	0x40004800
 8109174:	40004c00 	.word	0x40004c00
 8109178:	40005000 	.word	0x40005000
 810917c:	2310      	movs	r3, #16
 810917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109182:	e12c      	b.n	81093de <UART_SetConfig+0x5a6>
 8109184:	2320      	movs	r3, #32
 8109186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810918a:	e128      	b.n	81093de <UART_SetConfig+0x5a6>
 810918c:	2340      	movs	r3, #64	@ 0x40
 810918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109192:	e124      	b.n	81093de <UART_SetConfig+0x5a6>
 8109194:	2380      	movs	r3, #128	@ 0x80
 8109196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810919a:	e120      	b.n	81093de <UART_SetConfig+0x5a6>
 810919c:	697b      	ldr	r3, [r7, #20]
 810919e:	681b      	ldr	r3, [r3, #0]
 81091a0:	4acb      	ldr	r2, [pc, #812]	@ (81094d0 <UART_SetConfig+0x698>)
 81091a2:	4293      	cmp	r3, r2
 81091a4:	d176      	bne.n	8109294 <UART_SetConfig+0x45c>
 81091a6:	4bcb      	ldr	r3, [pc, #812]	@ (81094d4 <UART_SetConfig+0x69c>)
 81091a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81091aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81091ae:	2b28      	cmp	r3, #40	@ 0x28
 81091b0:	d86c      	bhi.n	810928c <UART_SetConfig+0x454>
 81091b2:	a201      	add	r2, pc, #4	@ (adr r2, 81091b8 <UART_SetConfig+0x380>)
 81091b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81091b8:	0810925d 	.word	0x0810925d
 81091bc:	0810928d 	.word	0x0810928d
 81091c0:	0810928d 	.word	0x0810928d
 81091c4:	0810928d 	.word	0x0810928d
 81091c8:	0810928d 	.word	0x0810928d
 81091cc:	0810928d 	.word	0x0810928d
 81091d0:	0810928d 	.word	0x0810928d
 81091d4:	0810928d 	.word	0x0810928d
 81091d8:	08109265 	.word	0x08109265
 81091dc:	0810928d 	.word	0x0810928d
 81091e0:	0810928d 	.word	0x0810928d
 81091e4:	0810928d 	.word	0x0810928d
 81091e8:	0810928d 	.word	0x0810928d
 81091ec:	0810928d 	.word	0x0810928d
 81091f0:	0810928d 	.word	0x0810928d
 81091f4:	0810928d 	.word	0x0810928d
 81091f8:	0810926d 	.word	0x0810926d
 81091fc:	0810928d 	.word	0x0810928d
 8109200:	0810928d 	.word	0x0810928d
 8109204:	0810928d 	.word	0x0810928d
 8109208:	0810928d 	.word	0x0810928d
 810920c:	0810928d 	.word	0x0810928d
 8109210:	0810928d 	.word	0x0810928d
 8109214:	0810928d 	.word	0x0810928d
 8109218:	08109275 	.word	0x08109275
 810921c:	0810928d 	.word	0x0810928d
 8109220:	0810928d 	.word	0x0810928d
 8109224:	0810928d 	.word	0x0810928d
 8109228:	0810928d 	.word	0x0810928d
 810922c:	0810928d 	.word	0x0810928d
 8109230:	0810928d 	.word	0x0810928d
 8109234:	0810928d 	.word	0x0810928d
 8109238:	0810927d 	.word	0x0810927d
 810923c:	0810928d 	.word	0x0810928d
 8109240:	0810928d 	.word	0x0810928d
 8109244:	0810928d 	.word	0x0810928d
 8109248:	0810928d 	.word	0x0810928d
 810924c:	0810928d 	.word	0x0810928d
 8109250:	0810928d 	.word	0x0810928d
 8109254:	0810928d 	.word	0x0810928d
 8109258:	08109285 	.word	0x08109285
 810925c:	2301      	movs	r3, #1
 810925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109262:	e0bc      	b.n	81093de <UART_SetConfig+0x5a6>
 8109264:	2304      	movs	r3, #4
 8109266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810926a:	e0b8      	b.n	81093de <UART_SetConfig+0x5a6>
 810926c:	2308      	movs	r3, #8
 810926e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109272:	e0b4      	b.n	81093de <UART_SetConfig+0x5a6>
 8109274:	2310      	movs	r3, #16
 8109276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810927a:	e0b0      	b.n	81093de <UART_SetConfig+0x5a6>
 810927c:	2320      	movs	r3, #32
 810927e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109282:	e0ac      	b.n	81093de <UART_SetConfig+0x5a6>
 8109284:	2340      	movs	r3, #64	@ 0x40
 8109286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810928a:	e0a8      	b.n	81093de <UART_SetConfig+0x5a6>
 810928c:	2380      	movs	r3, #128	@ 0x80
 810928e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109292:	e0a4      	b.n	81093de <UART_SetConfig+0x5a6>
 8109294:	697b      	ldr	r3, [r7, #20]
 8109296:	681b      	ldr	r3, [r3, #0]
 8109298:	4a8f      	ldr	r2, [pc, #572]	@ (81094d8 <UART_SetConfig+0x6a0>)
 810929a:	4293      	cmp	r3, r2
 810929c:	d130      	bne.n	8109300 <UART_SetConfig+0x4c8>
 810929e:	4b8d      	ldr	r3, [pc, #564]	@ (81094d4 <UART_SetConfig+0x69c>)
 81092a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81092a2:	f003 0307 	and.w	r3, r3, #7
 81092a6:	2b05      	cmp	r3, #5
 81092a8:	d826      	bhi.n	81092f8 <UART_SetConfig+0x4c0>
 81092aa:	a201      	add	r2, pc, #4	@ (adr r2, 81092b0 <UART_SetConfig+0x478>)
 81092ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81092b0:	081092c9 	.word	0x081092c9
 81092b4:	081092d1 	.word	0x081092d1
 81092b8:	081092d9 	.word	0x081092d9
 81092bc:	081092e1 	.word	0x081092e1
 81092c0:	081092e9 	.word	0x081092e9
 81092c4:	081092f1 	.word	0x081092f1
 81092c8:	2300      	movs	r3, #0
 81092ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092ce:	e086      	b.n	81093de <UART_SetConfig+0x5a6>
 81092d0:	2304      	movs	r3, #4
 81092d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092d6:	e082      	b.n	81093de <UART_SetConfig+0x5a6>
 81092d8:	2308      	movs	r3, #8
 81092da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092de:	e07e      	b.n	81093de <UART_SetConfig+0x5a6>
 81092e0:	2310      	movs	r3, #16
 81092e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092e6:	e07a      	b.n	81093de <UART_SetConfig+0x5a6>
 81092e8:	2320      	movs	r3, #32
 81092ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092ee:	e076      	b.n	81093de <UART_SetConfig+0x5a6>
 81092f0:	2340      	movs	r3, #64	@ 0x40
 81092f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092f6:	e072      	b.n	81093de <UART_SetConfig+0x5a6>
 81092f8:	2380      	movs	r3, #128	@ 0x80
 81092fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81092fe:	e06e      	b.n	81093de <UART_SetConfig+0x5a6>
 8109300:	697b      	ldr	r3, [r7, #20]
 8109302:	681b      	ldr	r3, [r3, #0]
 8109304:	4a75      	ldr	r2, [pc, #468]	@ (81094dc <UART_SetConfig+0x6a4>)
 8109306:	4293      	cmp	r3, r2
 8109308:	d130      	bne.n	810936c <UART_SetConfig+0x534>
 810930a:	4b72      	ldr	r3, [pc, #456]	@ (81094d4 <UART_SetConfig+0x69c>)
 810930c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810930e:	f003 0307 	and.w	r3, r3, #7
 8109312:	2b05      	cmp	r3, #5
 8109314:	d826      	bhi.n	8109364 <UART_SetConfig+0x52c>
 8109316:	a201      	add	r2, pc, #4	@ (adr r2, 810931c <UART_SetConfig+0x4e4>)
 8109318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810931c:	08109335 	.word	0x08109335
 8109320:	0810933d 	.word	0x0810933d
 8109324:	08109345 	.word	0x08109345
 8109328:	0810934d 	.word	0x0810934d
 810932c:	08109355 	.word	0x08109355
 8109330:	0810935d 	.word	0x0810935d
 8109334:	2300      	movs	r3, #0
 8109336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810933a:	e050      	b.n	81093de <UART_SetConfig+0x5a6>
 810933c:	2304      	movs	r3, #4
 810933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109342:	e04c      	b.n	81093de <UART_SetConfig+0x5a6>
 8109344:	2308      	movs	r3, #8
 8109346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810934a:	e048      	b.n	81093de <UART_SetConfig+0x5a6>
 810934c:	2310      	movs	r3, #16
 810934e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109352:	e044      	b.n	81093de <UART_SetConfig+0x5a6>
 8109354:	2320      	movs	r3, #32
 8109356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810935a:	e040      	b.n	81093de <UART_SetConfig+0x5a6>
 810935c:	2340      	movs	r3, #64	@ 0x40
 810935e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109362:	e03c      	b.n	81093de <UART_SetConfig+0x5a6>
 8109364:	2380      	movs	r3, #128	@ 0x80
 8109366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810936a:	e038      	b.n	81093de <UART_SetConfig+0x5a6>
 810936c:	697b      	ldr	r3, [r7, #20]
 810936e:	681b      	ldr	r3, [r3, #0]
 8109370:	4a5b      	ldr	r2, [pc, #364]	@ (81094e0 <UART_SetConfig+0x6a8>)
 8109372:	4293      	cmp	r3, r2
 8109374:	d130      	bne.n	81093d8 <UART_SetConfig+0x5a0>
 8109376:	4b57      	ldr	r3, [pc, #348]	@ (81094d4 <UART_SetConfig+0x69c>)
 8109378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810937a:	f003 0307 	and.w	r3, r3, #7
 810937e:	2b05      	cmp	r3, #5
 8109380:	d826      	bhi.n	81093d0 <UART_SetConfig+0x598>
 8109382:	a201      	add	r2, pc, #4	@ (adr r2, 8109388 <UART_SetConfig+0x550>)
 8109384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109388:	081093a1 	.word	0x081093a1
 810938c:	081093a9 	.word	0x081093a9
 8109390:	081093b1 	.word	0x081093b1
 8109394:	081093b9 	.word	0x081093b9
 8109398:	081093c1 	.word	0x081093c1
 810939c:	081093c9 	.word	0x081093c9
 81093a0:	2302      	movs	r3, #2
 81093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093a6:	e01a      	b.n	81093de <UART_SetConfig+0x5a6>
 81093a8:	2304      	movs	r3, #4
 81093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093ae:	e016      	b.n	81093de <UART_SetConfig+0x5a6>
 81093b0:	2308      	movs	r3, #8
 81093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093b6:	e012      	b.n	81093de <UART_SetConfig+0x5a6>
 81093b8:	2310      	movs	r3, #16
 81093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093be:	e00e      	b.n	81093de <UART_SetConfig+0x5a6>
 81093c0:	2320      	movs	r3, #32
 81093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093c6:	e00a      	b.n	81093de <UART_SetConfig+0x5a6>
 81093c8:	2340      	movs	r3, #64	@ 0x40
 81093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093ce:	e006      	b.n	81093de <UART_SetConfig+0x5a6>
 81093d0:	2380      	movs	r3, #128	@ 0x80
 81093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81093d6:	e002      	b.n	81093de <UART_SetConfig+0x5a6>
 81093d8:	2380      	movs	r3, #128	@ 0x80
 81093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81093de:	697b      	ldr	r3, [r7, #20]
 81093e0:	681b      	ldr	r3, [r3, #0]
 81093e2:	4a3f      	ldr	r2, [pc, #252]	@ (81094e0 <UART_SetConfig+0x6a8>)
 81093e4:	4293      	cmp	r3, r2
 81093e6:	f040 80f8 	bne.w	81095da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81093ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81093ee:	2b20      	cmp	r3, #32
 81093f0:	dc46      	bgt.n	8109480 <UART_SetConfig+0x648>
 81093f2:	2b02      	cmp	r3, #2
 81093f4:	f2c0 8082 	blt.w	81094fc <UART_SetConfig+0x6c4>
 81093f8:	3b02      	subs	r3, #2
 81093fa:	2b1e      	cmp	r3, #30
 81093fc:	d87e      	bhi.n	81094fc <UART_SetConfig+0x6c4>
 81093fe:	a201      	add	r2, pc, #4	@ (adr r2, 8109404 <UART_SetConfig+0x5cc>)
 8109400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109404:	08109487 	.word	0x08109487
 8109408:	081094fd 	.word	0x081094fd
 810940c:	0810948f 	.word	0x0810948f
 8109410:	081094fd 	.word	0x081094fd
 8109414:	081094fd 	.word	0x081094fd
 8109418:	081094fd 	.word	0x081094fd
 810941c:	0810949f 	.word	0x0810949f
 8109420:	081094fd 	.word	0x081094fd
 8109424:	081094fd 	.word	0x081094fd
 8109428:	081094fd 	.word	0x081094fd
 810942c:	081094fd 	.word	0x081094fd
 8109430:	081094fd 	.word	0x081094fd
 8109434:	081094fd 	.word	0x081094fd
 8109438:	081094fd 	.word	0x081094fd
 810943c:	081094af 	.word	0x081094af
 8109440:	081094fd 	.word	0x081094fd
 8109444:	081094fd 	.word	0x081094fd
 8109448:	081094fd 	.word	0x081094fd
 810944c:	081094fd 	.word	0x081094fd
 8109450:	081094fd 	.word	0x081094fd
 8109454:	081094fd 	.word	0x081094fd
 8109458:	081094fd 	.word	0x081094fd
 810945c:	081094fd 	.word	0x081094fd
 8109460:	081094fd 	.word	0x081094fd
 8109464:	081094fd 	.word	0x081094fd
 8109468:	081094fd 	.word	0x081094fd
 810946c:	081094fd 	.word	0x081094fd
 8109470:	081094fd 	.word	0x081094fd
 8109474:	081094fd 	.word	0x081094fd
 8109478:	081094fd 	.word	0x081094fd
 810947c:	081094ef 	.word	0x081094ef
 8109480:	2b40      	cmp	r3, #64	@ 0x40
 8109482:	d037      	beq.n	81094f4 <UART_SetConfig+0x6bc>
 8109484:	e03a      	b.n	81094fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8109486:	f7fe ffd7 	bl	8108438 <HAL_RCCEx_GetD3PCLK1Freq>
 810948a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810948c:	e03c      	b.n	8109508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810948e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109492:	4618      	mov	r0, r3
 8109494:	f7fe ffe6 	bl	8108464 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810949c:	e034      	b.n	8109508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810949e:	f107 0318 	add.w	r3, r7, #24
 81094a2:	4618      	mov	r0, r3
 81094a4:	f7ff f932 	bl	810870c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81094a8:	69fb      	ldr	r3, [r7, #28]
 81094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81094ac:	e02c      	b.n	8109508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81094ae:	4b09      	ldr	r3, [pc, #36]	@ (81094d4 <UART_SetConfig+0x69c>)
 81094b0:	681b      	ldr	r3, [r3, #0]
 81094b2:	f003 0320 	and.w	r3, r3, #32
 81094b6:	2b00      	cmp	r3, #0
 81094b8:	d016      	beq.n	81094e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81094ba:	4b06      	ldr	r3, [pc, #24]	@ (81094d4 <UART_SetConfig+0x69c>)
 81094bc:	681b      	ldr	r3, [r3, #0]
 81094be:	08db      	lsrs	r3, r3, #3
 81094c0:	f003 0303 	and.w	r3, r3, #3
 81094c4:	4a07      	ldr	r2, [pc, #28]	@ (81094e4 <UART_SetConfig+0x6ac>)
 81094c6:	fa22 f303 	lsr.w	r3, r2, r3
 81094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81094cc:	e01c      	b.n	8109508 <UART_SetConfig+0x6d0>
 81094ce:	bf00      	nop
 81094d0:	40011400 	.word	0x40011400
 81094d4:	58024400 	.word	0x58024400
 81094d8:	40007800 	.word	0x40007800
 81094dc:	40007c00 	.word	0x40007c00
 81094e0:	58000c00 	.word	0x58000c00
 81094e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81094e8:	4b9d      	ldr	r3, [pc, #628]	@ (8109760 <UART_SetConfig+0x928>)
 81094ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81094ec:	e00c      	b.n	8109508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81094ee:	4b9d      	ldr	r3, [pc, #628]	@ (8109764 <UART_SetConfig+0x92c>)
 81094f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81094f2:	e009      	b.n	8109508 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81094f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81094f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81094fa:	e005      	b.n	8109508 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81094fc:	2300      	movs	r3, #0
 81094fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8109500:	2301      	movs	r3, #1
 8109502:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8109506:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810950a:	2b00      	cmp	r3, #0
 810950c:	f000 81de 	beq.w	81098cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109510:	697b      	ldr	r3, [r7, #20]
 8109512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109514:	4a94      	ldr	r2, [pc, #592]	@ (8109768 <UART_SetConfig+0x930>)
 8109516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810951a:	461a      	mov	r2, r3
 810951c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810951e:	fbb3 f3f2 	udiv	r3, r3, r2
 8109522:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109524:	697b      	ldr	r3, [r7, #20]
 8109526:	685a      	ldr	r2, [r3, #4]
 8109528:	4613      	mov	r3, r2
 810952a:	005b      	lsls	r3, r3, #1
 810952c:	4413      	add	r3, r2
 810952e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109530:	429a      	cmp	r2, r3
 8109532:	d305      	bcc.n	8109540 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109534:	697b      	ldr	r3, [r7, #20]
 8109536:	685b      	ldr	r3, [r3, #4]
 8109538:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810953a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810953c:	429a      	cmp	r2, r3
 810953e:	d903      	bls.n	8109548 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109540:	2301      	movs	r3, #1
 8109542:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8109546:	e1c1      	b.n	81098cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810954a:	2200      	movs	r2, #0
 810954c:	60bb      	str	r3, [r7, #8]
 810954e:	60fa      	str	r2, [r7, #12]
 8109550:	697b      	ldr	r3, [r7, #20]
 8109552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109554:	4a84      	ldr	r2, [pc, #528]	@ (8109768 <UART_SetConfig+0x930>)
 8109556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810955a:	b29b      	uxth	r3, r3
 810955c:	2200      	movs	r2, #0
 810955e:	603b      	str	r3, [r7, #0]
 8109560:	607a      	str	r2, [r7, #4]
 8109562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810956a:	f7f7 fc25 	bl	8100db8 <__aeabi_uldivmod>
 810956e:	4602      	mov	r2, r0
 8109570:	460b      	mov	r3, r1
 8109572:	4610      	mov	r0, r2
 8109574:	4619      	mov	r1, r3
 8109576:	f04f 0200 	mov.w	r2, #0
 810957a:	f04f 0300 	mov.w	r3, #0
 810957e:	020b      	lsls	r3, r1, #8
 8109580:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8109584:	0202      	lsls	r2, r0, #8
 8109586:	6979      	ldr	r1, [r7, #20]
 8109588:	6849      	ldr	r1, [r1, #4]
 810958a:	0849      	lsrs	r1, r1, #1
 810958c:	2000      	movs	r0, #0
 810958e:	460c      	mov	r4, r1
 8109590:	4605      	mov	r5, r0
 8109592:	eb12 0804 	adds.w	r8, r2, r4
 8109596:	eb43 0905 	adc.w	r9, r3, r5
 810959a:	697b      	ldr	r3, [r7, #20]
 810959c:	685b      	ldr	r3, [r3, #4]
 810959e:	2200      	movs	r2, #0
 81095a0:	469a      	mov	sl, r3
 81095a2:	4693      	mov	fp, r2
 81095a4:	4652      	mov	r2, sl
 81095a6:	465b      	mov	r3, fp
 81095a8:	4640      	mov	r0, r8
 81095aa:	4649      	mov	r1, r9
 81095ac:	f7f7 fc04 	bl	8100db8 <__aeabi_uldivmod>
 81095b0:	4602      	mov	r2, r0
 81095b2:	460b      	mov	r3, r1
 81095b4:	4613      	mov	r3, r2
 81095b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81095b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81095ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81095be:	d308      	bcc.n	81095d2 <UART_SetConfig+0x79a>
 81095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81095c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81095c6:	d204      	bcs.n	81095d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81095c8:	697b      	ldr	r3, [r7, #20]
 81095ca:	681b      	ldr	r3, [r3, #0]
 81095cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81095ce:	60da      	str	r2, [r3, #12]
 81095d0:	e17c      	b.n	81098cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81095d2:	2301      	movs	r3, #1
 81095d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81095d8:	e178      	b.n	81098cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81095da:	697b      	ldr	r3, [r7, #20]
 81095dc:	69db      	ldr	r3, [r3, #28]
 81095de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81095e2:	f040 80c5 	bne.w	8109770 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81095e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81095ea:	2b20      	cmp	r3, #32
 81095ec:	dc48      	bgt.n	8109680 <UART_SetConfig+0x848>
 81095ee:	2b00      	cmp	r3, #0
 81095f0:	db7b      	blt.n	81096ea <UART_SetConfig+0x8b2>
 81095f2:	2b20      	cmp	r3, #32
 81095f4:	d879      	bhi.n	81096ea <UART_SetConfig+0x8b2>
 81095f6:	a201      	add	r2, pc, #4	@ (adr r2, 81095fc <UART_SetConfig+0x7c4>)
 81095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81095fc:	08109687 	.word	0x08109687
 8109600:	0810968f 	.word	0x0810968f
 8109604:	081096eb 	.word	0x081096eb
 8109608:	081096eb 	.word	0x081096eb
 810960c:	08109697 	.word	0x08109697
 8109610:	081096eb 	.word	0x081096eb
 8109614:	081096eb 	.word	0x081096eb
 8109618:	081096eb 	.word	0x081096eb
 810961c:	081096a7 	.word	0x081096a7
 8109620:	081096eb 	.word	0x081096eb
 8109624:	081096eb 	.word	0x081096eb
 8109628:	081096eb 	.word	0x081096eb
 810962c:	081096eb 	.word	0x081096eb
 8109630:	081096eb 	.word	0x081096eb
 8109634:	081096eb 	.word	0x081096eb
 8109638:	081096eb 	.word	0x081096eb
 810963c:	081096b7 	.word	0x081096b7
 8109640:	081096eb 	.word	0x081096eb
 8109644:	081096eb 	.word	0x081096eb
 8109648:	081096eb 	.word	0x081096eb
 810964c:	081096eb 	.word	0x081096eb
 8109650:	081096eb 	.word	0x081096eb
 8109654:	081096eb 	.word	0x081096eb
 8109658:	081096eb 	.word	0x081096eb
 810965c:	081096eb 	.word	0x081096eb
 8109660:	081096eb 	.word	0x081096eb
 8109664:	081096eb 	.word	0x081096eb
 8109668:	081096eb 	.word	0x081096eb
 810966c:	081096eb 	.word	0x081096eb
 8109670:	081096eb 	.word	0x081096eb
 8109674:	081096eb 	.word	0x081096eb
 8109678:	081096eb 	.word	0x081096eb
 810967c:	081096dd 	.word	0x081096dd
 8109680:	2b40      	cmp	r3, #64	@ 0x40
 8109682:	d02e      	beq.n	81096e2 <UART_SetConfig+0x8aa>
 8109684:	e031      	b.n	81096ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109686:	f7fd fc61 	bl	8106f4c <HAL_RCC_GetPCLK1Freq>
 810968a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810968c:	e033      	b.n	81096f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810968e:	f7fd fc73 	bl	8106f78 <HAL_RCC_GetPCLK2Freq>
 8109692:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109694:	e02f      	b.n	81096f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810969a:	4618      	mov	r0, r3
 810969c:	f7fe fee2 	bl	8108464 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81096a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81096a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81096a4:	e027      	b.n	81096f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81096a6:	f107 0318 	add.w	r3, r7, #24
 81096aa:	4618      	mov	r0, r3
 81096ac:	f7ff f82e 	bl	810870c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81096b0:	69fb      	ldr	r3, [r7, #28]
 81096b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81096b4:	e01f      	b.n	81096f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81096b6:	4b2d      	ldr	r3, [pc, #180]	@ (810976c <UART_SetConfig+0x934>)
 81096b8:	681b      	ldr	r3, [r3, #0]
 81096ba:	f003 0320 	and.w	r3, r3, #32
 81096be:	2b00      	cmp	r3, #0
 81096c0:	d009      	beq.n	81096d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81096c2:	4b2a      	ldr	r3, [pc, #168]	@ (810976c <UART_SetConfig+0x934>)
 81096c4:	681b      	ldr	r3, [r3, #0]
 81096c6:	08db      	lsrs	r3, r3, #3
 81096c8:	f003 0303 	and.w	r3, r3, #3
 81096cc:	4a24      	ldr	r2, [pc, #144]	@ (8109760 <UART_SetConfig+0x928>)
 81096ce:	fa22 f303 	lsr.w	r3, r2, r3
 81096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81096d4:	e00f      	b.n	81096f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81096d6:	4b22      	ldr	r3, [pc, #136]	@ (8109760 <UART_SetConfig+0x928>)
 81096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81096da:	e00c      	b.n	81096f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81096dc:	4b21      	ldr	r3, [pc, #132]	@ (8109764 <UART_SetConfig+0x92c>)
 81096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81096e0:	e009      	b.n	81096f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81096e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81096e8:	e005      	b.n	81096f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81096ea:	2300      	movs	r3, #0
 81096ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81096ee:	2301      	movs	r3, #1
 81096f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81096f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81096f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81096f8:	2b00      	cmp	r3, #0
 81096fa:	f000 80e7 	beq.w	81098cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81096fe:	697b      	ldr	r3, [r7, #20]
 8109700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109702:	4a19      	ldr	r2, [pc, #100]	@ (8109768 <UART_SetConfig+0x930>)
 8109704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109708:	461a      	mov	r2, r3
 810970a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810970c:	fbb3 f3f2 	udiv	r3, r3, r2
 8109710:	005a      	lsls	r2, r3, #1
 8109712:	697b      	ldr	r3, [r7, #20]
 8109714:	685b      	ldr	r3, [r3, #4]
 8109716:	085b      	lsrs	r3, r3, #1
 8109718:	441a      	add	r2, r3
 810971a:	697b      	ldr	r3, [r7, #20]
 810971c:	685b      	ldr	r3, [r3, #4]
 810971e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109722:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109726:	2b0f      	cmp	r3, #15
 8109728:	d916      	bls.n	8109758 <UART_SetConfig+0x920>
 810972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810972c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109730:	d212      	bcs.n	8109758 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109734:	b29b      	uxth	r3, r3
 8109736:	f023 030f 	bic.w	r3, r3, #15
 810973a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810973c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810973e:	085b      	lsrs	r3, r3, #1
 8109740:	b29b      	uxth	r3, r3
 8109742:	f003 0307 	and.w	r3, r3, #7
 8109746:	b29a      	uxth	r2, r3
 8109748:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810974a:	4313      	orrs	r3, r2
 810974c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810974e:	697b      	ldr	r3, [r7, #20]
 8109750:	681b      	ldr	r3, [r3, #0]
 8109752:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8109754:	60da      	str	r2, [r3, #12]
 8109756:	e0b9      	b.n	81098cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109758:	2301      	movs	r3, #1
 810975a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810975e:	e0b5      	b.n	81098cc <UART_SetConfig+0xa94>
 8109760:	03d09000 	.word	0x03d09000
 8109764:	003d0900 	.word	0x003d0900
 8109768:	0811ef40 	.word	0x0811ef40
 810976c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8109770:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8109774:	2b20      	cmp	r3, #32
 8109776:	dc49      	bgt.n	810980c <UART_SetConfig+0x9d4>
 8109778:	2b00      	cmp	r3, #0
 810977a:	db7c      	blt.n	8109876 <UART_SetConfig+0xa3e>
 810977c:	2b20      	cmp	r3, #32
 810977e:	d87a      	bhi.n	8109876 <UART_SetConfig+0xa3e>
 8109780:	a201      	add	r2, pc, #4	@ (adr r2, 8109788 <UART_SetConfig+0x950>)
 8109782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109786:	bf00      	nop
 8109788:	08109813 	.word	0x08109813
 810978c:	0810981b 	.word	0x0810981b
 8109790:	08109877 	.word	0x08109877
 8109794:	08109877 	.word	0x08109877
 8109798:	08109823 	.word	0x08109823
 810979c:	08109877 	.word	0x08109877
 81097a0:	08109877 	.word	0x08109877
 81097a4:	08109877 	.word	0x08109877
 81097a8:	08109833 	.word	0x08109833
 81097ac:	08109877 	.word	0x08109877
 81097b0:	08109877 	.word	0x08109877
 81097b4:	08109877 	.word	0x08109877
 81097b8:	08109877 	.word	0x08109877
 81097bc:	08109877 	.word	0x08109877
 81097c0:	08109877 	.word	0x08109877
 81097c4:	08109877 	.word	0x08109877
 81097c8:	08109843 	.word	0x08109843
 81097cc:	08109877 	.word	0x08109877
 81097d0:	08109877 	.word	0x08109877
 81097d4:	08109877 	.word	0x08109877
 81097d8:	08109877 	.word	0x08109877
 81097dc:	08109877 	.word	0x08109877
 81097e0:	08109877 	.word	0x08109877
 81097e4:	08109877 	.word	0x08109877
 81097e8:	08109877 	.word	0x08109877
 81097ec:	08109877 	.word	0x08109877
 81097f0:	08109877 	.word	0x08109877
 81097f4:	08109877 	.word	0x08109877
 81097f8:	08109877 	.word	0x08109877
 81097fc:	08109877 	.word	0x08109877
 8109800:	08109877 	.word	0x08109877
 8109804:	08109877 	.word	0x08109877
 8109808:	08109869 	.word	0x08109869
 810980c:	2b40      	cmp	r3, #64	@ 0x40
 810980e:	d02e      	beq.n	810986e <UART_SetConfig+0xa36>
 8109810:	e031      	b.n	8109876 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109812:	f7fd fb9b 	bl	8106f4c <HAL_RCC_GetPCLK1Freq>
 8109816:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109818:	e033      	b.n	8109882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810981a:	f7fd fbad 	bl	8106f78 <HAL_RCC_GetPCLK2Freq>
 810981e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109820:	e02f      	b.n	8109882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109826:	4618      	mov	r0, r3
 8109828:	f7fe fe1c 	bl	8108464 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810982e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109830:	e027      	b.n	8109882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109832:	f107 0318 	add.w	r3, r7, #24
 8109836:	4618      	mov	r0, r3
 8109838:	f7fe ff68 	bl	810870c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810983c:	69fb      	ldr	r3, [r7, #28]
 810983e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109840:	e01f      	b.n	8109882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109842:	4b2d      	ldr	r3, [pc, #180]	@ (81098f8 <UART_SetConfig+0xac0>)
 8109844:	681b      	ldr	r3, [r3, #0]
 8109846:	f003 0320 	and.w	r3, r3, #32
 810984a:	2b00      	cmp	r3, #0
 810984c:	d009      	beq.n	8109862 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810984e:	4b2a      	ldr	r3, [pc, #168]	@ (81098f8 <UART_SetConfig+0xac0>)
 8109850:	681b      	ldr	r3, [r3, #0]
 8109852:	08db      	lsrs	r3, r3, #3
 8109854:	f003 0303 	and.w	r3, r3, #3
 8109858:	4a28      	ldr	r2, [pc, #160]	@ (81098fc <UART_SetConfig+0xac4>)
 810985a:	fa22 f303 	lsr.w	r3, r2, r3
 810985e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109860:	e00f      	b.n	8109882 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8109862:	4b26      	ldr	r3, [pc, #152]	@ (81098fc <UART_SetConfig+0xac4>)
 8109864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109866:	e00c      	b.n	8109882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109868:	4b25      	ldr	r3, [pc, #148]	@ (8109900 <UART_SetConfig+0xac8>)
 810986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810986c:	e009      	b.n	8109882 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810986e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109874:	e005      	b.n	8109882 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8109876:	2300      	movs	r3, #0
 8109878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810987a:	2301      	movs	r3, #1
 810987c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8109880:	bf00      	nop
    }

    if (pclk != 0U)
 8109882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109884:	2b00      	cmp	r3, #0
 8109886:	d021      	beq.n	81098cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109888:	697b      	ldr	r3, [r7, #20]
 810988a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810988c:	4a1d      	ldr	r2, [pc, #116]	@ (8109904 <UART_SetConfig+0xacc>)
 810988e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109892:	461a      	mov	r2, r3
 8109894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109896:	fbb3 f2f2 	udiv	r2, r3, r2
 810989a:	697b      	ldr	r3, [r7, #20]
 810989c:	685b      	ldr	r3, [r3, #4]
 810989e:	085b      	lsrs	r3, r3, #1
 81098a0:	441a      	add	r2, r3
 81098a2:	697b      	ldr	r3, [r7, #20]
 81098a4:	685b      	ldr	r3, [r3, #4]
 81098a6:	fbb2 f3f3 	udiv	r3, r2, r3
 81098aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098ae:	2b0f      	cmp	r3, #15
 81098b0:	d909      	bls.n	81098c6 <UART_SetConfig+0xa8e>
 81098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81098b8:	d205      	bcs.n	81098c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098bc:	b29a      	uxth	r2, r3
 81098be:	697b      	ldr	r3, [r7, #20]
 81098c0:	681b      	ldr	r3, [r3, #0]
 81098c2:	60da      	str	r2, [r3, #12]
 81098c4:	e002      	b.n	81098cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81098c6:	2301      	movs	r3, #1
 81098c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81098cc:	697b      	ldr	r3, [r7, #20]
 81098ce:	2201      	movs	r2, #1
 81098d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 81098d4:	697b      	ldr	r3, [r7, #20]
 81098d6:	2201      	movs	r2, #1
 81098d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81098dc:	697b      	ldr	r3, [r7, #20]
 81098de:	2200      	movs	r2, #0
 81098e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 81098e2:	697b      	ldr	r3, [r7, #20]
 81098e4:	2200      	movs	r2, #0
 81098e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 81098e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 81098ec:	4618      	mov	r0, r3
 81098ee:	3748      	adds	r7, #72	@ 0x48
 81098f0:	46bd      	mov	sp, r7
 81098f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81098f6:	bf00      	nop
 81098f8:	58024400 	.word	0x58024400
 81098fc:	03d09000 	.word	0x03d09000
 8109900:	003d0900 	.word	0x003d0900
 8109904:	0811ef40 	.word	0x0811ef40

08109908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109908:	b480      	push	{r7}
 810990a:	b083      	sub	sp, #12
 810990c:	af00      	add	r7, sp, #0
 810990e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109910:	687b      	ldr	r3, [r7, #4]
 8109912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109914:	f003 0301 	and.w	r3, r3, #1
 8109918:	2b00      	cmp	r3, #0
 810991a:	d00a      	beq.n	8109932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810991c:	687b      	ldr	r3, [r7, #4]
 810991e:	681b      	ldr	r3, [r3, #0]
 8109920:	685b      	ldr	r3, [r3, #4]
 8109922:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8109926:	687b      	ldr	r3, [r7, #4]
 8109928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	681b      	ldr	r3, [r3, #0]
 810992e:	430a      	orrs	r2, r1
 8109930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109932:	687b      	ldr	r3, [r7, #4]
 8109934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109936:	f003 0302 	and.w	r3, r3, #2
 810993a:	2b00      	cmp	r3, #0
 810993c:	d00a      	beq.n	8109954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810993e:	687b      	ldr	r3, [r7, #4]
 8109940:	681b      	ldr	r3, [r3, #0]
 8109942:	685b      	ldr	r3, [r3, #4]
 8109944:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8109948:	687b      	ldr	r3, [r7, #4]
 810994a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810994c:	687b      	ldr	r3, [r7, #4]
 810994e:	681b      	ldr	r3, [r3, #0]
 8109950:	430a      	orrs	r2, r1
 8109952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8109954:	687b      	ldr	r3, [r7, #4]
 8109956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109958:	f003 0304 	and.w	r3, r3, #4
 810995c:	2b00      	cmp	r3, #0
 810995e:	d00a      	beq.n	8109976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	681b      	ldr	r3, [r3, #0]
 8109964:	685b      	ldr	r3, [r3, #4]
 8109966:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810996a:	687b      	ldr	r3, [r7, #4]
 810996c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810996e:	687b      	ldr	r3, [r7, #4]
 8109970:	681b      	ldr	r3, [r3, #0]
 8109972:	430a      	orrs	r2, r1
 8109974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109976:	687b      	ldr	r3, [r7, #4]
 8109978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810997a:	f003 0308 	and.w	r3, r3, #8
 810997e:	2b00      	cmp	r3, #0
 8109980:	d00a      	beq.n	8109998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8109982:	687b      	ldr	r3, [r7, #4]
 8109984:	681b      	ldr	r3, [r3, #0]
 8109986:	685b      	ldr	r3, [r3, #4]
 8109988:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810998c:	687b      	ldr	r3, [r7, #4]
 810998e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8109990:	687b      	ldr	r3, [r7, #4]
 8109992:	681b      	ldr	r3, [r3, #0]
 8109994:	430a      	orrs	r2, r1
 8109996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109998:	687b      	ldr	r3, [r7, #4]
 810999a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810999c:	f003 0310 	and.w	r3, r3, #16
 81099a0:	2b00      	cmp	r3, #0
 81099a2:	d00a      	beq.n	81099ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81099a4:	687b      	ldr	r3, [r7, #4]
 81099a6:	681b      	ldr	r3, [r3, #0]
 81099a8:	689b      	ldr	r3, [r3, #8]
 81099aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 81099ae:	687b      	ldr	r3, [r7, #4]
 81099b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81099b2:	687b      	ldr	r3, [r7, #4]
 81099b4:	681b      	ldr	r3, [r3, #0]
 81099b6:	430a      	orrs	r2, r1
 81099b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81099ba:	687b      	ldr	r3, [r7, #4]
 81099bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81099be:	f003 0320 	and.w	r3, r3, #32
 81099c2:	2b00      	cmp	r3, #0
 81099c4:	d00a      	beq.n	81099dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	681b      	ldr	r3, [r3, #0]
 81099ca:	689b      	ldr	r3, [r3, #8]
 81099cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 81099d0:	687b      	ldr	r3, [r7, #4]
 81099d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 81099d4:	687b      	ldr	r3, [r7, #4]
 81099d6:	681b      	ldr	r3, [r3, #0]
 81099d8:	430a      	orrs	r2, r1
 81099da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81099dc:	687b      	ldr	r3, [r7, #4]
 81099de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81099e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81099e4:	2b00      	cmp	r3, #0
 81099e6:	d01a      	beq.n	8109a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81099e8:	687b      	ldr	r3, [r7, #4]
 81099ea:	681b      	ldr	r3, [r3, #0]
 81099ec:	685b      	ldr	r3, [r3, #4]
 81099ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 81099f2:	687b      	ldr	r3, [r7, #4]
 81099f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	681b      	ldr	r3, [r3, #0]
 81099fa:	430a      	orrs	r2, r1
 81099fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81099fe:	687b      	ldr	r3, [r7, #4]
 8109a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109a06:	d10a      	bne.n	8109a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109a08:	687b      	ldr	r3, [r7, #4]
 8109a0a:	681b      	ldr	r3, [r3, #0]
 8109a0c:	685b      	ldr	r3, [r3, #4]
 8109a0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8109a12:	687b      	ldr	r3, [r7, #4]
 8109a14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8109a16:	687b      	ldr	r3, [r7, #4]
 8109a18:	681b      	ldr	r3, [r3, #0]
 8109a1a:	430a      	orrs	r2, r1
 8109a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8109a1e:	687b      	ldr	r3, [r7, #4]
 8109a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109a26:	2b00      	cmp	r3, #0
 8109a28:	d00a      	beq.n	8109a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8109a2a:	687b      	ldr	r3, [r7, #4]
 8109a2c:	681b      	ldr	r3, [r3, #0]
 8109a2e:	685b      	ldr	r3, [r3, #4]
 8109a30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8109a34:	687b      	ldr	r3, [r7, #4]
 8109a36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8109a38:	687b      	ldr	r3, [r7, #4]
 8109a3a:	681b      	ldr	r3, [r3, #0]
 8109a3c:	430a      	orrs	r2, r1
 8109a3e:	605a      	str	r2, [r3, #4]
  }
}
 8109a40:	bf00      	nop
 8109a42:	370c      	adds	r7, #12
 8109a44:	46bd      	mov	sp, r7
 8109a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a4a:	4770      	bx	lr

08109a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8109a4c:	b580      	push	{r7, lr}
 8109a4e:	b098      	sub	sp, #96	@ 0x60
 8109a50:	af02      	add	r7, sp, #8
 8109a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109a54:	687b      	ldr	r3, [r7, #4]
 8109a56:	2200      	movs	r2, #0
 8109a58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8109a5c:	f7fb f988 	bl	8104d70 <HAL_GetTick>
 8109a60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8109a62:	687b      	ldr	r3, [r7, #4]
 8109a64:	681b      	ldr	r3, [r3, #0]
 8109a66:	681b      	ldr	r3, [r3, #0]
 8109a68:	f003 0308 	and.w	r3, r3, #8
 8109a6c:	2b08      	cmp	r3, #8
 8109a6e:	d12f      	bne.n	8109ad0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109a70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8109a74:	9300      	str	r3, [sp, #0]
 8109a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109a78:	2200      	movs	r2, #0
 8109a7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8109a7e:	6878      	ldr	r0, [r7, #4]
 8109a80:	f000 f88e 	bl	8109ba0 <UART_WaitOnFlagUntilTimeout>
 8109a84:	4603      	mov	r3, r0
 8109a86:	2b00      	cmp	r3, #0
 8109a88:	d022      	beq.n	8109ad0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	681b      	ldr	r3, [r3, #0]
 8109a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a92:	e853 3f00 	ldrex	r3, [r3]
 8109a96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8109a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8109aa0:	687b      	ldr	r3, [r7, #4]
 8109aa2:	681b      	ldr	r3, [r3, #0]
 8109aa4:	461a      	mov	r2, r3
 8109aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8109aaa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109aac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8109aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109ab0:	e841 2300 	strex	r3, r2, [r1]
 8109ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8109ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109ab8:	2b00      	cmp	r3, #0
 8109aba:	d1e6      	bne.n	8109a8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8109abc:	687b      	ldr	r3, [r7, #4]
 8109abe:	2220      	movs	r2, #32
 8109ac0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8109ac4:	687b      	ldr	r3, [r7, #4]
 8109ac6:	2200      	movs	r2, #0
 8109ac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109acc:	2303      	movs	r3, #3
 8109ace:	e063      	b.n	8109b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109ad0:	687b      	ldr	r3, [r7, #4]
 8109ad2:	681b      	ldr	r3, [r3, #0]
 8109ad4:	681b      	ldr	r3, [r3, #0]
 8109ad6:	f003 0304 	and.w	r3, r3, #4
 8109ada:	2b04      	cmp	r3, #4
 8109adc:	d149      	bne.n	8109b72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109ade:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8109ae2:	9300      	str	r3, [sp, #0]
 8109ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109ae6:	2200      	movs	r2, #0
 8109ae8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8109aec:	6878      	ldr	r0, [r7, #4]
 8109aee:	f000 f857 	bl	8109ba0 <UART_WaitOnFlagUntilTimeout>
 8109af2:	4603      	mov	r3, r0
 8109af4:	2b00      	cmp	r3, #0
 8109af6:	d03c      	beq.n	8109b72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109af8:	687b      	ldr	r3, [r7, #4]
 8109afa:	681b      	ldr	r3, [r3, #0]
 8109afc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109b00:	e853 3f00 	ldrex	r3, [r3]
 8109b04:	623b      	str	r3, [r7, #32]
   return(result);
 8109b06:	6a3b      	ldr	r3, [r7, #32]
 8109b08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8109b0e:	687b      	ldr	r3, [r7, #4]
 8109b10:	681b      	ldr	r3, [r3, #0]
 8109b12:	461a      	mov	r2, r3
 8109b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109b16:	633b      	str	r3, [r7, #48]	@ 0x30
 8109b18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8109b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109b1e:	e841 2300 	strex	r3, r2, [r1]
 8109b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8109b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109b26:	2b00      	cmp	r3, #0
 8109b28:	d1e6      	bne.n	8109af8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109b2a:	687b      	ldr	r3, [r7, #4]
 8109b2c:	681b      	ldr	r3, [r3, #0]
 8109b2e:	3308      	adds	r3, #8
 8109b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109b32:	693b      	ldr	r3, [r7, #16]
 8109b34:	e853 3f00 	ldrex	r3, [r3]
 8109b38:	60fb      	str	r3, [r7, #12]
   return(result);
 8109b3a:	68fb      	ldr	r3, [r7, #12]
 8109b3c:	f023 0301 	bic.w	r3, r3, #1
 8109b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	681b      	ldr	r3, [r3, #0]
 8109b46:	3308      	adds	r3, #8
 8109b48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109b4a:	61fa      	str	r2, [r7, #28]
 8109b4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109b4e:	69b9      	ldr	r1, [r7, #24]
 8109b50:	69fa      	ldr	r2, [r7, #28]
 8109b52:	e841 2300 	strex	r3, r2, [r1]
 8109b56:	617b      	str	r3, [r7, #20]
   return(result);
 8109b58:	697b      	ldr	r3, [r7, #20]
 8109b5a:	2b00      	cmp	r3, #0
 8109b5c:	d1e5      	bne.n	8109b2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8109b5e:	687b      	ldr	r3, [r7, #4]
 8109b60:	2220      	movs	r2, #32
 8109b62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8109b66:	687b      	ldr	r3, [r7, #4]
 8109b68:	2200      	movs	r2, #0
 8109b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109b6e:	2303      	movs	r3, #3
 8109b70:	e012      	b.n	8109b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8109b72:	687b      	ldr	r3, [r7, #4]
 8109b74:	2220      	movs	r2, #32
 8109b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8109b7a:	687b      	ldr	r3, [r7, #4]
 8109b7c:	2220      	movs	r2, #32
 8109b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109b82:	687b      	ldr	r3, [r7, #4]
 8109b84:	2200      	movs	r2, #0
 8109b86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	2200      	movs	r2, #0
 8109b8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8109b8e:	687b      	ldr	r3, [r7, #4]
 8109b90:	2200      	movs	r2, #0
 8109b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109b96:	2300      	movs	r3, #0
}
 8109b98:	4618      	mov	r0, r3
 8109b9a:	3758      	adds	r7, #88	@ 0x58
 8109b9c:	46bd      	mov	sp, r7
 8109b9e:	bd80      	pop	{r7, pc}

08109ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109ba0:	b580      	push	{r7, lr}
 8109ba2:	b084      	sub	sp, #16
 8109ba4:	af00      	add	r7, sp, #0
 8109ba6:	60f8      	str	r0, [r7, #12]
 8109ba8:	60b9      	str	r1, [r7, #8]
 8109baa:	603b      	str	r3, [r7, #0]
 8109bac:	4613      	mov	r3, r2
 8109bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109bb0:	e049      	b.n	8109c46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109bb2:	69bb      	ldr	r3, [r7, #24]
 8109bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109bb8:	d045      	beq.n	8109c46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109bba:	f7fb f8d9 	bl	8104d70 <HAL_GetTick>
 8109bbe:	4602      	mov	r2, r0
 8109bc0:	683b      	ldr	r3, [r7, #0]
 8109bc2:	1ad3      	subs	r3, r2, r3
 8109bc4:	69ba      	ldr	r2, [r7, #24]
 8109bc6:	429a      	cmp	r2, r3
 8109bc8:	d302      	bcc.n	8109bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8109bca:	69bb      	ldr	r3, [r7, #24]
 8109bcc:	2b00      	cmp	r3, #0
 8109bce:	d101      	bne.n	8109bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8109bd0:	2303      	movs	r3, #3
 8109bd2:	e048      	b.n	8109c66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8109bd4:	68fb      	ldr	r3, [r7, #12]
 8109bd6:	681b      	ldr	r3, [r3, #0]
 8109bd8:	681b      	ldr	r3, [r3, #0]
 8109bda:	f003 0304 	and.w	r3, r3, #4
 8109bde:	2b00      	cmp	r3, #0
 8109be0:	d031      	beq.n	8109c46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8109be2:	68fb      	ldr	r3, [r7, #12]
 8109be4:	681b      	ldr	r3, [r3, #0]
 8109be6:	69db      	ldr	r3, [r3, #28]
 8109be8:	f003 0308 	and.w	r3, r3, #8
 8109bec:	2b08      	cmp	r3, #8
 8109bee:	d110      	bne.n	8109c12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8109bf0:	68fb      	ldr	r3, [r7, #12]
 8109bf2:	681b      	ldr	r3, [r3, #0]
 8109bf4:	2208      	movs	r2, #8
 8109bf6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8109bf8:	68f8      	ldr	r0, [r7, #12]
 8109bfa:	f000 f838 	bl	8109c6e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8109bfe:	68fb      	ldr	r3, [r7, #12]
 8109c00:	2208      	movs	r2, #8
 8109c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8109c06:	68fb      	ldr	r3, [r7, #12]
 8109c08:	2200      	movs	r2, #0
 8109c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8109c0e:	2301      	movs	r3, #1
 8109c10:	e029      	b.n	8109c66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8109c12:	68fb      	ldr	r3, [r7, #12]
 8109c14:	681b      	ldr	r3, [r3, #0]
 8109c16:	69db      	ldr	r3, [r3, #28]
 8109c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8109c20:	d111      	bne.n	8109c46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109c22:	68fb      	ldr	r3, [r7, #12]
 8109c24:	681b      	ldr	r3, [r3, #0]
 8109c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8109c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109c2c:	68f8      	ldr	r0, [r7, #12]
 8109c2e:	f000 f81e 	bl	8109c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8109c32:	68fb      	ldr	r3, [r7, #12]
 8109c34:	2220      	movs	r2, #32
 8109c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109c3a:	68fb      	ldr	r3, [r7, #12]
 8109c3c:	2200      	movs	r2, #0
 8109c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8109c42:	2303      	movs	r3, #3
 8109c44:	e00f      	b.n	8109c66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109c46:	68fb      	ldr	r3, [r7, #12]
 8109c48:	681b      	ldr	r3, [r3, #0]
 8109c4a:	69da      	ldr	r2, [r3, #28]
 8109c4c:	68bb      	ldr	r3, [r7, #8]
 8109c4e:	4013      	ands	r3, r2
 8109c50:	68ba      	ldr	r2, [r7, #8]
 8109c52:	429a      	cmp	r2, r3
 8109c54:	bf0c      	ite	eq
 8109c56:	2301      	moveq	r3, #1
 8109c58:	2300      	movne	r3, #0
 8109c5a:	b2db      	uxtb	r3, r3
 8109c5c:	461a      	mov	r2, r3
 8109c5e:	79fb      	ldrb	r3, [r7, #7]
 8109c60:	429a      	cmp	r2, r3
 8109c62:	d0a6      	beq.n	8109bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109c64:	2300      	movs	r3, #0
}
 8109c66:	4618      	mov	r0, r3
 8109c68:	3710      	adds	r7, #16
 8109c6a:	46bd      	mov	sp, r7
 8109c6c:	bd80      	pop	{r7, pc}

08109c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8109c6e:	b480      	push	{r7}
 8109c70:	b095      	sub	sp, #84	@ 0x54
 8109c72:	af00      	add	r7, sp, #0
 8109c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109c76:	687b      	ldr	r3, [r7, #4]
 8109c78:	681b      	ldr	r3, [r3, #0]
 8109c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109c7e:	e853 3f00 	ldrex	r3, [r3]
 8109c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8109c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8109c8c:	687b      	ldr	r3, [r7, #4]
 8109c8e:	681b      	ldr	r3, [r3, #0]
 8109c90:	461a      	mov	r2, r3
 8109c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8109c96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8109c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8109c9c:	e841 2300 	strex	r3, r2, [r1]
 8109ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8109ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ca4:	2b00      	cmp	r3, #0
 8109ca6:	d1e6      	bne.n	8109c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109ca8:	687b      	ldr	r3, [r7, #4]
 8109caa:	681b      	ldr	r3, [r3, #0]
 8109cac:	3308      	adds	r3, #8
 8109cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109cb0:	6a3b      	ldr	r3, [r7, #32]
 8109cb2:	e853 3f00 	ldrex	r3, [r3]
 8109cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8109cb8:	69fb      	ldr	r3, [r7, #28]
 8109cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8109cbe:	f023 0301 	bic.w	r3, r3, #1
 8109cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109cc4:	687b      	ldr	r3, [r7, #4]
 8109cc6:	681b      	ldr	r3, [r3, #0]
 8109cc8:	3308      	adds	r3, #8
 8109cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8109cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8109cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109cd4:	e841 2300 	strex	r3, r2, [r1]
 8109cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8109cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109cdc:	2b00      	cmp	r3, #0
 8109cde:	d1e3      	bne.n	8109ca8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109ce0:	687b      	ldr	r3, [r7, #4]
 8109ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109ce4:	2b01      	cmp	r3, #1
 8109ce6:	d118      	bne.n	8109d1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109ce8:	687b      	ldr	r3, [r7, #4]
 8109cea:	681b      	ldr	r3, [r3, #0]
 8109cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109cee:	68fb      	ldr	r3, [r7, #12]
 8109cf0:	e853 3f00 	ldrex	r3, [r3]
 8109cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8109cf6:	68bb      	ldr	r3, [r7, #8]
 8109cf8:	f023 0310 	bic.w	r3, r3, #16
 8109cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8109cfe:	687b      	ldr	r3, [r7, #4]
 8109d00:	681b      	ldr	r3, [r3, #0]
 8109d02:	461a      	mov	r2, r3
 8109d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109d06:	61bb      	str	r3, [r7, #24]
 8109d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109d0a:	6979      	ldr	r1, [r7, #20]
 8109d0c:	69ba      	ldr	r2, [r7, #24]
 8109d0e:	e841 2300 	strex	r3, r2, [r1]
 8109d12:	613b      	str	r3, [r7, #16]
   return(result);
 8109d14:	693b      	ldr	r3, [r7, #16]
 8109d16:	2b00      	cmp	r3, #0
 8109d18:	d1e6      	bne.n	8109ce8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109d1a:	687b      	ldr	r3, [r7, #4]
 8109d1c:	2220      	movs	r2, #32
 8109d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109d22:	687b      	ldr	r3, [r7, #4]
 8109d24:	2200      	movs	r2, #0
 8109d26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109d28:	687b      	ldr	r3, [r7, #4]
 8109d2a:	2200      	movs	r2, #0
 8109d2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8109d2e:	bf00      	nop
 8109d30:	3754      	adds	r7, #84	@ 0x54
 8109d32:	46bd      	mov	sp, r7
 8109d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d38:	4770      	bx	lr

08109d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8109d3a:	b480      	push	{r7}
 8109d3c:	b085      	sub	sp, #20
 8109d3e:	af00      	add	r7, sp, #0
 8109d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109d42:	687b      	ldr	r3, [r7, #4]
 8109d44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109d48:	2b01      	cmp	r3, #1
 8109d4a:	d101      	bne.n	8109d50 <HAL_UARTEx_DisableFifoMode+0x16>
 8109d4c:	2302      	movs	r3, #2
 8109d4e:	e027      	b.n	8109da0 <HAL_UARTEx_DisableFifoMode+0x66>
 8109d50:	687b      	ldr	r3, [r7, #4]
 8109d52:	2201      	movs	r2, #1
 8109d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109d58:	687b      	ldr	r3, [r7, #4]
 8109d5a:	2224      	movs	r2, #36	@ 0x24
 8109d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109d60:	687b      	ldr	r3, [r7, #4]
 8109d62:	681b      	ldr	r3, [r3, #0]
 8109d64:	681b      	ldr	r3, [r3, #0]
 8109d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	681b      	ldr	r3, [r3, #0]
 8109d6c:	681a      	ldr	r2, [r3, #0]
 8109d6e:	687b      	ldr	r3, [r7, #4]
 8109d70:	681b      	ldr	r3, [r3, #0]
 8109d72:	f022 0201 	bic.w	r2, r2, #1
 8109d76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109d78:	68fb      	ldr	r3, [r7, #12]
 8109d7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8109d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109d80:	687b      	ldr	r3, [r7, #4]
 8109d82:	2200      	movs	r2, #0
 8109d84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109d86:	687b      	ldr	r3, [r7, #4]
 8109d88:	681b      	ldr	r3, [r3, #0]
 8109d8a:	68fa      	ldr	r2, [r7, #12]
 8109d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	2220      	movs	r2, #32
 8109d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109d96:	687b      	ldr	r3, [r7, #4]
 8109d98:	2200      	movs	r2, #0
 8109d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109d9e:	2300      	movs	r3, #0
}
 8109da0:	4618      	mov	r0, r3
 8109da2:	3714      	adds	r7, #20
 8109da4:	46bd      	mov	sp, r7
 8109da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109daa:	4770      	bx	lr

08109dac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109dac:	b580      	push	{r7, lr}
 8109dae:	b084      	sub	sp, #16
 8109db0:	af00      	add	r7, sp, #0
 8109db2:	6078      	str	r0, [r7, #4]
 8109db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109db6:	687b      	ldr	r3, [r7, #4]
 8109db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109dbc:	2b01      	cmp	r3, #1
 8109dbe:	d101      	bne.n	8109dc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109dc0:	2302      	movs	r3, #2
 8109dc2:	e02d      	b.n	8109e20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109dc4:	687b      	ldr	r3, [r7, #4]
 8109dc6:	2201      	movs	r2, #1
 8109dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109dcc:	687b      	ldr	r3, [r7, #4]
 8109dce:	2224      	movs	r2, #36	@ 0x24
 8109dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	681b      	ldr	r3, [r3, #0]
 8109dd8:	681b      	ldr	r3, [r3, #0]
 8109dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109ddc:	687b      	ldr	r3, [r7, #4]
 8109dde:	681b      	ldr	r3, [r3, #0]
 8109de0:	681a      	ldr	r2, [r3, #0]
 8109de2:	687b      	ldr	r3, [r7, #4]
 8109de4:	681b      	ldr	r3, [r3, #0]
 8109de6:	f022 0201 	bic.w	r2, r2, #1
 8109dea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109dec:	687b      	ldr	r3, [r7, #4]
 8109dee:	681b      	ldr	r3, [r3, #0]
 8109df0:	689b      	ldr	r3, [r3, #8]
 8109df2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	681b      	ldr	r3, [r3, #0]
 8109dfa:	683a      	ldr	r2, [r7, #0]
 8109dfc:	430a      	orrs	r2, r1
 8109dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109e00:	6878      	ldr	r0, [r7, #4]
 8109e02:	f000 f84f 	bl	8109ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109e06:	687b      	ldr	r3, [r7, #4]
 8109e08:	681b      	ldr	r3, [r3, #0]
 8109e0a:	68fa      	ldr	r2, [r7, #12]
 8109e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109e0e:	687b      	ldr	r3, [r7, #4]
 8109e10:	2220      	movs	r2, #32
 8109e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109e16:	687b      	ldr	r3, [r7, #4]
 8109e18:	2200      	movs	r2, #0
 8109e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109e1e:	2300      	movs	r3, #0
}
 8109e20:	4618      	mov	r0, r3
 8109e22:	3710      	adds	r7, #16
 8109e24:	46bd      	mov	sp, r7
 8109e26:	bd80      	pop	{r7, pc}

08109e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109e28:	b580      	push	{r7, lr}
 8109e2a:	b084      	sub	sp, #16
 8109e2c:	af00      	add	r7, sp, #0
 8109e2e:	6078      	str	r0, [r7, #4]
 8109e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109e32:	687b      	ldr	r3, [r7, #4]
 8109e34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109e38:	2b01      	cmp	r3, #1
 8109e3a:	d101      	bne.n	8109e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109e3c:	2302      	movs	r3, #2
 8109e3e:	e02d      	b.n	8109e9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109e40:	687b      	ldr	r3, [r7, #4]
 8109e42:	2201      	movs	r2, #1
 8109e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109e48:	687b      	ldr	r3, [r7, #4]
 8109e4a:	2224      	movs	r2, #36	@ 0x24
 8109e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109e50:	687b      	ldr	r3, [r7, #4]
 8109e52:	681b      	ldr	r3, [r3, #0]
 8109e54:	681b      	ldr	r3, [r3, #0]
 8109e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109e58:	687b      	ldr	r3, [r7, #4]
 8109e5a:	681b      	ldr	r3, [r3, #0]
 8109e5c:	681a      	ldr	r2, [r3, #0]
 8109e5e:	687b      	ldr	r3, [r7, #4]
 8109e60:	681b      	ldr	r3, [r3, #0]
 8109e62:	f022 0201 	bic.w	r2, r2, #1
 8109e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109e68:	687b      	ldr	r3, [r7, #4]
 8109e6a:	681b      	ldr	r3, [r3, #0]
 8109e6c:	689b      	ldr	r3, [r3, #8]
 8109e6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8109e72:	687b      	ldr	r3, [r7, #4]
 8109e74:	681b      	ldr	r3, [r3, #0]
 8109e76:	683a      	ldr	r2, [r7, #0]
 8109e78:	430a      	orrs	r2, r1
 8109e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109e7c:	6878      	ldr	r0, [r7, #4]
 8109e7e:	f000 f811 	bl	8109ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109e82:	687b      	ldr	r3, [r7, #4]
 8109e84:	681b      	ldr	r3, [r3, #0]
 8109e86:	68fa      	ldr	r2, [r7, #12]
 8109e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109e8a:	687b      	ldr	r3, [r7, #4]
 8109e8c:	2220      	movs	r2, #32
 8109e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109e92:	687b      	ldr	r3, [r7, #4]
 8109e94:	2200      	movs	r2, #0
 8109e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109e9a:	2300      	movs	r3, #0
}
 8109e9c:	4618      	mov	r0, r3
 8109e9e:	3710      	adds	r7, #16
 8109ea0:	46bd      	mov	sp, r7
 8109ea2:	bd80      	pop	{r7, pc}

08109ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109ea4:	b480      	push	{r7}
 8109ea6:	b085      	sub	sp, #20
 8109ea8:	af00      	add	r7, sp, #0
 8109eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109eac:	687b      	ldr	r3, [r7, #4]
 8109eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109eb0:	2b00      	cmp	r3, #0
 8109eb2:	d108      	bne.n	8109ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109eb4:	687b      	ldr	r3, [r7, #4]
 8109eb6:	2201      	movs	r2, #1
 8109eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8109ebc:	687b      	ldr	r3, [r7, #4]
 8109ebe:	2201      	movs	r2, #1
 8109ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109ec4:	e031      	b.n	8109f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8109ec6:	2310      	movs	r3, #16
 8109ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109eca:	2310      	movs	r3, #16
 8109ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109ece:	687b      	ldr	r3, [r7, #4]
 8109ed0:	681b      	ldr	r3, [r3, #0]
 8109ed2:	689b      	ldr	r3, [r3, #8]
 8109ed4:	0e5b      	lsrs	r3, r3, #25
 8109ed6:	b2db      	uxtb	r3, r3
 8109ed8:	f003 0307 	and.w	r3, r3, #7
 8109edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	681b      	ldr	r3, [r3, #0]
 8109ee2:	689b      	ldr	r3, [r3, #8]
 8109ee4:	0f5b      	lsrs	r3, r3, #29
 8109ee6:	b2db      	uxtb	r3, r3
 8109ee8:	f003 0307 	and.w	r3, r3, #7
 8109eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109eee:	7bbb      	ldrb	r3, [r7, #14]
 8109ef0:	7b3a      	ldrb	r2, [r7, #12]
 8109ef2:	4911      	ldr	r1, [pc, #68]	@ (8109f38 <UARTEx_SetNbDataToProcess+0x94>)
 8109ef4:	5c8a      	ldrb	r2, [r1, r2]
 8109ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109efa:	7b3a      	ldrb	r2, [r7, #12]
 8109efc:	490f      	ldr	r1, [pc, #60]	@ (8109f3c <UARTEx_SetNbDataToProcess+0x98>)
 8109efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8109f04:	b29a      	uxth	r2, r3
 8109f06:	687b      	ldr	r3, [r7, #4]
 8109f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109f0c:	7bfb      	ldrb	r3, [r7, #15]
 8109f0e:	7b7a      	ldrb	r2, [r7, #13]
 8109f10:	4909      	ldr	r1, [pc, #36]	@ (8109f38 <UARTEx_SetNbDataToProcess+0x94>)
 8109f12:	5c8a      	ldrb	r2, [r1, r2]
 8109f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109f18:	7b7a      	ldrb	r2, [r7, #13]
 8109f1a:	4908      	ldr	r1, [pc, #32]	@ (8109f3c <UARTEx_SetNbDataToProcess+0x98>)
 8109f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8109f22:	b29a      	uxth	r2, r3
 8109f24:	687b      	ldr	r3, [r7, #4]
 8109f26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8109f2a:	bf00      	nop
 8109f2c:	3714      	adds	r7, #20
 8109f2e:	46bd      	mov	sp, r7
 8109f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f34:	4770      	bx	lr
 8109f36:	bf00      	nop
 8109f38:	0811ef58 	.word	0x0811ef58
 8109f3c:	0811ef60 	.word	0x0811ef60

08109f40 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8109f40:	b480      	push	{r7}
 8109f42:	b083      	sub	sp, #12
 8109f44:	af00      	add	r7, sp, #0
 8109f46:	4603      	mov	r3, r0
 8109f48:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8109f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8109f4e:	021b      	lsls	r3, r3, #8
 8109f50:	b21a      	sxth	r2, r3
 8109f52:	88fb      	ldrh	r3, [r7, #6]
 8109f54:	0a1b      	lsrs	r3, r3, #8
 8109f56:	b29b      	uxth	r3, r3
 8109f58:	b21b      	sxth	r3, r3
 8109f5a:	4313      	orrs	r3, r2
 8109f5c:	b21b      	sxth	r3, r3
 8109f5e:	b29b      	uxth	r3, r3
}
 8109f60:	4618      	mov	r0, r3
 8109f62:	370c      	adds	r7, #12
 8109f64:	46bd      	mov	sp, r7
 8109f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f6a:	4770      	bx	lr

08109f6c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8109f6c:	b480      	push	{r7}
 8109f6e:	b083      	sub	sp, #12
 8109f70:	af00      	add	r7, sp, #0
 8109f72:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8109f74:	687b      	ldr	r3, [r7, #4]
 8109f76:	061a      	lsls	r2, r3, #24
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	021b      	lsls	r3, r3, #8
 8109f7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109f80:	431a      	orrs	r2, r3
 8109f82:	687b      	ldr	r3, [r7, #4]
 8109f84:	0a1b      	lsrs	r3, r3, #8
 8109f86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8109f8a:	431a      	orrs	r2, r3
 8109f8c:	687b      	ldr	r3, [r7, #4]
 8109f8e:	0e1b      	lsrs	r3, r3, #24
 8109f90:	4313      	orrs	r3, r2
}
 8109f92:	4618      	mov	r0, r3
 8109f94:	370c      	adds	r7, #12
 8109f96:	46bd      	mov	sp, r7
 8109f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f9c:	4770      	bx	lr
	...

08109fa0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8109fa0:	b580      	push	{r7, lr}
 8109fa2:	b082      	sub	sp, #8
 8109fa4:	af00      	add	r7, sp, #0
 8109fa6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8109fa8:	4915      	ldr	r1, [pc, #84]	@ (810a000 <etharp_free_entry+0x60>)
 8109faa:	687a      	ldr	r2, [r7, #4]
 8109fac:	4613      	mov	r3, r2
 8109fae:	005b      	lsls	r3, r3, #1
 8109fb0:	4413      	add	r3, r2
 8109fb2:	00db      	lsls	r3, r3, #3
 8109fb4:	440b      	add	r3, r1
 8109fb6:	681b      	ldr	r3, [r3, #0]
 8109fb8:	2b00      	cmp	r3, #0
 8109fba:	d013      	beq.n	8109fe4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8109fbc:	4910      	ldr	r1, [pc, #64]	@ (810a000 <etharp_free_entry+0x60>)
 8109fbe:	687a      	ldr	r2, [r7, #4]
 8109fc0:	4613      	mov	r3, r2
 8109fc2:	005b      	lsls	r3, r3, #1
 8109fc4:	4413      	add	r3, r2
 8109fc6:	00db      	lsls	r3, r3, #3
 8109fc8:	440b      	add	r3, r1
 8109fca:	681b      	ldr	r3, [r3, #0]
 8109fcc:	4618      	mov	r0, r3
 8109fce:	f003 febb 	bl	810dd48 <pbuf_free>
    arp_table[i].q = NULL;
 8109fd2:	490b      	ldr	r1, [pc, #44]	@ (810a000 <etharp_free_entry+0x60>)
 8109fd4:	687a      	ldr	r2, [r7, #4]
 8109fd6:	4613      	mov	r3, r2
 8109fd8:	005b      	lsls	r3, r3, #1
 8109fda:	4413      	add	r3, r2
 8109fdc:	00db      	lsls	r3, r3, #3
 8109fde:	440b      	add	r3, r1
 8109fe0:	2200      	movs	r2, #0
 8109fe2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8109fe4:	4906      	ldr	r1, [pc, #24]	@ (810a000 <etharp_free_entry+0x60>)
 8109fe6:	687a      	ldr	r2, [r7, #4]
 8109fe8:	4613      	mov	r3, r2
 8109fea:	005b      	lsls	r3, r3, #1
 8109fec:	4413      	add	r3, r2
 8109fee:	00db      	lsls	r3, r3, #3
 8109ff0:	440b      	add	r3, r1
 8109ff2:	3314      	adds	r3, #20
 8109ff4:	2200      	movs	r2, #0
 8109ff6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8109ff8:	bf00      	nop
 8109ffa:	3708      	adds	r7, #8
 8109ffc:	46bd      	mov	sp, r7
 8109ffe:	bd80      	pop	{r7, pc}
 810a000:	100144bc 	.word	0x100144bc

0810a004 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 810a004:	b580      	push	{r7, lr}
 810a006:	b082      	sub	sp, #8
 810a008:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810a00a:	2300      	movs	r3, #0
 810a00c:	607b      	str	r3, [r7, #4]
 810a00e:	e096      	b.n	810a13e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 810a010:	494f      	ldr	r1, [pc, #316]	@ (810a150 <etharp_tmr+0x14c>)
 810a012:	687a      	ldr	r2, [r7, #4]
 810a014:	4613      	mov	r3, r2
 810a016:	005b      	lsls	r3, r3, #1
 810a018:	4413      	add	r3, r2
 810a01a:	00db      	lsls	r3, r3, #3
 810a01c:	440b      	add	r3, r1
 810a01e:	3314      	adds	r3, #20
 810a020:	781b      	ldrb	r3, [r3, #0]
 810a022:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 810a024:	78fb      	ldrb	r3, [r7, #3]
 810a026:	2b00      	cmp	r3, #0
 810a028:	f000 8086 	beq.w	810a138 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 810a02c:	4948      	ldr	r1, [pc, #288]	@ (810a150 <etharp_tmr+0x14c>)
 810a02e:	687a      	ldr	r2, [r7, #4]
 810a030:	4613      	mov	r3, r2
 810a032:	005b      	lsls	r3, r3, #1
 810a034:	4413      	add	r3, r2
 810a036:	00db      	lsls	r3, r3, #3
 810a038:	440b      	add	r3, r1
 810a03a:	3312      	adds	r3, #18
 810a03c:	881b      	ldrh	r3, [r3, #0]
 810a03e:	3301      	adds	r3, #1
 810a040:	b298      	uxth	r0, r3
 810a042:	4943      	ldr	r1, [pc, #268]	@ (810a150 <etharp_tmr+0x14c>)
 810a044:	687a      	ldr	r2, [r7, #4]
 810a046:	4613      	mov	r3, r2
 810a048:	005b      	lsls	r3, r3, #1
 810a04a:	4413      	add	r3, r2
 810a04c:	00db      	lsls	r3, r3, #3
 810a04e:	440b      	add	r3, r1
 810a050:	3312      	adds	r3, #18
 810a052:	4602      	mov	r2, r0
 810a054:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810a056:	493e      	ldr	r1, [pc, #248]	@ (810a150 <etharp_tmr+0x14c>)
 810a058:	687a      	ldr	r2, [r7, #4]
 810a05a:	4613      	mov	r3, r2
 810a05c:	005b      	lsls	r3, r3, #1
 810a05e:	4413      	add	r3, r2
 810a060:	00db      	lsls	r3, r3, #3
 810a062:	440b      	add	r3, r1
 810a064:	3312      	adds	r3, #18
 810a066:	881b      	ldrh	r3, [r3, #0]
 810a068:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 810a06c:	d215      	bcs.n	810a09a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810a06e:	4938      	ldr	r1, [pc, #224]	@ (810a150 <etharp_tmr+0x14c>)
 810a070:	687a      	ldr	r2, [r7, #4]
 810a072:	4613      	mov	r3, r2
 810a074:	005b      	lsls	r3, r3, #1
 810a076:	4413      	add	r3, r2
 810a078:	00db      	lsls	r3, r3, #3
 810a07a:	440b      	add	r3, r1
 810a07c:	3314      	adds	r3, #20
 810a07e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810a080:	2b01      	cmp	r3, #1
 810a082:	d10e      	bne.n	810a0a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 810a084:	4932      	ldr	r1, [pc, #200]	@ (810a150 <etharp_tmr+0x14c>)
 810a086:	687a      	ldr	r2, [r7, #4]
 810a088:	4613      	mov	r3, r2
 810a08a:	005b      	lsls	r3, r3, #1
 810a08c:	4413      	add	r3, r2
 810a08e:	00db      	lsls	r3, r3, #3
 810a090:	440b      	add	r3, r1
 810a092:	3312      	adds	r3, #18
 810a094:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810a096:	2b04      	cmp	r3, #4
 810a098:	d903      	bls.n	810a0a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 810a09a:	6878      	ldr	r0, [r7, #4]
 810a09c:	f7ff ff80 	bl	8109fa0 <etharp_free_entry>
 810a0a0:	e04a      	b.n	810a138 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 810a0a2:	492b      	ldr	r1, [pc, #172]	@ (810a150 <etharp_tmr+0x14c>)
 810a0a4:	687a      	ldr	r2, [r7, #4]
 810a0a6:	4613      	mov	r3, r2
 810a0a8:	005b      	lsls	r3, r3, #1
 810a0aa:	4413      	add	r3, r2
 810a0ac:	00db      	lsls	r3, r3, #3
 810a0ae:	440b      	add	r3, r1
 810a0b0:	3314      	adds	r3, #20
 810a0b2:	781b      	ldrb	r3, [r3, #0]
 810a0b4:	2b03      	cmp	r3, #3
 810a0b6:	d10a      	bne.n	810a0ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 810a0b8:	4925      	ldr	r1, [pc, #148]	@ (810a150 <etharp_tmr+0x14c>)
 810a0ba:	687a      	ldr	r2, [r7, #4]
 810a0bc:	4613      	mov	r3, r2
 810a0be:	005b      	lsls	r3, r3, #1
 810a0c0:	4413      	add	r3, r2
 810a0c2:	00db      	lsls	r3, r3, #3
 810a0c4:	440b      	add	r3, r1
 810a0c6:	3314      	adds	r3, #20
 810a0c8:	2204      	movs	r2, #4
 810a0ca:	701a      	strb	r2, [r3, #0]
 810a0cc:	e034      	b.n	810a138 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 810a0ce:	4920      	ldr	r1, [pc, #128]	@ (810a150 <etharp_tmr+0x14c>)
 810a0d0:	687a      	ldr	r2, [r7, #4]
 810a0d2:	4613      	mov	r3, r2
 810a0d4:	005b      	lsls	r3, r3, #1
 810a0d6:	4413      	add	r3, r2
 810a0d8:	00db      	lsls	r3, r3, #3
 810a0da:	440b      	add	r3, r1
 810a0dc:	3314      	adds	r3, #20
 810a0de:	781b      	ldrb	r3, [r3, #0]
 810a0e0:	2b04      	cmp	r3, #4
 810a0e2:	d10a      	bne.n	810a0fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 810a0e4:	491a      	ldr	r1, [pc, #104]	@ (810a150 <etharp_tmr+0x14c>)
 810a0e6:	687a      	ldr	r2, [r7, #4]
 810a0e8:	4613      	mov	r3, r2
 810a0ea:	005b      	lsls	r3, r3, #1
 810a0ec:	4413      	add	r3, r2
 810a0ee:	00db      	lsls	r3, r3, #3
 810a0f0:	440b      	add	r3, r1
 810a0f2:	3314      	adds	r3, #20
 810a0f4:	2202      	movs	r2, #2
 810a0f6:	701a      	strb	r2, [r3, #0]
 810a0f8:	e01e      	b.n	810a138 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810a0fa:	4915      	ldr	r1, [pc, #84]	@ (810a150 <etharp_tmr+0x14c>)
 810a0fc:	687a      	ldr	r2, [r7, #4]
 810a0fe:	4613      	mov	r3, r2
 810a100:	005b      	lsls	r3, r3, #1
 810a102:	4413      	add	r3, r2
 810a104:	00db      	lsls	r3, r3, #3
 810a106:	440b      	add	r3, r1
 810a108:	3314      	adds	r3, #20
 810a10a:	781b      	ldrb	r3, [r3, #0]
 810a10c:	2b01      	cmp	r3, #1
 810a10e:	d113      	bne.n	810a138 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 810a110:	490f      	ldr	r1, [pc, #60]	@ (810a150 <etharp_tmr+0x14c>)
 810a112:	687a      	ldr	r2, [r7, #4]
 810a114:	4613      	mov	r3, r2
 810a116:	005b      	lsls	r3, r3, #1
 810a118:	4413      	add	r3, r2
 810a11a:	00db      	lsls	r3, r3, #3
 810a11c:	440b      	add	r3, r1
 810a11e:	3308      	adds	r3, #8
 810a120:	6818      	ldr	r0, [r3, #0]
 810a122:	687a      	ldr	r2, [r7, #4]
 810a124:	4613      	mov	r3, r2
 810a126:	005b      	lsls	r3, r3, #1
 810a128:	4413      	add	r3, r2
 810a12a:	00db      	lsls	r3, r3, #3
 810a12c:	4a08      	ldr	r2, [pc, #32]	@ (810a150 <etharp_tmr+0x14c>)
 810a12e:	4413      	add	r3, r2
 810a130:	3304      	adds	r3, #4
 810a132:	4619      	mov	r1, r3
 810a134:	f000 fe6e 	bl	810ae14 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810a138:	687b      	ldr	r3, [r7, #4]
 810a13a:	3301      	adds	r3, #1
 810a13c:	607b      	str	r3, [r7, #4]
 810a13e:	687b      	ldr	r3, [r7, #4]
 810a140:	2b09      	cmp	r3, #9
 810a142:	f77f af65 	ble.w	810a010 <etharp_tmr+0xc>
      }
    }
  }
}
 810a146:	bf00      	nop
 810a148:	bf00      	nop
 810a14a:	3708      	adds	r7, #8
 810a14c:	46bd      	mov	sp, r7
 810a14e:	bd80      	pop	{r7, pc}
 810a150:	100144bc 	.word	0x100144bc

0810a154 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 810a154:	b580      	push	{r7, lr}
 810a156:	b08a      	sub	sp, #40	@ 0x28
 810a158:	af00      	add	r7, sp, #0
 810a15a:	60f8      	str	r0, [r7, #12]
 810a15c:	460b      	mov	r3, r1
 810a15e:	607a      	str	r2, [r7, #4]
 810a160:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 810a162:	230a      	movs	r3, #10
 810a164:	84fb      	strh	r3, [r7, #38]	@ 0x26
 810a166:	230a      	movs	r3, #10
 810a168:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 810a16a:	230a      	movs	r3, #10
 810a16c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 810a16e:	2300      	movs	r3, #0
 810a170:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 810a172:	230a      	movs	r3, #10
 810a174:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 810a176:	2300      	movs	r3, #0
 810a178:	83bb      	strh	r3, [r7, #28]
 810a17a:	2300      	movs	r3, #0
 810a17c:	837b      	strh	r3, [r7, #26]
 810a17e:	2300      	movs	r3, #0
 810a180:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810a182:	2300      	movs	r3, #0
 810a184:	843b      	strh	r3, [r7, #32]
 810a186:	e0ae      	b.n	810a2e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 810a188:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a18c:	49a6      	ldr	r1, [pc, #664]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a18e:	4613      	mov	r3, r2
 810a190:	005b      	lsls	r3, r3, #1
 810a192:	4413      	add	r3, r2
 810a194:	00db      	lsls	r3, r3, #3
 810a196:	440b      	add	r3, r1
 810a198:	3314      	adds	r3, #20
 810a19a:	781b      	ldrb	r3, [r3, #0]
 810a19c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 810a19e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810a1a2:	2b0a      	cmp	r3, #10
 810a1a4:	d105      	bne.n	810a1b2 <etharp_find_entry+0x5e>
 810a1a6:	7dfb      	ldrb	r3, [r7, #23]
 810a1a8:	2b00      	cmp	r3, #0
 810a1aa:	d102      	bne.n	810a1b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 810a1ac:	8c3b      	ldrh	r3, [r7, #32]
 810a1ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 810a1b0:	e095      	b.n	810a2de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 810a1b2:	7dfb      	ldrb	r3, [r7, #23]
 810a1b4:	2b00      	cmp	r3, #0
 810a1b6:	f000 8092 	beq.w	810a2de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 810a1ba:	7dfb      	ldrb	r3, [r7, #23]
 810a1bc:	2b01      	cmp	r3, #1
 810a1be:	d009      	beq.n	810a1d4 <etharp_find_entry+0x80>
 810a1c0:	7dfb      	ldrb	r3, [r7, #23]
 810a1c2:	2b01      	cmp	r3, #1
 810a1c4:	d806      	bhi.n	810a1d4 <etharp_find_entry+0x80>
 810a1c6:	4b99      	ldr	r3, [pc, #612]	@ (810a42c <etharp_find_entry+0x2d8>)
 810a1c8:	f240 1223 	movw	r2, #291	@ 0x123
 810a1cc:	4998      	ldr	r1, [pc, #608]	@ (810a430 <etharp_find_entry+0x2dc>)
 810a1ce:	4899      	ldr	r0, [pc, #612]	@ (810a434 <etharp_find_entry+0x2e0>)
 810a1d0:	f00d f932 	bl	8117438 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 810a1d4:	68fb      	ldr	r3, [r7, #12]
 810a1d6:	2b00      	cmp	r3, #0
 810a1d8:	d020      	beq.n	810a21c <etharp_find_entry+0xc8>
 810a1da:	68fb      	ldr	r3, [r7, #12]
 810a1dc:	6819      	ldr	r1, [r3, #0]
 810a1de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a1e2:	4891      	ldr	r0, [pc, #580]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a1e4:	4613      	mov	r3, r2
 810a1e6:	005b      	lsls	r3, r3, #1
 810a1e8:	4413      	add	r3, r2
 810a1ea:	00db      	lsls	r3, r3, #3
 810a1ec:	4403      	add	r3, r0
 810a1ee:	3304      	adds	r3, #4
 810a1f0:	681b      	ldr	r3, [r3, #0]
 810a1f2:	4299      	cmp	r1, r3
 810a1f4:	d112      	bne.n	810a21c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 810a1f6:	687b      	ldr	r3, [r7, #4]
 810a1f8:	2b00      	cmp	r3, #0
 810a1fa:	d00c      	beq.n	810a216 <etharp_find_entry+0xc2>
 810a1fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a200:	4989      	ldr	r1, [pc, #548]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a202:	4613      	mov	r3, r2
 810a204:	005b      	lsls	r3, r3, #1
 810a206:	4413      	add	r3, r2
 810a208:	00db      	lsls	r3, r3, #3
 810a20a:	440b      	add	r3, r1
 810a20c:	3308      	adds	r3, #8
 810a20e:	681b      	ldr	r3, [r3, #0]
 810a210:	687a      	ldr	r2, [r7, #4]
 810a212:	429a      	cmp	r2, r3
 810a214:	d102      	bne.n	810a21c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 810a216:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810a21a:	e100      	b.n	810a41e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 810a21c:	7dfb      	ldrb	r3, [r7, #23]
 810a21e:	2b01      	cmp	r3, #1
 810a220:	d140      	bne.n	810a2a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 810a222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a226:	4980      	ldr	r1, [pc, #512]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a228:	4613      	mov	r3, r2
 810a22a:	005b      	lsls	r3, r3, #1
 810a22c:	4413      	add	r3, r2
 810a22e:	00db      	lsls	r3, r3, #3
 810a230:	440b      	add	r3, r1
 810a232:	681b      	ldr	r3, [r3, #0]
 810a234:	2b00      	cmp	r3, #0
 810a236:	d01a      	beq.n	810a26e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 810a238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a23c:	497a      	ldr	r1, [pc, #488]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a23e:	4613      	mov	r3, r2
 810a240:	005b      	lsls	r3, r3, #1
 810a242:	4413      	add	r3, r2
 810a244:	00db      	lsls	r3, r3, #3
 810a246:	440b      	add	r3, r1
 810a248:	3312      	adds	r3, #18
 810a24a:	881b      	ldrh	r3, [r3, #0]
 810a24c:	8bba      	ldrh	r2, [r7, #28]
 810a24e:	429a      	cmp	r2, r3
 810a250:	d845      	bhi.n	810a2de <etharp_find_entry+0x18a>
            old_queue = i;
 810a252:	8c3b      	ldrh	r3, [r7, #32]
 810a254:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 810a256:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a25a:	4973      	ldr	r1, [pc, #460]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a25c:	4613      	mov	r3, r2
 810a25e:	005b      	lsls	r3, r3, #1
 810a260:	4413      	add	r3, r2
 810a262:	00db      	lsls	r3, r3, #3
 810a264:	440b      	add	r3, r1
 810a266:	3312      	adds	r3, #18
 810a268:	881b      	ldrh	r3, [r3, #0]
 810a26a:	83bb      	strh	r3, [r7, #28]
 810a26c:	e037      	b.n	810a2de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 810a26e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a272:	496d      	ldr	r1, [pc, #436]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a274:	4613      	mov	r3, r2
 810a276:	005b      	lsls	r3, r3, #1
 810a278:	4413      	add	r3, r2
 810a27a:	00db      	lsls	r3, r3, #3
 810a27c:	440b      	add	r3, r1
 810a27e:	3312      	adds	r3, #18
 810a280:	881b      	ldrh	r3, [r3, #0]
 810a282:	8b7a      	ldrh	r2, [r7, #26]
 810a284:	429a      	cmp	r2, r3
 810a286:	d82a      	bhi.n	810a2de <etharp_find_entry+0x18a>
            old_pending = i;
 810a288:	8c3b      	ldrh	r3, [r7, #32]
 810a28a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 810a28c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a290:	4965      	ldr	r1, [pc, #404]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a292:	4613      	mov	r3, r2
 810a294:	005b      	lsls	r3, r3, #1
 810a296:	4413      	add	r3, r2
 810a298:	00db      	lsls	r3, r3, #3
 810a29a:	440b      	add	r3, r1
 810a29c:	3312      	adds	r3, #18
 810a29e:	881b      	ldrh	r3, [r3, #0]
 810a2a0:	837b      	strh	r3, [r7, #26]
 810a2a2:	e01c      	b.n	810a2de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 810a2a4:	7dfb      	ldrb	r3, [r7, #23]
 810a2a6:	2b01      	cmp	r3, #1
 810a2a8:	d919      	bls.n	810a2de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 810a2aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a2ae:	495e      	ldr	r1, [pc, #376]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a2b0:	4613      	mov	r3, r2
 810a2b2:	005b      	lsls	r3, r3, #1
 810a2b4:	4413      	add	r3, r2
 810a2b6:	00db      	lsls	r3, r3, #3
 810a2b8:	440b      	add	r3, r1
 810a2ba:	3312      	adds	r3, #18
 810a2bc:	881b      	ldrh	r3, [r3, #0]
 810a2be:	8b3a      	ldrh	r2, [r7, #24]
 810a2c0:	429a      	cmp	r2, r3
 810a2c2:	d80c      	bhi.n	810a2de <etharp_find_entry+0x18a>
            old_stable = i;
 810a2c4:	8c3b      	ldrh	r3, [r7, #32]
 810a2c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 810a2c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a2cc:	4956      	ldr	r1, [pc, #344]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a2ce:	4613      	mov	r3, r2
 810a2d0:	005b      	lsls	r3, r3, #1
 810a2d2:	4413      	add	r3, r2
 810a2d4:	00db      	lsls	r3, r3, #3
 810a2d6:	440b      	add	r3, r1
 810a2d8:	3312      	adds	r3, #18
 810a2da:	881b      	ldrh	r3, [r3, #0]
 810a2dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810a2de:	8c3b      	ldrh	r3, [r7, #32]
 810a2e0:	3301      	adds	r3, #1
 810a2e2:	b29b      	uxth	r3, r3
 810a2e4:	843b      	strh	r3, [r7, #32]
 810a2e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810a2ea:	2b09      	cmp	r3, #9
 810a2ec:	f77f af4c 	ble.w	810a188 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 810a2f0:	7afb      	ldrb	r3, [r7, #11]
 810a2f2:	f003 0302 	and.w	r3, r3, #2
 810a2f6:	2b00      	cmp	r3, #0
 810a2f8:	d108      	bne.n	810a30c <etharp_find_entry+0x1b8>
 810a2fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810a2fe:	2b0a      	cmp	r3, #10
 810a300:	d107      	bne.n	810a312 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 810a302:	7afb      	ldrb	r3, [r7, #11]
 810a304:	f003 0301 	and.w	r3, r3, #1
 810a308:	2b00      	cmp	r3, #0
 810a30a:	d102      	bne.n	810a312 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 810a30c:	f04f 33ff 	mov.w	r3, #4294967295
 810a310:	e085      	b.n	810a41e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 810a312:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810a316:	2b09      	cmp	r3, #9
 810a318:	dc02      	bgt.n	810a320 <etharp_find_entry+0x1cc>
    i = empty;
 810a31a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810a31c:	843b      	strh	r3, [r7, #32]
 810a31e:	e039      	b.n	810a394 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 810a320:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 810a324:	2b09      	cmp	r3, #9
 810a326:	dc14      	bgt.n	810a352 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 810a328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810a32a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 810a32c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a330:	493d      	ldr	r1, [pc, #244]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a332:	4613      	mov	r3, r2
 810a334:	005b      	lsls	r3, r3, #1
 810a336:	4413      	add	r3, r2
 810a338:	00db      	lsls	r3, r3, #3
 810a33a:	440b      	add	r3, r1
 810a33c:	681b      	ldr	r3, [r3, #0]
 810a33e:	2b00      	cmp	r3, #0
 810a340:	d018      	beq.n	810a374 <etharp_find_entry+0x220>
 810a342:	4b3a      	ldr	r3, [pc, #232]	@ (810a42c <etharp_find_entry+0x2d8>)
 810a344:	f240 126d 	movw	r2, #365	@ 0x16d
 810a348:	493b      	ldr	r1, [pc, #236]	@ (810a438 <etharp_find_entry+0x2e4>)
 810a34a:	483a      	ldr	r0, [pc, #232]	@ (810a434 <etharp_find_entry+0x2e0>)
 810a34c:	f00d f874 	bl	8117438 <iprintf>
 810a350:	e010      	b.n	810a374 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 810a352:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 810a356:	2b09      	cmp	r3, #9
 810a358:	dc02      	bgt.n	810a360 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 810a35a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810a35c:	843b      	strh	r3, [r7, #32]
 810a35e:	e009      	b.n	810a374 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 810a360:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 810a364:	2b09      	cmp	r3, #9
 810a366:	dc02      	bgt.n	810a36e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 810a368:	8bfb      	ldrh	r3, [r7, #30]
 810a36a:	843b      	strh	r3, [r7, #32]
 810a36c:	e002      	b.n	810a374 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 810a36e:	f04f 33ff 	mov.w	r3, #4294967295
 810a372:	e054      	b.n	810a41e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810a374:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810a378:	2b09      	cmp	r3, #9
 810a37a:	dd06      	ble.n	810a38a <etharp_find_entry+0x236>
 810a37c:	4b2b      	ldr	r3, [pc, #172]	@ (810a42c <etharp_find_entry+0x2d8>)
 810a37e:	f240 127f 	movw	r2, #383	@ 0x17f
 810a382:	492e      	ldr	r1, [pc, #184]	@ (810a43c <etharp_find_entry+0x2e8>)
 810a384:	482b      	ldr	r0, [pc, #172]	@ (810a434 <etharp_find_entry+0x2e0>)
 810a386:	f00d f857 	bl	8117438 <iprintf>
    etharp_free_entry(i);
 810a38a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810a38e:	4618      	mov	r0, r3
 810a390:	f7ff fe06 	bl	8109fa0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810a394:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810a398:	2b09      	cmp	r3, #9
 810a39a:	dd06      	ble.n	810a3aa <etharp_find_entry+0x256>
 810a39c:	4b23      	ldr	r3, [pc, #140]	@ (810a42c <etharp_find_entry+0x2d8>)
 810a39e:	f240 1283 	movw	r2, #387	@ 0x183
 810a3a2:	4926      	ldr	r1, [pc, #152]	@ (810a43c <etharp_find_entry+0x2e8>)
 810a3a4:	4823      	ldr	r0, [pc, #140]	@ (810a434 <etharp_find_entry+0x2e0>)
 810a3a6:	f00d f847 	bl	8117438 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 810a3aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a3ae:	491e      	ldr	r1, [pc, #120]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a3b0:	4613      	mov	r3, r2
 810a3b2:	005b      	lsls	r3, r3, #1
 810a3b4:	4413      	add	r3, r2
 810a3b6:	00db      	lsls	r3, r3, #3
 810a3b8:	440b      	add	r3, r1
 810a3ba:	3314      	adds	r3, #20
 810a3bc:	781b      	ldrb	r3, [r3, #0]
 810a3be:	2b00      	cmp	r3, #0
 810a3c0:	d006      	beq.n	810a3d0 <etharp_find_entry+0x27c>
 810a3c2:	4b1a      	ldr	r3, [pc, #104]	@ (810a42c <etharp_find_entry+0x2d8>)
 810a3c4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 810a3c8:	491d      	ldr	r1, [pc, #116]	@ (810a440 <etharp_find_entry+0x2ec>)
 810a3ca:	481a      	ldr	r0, [pc, #104]	@ (810a434 <etharp_find_entry+0x2e0>)
 810a3cc:	f00d f834 	bl	8117438 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 810a3d0:	68fb      	ldr	r3, [r7, #12]
 810a3d2:	2b00      	cmp	r3, #0
 810a3d4:	d00b      	beq.n	810a3ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 810a3d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a3da:	68fb      	ldr	r3, [r7, #12]
 810a3dc:	6819      	ldr	r1, [r3, #0]
 810a3de:	4812      	ldr	r0, [pc, #72]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a3e0:	4613      	mov	r3, r2
 810a3e2:	005b      	lsls	r3, r3, #1
 810a3e4:	4413      	add	r3, r2
 810a3e6:	00db      	lsls	r3, r3, #3
 810a3e8:	4403      	add	r3, r0
 810a3ea:	3304      	adds	r3, #4
 810a3ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 810a3ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a3f2:	490d      	ldr	r1, [pc, #52]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a3f4:	4613      	mov	r3, r2
 810a3f6:	005b      	lsls	r3, r3, #1
 810a3f8:	4413      	add	r3, r2
 810a3fa:	00db      	lsls	r3, r3, #3
 810a3fc:	440b      	add	r3, r1
 810a3fe:	3312      	adds	r3, #18
 810a400:	2200      	movs	r2, #0
 810a402:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 810a404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810a408:	4907      	ldr	r1, [pc, #28]	@ (810a428 <etharp_find_entry+0x2d4>)
 810a40a:	4613      	mov	r3, r2
 810a40c:	005b      	lsls	r3, r3, #1
 810a40e:	4413      	add	r3, r2
 810a410:	00db      	lsls	r3, r3, #3
 810a412:	440b      	add	r3, r1
 810a414:	3308      	adds	r3, #8
 810a416:	687a      	ldr	r2, [r7, #4]
 810a418:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 810a41a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 810a41e:	4618      	mov	r0, r3
 810a420:	3728      	adds	r7, #40	@ 0x28
 810a422:	46bd      	mov	sp, r7
 810a424:	bd80      	pop	{r7, pc}
 810a426:	bf00      	nop
 810a428:	100144bc 	.word	0x100144bc
 810a42c:	0811c300 	.word	0x0811c300
 810a430:	0811c368 	.word	0x0811c368
 810a434:	0811c3a8 	.word	0x0811c3a8
 810a438:	0811c3d0 	.word	0x0811c3d0
 810a43c:	0811c3e8 	.word	0x0811c3e8
 810a440:	0811c3fc 	.word	0x0811c3fc

0810a444 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 810a444:	b580      	push	{r7, lr}
 810a446:	b088      	sub	sp, #32
 810a448:	af02      	add	r7, sp, #8
 810a44a:	60f8      	str	r0, [r7, #12]
 810a44c:	60b9      	str	r1, [r7, #8]
 810a44e:	607a      	str	r2, [r7, #4]
 810a450:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 810a452:	68fb      	ldr	r3, [r7, #12]
 810a454:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810a458:	2b06      	cmp	r3, #6
 810a45a:	d006      	beq.n	810a46a <etharp_update_arp_entry+0x26>
 810a45c:	4b48      	ldr	r3, [pc, #288]	@ (810a580 <etharp_update_arp_entry+0x13c>)
 810a45e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 810a462:	4948      	ldr	r1, [pc, #288]	@ (810a584 <etharp_update_arp_entry+0x140>)
 810a464:	4848      	ldr	r0, [pc, #288]	@ (810a588 <etharp_update_arp_entry+0x144>)
 810a466:	f00c ffe7 	bl	8117438 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 810a46a:	68bb      	ldr	r3, [r7, #8]
 810a46c:	2b00      	cmp	r3, #0
 810a46e:	d012      	beq.n	810a496 <etharp_update_arp_entry+0x52>
 810a470:	68bb      	ldr	r3, [r7, #8]
 810a472:	681b      	ldr	r3, [r3, #0]
 810a474:	2b00      	cmp	r3, #0
 810a476:	d00e      	beq.n	810a496 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810a478:	68bb      	ldr	r3, [r7, #8]
 810a47a:	681b      	ldr	r3, [r3, #0]
 810a47c:	68f9      	ldr	r1, [r7, #12]
 810a47e:	4618      	mov	r0, r3
 810a480:	f001 facc 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 810a484:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 810a486:	2b00      	cmp	r3, #0
 810a488:	d105      	bne.n	810a496 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 810a48a:	68bb      	ldr	r3, [r7, #8]
 810a48c:	681b      	ldr	r3, [r3, #0]
 810a48e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810a492:	2be0      	cmp	r3, #224	@ 0xe0
 810a494:	d102      	bne.n	810a49c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810a496:	f06f 030f 	mvn.w	r3, #15
 810a49a:	e06c      	b.n	810a576 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 810a49c:	78fb      	ldrb	r3, [r7, #3]
 810a49e:	68fa      	ldr	r2, [r7, #12]
 810a4a0:	4619      	mov	r1, r3
 810a4a2:	68b8      	ldr	r0, [r7, #8]
 810a4a4:	f7ff fe56 	bl	810a154 <etharp_find_entry>
 810a4a8:	4603      	mov	r3, r0
 810a4aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 810a4ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810a4b0:	2b00      	cmp	r3, #0
 810a4b2:	da02      	bge.n	810a4ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 810a4b4:	8afb      	ldrh	r3, [r7, #22]
 810a4b6:	b25b      	sxtb	r3, r3
 810a4b8:	e05d      	b.n	810a576 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 810a4ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810a4be:	4933      	ldr	r1, [pc, #204]	@ (810a58c <etharp_update_arp_entry+0x148>)
 810a4c0:	4613      	mov	r3, r2
 810a4c2:	005b      	lsls	r3, r3, #1
 810a4c4:	4413      	add	r3, r2
 810a4c6:	00db      	lsls	r3, r3, #3
 810a4c8:	440b      	add	r3, r1
 810a4ca:	3314      	adds	r3, #20
 810a4cc:	2202      	movs	r2, #2
 810a4ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 810a4d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810a4d4:	492d      	ldr	r1, [pc, #180]	@ (810a58c <etharp_update_arp_entry+0x148>)
 810a4d6:	4613      	mov	r3, r2
 810a4d8:	005b      	lsls	r3, r3, #1
 810a4da:	4413      	add	r3, r2
 810a4dc:	00db      	lsls	r3, r3, #3
 810a4de:	440b      	add	r3, r1
 810a4e0:	3308      	adds	r3, #8
 810a4e2:	68fa      	ldr	r2, [r7, #12]
 810a4e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 810a4e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810a4ea:	4613      	mov	r3, r2
 810a4ec:	005b      	lsls	r3, r3, #1
 810a4ee:	4413      	add	r3, r2
 810a4f0:	00db      	lsls	r3, r3, #3
 810a4f2:	3308      	adds	r3, #8
 810a4f4:	4a25      	ldr	r2, [pc, #148]	@ (810a58c <etharp_update_arp_entry+0x148>)
 810a4f6:	4413      	add	r3, r2
 810a4f8:	3304      	adds	r3, #4
 810a4fa:	2206      	movs	r2, #6
 810a4fc:	6879      	ldr	r1, [r7, #4]
 810a4fe:	4618      	mov	r0, r3
 810a500:	f00d fa19 	bl	8117936 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 810a504:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810a508:	4920      	ldr	r1, [pc, #128]	@ (810a58c <etharp_update_arp_entry+0x148>)
 810a50a:	4613      	mov	r3, r2
 810a50c:	005b      	lsls	r3, r3, #1
 810a50e:	4413      	add	r3, r2
 810a510:	00db      	lsls	r3, r3, #3
 810a512:	440b      	add	r3, r1
 810a514:	3312      	adds	r3, #18
 810a516:	2200      	movs	r2, #0
 810a518:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 810a51a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810a51e:	491b      	ldr	r1, [pc, #108]	@ (810a58c <etharp_update_arp_entry+0x148>)
 810a520:	4613      	mov	r3, r2
 810a522:	005b      	lsls	r3, r3, #1
 810a524:	4413      	add	r3, r2
 810a526:	00db      	lsls	r3, r3, #3
 810a528:	440b      	add	r3, r1
 810a52a:	681b      	ldr	r3, [r3, #0]
 810a52c:	2b00      	cmp	r3, #0
 810a52e:	d021      	beq.n	810a574 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 810a530:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810a534:	4915      	ldr	r1, [pc, #84]	@ (810a58c <etharp_update_arp_entry+0x148>)
 810a536:	4613      	mov	r3, r2
 810a538:	005b      	lsls	r3, r3, #1
 810a53a:	4413      	add	r3, r2
 810a53c:	00db      	lsls	r3, r3, #3
 810a53e:	440b      	add	r3, r1
 810a540:	681b      	ldr	r3, [r3, #0]
 810a542:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 810a544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810a548:	4910      	ldr	r1, [pc, #64]	@ (810a58c <etharp_update_arp_entry+0x148>)
 810a54a:	4613      	mov	r3, r2
 810a54c:	005b      	lsls	r3, r3, #1
 810a54e:	4413      	add	r3, r2
 810a550:	00db      	lsls	r3, r3, #3
 810a552:	440b      	add	r3, r1
 810a554:	2200      	movs	r2, #0
 810a556:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 810a558:	68fb      	ldr	r3, [r7, #12]
 810a55a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 810a55e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a562:	9300      	str	r3, [sp, #0]
 810a564:	687b      	ldr	r3, [r7, #4]
 810a566:	6939      	ldr	r1, [r7, #16]
 810a568:	68f8      	ldr	r0, [r7, #12]
 810a56a:	f000 fcf3 	bl	810af54 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 810a56e:	6938      	ldr	r0, [r7, #16]
 810a570:	f003 fbea 	bl	810dd48 <pbuf_free>
  }
  return ERR_OK;
 810a574:	2300      	movs	r3, #0
}
 810a576:	4618      	mov	r0, r3
 810a578:	3718      	adds	r7, #24
 810a57a:	46bd      	mov	sp, r7
 810a57c:	bd80      	pop	{r7, pc}
 810a57e:	bf00      	nop
 810a580:	0811c300 	.word	0x0811c300
 810a584:	0811c428 	.word	0x0811c428
 810a588:	0811c3a8 	.word	0x0811c3a8
 810a58c:	100144bc 	.word	0x100144bc

0810a590 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 810a590:	b580      	push	{r7, lr}
 810a592:	b084      	sub	sp, #16
 810a594:	af00      	add	r7, sp, #0
 810a596:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810a598:	2300      	movs	r3, #0
 810a59a:	60fb      	str	r3, [r7, #12]
 810a59c:	e01e      	b.n	810a5dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 810a59e:	4913      	ldr	r1, [pc, #76]	@ (810a5ec <etharp_cleanup_netif+0x5c>)
 810a5a0:	68fa      	ldr	r2, [r7, #12]
 810a5a2:	4613      	mov	r3, r2
 810a5a4:	005b      	lsls	r3, r3, #1
 810a5a6:	4413      	add	r3, r2
 810a5a8:	00db      	lsls	r3, r3, #3
 810a5aa:	440b      	add	r3, r1
 810a5ac:	3314      	adds	r3, #20
 810a5ae:	781b      	ldrb	r3, [r3, #0]
 810a5b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 810a5b2:	7afb      	ldrb	r3, [r7, #11]
 810a5b4:	2b00      	cmp	r3, #0
 810a5b6:	d00e      	beq.n	810a5d6 <etharp_cleanup_netif+0x46>
 810a5b8:	490c      	ldr	r1, [pc, #48]	@ (810a5ec <etharp_cleanup_netif+0x5c>)
 810a5ba:	68fa      	ldr	r2, [r7, #12]
 810a5bc:	4613      	mov	r3, r2
 810a5be:	005b      	lsls	r3, r3, #1
 810a5c0:	4413      	add	r3, r2
 810a5c2:	00db      	lsls	r3, r3, #3
 810a5c4:	440b      	add	r3, r1
 810a5c6:	3308      	adds	r3, #8
 810a5c8:	681b      	ldr	r3, [r3, #0]
 810a5ca:	687a      	ldr	r2, [r7, #4]
 810a5cc:	429a      	cmp	r2, r3
 810a5ce:	d102      	bne.n	810a5d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 810a5d0:	68f8      	ldr	r0, [r7, #12]
 810a5d2:	f7ff fce5 	bl	8109fa0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810a5d6:	68fb      	ldr	r3, [r7, #12]
 810a5d8:	3301      	adds	r3, #1
 810a5da:	60fb      	str	r3, [r7, #12]
 810a5dc:	68fb      	ldr	r3, [r7, #12]
 810a5de:	2b09      	cmp	r3, #9
 810a5e0:	dddd      	ble.n	810a59e <etharp_cleanup_netif+0xe>
    }
  }
}
 810a5e2:	bf00      	nop
 810a5e4:	bf00      	nop
 810a5e6:	3710      	adds	r7, #16
 810a5e8:	46bd      	mov	sp, r7
 810a5ea:	bd80      	pop	{r7, pc}
 810a5ec:	100144bc 	.word	0x100144bc

0810a5f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 810a5f0:	b5b0      	push	{r4, r5, r7, lr}
 810a5f2:	b08a      	sub	sp, #40	@ 0x28
 810a5f4:	af04      	add	r7, sp, #16
 810a5f6:	6078      	str	r0, [r7, #4]
 810a5f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 810a5fa:	683b      	ldr	r3, [r7, #0]
 810a5fc:	2b00      	cmp	r3, #0
 810a5fe:	d107      	bne.n	810a610 <etharp_input+0x20>
 810a600:	4b3d      	ldr	r3, [pc, #244]	@ (810a6f8 <etharp_input+0x108>)
 810a602:	f240 228a 	movw	r2, #650	@ 0x28a
 810a606:	493d      	ldr	r1, [pc, #244]	@ (810a6fc <etharp_input+0x10c>)
 810a608:	483d      	ldr	r0, [pc, #244]	@ (810a700 <etharp_input+0x110>)
 810a60a:	f00c ff15 	bl	8117438 <iprintf>
 810a60e:	e06f      	b.n	810a6f0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 810a610:	687b      	ldr	r3, [r7, #4]
 810a612:	685b      	ldr	r3, [r3, #4]
 810a614:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810a616:	693b      	ldr	r3, [r7, #16]
 810a618:	881b      	ldrh	r3, [r3, #0]
 810a61a:	b29b      	uxth	r3, r3
 810a61c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a620:	d10c      	bne.n	810a63c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810a622:	693b      	ldr	r3, [r7, #16]
 810a624:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810a626:	2b06      	cmp	r3, #6
 810a628:	d108      	bne.n	810a63c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810a62a:	693b      	ldr	r3, [r7, #16]
 810a62c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810a62e:	2b04      	cmp	r3, #4
 810a630:	d104      	bne.n	810a63c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 810a632:	693b      	ldr	r3, [r7, #16]
 810a634:	885b      	ldrh	r3, [r3, #2]
 810a636:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810a638:	2b08      	cmp	r3, #8
 810a63a:	d003      	beq.n	810a644 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 810a63c:	6878      	ldr	r0, [r7, #4]
 810a63e:	f003 fb83 	bl	810dd48 <pbuf_free>
    return;
 810a642:	e055      	b.n	810a6f0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 810a644:	693b      	ldr	r3, [r7, #16]
 810a646:	330e      	adds	r3, #14
 810a648:	681b      	ldr	r3, [r3, #0]
 810a64a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 810a64c:	693b      	ldr	r3, [r7, #16]
 810a64e:	3318      	adds	r3, #24
 810a650:	681b      	ldr	r3, [r3, #0]
 810a652:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810a654:	683b      	ldr	r3, [r7, #0]
 810a656:	3304      	adds	r3, #4
 810a658:	681b      	ldr	r3, [r3, #0]
 810a65a:	2b00      	cmp	r3, #0
 810a65c:	d102      	bne.n	810a664 <etharp_input+0x74>
    for_us = 0;
 810a65e:	2300      	movs	r3, #0
 810a660:	75fb      	strb	r3, [r7, #23]
 810a662:	e009      	b.n	810a678 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 810a664:	68ba      	ldr	r2, [r7, #8]
 810a666:	683b      	ldr	r3, [r7, #0]
 810a668:	3304      	adds	r3, #4
 810a66a:	681b      	ldr	r3, [r3, #0]
 810a66c:	429a      	cmp	r2, r3
 810a66e:	bf0c      	ite	eq
 810a670:	2301      	moveq	r3, #1
 810a672:	2300      	movne	r3, #0
 810a674:	b2db      	uxtb	r3, r3
 810a676:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 810a678:	693b      	ldr	r3, [r7, #16]
 810a67a:	f103 0208 	add.w	r2, r3, #8
 810a67e:	7dfb      	ldrb	r3, [r7, #23]
 810a680:	2b00      	cmp	r3, #0
 810a682:	d001      	beq.n	810a688 <etharp_input+0x98>
 810a684:	2301      	movs	r3, #1
 810a686:	e000      	b.n	810a68a <etharp_input+0x9a>
 810a688:	2302      	movs	r3, #2
 810a68a:	f107 010c 	add.w	r1, r7, #12
 810a68e:	6838      	ldr	r0, [r7, #0]
 810a690:	f7ff fed8 	bl	810a444 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 810a694:	693b      	ldr	r3, [r7, #16]
 810a696:	88db      	ldrh	r3, [r3, #6]
 810a698:	b29b      	uxth	r3, r3
 810a69a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a69e:	d003      	beq.n	810a6a8 <etharp_input+0xb8>
 810a6a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810a6a4:	d01e      	beq.n	810a6e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 810a6a6:	e020      	b.n	810a6ea <etharp_input+0xfa>
      if (for_us) {
 810a6a8:	7dfb      	ldrb	r3, [r7, #23]
 810a6aa:	2b00      	cmp	r3, #0
 810a6ac:	d01c      	beq.n	810a6e8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 810a6ae:	683b      	ldr	r3, [r7, #0]
 810a6b0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 810a6b4:	693b      	ldr	r3, [r7, #16]
 810a6b6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 810a6ba:	683b      	ldr	r3, [r7, #0]
 810a6bc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 810a6c0:	683b      	ldr	r3, [r7, #0]
 810a6c2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 810a6c4:	693a      	ldr	r2, [r7, #16]
 810a6c6:	3208      	adds	r2, #8
        etharp_raw(netif,
 810a6c8:	2102      	movs	r1, #2
 810a6ca:	9103      	str	r1, [sp, #12]
 810a6cc:	f107 010c 	add.w	r1, r7, #12
 810a6d0:	9102      	str	r1, [sp, #8]
 810a6d2:	9201      	str	r2, [sp, #4]
 810a6d4:	9300      	str	r3, [sp, #0]
 810a6d6:	462b      	mov	r3, r5
 810a6d8:	4622      	mov	r2, r4
 810a6da:	4601      	mov	r1, r0
 810a6dc:	6838      	ldr	r0, [r7, #0]
 810a6de:	f000 faeb 	bl	810acb8 <etharp_raw>
      break;
 810a6e2:	e001      	b.n	810a6e8 <etharp_input+0xf8>
      break;
 810a6e4:	bf00      	nop
 810a6e6:	e000      	b.n	810a6ea <etharp_input+0xfa>
      break;
 810a6e8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 810a6ea:	6878      	ldr	r0, [r7, #4]
 810a6ec:	f003 fb2c 	bl	810dd48 <pbuf_free>
}
 810a6f0:	3718      	adds	r7, #24
 810a6f2:	46bd      	mov	sp, r7
 810a6f4:	bdb0      	pop	{r4, r5, r7, pc}
 810a6f6:	bf00      	nop
 810a6f8:	0811c300 	.word	0x0811c300
 810a6fc:	0811c480 	.word	0x0811c480
 810a700:	0811c3a8 	.word	0x0811c3a8

0810a704 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 810a704:	b580      	push	{r7, lr}
 810a706:	b086      	sub	sp, #24
 810a708:	af02      	add	r7, sp, #8
 810a70a:	60f8      	str	r0, [r7, #12]
 810a70c:	60b9      	str	r1, [r7, #8]
 810a70e:	4613      	mov	r3, r2
 810a710:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 810a712:	79fa      	ldrb	r2, [r7, #7]
 810a714:	4944      	ldr	r1, [pc, #272]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a716:	4613      	mov	r3, r2
 810a718:	005b      	lsls	r3, r3, #1
 810a71a:	4413      	add	r3, r2
 810a71c:	00db      	lsls	r3, r3, #3
 810a71e:	440b      	add	r3, r1
 810a720:	3314      	adds	r3, #20
 810a722:	781b      	ldrb	r3, [r3, #0]
 810a724:	2b01      	cmp	r3, #1
 810a726:	d806      	bhi.n	810a736 <etharp_output_to_arp_index+0x32>
 810a728:	4b40      	ldr	r3, [pc, #256]	@ (810a82c <etharp_output_to_arp_index+0x128>)
 810a72a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 810a72e:	4940      	ldr	r1, [pc, #256]	@ (810a830 <etharp_output_to_arp_index+0x12c>)
 810a730:	4840      	ldr	r0, [pc, #256]	@ (810a834 <etharp_output_to_arp_index+0x130>)
 810a732:	f00c fe81 	bl	8117438 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 810a736:	79fa      	ldrb	r2, [r7, #7]
 810a738:	493b      	ldr	r1, [pc, #236]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a73a:	4613      	mov	r3, r2
 810a73c:	005b      	lsls	r3, r3, #1
 810a73e:	4413      	add	r3, r2
 810a740:	00db      	lsls	r3, r3, #3
 810a742:	440b      	add	r3, r1
 810a744:	3314      	adds	r3, #20
 810a746:	781b      	ldrb	r3, [r3, #0]
 810a748:	2b02      	cmp	r3, #2
 810a74a:	d153      	bne.n	810a7f4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 810a74c:	79fa      	ldrb	r2, [r7, #7]
 810a74e:	4936      	ldr	r1, [pc, #216]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a750:	4613      	mov	r3, r2
 810a752:	005b      	lsls	r3, r3, #1
 810a754:	4413      	add	r3, r2
 810a756:	00db      	lsls	r3, r3, #3
 810a758:	440b      	add	r3, r1
 810a75a:	3312      	adds	r3, #18
 810a75c:	881b      	ldrh	r3, [r3, #0]
 810a75e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 810a762:	d919      	bls.n	810a798 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 810a764:	79fa      	ldrb	r2, [r7, #7]
 810a766:	4613      	mov	r3, r2
 810a768:	005b      	lsls	r3, r3, #1
 810a76a:	4413      	add	r3, r2
 810a76c:	00db      	lsls	r3, r3, #3
 810a76e:	4a2e      	ldr	r2, [pc, #184]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a770:	4413      	add	r3, r2
 810a772:	3304      	adds	r3, #4
 810a774:	4619      	mov	r1, r3
 810a776:	68f8      	ldr	r0, [r7, #12]
 810a778:	f000 fb4c 	bl	810ae14 <etharp_request>
 810a77c:	4603      	mov	r3, r0
 810a77e:	2b00      	cmp	r3, #0
 810a780:	d138      	bne.n	810a7f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810a782:	79fa      	ldrb	r2, [r7, #7]
 810a784:	4928      	ldr	r1, [pc, #160]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a786:	4613      	mov	r3, r2
 810a788:	005b      	lsls	r3, r3, #1
 810a78a:	4413      	add	r3, r2
 810a78c:	00db      	lsls	r3, r3, #3
 810a78e:	440b      	add	r3, r1
 810a790:	3314      	adds	r3, #20
 810a792:	2203      	movs	r2, #3
 810a794:	701a      	strb	r2, [r3, #0]
 810a796:	e02d      	b.n	810a7f4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 810a798:	79fa      	ldrb	r2, [r7, #7]
 810a79a:	4923      	ldr	r1, [pc, #140]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a79c:	4613      	mov	r3, r2
 810a79e:	005b      	lsls	r3, r3, #1
 810a7a0:	4413      	add	r3, r2
 810a7a2:	00db      	lsls	r3, r3, #3
 810a7a4:	440b      	add	r3, r1
 810a7a6:	3312      	adds	r3, #18
 810a7a8:	881b      	ldrh	r3, [r3, #0]
 810a7aa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 810a7ae:	d321      	bcc.n	810a7f4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 810a7b0:	79fa      	ldrb	r2, [r7, #7]
 810a7b2:	4613      	mov	r3, r2
 810a7b4:	005b      	lsls	r3, r3, #1
 810a7b6:	4413      	add	r3, r2
 810a7b8:	00db      	lsls	r3, r3, #3
 810a7ba:	4a1b      	ldr	r2, [pc, #108]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a7bc:	4413      	add	r3, r2
 810a7be:	1d19      	adds	r1, r3, #4
 810a7c0:	79fa      	ldrb	r2, [r7, #7]
 810a7c2:	4613      	mov	r3, r2
 810a7c4:	005b      	lsls	r3, r3, #1
 810a7c6:	4413      	add	r3, r2
 810a7c8:	00db      	lsls	r3, r3, #3
 810a7ca:	3308      	adds	r3, #8
 810a7cc:	4a16      	ldr	r2, [pc, #88]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a7ce:	4413      	add	r3, r2
 810a7d0:	3304      	adds	r3, #4
 810a7d2:	461a      	mov	r2, r3
 810a7d4:	68f8      	ldr	r0, [r7, #12]
 810a7d6:	f000 fafb 	bl	810add0 <etharp_request_dst>
 810a7da:	4603      	mov	r3, r0
 810a7dc:	2b00      	cmp	r3, #0
 810a7de:	d109      	bne.n	810a7f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810a7e0:	79fa      	ldrb	r2, [r7, #7]
 810a7e2:	4911      	ldr	r1, [pc, #68]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a7e4:	4613      	mov	r3, r2
 810a7e6:	005b      	lsls	r3, r3, #1
 810a7e8:	4413      	add	r3, r2
 810a7ea:	00db      	lsls	r3, r3, #3
 810a7ec:	440b      	add	r3, r1
 810a7ee:	3314      	adds	r3, #20
 810a7f0:	2203      	movs	r2, #3
 810a7f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 810a7f4:	68fb      	ldr	r3, [r7, #12]
 810a7f6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 810a7fa:	79fa      	ldrb	r2, [r7, #7]
 810a7fc:	4613      	mov	r3, r2
 810a7fe:	005b      	lsls	r3, r3, #1
 810a800:	4413      	add	r3, r2
 810a802:	00db      	lsls	r3, r3, #3
 810a804:	3308      	adds	r3, #8
 810a806:	4a08      	ldr	r2, [pc, #32]	@ (810a828 <etharp_output_to_arp_index+0x124>)
 810a808:	4413      	add	r3, r2
 810a80a:	3304      	adds	r3, #4
 810a80c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810a810:	9200      	str	r2, [sp, #0]
 810a812:	460a      	mov	r2, r1
 810a814:	68b9      	ldr	r1, [r7, #8]
 810a816:	68f8      	ldr	r0, [r7, #12]
 810a818:	f000 fb9c 	bl	810af54 <ethernet_output>
 810a81c:	4603      	mov	r3, r0
}
 810a81e:	4618      	mov	r0, r3
 810a820:	3710      	adds	r7, #16
 810a822:	46bd      	mov	sp, r7
 810a824:	bd80      	pop	{r7, pc}
 810a826:	bf00      	nop
 810a828:	100144bc 	.word	0x100144bc
 810a82c:	0811c300 	.word	0x0811c300
 810a830:	0811c4a0 	.word	0x0811c4a0
 810a834:	0811c3a8 	.word	0x0811c3a8

0810a838 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 810a838:	b580      	push	{r7, lr}
 810a83a:	b08a      	sub	sp, #40	@ 0x28
 810a83c:	af02      	add	r7, sp, #8
 810a83e:	60f8      	str	r0, [r7, #12]
 810a840:	60b9      	str	r1, [r7, #8]
 810a842:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 810a848:	68fb      	ldr	r3, [r7, #12]
 810a84a:	2b00      	cmp	r3, #0
 810a84c:	d106      	bne.n	810a85c <etharp_output+0x24>
 810a84e:	4b73      	ldr	r3, [pc, #460]	@ (810aa1c <etharp_output+0x1e4>)
 810a850:	f240 321e 	movw	r2, #798	@ 0x31e
 810a854:	4972      	ldr	r1, [pc, #456]	@ (810aa20 <etharp_output+0x1e8>)
 810a856:	4873      	ldr	r0, [pc, #460]	@ (810aa24 <etharp_output+0x1ec>)
 810a858:	f00c fdee 	bl	8117438 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 810a85c:	68bb      	ldr	r3, [r7, #8]
 810a85e:	2b00      	cmp	r3, #0
 810a860:	d106      	bne.n	810a870 <etharp_output+0x38>
 810a862:	4b6e      	ldr	r3, [pc, #440]	@ (810aa1c <etharp_output+0x1e4>)
 810a864:	f240 321f 	movw	r2, #799	@ 0x31f
 810a868:	496f      	ldr	r1, [pc, #444]	@ (810aa28 <etharp_output+0x1f0>)
 810a86a:	486e      	ldr	r0, [pc, #440]	@ (810aa24 <etharp_output+0x1ec>)
 810a86c:	f00c fde4 	bl	8117438 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 810a870:	687b      	ldr	r3, [r7, #4]
 810a872:	2b00      	cmp	r3, #0
 810a874:	d106      	bne.n	810a884 <etharp_output+0x4c>
 810a876:	4b69      	ldr	r3, [pc, #420]	@ (810aa1c <etharp_output+0x1e4>)
 810a878:	f44f 7248 	mov.w	r2, #800	@ 0x320
 810a87c:	496b      	ldr	r1, [pc, #428]	@ (810aa2c <etharp_output+0x1f4>)
 810a87e:	4869      	ldr	r0, [pc, #420]	@ (810aa24 <etharp_output+0x1ec>)
 810a880:	f00c fdda 	bl	8117438 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 810a884:	687b      	ldr	r3, [r7, #4]
 810a886:	681b      	ldr	r3, [r3, #0]
 810a888:	68f9      	ldr	r1, [r7, #12]
 810a88a:	4618      	mov	r0, r3
 810a88c:	f001 f8c6 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 810a890:	4603      	mov	r3, r0
 810a892:	2b00      	cmp	r3, #0
 810a894:	d002      	beq.n	810a89c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 810a896:	4b66      	ldr	r3, [pc, #408]	@ (810aa30 <etharp_output+0x1f8>)
 810a898:	61fb      	str	r3, [r7, #28]
 810a89a:	e0af      	b.n	810a9fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 810a89c:	687b      	ldr	r3, [r7, #4]
 810a89e:	681b      	ldr	r3, [r3, #0]
 810a8a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810a8a4:	2be0      	cmp	r3, #224	@ 0xe0
 810a8a6:	d118      	bne.n	810a8da <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 810a8a8:	2301      	movs	r3, #1
 810a8aa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 810a8ac:	2300      	movs	r3, #0
 810a8ae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 810a8b0:	235e      	movs	r3, #94	@ 0x5e
 810a8b2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 810a8b4:	687b      	ldr	r3, [r7, #4]
 810a8b6:	3301      	adds	r3, #1
 810a8b8:	781b      	ldrb	r3, [r3, #0]
 810a8ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a8be:	b2db      	uxtb	r3, r3
 810a8c0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 810a8c2:	687b      	ldr	r3, [r7, #4]
 810a8c4:	3302      	adds	r3, #2
 810a8c6:	781b      	ldrb	r3, [r3, #0]
 810a8c8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 810a8ca:	687b      	ldr	r3, [r7, #4]
 810a8cc:	3303      	adds	r3, #3
 810a8ce:	781b      	ldrb	r3, [r3, #0]
 810a8d0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 810a8d2:	f107 0310 	add.w	r3, r7, #16
 810a8d6:	61fb      	str	r3, [r7, #28]
 810a8d8:	e090      	b.n	810a9fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810a8da:	687b      	ldr	r3, [r7, #4]
 810a8dc:	681a      	ldr	r2, [r3, #0]
 810a8de:	68fb      	ldr	r3, [r7, #12]
 810a8e0:	3304      	adds	r3, #4
 810a8e2:	681b      	ldr	r3, [r3, #0]
 810a8e4:	405a      	eors	r2, r3
 810a8e6:	68fb      	ldr	r3, [r7, #12]
 810a8e8:	3308      	adds	r3, #8
 810a8ea:	681b      	ldr	r3, [r3, #0]
 810a8ec:	4013      	ands	r3, r2
 810a8ee:	2b00      	cmp	r3, #0
 810a8f0:	d012      	beq.n	810a918 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 810a8f2:	687b      	ldr	r3, [r7, #4]
 810a8f4:	681b      	ldr	r3, [r3, #0]
 810a8f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810a8f8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 810a8fc:	4293      	cmp	r3, r2
 810a8fe:	d00b      	beq.n	810a918 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 810a900:	68fb      	ldr	r3, [r7, #12]
 810a902:	330c      	adds	r3, #12
 810a904:	681b      	ldr	r3, [r3, #0]
 810a906:	2b00      	cmp	r3, #0
 810a908:	d003      	beq.n	810a912 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 810a90a:	68fb      	ldr	r3, [r7, #12]
 810a90c:	330c      	adds	r3, #12
 810a90e:	61bb      	str	r3, [r7, #24]
 810a910:	e002      	b.n	810a918 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 810a912:	f06f 0303 	mvn.w	r3, #3
 810a916:	e07d      	b.n	810aa14 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810a918:	4b46      	ldr	r3, [pc, #280]	@ (810aa34 <etharp_output+0x1fc>)
 810a91a:	781b      	ldrb	r3, [r3, #0]
 810a91c:	4619      	mov	r1, r3
 810a91e:	4a46      	ldr	r2, [pc, #280]	@ (810aa38 <etharp_output+0x200>)
 810a920:	460b      	mov	r3, r1
 810a922:	005b      	lsls	r3, r3, #1
 810a924:	440b      	add	r3, r1
 810a926:	00db      	lsls	r3, r3, #3
 810a928:	4413      	add	r3, r2
 810a92a:	3314      	adds	r3, #20
 810a92c:	781b      	ldrb	r3, [r3, #0]
 810a92e:	2b01      	cmp	r3, #1
 810a930:	d925      	bls.n	810a97e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 810a932:	4b40      	ldr	r3, [pc, #256]	@ (810aa34 <etharp_output+0x1fc>)
 810a934:	781b      	ldrb	r3, [r3, #0]
 810a936:	4619      	mov	r1, r3
 810a938:	4a3f      	ldr	r2, [pc, #252]	@ (810aa38 <etharp_output+0x200>)
 810a93a:	460b      	mov	r3, r1
 810a93c:	005b      	lsls	r3, r3, #1
 810a93e:	440b      	add	r3, r1
 810a940:	00db      	lsls	r3, r3, #3
 810a942:	4413      	add	r3, r2
 810a944:	3308      	adds	r3, #8
 810a946:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810a948:	68fa      	ldr	r2, [r7, #12]
 810a94a:	429a      	cmp	r2, r3
 810a94c:	d117      	bne.n	810a97e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 810a94e:	69bb      	ldr	r3, [r7, #24]
 810a950:	681a      	ldr	r2, [r3, #0]
 810a952:	4b38      	ldr	r3, [pc, #224]	@ (810aa34 <etharp_output+0x1fc>)
 810a954:	781b      	ldrb	r3, [r3, #0]
 810a956:	4618      	mov	r0, r3
 810a958:	4937      	ldr	r1, [pc, #220]	@ (810aa38 <etharp_output+0x200>)
 810a95a:	4603      	mov	r3, r0
 810a95c:	005b      	lsls	r3, r3, #1
 810a95e:	4403      	add	r3, r0
 810a960:	00db      	lsls	r3, r3, #3
 810a962:	440b      	add	r3, r1
 810a964:	3304      	adds	r3, #4
 810a966:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 810a968:	429a      	cmp	r2, r3
 810a96a:	d108      	bne.n	810a97e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 810a96c:	4b31      	ldr	r3, [pc, #196]	@ (810aa34 <etharp_output+0x1fc>)
 810a96e:	781b      	ldrb	r3, [r3, #0]
 810a970:	461a      	mov	r2, r3
 810a972:	68b9      	ldr	r1, [r7, #8]
 810a974:	68f8      	ldr	r0, [r7, #12]
 810a976:	f7ff fec5 	bl	810a704 <etharp_output_to_arp_index>
 810a97a:	4603      	mov	r3, r0
 810a97c:	e04a      	b.n	810aa14 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810a97e:	2300      	movs	r3, #0
 810a980:	75fb      	strb	r3, [r7, #23]
 810a982:	e031      	b.n	810a9e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810a984:	7dfa      	ldrb	r2, [r7, #23]
 810a986:	492c      	ldr	r1, [pc, #176]	@ (810aa38 <etharp_output+0x200>)
 810a988:	4613      	mov	r3, r2
 810a98a:	005b      	lsls	r3, r3, #1
 810a98c:	4413      	add	r3, r2
 810a98e:	00db      	lsls	r3, r3, #3
 810a990:	440b      	add	r3, r1
 810a992:	3314      	adds	r3, #20
 810a994:	781b      	ldrb	r3, [r3, #0]
 810a996:	2b01      	cmp	r3, #1
 810a998:	d923      	bls.n	810a9e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 810a99a:	7dfa      	ldrb	r2, [r7, #23]
 810a99c:	4926      	ldr	r1, [pc, #152]	@ (810aa38 <etharp_output+0x200>)
 810a99e:	4613      	mov	r3, r2
 810a9a0:	005b      	lsls	r3, r3, #1
 810a9a2:	4413      	add	r3, r2
 810a9a4:	00db      	lsls	r3, r3, #3
 810a9a6:	440b      	add	r3, r1
 810a9a8:	3308      	adds	r3, #8
 810a9aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810a9ac:	68fa      	ldr	r2, [r7, #12]
 810a9ae:	429a      	cmp	r2, r3
 810a9b0:	d117      	bne.n	810a9e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 810a9b2:	69bb      	ldr	r3, [r7, #24]
 810a9b4:	6819      	ldr	r1, [r3, #0]
 810a9b6:	7dfa      	ldrb	r2, [r7, #23]
 810a9b8:	481f      	ldr	r0, [pc, #124]	@ (810aa38 <etharp_output+0x200>)
 810a9ba:	4613      	mov	r3, r2
 810a9bc:	005b      	lsls	r3, r3, #1
 810a9be:	4413      	add	r3, r2
 810a9c0:	00db      	lsls	r3, r3, #3
 810a9c2:	4403      	add	r3, r0
 810a9c4:	3304      	adds	r3, #4
 810a9c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 810a9c8:	4299      	cmp	r1, r3
 810a9ca:	d10a      	bne.n	810a9e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 810a9cc:	4a19      	ldr	r2, [pc, #100]	@ (810aa34 <etharp_output+0x1fc>)
 810a9ce:	7dfb      	ldrb	r3, [r7, #23]
 810a9d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 810a9d2:	7dfb      	ldrb	r3, [r7, #23]
 810a9d4:	461a      	mov	r2, r3
 810a9d6:	68b9      	ldr	r1, [r7, #8]
 810a9d8:	68f8      	ldr	r0, [r7, #12]
 810a9da:	f7ff fe93 	bl	810a704 <etharp_output_to_arp_index>
 810a9de:	4603      	mov	r3, r0
 810a9e0:	e018      	b.n	810aa14 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810a9e2:	7dfb      	ldrb	r3, [r7, #23]
 810a9e4:	3301      	adds	r3, #1
 810a9e6:	75fb      	strb	r3, [r7, #23]
 810a9e8:	7dfb      	ldrb	r3, [r7, #23]
 810a9ea:	2b09      	cmp	r3, #9
 810a9ec:	d9ca      	bls.n	810a984 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 810a9ee:	68ba      	ldr	r2, [r7, #8]
 810a9f0:	69b9      	ldr	r1, [r7, #24]
 810a9f2:	68f8      	ldr	r0, [r7, #12]
 810a9f4:	f000 f822 	bl	810aa3c <etharp_query>
 810a9f8:	4603      	mov	r3, r0
 810a9fa:	e00b      	b.n	810aa14 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 810a9fc:	68fb      	ldr	r3, [r7, #12]
 810a9fe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 810aa02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810aa06:	9300      	str	r3, [sp, #0]
 810aa08:	69fb      	ldr	r3, [r7, #28]
 810aa0a:	68b9      	ldr	r1, [r7, #8]
 810aa0c:	68f8      	ldr	r0, [r7, #12]
 810aa0e:	f000 faa1 	bl	810af54 <ethernet_output>
 810aa12:	4603      	mov	r3, r0
}
 810aa14:	4618      	mov	r0, r3
 810aa16:	3720      	adds	r7, #32
 810aa18:	46bd      	mov	sp, r7
 810aa1a:	bd80      	pop	{r7, pc}
 810aa1c:	0811c300 	.word	0x0811c300
 810aa20:	0811c480 	.word	0x0811c480
 810aa24:	0811c3a8 	.word	0x0811c3a8
 810aa28:	0811c4d0 	.word	0x0811c4d0
 810aa2c:	0811c470 	.word	0x0811c470
 810aa30:	0811ef68 	.word	0x0811ef68
 810aa34:	100145ac 	.word	0x100145ac
 810aa38:	100144bc 	.word	0x100144bc

0810aa3c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 810aa3c:	b580      	push	{r7, lr}
 810aa3e:	b08c      	sub	sp, #48	@ 0x30
 810aa40:	af02      	add	r7, sp, #8
 810aa42:	60f8      	str	r0, [r7, #12]
 810aa44:	60b9      	str	r1, [r7, #8]
 810aa46:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 810aa48:	68fb      	ldr	r3, [r7, #12]
 810aa4a:	3326      	adds	r3, #38	@ 0x26
 810aa4c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 810aa4e:	23ff      	movs	r3, #255	@ 0xff
 810aa50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 810aa54:	2300      	movs	r3, #0
 810aa56:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810aa58:	68bb      	ldr	r3, [r7, #8]
 810aa5a:	681b      	ldr	r3, [r3, #0]
 810aa5c:	68f9      	ldr	r1, [r7, #12]
 810aa5e:	4618      	mov	r0, r3
 810aa60:	f000 ffdc 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 810aa64:	4603      	mov	r3, r0
 810aa66:	2b00      	cmp	r3, #0
 810aa68:	d10c      	bne.n	810aa84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810aa6a:	68bb      	ldr	r3, [r7, #8]
 810aa6c:	681b      	ldr	r3, [r3, #0]
 810aa6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810aa72:	2be0      	cmp	r3, #224	@ 0xe0
 810aa74:	d006      	beq.n	810aa84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810aa76:	68bb      	ldr	r3, [r7, #8]
 810aa78:	2b00      	cmp	r3, #0
 810aa7a:	d003      	beq.n	810aa84 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 810aa7c:	68bb      	ldr	r3, [r7, #8]
 810aa7e:	681b      	ldr	r3, [r3, #0]
 810aa80:	2b00      	cmp	r3, #0
 810aa82:	d102      	bne.n	810aa8a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810aa84:	f06f 030f 	mvn.w	r3, #15
 810aa88:	e101      	b.n	810ac8e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 810aa8a:	68fa      	ldr	r2, [r7, #12]
 810aa8c:	2101      	movs	r1, #1
 810aa8e:	68b8      	ldr	r0, [r7, #8]
 810aa90:	f7ff fb60 	bl	810a154 <etharp_find_entry>
 810aa94:	4603      	mov	r3, r0
 810aa96:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 810aa98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810aa9c:	2b00      	cmp	r3, #0
 810aa9e:	da02      	bge.n	810aaa6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 810aaa0:	8a7b      	ldrh	r3, [r7, #18]
 810aaa2:	b25b      	sxtb	r3, r3
 810aaa4:	e0f3      	b.n	810ac8e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 810aaa6:	8a7b      	ldrh	r3, [r7, #18]
 810aaa8:	2b7e      	cmp	r3, #126	@ 0x7e
 810aaaa:	d906      	bls.n	810aaba <etharp_query+0x7e>
 810aaac:	4b7a      	ldr	r3, [pc, #488]	@ (810ac98 <etharp_query+0x25c>)
 810aaae:	f240 32c1 	movw	r2, #961	@ 0x3c1
 810aab2:	497a      	ldr	r1, [pc, #488]	@ (810ac9c <etharp_query+0x260>)
 810aab4:	487a      	ldr	r0, [pc, #488]	@ (810aca0 <etharp_query+0x264>)
 810aab6:	f00c fcbf 	bl	8117438 <iprintf>
  i = (netif_addr_idx_t)i_err;
 810aaba:	8a7b      	ldrh	r3, [r7, #18]
 810aabc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 810aabe:	7c7a      	ldrb	r2, [r7, #17]
 810aac0:	4978      	ldr	r1, [pc, #480]	@ (810aca4 <etharp_query+0x268>)
 810aac2:	4613      	mov	r3, r2
 810aac4:	005b      	lsls	r3, r3, #1
 810aac6:	4413      	add	r3, r2
 810aac8:	00db      	lsls	r3, r3, #3
 810aaca:	440b      	add	r3, r1
 810aacc:	3314      	adds	r3, #20
 810aace:	781b      	ldrb	r3, [r3, #0]
 810aad0:	2b00      	cmp	r3, #0
 810aad2:	d115      	bne.n	810ab00 <etharp_query+0xc4>
    is_new_entry = 1;
 810aad4:	2301      	movs	r3, #1
 810aad6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 810aad8:	7c7a      	ldrb	r2, [r7, #17]
 810aada:	4972      	ldr	r1, [pc, #456]	@ (810aca4 <etharp_query+0x268>)
 810aadc:	4613      	mov	r3, r2
 810aade:	005b      	lsls	r3, r3, #1
 810aae0:	4413      	add	r3, r2
 810aae2:	00db      	lsls	r3, r3, #3
 810aae4:	440b      	add	r3, r1
 810aae6:	3314      	adds	r3, #20
 810aae8:	2201      	movs	r2, #1
 810aaea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 810aaec:	7c7a      	ldrb	r2, [r7, #17]
 810aaee:	496d      	ldr	r1, [pc, #436]	@ (810aca4 <etharp_query+0x268>)
 810aaf0:	4613      	mov	r3, r2
 810aaf2:	005b      	lsls	r3, r3, #1
 810aaf4:	4413      	add	r3, r2
 810aaf6:	00db      	lsls	r3, r3, #3
 810aaf8:	440b      	add	r3, r1
 810aafa:	3308      	adds	r3, #8
 810aafc:	68fa      	ldr	r2, [r7, #12]
 810aafe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 810ab00:	7c7a      	ldrb	r2, [r7, #17]
 810ab02:	4968      	ldr	r1, [pc, #416]	@ (810aca4 <etharp_query+0x268>)
 810ab04:	4613      	mov	r3, r2
 810ab06:	005b      	lsls	r3, r3, #1
 810ab08:	4413      	add	r3, r2
 810ab0a:	00db      	lsls	r3, r3, #3
 810ab0c:	440b      	add	r3, r1
 810ab0e:	3314      	adds	r3, #20
 810ab10:	781b      	ldrb	r3, [r3, #0]
 810ab12:	2b01      	cmp	r3, #1
 810ab14:	d011      	beq.n	810ab3a <etharp_query+0xfe>
 810ab16:	7c7a      	ldrb	r2, [r7, #17]
 810ab18:	4962      	ldr	r1, [pc, #392]	@ (810aca4 <etharp_query+0x268>)
 810ab1a:	4613      	mov	r3, r2
 810ab1c:	005b      	lsls	r3, r3, #1
 810ab1e:	4413      	add	r3, r2
 810ab20:	00db      	lsls	r3, r3, #3
 810ab22:	440b      	add	r3, r1
 810ab24:	3314      	adds	r3, #20
 810ab26:	781b      	ldrb	r3, [r3, #0]
 810ab28:	2b01      	cmp	r3, #1
 810ab2a:	d806      	bhi.n	810ab3a <etharp_query+0xfe>
 810ab2c:	4b5a      	ldr	r3, [pc, #360]	@ (810ac98 <etharp_query+0x25c>)
 810ab2e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 810ab32:	495d      	ldr	r1, [pc, #372]	@ (810aca8 <etharp_query+0x26c>)
 810ab34:	485a      	ldr	r0, [pc, #360]	@ (810aca0 <etharp_query+0x264>)
 810ab36:	f00c fc7f 	bl	8117438 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 810ab3a:	6a3b      	ldr	r3, [r7, #32]
 810ab3c:	2b00      	cmp	r3, #0
 810ab3e:	d102      	bne.n	810ab46 <etharp_query+0x10a>
 810ab40:	687b      	ldr	r3, [r7, #4]
 810ab42:	2b00      	cmp	r3, #0
 810ab44:	d10c      	bne.n	810ab60 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 810ab46:	68b9      	ldr	r1, [r7, #8]
 810ab48:	68f8      	ldr	r0, [r7, #12]
 810ab4a:	f000 f963 	bl	810ae14 <etharp_request>
 810ab4e:	4603      	mov	r3, r0
 810ab50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 810ab54:	687b      	ldr	r3, [r7, #4]
 810ab56:	2b00      	cmp	r3, #0
 810ab58:	d102      	bne.n	810ab60 <etharp_query+0x124>
      return result;
 810ab5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810ab5e:	e096      	b.n	810ac8e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 810ab60:	687b      	ldr	r3, [r7, #4]
 810ab62:	2b00      	cmp	r3, #0
 810ab64:	d106      	bne.n	810ab74 <etharp_query+0x138>
 810ab66:	4b4c      	ldr	r3, [pc, #304]	@ (810ac98 <etharp_query+0x25c>)
 810ab68:	f240 32e1 	movw	r2, #993	@ 0x3e1
 810ab6c:	494f      	ldr	r1, [pc, #316]	@ (810acac <etharp_query+0x270>)
 810ab6e:	484c      	ldr	r0, [pc, #304]	@ (810aca0 <etharp_query+0x264>)
 810ab70:	f00c fc62 	bl	8117438 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 810ab74:	7c7a      	ldrb	r2, [r7, #17]
 810ab76:	494b      	ldr	r1, [pc, #300]	@ (810aca4 <etharp_query+0x268>)
 810ab78:	4613      	mov	r3, r2
 810ab7a:	005b      	lsls	r3, r3, #1
 810ab7c:	4413      	add	r3, r2
 810ab7e:	00db      	lsls	r3, r3, #3
 810ab80:	440b      	add	r3, r1
 810ab82:	3314      	adds	r3, #20
 810ab84:	781b      	ldrb	r3, [r3, #0]
 810ab86:	2b01      	cmp	r3, #1
 810ab88:	d917      	bls.n	810abba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 810ab8a:	4a49      	ldr	r2, [pc, #292]	@ (810acb0 <etharp_query+0x274>)
 810ab8c:	7c7b      	ldrb	r3, [r7, #17]
 810ab8e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 810ab90:	7c7a      	ldrb	r2, [r7, #17]
 810ab92:	4613      	mov	r3, r2
 810ab94:	005b      	lsls	r3, r3, #1
 810ab96:	4413      	add	r3, r2
 810ab98:	00db      	lsls	r3, r3, #3
 810ab9a:	3308      	adds	r3, #8
 810ab9c:	4a41      	ldr	r2, [pc, #260]	@ (810aca4 <etharp_query+0x268>)
 810ab9e:	4413      	add	r3, r2
 810aba0:	3304      	adds	r3, #4
 810aba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810aba6:	9200      	str	r2, [sp, #0]
 810aba8:	697a      	ldr	r2, [r7, #20]
 810abaa:	6879      	ldr	r1, [r7, #4]
 810abac:	68f8      	ldr	r0, [r7, #12]
 810abae:	f000 f9d1 	bl	810af54 <ethernet_output>
 810abb2:	4603      	mov	r3, r0
 810abb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810abb8:	e067      	b.n	810ac8a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810abba:	7c7a      	ldrb	r2, [r7, #17]
 810abbc:	4939      	ldr	r1, [pc, #228]	@ (810aca4 <etharp_query+0x268>)
 810abbe:	4613      	mov	r3, r2
 810abc0:	005b      	lsls	r3, r3, #1
 810abc2:	4413      	add	r3, r2
 810abc4:	00db      	lsls	r3, r3, #3
 810abc6:	440b      	add	r3, r1
 810abc8:	3314      	adds	r3, #20
 810abca:	781b      	ldrb	r3, [r3, #0]
 810abcc:	2b01      	cmp	r3, #1
 810abce:	d15c      	bne.n	810ac8a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 810abd0:	2300      	movs	r3, #0
 810abd2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 810abd4:	687b      	ldr	r3, [r7, #4]
 810abd6:	61fb      	str	r3, [r7, #28]
    while (p) {
 810abd8:	e01c      	b.n	810ac14 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 810abda:	69fb      	ldr	r3, [r7, #28]
 810abdc:	895a      	ldrh	r2, [r3, #10]
 810abde:	69fb      	ldr	r3, [r7, #28]
 810abe0:	891b      	ldrh	r3, [r3, #8]
 810abe2:	429a      	cmp	r2, r3
 810abe4:	d10a      	bne.n	810abfc <etharp_query+0x1c0>
 810abe6:	69fb      	ldr	r3, [r7, #28]
 810abe8:	681b      	ldr	r3, [r3, #0]
 810abea:	2b00      	cmp	r3, #0
 810abec:	d006      	beq.n	810abfc <etharp_query+0x1c0>
 810abee:	4b2a      	ldr	r3, [pc, #168]	@ (810ac98 <etharp_query+0x25c>)
 810abf0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 810abf4:	492f      	ldr	r1, [pc, #188]	@ (810acb4 <etharp_query+0x278>)
 810abf6:	482a      	ldr	r0, [pc, #168]	@ (810aca0 <etharp_query+0x264>)
 810abf8:	f00c fc1e 	bl	8117438 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 810abfc:	69fb      	ldr	r3, [r7, #28]
 810abfe:	7b1b      	ldrb	r3, [r3, #12]
 810ac00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ac04:	2b00      	cmp	r3, #0
 810ac06:	d002      	beq.n	810ac0e <etharp_query+0x1d2>
        copy_needed = 1;
 810ac08:	2301      	movs	r3, #1
 810ac0a:	61bb      	str	r3, [r7, #24]
        break;
 810ac0c:	e005      	b.n	810ac1a <etharp_query+0x1de>
      }
      p = p->next;
 810ac0e:	69fb      	ldr	r3, [r7, #28]
 810ac10:	681b      	ldr	r3, [r3, #0]
 810ac12:	61fb      	str	r3, [r7, #28]
    while (p) {
 810ac14:	69fb      	ldr	r3, [r7, #28]
 810ac16:	2b00      	cmp	r3, #0
 810ac18:	d1df      	bne.n	810abda <etharp_query+0x19e>
    }
    if (copy_needed) {
 810ac1a:	69bb      	ldr	r3, [r7, #24]
 810ac1c:	2b00      	cmp	r3, #0
 810ac1e:	d007      	beq.n	810ac30 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 810ac20:	687a      	ldr	r2, [r7, #4]
 810ac22:	f44f 7120 	mov.w	r1, #640	@ 0x280
 810ac26:	200e      	movs	r0, #14
 810ac28:	f003 faea 	bl	810e200 <pbuf_clone>
 810ac2c:	61f8      	str	r0, [r7, #28]
 810ac2e:	e004      	b.n	810ac3a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 810ac30:	687b      	ldr	r3, [r7, #4]
 810ac32:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 810ac34:	69f8      	ldr	r0, [r7, #28]
 810ac36:	f003 f927 	bl	810de88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 810ac3a:	69fb      	ldr	r3, [r7, #28]
 810ac3c:	2b00      	cmp	r3, #0
 810ac3e:	d021      	beq.n	810ac84 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 810ac40:	7c7a      	ldrb	r2, [r7, #17]
 810ac42:	4918      	ldr	r1, [pc, #96]	@ (810aca4 <etharp_query+0x268>)
 810ac44:	4613      	mov	r3, r2
 810ac46:	005b      	lsls	r3, r3, #1
 810ac48:	4413      	add	r3, r2
 810ac4a:	00db      	lsls	r3, r3, #3
 810ac4c:	440b      	add	r3, r1
 810ac4e:	681b      	ldr	r3, [r3, #0]
 810ac50:	2b00      	cmp	r3, #0
 810ac52:	d00a      	beq.n	810ac6a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 810ac54:	7c7a      	ldrb	r2, [r7, #17]
 810ac56:	4913      	ldr	r1, [pc, #76]	@ (810aca4 <etharp_query+0x268>)
 810ac58:	4613      	mov	r3, r2
 810ac5a:	005b      	lsls	r3, r3, #1
 810ac5c:	4413      	add	r3, r2
 810ac5e:	00db      	lsls	r3, r3, #3
 810ac60:	440b      	add	r3, r1
 810ac62:	681b      	ldr	r3, [r3, #0]
 810ac64:	4618      	mov	r0, r3
 810ac66:	f003 f86f 	bl	810dd48 <pbuf_free>
      }
      arp_table[i].q = p;
 810ac6a:	7c7a      	ldrb	r2, [r7, #17]
 810ac6c:	490d      	ldr	r1, [pc, #52]	@ (810aca4 <etharp_query+0x268>)
 810ac6e:	4613      	mov	r3, r2
 810ac70:	005b      	lsls	r3, r3, #1
 810ac72:	4413      	add	r3, r2
 810ac74:	00db      	lsls	r3, r3, #3
 810ac76:	440b      	add	r3, r1
 810ac78:	69fa      	ldr	r2, [r7, #28]
 810ac7a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 810ac7c:	2300      	movs	r3, #0
 810ac7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810ac82:	e002      	b.n	810ac8a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 810ac84:	23ff      	movs	r3, #255	@ 0xff
 810ac86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 810ac8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 810ac8e:	4618      	mov	r0, r3
 810ac90:	3728      	adds	r7, #40	@ 0x28
 810ac92:	46bd      	mov	sp, r7
 810ac94:	bd80      	pop	{r7, pc}
 810ac96:	bf00      	nop
 810ac98:	0811c300 	.word	0x0811c300
 810ac9c:	0811c4dc 	.word	0x0811c4dc
 810aca0:	0811c3a8 	.word	0x0811c3a8
 810aca4:	100144bc 	.word	0x100144bc
 810aca8:	0811c4ec 	.word	0x0811c4ec
 810acac:	0811c4d0 	.word	0x0811c4d0
 810acb0:	100145ac 	.word	0x100145ac
 810acb4:	0811c514 	.word	0x0811c514

0810acb8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 810acb8:	b580      	push	{r7, lr}
 810acba:	b08a      	sub	sp, #40	@ 0x28
 810acbc:	af02      	add	r7, sp, #8
 810acbe:	60f8      	str	r0, [r7, #12]
 810acc0:	60b9      	str	r1, [r7, #8]
 810acc2:	607a      	str	r2, [r7, #4]
 810acc4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 810acc6:	2300      	movs	r3, #0
 810acc8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 810acca:	68fb      	ldr	r3, [r7, #12]
 810accc:	2b00      	cmp	r3, #0
 810acce:	d106      	bne.n	810acde <etharp_raw+0x26>
 810acd0:	4b3a      	ldr	r3, [pc, #232]	@ (810adbc <etharp_raw+0x104>)
 810acd2:	f240 4257 	movw	r2, #1111	@ 0x457
 810acd6:	493a      	ldr	r1, [pc, #232]	@ (810adc0 <etharp_raw+0x108>)
 810acd8:	483a      	ldr	r0, [pc, #232]	@ (810adc4 <etharp_raw+0x10c>)
 810acda:	f00c fbad 	bl	8117438 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 810acde:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810ace2:	211c      	movs	r1, #28
 810ace4:	200e      	movs	r0, #14
 810ace6:	f002 fd4b 	bl	810d780 <pbuf_alloc>
 810acea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 810acec:	69bb      	ldr	r3, [r7, #24]
 810acee:	2b00      	cmp	r3, #0
 810acf0:	d102      	bne.n	810acf8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 810acf2:	f04f 33ff 	mov.w	r3, #4294967295
 810acf6:	e05d      	b.n	810adb4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 810acf8:	69bb      	ldr	r3, [r7, #24]
 810acfa:	895b      	ldrh	r3, [r3, #10]
 810acfc:	2b1b      	cmp	r3, #27
 810acfe:	d806      	bhi.n	810ad0e <etharp_raw+0x56>
 810ad00:	4b2e      	ldr	r3, [pc, #184]	@ (810adbc <etharp_raw+0x104>)
 810ad02:	f240 4262 	movw	r2, #1122	@ 0x462
 810ad06:	4930      	ldr	r1, [pc, #192]	@ (810adc8 <etharp_raw+0x110>)
 810ad08:	482e      	ldr	r0, [pc, #184]	@ (810adc4 <etharp_raw+0x10c>)
 810ad0a:	f00c fb95 	bl	8117438 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 810ad0e:	69bb      	ldr	r3, [r7, #24]
 810ad10:	685b      	ldr	r3, [r3, #4]
 810ad12:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 810ad14:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 810ad16:	4618      	mov	r0, r3
 810ad18:	f7ff f912 	bl	8109f40 <lwip_htons>
 810ad1c:	4603      	mov	r3, r0
 810ad1e:	461a      	mov	r2, r3
 810ad20:	697b      	ldr	r3, [r7, #20]
 810ad22:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 810ad24:	68fb      	ldr	r3, [r7, #12]
 810ad26:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810ad2a:	2b06      	cmp	r3, #6
 810ad2c:	d006      	beq.n	810ad3c <etharp_raw+0x84>
 810ad2e:	4b23      	ldr	r3, [pc, #140]	@ (810adbc <etharp_raw+0x104>)
 810ad30:	f240 4269 	movw	r2, #1129	@ 0x469
 810ad34:	4925      	ldr	r1, [pc, #148]	@ (810adcc <etharp_raw+0x114>)
 810ad36:	4823      	ldr	r0, [pc, #140]	@ (810adc4 <etharp_raw+0x10c>)
 810ad38:	f00c fb7e 	bl	8117438 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 810ad3c:	697b      	ldr	r3, [r7, #20]
 810ad3e:	3308      	adds	r3, #8
 810ad40:	2206      	movs	r2, #6
 810ad42:	6839      	ldr	r1, [r7, #0]
 810ad44:	4618      	mov	r0, r3
 810ad46:	f00c fdf6 	bl	8117936 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 810ad4a:	697b      	ldr	r3, [r7, #20]
 810ad4c:	3312      	adds	r3, #18
 810ad4e:	2206      	movs	r2, #6
 810ad50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ad52:	4618      	mov	r0, r3
 810ad54:	f00c fdef 	bl	8117936 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 810ad58:	697b      	ldr	r3, [r7, #20]
 810ad5a:	330e      	adds	r3, #14
 810ad5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ad5e:	6812      	ldr	r2, [r2, #0]
 810ad60:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 810ad62:	697b      	ldr	r3, [r7, #20]
 810ad64:	3318      	adds	r3, #24
 810ad66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ad68:	6812      	ldr	r2, [r2, #0]
 810ad6a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 810ad6c:	697b      	ldr	r3, [r7, #20]
 810ad6e:	2200      	movs	r2, #0
 810ad70:	701a      	strb	r2, [r3, #0]
 810ad72:	2200      	movs	r2, #0
 810ad74:	f042 0201 	orr.w	r2, r2, #1
 810ad78:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 810ad7a:	697b      	ldr	r3, [r7, #20]
 810ad7c:	2200      	movs	r2, #0
 810ad7e:	f042 0208 	orr.w	r2, r2, #8
 810ad82:	709a      	strb	r2, [r3, #2]
 810ad84:	2200      	movs	r2, #0
 810ad86:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 810ad88:	697b      	ldr	r3, [r7, #20]
 810ad8a:	2206      	movs	r2, #6
 810ad8c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 810ad8e:	697b      	ldr	r3, [r7, #20]
 810ad90:	2204      	movs	r2, #4
 810ad92:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 810ad94:	f640 0306 	movw	r3, #2054	@ 0x806
 810ad98:	9300      	str	r3, [sp, #0]
 810ad9a:	687b      	ldr	r3, [r7, #4]
 810ad9c:	68ba      	ldr	r2, [r7, #8]
 810ad9e:	69b9      	ldr	r1, [r7, #24]
 810ada0:	68f8      	ldr	r0, [r7, #12]
 810ada2:	f000 f8d7 	bl	810af54 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 810ada6:	69b8      	ldr	r0, [r7, #24]
 810ada8:	f002 ffce 	bl	810dd48 <pbuf_free>
  p = NULL;
 810adac:	2300      	movs	r3, #0
 810adae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 810adb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 810adb4:	4618      	mov	r0, r3
 810adb6:	3720      	adds	r7, #32
 810adb8:	46bd      	mov	sp, r7
 810adba:	bd80      	pop	{r7, pc}
 810adbc:	0811c300 	.word	0x0811c300
 810adc0:	0811c480 	.word	0x0811c480
 810adc4:	0811c3a8 	.word	0x0811c3a8
 810adc8:	0811c530 	.word	0x0811c530
 810adcc:	0811c564 	.word	0x0811c564

0810add0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 810add0:	b580      	push	{r7, lr}
 810add2:	b088      	sub	sp, #32
 810add4:	af04      	add	r7, sp, #16
 810add6:	60f8      	str	r0, [r7, #12]
 810add8:	60b9      	str	r1, [r7, #8]
 810adda:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 810addc:	68fb      	ldr	r3, [r7, #12]
 810adde:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 810ade2:	68fb      	ldr	r3, [r7, #12]
 810ade4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 810ade8:	68fb      	ldr	r3, [r7, #12]
 810adea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 810adec:	2201      	movs	r2, #1
 810adee:	9203      	str	r2, [sp, #12]
 810adf0:	68ba      	ldr	r2, [r7, #8]
 810adf2:	9202      	str	r2, [sp, #8]
 810adf4:	4a06      	ldr	r2, [pc, #24]	@ (810ae10 <etharp_request_dst+0x40>)
 810adf6:	9201      	str	r2, [sp, #4]
 810adf8:	9300      	str	r3, [sp, #0]
 810adfa:	4603      	mov	r3, r0
 810adfc:	687a      	ldr	r2, [r7, #4]
 810adfe:	68f8      	ldr	r0, [r7, #12]
 810ae00:	f7ff ff5a 	bl	810acb8 <etharp_raw>
 810ae04:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 810ae06:	4618      	mov	r0, r3
 810ae08:	3710      	adds	r7, #16
 810ae0a:	46bd      	mov	sp, r7
 810ae0c:	bd80      	pop	{r7, pc}
 810ae0e:	bf00      	nop
 810ae10:	0811ef70 	.word	0x0811ef70

0810ae14 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 810ae14:	b580      	push	{r7, lr}
 810ae16:	b082      	sub	sp, #8
 810ae18:	af00      	add	r7, sp, #0
 810ae1a:	6078      	str	r0, [r7, #4]
 810ae1c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 810ae1e:	4a05      	ldr	r2, [pc, #20]	@ (810ae34 <etharp_request+0x20>)
 810ae20:	6839      	ldr	r1, [r7, #0]
 810ae22:	6878      	ldr	r0, [r7, #4]
 810ae24:	f7ff ffd4 	bl	810add0 <etharp_request_dst>
 810ae28:	4603      	mov	r3, r0
}
 810ae2a:	4618      	mov	r0, r3
 810ae2c:	3708      	adds	r7, #8
 810ae2e:	46bd      	mov	sp, r7
 810ae30:	bd80      	pop	{r7, pc}
 810ae32:	bf00      	nop
 810ae34:	0811ef68 	.word	0x0811ef68

0810ae38 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 810ae38:	b580      	push	{r7, lr}
 810ae3a:	b086      	sub	sp, #24
 810ae3c:	af00      	add	r7, sp, #0
 810ae3e:	6078      	str	r0, [r7, #4]
 810ae40:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 810ae42:	230e      	movs	r3, #14
 810ae44:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 810ae46:	687b      	ldr	r3, [r7, #4]
 810ae48:	895b      	ldrh	r3, [r3, #10]
 810ae4a:	2b0e      	cmp	r3, #14
 810ae4c:	d96e      	bls.n	810af2c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 810ae4e:	687b      	ldr	r3, [r7, #4]
 810ae50:	7bdb      	ldrb	r3, [r3, #15]
 810ae52:	2b00      	cmp	r3, #0
 810ae54:	d106      	bne.n	810ae64 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 810ae56:	683b      	ldr	r3, [r7, #0]
 810ae58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810ae5c:	3301      	adds	r3, #1
 810ae5e:	b2da      	uxtb	r2, r3
 810ae60:	687b      	ldr	r3, [r7, #4]
 810ae62:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 810ae64:	687b      	ldr	r3, [r7, #4]
 810ae66:	685b      	ldr	r3, [r3, #4]
 810ae68:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 810ae6a:	693b      	ldr	r3, [r7, #16]
 810ae6c:	7b1a      	ldrb	r2, [r3, #12]
 810ae6e:	7b5b      	ldrb	r3, [r3, #13]
 810ae70:	021b      	lsls	r3, r3, #8
 810ae72:	4313      	orrs	r3, r2
 810ae74:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 810ae76:	693b      	ldr	r3, [r7, #16]
 810ae78:	781b      	ldrb	r3, [r3, #0]
 810ae7a:	f003 0301 	and.w	r3, r3, #1
 810ae7e:	2b00      	cmp	r3, #0
 810ae80:	d023      	beq.n	810aeca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 810ae82:	693b      	ldr	r3, [r7, #16]
 810ae84:	781b      	ldrb	r3, [r3, #0]
 810ae86:	2b01      	cmp	r3, #1
 810ae88:	d10f      	bne.n	810aeaa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 810ae8a:	693b      	ldr	r3, [r7, #16]
 810ae8c:	785b      	ldrb	r3, [r3, #1]
 810ae8e:	2b00      	cmp	r3, #0
 810ae90:	d11b      	bne.n	810aeca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 810ae92:	693b      	ldr	r3, [r7, #16]
 810ae94:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 810ae96:	2b5e      	cmp	r3, #94	@ 0x5e
 810ae98:	d117      	bne.n	810aeca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 810ae9a:	687b      	ldr	r3, [r7, #4]
 810ae9c:	7b5b      	ldrb	r3, [r3, #13]
 810ae9e:	f043 0310 	orr.w	r3, r3, #16
 810aea2:	b2da      	uxtb	r2, r3
 810aea4:	687b      	ldr	r3, [r7, #4]
 810aea6:	735a      	strb	r2, [r3, #13]
 810aea8:	e00f      	b.n	810aeca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 810aeaa:	693b      	ldr	r3, [r7, #16]
 810aeac:	2206      	movs	r2, #6
 810aeae:	4928      	ldr	r1, [pc, #160]	@ (810af50 <ethernet_input+0x118>)
 810aeb0:	4618      	mov	r0, r3
 810aeb2:	f00c fc61 	bl	8117778 <memcmp>
 810aeb6:	4603      	mov	r3, r0
 810aeb8:	2b00      	cmp	r3, #0
 810aeba:	d106      	bne.n	810aeca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 810aebc:	687b      	ldr	r3, [r7, #4]
 810aebe:	7b5b      	ldrb	r3, [r3, #13]
 810aec0:	f043 0308 	orr.w	r3, r3, #8
 810aec4:	b2da      	uxtb	r2, r3
 810aec6:	687b      	ldr	r3, [r7, #4]
 810aec8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 810aeca:	89fb      	ldrh	r3, [r7, #14]
 810aecc:	2b08      	cmp	r3, #8
 810aece:	d003      	beq.n	810aed8 <ethernet_input+0xa0>
 810aed0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 810aed4:	d014      	beq.n	810af00 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 810aed6:	e032      	b.n	810af3e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 810aed8:	683b      	ldr	r3, [r7, #0]
 810aeda:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810aede:	f003 0308 	and.w	r3, r3, #8
 810aee2:	2b00      	cmp	r3, #0
 810aee4:	d024      	beq.n	810af30 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 810aee6:	8afb      	ldrh	r3, [r7, #22]
 810aee8:	4619      	mov	r1, r3
 810aeea:	6878      	ldr	r0, [r7, #4]
 810aeec:	f002 fea6 	bl	810dc3c <pbuf_remove_header>
 810aef0:	4603      	mov	r3, r0
 810aef2:	2b00      	cmp	r3, #0
 810aef4:	d11e      	bne.n	810af34 <ethernet_input+0xfc>
        ip4_input(p, netif);
 810aef6:	6839      	ldr	r1, [r7, #0]
 810aef8:	6878      	ldr	r0, [r7, #4]
 810aefa:	f000 fb93 	bl	810b624 <ip4_input>
      break;
 810aefe:	e013      	b.n	810af28 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 810af00:	683b      	ldr	r3, [r7, #0]
 810af02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810af06:	f003 0308 	and.w	r3, r3, #8
 810af0a:	2b00      	cmp	r3, #0
 810af0c:	d014      	beq.n	810af38 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 810af0e:	8afb      	ldrh	r3, [r7, #22]
 810af10:	4619      	mov	r1, r3
 810af12:	6878      	ldr	r0, [r7, #4]
 810af14:	f002 fe92 	bl	810dc3c <pbuf_remove_header>
 810af18:	4603      	mov	r3, r0
 810af1a:	2b00      	cmp	r3, #0
 810af1c:	d10e      	bne.n	810af3c <ethernet_input+0x104>
        etharp_input(p, netif);
 810af1e:	6839      	ldr	r1, [r7, #0]
 810af20:	6878      	ldr	r0, [r7, #4]
 810af22:	f7ff fb65 	bl	810a5f0 <etharp_input>
      break;
 810af26:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 810af28:	2300      	movs	r3, #0
 810af2a:	e00c      	b.n	810af46 <ethernet_input+0x10e>
    goto free_and_return;
 810af2c:	bf00      	nop
 810af2e:	e006      	b.n	810af3e <ethernet_input+0x106>
        goto free_and_return;
 810af30:	bf00      	nop
 810af32:	e004      	b.n	810af3e <ethernet_input+0x106>
        goto free_and_return;
 810af34:	bf00      	nop
 810af36:	e002      	b.n	810af3e <ethernet_input+0x106>
        goto free_and_return;
 810af38:	bf00      	nop
 810af3a:	e000      	b.n	810af3e <ethernet_input+0x106>
        goto free_and_return;
 810af3c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 810af3e:	6878      	ldr	r0, [r7, #4]
 810af40:	f002 ff02 	bl	810dd48 <pbuf_free>
  return ERR_OK;
 810af44:	2300      	movs	r3, #0
}
 810af46:	4618      	mov	r0, r3
 810af48:	3718      	adds	r7, #24
 810af4a:	46bd      	mov	sp, r7
 810af4c:	bd80      	pop	{r7, pc}
 810af4e:	bf00      	nop
 810af50:	0811ef68 	.word	0x0811ef68

0810af54 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 810af54:	b580      	push	{r7, lr}
 810af56:	b086      	sub	sp, #24
 810af58:	af00      	add	r7, sp, #0
 810af5a:	60f8      	str	r0, [r7, #12]
 810af5c:	60b9      	str	r1, [r7, #8]
 810af5e:	607a      	str	r2, [r7, #4]
 810af60:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 810af62:	8c3b      	ldrh	r3, [r7, #32]
 810af64:	4618      	mov	r0, r3
 810af66:	f7fe ffeb 	bl	8109f40 <lwip_htons>
 810af6a:	4603      	mov	r3, r0
 810af6c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 810af6e:	210e      	movs	r1, #14
 810af70:	68b8      	ldr	r0, [r7, #8]
 810af72:	f002 fe53 	bl	810dc1c <pbuf_add_header>
 810af76:	4603      	mov	r3, r0
 810af78:	2b00      	cmp	r3, #0
 810af7a:	d125      	bne.n	810afc8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 810af7c:	68bb      	ldr	r3, [r7, #8]
 810af7e:	685b      	ldr	r3, [r3, #4]
 810af80:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 810af82:	693b      	ldr	r3, [r7, #16]
 810af84:	8afa      	ldrh	r2, [r7, #22]
 810af86:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 810af88:	693b      	ldr	r3, [r7, #16]
 810af8a:	2206      	movs	r2, #6
 810af8c:	6839      	ldr	r1, [r7, #0]
 810af8e:	4618      	mov	r0, r3
 810af90:	f00c fcd1 	bl	8117936 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 810af94:	693b      	ldr	r3, [r7, #16]
 810af96:	3306      	adds	r3, #6
 810af98:	2206      	movs	r2, #6
 810af9a:	6879      	ldr	r1, [r7, #4]
 810af9c:	4618      	mov	r0, r3
 810af9e:	f00c fcca 	bl	8117936 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 810afa2:	68fb      	ldr	r3, [r7, #12]
 810afa4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810afa8:	2b06      	cmp	r3, #6
 810afaa:	d006      	beq.n	810afba <ethernet_output+0x66>
 810afac:	4b0a      	ldr	r3, [pc, #40]	@ (810afd8 <ethernet_output+0x84>)
 810afae:	f44f 7299 	mov.w	r2, #306	@ 0x132
 810afb2:	490a      	ldr	r1, [pc, #40]	@ (810afdc <ethernet_output+0x88>)
 810afb4:	480a      	ldr	r0, [pc, #40]	@ (810afe0 <ethernet_output+0x8c>)
 810afb6:	f00c fa3f 	bl	8117438 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 810afba:	68fb      	ldr	r3, [r7, #12]
 810afbc:	699b      	ldr	r3, [r3, #24]
 810afbe:	68b9      	ldr	r1, [r7, #8]
 810afc0:	68f8      	ldr	r0, [r7, #12]
 810afc2:	4798      	blx	r3
 810afc4:	4603      	mov	r3, r0
 810afc6:	e002      	b.n	810afce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 810afc8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 810afca:	f06f 0301 	mvn.w	r3, #1
}
 810afce:	4618      	mov	r0, r3
 810afd0:	3718      	adds	r7, #24
 810afd2:	46bd      	mov	sp, r7
 810afd4:	bd80      	pop	{r7, pc}
 810afd6:	bf00      	nop
 810afd8:	0811c5a8 	.word	0x0811c5a8
 810afdc:	0811c60c 	.word	0x0811c60c
 810afe0:	0811c640 	.word	0x0811c640

0810afe4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 810afe4:	b580      	push	{r7, lr}
 810afe6:	b08e      	sub	sp, #56	@ 0x38
 810afe8:	af04      	add	r7, sp, #16
 810afea:	6078      	str	r0, [r7, #4]
 810afec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 810afee:	4b87      	ldr	r3, [pc, #540]	@ (810b20c <icmp_input+0x228>)
 810aff0:	689b      	ldr	r3, [r3, #8]
 810aff2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 810aff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aff6:	781b      	ldrb	r3, [r3, #0]
 810aff8:	f003 030f 	and.w	r3, r3, #15
 810affc:	b2db      	uxtb	r3, r3
 810affe:	009b      	lsls	r3, r3, #2
 810b000:	b2db      	uxtb	r3, r3
 810b002:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 810b004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810b006:	2b13      	cmp	r3, #19
 810b008:	f240 80e8 	bls.w	810b1dc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 810b00c:	687b      	ldr	r3, [r7, #4]
 810b00e:	895b      	ldrh	r3, [r3, #10]
 810b010:	2b03      	cmp	r3, #3
 810b012:	f240 80e5 	bls.w	810b1e0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 810b016:	687b      	ldr	r3, [r7, #4]
 810b018:	685b      	ldr	r3, [r3, #4]
 810b01a:	781b      	ldrb	r3, [r3, #0]
 810b01c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 810b020:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810b024:	2b00      	cmp	r3, #0
 810b026:	f000 80d2 	beq.w	810b1ce <icmp_input+0x1ea>
 810b02a:	2b08      	cmp	r3, #8
 810b02c:	f040 80d2 	bne.w	810b1d4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 810b030:	4b77      	ldr	r3, [pc, #476]	@ (810b210 <icmp_input+0x22c>)
 810b032:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810b034:	4b75      	ldr	r3, [pc, #468]	@ (810b20c <icmp_input+0x228>)
 810b036:	695b      	ldr	r3, [r3, #20]
 810b038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810b03c:	2be0      	cmp	r3, #224	@ 0xe0
 810b03e:	f000 80d6 	beq.w	810b1ee <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 810b042:	4b72      	ldr	r3, [pc, #456]	@ (810b20c <icmp_input+0x228>)
 810b044:	695b      	ldr	r3, [r3, #20]
 810b046:	4a71      	ldr	r2, [pc, #452]	@ (810b20c <icmp_input+0x228>)
 810b048:	6812      	ldr	r2, [r2, #0]
 810b04a:	4611      	mov	r1, r2
 810b04c:	4618      	mov	r0, r3
 810b04e:	f000 fce5 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 810b052:	4603      	mov	r3, r0
 810b054:	2b00      	cmp	r3, #0
 810b056:	f040 80cc 	bne.w	810b1f2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 810b05a:	687b      	ldr	r3, [r7, #4]
 810b05c:	891b      	ldrh	r3, [r3, #8]
 810b05e:	2b07      	cmp	r3, #7
 810b060:	f240 80c0 	bls.w	810b1e4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 810b064:	6878      	ldr	r0, [r7, #4]
 810b066:	f000 f9e0 	bl	810b42a <inet_chksum_pbuf>
 810b06a:	4603      	mov	r3, r0
 810b06c:	2b00      	cmp	r3, #0
 810b06e:	d003      	beq.n	810b078 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 810b070:	6878      	ldr	r0, [r7, #4]
 810b072:	f002 fe69 	bl	810dd48 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 810b076:	e0c5      	b.n	810b204 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 810b078:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810b07a:	330e      	adds	r3, #14
 810b07c:	4619      	mov	r1, r3
 810b07e:	6878      	ldr	r0, [r7, #4]
 810b080:	f002 fdcc 	bl	810dc1c <pbuf_add_header>
 810b084:	4603      	mov	r3, r0
 810b086:	2b00      	cmp	r3, #0
 810b088:	d04b      	beq.n	810b122 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 810b08a:	687b      	ldr	r3, [r7, #4]
 810b08c:	891a      	ldrh	r2, [r3, #8]
 810b08e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810b090:	4413      	add	r3, r2
 810b092:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 810b094:	687b      	ldr	r3, [r7, #4]
 810b096:	891b      	ldrh	r3, [r3, #8]
 810b098:	8b7a      	ldrh	r2, [r7, #26]
 810b09a:	429a      	cmp	r2, r3
 810b09c:	f0c0 80ab 	bcc.w	810b1f6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 810b0a0:	8b7b      	ldrh	r3, [r7, #26]
 810b0a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810b0a6:	4619      	mov	r1, r3
 810b0a8:	200e      	movs	r0, #14
 810b0aa:	f002 fb69 	bl	810d780 <pbuf_alloc>
 810b0ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 810b0b0:	697b      	ldr	r3, [r7, #20]
 810b0b2:	2b00      	cmp	r3, #0
 810b0b4:	f000 80a1 	beq.w	810b1fa <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 810b0b8:	697b      	ldr	r3, [r7, #20]
 810b0ba:	895b      	ldrh	r3, [r3, #10]
 810b0bc:	461a      	mov	r2, r3
 810b0be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810b0c0:	3308      	adds	r3, #8
 810b0c2:	429a      	cmp	r2, r3
 810b0c4:	d203      	bcs.n	810b0ce <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 810b0c6:	6978      	ldr	r0, [r7, #20]
 810b0c8:	f002 fe3e 	bl	810dd48 <pbuf_free>
          goto icmperr;
 810b0cc:	e096      	b.n	810b1fc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 810b0ce:	697b      	ldr	r3, [r7, #20]
 810b0d0:	685b      	ldr	r3, [r3, #4]
 810b0d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 810b0d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810b0d6:	4618      	mov	r0, r3
 810b0d8:	f00c fc2d 	bl	8117936 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 810b0dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810b0de:	4619      	mov	r1, r3
 810b0e0:	6978      	ldr	r0, [r7, #20]
 810b0e2:	f002 fdab 	bl	810dc3c <pbuf_remove_header>
 810b0e6:	4603      	mov	r3, r0
 810b0e8:	2b00      	cmp	r3, #0
 810b0ea:	d009      	beq.n	810b100 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 810b0ec:	4b49      	ldr	r3, [pc, #292]	@ (810b214 <icmp_input+0x230>)
 810b0ee:	22b6      	movs	r2, #182	@ 0xb6
 810b0f0:	4949      	ldr	r1, [pc, #292]	@ (810b218 <icmp_input+0x234>)
 810b0f2:	484a      	ldr	r0, [pc, #296]	@ (810b21c <icmp_input+0x238>)
 810b0f4:	f00c f9a0 	bl	8117438 <iprintf>
          pbuf_free(r);
 810b0f8:	6978      	ldr	r0, [r7, #20]
 810b0fa:	f002 fe25 	bl	810dd48 <pbuf_free>
          goto icmperr;
 810b0fe:	e07d      	b.n	810b1fc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 810b100:	6879      	ldr	r1, [r7, #4]
 810b102:	6978      	ldr	r0, [r7, #20]
 810b104:	f002 ff38 	bl	810df78 <pbuf_copy>
 810b108:	4603      	mov	r3, r0
 810b10a:	2b00      	cmp	r3, #0
 810b10c:	d003      	beq.n	810b116 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 810b10e:	6978      	ldr	r0, [r7, #20]
 810b110:	f002 fe1a 	bl	810dd48 <pbuf_free>
          goto icmperr;
 810b114:	e072      	b.n	810b1fc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 810b116:	6878      	ldr	r0, [r7, #4]
 810b118:	f002 fe16 	bl	810dd48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 810b11c:	697b      	ldr	r3, [r7, #20]
 810b11e:	607b      	str	r3, [r7, #4]
 810b120:	e00f      	b.n	810b142 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 810b122:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810b124:	330e      	adds	r3, #14
 810b126:	4619      	mov	r1, r3
 810b128:	6878      	ldr	r0, [r7, #4]
 810b12a:	f002 fd87 	bl	810dc3c <pbuf_remove_header>
 810b12e:	4603      	mov	r3, r0
 810b130:	2b00      	cmp	r3, #0
 810b132:	d006      	beq.n	810b142 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 810b134:	4b37      	ldr	r3, [pc, #220]	@ (810b214 <icmp_input+0x230>)
 810b136:	22c7      	movs	r2, #199	@ 0xc7
 810b138:	4939      	ldr	r1, [pc, #228]	@ (810b220 <icmp_input+0x23c>)
 810b13a:	4838      	ldr	r0, [pc, #224]	@ (810b21c <icmp_input+0x238>)
 810b13c:	f00c f97c 	bl	8117438 <iprintf>
          goto icmperr;
 810b140:	e05c      	b.n	810b1fc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 810b142:	687b      	ldr	r3, [r7, #4]
 810b144:	685b      	ldr	r3, [r3, #4]
 810b146:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 810b148:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810b14a:	4619      	mov	r1, r3
 810b14c:	6878      	ldr	r0, [r7, #4]
 810b14e:	f002 fd65 	bl	810dc1c <pbuf_add_header>
 810b152:	4603      	mov	r3, r0
 810b154:	2b00      	cmp	r3, #0
 810b156:	d13c      	bne.n	810b1d2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 810b158:	687b      	ldr	r3, [r7, #4]
 810b15a:	685b      	ldr	r3, [r3, #4]
 810b15c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 810b15e:	69fb      	ldr	r3, [r7, #28]
 810b160:	681a      	ldr	r2, [r3, #0]
 810b162:	68fb      	ldr	r3, [r7, #12]
 810b164:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 810b166:	4b29      	ldr	r3, [pc, #164]	@ (810b20c <icmp_input+0x228>)
 810b168:	691a      	ldr	r2, [r3, #16]
 810b16a:	68fb      	ldr	r3, [r7, #12]
 810b16c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 810b16e:	693b      	ldr	r3, [r7, #16]
 810b170:	2200      	movs	r2, #0
 810b172:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 810b174:	693b      	ldr	r3, [r7, #16]
 810b176:	885b      	ldrh	r3, [r3, #2]
 810b178:	b29b      	uxth	r3, r3
 810b17a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 810b17e:	4293      	cmp	r3, r2
 810b180:	d907      	bls.n	810b192 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 810b182:	693b      	ldr	r3, [r7, #16]
 810b184:	885b      	ldrh	r3, [r3, #2]
 810b186:	b29b      	uxth	r3, r3
 810b188:	3309      	adds	r3, #9
 810b18a:	b29a      	uxth	r2, r3
 810b18c:	693b      	ldr	r3, [r7, #16]
 810b18e:	805a      	strh	r2, [r3, #2]
 810b190:	e006      	b.n	810b1a0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 810b192:	693b      	ldr	r3, [r7, #16]
 810b194:	885b      	ldrh	r3, [r3, #2]
 810b196:	b29b      	uxth	r3, r3
 810b198:	3308      	adds	r3, #8
 810b19a:	b29a      	uxth	r2, r3
 810b19c:	693b      	ldr	r3, [r7, #16]
 810b19e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 810b1a0:	68fb      	ldr	r3, [r7, #12]
 810b1a2:	22ff      	movs	r2, #255	@ 0xff
 810b1a4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 810b1a6:	68fb      	ldr	r3, [r7, #12]
 810b1a8:	2200      	movs	r2, #0
 810b1aa:	729a      	strb	r2, [r3, #10]
 810b1ac:	2200      	movs	r2, #0
 810b1ae:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 810b1b0:	683b      	ldr	r3, [r7, #0]
 810b1b2:	9302      	str	r3, [sp, #8]
 810b1b4:	2301      	movs	r3, #1
 810b1b6:	9301      	str	r3, [sp, #4]
 810b1b8:	2300      	movs	r3, #0
 810b1ba:	9300      	str	r3, [sp, #0]
 810b1bc:	23ff      	movs	r3, #255	@ 0xff
 810b1be:	2200      	movs	r2, #0
 810b1c0:	69f9      	ldr	r1, [r7, #28]
 810b1c2:	6878      	ldr	r0, [r7, #4]
 810b1c4:	f000 fb52 	bl	810b86c <ip4_output_if>
 810b1c8:	4603      	mov	r3, r0
 810b1ca:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 810b1cc:	e001      	b.n	810b1d2 <icmp_input+0x1ee>
      break;
 810b1ce:	bf00      	nop
 810b1d0:	e000      	b.n	810b1d4 <icmp_input+0x1f0>
      break;
 810b1d2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 810b1d4:	6878      	ldr	r0, [r7, #4]
 810b1d6:	f002 fdb7 	bl	810dd48 <pbuf_free>
  return;
 810b1da:	e013      	b.n	810b204 <icmp_input+0x220>
    goto lenerr;
 810b1dc:	bf00      	nop
 810b1de:	e002      	b.n	810b1e6 <icmp_input+0x202>
    goto lenerr;
 810b1e0:	bf00      	nop
 810b1e2:	e000      	b.n	810b1e6 <icmp_input+0x202>
        goto lenerr;
 810b1e4:	bf00      	nop
lenerr:
  pbuf_free(p);
 810b1e6:	6878      	ldr	r0, [r7, #4]
 810b1e8:	f002 fdae 	bl	810dd48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 810b1ec:	e00a      	b.n	810b204 <icmp_input+0x220>
        goto icmperr;
 810b1ee:	bf00      	nop
 810b1f0:	e004      	b.n	810b1fc <icmp_input+0x218>
        goto icmperr;
 810b1f2:	bf00      	nop
 810b1f4:	e002      	b.n	810b1fc <icmp_input+0x218>
          goto icmperr;
 810b1f6:	bf00      	nop
 810b1f8:	e000      	b.n	810b1fc <icmp_input+0x218>
          goto icmperr;
 810b1fa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 810b1fc:	6878      	ldr	r0, [r7, #4]
 810b1fe:	f002 fda3 	bl	810dd48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 810b202:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 810b204:	3728      	adds	r7, #40	@ 0x28
 810b206:	46bd      	mov	sp, r7
 810b208:	bd80      	pop	{r7, pc}
 810b20a:	bf00      	nop
 810b20c:	100145b0 	.word	0x100145b0
 810b210:	100145c4 	.word	0x100145c4
 810b214:	0811c668 	.word	0x0811c668
 810b218:	0811c6cc 	.word	0x0811c6cc
 810b21c:	0811c704 	.word	0x0811c704
 810b220:	0811c72c 	.word	0x0811c72c

0810b224 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 810b224:	b580      	push	{r7, lr}
 810b226:	b082      	sub	sp, #8
 810b228:	af00      	add	r7, sp, #0
 810b22a:	6078      	str	r0, [r7, #4]
 810b22c:	460b      	mov	r3, r1
 810b22e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 810b230:	78fb      	ldrb	r3, [r7, #3]
 810b232:	461a      	mov	r2, r3
 810b234:	2103      	movs	r1, #3
 810b236:	6878      	ldr	r0, [r7, #4]
 810b238:	f000 f814 	bl	810b264 <icmp_send_response>
}
 810b23c:	bf00      	nop
 810b23e:	3708      	adds	r7, #8
 810b240:	46bd      	mov	sp, r7
 810b242:	bd80      	pop	{r7, pc}

0810b244 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 810b244:	b580      	push	{r7, lr}
 810b246:	b082      	sub	sp, #8
 810b248:	af00      	add	r7, sp, #0
 810b24a:	6078      	str	r0, [r7, #4]
 810b24c:	460b      	mov	r3, r1
 810b24e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 810b250:	78fb      	ldrb	r3, [r7, #3]
 810b252:	461a      	mov	r2, r3
 810b254:	210b      	movs	r1, #11
 810b256:	6878      	ldr	r0, [r7, #4]
 810b258:	f000 f804 	bl	810b264 <icmp_send_response>
}
 810b25c:	bf00      	nop
 810b25e:	3708      	adds	r7, #8
 810b260:	46bd      	mov	sp, r7
 810b262:	bd80      	pop	{r7, pc}

0810b264 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 810b264:	b580      	push	{r7, lr}
 810b266:	b08c      	sub	sp, #48	@ 0x30
 810b268:	af04      	add	r7, sp, #16
 810b26a:	6078      	str	r0, [r7, #4]
 810b26c:	460b      	mov	r3, r1
 810b26e:	70fb      	strb	r3, [r7, #3]
 810b270:	4613      	mov	r3, r2
 810b272:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 810b274:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810b278:	2124      	movs	r1, #36	@ 0x24
 810b27a:	2022      	movs	r0, #34	@ 0x22
 810b27c:	f002 fa80 	bl	810d780 <pbuf_alloc>
 810b280:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 810b282:	69fb      	ldr	r3, [r7, #28]
 810b284:	2b00      	cmp	r3, #0
 810b286:	d056      	beq.n	810b336 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 810b288:	69fb      	ldr	r3, [r7, #28]
 810b28a:	895b      	ldrh	r3, [r3, #10]
 810b28c:	2b23      	cmp	r3, #35	@ 0x23
 810b28e:	d806      	bhi.n	810b29e <icmp_send_response+0x3a>
 810b290:	4b2b      	ldr	r3, [pc, #172]	@ (810b340 <icmp_send_response+0xdc>)
 810b292:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 810b296:	492b      	ldr	r1, [pc, #172]	@ (810b344 <icmp_send_response+0xe0>)
 810b298:	482b      	ldr	r0, [pc, #172]	@ (810b348 <icmp_send_response+0xe4>)
 810b29a:	f00c f8cd 	bl	8117438 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 810b29e:	687b      	ldr	r3, [r7, #4]
 810b2a0:	685b      	ldr	r3, [r3, #4]
 810b2a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 810b2a4:	69fb      	ldr	r3, [r7, #28]
 810b2a6:	685b      	ldr	r3, [r3, #4]
 810b2a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 810b2aa:	697b      	ldr	r3, [r7, #20]
 810b2ac:	78fa      	ldrb	r2, [r7, #3]
 810b2ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 810b2b0:	697b      	ldr	r3, [r7, #20]
 810b2b2:	78ba      	ldrb	r2, [r7, #2]
 810b2b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 810b2b6:	697b      	ldr	r3, [r7, #20]
 810b2b8:	2200      	movs	r2, #0
 810b2ba:	711a      	strb	r2, [r3, #4]
 810b2bc:	2200      	movs	r2, #0
 810b2be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 810b2c0:	697b      	ldr	r3, [r7, #20]
 810b2c2:	2200      	movs	r2, #0
 810b2c4:	719a      	strb	r2, [r3, #6]
 810b2c6:	2200      	movs	r2, #0
 810b2c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 810b2ca:	69fb      	ldr	r3, [r7, #28]
 810b2cc:	685b      	ldr	r3, [r3, #4]
 810b2ce:	f103 0008 	add.w	r0, r3, #8
 810b2d2:	687b      	ldr	r3, [r7, #4]
 810b2d4:	685b      	ldr	r3, [r3, #4]
 810b2d6:	221c      	movs	r2, #28
 810b2d8:	4619      	mov	r1, r3
 810b2da:	f00c fb2c 	bl	8117936 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 810b2de:	69bb      	ldr	r3, [r7, #24]
 810b2e0:	68db      	ldr	r3, [r3, #12]
 810b2e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 810b2e4:	f107 030c 	add.w	r3, r7, #12
 810b2e8:	4618      	mov	r0, r3
 810b2ea:	f000 f901 	bl	810b4f0 <ip4_route>
 810b2ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 810b2f0:	693b      	ldr	r3, [r7, #16]
 810b2f2:	2b00      	cmp	r3, #0
 810b2f4:	d01b      	beq.n	810b32e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 810b2f6:	697b      	ldr	r3, [r7, #20]
 810b2f8:	2200      	movs	r2, #0
 810b2fa:	709a      	strb	r2, [r3, #2]
 810b2fc:	2200      	movs	r2, #0
 810b2fe:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 810b300:	69fb      	ldr	r3, [r7, #28]
 810b302:	895b      	ldrh	r3, [r3, #10]
 810b304:	4619      	mov	r1, r3
 810b306:	6978      	ldr	r0, [r7, #20]
 810b308:	f000 f87d 	bl	810b406 <inet_chksum>
 810b30c:	4603      	mov	r3, r0
 810b30e:	461a      	mov	r2, r3
 810b310:	697b      	ldr	r3, [r7, #20]
 810b312:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 810b314:	f107 020c 	add.w	r2, r7, #12
 810b318:	693b      	ldr	r3, [r7, #16]
 810b31a:	9302      	str	r3, [sp, #8]
 810b31c:	2301      	movs	r3, #1
 810b31e:	9301      	str	r3, [sp, #4]
 810b320:	2300      	movs	r3, #0
 810b322:	9300      	str	r3, [sp, #0]
 810b324:	23ff      	movs	r3, #255	@ 0xff
 810b326:	2100      	movs	r1, #0
 810b328:	69f8      	ldr	r0, [r7, #28]
 810b32a:	f000 fa9f 	bl	810b86c <ip4_output_if>
  }
  pbuf_free(q);
 810b32e:	69f8      	ldr	r0, [r7, #28]
 810b330:	f002 fd0a 	bl	810dd48 <pbuf_free>
 810b334:	e000      	b.n	810b338 <icmp_send_response+0xd4>
    return;
 810b336:	bf00      	nop
}
 810b338:	3720      	adds	r7, #32
 810b33a:	46bd      	mov	sp, r7
 810b33c:	bd80      	pop	{r7, pc}
 810b33e:	bf00      	nop
 810b340:	0811c668 	.word	0x0811c668
 810b344:	0811c760 	.word	0x0811c760
 810b348:	0811c704 	.word	0x0811c704

0810b34c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 810b34c:	b480      	push	{r7}
 810b34e:	b089      	sub	sp, #36	@ 0x24
 810b350:	af00      	add	r7, sp, #0
 810b352:	6078      	str	r0, [r7, #4]
 810b354:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 810b356:	687b      	ldr	r3, [r7, #4]
 810b358:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 810b35a:	2300      	movs	r3, #0
 810b35c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 810b35e:	2300      	movs	r3, #0
 810b360:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 810b362:	69fb      	ldr	r3, [r7, #28]
 810b364:	f003 0301 	and.w	r3, r3, #1
 810b368:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 810b36a:	693b      	ldr	r3, [r7, #16]
 810b36c:	2b00      	cmp	r3, #0
 810b36e:	d00d      	beq.n	810b38c <lwip_standard_chksum+0x40>
 810b370:	683b      	ldr	r3, [r7, #0]
 810b372:	2b00      	cmp	r3, #0
 810b374:	dd0a      	ble.n	810b38c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 810b376:	69fa      	ldr	r2, [r7, #28]
 810b378:	1c53      	adds	r3, r2, #1
 810b37a:	61fb      	str	r3, [r7, #28]
 810b37c:	f107 030e 	add.w	r3, r7, #14
 810b380:	3301      	adds	r3, #1
 810b382:	7812      	ldrb	r2, [r2, #0]
 810b384:	701a      	strb	r2, [r3, #0]
    len--;
 810b386:	683b      	ldr	r3, [r7, #0]
 810b388:	3b01      	subs	r3, #1
 810b38a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 810b38c:	69fb      	ldr	r3, [r7, #28]
 810b38e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 810b390:	e00a      	b.n	810b3a8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 810b392:	69bb      	ldr	r3, [r7, #24]
 810b394:	1c9a      	adds	r2, r3, #2
 810b396:	61ba      	str	r2, [r7, #24]
 810b398:	881b      	ldrh	r3, [r3, #0]
 810b39a:	461a      	mov	r2, r3
 810b39c:	697b      	ldr	r3, [r7, #20]
 810b39e:	4413      	add	r3, r2
 810b3a0:	617b      	str	r3, [r7, #20]
    len -= 2;
 810b3a2:	683b      	ldr	r3, [r7, #0]
 810b3a4:	3b02      	subs	r3, #2
 810b3a6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 810b3a8:	683b      	ldr	r3, [r7, #0]
 810b3aa:	2b01      	cmp	r3, #1
 810b3ac:	dcf1      	bgt.n	810b392 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 810b3ae:	683b      	ldr	r3, [r7, #0]
 810b3b0:	2b00      	cmp	r3, #0
 810b3b2:	dd04      	ble.n	810b3be <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 810b3b4:	f107 030e 	add.w	r3, r7, #14
 810b3b8:	69ba      	ldr	r2, [r7, #24]
 810b3ba:	7812      	ldrb	r2, [r2, #0]
 810b3bc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 810b3be:	89fb      	ldrh	r3, [r7, #14]
 810b3c0:	461a      	mov	r2, r3
 810b3c2:	697b      	ldr	r3, [r7, #20]
 810b3c4:	4413      	add	r3, r2
 810b3c6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 810b3c8:	697b      	ldr	r3, [r7, #20]
 810b3ca:	0c1a      	lsrs	r2, r3, #16
 810b3cc:	697b      	ldr	r3, [r7, #20]
 810b3ce:	b29b      	uxth	r3, r3
 810b3d0:	4413      	add	r3, r2
 810b3d2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 810b3d4:	697b      	ldr	r3, [r7, #20]
 810b3d6:	0c1a      	lsrs	r2, r3, #16
 810b3d8:	697b      	ldr	r3, [r7, #20]
 810b3da:	b29b      	uxth	r3, r3
 810b3dc:	4413      	add	r3, r2
 810b3de:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 810b3e0:	693b      	ldr	r3, [r7, #16]
 810b3e2:	2b00      	cmp	r3, #0
 810b3e4:	d007      	beq.n	810b3f6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 810b3e6:	697b      	ldr	r3, [r7, #20]
 810b3e8:	021b      	lsls	r3, r3, #8
 810b3ea:	b29a      	uxth	r2, r3
 810b3ec:	697b      	ldr	r3, [r7, #20]
 810b3ee:	0a1b      	lsrs	r3, r3, #8
 810b3f0:	b2db      	uxtb	r3, r3
 810b3f2:	4313      	orrs	r3, r2
 810b3f4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 810b3f6:	697b      	ldr	r3, [r7, #20]
 810b3f8:	b29b      	uxth	r3, r3
}
 810b3fa:	4618      	mov	r0, r3
 810b3fc:	3724      	adds	r7, #36	@ 0x24
 810b3fe:	46bd      	mov	sp, r7
 810b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b404:	4770      	bx	lr

0810b406 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 810b406:	b580      	push	{r7, lr}
 810b408:	b082      	sub	sp, #8
 810b40a:	af00      	add	r7, sp, #0
 810b40c:	6078      	str	r0, [r7, #4]
 810b40e:	460b      	mov	r3, r1
 810b410:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 810b412:	887b      	ldrh	r3, [r7, #2]
 810b414:	4619      	mov	r1, r3
 810b416:	6878      	ldr	r0, [r7, #4]
 810b418:	f7ff ff98 	bl	810b34c <lwip_standard_chksum>
 810b41c:	4603      	mov	r3, r0
 810b41e:	43db      	mvns	r3, r3
 810b420:	b29b      	uxth	r3, r3
}
 810b422:	4618      	mov	r0, r3
 810b424:	3708      	adds	r7, #8
 810b426:	46bd      	mov	sp, r7
 810b428:	bd80      	pop	{r7, pc}

0810b42a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 810b42a:	b580      	push	{r7, lr}
 810b42c:	b086      	sub	sp, #24
 810b42e:	af00      	add	r7, sp, #0
 810b430:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 810b432:	2300      	movs	r3, #0
 810b434:	60fb      	str	r3, [r7, #12]

  acc = 0;
 810b436:	2300      	movs	r3, #0
 810b438:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 810b43a:	687b      	ldr	r3, [r7, #4]
 810b43c:	613b      	str	r3, [r7, #16]
 810b43e:	e02b      	b.n	810b498 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 810b440:	693b      	ldr	r3, [r7, #16]
 810b442:	685a      	ldr	r2, [r3, #4]
 810b444:	693b      	ldr	r3, [r7, #16]
 810b446:	895b      	ldrh	r3, [r3, #10]
 810b448:	4619      	mov	r1, r3
 810b44a:	4610      	mov	r0, r2
 810b44c:	f7ff ff7e 	bl	810b34c <lwip_standard_chksum>
 810b450:	4603      	mov	r3, r0
 810b452:	461a      	mov	r2, r3
 810b454:	697b      	ldr	r3, [r7, #20]
 810b456:	4413      	add	r3, r2
 810b458:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 810b45a:	697b      	ldr	r3, [r7, #20]
 810b45c:	0c1a      	lsrs	r2, r3, #16
 810b45e:	697b      	ldr	r3, [r7, #20]
 810b460:	b29b      	uxth	r3, r3
 810b462:	4413      	add	r3, r2
 810b464:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 810b466:	693b      	ldr	r3, [r7, #16]
 810b468:	895b      	ldrh	r3, [r3, #10]
 810b46a:	f003 0301 	and.w	r3, r3, #1
 810b46e:	b29b      	uxth	r3, r3
 810b470:	2b00      	cmp	r3, #0
 810b472:	d00e      	beq.n	810b492 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 810b474:	68fb      	ldr	r3, [r7, #12]
 810b476:	2b00      	cmp	r3, #0
 810b478:	bf0c      	ite	eq
 810b47a:	2301      	moveq	r3, #1
 810b47c:	2300      	movne	r3, #0
 810b47e:	b2db      	uxtb	r3, r3
 810b480:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 810b482:	697b      	ldr	r3, [r7, #20]
 810b484:	021b      	lsls	r3, r3, #8
 810b486:	b29a      	uxth	r2, r3
 810b488:	697b      	ldr	r3, [r7, #20]
 810b48a:	0a1b      	lsrs	r3, r3, #8
 810b48c:	b2db      	uxtb	r3, r3
 810b48e:	4313      	orrs	r3, r2
 810b490:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 810b492:	693b      	ldr	r3, [r7, #16]
 810b494:	681b      	ldr	r3, [r3, #0]
 810b496:	613b      	str	r3, [r7, #16]
 810b498:	693b      	ldr	r3, [r7, #16]
 810b49a:	2b00      	cmp	r3, #0
 810b49c:	d1d0      	bne.n	810b440 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 810b49e:	68fb      	ldr	r3, [r7, #12]
 810b4a0:	2b00      	cmp	r3, #0
 810b4a2:	d007      	beq.n	810b4b4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 810b4a4:	697b      	ldr	r3, [r7, #20]
 810b4a6:	021b      	lsls	r3, r3, #8
 810b4a8:	b29a      	uxth	r2, r3
 810b4aa:	697b      	ldr	r3, [r7, #20]
 810b4ac:	0a1b      	lsrs	r3, r3, #8
 810b4ae:	b2db      	uxtb	r3, r3
 810b4b0:	4313      	orrs	r3, r2
 810b4b2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 810b4b4:	697b      	ldr	r3, [r7, #20]
 810b4b6:	b29b      	uxth	r3, r3
 810b4b8:	43db      	mvns	r3, r3
 810b4ba:	b29b      	uxth	r3, r3
}
 810b4bc:	4618      	mov	r0, r3
 810b4be:	3718      	adds	r7, #24
 810b4c0:	46bd      	mov	sp, r7
 810b4c2:	bd80      	pop	{r7, pc}

0810b4c4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 810b4c4:	b580      	push	{r7, lr}
 810b4c6:	b082      	sub	sp, #8
 810b4c8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 810b4ca:	2300      	movs	r3, #0
 810b4cc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 810b4ce:	f001 f9eb 	bl	810c8a8 <mem_init>
  memp_init();
 810b4d2:	f001 fced 	bl	810ceb0 <memp_init>
  pbuf_init();
  netif_init();
 810b4d6:	f001 fdeb 	bl	810d0b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 810b4da:	f008 ff57 	bl	811438c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 810b4de:	f002 fec1 	bl	810e264 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 810b4e2:	f008 fec9 	bl	8114278 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 810b4e6:	bf00      	nop
 810b4e8:	3708      	adds	r7, #8
 810b4ea:	46bd      	mov	sp, r7
 810b4ec:	bd80      	pop	{r7, pc}
	...

0810b4f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 810b4f0:	b480      	push	{r7}
 810b4f2:	b085      	sub	sp, #20
 810b4f4:	af00      	add	r7, sp, #0
 810b4f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 810b4f8:	4b33      	ldr	r3, [pc, #204]	@ (810b5c8 <ip4_route+0xd8>)
 810b4fa:	681b      	ldr	r3, [r3, #0]
 810b4fc:	60fb      	str	r3, [r7, #12]
 810b4fe:	e036      	b.n	810b56e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810b500:	68fb      	ldr	r3, [r7, #12]
 810b502:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810b506:	f003 0301 	and.w	r3, r3, #1
 810b50a:	b2db      	uxtb	r3, r3
 810b50c:	2b00      	cmp	r3, #0
 810b50e:	d02b      	beq.n	810b568 <ip4_route+0x78>
 810b510:	68fb      	ldr	r3, [r7, #12]
 810b512:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810b516:	089b      	lsrs	r3, r3, #2
 810b518:	f003 0301 	and.w	r3, r3, #1
 810b51c:	b2db      	uxtb	r3, r3
 810b51e:	2b00      	cmp	r3, #0
 810b520:	d022      	beq.n	810b568 <ip4_route+0x78>
 810b522:	68fb      	ldr	r3, [r7, #12]
 810b524:	3304      	adds	r3, #4
 810b526:	681b      	ldr	r3, [r3, #0]
 810b528:	2b00      	cmp	r3, #0
 810b52a:	d01d      	beq.n	810b568 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 810b52c:	687b      	ldr	r3, [r7, #4]
 810b52e:	681a      	ldr	r2, [r3, #0]
 810b530:	68fb      	ldr	r3, [r7, #12]
 810b532:	3304      	adds	r3, #4
 810b534:	681b      	ldr	r3, [r3, #0]
 810b536:	405a      	eors	r2, r3
 810b538:	68fb      	ldr	r3, [r7, #12]
 810b53a:	3308      	adds	r3, #8
 810b53c:	681b      	ldr	r3, [r3, #0]
 810b53e:	4013      	ands	r3, r2
 810b540:	2b00      	cmp	r3, #0
 810b542:	d101      	bne.n	810b548 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 810b544:	68fb      	ldr	r3, [r7, #12]
 810b546:	e038      	b.n	810b5ba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 810b548:	68fb      	ldr	r3, [r7, #12]
 810b54a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810b54e:	f003 0302 	and.w	r3, r3, #2
 810b552:	2b00      	cmp	r3, #0
 810b554:	d108      	bne.n	810b568 <ip4_route+0x78>
 810b556:	687b      	ldr	r3, [r7, #4]
 810b558:	681a      	ldr	r2, [r3, #0]
 810b55a:	68fb      	ldr	r3, [r7, #12]
 810b55c:	330c      	adds	r3, #12
 810b55e:	681b      	ldr	r3, [r3, #0]
 810b560:	429a      	cmp	r2, r3
 810b562:	d101      	bne.n	810b568 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 810b564:	68fb      	ldr	r3, [r7, #12]
 810b566:	e028      	b.n	810b5ba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 810b568:	68fb      	ldr	r3, [r7, #12]
 810b56a:	681b      	ldr	r3, [r3, #0]
 810b56c:	60fb      	str	r3, [r7, #12]
 810b56e:	68fb      	ldr	r3, [r7, #12]
 810b570:	2b00      	cmp	r3, #0
 810b572:	d1c5      	bne.n	810b500 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 810b574:	4b15      	ldr	r3, [pc, #84]	@ (810b5cc <ip4_route+0xdc>)
 810b576:	681b      	ldr	r3, [r3, #0]
 810b578:	2b00      	cmp	r3, #0
 810b57a:	d01a      	beq.n	810b5b2 <ip4_route+0xc2>
 810b57c:	4b13      	ldr	r3, [pc, #76]	@ (810b5cc <ip4_route+0xdc>)
 810b57e:	681b      	ldr	r3, [r3, #0]
 810b580:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810b584:	f003 0301 	and.w	r3, r3, #1
 810b588:	2b00      	cmp	r3, #0
 810b58a:	d012      	beq.n	810b5b2 <ip4_route+0xc2>
 810b58c:	4b0f      	ldr	r3, [pc, #60]	@ (810b5cc <ip4_route+0xdc>)
 810b58e:	681b      	ldr	r3, [r3, #0]
 810b590:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810b594:	f003 0304 	and.w	r3, r3, #4
 810b598:	2b00      	cmp	r3, #0
 810b59a:	d00a      	beq.n	810b5b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 810b59c:	4b0b      	ldr	r3, [pc, #44]	@ (810b5cc <ip4_route+0xdc>)
 810b59e:	681b      	ldr	r3, [r3, #0]
 810b5a0:	3304      	adds	r3, #4
 810b5a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 810b5a4:	2b00      	cmp	r3, #0
 810b5a6:	d004      	beq.n	810b5b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 810b5a8:	687b      	ldr	r3, [r7, #4]
 810b5aa:	681b      	ldr	r3, [r3, #0]
 810b5ac:	b2db      	uxtb	r3, r3
 810b5ae:	2b7f      	cmp	r3, #127	@ 0x7f
 810b5b0:	d101      	bne.n	810b5b6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 810b5b2:	2300      	movs	r3, #0
 810b5b4:	e001      	b.n	810b5ba <ip4_route+0xca>
  }

  return netif_default;
 810b5b6:	4b05      	ldr	r3, [pc, #20]	@ (810b5cc <ip4_route+0xdc>)
 810b5b8:	681b      	ldr	r3, [r3, #0]
}
 810b5ba:	4618      	mov	r0, r3
 810b5bc:	3714      	adds	r7, #20
 810b5be:	46bd      	mov	sp, r7
 810b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5c4:	4770      	bx	lr
 810b5c6:	bf00      	nop
 810b5c8:	100176ec 	.word	0x100176ec
 810b5cc:	100176f0 	.word	0x100176f0

0810b5d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 810b5d0:	b580      	push	{r7, lr}
 810b5d2:	b082      	sub	sp, #8
 810b5d4:	af00      	add	r7, sp, #0
 810b5d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 810b5d8:	687b      	ldr	r3, [r7, #4]
 810b5da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810b5de:	f003 0301 	and.w	r3, r3, #1
 810b5e2:	b2db      	uxtb	r3, r3
 810b5e4:	2b00      	cmp	r3, #0
 810b5e6:	d016      	beq.n	810b616 <ip4_input_accept+0x46>
 810b5e8:	687b      	ldr	r3, [r7, #4]
 810b5ea:	3304      	adds	r3, #4
 810b5ec:	681b      	ldr	r3, [r3, #0]
 810b5ee:	2b00      	cmp	r3, #0
 810b5f0:	d011      	beq.n	810b616 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 810b5f2:	4b0b      	ldr	r3, [pc, #44]	@ (810b620 <ip4_input_accept+0x50>)
 810b5f4:	695a      	ldr	r2, [r3, #20]
 810b5f6:	687b      	ldr	r3, [r7, #4]
 810b5f8:	3304      	adds	r3, #4
 810b5fa:	681b      	ldr	r3, [r3, #0]
 810b5fc:	429a      	cmp	r2, r3
 810b5fe:	d008      	beq.n	810b612 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 810b600:	4b07      	ldr	r3, [pc, #28]	@ (810b620 <ip4_input_accept+0x50>)
 810b602:	695b      	ldr	r3, [r3, #20]
 810b604:	6879      	ldr	r1, [r7, #4]
 810b606:	4618      	mov	r0, r3
 810b608:	f000 fa08 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 810b60c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 810b60e:	2b00      	cmp	r3, #0
 810b610:	d001      	beq.n	810b616 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 810b612:	2301      	movs	r3, #1
 810b614:	e000      	b.n	810b618 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 810b616:	2300      	movs	r3, #0
}
 810b618:	4618      	mov	r0, r3
 810b61a:	3708      	adds	r7, #8
 810b61c:	46bd      	mov	sp, r7
 810b61e:	bd80      	pop	{r7, pc}
 810b620:	100145b0 	.word	0x100145b0

0810b624 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 810b624:	b580      	push	{r7, lr}
 810b626:	b086      	sub	sp, #24
 810b628:	af00      	add	r7, sp, #0
 810b62a:	6078      	str	r0, [r7, #4]
 810b62c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 810b62e:	687b      	ldr	r3, [r7, #4]
 810b630:	685b      	ldr	r3, [r3, #4]
 810b632:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 810b634:	697b      	ldr	r3, [r7, #20]
 810b636:	781b      	ldrb	r3, [r3, #0]
 810b638:	091b      	lsrs	r3, r3, #4
 810b63a:	b2db      	uxtb	r3, r3
 810b63c:	2b04      	cmp	r3, #4
 810b63e:	d004      	beq.n	810b64a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 810b640:	6878      	ldr	r0, [r7, #4]
 810b642:	f002 fb81 	bl	810dd48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 810b646:	2300      	movs	r3, #0
 810b648:	e107      	b.n	810b85a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 810b64a:	697b      	ldr	r3, [r7, #20]
 810b64c:	781b      	ldrb	r3, [r3, #0]
 810b64e:	f003 030f 	and.w	r3, r3, #15
 810b652:	b2db      	uxtb	r3, r3
 810b654:	009b      	lsls	r3, r3, #2
 810b656:	b2db      	uxtb	r3, r3
 810b658:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 810b65a:	697b      	ldr	r3, [r7, #20]
 810b65c:	885b      	ldrh	r3, [r3, #2]
 810b65e:	b29b      	uxth	r3, r3
 810b660:	4618      	mov	r0, r3
 810b662:	f7fe fc6d 	bl	8109f40 <lwip_htons>
 810b666:	4603      	mov	r3, r0
 810b668:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 810b66a:	687b      	ldr	r3, [r7, #4]
 810b66c:	891b      	ldrh	r3, [r3, #8]
 810b66e:	89ba      	ldrh	r2, [r7, #12]
 810b670:	429a      	cmp	r2, r3
 810b672:	d204      	bcs.n	810b67e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 810b674:	89bb      	ldrh	r3, [r7, #12]
 810b676:	4619      	mov	r1, r3
 810b678:	6878      	ldr	r0, [r7, #4]
 810b67a:	f002 f9df 	bl	810da3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 810b67e:	687b      	ldr	r3, [r7, #4]
 810b680:	895b      	ldrh	r3, [r3, #10]
 810b682:	89fa      	ldrh	r2, [r7, #14]
 810b684:	429a      	cmp	r2, r3
 810b686:	d807      	bhi.n	810b698 <ip4_input+0x74>
 810b688:	687b      	ldr	r3, [r7, #4]
 810b68a:	891b      	ldrh	r3, [r3, #8]
 810b68c:	89ba      	ldrh	r2, [r7, #12]
 810b68e:	429a      	cmp	r2, r3
 810b690:	d802      	bhi.n	810b698 <ip4_input+0x74>
 810b692:	89fb      	ldrh	r3, [r7, #14]
 810b694:	2b13      	cmp	r3, #19
 810b696:	d804      	bhi.n	810b6a2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 810b698:	6878      	ldr	r0, [r7, #4]
 810b69a:	f002 fb55 	bl	810dd48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 810b69e:	2300      	movs	r3, #0
 810b6a0:	e0db      	b.n	810b85a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 810b6a2:	697b      	ldr	r3, [r7, #20]
 810b6a4:	691b      	ldr	r3, [r3, #16]
 810b6a6:	4a6f      	ldr	r2, [pc, #444]	@ (810b864 <ip4_input+0x240>)
 810b6a8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 810b6aa:	697b      	ldr	r3, [r7, #20]
 810b6ac:	68db      	ldr	r3, [r3, #12]
 810b6ae:	4a6d      	ldr	r2, [pc, #436]	@ (810b864 <ip4_input+0x240>)
 810b6b0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810b6b2:	4b6c      	ldr	r3, [pc, #432]	@ (810b864 <ip4_input+0x240>)
 810b6b4:	695b      	ldr	r3, [r3, #20]
 810b6b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810b6ba:	2be0      	cmp	r3, #224	@ 0xe0
 810b6bc:	d112      	bne.n	810b6e4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 810b6be:	683b      	ldr	r3, [r7, #0]
 810b6c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810b6c4:	f003 0301 	and.w	r3, r3, #1
 810b6c8:	b2db      	uxtb	r3, r3
 810b6ca:	2b00      	cmp	r3, #0
 810b6cc:	d007      	beq.n	810b6de <ip4_input+0xba>
 810b6ce:	683b      	ldr	r3, [r7, #0]
 810b6d0:	3304      	adds	r3, #4
 810b6d2:	681b      	ldr	r3, [r3, #0]
 810b6d4:	2b00      	cmp	r3, #0
 810b6d6:	d002      	beq.n	810b6de <ip4_input+0xba>
      netif = inp;
 810b6d8:	683b      	ldr	r3, [r7, #0]
 810b6da:	613b      	str	r3, [r7, #16]
 810b6dc:	e02a      	b.n	810b734 <ip4_input+0x110>
    } else {
      netif = NULL;
 810b6de:	2300      	movs	r3, #0
 810b6e0:	613b      	str	r3, [r7, #16]
 810b6e2:	e027      	b.n	810b734 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 810b6e4:	6838      	ldr	r0, [r7, #0]
 810b6e6:	f7ff ff73 	bl	810b5d0 <ip4_input_accept>
 810b6ea:	4603      	mov	r3, r0
 810b6ec:	2b00      	cmp	r3, #0
 810b6ee:	d002      	beq.n	810b6f6 <ip4_input+0xd2>
      netif = inp;
 810b6f0:	683b      	ldr	r3, [r7, #0]
 810b6f2:	613b      	str	r3, [r7, #16]
 810b6f4:	e01e      	b.n	810b734 <ip4_input+0x110>
    } else {
      netif = NULL;
 810b6f6:	2300      	movs	r3, #0
 810b6f8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 810b6fa:	4b5a      	ldr	r3, [pc, #360]	@ (810b864 <ip4_input+0x240>)
 810b6fc:	695b      	ldr	r3, [r3, #20]
 810b6fe:	b2db      	uxtb	r3, r3
 810b700:	2b7f      	cmp	r3, #127	@ 0x7f
 810b702:	d017      	beq.n	810b734 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 810b704:	4b58      	ldr	r3, [pc, #352]	@ (810b868 <ip4_input+0x244>)
 810b706:	681b      	ldr	r3, [r3, #0]
 810b708:	613b      	str	r3, [r7, #16]
 810b70a:	e00e      	b.n	810b72a <ip4_input+0x106>
          if (netif == inp) {
 810b70c:	693a      	ldr	r2, [r7, #16]
 810b70e:	683b      	ldr	r3, [r7, #0]
 810b710:	429a      	cmp	r2, r3
 810b712:	d006      	beq.n	810b722 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 810b714:	6938      	ldr	r0, [r7, #16]
 810b716:	f7ff ff5b 	bl	810b5d0 <ip4_input_accept>
 810b71a:	4603      	mov	r3, r0
 810b71c:	2b00      	cmp	r3, #0
 810b71e:	d108      	bne.n	810b732 <ip4_input+0x10e>
 810b720:	e000      	b.n	810b724 <ip4_input+0x100>
            continue;
 810b722:	bf00      	nop
        NETIF_FOREACH(netif) {
 810b724:	693b      	ldr	r3, [r7, #16]
 810b726:	681b      	ldr	r3, [r3, #0]
 810b728:	613b      	str	r3, [r7, #16]
 810b72a:	693b      	ldr	r3, [r7, #16]
 810b72c:	2b00      	cmp	r3, #0
 810b72e:	d1ed      	bne.n	810b70c <ip4_input+0xe8>
 810b730:	e000      	b.n	810b734 <ip4_input+0x110>
            break;
 810b732:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 810b734:	4b4b      	ldr	r3, [pc, #300]	@ (810b864 <ip4_input+0x240>)
 810b736:	691b      	ldr	r3, [r3, #16]
 810b738:	6839      	ldr	r1, [r7, #0]
 810b73a:	4618      	mov	r0, r3
 810b73c:	f000 f96e 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 810b740:	4603      	mov	r3, r0
 810b742:	2b00      	cmp	r3, #0
 810b744:	d105      	bne.n	810b752 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 810b746:	4b47      	ldr	r3, [pc, #284]	@ (810b864 <ip4_input+0x240>)
 810b748:	691b      	ldr	r3, [r3, #16]
 810b74a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 810b74e:	2be0      	cmp	r3, #224	@ 0xe0
 810b750:	d104      	bne.n	810b75c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 810b752:	6878      	ldr	r0, [r7, #4]
 810b754:	f002 faf8 	bl	810dd48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 810b758:	2300      	movs	r3, #0
 810b75a:	e07e      	b.n	810b85a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 810b75c:	693b      	ldr	r3, [r7, #16]
 810b75e:	2b00      	cmp	r3, #0
 810b760:	d104      	bne.n	810b76c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 810b762:	6878      	ldr	r0, [r7, #4]
 810b764:	f002 faf0 	bl	810dd48 <pbuf_free>
    return ERR_OK;
 810b768:	2300      	movs	r3, #0
 810b76a:	e076      	b.n	810b85a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 810b76c:	697b      	ldr	r3, [r7, #20]
 810b76e:	88db      	ldrh	r3, [r3, #6]
 810b770:	b29b      	uxth	r3, r3
 810b772:	461a      	mov	r2, r3
 810b774:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 810b778:	4013      	ands	r3, r2
 810b77a:	2b00      	cmp	r3, #0
 810b77c:	d00b      	beq.n	810b796 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 810b77e:	6878      	ldr	r0, [r7, #4]
 810b780:	f000 fc92 	bl	810c0a8 <ip4_reass>
 810b784:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 810b786:	687b      	ldr	r3, [r7, #4]
 810b788:	2b00      	cmp	r3, #0
 810b78a:	d101      	bne.n	810b790 <ip4_input+0x16c>
      return ERR_OK;
 810b78c:	2300      	movs	r3, #0
 810b78e:	e064      	b.n	810b85a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 810b790:	687b      	ldr	r3, [r7, #4]
 810b792:	685b      	ldr	r3, [r3, #4]
 810b794:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 810b796:	4a33      	ldr	r2, [pc, #204]	@ (810b864 <ip4_input+0x240>)
 810b798:	693b      	ldr	r3, [r7, #16]
 810b79a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 810b79c:	4a31      	ldr	r2, [pc, #196]	@ (810b864 <ip4_input+0x240>)
 810b79e:	683b      	ldr	r3, [r7, #0]
 810b7a0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 810b7a2:	4a30      	ldr	r2, [pc, #192]	@ (810b864 <ip4_input+0x240>)
 810b7a4:	697b      	ldr	r3, [r7, #20]
 810b7a6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 810b7a8:	697b      	ldr	r3, [r7, #20]
 810b7aa:	781b      	ldrb	r3, [r3, #0]
 810b7ac:	f003 030f 	and.w	r3, r3, #15
 810b7b0:	b2db      	uxtb	r3, r3
 810b7b2:	009b      	lsls	r3, r3, #2
 810b7b4:	b2db      	uxtb	r3, r3
 810b7b6:	461a      	mov	r2, r3
 810b7b8:	4b2a      	ldr	r3, [pc, #168]	@ (810b864 <ip4_input+0x240>)
 810b7ba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 810b7bc:	89fb      	ldrh	r3, [r7, #14]
 810b7be:	4619      	mov	r1, r3
 810b7c0:	6878      	ldr	r0, [r7, #4]
 810b7c2:	f002 fa3b 	bl	810dc3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 810b7c6:	697b      	ldr	r3, [r7, #20]
 810b7c8:	7a5b      	ldrb	r3, [r3, #9]
 810b7ca:	2b11      	cmp	r3, #17
 810b7cc:	d006      	beq.n	810b7dc <ip4_input+0x1b8>
 810b7ce:	2b11      	cmp	r3, #17
 810b7d0:	dc13      	bgt.n	810b7fa <ip4_input+0x1d6>
 810b7d2:	2b01      	cmp	r3, #1
 810b7d4:	d00c      	beq.n	810b7f0 <ip4_input+0x1cc>
 810b7d6:	2b06      	cmp	r3, #6
 810b7d8:	d005      	beq.n	810b7e6 <ip4_input+0x1c2>
 810b7da:	e00e      	b.n	810b7fa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 810b7dc:	6839      	ldr	r1, [r7, #0]
 810b7de:	6878      	ldr	r0, [r7, #4]
 810b7e0:	f008 fe82 	bl	81144e8 <udp_input>
        break;
 810b7e4:	e026      	b.n	810b834 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 810b7e6:	6839      	ldr	r1, [r7, #0]
 810b7e8:	6878      	ldr	r0, [r7, #4]
 810b7ea:	f004 fa71 	bl	810fcd0 <tcp_input>
        break;
 810b7ee:	e021      	b.n	810b834 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 810b7f0:	6839      	ldr	r1, [r7, #0]
 810b7f2:	6878      	ldr	r0, [r7, #4]
 810b7f4:	f7ff fbf6 	bl	810afe4 <icmp_input>
        break;
 810b7f8:	e01c      	b.n	810b834 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 810b7fa:	4b1a      	ldr	r3, [pc, #104]	@ (810b864 <ip4_input+0x240>)
 810b7fc:	695b      	ldr	r3, [r3, #20]
 810b7fe:	6939      	ldr	r1, [r7, #16]
 810b800:	4618      	mov	r0, r3
 810b802:	f000 f90b 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 810b806:	4603      	mov	r3, r0
 810b808:	2b00      	cmp	r3, #0
 810b80a:	d10f      	bne.n	810b82c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810b80c:	4b15      	ldr	r3, [pc, #84]	@ (810b864 <ip4_input+0x240>)
 810b80e:	695b      	ldr	r3, [r3, #20]
 810b810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 810b814:	2be0      	cmp	r3, #224	@ 0xe0
 810b816:	d009      	beq.n	810b82c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 810b818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810b81c:	4619      	mov	r1, r3
 810b81e:	6878      	ldr	r0, [r7, #4]
 810b820:	f002 fa7f 	bl	810dd22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 810b824:	2102      	movs	r1, #2
 810b826:	6878      	ldr	r0, [r7, #4]
 810b828:	f7ff fcfc 	bl	810b224 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 810b82c:	6878      	ldr	r0, [r7, #4]
 810b82e:	f002 fa8b 	bl	810dd48 <pbuf_free>
        break;
 810b832:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 810b834:	4b0b      	ldr	r3, [pc, #44]	@ (810b864 <ip4_input+0x240>)
 810b836:	2200      	movs	r2, #0
 810b838:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 810b83a:	4b0a      	ldr	r3, [pc, #40]	@ (810b864 <ip4_input+0x240>)
 810b83c:	2200      	movs	r2, #0
 810b83e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 810b840:	4b08      	ldr	r3, [pc, #32]	@ (810b864 <ip4_input+0x240>)
 810b842:	2200      	movs	r2, #0
 810b844:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 810b846:	4b07      	ldr	r3, [pc, #28]	@ (810b864 <ip4_input+0x240>)
 810b848:	2200      	movs	r2, #0
 810b84a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 810b84c:	4b05      	ldr	r3, [pc, #20]	@ (810b864 <ip4_input+0x240>)
 810b84e:	2200      	movs	r2, #0
 810b850:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 810b852:	4b04      	ldr	r3, [pc, #16]	@ (810b864 <ip4_input+0x240>)
 810b854:	2200      	movs	r2, #0
 810b856:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 810b858:	2300      	movs	r3, #0
}
 810b85a:	4618      	mov	r0, r3
 810b85c:	3718      	adds	r7, #24
 810b85e:	46bd      	mov	sp, r7
 810b860:	bd80      	pop	{r7, pc}
 810b862:	bf00      	nop
 810b864:	100145b0 	.word	0x100145b0
 810b868:	100176ec 	.word	0x100176ec

0810b86c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 810b86c:	b580      	push	{r7, lr}
 810b86e:	b08a      	sub	sp, #40	@ 0x28
 810b870:	af04      	add	r7, sp, #16
 810b872:	60f8      	str	r0, [r7, #12]
 810b874:	60b9      	str	r1, [r7, #8]
 810b876:	607a      	str	r2, [r7, #4]
 810b878:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 810b87a:	68bb      	ldr	r3, [r7, #8]
 810b87c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 810b87e:	687b      	ldr	r3, [r7, #4]
 810b880:	2b00      	cmp	r3, #0
 810b882:	d009      	beq.n	810b898 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 810b884:	68bb      	ldr	r3, [r7, #8]
 810b886:	2b00      	cmp	r3, #0
 810b888:	d003      	beq.n	810b892 <ip4_output_if+0x26>
 810b88a:	68bb      	ldr	r3, [r7, #8]
 810b88c:	681b      	ldr	r3, [r3, #0]
 810b88e:	2b00      	cmp	r3, #0
 810b890:	d102      	bne.n	810b898 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 810b892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b894:	3304      	adds	r3, #4
 810b896:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 810b898:	78fa      	ldrb	r2, [r7, #3]
 810b89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b89c:	9302      	str	r3, [sp, #8]
 810b89e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810b8a2:	9301      	str	r3, [sp, #4]
 810b8a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 810b8a8:	9300      	str	r3, [sp, #0]
 810b8aa:	4613      	mov	r3, r2
 810b8ac:	687a      	ldr	r2, [r7, #4]
 810b8ae:	6979      	ldr	r1, [r7, #20]
 810b8b0:	68f8      	ldr	r0, [r7, #12]
 810b8b2:	f000 f805 	bl	810b8c0 <ip4_output_if_src>
 810b8b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 810b8b8:	4618      	mov	r0, r3
 810b8ba:	3718      	adds	r7, #24
 810b8bc:	46bd      	mov	sp, r7
 810b8be:	bd80      	pop	{r7, pc}

0810b8c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 810b8c0:	b580      	push	{r7, lr}
 810b8c2:	b088      	sub	sp, #32
 810b8c4:	af00      	add	r7, sp, #0
 810b8c6:	60f8      	str	r0, [r7, #12]
 810b8c8:	60b9      	str	r1, [r7, #8]
 810b8ca:	607a      	str	r2, [r7, #4]
 810b8cc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 810b8ce:	68fb      	ldr	r3, [r7, #12]
 810b8d0:	7b9b      	ldrb	r3, [r3, #14]
 810b8d2:	2b01      	cmp	r3, #1
 810b8d4:	d006      	beq.n	810b8e4 <ip4_output_if_src+0x24>
 810b8d6:	4b4b      	ldr	r3, [pc, #300]	@ (810ba04 <ip4_output_if_src+0x144>)
 810b8d8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 810b8dc:	494a      	ldr	r1, [pc, #296]	@ (810ba08 <ip4_output_if_src+0x148>)
 810b8de:	484b      	ldr	r0, [pc, #300]	@ (810ba0c <ip4_output_if_src+0x14c>)
 810b8e0:	f00b fdaa 	bl	8117438 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 810b8e4:	687b      	ldr	r3, [r7, #4]
 810b8e6:	2b00      	cmp	r3, #0
 810b8e8:	d060      	beq.n	810b9ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 810b8ea:	2314      	movs	r3, #20
 810b8ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 810b8ee:	2114      	movs	r1, #20
 810b8f0:	68f8      	ldr	r0, [r7, #12]
 810b8f2:	f002 f993 	bl	810dc1c <pbuf_add_header>
 810b8f6:	4603      	mov	r3, r0
 810b8f8:	2b00      	cmp	r3, #0
 810b8fa:	d002      	beq.n	810b902 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 810b8fc:	f06f 0301 	mvn.w	r3, #1
 810b900:	e07c      	b.n	810b9fc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 810b902:	68fb      	ldr	r3, [r7, #12]
 810b904:	685b      	ldr	r3, [r3, #4]
 810b906:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 810b908:	68fb      	ldr	r3, [r7, #12]
 810b90a:	895b      	ldrh	r3, [r3, #10]
 810b90c:	2b13      	cmp	r3, #19
 810b90e:	d806      	bhi.n	810b91e <ip4_output_if_src+0x5e>
 810b910:	4b3c      	ldr	r3, [pc, #240]	@ (810ba04 <ip4_output_if_src+0x144>)
 810b912:	f44f 7262 	mov.w	r2, #904	@ 0x388
 810b916:	493e      	ldr	r1, [pc, #248]	@ (810ba10 <ip4_output_if_src+0x150>)
 810b918:	483c      	ldr	r0, [pc, #240]	@ (810ba0c <ip4_output_if_src+0x14c>)
 810b91a:	f00b fd8d 	bl	8117438 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 810b91e:	69fb      	ldr	r3, [r7, #28]
 810b920:	78fa      	ldrb	r2, [r7, #3]
 810b922:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 810b924:	69fb      	ldr	r3, [r7, #28]
 810b926:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 810b92a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 810b92c:	687b      	ldr	r3, [r7, #4]
 810b92e:	681a      	ldr	r2, [r3, #0]
 810b930:	69fb      	ldr	r3, [r7, #28]
 810b932:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 810b934:	8b7b      	ldrh	r3, [r7, #26]
 810b936:	089b      	lsrs	r3, r3, #2
 810b938:	b29b      	uxth	r3, r3
 810b93a:	b2db      	uxtb	r3, r3
 810b93c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b940:	b2da      	uxtb	r2, r3
 810b942:	69fb      	ldr	r3, [r7, #28]
 810b944:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 810b946:	69fb      	ldr	r3, [r7, #28]
 810b948:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 810b94c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 810b94e:	68fb      	ldr	r3, [r7, #12]
 810b950:	891b      	ldrh	r3, [r3, #8]
 810b952:	4618      	mov	r0, r3
 810b954:	f7fe faf4 	bl	8109f40 <lwip_htons>
 810b958:	4603      	mov	r3, r0
 810b95a:	461a      	mov	r2, r3
 810b95c:	69fb      	ldr	r3, [r7, #28]
 810b95e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 810b960:	69fb      	ldr	r3, [r7, #28]
 810b962:	2200      	movs	r2, #0
 810b964:	719a      	strb	r2, [r3, #6]
 810b966:	2200      	movs	r2, #0
 810b968:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 810b96a:	4b2a      	ldr	r3, [pc, #168]	@ (810ba14 <ip4_output_if_src+0x154>)
 810b96c:	881b      	ldrh	r3, [r3, #0]
 810b96e:	4618      	mov	r0, r3
 810b970:	f7fe fae6 	bl	8109f40 <lwip_htons>
 810b974:	4603      	mov	r3, r0
 810b976:	461a      	mov	r2, r3
 810b978:	69fb      	ldr	r3, [r7, #28]
 810b97a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 810b97c:	4b25      	ldr	r3, [pc, #148]	@ (810ba14 <ip4_output_if_src+0x154>)
 810b97e:	881b      	ldrh	r3, [r3, #0]
 810b980:	3301      	adds	r3, #1
 810b982:	b29a      	uxth	r2, r3
 810b984:	4b23      	ldr	r3, [pc, #140]	@ (810ba14 <ip4_output_if_src+0x154>)
 810b986:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 810b988:	68bb      	ldr	r3, [r7, #8]
 810b98a:	2b00      	cmp	r3, #0
 810b98c:	d104      	bne.n	810b998 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 810b98e:	4b22      	ldr	r3, [pc, #136]	@ (810ba18 <ip4_output_if_src+0x158>)
 810b990:	681a      	ldr	r2, [r3, #0]
 810b992:	69fb      	ldr	r3, [r7, #28]
 810b994:	60da      	str	r2, [r3, #12]
 810b996:	e003      	b.n	810b9a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 810b998:	68bb      	ldr	r3, [r7, #8]
 810b99a:	681a      	ldr	r2, [r3, #0]
 810b99c:	69fb      	ldr	r3, [r7, #28]
 810b99e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 810b9a0:	69fb      	ldr	r3, [r7, #28]
 810b9a2:	2200      	movs	r2, #0
 810b9a4:	729a      	strb	r2, [r3, #10]
 810b9a6:	2200      	movs	r2, #0
 810b9a8:	72da      	strb	r2, [r3, #11]
 810b9aa:	e00f      	b.n	810b9cc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 810b9ac:	68fb      	ldr	r3, [r7, #12]
 810b9ae:	895b      	ldrh	r3, [r3, #10]
 810b9b0:	2b13      	cmp	r3, #19
 810b9b2:	d802      	bhi.n	810b9ba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 810b9b4:	f06f 0301 	mvn.w	r3, #1
 810b9b8:	e020      	b.n	810b9fc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 810b9ba:	68fb      	ldr	r3, [r7, #12]
 810b9bc:	685b      	ldr	r3, [r3, #4]
 810b9be:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 810b9c0:	69fb      	ldr	r3, [r7, #28]
 810b9c2:	691b      	ldr	r3, [r3, #16]
 810b9c4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 810b9c6:	f107 0314 	add.w	r3, r7, #20
 810b9ca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 810b9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810b9d0:	2b00      	cmp	r3, #0
 810b9d2:	d00c      	beq.n	810b9ee <ip4_output_if_src+0x12e>
 810b9d4:	68fb      	ldr	r3, [r7, #12]
 810b9d6:	891a      	ldrh	r2, [r3, #8]
 810b9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810b9dc:	429a      	cmp	r2, r3
 810b9de:	d906      	bls.n	810b9ee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 810b9e0:	687a      	ldr	r2, [r7, #4]
 810b9e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810b9e4:	68f8      	ldr	r0, [r7, #12]
 810b9e6:	f000 fd53 	bl	810c490 <ip4_frag>
 810b9ea:	4603      	mov	r3, r0
 810b9ec:	e006      	b.n	810b9fc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 810b9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9f0:	695b      	ldr	r3, [r3, #20]
 810b9f2:	687a      	ldr	r2, [r7, #4]
 810b9f4:	68f9      	ldr	r1, [r7, #12]
 810b9f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810b9f8:	4798      	blx	r3
 810b9fa:	4603      	mov	r3, r0
}
 810b9fc:	4618      	mov	r0, r3
 810b9fe:	3720      	adds	r7, #32
 810ba00:	46bd      	mov	sp, r7
 810ba02:	bd80      	pop	{r7, pc}
 810ba04:	0811c78c 	.word	0x0811c78c
 810ba08:	0811c7f0 	.word	0x0811c7f0
 810ba0c:	0811c7fc 	.word	0x0811c7fc
 810ba10:	0811c824 	.word	0x0811c824
 810ba14:	100145c8 	.word	0x100145c8
 810ba18:	0811ef78 	.word	0x0811ef78

0810ba1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 810ba1c:	b480      	push	{r7}
 810ba1e:	b085      	sub	sp, #20
 810ba20:	af00      	add	r7, sp, #0
 810ba22:	6078      	str	r0, [r7, #4]
 810ba24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 810ba26:	687b      	ldr	r3, [r7, #4]
 810ba28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 810ba2a:	687b      	ldr	r3, [r7, #4]
 810ba2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ba30:	d002      	beq.n	810ba38 <ip4_addr_isbroadcast_u32+0x1c>
 810ba32:	687b      	ldr	r3, [r7, #4]
 810ba34:	2b00      	cmp	r3, #0
 810ba36:	d101      	bne.n	810ba3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 810ba38:	2301      	movs	r3, #1
 810ba3a:	e02a      	b.n	810ba92 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 810ba3c:	683b      	ldr	r3, [r7, #0]
 810ba3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ba42:	f003 0302 	and.w	r3, r3, #2
 810ba46:	2b00      	cmp	r3, #0
 810ba48:	d101      	bne.n	810ba4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 810ba4a:	2300      	movs	r3, #0
 810ba4c:	e021      	b.n	810ba92 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 810ba4e:	683b      	ldr	r3, [r7, #0]
 810ba50:	3304      	adds	r3, #4
 810ba52:	681b      	ldr	r3, [r3, #0]
 810ba54:	687a      	ldr	r2, [r7, #4]
 810ba56:	429a      	cmp	r2, r3
 810ba58:	d101      	bne.n	810ba5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 810ba5a:	2300      	movs	r3, #0
 810ba5c:	e019      	b.n	810ba92 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 810ba5e:	68fa      	ldr	r2, [r7, #12]
 810ba60:	683b      	ldr	r3, [r7, #0]
 810ba62:	3304      	adds	r3, #4
 810ba64:	681b      	ldr	r3, [r3, #0]
 810ba66:	405a      	eors	r2, r3
 810ba68:	683b      	ldr	r3, [r7, #0]
 810ba6a:	3308      	adds	r3, #8
 810ba6c:	681b      	ldr	r3, [r3, #0]
 810ba6e:	4013      	ands	r3, r2
 810ba70:	2b00      	cmp	r3, #0
 810ba72:	d10d      	bne.n	810ba90 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 810ba74:	683b      	ldr	r3, [r7, #0]
 810ba76:	3308      	adds	r3, #8
 810ba78:	681b      	ldr	r3, [r3, #0]
 810ba7a:	43da      	mvns	r2, r3
 810ba7c:	687b      	ldr	r3, [r7, #4]
 810ba7e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 810ba80:	683b      	ldr	r3, [r7, #0]
 810ba82:	3308      	adds	r3, #8
 810ba84:	681b      	ldr	r3, [r3, #0]
 810ba86:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 810ba88:	429a      	cmp	r2, r3
 810ba8a:	d101      	bne.n	810ba90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 810ba8c:	2301      	movs	r3, #1
 810ba8e:	e000      	b.n	810ba92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 810ba90:	2300      	movs	r3, #0
  }
}
 810ba92:	4618      	mov	r0, r3
 810ba94:	3714      	adds	r7, #20
 810ba96:	46bd      	mov	sp, r7
 810ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba9c:	4770      	bx	lr
	...

0810baa0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 810baa0:	b580      	push	{r7, lr}
 810baa2:	b084      	sub	sp, #16
 810baa4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 810baa6:	2300      	movs	r3, #0
 810baa8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 810baaa:	4b12      	ldr	r3, [pc, #72]	@ (810baf4 <ip_reass_tmr+0x54>)
 810baac:	681b      	ldr	r3, [r3, #0]
 810baae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 810bab0:	e018      	b.n	810bae4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 810bab2:	68fb      	ldr	r3, [r7, #12]
 810bab4:	7fdb      	ldrb	r3, [r3, #31]
 810bab6:	2b00      	cmp	r3, #0
 810bab8:	d00b      	beq.n	810bad2 <ip_reass_tmr+0x32>
      r->timer--;
 810baba:	68fb      	ldr	r3, [r7, #12]
 810babc:	7fdb      	ldrb	r3, [r3, #31]
 810babe:	3b01      	subs	r3, #1
 810bac0:	b2da      	uxtb	r2, r3
 810bac2:	68fb      	ldr	r3, [r7, #12]
 810bac4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 810bac6:	68fb      	ldr	r3, [r7, #12]
 810bac8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 810baca:	68fb      	ldr	r3, [r7, #12]
 810bacc:	681b      	ldr	r3, [r3, #0]
 810bace:	60fb      	str	r3, [r7, #12]
 810bad0:	e008      	b.n	810bae4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 810bad2:	68fb      	ldr	r3, [r7, #12]
 810bad4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 810bad6:	68fb      	ldr	r3, [r7, #12]
 810bad8:	681b      	ldr	r3, [r3, #0]
 810bada:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 810badc:	68b9      	ldr	r1, [r7, #8]
 810bade:	6878      	ldr	r0, [r7, #4]
 810bae0:	f000 f80a 	bl	810baf8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 810bae4:	68fb      	ldr	r3, [r7, #12]
 810bae6:	2b00      	cmp	r3, #0
 810bae8:	d1e3      	bne.n	810bab2 <ip_reass_tmr+0x12>
    }
  }
}
 810baea:	bf00      	nop
 810baec:	bf00      	nop
 810baee:	3710      	adds	r7, #16
 810baf0:	46bd      	mov	sp, r7
 810baf2:	bd80      	pop	{r7, pc}
 810baf4:	100145cc 	.word	0x100145cc

0810baf8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 810baf8:	b580      	push	{r7, lr}
 810bafa:	b088      	sub	sp, #32
 810bafc:	af00      	add	r7, sp, #0
 810bafe:	6078      	str	r0, [r7, #4]
 810bb00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 810bb02:	2300      	movs	r3, #0
 810bb04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 810bb06:	683a      	ldr	r2, [r7, #0]
 810bb08:	687b      	ldr	r3, [r7, #4]
 810bb0a:	429a      	cmp	r2, r3
 810bb0c:	d105      	bne.n	810bb1a <ip_reass_free_complete_datagram+0x22>
 810bb0e:	4b45      	ldr	r3, [pc, #276]	@ (810bc24 <ip_reass_free_complete_datagram+0x12c>)
 810bb10:	22ab      	movs	r2, #171	@ 0xab
 810bb12:	4945      	ldr	r1, [pc, #276]	@ (810bc28 <ip_reass_free_complete_datagram+0x130>)
 810bb14:	4845      	ldr	r0, [pc, #276]	@ (810bc2c <ip_reass_free_complete_datagram+0x134>)
 810bb16:	f00b fc8f 	bl	8117438 <iprintf>
  if (prev != NULL) {
 810bb1a:	683b      	ldr	r3, [r7, #0]
 810bb1c:	2b00      	cmp	r3, #0
 810bb1e:	d00a      	beq.n	810bb36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 810bb20:	683b      	ldr	r3, [r7, #0]
 810bb22:	681b      	ldr	r3, [r3, #0]
 810bb24:	687a      	ldr	r2, [r7, #4]
 810bb26:	429a      	cmp	r2, r3
 810bb28:	d005      	beq.n	810bb36 <ip_reass_free_complete_datagram+0x3e>
 810bb2a:	4b3e      	ldr	r3, [pc, #248]	@ (810bc24 <ip_reass_free_complete_datagram+0x12c>)
 810bb2c:	22ad      	movs	r2, #173	@ 0xad
 810bb2e:	4940      	ldr	r1, [pc, #256]	@ (810bc30 <ip_reass_free_complete_datagram+0x138>)
 810bb30:	483e      	ldr	r0, [pc, #248]	@ (810bc2c <ip_reass_free_complete_datagram+0x134>)
 810bb32:	f00b fc81 	bl	8117438 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 810bb36:	687b      	ldr	r3, [r7, #4]
 810bb38:	685b      	ldr	r3, [r3, #4]
 810bb3a:	685b      	ldr	r3, [r3, #4]
 810bb3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 810bb3e:	697b      	ldr	r3, [r7, #20]
 810bb40:	889b      	ldrh	r3, [r3, #4]
 810bb42:	b29b      	uxth	r3, r3
 810bb44:	2b00      	cmp	r3, #0
 810bb46:	d12a      	bne.n	810bb9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 810bb48:	687b      	ldr	r3, [r7, #4]
 810bb4a:	685b      	ldr	r3, [r3, #4]
 810bb4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 810bb4e:	697b      	ldr	r3, [r7, #20]
 810bb50:	681a      	ldr	r2, [r3, #0]
 810bb52:	687b      	ldr	r3, [r7, #4]
 810bb54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 810bb56:	69bb      	ldr	r3, [r7, #24]
 810bb58:	6858      	ldr	r0, [r3, #4]
 810bb5a:	687b      	ldr	r3, [r7, #4]
 810bb5c:	3308      	adds	r3, #8
 810bb5e:	2214      	movs	r2, #20
 810bb60:	4619      	mov	r1, r3
 810bb62:	f00b fee8 	bl	8117936 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 810bb66:	2101      	movs	r1, #1
 810bb68:	69b8      	ldr	r0, [r7, #24]
 810bb6a:	f7ff fb6b 	bl	810b244 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 810bb6e:	69b8      	ldr	r0, [r7, #24]
 810bb70:	f002 f972 	bl	810de58 <pbuf_clen>
 810bb74:	4603      	mov	r3, r0
 810bb76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 810bb78:	8bfa      	ldrh	r2, [r7, #30]
 810bb7a:	8a7b      	ldrh	r3, [r7, #18]
 810bb7c:	4413      	add	r3, r2
 810bb7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bb82:	db05      	blt.n	810bb90 <ip_reass_free_complete_datagram+0x98>
 810bb84:	4b27      	ldr	r3, [pc, #156]	@ (810bc24 <ip_reass_free_complete_datagram+0x12c>)
 810bb86:	22bc      	movs	r2, #188	@ 0xbc
 810bb88:	492a      	ldr	r1, [pc, #168]	@ (810bc34 <ip_reass_free_complete_datagram+0x13c>)
 810bb8a:	4828      	ldr	r0, [pc, #160]	@ (810bc2c <ip_reass_free_complete_datagram+0x134>)
 810bb8c:	f00b fc54 	bl	8117438 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 810bb90:	8bfa      	ldrh	r2, [r7, #30]
 810bb92:	8a7b      	ldrh	r3, [r7, #18]
 810bb94:	4413      	add	r3, r2
 810bb96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 810bb98:	69b8      	ldr	r0, [r7, #24]
 810bb9a:	f002 f8d5 	bl	810dd48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 810bb9e:	687b      	ldr	r3, [r7, #4]
 810bba0:	685b      	ldr	r3, [r3, #4]
 810bba2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 810bba4:	e01f      	b.n	810bbe6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 810bba6:	69bb      	ldr	r3, [r7, #24]
 810bba8:	685b      	ldr	r3, [r3, #4]
 810bbaa:	617b      	str	r3, [r7, #20]
    pcur = p;
 810bbac:	69bb      	ldr	r3, [r7, #24]
 810bbae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 810bbb0:	697b      	ldr	r3, [r7, #20]
 810bbb2:	681b      	ldr	r3, [r3, #0]
 810bbb4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 810bbb6:	68f8      	ldr	r0, [r7, #12]
 810bbb8:	f002 f94e 	bl	810de58 <pbuf_clen>
 810bbbc:	4603      	mov	r3, r0
 810bbbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 810bbc0:	8bfa      	ldrh	r2, [r7, #30]
 810bbc2:	8a7b      	ldrh	r3, [r7, #18]
 810bbc4:	4413      	add	r3, r2
 810bbc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bbca:	db05      	blt.n	810bbd8 <ip_reass_free_complete_datagram+0xe0>
 810bbcc:	4b15      	ldr	r3, [pc, #84]	@ (810bc24 <ip_reass_free_complete_datagram+0x12c>)
 810bbce:	22cc      	movs	r2, #204	@ 0xcc
 810bbd0:	4918      	ldr	r1, [pc, #96]	@ (810bc34 <ip_reass_free_complete_datagram+0x13c>)
 810bbd2:	4816      	ldr	r0, [pc, #88]	@ (810bc2c <ip_reass_free_complete_datagram+0x134>)
 810bbd4:	f00b fc30 	bl	8117438 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 810bbd8:	8bfa      	ldrh	r2, [r7, #30]
 810bbda:	8a7b      	ldrh	r3, [r7, #18]
 810bbdc:	4413      	add	r3, r2
 810bbde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 810bbe0:	68f8      	ldr	r0, [r7, #12]
 810bbe2:	f002 f8b1 	bl	810dd48 <pbuf_free>
  while (p != NULL) {
 810bbe6:	69bb      	ldr	r3, [r7, #24]
 810bbe8:	2b00      	cmp	r3, #0
 810bbea:	d1dc      	bne.n	810bba6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 810bbec:	6839      	ldr	r1, [r7, #0]
 810bbee:	6878      	ldr	r0, [r7, #4]
 810bbf0:	f000 f8c2 	bl	810bd78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 810bbf4:	4b10      	ldr	r3, [pc, #64]	@ (810bc38 <ip_reass_free_complete_datagram+0x140>)
 810bbf6:	881b      	ldrh	r3, [r3, #0]
 810bbf8:	8bfa      	ldrh	r2, [r7, #30]
 810bbfa:	429a      	cmp	r2, r3
 810bbfc:	d905      	bls.n	810bc0a <ip_reass_free_complete_datagram+0x112>
 810bbfe:	4b09      	ldr	r3, [pc, #36]	@ (810bc24 <ip_reass_free_complete_datagram+0x12c>)
 810bc00:	22d2      	movs	r2, #210	@ 0xd2
 810bc02:	490e      	ldr	r1, [pc, #56]	@ (810bc3c <ip_reass_free_complete_datagram+0x144>)
 810bc04:	4809      	ldr	r0, [pc, #36]	@ (810bc2c <ip_reass_free_complete_datagram+0x134>)
 810bc06:	f00b fc17 	bl	8117438 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 810bc0a:	4b0b      	ldr	r3, [pc, #44]	@ (810bc38 <ip_reass_free_complete_datagram+0x140>)
 810bc0c:	881a      	ldrh	r2, [r3, #0]
 810bc0e:	8bfb      	ldrh	r3, [r7, #30]
 810bc10:	1ad3      	subs	r3, r2, r3
 810bc12:	b29a      	uxth	r2, r3
 810bc14:	4b08      	ldr	r3, [pc, #32]	@ (810bc38 <ip_reass_free_complete_datagram+0x140>)
 810bc16:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 810bc18:	8bfb      	ldrh	r3, [r7, #30]
}
 810bc1a:	4618      	mov	r0, r3
 810bc1c:	3720      	adds	r7, #32
 810bc1e:	46bd      	mov	sp, r7
 810bc20:	bd80      	pop	{r7, pc}
 810bc22:	bf00      	nop
 810bc24:	0811c854 	.word	0x0811c854
 810bc28:	0811c8bc 	.word	0x0811c8bc
 810bc2c:	0811c8c8 	.word	0x0811c8c8
 810bc30:	0811c8f0 	.word	0x0811c8f0
 810bc34:	0811c904 	.word	0x0811c904
 810bc38:	100145d0 	.word	0x100145d0
 810bc3c:	0811c924 	.word	0x0811c924

0810bc40 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 810bc40:	b580      	push	{r7, lr}
 810bc42:	b08a      	sub	sp, #40	@ 0x28
 810bc44:	af00      	add	r7, sp, #0
 810bc46:	6078      	str	r0, [r7, #4]
 810bc48:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 810bc4a:	2300      	movs	r3, #0
 810bc4c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 810bc4e:	2300      	movs	r3, #0
 810bc50:	623b      	str	r3, [r7, #32]
    prev = NULL;
 810bc52:	2300      	movs	r3, #0
 810bc54:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 810bc56:	2300      	movs	r3, #0
 810bc58:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 810bc5a:	2300      	movs	r3, #0
 810bc5c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 810bc5e:	4b28      	ldr	r3, [pc, #160]	@ (810bd00 <ip_reass_remove_oldest_datagram+0xc0>)
 810bc60:	681b      	ldr	r3, [r3, #0]
 810bc62:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 810bc64:	e030      	b.n	810bcc8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 810bc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc68:	695a      	ldr	r2, [r3, #20]
 810bc6a:	687b      	ldr	r3, [r7, #4]
 810bc6c:	68db      	ldr	r3, [r3, #12]
 810bc6e:	429a      	cmp	r2, r3
 810bc70:	d10c      	bne.n	810bc8c <ip_reass_remove_oldest_datagram+0x4c>
 810bc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc74:	699a      	ldr	r2, [r3, #24]
 810bc76:	687b      	ldr	r3, [r7, #4]
 810bc78:	691b      	ldr	r3, [r3, #16]
 810bc7a:	429a      	cmp	r2, r3
 810bc7c:	d106      	bne.n	810bc8c <ip_reass_remove_oldest_datagram+0x4c>
 810bc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc80:	899a      	ldrh	r2, [r3, #12]
 810bc82:	687b      	ldr	r3, [r7, #4]
 810bc84:	889b      	ldrh	r3, [r3, #4]
 810bc86:	b29b      	uxth	r3, r3
 810bc88:	429a      	cmp	r2, r3
 810bc8a:	d014      	beq.n	810bcb6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 810bc8c:	693b      	ldr	r3, [r7, #16]
 810bc8e:	3301      	adds	r3, #1
 810bc90:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 810bc92:	6a3b      	ldr	r3, [r7, #32]
 810bc94:	2b00      	cmp	r3, #0
 810bc96:	d104      	bne.n	810bca2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 810bc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc9a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 810bc9c:	69fb      	ldr	r3, [r7, #28]
 810bc9e:	61bb      	str	r3, [r7, #24]
 810bca0:	e009      	b.n	810bcb6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 810bca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bca4:	7fda      	ldrb	r2, [r3, #31]
 810bca6:	6a3b      	ldr	r3, [r7, #32]
 810bca8:	7fdb      	ldrb	r3, [r3, #31]
 810bcaa:	429a      	cmp	r2, r3
 810bcac:	d803      	bhi.n	810bcb6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 810bcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcb0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 810bcb2:	69fb      	ldr	r3, [r7, #28]
 810bcb4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 810bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcb8:	681b      	ldr	r3, [r3, #0]
 810bcba:	2b00      	cmp	r3, #0
 810bcbc:	d001      	beq.n	810bcc2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 810bcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcc0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 810bcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcc4:	681b      	ldr	r3, [r3, #0]
 810bcc6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 810bcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcca:	2b00      	cmp	r3, #0
 810bccc:	d1cb      	bne.n	810bc66 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 810bcce:	6a3b      	ldr	r3, [r7, #32]
 810bcd0:	2b00      	cmp	r3, #0
 810bcd2:	d008      	beq.n	810bce6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 810bcd4:	69b9      	ldr	r1, [r7, #24]
 810bcd6:	6a38      	ldr	r0, [r7, #32]
 810bcd8:	f7ff ff0e 	bl	810baf8 <ip_reass_free_complete_datagram>
 810bcdc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 810bcde:	697a      	ldr	r2, [r7, #20]
 810bce0:	68fb      	ldr	r3, [r7, #12]
 810bce2:	4413      	add	r3, r2
 810bce4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 810bce6:	697a      	ldr	r2, [r7, #20]
 810bce8:	683b      	ldr	r3, [r7, #0]
 810bcea:	429a      	cmp	r2, r3
 810bcec:	da02      	bge.n	810bcf4 <ip_reass_remove_oldest_datagram+0xb4>
 810bcee:	693b      	ldr	r3, [r7, #16]
 810bcf0:	2b01      	cmp	r3, #1
 810bcf2:	dcac      	bgt.n	810bc4e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 810bcf4:	697b      	ldr	r3, [r7, #20]
}
 810bcf6:	4618      	mov	r0, r3
 810bcf8:	3728      	adds	r7, #40	@ 0x28
 810bcfa:	46bd      	mov	sp, r7
 810bcfc:	bd80      	pop	{r7, pc}
 810bcfe:	bf00      	nop
 810bd00:	100145cc 	.word	0x100145cc

0810bd04 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 810bd04:	b580      	push	{r7, lr}
 810bd06:	b084      	sub	sp, #16
 810bd08:	af00      	add	r7, sp, #0
 810bd0a:	6078      	str	r0, [r7, #4]
 810bd0c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 810bd0e:	2004      	movs	r0, #4
 810bd10:	f001 f934 	bl	810cf7c <memp_malloc>
 810bd14:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 810bd16:	68fb      	ldr	r3, [r7, #12]
 810bd18:	2b00      	cmp	r3, #0
 810bd1a:	d110      	bne.n	810bd3e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 810bd1c:	6839      	ldr	r1, [r7, #0]
 810bd1e:	6878      	ldr	r0, [r7, #4]
 810bd20:	f7ff ff8e 	bl	810bc40 <ip_reass_remove_oldest_datagram>
 810bd24:	4602      	mov	r2, r0
 810bd26:	683b      	ldr	r3, [r7, #0]
 810bd28:	4293      	cmp	r3, r2
 810bd2a:	dc03      	bgt.n	810bd34 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 810bd2c:	2004      	movs	r0, #4
 810bd2e:	f001 f925 	bl	810cf7c <memp_malloc>
 810bd32:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 810bd34:	68fb      	ldr	r3, [r7, #12]
 810bd36:	2b00      	cmp	r3, #0
 810bd38:	d101      	bne.n	810bd3e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 810bd3a:	2300      	movs	r3, #0
 810bd3c:	e016      	b.n	810bd6c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 810bd3e:	2220      	movs	r2, #32
 810bd40:	2100      	movs	r1, #0
 810bd42:	68f8      	ldr	r0, [r7, #12]
 810bd44:	f00b fd42 	bl	81177cc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 810bd48:	68fb      	ldr	r3, [r7, #12]
 810bd4a:	220f      	movs	r2, #15
 810bd4c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 810bd4e:	4b09      	ldr	r3, [pc, #36]	@ (810bd74 <ip_reass_enqueue_new_datagram+0x70>)
 810bd50:	681a      	ldr	r2, [r3, #0]
 810bd52:	68fb      	ldr	r3, [r7, #12]
 810bd54:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 810bd56:	4a07      	ldr	r2, [pc, #28]	@ (810bd74 <ip_reass_enqueue_new_datagram+0x70>)
 810bd58:	68fb      	ldr	r3, [r7, #12]
 810bd5a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 810bd5c:	68fb      	ldr	r3, [r7, #12]
 810bd5e:	3308      	adds	r3, #8
 810bd60:	2214      	movs	r2, #20
 810bd62:	6879      	ldr	r1, [r7, #4]
 810bd64:	4618      	mov	r0, r3
 810bd66:	f00b fde6 	bl	8117936 <memcpy>
  return ipr;
 810bd6a:	68fb      	ldr	r3, [r7, #12]
}
 810bd6c:	4618      	mov	r0, r3
 810bd6e:	3710      	adds	r7, #16
 810bd70:	46bd      	mov	sp, r7
 810bd72:	bd80      	pop	{r7, pc}
 810bd74:	100145cc 	.word	0x100145cc

0810bd78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 810bd78:	b580      	push	{r7, lr}
 810bd7a:	b082      	sub	sp, #8
 810bd7c:	af00      	add	r7, sp, #0
 810bd7e:	6078      	str	r0, [r7, #4]
 810bd80:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 810bd82:	4b10      	ldr	r3, [pc, #64]	@ (810bdc4 <ip_reass_dequeue_datagram+0x4c>)
 810bd84:	681b      	ldr	r3, [r3, #0]
 810bd86:	687a      	ldr	r2, [r7, #4]
 810bd88:	429a      	cmp	r2, r3
 810bd8a:	d104      	bne.n	810bd96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 810bd8c:	687b      	ldr	r3, [r7, #4]
 810bd8e:	681b      	ldr	r3, [r3, #0]
 810bd90:	4a0c      	ldr	r2, [pc, #48]	@ (810bdc4 <ip_reass_dequeue_datagram+0x4c>)
 810bd92:	6013      	str	r3, [r2, #0]
 810bd94:	e00d      	b.n	810bdb2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 810bd96:	683b      	ldr	r3, [r7, #0]
 810bd98:	2b00      	cmp	r3, #0
 810bd9a:	d106      	bne.n	810bdaa <ip_reass_dequeue_datagram+0x32>
 810bd9c:	4b0a      	ldr	r3, [pc, #40]	@ (810bdc8 <ip_reass_dequeue_datagram+0x50>)
 810bd9e:	f240 1245 	movw	r2, #325	@ 0x145
 810bda2:	490a      	ldr	r1, [pc, #40]	@ (810bdcc <ip_reass_dequeue_datagram+0x54>)
 810bda4:	480a      	ldr	r0, [pc, #40]	@ (810bdd0 <ip_reass_dequeue_datagram+0x58>)
 810bda6:	f00b fb47 	bl	8117438 <iprintf>
    prev->next = ipr->next;
 810bdaa:	687b      	ldr	r3, [r7, #4]
 810bdac:	681a      	ldr	r2, [r3, #0]
 810bdae:	683b      	ldr	r3, [r7, #0]
 810bdb0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 810bdb2:	6879      	ldr	r1, [r7, #4]
 810bdb4:	2004      	movs	r0, #4
 810bdb6:	f001 f951 	bl	810d05c <memp_free>
}
 810bdba:	bf00      	nop
 810bdbc:	3708      	adds	r7, #8
 810bdbe:	46bd      	mov	sp, r7
 810bdc0:	bd80      	pop	{r7, pc}
 810bdc2:	bf00      	nop
 810bdc4:	100145cc 	.word	0x100145cc
 810bdc8:	0811c854 	.word	0x0811c854
 810bdcc:	0811c948 	.word	0x0811c948
 810bdd0:	0811c8c8 	.word	0x0811c8c8

0810bdd4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 810bdd4:	b580      	push	{r7, lr}
 810bdd6:	b08c      	sub	sp, #48	@ 0x30
 810bdd8:	af00      	add	r7, sp, #0
 810bdda:	60f8      	str	r0, [r7, #12]
 810bddc:	60b9      	str	r1, [r7, #8]
 810bdde:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 810bde0:	2300      	movs	r3, #0
 810bde2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 810bde4:	2301      	movs	r3, #1
 810bde6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 810bde8:	68bb      	ldr	r3, [r7, #8]
 810bdea:	685b      	ldr	r3, [r3, #4]
 810bdec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 810bdee:	69fb      	ldr	r3, [r7, #28]
 810bdf0:	885b      	ldrh	r3, [r3, #2]
 810bdf2:	b29b      	uxth	r3, r3
 810bdf4:	4618      	mov	r0, r3
 810bdf6:	f7fe f8a3 	bl	8109f40 <lwip_htons>
 810bdfa:	4603      	mov	r3, r0
 810bdfc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 810bdfe:	69fb      	ldr	r3, [r7, #28]
 810be00:	781b      	ldrb	r3, [r3, #0]
 810be02:	f003 030f 	and.w	r3, r3, #15
 810be06:	b2db      	uxtb	r3, r3
 810be08:	009b      	lsls	r3, r3, #2
 810be0a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 810be0c:	7e7b      	ldrb	r3, [r7, #25]
 810be0e:	b29b      	uxth	r3, r3
 810be10:	8b7a      	ldrh	r2, [r7, #26]
 810be12:	429a      	cmp	r2, r3
 810be14:	d202      	bcs.n	810be1c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 810be16:	f04f 33ff 	mov.w	r3, #4294967295
 810be1a:	e135      	b.n	810c088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 810be1c:	7e7b      	ldrb	r3, [r7, #25]
 810be1e:	b29b      	uxth	r3, r3
 810be20:	8b7a      	ldrh	r2, [r7, #26]
 810be22:	1ad3      	subs	r3, r2, r3
 810be24:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 810be26:	69fb      	ldr	r3, [r7, #28]
 810be28:	88db      	ldrh	r3, [r3, #6]
 810be2a:	b29b      	uxth	r3, r3
 810be2c:	4618      	mov	r0, r3
 810be2e:	f7fe f887 	bl	8109f40 <lwip_htons>
 810be32:	4603      	mov	r3, r0
 810be34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810be38:	b29b      	uxth	r3, r3
 810be3a:	00db      	lsls	r3, r3, #3
 810be3c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 810be3e:	68bb      	ldr	r3, [r7, #8]
 810be40:	685b      	ldr	r3, [r3, #4]
 810be42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 810be44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810be46:	2200      	movs	r2, #0
 810be48:	701a      	strb	r2, [r3, #0]
 810be4a:	2200      	movs	r2, #0
 810be4c:	705a      	strb	r2, [r3, #1]
 810be4e:	2200      	movs	r2, #0
 810be50:	709a      	strb	r2, [r3, #2]
 810be52:	2200      	movs	r2, #0
 810be54:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 810be56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810be58:	8afa      	ldrh	r2, [r7, #22]
 810be5a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 810be5c:	8afa      	ldrh	r2, [r7, #22]
 810be5e:	8b7b      	ldrh	r3, [r7, #26]
 810be60:	4413      	add	r3, r2
 810be62:	b29a      	uxth	r2, r3
 810be64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810be66:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 810be68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810be6a:	88db      	ldrh	r3, [r3, #6]
 810be6c:	b29b      	uxth	r3, r3
 810be6e:	8afa      	ldrh	r2, [r7, #22]
 810be70:	429a      	cmp	r2, r3
 810be72:	d902      	bls.n	810be7a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 810be74:	f04f 33ff 	mov.w	r3, #4294967295
 810be78:	e106      	b.n	810c088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 810be7a:	68fb      	ldr	r3, [r7, #12]
 810be7c:	685b      	ldr	r3, [r3, #4]
 810be7e:	627b      	str	r3, [r7, #36]	@ 0x24
 810be80:	e068      	b.n	810bf54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 810be82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810be84:	685b      	ldr	r3, [r3, #4]
 810be86:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 810be88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810be8a:	889b      	ldrh	r3, [r3, #4]
 810be8c:	b29a      	uxth	r2, r3
 810be8e:	693b      	ldr	r3, [r7, #16]
 810be90:	889b      	ldrh	r3, [r3, #4]
 810be92:	b29b      	uxth	r3, r3
 810be94:	429a      	cmp	r2, r3
 810be96:	d235      	bcs.n	810bf04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 810be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810be9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810be9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 810be9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bea0:	2b00      	cmp	r3, #0
 810bea2:	d020      	beq.n	810bee6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 810bea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bea6:	889b      	ldrh	r3, [r3, #4]
 810bea8:	b29a      	uxth	r2, r3
 810beaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810beac:	88db      	ldrh	r3, [r3, #6]
 810beae:	b29b      	uxth	r3, r3
 810beb0:	429a      	cmp	r2, r3
 810beb2:	d307      	bcc.n	810bec4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 810beb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810beb6:	88db      	ldrh	r3, [r3, #6]
 810beb8:	b29a      	uxth	r2, r3
 810beba:	693b      	ldr	r3, [r7, #16]
 810bebc:	889b      	ldrh	r3, [r3, #4]
 810bebe:	b29b      	uxth	r3, r3
 810bec0:	429a      	cmp	r2, r3
 810bec2:	d902      	bls.n	810beca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 810bec4:	f04f 33ff 	mov.w	r3, #4294967295
 810bec8:	e0de      	b.n	810c088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 810beca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810becc:	68ba      	ldr	r2, [r7, #8]
 810bece:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 810bed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bed2:	88db      	ldrh	r3, [r3, #6]
 810bed4:	b29a      	uxth	r2, r3
 810bed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bed8:	889b      	ldrh	r3, [r3, #4]
 810beda:	b29b      	uxth	r3, r3
 810bedc:	429a      	cmp	r2, r3
 810bede:	d03d      	beq.n	810bf5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 810bee0:	2300      	movs	r3, #0
 810bee2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 810bee4:	e03a      	b.n	810bf5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 810bee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bee8:	88db      	ldrh	r3, [r3, #6]
 810beea:	b29a      	uxth	r2, r3
 810beec:	693b      	ldr	r3, [r7, #16]
 810beee:	889b      	ldrh	r3, [r3, #4]
 810bef0:	b29b      	uxth	r3, r3
 810bef2:	429a      	cmp	r2, r3
 810bef4:	d902      	bls.n	810befc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 810bef6:	f04f 33ff 	mov.w	r3, #4294967295
 810befa:	e0c5      	b.n	810c088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 810befc:	68fb      	ldr	r3, [r7, #12]
 810befe:	68ba      	ldr	r2, [r7, #8]
 810bf00:	605a      	str	r2, [r3, #4]
      break;
 810bf02:	e02b      	b.n	810bf5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 810bf04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bf06:	889b      	ldrh	r3, [r3, #4]
 810bf08:	b29a      	uxth	r2, r3
 810bf0a:	693b      	ldr	r3, [r7, #16]
 810bf0c:	889b      	ldrh	r3, [r3, #4]
 810bf0e:	b29b      	uxth	r3, r3
 810bf10:	429a      	cmp	r2, r3
 810bf12:	d102      	bne.n	810bf1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 810bf14:	f04f 33ff 	mov.w	r3, #4294967295
 810bf18:	e0b6      	b.n	810c088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 810bf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bf1c:	889b      	ldrh	r3, [r3, #4]
 810bf1e:	b29a      	uxth	r2, r3
 810bf20:	693b      	ldr	r3, [r7, #16]
 810bf22:	88db      	ldrh	r3, [r3, #6]
 810bf24:	b29b      	uxth	r3, r3
 810bf26:	429a      	cmp	r2, r3
 810bf28:	d202      	bcs.n	810bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 810bf2a:	f04f 33ff 	mov.w	r3, #4294967295
 810bf2e:	e0ab      	b.n	810c088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 810bf30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf32:	2b00      	cmp	r3, #0
 810bf34:	d009      	beq.n	810bf4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 810bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf38:	88db      	ldrh	r3, [r3, #6]
 810bf3a:	b29a      	uxth	r2, r3
 810bf3c:	693b      	ldr	r3, [r7, #16]
 810bf3e:	889b      	ldrh	r3, [r3, #4]
 810bf40:	b29b      	uxth	r3, r3
 810bf42:	429a      	cmp	r2, r3
 810bf44:	d001      	beq.n	810bf4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 810bf46:	2300      	movs	r3, #0
 810bf48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 810bf4a:	693b      	ldr	r3, [r7, #16]
 810bf4c:	681b      	ldr	r3, [r3, #0]
 810bf4e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 810bf50:	693b      	ldr	r3, [r7, #16]
 810bf52:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 810bf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bf56:	2b00      	cmp	r3, #0
 810bf58:	d193      	bne.n	810be82 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 810bf5a:	e000      	b.n	810bf5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 810bf5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 810bf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bf60:	2b00      	cmp	r3, #0
 810bf62:	d12d      	bne.n	810bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 810bf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf66:	2b00      	cmp	r3, #0
 810bf68:	d01c      	beq.n	810bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 810bf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf6c:	88db      	ldrh	r3, [r3, #6]
 810bf6e:	b29a      	uxth	r2, r3
 810bf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bf72:	889b      	ldrh	r3, [r3, #4]
 810bf74:	b29b      	uxth	r3, r3
 810bf76:	429a      	cmp	r2, r3
 810bf78:	d906      	bls.n	810bf88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 810bf7a:	4b45      	ldr	r3, [pc, #276]	@ (810c090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810bf7c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 810bf80:	4944      	ldr	r1, [pc, #272]	@ (810c094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 810bf82:	4845      	ldr	r0, [pc, #276]	@ (810c098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810bf84:	f00b fa58 	bl	8117438 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 810bf88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf8a:	68ba      	ldr	r2, [r7, #8]
 810bf8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 810bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf90:	88db      	ldrh	r3, [r3, #6]
 810bf92:	b29a      	uxth	r2, r3
 810bf94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bf96:	889b      	ldrh	r3, [r3, #4]
 810bf98:	b29b      	uxth	r3, r3
 810bf9a:	429a      	cmp	r2, r3
 810bf9c:	d010      	beq.n	810bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 810bf9e:	2300      	movs	r3, #0
 810bfa0:	623b      	str	r3, [r7, #32]
 810bfa2:	e00d      	b.n	810bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 810bfa4:	68fb      	ldr	r3, [r7, #12]
 810bfa6:	685b      	ldr	r3, [r3, #4]
 810bfa8:	2b00      	cmp	r3, #0
 810bfaa:	d006      	beq.n	810bfba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 810bfac:	4b38      	ldr	r3, [pc, #224]	@ (810c090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810bfae:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 810bfb2:	493a      	ldr	r1, [pc, #232]	@ (810c09c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 810bfb4:	4838      	ldr	r0, [pc, #224]	@ (810c098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810bfb6:	f00b fa3f 	bl	8117438 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 810bfba:	68fb      	ldr	r3, [r7, #12]
 810bfbc:	68ba      	ldr	r2, [r7, #8]
 810bfbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 810bfc0:	687b      	ldr	r3, [r7, #4]
 810bfc2:	2b00      	cmp	r3, #0
 810bfc4:	d105      	bne.n	810bfd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 810bfc6:	68fb      	ldr	r3, [r7, #12]
 810bfc8:	7f9b      	ldrb	r3, [r3, #30]
 810bfca:	f003 0301 	and.w	r3, r3, #1
 810bfce:	2b00      	cmp	r3, #0
 810bfd0:	d059      	beq.n	810c086 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 810bfd2:	6a3b      	ldr	r3, [r7, #32]
 810bfd4:	2b00      	cmp	r3, #0
 810bfd6:	d04f      	beq.n	810c078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 810bfd8:	68fb      	ldr	r3, [r7, #12]
 810bfda:	685b      	ldr	r3, [r3, #4]
 810bfdc:	2b00      	cmp	r3, #0
 810bfde:	d006      	beq.n	810bfee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 810bfe0:	68fb      	ldr	r3, [r7, #12]
 810bfe2:	685b      	ldr	r3, [r3, #4]
 810bfe4:	685b      	ldr	r3, [r3, #4]
 810bfe6:	889b      	ldrh	r3, [r3, #4]
 810bfe8:	b29b      	uxth	r3, r3
 810bfea:	2b00      	cmp	r3, #0
 810bfec:	d002      	beq.n	810bff4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 810bfee:	2300      	movs	r3, #0
 810bff0:	623b      	str	r3, [r7, #32]
 810bff2:	e041      	b.n	810c078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 810bff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bff6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 810bff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810bffa:	681b      	ldr	r3, [r3, #0]
 810bffc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 810bffe:	e012      	b.n	810c026 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 810c000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c002:	685b      	ldr	r3, [r3, #4]
 810c004:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 810c006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c008:	88db      	ldrh	r3, [r3, #6]
 810c00a:	b29a      	uxth	r2, r3
 810c00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c00e:	889b      	ldrh	r3, [r3, #4]
 810c010:	b29b      	uxth	r3, r3
 810c012:	429a      	cmp	r2, r3
 810c014:	d002      	beq.n	810c01c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 810c016:	2300      	movs	r3, #0
 810c018:	623b      	str	r3, [r7, #32]
            break;
 810c01a:	e007      	b.n	810c02c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 810c01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c01e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 810c020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c022:	681b      	ldr	r3, [r3, #0]
 810c024:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 810c026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c028:	2b00      	cmp	r3, #0
 810c02a:	d1e9      	bne.n	810c000 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 810c02c:	6a3b      	ldr	r3, [r7, #32]
 810c02e:	2b00      	cmp	r3, #0
 810c030:	d022      	beq.n	810c078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 810c032:	68fb      	ldr	r3, [r7, #12]
 810c034:	685b      	ldr	r3, [r3, #4]
 810c036:	2b00      	cmp	r3, #0
 810c038:	d106      	bne.n	810c048 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 810c03a:	4b15      	ldr	r3, [pc, #84]	@ (810c090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810c03c:	f240 12df 	movw	r2, #479	@ 0x1df
 810c040:	4917      	ldr	r1, [pc, #92]	@ (810c0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 810c042:	4815      	ldr	r0, [pc, #84]	@ (810c098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810c044:	f00b f9f8 	bl	8117438 <iprintf>
          LWIP_ASSERT("sanity check",
 810c048:	68fb      	ldr	r3, [r7, #12]
 810c04a:	685b      	ldr	r3, [r3, #4]
 810c04c:	685b      	ldr	r3, [r3, #4]
 810c04e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810c050:	429a      	cmp	r2, r3
 810c052:	d106      	bne.n	810c062 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 810c054:	4b0e      	ldr	r3, [pc, #56]	@ (810c090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810c056:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810c05a:	4911      	ldr	r1, [pc, #68]	@ (810c0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 810c05c:	480e      	ldr	r0, [pc, #56]	@ (810c098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810c05e:	f00b f9eb 	bl	8117438 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 810c062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c064:	681b      	ldr	r3, [r3, #0]
 810c066:	2b00      	cmp	r3, #0
 810c068:	d006      	beq.n	810c078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 810c06a:	4b09      	ldr	r3, [pc, #36]	@ (810c090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810c06c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 810c070:	490c      	ldr	r1, [pc, #48]	@ (810c0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 810c072:	4809      	ldr	r0, [pc, #36]	@ (810c098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810c074:	f00b f9e0 	bl	8117438 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 810c078:	6a3b      	ldr	r3, [r7, #32]
 810c07a:	2b00      	cmp	r3, #0
 810c07c:	bf14      	ite	ne
 810c07e:	2301      	movne	r3, #1
 810c080:	2300      	moveq	r3, #0
 810c082:	b2db      	uxtb	r3, r3
 810c084:	e000      	b.n	810c088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 810c086:	2300      	movs	r3, #0
}
 810c088:	4618      	mov	r0, r3
 810c08a:	3730      	adds	r7, #48	@ 0x30
 810c08c:	46bd      	mov	sp, r7
 810c08e:	bd80      	pop	{r7, pc}
 810c090:	0811c854 	.word	0x0811c854
 810c094:	0811c964 	.word	0x0811c964
 810c098:	0811c8c8 	.word	0x0811c8c8
 810c09c:	0811c984 	.word	0x0811c984
 810c0a0:	0811c9bc 	.word	0x0811c9bc
 810c0a4:	0811c9cc 	.word	0x0811c9cc

0810c0a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 810c0a8:	b580      	push	{r7, lr}
 810c0aa:	b08e      	sub	sp, #56	@ 0x38
 810c0ac:	af00      	add	r7, sp, #0
 810c0ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 810c0b0:	687b      	ldr	r3, [r7, #4]
 810c0b2:	685b      	ldr	r3, [r3, #4]
 810c0b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 810c0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c0b8:	781b      	ldrb	r3, [r3, #0]
 810c0ba:	f003 030f 	and.w	r3, r3, #15
 810c0be:	b2db      	uxtb	r3, r3
 810c0c0:	009b      	lsls	r3, r3, #2
 810c0c2:	b2db      	uxtb	r3, r3
 810c0c4:	2b14      	cmp	r3, #20
 810c0c6:	f040 8171 	bne.w	810c3ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 810c0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c0cc:	88db      	ldrh	r3, [r3, #6]
 810c0ce:	b29b      	uxth	r3, r3
 810c0d0:	4618      	mov	r0, r3
 810c0d2:	f7fd ff35 	bl	8109f40 <lwip_htons>
 810c0d6:	4603      	mov	r3, r0
 810c0d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c0dc:	b29b      	uxth	r3, r3
 810c0de:	00db      	lsls	r3, r3, #3
 810c0e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 810c0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c0e4:	885b      	ldrh	r3, [r3, #2]
 810c0e6:	b29b      	uxth	r3, r3
 810c0e8:	4618      	mov	r0, r3
 810c0ea:	f7fd ff29 	bl	8109f40 <lwip_htons>
 810c0ee:	4603      	mov	r3, r0
 810c0f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 810c0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c0f4:	781b      	ldrb	r3, [r3, #0]
 810c0f6:	f003 030f 	and.w	r3, r3, #15
 810c0fa:	b2db      	uxtb	r3, r3
 810c0fc:	009b      	lsls	r3, r3, #2
 810c0fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 810c102:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 810c106:	b29b      	uxth	r3, r3
 810c108:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810c10a:	429a      	cmp	r2, r3
 810c10c:	f0c0 8150 	bcc.w	810c3b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 810c110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 810c114:	b29b      	uxth	r3, r3
 810c116:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810c118:	1ad3      	subs	r3, r2, r3
 810c11a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 810c11c:	6878      	ldr	r0, [r7, #4]
 810c11e:	f001 fe9b 	bl	810de58 <pbuf_clen>
 810c122:	4603      	mov	r3, r0
 810c124:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 810c126:	4b8c      	ldr	r3, [pc, #560]	@ (810c358 <ip4_reass+0x2b0>)
 810c128:	881b      	ldrh	r3, [r3, #0]
 810c12a:	461a      	mov	r2, r3
 810c12c:	8c3b      	ldrh	r3, [r7, #32]
 810c12e:	4413      	add	r3, r2
 810c130:	2b0a      	cmp	r3, #10
 810c132:	dd10      	ble.n	810c156 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 810c134:	8c3b      	ldrh	r3, [r7, #32]
 810c136:	4619      	mov	r1, r3
 810c138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810c13a:	f7ff fd81 	bl	810bc40 <ip_reass_remove_oldest_datagram>
 810c13e:	4603      	mov	r3, r0
 810c140:	2b00      	cmp	r3, #0
 810c142:	f000 8137 	beq.w	810c3b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 810c146:	4b84      	ldr	r3, [pc, #528]	@ (810c358 <ip4_reass+0x2b0>)
 810c148:	881b      	ldrh	r3, [r3, #0]
 810c14a:	461a      	mov	r2, r3
 810c14c:	8c3b      	ldrh	r3, [r7, #32]
 810c14e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 810c150:	2b0a      	cmp	r3, #10
 810c152:	f300 812f 	bgt.w	810c3b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 810c156:	4b81      	ldr	r3, [pc, #516]	@ (810c35c <ip4_reass+0x2b4>)
 810c158:	681b      	ldr	r3, [r3, #0]
 810c15a:	633b      	str	r3, [r7, #48]	@ 0x30
 810c15c:	e015      	b.n	810c18a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 810c15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c160:	695a      	ldr	r2, [r3, #20]
 810c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c164:	68db      	ldr	r3, [r3, #12]
 810c166:	429a      	cmp	r2, r3
 810c168:	d10c      	bne.n	810c184 <ip4_reass+0xdc>
 810c16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c16c:	699a      	ldr	r2, [r3, #24]
 810c16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c170:	691b      	ldr	r3, [r3, #16]
 810c172:	429a      	cmp	r2, r3
 810c174:	d106      	bne.n	810c184 <ip4_reass+0xdc>
 810c176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c178:	899a      	ldrh	r2, [r3, #12]
 810c17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c17c:	889b      	ldrh	r3, [r3, #4]
 810c17e:	b29b      	uxth	r3, r3
 810c180:	429a      	cmp	r2, r3
 810c182:	d006      	beq.n	810c192 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 810c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c186:	681b      	ldr	r3, [r3, #0]
 810c188:	633b      	str	r3, [r7, #48]	@ 0x30
 810c18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c18c:	2b00      	cmp	r3, #0
 810c18e:	d1e6      	bne.n	810c15e <ip4_reass+0xb6>
 810c190:	e000      	b.n	810c194 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 810c192:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 810c194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c196:	2b00      	cmp	r3, #0
 810c198:	d109      	bne.n	810c1ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 810c19a:	8c3b      	ldrh	r3, [r7, #32]
 810c19c:	4619      	mov	r1, r3
 810c19e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810c1a0:	f7ff fdb0 	bl	810bd04 <ip_reass_enqueue_new_datagram>
 810c1a4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 810c1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c1a8:	2b00      	cmp	r3, #0
 810c1aa:	d11c      	bne.n	810c1e6 <ip4_reass+0x13e>
      goto nullreturn;
 810c1ac:	e105      	b.n	810c3ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 810c1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c1b0:	88db      	ldrh	r3, [r3, #6]
 810c1b2:	b29b      	uxth	r3, r3
 810c1b4:	4618      	mov	r0, r3
 810c1b6:	f7fd fec3 	bl	8109f40 <lwip_htons>
 810c1ba:	4603      	mov	r3, r0
 810c1bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c1c0:	2b00      	cmp	r3, #0
 810c1c2:	d110      	bne.n	810c1e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 810c1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c1c6:	89db      	ldrh	r3, [r3, #14]
 810c1c8:	4618      	mov	r0, r3
 810c1ca:	f7fd feb9 	bl	8109f40 <lwip_htons>
 810c1ce:	4603      	mov	r3, r0
 810c1d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 810c1d4:	2b00      	cmp	r3, #0
 810c1d6:	d006      	beq.n	810c1e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 810c1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c1da:	3308      	adds	r3, #8
 810c1dc:	2214      	movs	r2, #20
 810c1de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810c1e0:	4618      	mov	r0, r3
 810c1e2:	f00b fba8 	bl	8117936 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 810c1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c1e8:	88db      	ldrh	r3, [r3, #6]
 810c1ea:	b29b      	uxth	r3, r3
 810c1ec:	f003 0320 	and.w	r3, r3, #32
 810c1f0:	2b00      	cmp	r3, #0
 810c1f2:	bf0c      	ite	eq
 810c1f4:	2301      	moveq	r3, #1
 810c1f6:	2300      	movne	r3, #0
 810c1f8:	b2db      	uxtb	r3, r3
 810c1fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 810c1fc:	69fb      	ldr	r3, [r7, #28]
 810c1fe:	2b00      	cmp	r3, #0
 810c200:	d00e      	beq.n	810c220 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 810c202:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 810c204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810c206:	4413      	add	r3, r2
 810c208:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 810c20a:	8b7a      	ldrh	r2, [r7, #26]
 810c20c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810c20e:	429a      	cmp	r2, r3
 810c210:	f0c0 80a0 	bcc.w	810c354 <ip4_reass+0x2ac>
 810c214:	8b7b      	ldrh	r3, [r7, #26]
 810c216:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 810c21a:	4293      	cmp	r3, r2
 810c21c:	f200 809a 	bhi.w	810c354 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 810c220:	69fa      	ldr	r2, [r7, #28]
 810c222:	6879      	ldr	r1, [r7, #4]
 810c224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c226:	f7ff fdd5 	bl	810bdd4 <ip_reass_chain_frag_into_datagram_and_validate>
 810c22a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 810c22c:	697b      	ldr	r3, [r7, #20]
 810c22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c232:	f000 809b 	beq.w	810c36c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 810c236:	4b48      	ldr	r3, [pc, #288]	@ (810c358 <ip4_reass+0x2b0>)
 810c238:	881a      	ldrh	r2, [r3, #0]
 810c23a:	8c3b      	ldrh	r3, [r7, #32]
 810c23c:	4413      	add	r3, r2
 810c23e:	b29a      	uxth	r2, r3
 810c240:	4b45      	ldr	r3, [pc, #276]	@ (810c358 <ip4_reass+0x2b0>)
 810c242:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 810c244:	69fb      	ldr	r3, [r7, #28]
 810c246:	2b00      	cmp	r3, #0
 810c248:	d00d      	beq.n	810c266 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 810c24a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 810c24c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810c24e:	4413      	add	r3, r2
 810c250:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 810c252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c254:	8a7a      	ldrh	r2, [r7, #18]
 810c256:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 810c258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c25a:	7f9b      	ldrb	r3, [r3, #30]
 810c25c:	f043 0301 	orr.w	r3, r3, #1
 810c260:	b2da      	uxtb	r2, r3
 810c262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c264:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 810c266:	697b      	ldr	r3, [r7, #20]
 810c268:	2b01      	cmp	r3, #1
 810c26a:	d171      	bne.n	810c350 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 810c26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c26e:	8b9b      	ldrh	r3, [r3, #28]
 810c270:	3314      	adds	r3, #20
 810c272:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 810c274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c276:	685b      	ldr	r3, [r3, #4]
 810c278:	685b      	ldr	r3, [r3, #4]
 810c27a:	681b      	ldr	r3, [r3, #0]
 810c27c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 810c27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c280:	685b      	ldr	r3, [r3, #4]
 810c282:	685b      	ldr	r3, [r3, #4]
 810c284:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 810c286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c288:	3308      	adds	r3, #8
 810c28a:	2214      	movs	r2, #20
 810c28c:	4619      	mov	r1, r3
 810c28e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810c290:	f00b fb51 	bl	8117936 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 810c294:	8a3b      	ldrh	r3, [r7, #16]
 810c296:	4618      	mov	r0, r3
 810c298:	f7fd fe52 	bl	8109f40 <lwip_htons>
 810c29c:	4603      	mov	r3, r0
 810c29e:	461a      	mov	r2, r3
 810c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c2a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 810c2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c2a6:	2200      	movs	r2, #0
 810c2a8:	719a      	strb	r2, [r3, #6]
 810c2aa:	2200      	movs	r2, #0
 810c2ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 810c2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c2b0:	2200      	movs	r2, #0
 810c2b2:	729a      	strb	r2, [r3, #10]
 810c2b4:	2200      	movs	r2, #0
 810c2b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 810c2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c2ba:	685b      	ldr	r3, [r3, #4]
 810c2bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 810c2be:	e00d      	b.n	810c2dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 810c2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c2c2:	685b      	ldr	r3, [r3, #4]
 810c2c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 810c2c6:	2114      	movs	r1, #20
 810c2c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810c2ca:	f001 fcb7 	bl	810dc3c <pbuf_remove_header>
      pbuf_cat(p, r);
 810c2ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810c2d0:	6878      	ldr	r0, [r7, #4]
 810c2d2:	f001 fdfb 	bl	810decc <pbuf_cat>
      r = iprh->next_pbuf;
 810c2d6:	68fb      	ldr	r3, [r7, #12]
 810c2d8:	681b      	ldr	r3, [r3, #0]
 810c2da:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 810c2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c2de:	2b00      	cmp	r3, #0
 810c2e0:	d1ee      	bne.n	810c2c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 810c2e2:	4b1e      	ldr	r3, [pc, #120]	@ (810c35c <ip4_reass+0x2b4>)
 810c2e4:	681b      	ldr	r3, [r3, #0]
 810c2e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c2e8:	429a      	cmp	r2, r3
 810c2ea:	d102      	bne.n	810c2f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 810c2ec:	2300      	movs	r3, #0
 810c2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810c2f0:	e010      	b.n	810c314 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 810c2f2:	4b1a      	ldr	r3, [pc, #104]	@ (810c35c <ip4_reass+0x2b4>)
 810c2f4:	681b      	ldr	r3, [r3, #0]
 810c2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810c2f8:	e007      	b.n	810c30a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 810c2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c2fc:	681b      	ldr	r3, [r3, #0]
 810c2fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c300:	429a      	cmp	r2, r3
 810c302:	d006      	beq.n	810c312 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 810c304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c306:	681b      	ldr	r3, [r3, #0]
 810c308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810c30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c30c:	2b00      	cmp	r3, #0
 810c30e:	d1f4      	bne.n	810c2fa <ip4_reass+0x252>
 810c310:	e000      	b.n	810c314 <ip4_reass+0x26c>
          break;
 810c312:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 810c314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810c316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c318:	f7ff fd2e 	bl	810bd78 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 810c31c:	6878      	ldr	r0, [r7, #4]
 810c31e:	f001 fd9b 	bl	810de58 <pbuf_clen>
 810c322:	4603      	mov	r3, r0
 810c324:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 810c326:	4b0c      	ldr	r3, [pc, #48]	@ (810c358 <ip4_reass+0x2b0>)
 810c328:	881b      	ldrh	r3, [r3, #0]
 810c32a:	8c3a      	ldrh	r2, [r7, #32]
 810c32c:	429a      	cmp	r2, r3
 810c32e:	d906      	bls.n	810c33e <ip4_reass+0x296>
 810c330:	4b0b      	ldr	r3, [pc, #44]	@ (810c360 <ip4_reass+0x2b8>)
 810c332:	f240 229b 	movw	r2, #667	@ 0x29b
 810c336:	490b      	ldr	r1, [pc, #44]	@ (810c364 <ip4_reass+0x2bc>)
 810c338:	480b      	ldr	r0, [pc, #44]	@ (810c368 <ip4_reass+0x2c0>)
 810c33a:	f00b f87d 	bl	8117438 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 810c33e:	4b06      	ldr	r3, [pc, #24]	@ (810c358 <ip4_reass+0x2b0>)
 810c340:	881a      	ldrh	r2, [r3, #0]
 810c342:	8c3b      	ldrh	r3, [r7, #32]
 810c344:	1ad3      	subs	r3, r2, r3
 810c346:	b29a      	uxth	r2, r3
 810c348:	4b03      	ldr	r3, [pc, #12]	@ (810c358 <ip4_reass+0x2b0>)
 810c34a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 810c34c:	687b      	ldr	r3, [r7, #4]
 810c34e:	e038      	b.n	810c3c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 810c350:	2300      	movs	r3, #0
 810c352:	e036      	b.n	810c3c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 810c354:	bf00      	nop
 810c356:	e00a      	b.n	810c36e <ip4_reass+0x2c6>
 810c358:	100145d0 	.word	0x100145d0
 810c35c:	100145cc 	.word	0x100145cc
 810c360:	0811c854 	.word	0x0811c854
 810c364:	0811c9f0 	.word	0x0811c9f0
 810c368:	0811c8c8 	.word	0x0811c8c8
    goto nullreturn_ipr;
 810c36c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 810c36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c370:	2b00      	cmp	r3, #0
 810c372:	d106      	bne.n	810c382 <ip4_reass+0x2da>
 810c374:	4b15      	ldr	r3, [pc, #84]	@ (810c3cc <ip4_reass+0x324>)
 810c376:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 810c37a:	4915      	ldr	r1, [pc, #84]	@ (810c3d0 <ip4_reass+0x328>)
 810c37c:	4815      	ldr	r0, [pc, #84]	@ (810c3d4 <ip4_reass+0x32c>)
 810c37e:	f00b f85b 	bl	8117438 <iprintf>
  if (ipr->p == NULL) {
 810c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c384:	685b      	ldr	r3, [r3, #4]
 810c386:	2b00      	cmp	r3, #0
 810c388:	d116      	bne.n	810c3b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 810c38a:	4b13      	ldr	r3, [pc, #76]	@ (810c3d8 <ip4_reass+0x330>)
 810c38c:	681b      	ldr	r3, [r3, #0]
 810c38e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c390:	429a      	cmp	r2, r3
 810c392:	d006      	beq.n	810c3a2 <ip4_reass+0x2fa>
 810c394:	4b0d      	ldr	r3, [pc, #52]	@ (810c3cc <ip4_reass+0x324>)
 810c396:	f240 22ab 	movw	r2, #683	@ 0x2ab
 810c39a:	4910      	ldr	r1, [pc, #64]	@ (810c3dc <ip4_reass+0x334>)
 810c39c:	480d      	ldr	r0, [pc, #52]	@ (810c3d4 <ip4_reass+0x32c>)
 810c39e:	f00b f84b 	bl	8117438 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 810c3a2:	2100      	movs	r1, #0
 810c3a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c3a6:	f7ff fce7 	bl	810bd78 <ip_reass_dequeue_datagram>
 810c3aa:	e006      	b.n	810c3ba <ip4_reass+0x312>
    goto nullreturn;
 810c3ac:	bf00      	nop
 810c3ae:	e004      	b.n	810c3ba <ip4_reass+0x312>
    goto nullreturn;
 810c3b0:	bf00      	nop
 810c3b2:	e002      	b.n	810c3ba <ip4_reass+0x312>
      goto nullreturn;
 810c3b4:	bf00      	nop
 810c3b6:	e000      	b.n	810c3ba <ip4_reass+0x312>
  }

nullreturn:
 810c3b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 810c3ba:	6878      	ldr	r0, [r7, #4]
 810c3bc:	f001 fcc4 	bl	810dd48 <pbuf_free>
  return NULL;
 810c3c0:	2300      	movs	r3, #0
}
 810c3c2:	4618      	mov	r0, r3
 810c3c4:	3738      	adds	r7, #56	@ 0x38
 810c3c6:	46bd      	mov	sp, r7
 810c3c8:	bd80      	pop	{r7, pc}
 810c3ca:	bf00      	nop
 810c3cc:	0811c854 	.word	0x0811c854
 810c3d0:	0811ca0c 	.word	0x0811ca0c
 810c3d4:	0811c8c8 	.word	0x0811c8c8
 810c3d8:	100145cc 	.word	0x100145cc
 810c3dc:	0811ca18 	.word	0x0811ca18

0810c3e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 810c3e0:	b580      	push	{r7, lr}
 810c3e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 810c3e4:	2005      	movs	r0, #5
 810c3e6:	f000 fdc9 	bl	810cf7c <memp_malloc>
 810c3ea:	4603      	mov	r3, r0
}
 810c3ec:	4618      	mov	r0, r3
 810c3ee:	bd80      	pop	{r7, pc}

0810c3f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 810c3f0:	b580      	push	{r7, lr}
 810c3f2:	b082      	sub	sp, #8
 810c3f4:	af00      	add	r7, sp, #0
 810c3f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 810c3f8:	687b      	ldr	r3, [r7, #4]
 810c3fa:	2b00      	cmp	r3, #0
 810c3fc:	d106      	bne.n	810c40c <ip_frag_free_pbuf_custom_ref+0x1c>
 810c3fe:	4b07      	ldr	r3, [pc, #28]	@ (810c41c <ip_frag_free_pbuf_custom_ref+0x2c>)
 810c400:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 810c404:	4906      	ldr	r1, [pc, #24]	@ (810c420 <ip_frag_free_pbuf_custom_ref+0x30>)
 810c406:	4807      	ldr	r0, [pc, #28]	@ (810c424 <ip_frag_free_pbuf_custom_ref+0x34>)
 810c408:	f00b f816 	bl	8117438 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 810c40c:	6879      	ldr	r1, [r7, #4]
 810c40e:	2005      	movs	r0, #5
 810c410:	f000 fe24 	bl	810d05c <memp_free>
}
 810c414:	bf00      	nop
 810c416:	3708      	adds	r7, #8
 810c418:	46bd      	mov	sp, r7
 810c41a:	bd80      	pop	{r7, pc}
 810c41c:	0811c854 	.word	0x0811c854
 810c420:	0811ca38 	.word	0x0811ca38
 810c424:	0811c8c8 	.word	0x0811c8c8

0810c428 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 810c428:	b580      	push	{r7, lr}
 810c42a:	b084      	sub	sp, #16
 810c42c:	af00      	add	r7, sp, #0
 810c42e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 810c430:	687b      	ldr	r3, [r7, #4]
 810c432:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 810c434:	68fb      	ldr	r3, [r7, #12]
 810c436:	2b00      	cmp	r3, #0
 810c438:	d106      	bne.n	810c448 <ipfrag_free_pbuf_custom+0x20>
 810c43a:	4b11      	ldr	r3, [pc, #68]	@ (810c480 <ipfrag_free_pbuf_custom+0x58>)
 810c43c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 810c440:	4910      	ldr	r1, [pc, #64]	@ (810c484 <ipfrag_free_pbuf_custom+0x5c>)
 810c442:	4811      	ldr	r0, [pc, #68]	@ (810c488 <ipfrag_free_pbuf_custom+0x60>)
 810c444:	f00a fff8 	bl	8117438 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 810c448:	68fa      	ldr	r2, [r7, #12]
 810c44a:	687b      	ldr	r3, [r7, #4]
 810c44c:	429a      	cmp	r2, r3
 810c44e:	d006      	beq.n	810c45e <ipfrag_free_pbuf_custom+0x36>
 810c450:	4b0b      	ldr	r3, [pc, #44]	@ (810c480 <ipfrag_free_pbuf_custom+0x58>)
 810c452:	f240 22cf 	movw	r2, #719	@ 0x2cf
 810c456:	490d      	ldr	r1, [pc, #52]	@ (810c48c <ipfrag_free_pbuf_custom+0x64>)
 810c458:	480b      	ldr	r0, [pc, #44]	@ (810c488 <ipfrag_free_pbuf_custom+0x60>)
 810c45a:	f00a ffed 	bl	8117438 <iprintf>
  if (pcr->original != NULL) {
 810c45e:	68fb      	ldr	r3, [r7, #12]
 810c460:	695b      	ldr	r3, [r3, #20]
 810c462:	2b00      	cmp	r3, #0
 810c464:	d004      	beq.n	810c470 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 810c466:	68fb      	ldr	r3, [r7, #12]
 810c468:	695b      	ldr	r3, [r3, #20]
 810c46a:	4618      	mov	r0, r3
 810c46c:	f001 fc6c 	bl	810dd48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 810c470:	68f8      	ldr	r0, [r7, #12]
 810c472:	f7ff ffbd 	bl	810c3f0 <ip_frag_free_pbuf_custom_ref>
}
 810c476:	bf00      	nop
 810c478:	3710      	adds	r7, #16
 810c47a:	46bd      	mov	sp, r7
 810c47c:	bd80      	pop	{r7, pc}
 810c47e:	bf00      	nop
 810c480:	0811c854 	.word	0x0811c854
 810c484:	0811ca44 	.word	0x0811ca44
 810c488:	0811c8c8 	.word	0x0811c8c8
 810c48c:	0811ca50 	.word	0x0811ca50

0810c490 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 810c490:	b580      	push	{r7, lr}
 810c492:	b094      	sub	sp, #80	@ 0x50
 810c494:	af02      	add	r7, sp, #8
 810c496:	60f8      	str	r0, [r7, #12]
 810c498:	60b9      	str	r1, [r7, #8]
 810c49a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 810c49c:	2300      	movs	r3, #0
 810c49e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 810c4a2:	68bb      	ldr	r3, [r7, #8]
 810c4a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810c4a6:	3b14      	subs	r3, #20
 810c4a8:	2b00      	cmp	r3, #0
 810c4aa:	da00      	bge.n	810c4ae <ip4_frag+0x1e>
 810c4ac:	3307      	adds	r3, #7
 810c4ae:	10db      	asrs	r3, r3, #3
 810c4b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 810c4b2:	2314      	movs	r3, #20
 810c4b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 810c4b6:	68fb      	ldr	r3, [r7, #12]
 810c4b8:	685b      	ldr	r3, [r3, #4]
 810c4ba:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 810c4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c4be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 810c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c4c2:	781b      	ldrb	r3, [r3, #0]
 810c4c4:	f003 030f 	and.w	r3, r3, #15
 810c4c8:	b2db      	uxtb	r3, r3
 810c4ca:	009b      	lsls	r3, r3, #2
 810c4cc:	b2db      	uxtb	r3, r3
 810c4ce:	2b14      	cmp	r3, #20
 810c4d0:	d002      	beq.n	810c4d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 810c4d2:	f06f 0305 	mvn.w	r3, #5
 810c4d6:	e110      	b.n	810c6fa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 810c4d8:	68fb      	ldr	r3, [r7, #12]
 810c4da:	895b      	ldrh	r3, [r3, #10]
 810c4dc:	2b13      	cmp	r3, #19
 810c4de:	d809      	bhi.n	810c4f4 <ip4_frag+0x64>
 810c4e0:	4b88      	ldr	r3, [pc, #544]	@ (810c704 <ip4_frag+0x274>)
 810c4e2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 810c4e6:	4988      	ldr	r1, [pc, #544]	@ (810c708 <ip4_frag+0x278>)
 810c4e8:	4888      	ldr	r0, [pc, #544]	@ (810c70c <ip4_frag+0x27c>)
 810c4ea:	f00a ffa5 	bl	8117438 <iprintf>
 810c4ee:	f06f 0305 	mvn.w	r3, #5
 810c4f2:	e102      	b.n	810c6fa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 810c4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c4f6:	88db      	ldrh	r3, [r3, #6]
 810c4f8:	b29b      	uxth	r3, r3
 810c4fa:	4618      	mov	r0, r3
 810c4fc:	f7fd fd20 	bl	8109f40 <lwip_htons>
 810c500:	4603      	mov	r3, r0
 810c502:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 810c504:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810c506:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c50a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 810c50e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810c510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810c514:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 810c516:	68fb      	ldr	r3, [r7, #12]
 810c518:	891b      	ldrh	r3, [r3, #8]
 810c51a:	3b14      	subs	r3, #20
 810c51c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 810c520:	e0e1      	b.n	810c6e6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 810c522:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 810c524:	00db      	lsls	r3, r3, #3
 810c526:	b29b      	uxth	r3, r3
 810c528:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 810c52c:	4293      	cmp	r3, r2
 810c52e:	bf28      	it	cs
 810c530:	4613      	movcs	r3, r2
 810c532:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 810c534:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810c538:	2114      	movs	r1, #20
 810c53a:	200e      	movs	r0, #14
 810c53c:	f001 f920 	bl	810d780 <pbuf_alloc>
 810c540:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 810c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c544:	2b00      	cmp	r3, #0
 810c546:	f000 80d5 	beq.w	810c6f4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 810c54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c54c:	895b      	ldrh	r3, [r3, #10]
 810c54e:	2b13      	cmp	r3, #19
 810c550:	d806      	bhi.n	810c560 <ip4_frag+0xd0>
 810c552:	4b6c      	ldr	r3, [pc, #432]	@ (810c704 <ip4_frag+0x274>)
 810c554:	f44f 7249 	mov.w	r2, #804	@ 0x324
 810c558:	496d      	ldr	r1, [pc, #436]	@ (810c710 <ip4_frag+0x280>)
 810c55a:	486c      	ldr	r0, [pc, #432]	@ (810c70c <ip4_frag+0x27c>)
 810c55c:	f00a ff6c 	bl	8117438 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 810c560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c562:	685b      	ldr	r3, [r3, #4]
 810c564:	2214      	movs	r2, #20
 810c566:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810c568:	4618      	mov	r0, r3
 810c56a:	f00b f9e4 	bl	8117936 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 810c56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c570:	685b      	ldr	r3, [r3, #4]
 810c572:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 810c574:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810c576:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 810c57a:	e064      	b.n	810c646 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 810c57c:	68fb      	ldr	r3, [r7, #12]
 810c57e:	895a      	ldrh	r2, [r3, #10]
 810c580:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 810c582:	1ad3      	subs	r3, r2, r3
 810c584:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 810c586:	68fb      	ldr	r3, [r7, #12]
 810c588:	895b      	ldrh	r3, [r3, #10]
 810c58a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 810c58c:	429a      	cmp	r2, r3
 810c58e:	d906      	bls.n	810c59e <ip4_frag+0x10e>
 810c590:	4b5c      	ldr	r3, [pc, #368]	@ (810c704 <ip4_frag+0x274>)
 810c592:	f240 322d 	movw	r2, #813	@ 0x32d
 810c596:	495f      	ldr	r1, [pc, #380]	@ (810c714 <ip4_frag+0x284>)
 810c598:	485c      	ldr	r0, [pc, #368]	@ (810c70c <ip4_frag+0x27c>)
 810c59a:	f00a ff4d 	bl	8117438 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 810c59e:	8bfa      	ldrh	r2, [r7, #30]
 810c5a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810c5a4:	4293      	cmp	r3, r2
 810c5a6:	bf28      	it	cs
 810c5a8:	4613      	movcs	r3, r2
 810c5aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 810c5ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810c5b2:	2b00      	cmp	r3, #0
 810c5b4:	d105      	bne.n	810c5c2 <ip4_frag+0x132>
        poff = 0;
 810c5b6:	2300      	movs	r3, #0
 810c5b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 810c5ba:	68fb      	ldr	r3, [r7, #12]
 810c5bc:	681b      	ldr	r3, [r3, #0]
 810c5be:	60fb      	str	r3, [r7, #12]
        continue;
 810c5c0:	e041      	b.n	810c646 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 810c5c2:	f7ff ff0d 	bl	810c3e0 <ip_frag_alloc_pbuf_custom_ref>
 810c5c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 810c5c8:	69bb      	ldr	r3, [r7, #24]
 810c5ca:	2b00      	cmp	r3, #0
 810c5cc:	d103      	bne.n	810c5d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 810c5ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810c5d0:	f001 fbba 	bl	810dd48 <pbuf_free>
        goto memerr;
 810c5d4:	e08f      	b.n	810c6f6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 810c5d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 810c5d8:	68fb      	ldr	r3, [r7, #12]
 810c5da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 810c5dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 810c5de:	4413      	add	r3, r2
 810c5e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 810c5e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 810c5e8:	9201      	str	r2, [sp, #4]
 810c5ea:	9300      	str	r3, [sp, #0]
 810c5ec:	4603      	mov	r3, r0
 810c5ee:	2241      	movs	r2, #65	@ 0x41
 810c5f0:	2000      	movs	r0, #0
 810c5f2:	f001 f9ef 	bl	810d9d4 <pbuf_alloced_custom>
 810c5f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 810c5f8:	697b      	ldr	r3, [r7, #20]
 810c5fa:	2b00      	cmp	r3, #0
 810c5fc:	d106      	bne.n	810c60c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 810c5fe:	69b8      	ldr	r0, [r7, #24]
 810c600:	f7ff fef6 	bl	810c3f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 810c604:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810c606:	f001 fb9f 	bl	810dd48 <pbuf_free>
        goto memerr;
 810c60a:	e074      	b.n	810c6f6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 810c60c:	68f8      	ldr	r0, [r7, #12]
 810c60e:	f001 fc3b 	bl	810de88 <pbuf_ref>
      pcr->original = p;
 810c612:	69bb      	ldr	r3, [r7, #24]
 810c614:	68fa      	ldr	r2, [r7, #12]
 810c616:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 810c618:	69bb      	ldr	r3, [r7, #24]
 810c61a:	4a3f      	ldr	r2, [pc, #252]	@ (810c718 <ip4_frag+0x288>)
 810c61c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 810c61e:	6979      	ldr	r1, [r7, #20]
 810c620:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810c622:	f001 fc53 	bl	810decc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 810c626:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 810c62a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810c62e:	1ad3      	subs	r3, r2, r3
 810c630:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 810c634:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810c638:	2b00      	cmp	r3, #0
 810c63a:	d004      	beq.n	810c646 <ip4_frag+0x1b6>
        poff = 0;
 810c63c:	2300      	movs	r3, #0
 810c63e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 810c640:	68fb      	ldr	r3, [r7, #12]
 810c642:	681b      	ldr	r3, [r3, #0]
 810c644:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 810c646:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810c64a:	2b00      	cmp	r3, #0
 810c64c:	d196      	bne.n	810c57c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 810c64e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 810c650:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810c654:	4413      	add	r3, r2
 810c656:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 810c658:	68bb      	ldr	r3, [r7, #8]
 810c65a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810c65c:	f1a3 0213 	sub.w	r2, r3, #19
 810c660:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 810c664:	429a      	cmp	r2, r3
 810c666:	bfcc      	ite	gt
 810c668:	2301      	movgt	r3, #1
 810c66a:	2300      	movle	r3, #0
 810c66c:	b2db      	uxtb	r3, r3
 810c66e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 810c670:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 810c674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c678:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 810c67a:	6a3b      	ldr	r3, [r7, #32]
 810c67c:	2b00      	cmp	r3, #0
 810c67e:	d002      	beq.n	810c686 <ip4_frag+0x1f6>
 810c680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c682:	2b00      	cmp	r3, #0
 810c684:	d003      	beq.n	810c68e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 810c686:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810c688:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 810c68c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 810c68e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810c690:	4618      	mov	r0, r3
 810c692:	f7fd fc55 	bl	8109f40 <lwip_htons>
 810c696:	4603      	mov	r3, r0
 810c698:	461a      	mov	r2, r3
 810c69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c69c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 810c69e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810c6a0:	3314      	adds	r3, #20
 810c6a2:	b29b      	uxth	r3, r3
 810c6a4:	4618      	mov	r0, r3
 810c6a6:	f7fd fc4b 	bl	8109f40 <lwip_htons>
 810c6aa:	4603      	mov	r3, r0
 810c6ac:	461a      	mov	r2, r3
 810c6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c6b0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 810c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c6b4:	2200      	movs	r2, #0
 810c6b6:	729a      	strb	r2, [r3, #10]
 810c6b8:	2200      	movs	r2, #0
 810c6ba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 810c6bc:	68bb      	ldr	r3, [r7, #8]
 810c6be:	695b      	ldr	r3, [r3, #20]
 810c6c0:	687a      	ldr	r2, [r7, #4]
 810c6c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c6c4:	68b8      	ldr	r0, [r7, #8]
 810c6c6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 810c6c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810c6ca:	f001 fb3d 	bl	810dd48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 810c6ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 810c6d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810c6d4:	1ad3      	subs	r3, r2, r3
 810c6d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 810c6da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 810c6de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 810c6e0:	4413      	add	r3, r2
 810c6e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 810c6e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 810c6ea:	2b00      	cmp	r3, #0
 810c6ec:	f47f af19 	bne.w	810c522 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 810c6f0:	2300      	movs	r3, #0
 810c6f2:	e002      	b.n	810c6fa <ip4_frag+0x26a>
      goto memerr;
 810c6f4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 810c6f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 810c6fa:	4618      	mov	r0, r3
 810c6fc:	3748      	adds	r7, #72	@ 0x48
 810c6fe:	46bd      	mov	sp, r7
 810c700:	bd80      	pop	{r7, pc}
 810c702:	bf00      	nop
 810c704:	0811c854 	.word	0x0811c854
 810c708:	0811ca5c 	.word	0x0811ca5c
 810c70c:	0811c8c8 	.word	0x0811c8c8
 810c710:	0811ca78 	.word	0x0811ca78
 810c714:	0811ca98 	.word	0x0811ca98
 810c718:	0810c429 	.word	0x0810c429

0810c71c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 810c71c:	b480      	push	{r7}
 810c71e:	b083      	sub	sp, #12
 810c720:	af00      	add	r7, sp, #0
 810c722:	4603      	mov	r3, r0
 810c724:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 810c726:	4b05      	ldr	r3, [pc, #20]	@ (810c73c <ptr_to_mem+0x20>)
 810c728:	681a      	ldr	r2, [r3, #0]
 810c72a:	88fb      	ldrh	r3, [r7, #6]
 810c72c:	4413      	add	r3, r2
}
 810c72e:	4618      	mov	r0, r3
 810c730:	370c      	adds	r7, #12
 810c732:	46bd      	mov	sp, r7
 810c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c738:	4770      	bx	lr
 810c73a:	bf00      	nop
 810c73c:	100145d4 	.word	0x100145d4

0810c740 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 810c740:	b480      	push	{r7}
 810c742:	b083      	sub	sp, #12
 810c744:	af00      	add	r7, sp, #0
 810c746:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 810c748:	4b05      	ldr	r3, [pc, #20]	@ (810c760 <mem_to_ptr+0x20>)
 810c74a:	681b      	ldr	r3, [r3, #0]
 810c74c:	687a      	ldr	r2, [r7, #4]
 810c74e:	1ad3      	subs	r3, r2, r3
 810c750:	b29b      	uxth	r3, r3
}
 810c752:	4618      	mov	r0, r3
 810c754:	370c      	adds	r7, #12
 810c756:	46bd      	mov	sp, r7
 810c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c75c:	4770      	bx	lr
 810c75e:	bf00      	nop
 810c760:	100145d4 	.word	0x100145d4

0810c764 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 810c764:	b590      	push	{r4, r7, lr}
 810c766:	b085      	sub	sp, #20
 810c768:	af00      	add	r7, sp, #0
 810c76a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 810c76c:	4b45      	ldr	r3, [pc, #276]	@ (810c884 <plug_holes+0x120>)
 810c76e:	681b      	ldr	r3, [r3, #0]
 810c770:	687a      	ldr	r2, [r7, #4]
 810c772:	429a      	cmp	r2, r3
 810c774:	d206      	bcs.n	810c784 <plug_holes+0x20>
 810c776:	4b44      	ldr	r3, [pc, #272]	@ (810c888 <plug_holes+0x124>)
 810c778:	f240 12df 	movw	r2, #479	@ 0x1df
 810c77c:	4943      	ldr	r1, [pc, #268]	@ (810c88c <plug_holes+0x128>)
 810c77e:	4844      	ldr	r0, [pc, #272]	@ (810c890 <plug_holes+0x12c>)
 810c780:	f00a fe5a 	bl	8117438 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 810c784:	4b43      	ldr	r3, [pc, #268]	@ (810c894 <plug_holes+0x130>)
 810c786:	681b      	ldr	r3, [r3, #0]
 810c788:	687a      	ldr	r2, [r7, #4]
 810c78a:	429a      	cmp	r2, r3
 810c78c:	d306      	bcc.n	810c79c <plug_holes+0x38>
 810c78e:	4b3e      	ldr	r3, [pc, #248]	@ (810c888 <plug_holes+0x124>)
 810c790:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810c794:	4940      	ldr	r1, [pc, #256]	@ (810c898 <plug_holes+0x134>)
 810c796:	483e      	ldr	r0, [pc, #248]	@ (810c890 <plug_holes+0x12c>)
 810c798:	f00a fe4e 	bl	8117438 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 810c79c:	687b      	ldr	r3, [r7, #4]
 810c79e:	791b      	ldrb	r3, [r3, #4]
 810c7a0:	2b00      	cmp	r3, #0
 810c7a2:	d006      	beq.n	810c7b2 <plug_holes+0x4e>
 810c7a4:	4b38      	ldr	r3, [pc, #224]	@ (810c888 <plug_holes+0x124>)
 810c7a6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 810c7aa:	493c      	ldr	r1, [pc, #240]	@ (810c89c <plug_holes+0x138>)
 810c7ac:	4838      	ldr	r0, [pc, #224]	@ (810c890 <plug_holes+0x12c>)
 810c7ae:	f00a fe43 	bl	8117438 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 810c7b2:	687b      	ldr	r3, [r7, #4]
 810c7b4:	881b      	ldrh	r3, [r3, #0]
 810c7b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c7ba:	d906      	bls.n	810c7ca <plug_holes+0x66>
 810c7bc:	4b32      	ldr	r3, [pc, #200]	@ (810c888 <plug_holes+0x124>)
 810c7be:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 810c7c2:	4937      	ldr	r1, [pc, #220]	@ (810c8a0 <plug_holes+0x13c>)
 810c7c4:	4832      	ldr	r0, [pc, #200]	@ (810c890 <plug_holes+0x12c>)
 810c7c6:	f00a fe37 	bl	8117438 <iprintf>

  nmem = ptr_to_mem(mem->next);
 810c7ca:	687b      	ldr	r3, [r7, #4]
 810c7cc:	881b      	ldrh	r3, [r3, #0]
 810c7ce:	4618      	mov	r0, r3
 810c7d0:	f7ff ffa4 	bl	810c71c <ptr_to_mem>
 810c7d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 810c7d6:	687a      	ldr	r2, [r7, #4]
 810c7d8:	68fb      	ldr	r3, [r7, #12]
 810c7da:	429a      	cmp	r2, r3
 810c7dc:	d024      	beq.n	810c828 <plug_holes+0xc4>
 810c7de:	68fb      	ldr	r3, [r7, #12]
 810c7e0:	791b      	ldrb	r3, [r3, #4]
 810c7e2:	2b00      	cmp	r3, #0
 810c7e4:	d120      	bne.n	810c828 <plug_holes+0xc4>
 810c7e6:	4b2b      	ldr	r3, [pc, #172]	@ (810c894 <plug_holes+0x130>)
 810c7e8:	681b      	ldr	r3, [r3, #0]
 810c7ea:	68fa      	ldr	r2, [r7, #12]
 810c7ec:	429a      	cmp	r2, r3
 810c7ee:	d01b      	beq.n	810c828 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 810c7f0:	4b2c      	ldr	r3, [pc, #176]	@ (810c8a4 <plug_holes+0x140>)
 810c7f2:	681b      	ldr	r3, [r3, #0]
 810c7f4:	68fa      	ldr	r2, [r7, #12]
 810c7f6:	429a      	cmp	r2, r3
 810c7f8:	d102      	bne.n	810c800 <plug_holes+0x9c>
      lfree = mem;
 810c7fa:	4a2a      	ldr	r2, [pc, #168]	@ (810c8a4 <plug_holes+0x140>)
 810c7fc:	687b      	ldr	r3, [r7, #4]
 810c7fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 810c800:	68fb      	ldr	r3, [r7, #12]
 810c802:	881a      	ldrh	r2, [r3, #0]
 810c804:	687b      	ldr	r3, [r7, #4]
 810c806:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 810c808:	68fb      	ldr	r3, [r7, #12]
 810c80a:	881b      	ldrh	r3, [r3, #0]
 810c80c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c810:	d00a      	beq.n	810c828 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 810c812:	68fb      	ldr	r3, [r7, #12]
 810c814:	881b      	ldrh	r3, [r3, #0]
 810c816:	4618      	mov	r0, r3
 810c818:	f7ff ff80 	bl	810c71c <ptr_to_mem>
 810c81c:	4604      	mov	r4, r0
 810c81e:	6878      	ldr	r0, [r7, #4]
 810c820:	f7ff ff8e 	bl	810c740 <mem_to_ptr>
 810c824:	4603      	mov	r3, r0
 810c826:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 810c828:	687b      	ldr	r3, [r7, #4]
 810c82a:	885b      	ldrh	r3, [r3, #2]
 810c82c:	4618      	mov	r0, r3
 810c82e:	f7ff ff75 	bl	810c71c <ptr_to_mem>
 810c832:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 810c834:	68ba      	ldr	r2, [r7, #8]
 810c836:	687b      	ldr	r3, [r7, #4]
 810c838:	429a      	cmp	r2, r3
 810c83a:	d01f      	beq.n	810c87c <plug_holes+0x118>
 810c83c:	68bb      	ldr	r3, [r7, #8]
 810c83e:	791b      	ldrb	r3, [r3, #4]
 810c840:	2b00      	cmp	r3, #0
 810c842:	d11b      	bne.n	810c87c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 810c844:	4b17      	ldr	r3, [pc, #92]	@ (810c8a4 <plug_holes+0x140>)
 810c846:	681b      	ldr	r3, [r3, #0]
 810c848:	687a      	ldr	r2, [r7, #4]
 810c84a:	429a      	cmp	r2, r3
 810c84c:	d102      	bne.n	810c854 <plug_holes+0xf0>
      lfree = pmem;
 810c84e:	4a15      	ldr	r2, [pc, #84]	@ (810c8a4 <plug_holes+0x140>)
 810c850:	68bb      	ldr	r3, [r7, #8]
 810c852:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 810c854:	687b      	ldr	r3, [r7, #4]
 810c856:	881a      	ldrh	r2, [r3, #0]
 810c858:	68bb      	ldr	r3, [r7, #8]
 810c85a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 810c85c:	687b      	ldr	r3, [r7, #4]
 810c85e:	881b      	ldrh	r3, [r3, #0]
 810c860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c864:	d00a      	beq.n	810c87c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 810c866:	687b      	ldr	r3, [r7, #4]
 810c868:	881b      	ldrh	r3, [r3, #0]
 810c86a:	4618      	mov	r0, r3
 810c86c:	f7ff ff56 	bl	810c71c <ptr_to_mem>
 810c870:	4604      	mov	r4, r0
 810c872:	68b8      	ldr	r0, [r7, #8]
 810c874:	f7ff ff64 	bl	810c740 <mem_to_ptr>
 810c878:	4603      	mov	r3, r0
 810c87a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 810c87c:	bf00      	nop
 810c87e:	3714      	adds	r7, #20
 810c880:	46bd      	mov	sp, r7
 810c882:	bd90      	pop	{r4, r7, pc}
 810c884:	100145d4 	.word	0x100145d4
 810c888:	0811caa8 	.word	0x0811caa8
 810c88c:	0811cb08 	.word	0x0811cb08
 810c890:	0811cb20 	.word	0x0811cb20
 810c894:	100145d8 	.word	0x100145d8
 810c898:	0811cb48 	.word	0x0811cb48
 810c89c:	0811cb64 	.word	0x0811cb64
 810c8a0:	0811cb80 	.word	0x0811cb80
 810c8a4:	100145dc 	.word	0x100145dc

0810c8a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 810c8a8:	b580      	push	{r7, lr}
 810c8aa:	b082      	sub	sp, #8
 810c8ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 810c8ae:	4b16      	ldr	r3, [pc, #88]	@ (810c908 <mem_init+0x60>)
 810c8b0:	4a16      	ldr	r2, [pc, #88]	@ (810c90c <mem_init+0x64>)
 810c8b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 810c8b4:	4b14      	ldr	r3, [pc, #80]	@ (810c908 <mem_init+0x60>)
 810c8b6:	681b      	ldr	r3, [r3, #0]
 810c8b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 810c8ba:	687b      	ldr	r3, [r7, #4]
 810c8bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c8c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 810c8c2:	687b      	ldr	r3, [r7, #4]
 810c8c4:	2200      	movs	r2, #0
 810c8c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 810c8c8:	687b      	ldr	r3, [r7, #4]
 810c8ca:	2200      	movs	r2, #0
 810c8cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 810c8ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 810c8d2:	f7ff ff23 	bl	810c71c <ptr_to_mem>
 810c8d6:	4603      	mov	r3, r0
 810c8d8:	4a0d      	ldr	r2, [pc, #52]	@ (810c910 <mem_init+0x68>)
 810c8da:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 810c8dc:	4b0c      	ldr	r3, [pc, #48]	@ (810c910 <mem_init+0x68>)
 810c8de:	681b      	ldr	r3, [r3, #0]
 810c8e0:	2201      	movs	r2, #1
 810c8e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 810c8e4:	4b0a      	ldr	r3, [pc, #40]	@ (810c910 <mem_init+0x68>)
 810c8e6:	681b      	ldr	r3, [r3, #0]
 810c8e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c8ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 810c8ee:	4b08      	ldr	r3, [pc, #32]	@ (810c910 <mem_init+0x68>)
 810c8f0:	681b      	ldr	r3, [r3, #0]
 810c8f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c8f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 810c8f8:	4b03      	ldr	r3, [pc, #12]	@ (810c908 <mem_init+0x60>)
 810c8fa:	681b      	ldr	r3, [r3, #0]
 810c8fc:	4a05      	ldr	r2, [pc, #20]	@ (810c914 <mem_init+0x6c>)
 810c8fe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 810c900:	bf00      	nop
 810c902:	3708      	adds	r7, #8
 810c904:	46bd      	mov	sp, r7
 810c906:	bd80      	pop	{r7, pc}
 810c908:	100145d4 	.word	0x100145d4
 810c90c:	30044000 	.word	0x30044000
 810c910:	100145d8 	.word	0x100145d8
 810c914:	100145dc 	.word	0x100145dc

0810c918 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 810c918:	b580      	push	{r7, lr}
 810c91a:	b086      	sub	sp, #24
 810c91c:	af00      	add	r7, sp, #0
 810c91e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 810c920:	6878      	ldr	r0, [r7, #4]
 810c922:	f7ff ff0d 	bl	810c740 <mem_to_ptr>
 810c926:	4603      	mov	r3, r0
 810c928:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 810c92a:	687b      	ldr	r3, [r7, #4]
 810c92c:	881b      	ldrh	r3, [r3, #0]
 810c92e:	4618      	mov	r0, r3
 810c930:	f7ff fef4 	bl	810c71c <ptr_to_mem>
 810c934:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 810c936:	687b      	ldr	r3, [r7, #4]
 810c938:	885b      	ldrh	r3, [r3, #2]
 810c93a:	4618      	mov	r0, r3
 810c93c:	f7ff feee 	bl	810c71c <ptr_to_mem>
 810c940:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 810c942:	687b      	ldr	r3, [r7, #4]
 810c944:	881b      	ldrh	r3, [r3, #0]
 810c946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c94a:	d818      	bhi.n	810c97e <mem_link_valid+0x66>
 810c94c:	687b      	ldr	r3, [r7, #4]
 810c94e:	885b      	ldrh	r3, [r3, #2]
 810c950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c954:	d813      	bhi.n	810c97e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810c956:	687b      	ldr	r3, [r7, #4]
 810c958:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 810c95a:	8afa      	ldrh	r2, [r7, #22]
 810c95c:	429a      	cmp	r2, r3
 810c95e:	d004      	beq.n	810c96a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810c960:	68fb      	ldr	r3, [r7, #12]
 810c962:	881b      	ldrh	r3, [r3, #0]
 810c964:	8afa      	ldrh	r2, [r7, #22]
 810c966:	429a      	cmp	r2, r3
 810c968:	d109      	bne.n	810c97e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 810c96a:	4b08      	ldr	r3, [pc, #32]	@ (810c98c <mem_link_valid+0x74>)
 810c96c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810c96e:	693a      	ldr	r2, [r7, #16]
 810c970:	429a      	cmp	r2, r3
 810c972:	d006      	beq.n	810c982 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 810c974:	693b      	ldr	r3, [r7, #16]
 810c976:	885b      	ldrh	r3, [r3, #2]
 810c978:	8afa      	ldrh	r2, [r7, #22]
 810c97a:	429a      	cmp	r2, r3
 810c97c:	d001      	beq.n	810c982 <mem_link_valid+0x6a>
    return 0;
 810c97e:	2300      	movs	r3, #0
 810c980:	e000      	b.n	810c984 <mem_link_valid+0x6c>
  }
  return 1;
 810c982:	2301      	movs	r3, #1
}
 810c984:	4618      	mov	r0, r3
 810c986:	3718      	adds	r7, #24
 810c988:	46bd      	mov	sp, r7
 810c98a:	bd80      	pop	{r7, pc}
 810c98c:	100145d8 	.word	0x100145d8

0810c990 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 810c990:	b580      	push	{r7, lr}
 810c992:	b084      	sub	sp, #16
 810c994:	af00      	add	r7, sp, #0
 810c996:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 810c998:	687b      	ldr	r3, [r7, #4]
 810c99a:	2b00      	cmp	r3, #0
 810c99c:	d04c      	beq.n	810ca38 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 810c99e:	687b      	ldr	r3, [r7, #4]
 810c9a0:	f003 0303 	and.w	r3, r3, #3
 810c9a4:	2b00      	cmp	r3, #0
 810c9a6:	d007      	beq.n	810c9b8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 810c9a8:	4b25      	ldr	r3, [pc, #148]	@ (810ca40 <mem_free+0xb0>)
 810c9aa:	f240 2273 	movw	r2, #627	@ 0x273
 810c9ae:	4925      	ldr	r1, [pc, #148]	@ (810ca44 <mem_free+0xb4>)
 810c9b0:	4825      	ldr	r0, [pc, #148]	@ (810ca48 <mem_free+0xb8>)
 810c9b2:	f00a fd41 	bl	8117438 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 810c9b6:	e040      	b.n	810ca3a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 810c9b8:	687b      	ldr	r3, [r7, #4]
 810c9ba:	3b08      	subs	r3, #8
 810c9bc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 810c9be:	4b23      	ldr	r3, [pc, #140]	@ (810ca4c <mem_free+0xbc>)
 810c9c0:	681b      	ldr	r3, [r3, #0]
 810c9c2:	68fa      	ldr	r2, [r7, #12]
 810c9c4:	429a      	cmp	r2, r3
 810c9c6:	d306      	bcc.n	810c9d6 <mem_free+0x46>
 810c9c8:	687b      	ldr	r3, [r7, #4]
 810c9ca:	f103 020c 	add.w	r2, r3, #12
 810c9ce:	4b20      	ldr	r3, [pc, #128]	@ (810ca50 <mem_free+0xc0>)
 810c9d0:	681b      	ldr	r3, [r3, #0]
 810c9d2:	429a      	cmp	r2, r3
 810c9d4:	d907      	bls.n	810c9e6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 810c9d6:	4b1a      	ldr	r3, [pc, #104]	@ (810ca40 <mem_free+0xb0>)
 810c9d8:	f240 227f 	movw	r2, #639	@ 0x27f
 810c9dc:	491d      	ldr	r1, [pc, #116]	@ (810ca54 <mem_free+0xc4>)
 810c9de:	481a      	ldr	r0, [pc, #104]	@ (810ca48 <mem_free+0xb8>)
 810c9e0:	f00a fd2a 	bl	8117438 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 810c9e4:	e029      	b.n	810ca3a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 810c9e6:	68fb      	ldr	r3, [r7, #12]
 810c9e8:	791b      	ldrb	r3, [r3, #4]
 810c9ea:	2b00      	cmp	r3, #0
 810c9ec:	d107      	bne.n	810c9fe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 810c9ee:	4b14      	ldr	r3, [pc, #80]	@ (810ca40 <mem_free+0xb0>)
 810c9f0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 810c9f4:	4918      	ldr	r1, [pc, #96]	@ (810ca58 <mem_free+0xc8>)
 810c9f6:	4814      	ldr	r0, [pc, #80]	@ (810ca48 <mem_free+0xb8>)
 810c9f8:	f00a fd1e 	bl	8117438 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 810c9fc:	e01d      	b.n	810ca3a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 810c9fe:	68f8      	ldr	r0, [r7, #12]
 810ca00:	f7ff ff8a 	bl	810c918 <mem_link_valid>
 810ca04:	4603      	mov	r3, r0
 810ca06:	2b00      	cmp	r3, #0
 810ca08:	d107      	bne.n	810ca1a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 810ca0a:	4b0d      	ldr	r3, [pc, #52]	@ (810ca40 <mem_free+0xb0>)
 810ca0c:	f240 2295 	movw	r2, #661	@ 0x295
 810ca10:	4912      	ldr	r1, [pc, #72]	@ (810ca5c <mem_free+0xcc>)
 810ca12:	480d      	ldr	r0, [pc, #52]	@ (810ca48 <mem_free+0xb8>)
 810ca14:	f00a fd10 	bl	8117438 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 810ca18:	e00f      	b.n	810ca3a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 810ca1a:	68fb      	ldr	r3, [r7, #12]
 810ca1c:	2200      	movs	r2, #0
 810ca1e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 810ca20:	4b0f      	ldr	r3, [pc, #60]	@ (810ca60 <mem_free+0xd0>)
 810ca22:	681b      	ldr	r3, [r3, #0]
 810ca24:	68fa      	ldr	r2, [r7, #12]
 810ca26:	429a      	cmp	r2, r3
 810ca28:	d202      	bcs.n	810ca30 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 810ca2a:	4a0d      	ldr	r2, [pc, #52]	@ (810ca60 <mem_free+0xd0>)
 810ca2c:	68fb      	ldr	r3, [r7, #12]
 810ca2e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 810ca30:	68f8      	ldr	r0, [r7, #12]
 810ca32:	f7ff fe97 	bl	810c764 <plug_holes>
 810ca36:	e000      	b.n	810ca3a <mem_free+0xaa>
    return;
 810ca38:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 810ca3a:	3710      	adds	r7, #16
 810ca3c:	46bd      	mov	sp, r7
 810ca3e:	bd80      	pop	{r7, pc}
 810ca40:	0811caa8 	.word	0x0811caa8
 810ca44:	0811cbac 	.word	0x0811cbac
 810ca48:	0811cb20 	.word	0x0811cb20
 810ca4c:	100145d4 	.word	0x100145d4
 810ca50:	100145d8 	.word	0x100145d8
 810ca54:	0811cbd0 	.word	0x0811cbd0
 810ca58:	0811cbec 	.word	0x0811cbec
 810ca5c:	0811cc14 	.word	0x0811cc14
 810ca60:	100145dc 	.word	0x100145dc

0810ca64 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 810ca64:	b580      	push	{r7, lr}
 810ca66:	b088      	sub	sp, #32
 810ca68:	af00      	add	r7, sp, #0
 810ca6a:	6078      	str	r0, [r7, #4]
 810ca6c:	460b      	mov	r3, r1
 810ca6e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 810ca70:	887b      	ldrh	r3, [r7, #2]
 810ca72:	3303      	adds	r3, #3
 810ca74:	b29b      	uxth	r3, r3
 810ca76:	f023 0303 	bic.w	r3, r3, #3
 810ca7a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 810ca7c:	8bfb      	ldrh	r3, [r7, #30]
 810ca7e:	2b0b      	cmp	r3, #11
 810ca80:	d801      	bhi.n	810ca86 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 810ca82:	230c      	movs	r3, #12
 810ca84:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 810ca86:	8bfb      	ldrh	r3, [r7, #30]
 810ca88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810ca8c:	d803      	bhi.n	810ca96 <mem_trim+0x32>
 810ca8e:	8bfa      	ldrh	r2, [r7, #30]
 810ca90:	887b      	ldrh	r3, [r7, #2]
 810ca92:	429a      	cmp	r2, r3
 810ca94:	d201      	bcs.n	810ca9a <mem_trim+0x36>
    return NULL;
 810ca96:	2300      	movs	r3, #0
 810ca98:	e0cc      	b.n	810cc34 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 810ca9a:	4b68      	ldr	r3, [pc, #416]	@ (810cc3c <mem_trim+0x1d8>)
 810ca9c:	681b      	ldr	r3, [r3, #0]
 810ca9e:	687a      	ldr	r2, [r7, #4]
 810caa0:	429a      	cmp	r2, r3
 810caa2:	d304      	bcc.n	810caae <mem_trim+0x4a>
 810caa4:	4b66      	ldr	r3, [pc, #408]	@ (810cc40 <mem_trim+0x1dc>)
 810caa6:	681b      	ldr	r3, [r3, #0]
 810caa8:	687a      	ldr	r2, [r7, #4]
 810caaa:	429a      	cmp	r2, r3
 810caac:	d306      	bcc.n	810cabc <mem_trim+0x58>
 810caae:	4b65      	ldr	r3, [pc, #404]	@ (810cc44 <mem_trim+0x1e0>)
 810cab0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 810cab4:	4964      	ldr	r1, [pc, #400]	@ (810cc48 <mem_trim+0x1e4>)
 810cab6:	4865      	ldr	r0, [pc, #404]	@ (810cc4c <mem_trim+0x1e8>)
 810cab8:	f00a fcbe 	bl	8117438 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 810cabc:	4b5f      	ldr	r3, [pc, #380]	@ (810cc3c <mem_trim+0x1d8>)
 810cabe:	681b      	ldr	r3, [r3, #0]
 810cac0:	687a      	ldr	r2, [r7, #4]
 810cac2:	429a      	cmp	r2, r3
 810cac4:	d304      	bcc.n	810cad0 <mem_trim+0x6c>
 810cac6:	4b5e      	ldr	r3, [pc, #376]	@ (810cc40 <mem_trim+0x1dc>)
 810cac8:	681b      	ldr	r3, [r3, #0]
 810caca:	687a      	ldr	r2, [r7, #4]
 810cacc:	429a      	cmp	r2, r3
 810cace:	d301      	bcc.n	810cad4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 810cad0:	687b      	ldr	r3, [r7, #4]
 810cad2:	e0af      	b.n	810cc34 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 810cad4:	687b      	ldr	r3, [r7, #4]
 810cad6:	3b08      	subs	r3, #8
 810cad8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 810cada:	69b8      	ldr	r0, [r7, #24]
 810cadc:	f7ff fe30 	bl	810c740 <mem_to_ptr>
 810cae0:	4603      	mov	r3, r0
 810cae2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 810cae4:	69bb      	ldr	r3, [r7, #24]
 810cae6:	881a      	ldrh	r2, [r3, #0]
 810cae8:	8afb      	ldrh	r3, [r7, #22]
 810caea:	1ad3      	subs	r3, r2, r3
 810caec:	b29b      	uxth	r3, r3
 810caee:	3b08      	subs	r3, #8
 810caf0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 810caf2:	8bfa      	ldrh	r2, [r7, #30]
 810caf4:	8abb      	ldrh	r3, [r7, #20]
 810caf6:	429a      	cmp	r2, r3
 810caf8:	d906      	bls.n	810cb08 <mem_trim+0xa4>
 810cafa:	4b52      	ldr	r3, [pc, #328]	@ (810cc44 <mem_trim+0x1e0>)
 810cafc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 810cb00:	4953      	ldr	r1, [pc, #332]	@ (810cc50 <mem_trim+0x1ec>)
 810cb02:	4852      	ldr	r0, [pc, #328]	@ (810cc4c <mem_trim+0x1e8>)
 810cb04:	f00a fc98 	bl	8117438 <iprintf>
  if (newsize > size) {
 810cb08:	8bfa      	ldrh	r2, [r7, #30]
 810cb0a:	8abb      	ldrh	r3, [r7, #20]
 810cb0c:	429a      	cmp	r2, r3
 810cb0e:	d901      	bls.n	810cb14 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 810cb10:	2300      	movs	r3, #0
 810cb12:	e08f      	b.n	810cc34 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 810cb14:	8bfa      	ldrh	r2, [r7, #30]
 810cb16:	8abb      	ldrh	r3, [r7, #20]
 810cb18:	429a      	cmp	r2, r3
 810cb1a:	d101      	bne.n	810cb20 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 810cb1c:	687b      	ldr	r3, [r7, #4]
 810cb1e:	e089      	b.n	810cc34 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 810cb20:	69bb      	ldr	r3, [r7, #24]
 810cb22:	881b      	ldrh	r3, [r3, #0]
 810cb24:	4618      	mov	r0, r3
 810cb26:	f7ff fdf9 	bl	810c71c <ptr_to_mem>
 810cb2a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 810cb2c:	693b      	ldr	r3, [r7, #16]
 810cb2e:	791b      	ldrb	r3, [r3, #4]
 810cb30:	2b00      	cmp	r3, #0
 810cb32:	d13f      	bne.n	810cbb4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 810cb34:	69bb      	ldr	r3, [r7, #24]
 810cb36:	881b      	ldrh	r3, [r3, #0]
 810cb38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810cb3c:	d106      	bne.n	810cb4c <mem_trim+0xe8>
 810cb3e:	4b41      	ldr	r3, [pc, #260]	@ (810cc44 <mem_trim+0x1e0>)
 810cb40:	f240 22f5 	movw	r2, #757	@ 0x2f5
 810cb44:	4943      	ldr	r1, [pc, #268]	@ (810cc54 <mem_trim+0x1f0>)
 810cb46:	4841      	ldr	r0, [pc, #260]	@ (810cc4c <mem_trim+0x1e8>)
 810cb48:	f00a fc76 	bl	8117438 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 810cb4c:	693b      	ldr	r3, [r7, #16]
 810cb4e:	881b      	ldrh	r3, [r3, #0]
 810cb50:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 810cb52:	8afa      	ldrh	r2, [r7, #22]
 810cb54:	8bfb      	ldrh	r3, [r7, #30]
 810cb56:	4413      	add	r3, r2
 810cb58:	b29b      	uxth	r3, r3
 810cb5a:	3308      	adds	r3, #8
 810cb5c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 810cb5e:	4b3e      	ldr	r3, [pc, #248]	@ (810cc58 <mem_trim+0x1f4>)
 810cb60:	681b      	ldr	r3, [r3, #0]
 810cb62:	693a      	ldr	r2, [r7, #16]
 810cb64:	429a      	cmp	r2, r3
 810cb66:	d106      	bne.n	810cb76 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 810cb68:	89fb      	ldrh	r3, [r7, #14]
 810cb6a:	4618      	mov	r0, r3
 810cb6c:	f7ff fdd6 	bl	810c71c <ptr_to_mem>
 810cb70:	4603      	mov	r3, r0
 810cb72:	4a39      	ldr	r2, [pc, #228]	@ (810cc58 <mem_trim+0x1f4>)
 810cb74:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 810cb76:	89fb      	ldrh	r3, [r7, #14]
 810cb78:	4618      	mov	r0, r3
 810cb7a:	f7ff fdcf 	bl	810c71c <ptr_to_mem>
 810cb7e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 810cb80:	693b      	ldr	r3, [r7, #16]
 810cb82:	2200      	movs	r2, #0
 810cb84:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 810cb86:	693b      	ldr	r3, [r7, #16]
 810cb88:	89ba      	ldrh	r2, [r7, #12]
 810cb8a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 810cb8c:	693b      	ldr	r3, [r7, #16]
 810cb8e:	8afa      	ldrh	r2, [r7, #22]
 810cb90:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 810cb92:	69bb      	ldr	r3, [r7, #24]
 810cb94:	89fa      	ldrh	r2, [r7, #14]
 810cb96:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 810cb98:	693b      	ldr	r3, [r7, #16]
 810cb9a:	881b      	ldrh	r3, [r3, #0]
 810cb9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810cba0:	d047      	beq.n	810cc32 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 810cba2:	693b      	ldr	r3, [r7, #16]
 810cba4:	881b      	ldrh	r3, [r3, #0]
 810cba6:	4618      	mov	r0, r3
 810cba8:	f7ff fdb8 	bl	810c71c <ptr_to_mem>
 810cbac:	4602      	mov	r2, r0
 810cbae:	89fb      	ldrh	r3, [r7, #14]
 810cbb0:	8053      	strh	r3, [r2, #2]
 810cbb2:	e03e      	b.n	810cc32 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 810cbb4:	8bfb      	ldrh	r3, [r7, #30]
 810cbb6:	f103 0214 	add.w	r2, r3, #20
 810cbba:	8abb      	ldrh	r3, [r7, #20]
 810cbbc:	429a      	cmp	r2, r3
 810cbbe:	d838      	bhi.n	810cc32 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 810cbc0:	8afa      	ldrh	r2, [r7, #22]
 810cbc2:	8bfb      	ldrh	r3, [r7, #30]
 810cbc4:	4413      	add	r3, r2
 810cbc6:	b29b      	uxth	r3, r3
 810cbc8:	3308      	adds	r3, #8
 810cbca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 810cbcc:	69bb      	ldr	r3, [r7, #24]
 810cbce:	881b      	ldrh	r3, [r3, #0]
 810cbd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810cbd4:	d106      	bne.n	810cbe4 <mem_trim+0x180>
 810cbd6:	4b1b      	ldr	r3, [pc, #108]	@ (810cc44 <mem_trim+0x1e0>)
 810cbd8:	f240 3216 	movw	r2, #790	@ 0x316
 810cbdc:	491d      	ldr	r1, [pc, #116]	@ (810cc54 <mem_trim+0x1f0>)
 810cbde:	481b      	ldr	r0, [pc, #108]	@ (810cc4c <mem_trim+0x1e8>)
 810cbe0:	f00a fc2a 	bl	8117438 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 810cbe4:	89fb      	ldrh	r3, [r7, #14]
 810cbe6:	4618      	mov	r0, r3
 810cbe8:	f7ff fd98 	bl	810c71c <ptr_to_mem>
 810cbec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 810cbee:	4b1a      	ldr	r3, [pc, #104]	@ (810cc58 <mem_trim+0x1f4>)
 810cbf0:	681b      	ldr	r3, [r3, #0]
 810cbf2:	693a      	ldr	r2, [r7, #16]
 810cbf4:	429a      	cmp	r2, r3
 810cbf6:	d202      	bcs.n	810cbfe <mem_trim+0x19a>
      lfree = mem2;
 810cbf8:	4a17      	ldr	r2, [pc, #92]	@ (810cc58 <mem_trim+0x1f4>)
 810cbfa:	693b      	ldr	r3, [r7, #16]
 810cbfc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 810cbfe:	693b      	ldr	r3, [r7, #16]
 810cc00:	2200      	movs	r2, #0
 810cc02:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 810cc04:	69bb      	ldr	r3, [r7, #24]
 810cc06:	881a      	ldrh	r2, [r3, #0]
 810cc08:	693b      	ldr	r3, [r7, #16]
 810cc0a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 810cc0c:	693b      	ldr	r3, [r7, #16]
 810cc0e:	8afa      	ldrh	r2, [r7, #22]
 810cc10:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 810cc12:	69bb      	ldr	r3, [r7, #24]
 810cc14:	89fa      	ldrh	r2, [r7, #14]
 810cc16:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 810cc18:	693b      	ldr	r3, [r7, #16]
 810cc1a:	881b      	ldrh	r3, [r3, #0]
 810cc1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810cc20:	d007      	beq.n	810cc32 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 810cc22:	693b      	ldr	r3, [r7, #16]
 810cc24:	881b      	ldrh	r3, [r3, #0]
 810cc26:	4618      	mov	r0, r3
 810cc28:	f7ff fd78 	bl	810c71c <ptr_to_mem>
 810cc2c:	4602      	mov	r2, r0
 810cc2e:	89fb      	ldrh	r3, [r7, #14]
 810cc30:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 810cc32:	687b      	ldr	r3, [r7, #4]
}
 810cc34:	4618      	mov	r0, r3
 810cc36:	3720      	adds	r7, #32
 810cc38:	46bd      	mov	sp, r7
 810cc3a:	bd80      	pop	{r7, pc}
 810cc3c:	100145d4 	.word	0x100145d4
 810cc40:	100145d8 	.word	0x100145d8
 810cc44:	0811caa8 	.word	0x0811caa8
 810cc48:	0811cc48 	.word	0x0811cc48
 810cc4c:	0811cb20 	.word	0x0811cb20
 810cc50:	0811cc60 	.word	0x0811cc60
 810cc54:	0811cc80 	.word	0x0811cc80
 810cc58:	100145dc 	.word	0x100145dc

0810cc5c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 810cc5c:	b580      	push	{r7, lr}
 810cc5e:	b088      	sub	sp, #32
 810cc60:	af00      	add	r7, sp, #0
 810cc62:	4603      	mov	r3, r0
 810cc64:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 810cc66:	88fb      	ldrh	r3, [r7, #6]
 810cc68:	2b00      	cmp	r3, #0
 810cc6a:	d101      	bne.n	810cc70 <mem_malloc+0x14>
    return NULL;
 810cc6c:	2300      	movs	r3, #0
 810cc6e:	e0d9      	b.n	810ce24 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 810cc70:	88fb      	ldrh	r3, [r7, #6]
 810cc72:	3303      	adds	r3, #3
 810cc74:	b29b      	uxth	r3, r3
 810cc76:	f023 0303 	bic.w	r3, r3, #3
 810cc7a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 810cc7c:	8bbb      	ldrh	r3, [r7, #28]
 810cc7e:	2b0b      	cmp	r3, #11
 810cc80:	d801      	bhi.n	810cc86 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 810cc82:	230c      	movs	r3, #12
 810cc84:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 810cc86:	8bbb      	ldrh	r3, [r7, #28]
 810cc88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810cc8c:	d803      	bhi.n	810cc96 <mem_malloc+0x3a>
 810cc8e:	8bba      	ldrh	r2, [r7, #28]
 810cc90:	88fb      	ldrh	r3, [r7, #6]
 810cc92:	429a      	cmp	r2, r3
 810cc94:	d201      	bcs.n	810cc9a <mem_malloc+0x3e>
    return NULL;
 810cc96:	2300      	movs	r3, #0
 810cc98:	e0c4      	b.n	810ce24 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 810cc9a:	4b64      	ldr	r3, [pc, #400]	@ (810ce2c <mem_malloc+0x1d0>)
 810cc9c:	681b      	ldr	r3, [r3, #0]
 810cc9e:	4618      	mov	r0, r3
 810cca0:	f7ff fd4e 	bl	810c740 <mem_to_ptr>
 810cca4:	4603      	mov	r3, r0
 810cca6:	83fb      	strh	r3, [r7, #30]
 810cca8:	e0b4      	b.n	810ce14 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 810ccaa:	8bfb      	ldrh	r3, [r7, #30]
 810ccac:	4618      	mov	r0, r3
 810ccae:	f7ff fd35 	bl	810c71c <ptr_to_mem>
 810ccb2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 810ccb4:	697b      	ldr	r3, [r7, #20]
 810ccb6:	791b      	ldrb	r3, [r3, #4]
 810ccb8:	2b00      	cmp	r3, #0
 810ccba:	f040 80a4 	bne.w	810ce06 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 810ccbe:	697b      	ldr	r3, [r7, #20]
 810ccc0:	881b      	ldrh	r3, [r3, #0]
 810ccc2:	461a      	mov	r2, r3
 810ccc4:	8bfb      	ldrh	r3, [r7, #30]
 810ccc6:	1ad3      	subs	r3, r2, r3
 810ccc8:	f1a3 0208 	sub.w	r2, r3, #8
 810cccc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 810ccce:	429a      	cmp	r2, r3
 810ccd0:	f0c0 8099 	bcc.w	810ce06 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 810ccd4:	697b      	ldr	r3, [r7, #20]
 810ccd6:	881b      	ldrh	r3, [r3, #0]
 810ccd8:	461a      	mov	r2, r3
 810ccda:	8bfb      	ldrh	r3, [r7, #30]
 810ccdc:	1ad3      	subs	r3, r2, r3
 810ccde:	f1a3 0208 	sub.w	r2, r3, #8
 810cce2:	8bbb      	ldrh	r3, [r7, #28]
 810cce4:	3314      	adds	r3, #20
 810cce6:	429a      	cmp	r2, r3
 810cce8:	d333      	bcc.n	810cd52 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 810ccea:	8bfa      	ldrh	r2, [r7, #30]
 810ccec:	8bbb      	ldrh	r3, [r7, #28]
 810ccee:	4413      	add	r3, r2
 810ccf0:	b29b      	uxth	r3, r3
 810ccf2:	3308      	adds	r3, #8
 810ccf4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 810ccf6:	8a7b      	ldrh	r3, [r7, #18]
 810ccf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810ccfc:	d106      	bne.n	810cd0c <mem_malloc+0xb0>
 810ccfe:	4b4c      	ldr	r3, [pc, #304]	@ (810ce30 <mem_malloc+0x1d4>)
 810cd00:	f240 3287 	movw	r2, #903	@ 0x387
 810cd04:	494b      	ldr	r1, [pc, #300]	@ (810ce34 <mem_malloc+0x1d8>)
 810cd06:	484c      	ldr	r0, [pc, #304]	@ (810ce38 <mem_malloc+0x1dc>)
 810cd08:	f00a fb96 	bl	8117438 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 810cd0c:	8a7b      	ldrh	r3, [r7, #18]
 810cd0e:	4618      	mov	r0, r3
 810cd10:	f7ff fd04 	bl	810c71c <ptr_to_mem>
 810cd14:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 810cd16:	68fb      	ldr	r3, [r7, #12]
 810cd18:	2200      	movs	r2, #0
 810cd1a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 810cd1c:	697b      	ldr	r3, [r7, #20]
 810cd1e:	881a      	ldrh	r2, [r3, #0]
 810cd20:	68fb      	ldr	r3, [r7, #12]
 810cd22:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 810cd24:	68fb      	ldr	r3, [r7, #12]
 810cd26:	8bfa      	ldrh	r2, [r7, #30]
 810cd28:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 810cd2a:	697b      	ldr	r3, [r7, #20]
 810cd2c:	8a7a      	ldrh	r2, [r7, #18]
 810cd2e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 810cd30:	697b      	ldr	r3, [r7, #20]
 810cd32:	2201      	movs	r2, #1
 810cd34:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 810cd36:	68fb      	ldr	r3, [r7, #12]
 810cd38:	881b      	ldrh	r3, [r3, #0]
 810cd3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810cd3e:	d00b      	beq.n	810cd58 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 810cd40:	68fb      	ldr	r3, [r7, #12]
 810cd42:	881b      	ldrh	r3, [r3, #0]
 810cd44:	4618      	mov	r0, r3
 810cd46:	f7ff fce9 	bl	810c71c <ptr_to_mem>
 810cd4a:	4602      	mov	r2, r0
 810cd4c:	8a7b      	ldrh	r3, [r7, #18]
 810cd4e:	8053      	strh	r3, [r2, #2]
 810cd50:	e002      	b.n	810cd58 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 810cd52:	697b      	ldr	r3, [r7, #20]
 810cd54:	2201      	movs	r2, #1
 810cd56:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 810cd58:	4b34      	ldr	r3, [pc, #208]	@ (810ce2c <mem_malloc+0x1d0>)
 810cd5a:	681b      	ldr	r3, [r3, #0]
 810cd5c:	697a      	ldr	r2, [r7, #20]
 810cd5e:	429a      	cmp	r2, r3
 810cd60:	d127      	bne.n	810cdb2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 810cd62:	4b32      	ldr	r3, [pc, #200]	@ (810ce2c <mem_malloc+0x1d0>)
 810cd64:	681b      	ldr	r3, [r3, #0]
 810cd66:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 810cd68:	e005      	b.n	810cd76 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 810cd6a:	69bb      	ldr	r3, [r7, #24]
 810cd6c:	881b      	ldrh	r3, [r3, #0]
 810cd6e:	4618      	mov	r0, r3
 810cd70:	f7ff fcd4 	bl	810c71c <ptr_to_mem>
 810cd74:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 810cd76:	69bb      	ldr	r3, [r7, #24]
 810cd78:	791b      	ldrb	r3, [r3, #4]
 810cd7a:	2b00      	cmp	r3, #0
 810cd7c:	d004      	beq.n	810cd88 <mem_malloc+0x12c>
 810cd7e:	4b2f      	ldr	r3, [pc, #188]	@ (810ce3c <mem_malloc+0x1e0>)
 810cd80:	681b      	ldr	r3, [r3, #0]
 810cd82:	69ba      	ldr	r2, [r7, #24]
 810cd84:	429a      	cmp	r2, r3
 810cd86:	d1f0      	bne.n	810cd6a <mem_malloc+0x10e>
          }
          lfree = cur;
 810cd88:	4a28      	ldr	r2, [pc, #160]	@ (810ce2c <mem_malloc+0x1d0>)
 810cd8a:	69bb      	ldr	r3, [r7, #24]
 810cd8c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 810cd8e:	4b27      	ldr	r3, [pc, #156]	@ (810ce2c <mem_malloc+0x1d0>)
 810cd90:	681a      	ldr	r2, [r3, #0]
 810cd92:	4b2a      	ldr	r3, [pc, #168]	@ (810ce3c <mem_malloc+0x1e0>)
 810cd94:	681b      	ldr	r3, [r3, #0]
 810cd96:	429a      	cmp	r2, r3
 810cd98:	d00b      	beq.n	810cdb2 <mem_malloc+0x156>
 810cd9a:	4b24      	ldr	r3, [pc, #144]	@ (810ce2c <mem_malloc+0x1d0>)
 810cd9c:	681b      	ldr	r3, [r3, #0]
 810cd9e:	791b      	ldrb	r3, [r3, #4]
 810cda0:	2b00      	cmp	r3, #0
 810cda2:	d006      	beq.n	810cdb2 <mem_malloc+0x156>
 810cda4:	4b22      	ldr	r3, [pc, #136]	@ (810ce30 <mem_malloc+0x1d4>)
 810cda6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 810cdaa:	4925      	ldr	r1, [pc, #148]	@ (810ce40 <mem_malloc+0x1e4>)
 810cdac:	4822      	ldr	r0, [pc, #136]	@ (810ce38 <mem_malloc+0x1dc>)
 810cdae:	f00a fb43 	bl	8117438 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 810cdb2:	8bba      	ldrh	r2, [r7, #28]
 810cdb4:	697b      	ldr	r3, [r7, #20]
 810cdb6:	4413      	add	r3, r2
 810cdb8:	3308      	adds	r3, #8
 810cdba:	4a20      	ldr	r2, [pc, #128]	@ (810ce3c <mem_malloc+0x1e0>)
 810cdbc:	6812      	ldr	r2, [r2, #0]
 810cdbe:	4293      	cmp	r3, r2
 810cdc0:	d906      	bls.n	810cdd0 <mem_malloc+0x174>
 810cdc2:	4b1b      	ldr	r3, [pc, #108]	@ (810ce30 <mem_malloc+0x1d4>)
 810cdc4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 810cdc8:	491e      	ldr	r1, [pc, #120]	@ (810ce44 <mem_malloc+0x1e8>)
 810cdca:	481b      	ldr	r0, [pc, #108]	@ (810ce38 <mem_malloc+0x1dc>)
 810cdcc:	f00a fb34 	bl	8117438 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 810cdd0:	697b      	ldr	r3, [r7, #20]
 810cdd2:	f003 0303 	and.w	r3, r3, #3
 810cdd6:	2b00      	cmp	r3, #0
 810cdd8:	d006      	beq.n	810cde8 <mem_malloc+0x18c>
 810cdda:	4b15      	ldr	r3, [pc, #84]	@ (810ce30 <mem_malloc+0x1d4>)
 810cddc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 810cde0:	4919      	ldr	r1, [pc, #100]	@ (810ce48 <mem_malloc+0x1ec>)
 810cde2:	4815      	ldr	r0, [pc, #84]	@ (810ce38 <mem_malloc+0x1dc>)
 810cde4:	f00a fb28 	bl	8117438 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 810cde8:	697b      	ldr	r3, [r7, #20]
 810cdea:	f003 0303 	and.w	r3, r3, #3
 810cdee:	2b00      	cmp	r3, #0
 810cdf0:	d006      	beq.n	810ce00 <mem_malloc+0x1a4>
 810cdf2:	4b0f      	ldr	r3, [pc, #60]	@ (810ce30 <mem_malloc+0x1d4>)
 810cdf4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 810cdf8:	4914      	ldr	r1, [pc, #80]	@ (810ce4c <mem_malloc+0x1f0>)
 810cdfa:	480f      	ldr	r0, [pc, #60]	@ (810ce38 <mem_malloc+0x1dc>)
 810cdfc:	f00a fb1c 	bl	8117438 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 810ce00:	697b      	ldr	r3, [r7, #20]
 810ce02:	3308      	adds	r3, #8
 810ce04:	e00e      	b.n	810ce24 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 810ce06:	8bfb      	ldrh	r3, [r7, #30]
 810ce08:	4618      	mov	r0, r3
 810ce0a:	f7ff fc87 	bl	810c71c <ptr_to_mem>
 810ce0e:	4603      	mov	r3, r0
 810ce10:	881b      	ldrh	r3, [r3, #0]
 810ce12:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 810ce14:	8bfa      	ldrh	r2, [r7, #30]
 810ce16:	8bbb      	ldrh	r3, [r7, #28]
 810ce18:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 810ce1c:	429a      	cmp	r2, r3
 810ce1e:	f4ff af44 	bcc.w	810ccaa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 810ce22:	2300      	movs	r3, #0
}
 810ce24:	4618      	mov	r0, r3
 810ce26:	3720      	adds	r7, #32
 810ce28:	46bd      	mov	sp, r7
 810ce2a:	bd80      	pop	{r7, pc}
 810ce2c:	100145dc 	.word	0x100145dc
 810ce30:	0811caa8 	.word	0x0811caa8
 810ce34:	0811cc80 	.word	0x0811cc80
 810ce38:	0811cb20 	.word	0x0811cb20
 810ce3c:	100145d8 	.word	0x100145d8
 810ce40:	0811cc94 	.word	0x0811cc94
 810ce44:	0811ccb0 	.word	0x0811ccb0
 810ce48:	0811cce0 	.word	0x0811cce0
 810ce4c:	0811cd10 	.word	0x0811cd10

0810ce50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 810ce50:	b480      	push	{r7}
 810ce52:	b085      	sub	sp, #20
 810ce54:	af00      	add	r7, sp, #0
 810ce56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 810ce58:	687b      	ldr	r3, [r7, #4]
 810ce5a:	689b      	ldr	r3, [r3, #8]
 810ce5c:	2200      	movs	r2, #0
 810ce5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 810ce60:	687b      	ldr	r3, [r7, #4]
 810ce62:	685b      	ldr	r3, [r3, #4]
 810ce64:	3303      	adds	r3, #3
 810ce66:	f023 0303 	bic.w	r3, r3, #3
 810ce6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 810ce6c:	2300      	movs	r3, #0
 810ce6e:	60fb      	str	r3, [r7, #12]
 810ce70:	e011      	b.n	810ce96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 810ce72:	687b      	ldr	r3, [r7, #4]
 810ce74:	689b      	ldr	r3, [r3, #8]
 810ce76:	681a      	ldr	r2, [r3, #0]
 810ce78:	68bb      	ldr	r3, [r7, #8]
 810ce7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 810ce7c:	687b      	ldr	r3, [r7, #4]
 810ce7e:	689b      	ldr	r3, [r3, #8]
 810ce80:	68ba      	ldr	r2, [r7, #8]
 810ce82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 810ce84:	687b      	ldr	r3, [r7, #4]
 810ce86:	881b      	ldrh	r3, [r3, #0]
 810ce88:	461a      	mov	r2, r3
 810ce8a:	68bb      	ldr	r3, [r7, #8]
 810ce8c:	4413      	add	r3, r2
 810ce8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 810ce90:	68fb      	ldr	r3, [r7, #12]
 810ce92:	3301      	adds	r3, #1
 810ce94:	60fb      	str	r3, [r7, #12]
 810ce96:	687b      	ldr	r3, [r7, #4]
 810ce98:	885b      	ldrh	r3, [r3, #2]
 810ce9a:	461a      	mov	r2, r3
 810ce9c:	68fb      	ldr	r3, [r7, #12]
 810ce9e:	4293      	cmp	r3, r2
 810cea0:	dbe7      	blt.n	810ce72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 810cea2:	bf00      	nop
 810cea4:	bf00      	nop
 810cea6:	3714      	adds	r7, #20
 810cea8:	46bd      	mov	sp, r7
 810ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ceae:	4770      	bx	lr

0810ceb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 810ceb0:	b580      	push	{r7, lr}
 810ceb2:	b082      	sub	sp, #8
 810ceb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 810ceb6:	2300      	movs	r3, #0
 810ceb8:	80fb      	strh	r3, [r7, #6]
 810ceba:	e009      	b.n	810ced0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 810cebc:	88fb      	ldrh	r3, [r7, #6]
 810cebe:	4a08      	ldr	r2, [pc, #32]	@ (810cee0 <memp_init+0x30>)
 810cec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810cec4:	4618      	mov	r0, r3
 810cec6:	f7ff ffc3 	bl	810ce50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 810ceca:	88fb      	ldrh	r3, [r7, #6]
 810cecc:	3301      	adds	r3, #1
 810cece:	80fb      	strh	r3, [r7, #6]
 810ced0:	88fb      	ldrh	r3, [r7, #6]
 810ced2:	2b08      	cmp	r3, #8
 810ced4:	d9f2      	bls.n	810cebc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 810ced6:	bf00      	nop
 810ced8:	bf00      	nop
 810ceda:	3708      	adds	r7, #8
 810cedc:	46bd      	mov	sp, r7
 810cede:	bd80      	pop	{r7, pc}
 810cee0:	0811efe8 	.word	0x0811efe8

0810cee4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 810cee4:	b580      	push	{r7, lr}
 810cee6:	b084      	sub	sp, #16
 810cee8:	af00      	add	r7, sp, #0
 810ceea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 810ceec:	687b      	ldr	r3, [r7, #4]
 810ceee:	689b      	ldr	r3, [r3, #8]
 810cef0:	681b      	ldr	r3, [r3, #0]
 810cef2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 810cef4:	68fb      	ldr	r3, [r7, #12]
 810cef6:	2b00      	cmp	r3, #0
 810cef8:	d012      	beq.n	810cf20 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 810cefa:	687b      	ldr	r3, [r7, #4]
 810cefc:	689b      	ldr	r3, [r3, #8]
 810cefe:	68fa      	ldr	r2, [r7, #12]
 810cf00:	6812      	ldr	r2, [r2, #0]
 810cf02:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 810cf04:	68fb      	ldr	r3, [r7, #12]
 810cf06:	f003 0303 	and.w	r3, r3, #3
 810cf0a:	2b00      	cmp	r3, #0
 810cf0c:	d006      	beq.n	810cf1c <do_memp_malloc_pool+0x38>
 810cf0e:	4b07      	ldr	r3, [pc, #28]	@ (810cf2c <do_memp_malloc_pool+0x48>)
 810cf10:	f44f 728c 	mov.w	r2, #280	@ 0x118
 810cf14:	4906      	ldr	r1, [pc, #24]	@ (810cf30 <do_memp_malloc_pool+0x4c>)
 810cf16:	4807      	ldr	r0, [pc, #28]	@ (810cf34 <do_memp_malloc_pool+0x50>)
 810cf18:	f00a fa8e 	bl	8117438 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 810cf1c:	68fb      	ldr	r3, [r7, #12]
 810cf1e:	e000      	b.n	810cf22 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 810cf20:	2300      	movs	r3, #0
}
 810cf22:	4618      	mov	r0, r3
 810cf24:	3710      	adds	r7, #16
 810cf26:	46bd      	mov	sp, r7
 810cf28:	bd80      	pop	{r7, pc}
 810cf2a:	bf00      	nop
 810cf2c:	0811cd34 	.word	0x0811cd34
 810cf30:	0811cd94 	.word	0x0811cd94
 810cf34:	0811cdb8 	.word	0x0811cdb8

0810cf38 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 810cf38:	b580      	push	{r7, lr}
 810cf3a:	b082      	sub	sp, #8
 810cf3c:	af00      	add	r7, sp, #0
 810cf3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 810cf40:	687b      	ldr	r3, [r7, #4]
 810cf42:	2b00      	cmp	r3, #0
 810cf44:	d106      	bne.n	810cf54 <memp_malloc_pool+0x1c>
 810cf46:	4b0a      	ldr	r3, [pc, #40]	@ (810cf70 <memp_malloc_pool+0x38>)
 810cf48:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 810cf4c:	4909      	ldr	r1, [pc, #36]	@ (810cf74 <memp_malloc_pool+0x3c>)
 810cf4e:	480a      	ldr	r0, [pc, #40]	@ (810cf78 <memp_malloc_pool+0x40>)
 810cf50:	f00a fa72 	bl	8117438 <iprintf>
  if (desc == NULL) {
 810cf54:	687b      	ldr	r3, [r7, #4]
 810cf56:	2b00      	cmp	r3, #0
 810cf58:	d101      	bne.n	810cf5e <memp_malloc_pool+0x26>
    return NULL;
 810cf5a:	2300      	movs	r3, #0
 810cf5c:	e003      	b.n	810cf66 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 810cf5e:	6878      	ldr	r0, [r7, #4]
 810cf60:	f7ff ffc0 	bl	810cee4 <do_memp_malloc_pool>
 810cf64:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 810cf66:	4618      	mov	r0, r3
 810cf68:	3708      	adds	r7, #8
 810cf6a:	46bd      	mov	sp, r7
 810cf6c:	bd80      	pop	{r7, pc}
 810cf6e:	bf00      	nop
 810cf70:	0811cd34 	.word	0x0811cd34
 810cf74:	0811cde0 	.word	0x0811cde0
 810cf78:	0811cdb8 	.word	0x0811cdb8

0810cf7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 810cf7c:	b580      	push	{r7, lr}
 810cf7e:	b084      	sub	sp, #16
 810cf80:	af00      	add	r7, sp, #0
 810cf82:	4603      	mov	r3, r0
 810cf84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 810cf86:	79fb      	ldrb	r3, [r7, #7]
 810cf88:	2b08      	cmp	r3, #8
 810cf8a:	d908      	bls.n	810cf9e <memp_malloc+0x22>
 810cf8c:	4b0a      	ldr	r3, [pc, #40]	@ (810cfb8 <memp_malloc+0x3c>)
 810cf8e:	f240 1257 	movw	r2, #343	@ 0x157
 810cf92:	490a      	ldr	r1, [pc, #40]	@ (810cfbc <memp_malloc+0x40>)
 810cf94:	480a      	ldr	r0, [pc, #40]	@ (810cfc0 <memp_malloc+0x44>)
 810cf96:	f00a fa4f 	bl	8117438 <iprintf>
 810cf9a:	2300      	movs	r3, #0
 810cf9c:	e008      	b.n	810cfb0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 810cf9e:	79fb      	ldrb	r3, [r7, #7]
 810cfa0:	4a08      	ldr	r2, [pc, #32]	@ (810cfc4 <memp_malloc+0x48>)
 810cfa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810cfa6:	4618      	mov	r0, r3
 810cfa8:	f7ff ff9c 	bl	810cee4 <do_memp_malloc_pool>
 810cfac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 810cfae:	68fb      	ldr	r3, [r7, #12]
}
 810cfb0:	4618      	mov	r0, r3
 810cfb2:	3710      	adds	r7, #16
 810cfb4:	46bd      	mov	sp, r7
 810cfb6:	bd80      	pop	{r7, pc}
 810cfb8:	0811cd34 	.word	0x0811cd34
 810cfbc:	0811cdf4 	.word	0x0811cdf4
 810cfc0:	0811cdb8 	.word	0x0811cdb8
 810cfc4:	0811efe8 	.word	0x0811efe8

0810cfc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 810cfc8:	b580      	push	{r7, lr}
 810cfca:	b084      	sub	sp, #16
 810cfcc:	af00      	add	r7, sp, #0
 810cfce:	6078      	str	r0, [r7, #4]
 810cfd0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 810cfd2:	683b      	ldr	r3, [r7, #0]
 810cfd4:	f003 0303 	and.w	r3, r3, #3
 810cfd8:	2b00      	cmp	r3, #0
 810cfda:	d006      	beq.n	810cfea <do_memp_free_pool+0x22>
 810cfdc:	4b0a      	ldr	r3, [pc, #40]	@ (810d008 <do_memp_free_pool+0x40>)
 810cfde:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 810cfe2:	490a      	ldr	r1, [pc, #40]	@ (810d00c <do_memp_free_pool+0x44>)
 810cfe4:	480a      	ldr	r0, [pc, #40]	@ (810d010 <do_memp_free_pool+0x48>)
 810cfe6:	f00a fa27 	bl	8117438 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 810cfea:	683b      	ldr	r3, [r7, #0]
 810cfec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 810cfee:	687b      	ldr	r3, [r7, #4]
 810cff0:	689b      	ldr	r3, [r3, #8]
 810cff2:	681a      	ldr	r2, [r3, #0]
 810cff4:	68fb      	ldr	r3, [r7, #12]
 810cff6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 810cff8:	687b      	ldr	r3, [r7, #4]
 810cffa:	689b      	ldr	r3, [r3, #8]
 810cffc:	68fa      	ldr	r2, [r7, #12]
 810cffe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 810d000:	bf00      	nop
 810d002:	3710      	adds	r7, #16
 810d004:	46bd      	mov	sp, r7
 810d006:	bd80      	pop	{r7, pc}
 810d008:	0811cd34 	.word	0x0811cd34
 810d00c:	0811ce14 	.word	0x0811ce14
 810d010:	0811cdb8 	.word	0x0811cdb8

0810d014 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 810d014:	b580      	push	{r7, lr}
 810d016:	b082      	sub	sp, #8
 810d018:	af00      	add	r7, sp, #0
 810d01a:	6078      	str	r0, [r7, #4]
 810d01c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 810d01e:	687b      	ldr	r3, [r7, #4]
 810d020:	2b00      	cmp	r3, #0
 810d022:	d106      	bne.n	810d032 <memp_free_pool+0x1e>
 810d024:	4b0a      	ldr	r3, [pc, #40]	@ (810d050 <memp_free_pool+0x3c>)
 810d026:	f240 1295 	movw	r2, #405	@ 0x195
 810d02a:	490a      	ldr	r1, [pc, #40]	@ (810d054 <memp_free_pool+0x40>)
 810d02c:	480a      	ldr	r0, [pc, #40]	@ (810d058 <memp_free_pool+0x44>)
 810d02e:	f00a fa03 	bl	8117438 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 810d032:	687b      	ldr	r3, [r7, #4]
 810d034:	2b00      	cmp	r3, #0
 810d036:	d007      	beq.n	810d048 <memp_free_pool+0x34>
 810d038:	683b      	ldr	r3, [r7, #0]
 810d03a:	2b00      	cmp	r3, #0
 810d03c:	d004      	beq.n	810d048 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 810d03e:	6839      	ldr	r1, [r7, #0]
 810d040:	6878      	ldr	r0, [r7, #4]
 810d042:	f7ff ffc1 	bl	810cfc8 <do_memp_free_pool>
 810d046:	e000      	b.n	810d04a <memp_free_pool+0x36>
    return;
 810d048:	bf00      	nop
}
 810d04a:	3708      	adds	r7, #8
 810d04c:	46bd      	mov	sp, r7
 810d04e:	bd80      	pop	{r7, pc}
 810d050:	0811cd34 	.word	0x0811cd34
 810d054:	0811cde0 	.word	0x0811cde0
 810d058:	0811cdb8 	.word	0x0811cdb8

0810d05c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 810d05c:	b580      	push	{r7, lr}
 810d05e:	b082      	sub	sp, #8
 810d060:	af00      	add	r7, sp, #0
 810d062:	4603      	mov	r3, r0
 810d064:	6039      	str	r1, [r7, #0]
 810d066:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 810d068:	79fb      	ldrb	r3, [r7, #7]
 810d06a:	2b08      	cmp	r3, #8
 810d06c:	d907      	bls.n	810d07e <memp_free+0x22>
 810d06e:	4b0c      	ldr	r3, [pc, #48]	@ (810d0a0 <memp_free+0x44>)
 810d070:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 810d074:	490b      	ldr	r1, [pc, #44]	@ (810d0a4 <memp_free+0x48>)
 810d076:	480c      	ldr	r0, [pc, #48]	@ (810d0a8 <memp_free+0x4c>)
 810d078:	f00a f9de 	bl	8117438 <iprintf>
 810d07c:	e00c      	b.n	810d098 <memp_free+0x3c>

  if (mem == NULL) {
 810d07e:	683b      	ldr	r3, [r7, #0]
 810d080:	2b00      	cmp	r3, #0
 810d082:	d008      	beq.n	810d096 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 810d084:	79fb      	ldrb	r3, [r7, #7]
 810d086:	4a09      	ldr	r2, [pc, #36]	@ (810d0ac <memp_free+0x50>)
 810d088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810d08c:	6839      	ldr	r1, [r7, #0]
 810d08e:	4618      	mov	r0, r3
 810d090:	f7ff ff9a 	bl	810cfc8 <do_memp_free_pool>
 810d094:	e000      	b.n	810d098 <memp_free+0x3c>
    return;
 810d096:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 810d098:	3708      	adds	r7, #8
 810d09a:	46bd      	mov	sp, r7
 810d09c:	bd80      	pop	{r7, pc}
 810d09e:	bf00      	nop
 810d0a0:	0811cd34 	.word	0x0811cd34
 810d0a4:	0811ce34 	.word	0x0811ce34
 810d0a8:	0811cdb8 	.word	0x0811cdb8
 810d0ac:	0811efe8 	.word	0x0811efe8

0810d0b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 810d0b0:	b480      	push	{r7}
 810d0b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 810d0b4:	bf00      	nop
 810d0b6:	46bd      	mov	sp, r7
 810d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0bc:	4770      	bx	lr
	...

0810d0c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 810d0c0:	b580      	push	{r7, lr}
 810d0c2:	b086      	sub	sp, #24
 810d0c4:	af00      	add	r7, sp, #0
 810d0c6:	60f8      	str	r0, [r7, #12]
 810d0c8:	60b9      	str	r1, [r7, #8]
 810d0ca:	607a      	str	r2, [r7, #4]
 810d0cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 810d0ce:	68fb      	ldr	r3, [r7, #12]
 810d0d0:	2b00      	cmp	r3, #0
 810d0d2:	d108      	bne.n	810d0e6 <netif_add+0x26>
 810d0d4:	4b57      	ldr	r3, [pc, #348]	@ (810d234 <netif_add+0x174>)
 810d0d6:	f240 1227 	movw	r2, #295	@ 0x127
 810d0da:	4957      	ldr	r1, [pc, #348]	@ (810d238 <netif_add+0x178>)
 810d0dc:	4857      	ldr	r0, [pc, #348]	@ (810d23c <netif_add+0x17c>)
 810d0de:	f00a f9ab 	bl	8117438 <iprintf>
 810d0e2:	2300      	movs	r3, #0
 810d0e4:	e0a2      	b.n	810d22c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 810d0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d0e8:	2b00      	cmp	r3, #0
 810d0ea:	d108      	bne.n	810d0fe <netif_add+0x3e>
 810d0ec:	4b51      	ldr	r3, [pc, #324]	@ (810d234 <netif_add+0x174>)
 810d0ee:	f44f 7294 	mov.w	r2, #296	@ 0x128
 810d0f2:	4953      	ldr	r1, [pc, #332]	@ (810d240 <netif_add+0x180>)
 810d0f4:	4851      	ldr	r0, [pc, #324]	@ (810d23c <netif_add+0x17c>)
 810d0f6:	f00a f99f 	bl	8117438 <iprintf>
 810d0fa:	2300      	movs	r3, #0
 810d0fc:	e096      	b.n	810d22c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 810d0fe:	68bb      	ldr	r3, [r7, #8]
 810d100:	2b00      	cmp	r3, #0
 810d102:	d101      	bne.n	810d108 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 810d104:	4b4f      	ldr	r3, [pc, #316]	@ (810d244 <netif_add+0x184>)
 810d106:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 810d108:	687b      	ldr	r3, [r7, #4]
 810d10a:	2b00      	cmp	r3, #0
 810d10c:	d101      	bne.n	810d112 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 810d10e:	4b4d      	ldr	r3, [pc, #308]	@ (810d244 <netif_add+0x184>)
 810d110:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 810d112:	683b      	ldr	r3, [r7, #0]
 810d114:	2b00      	cmp	r3, #0
 810d116:	d101      	bne.n	810d11c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 810d118:	4b4a      	ldr	r3, [pc, #296]	@ (810d244 <netif_add+0x184>)
 810d11a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 810d11c:	68fb      	ldr	r3, [r7, #12]
 810d11e:	2200      	movs	r2, #0
 810d120:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 810d122:	68fb      	ldr	r3, [r7, #12]
 810d124:	2200      	movs	r2, #0
 810d126:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 810d128:	68fb      	ldr	r3, [r7, #12]
 810d12a:	2200      	movs	r2, #0
 810d12c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 810d12e:	68fb      	ldr	r3, [r7, #12]
 810d130:	4a45      	ldr	r2, [pc, #276]	@ (810d248 <netif_add+0x188>)
 810d132:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 810d134:	68fb      	ldr	r3, [r7, #12]
 810d136:	2200      	movs	r2, #0
 810d138:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 810d13a:	68fb      	ldr	r3, [r7, #12]
 810d13c:	2200      	movs	r2, #0
 810d13e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 810d142:	68fb      	ldr	r3, [r7, #12]
 810d144:	2200      	movs	r2, #0
 810d146:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 810d148:	68fb      	ldr	r3, [r7, #12]
 810d14a:	6a3a      	ldr	r2, [r7, #32]
 810d14c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 810d14e:	4b3f      	ldr	r3, [pc, #252]	@ (810d24c <netif_add+0x18c>)
 810d150:	781a      	ldrb	r2, [r3, #0]
 810d152:	68fb      	ldr	r3, [r7, #12]
 810d154:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 810d158:	68fb      	ldr	r3, [r7, #12]
 810d15a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810d15c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 810d15e:	683b      	ldr	r3, [r7, #0]
 810d160:	687a      	ldr	r2, [r7, #4]
 810d162:	68b9      	ldr	r1, [r7, #8]
 810d164:	68f8      	ldr	r0, [r7, #12]
 810d166:	f000 f913 	bl	810d390 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 810d16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d16c:	68f8      	ldr	r0, [r7, #12]
 810d16e:	4798      	blx	r3
 810d170:	4603      	mov	r3, r0
 810d172:	2b00      	cmp	r3, #0
 810d174:	d001      	beq.n	810d17a <netif_add+0xba>
    return NULL;
 810d176:	2300      	movs	r3, #0
 810d178:	e058      	b.n	810d22c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 810d17a:	68fb      	ldr	r3, [r7, #12]
 810d17c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810d180:	2bff      	cmp	r3, #255	@ 0xff
 810d182:	d103      	bne.n	810d18c <netif_add+0xcc>
        netif->num = 0;
 810d184:	68fb      	ldr	r3, [r7, #12]
 810d186:	2200      	movs	r2, #0
 810d188:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 810d18c:	2300      	movs	r3, #0
 810d18e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 810d190:	4b2f      	ldr	r3, [pc, #188]	@ (810d250 <netif_add+0x190>)
 810d192:	681b      	ldr	r3, [r3, #0]
 810d194:	617b      	str	r3, [r7, #20]
 810d196:	e02b      	b.n	810d1f0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 810d198:	697a      	ldr	r2, [r7, #20]
 810d19a:	68fb      	ldr	r3, [r7, #12]
 810d19c:	429a      	cmp	r2, r3
 810d19e:	d106      	bne.n	810d1ae <netif_add+0xee>
 810d1a0:	4b24      	ldr	r3, [pc, #144]	@ (810d234 <netif_add+0x174>)
 810d1a2:	f240 128b 	movw	r2, #395	@ 0x18b
 810d1a6:	492b      	ldr	r1, [pc, #172]	@ (810d254 <netif_add+0x194>)
 810d1a8:	4824      	ldr	r0, [pc, #144]	@ (810d23c <netif_add+0x17c>)
 810d1aa:	f00a f945 	bl	8117438 <iprintf>
        num_netifs++;
 810d1ae:	693b      	ldr	r3, [r7, #16]
 810d1b0:	3301      	adds	r3, #1
 810d1b2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 810d1b4:	693b      	ldr	r3, [r7, #16]
 810d1b6:	2bff      	cmp	r3, #255	@ 0xff
 810d1b8:	dd06      	ble.n	810d1c8 <netif_add+0x108>
 810d1ba:	4b1e      	ldr	r3, [pc, #120]	@ (810d234 <netif_add+0x174>)
 810d1bc:	f240 128d 	movw	r2, #397	@ 0x18d
 810d1c0:	4925      	ldr	r1, [pc, #148]	@ (810d258 <netif_add+0x198>)
 810d1c2:	481e      	ldr	r0, [pc, #120]	@ (810d23c <netif_add+0x17c>)
 810d1c4:	f00a f938 	bl	8117438 <iprintf>
        if (netif2->num == netif->num) {
 810d1c8:	697b      	ldr	r3, [r7, #20]
 810d1ca:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 810d1ce:	68fb      	ldr	r3, [r7, #12]
 810d1d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810d1d4:	429a      	cmp	r2, r3
 810d1d6:	d108      	bne.n	810d1ea <netif_add+0x12a>
          netif->num++;
 810d1d8:	68fb      	ldr	r3, [r7, #12]
 810d1da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810d1de:	3301      	adds	r3, #1
 810d1e0:	b2da      	uxtb	r2, r3
 810d1e2:	68fb      	ldr	r3, [r7, #12]
 810d1e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 810d1e8:	e005      	b.n	810d1f6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 810d1ea:	697b      	ldr	r3, [r7, #20]
 810d1ec:	681b      	ldr	r3, [r3, #0]
 810d1ee:	617b      	str	r3, [r7, #20]
 810d1f0:	697b      	ldr	r3, [r7, #20]
 810d1f2:	2b00      	cmp	r3, #0
 810d1f4:	d1d0      	bne.n	810d198 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 810d1f6:	697b      	ldr	r3, [r7, #20]
 810d1f8:	2b00      	cmp	r3, #0
 810d1fa:	d1be      	bne.n	810d17a <netif_add+0xba>
  }
  if (netif->num == 254) {
 810d1fc:	68fb      	ldr	r3, [r7, #12]
 810d1fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810d202:	2bfe      	cmp	r3, #254	@ 0xfe
 810d204:	d103      	bne.n	810d20e <netif_add+0x14e>
    netif_num = 0;
 810d206:	4b11      	ldr	r3, [pc, #68]	@ (810d24c <netif_add+0x18c>)
 810d208:	2200      	movs	r2, #0
 810d20a:	701a      	strb	r2, [r3, #0]
 810d20c:	e006      	b.n	810d21c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 810d20e:	68fb      	ldr	r3, [r7, #12]
 810d210:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810d214:	3301      	adds	r3, #1
 810d216:	b2da      	uxtb	r2, r3
 810d218:	4b0c      	ldr	r3, [pc, #48]	@ (810d24c <netif_add+0x18c>)
 810d21a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 810d21c:	4b0c      	ldr	r3, [pc, #48]	@ (810d250 <netif_add+0x190>)
 810d21e:	681a      	ldr	r2, [r3, #0]
 810d220:	68fb      	ldr	r3, [r7, #12]
 810d222:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 810d224:	4a0a      	ldr	r2, [pc, #40]	@ (810d250 <netif_add+0x190>)
 810d226:	68fb      	ldr	r3, [r7, #12]
 810d228:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 810d22a:	68fb      	ldr	r3, [r7, #12]
}
 810d22c:	4618      	mov	r0, r3
 810d22e:	3718      	adds	r7, #24
 810d230:	46bd      	mov	sp, r7
 810d232:	bd80      	pop	{r7, pc}
 810d234:	0811ce50 	.word	0x0811ce50
 810d238:	0811cf10 	.word	0x0811cf10
 810d23c:	0811cecc 	.word	0x0811cecc
 810d240:	0811cf2c 	.word	0x0811cf2c
 810d244:	0811ef78 	.word	0x0811ef78
 810d248:	0810d66b 	.word	0x0810d66b
 810d24c:	100176f4 	.word	0x100176f4
 810d250:	100176ec 	.word	0x100176ec
 810d254:	0811cf50 	.word	0x0811cf50
 810d258:	0811cf64 	.word	0x0811cf64

0810d25c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 810d25c:	b580      	push	{r7, lr}
 810d25e:	b082      	sub	sp, #8
 810d260:	af00      	add	r7, sp, #0
 810d262:	6078      	str	r0, [r7, #4]
 810d264:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 810d266:	6839      	ldr	r1, [r7, #0]
 810d268:	6878      	ldr	r0, [r7, #4]
 810d26a:	f002 fcdf 	bl	810fc2c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 810d26e:	6839      	ldr	r1, [r7, #0]
 810d270:	6878      	ldr	r0, [r7, #4]
 810d272:	f007 fb77 	bl	8114964 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 810d276:	bf00      	nop
 810d278:	3708      	adds	r7, #8
 810d27a:	46bd      	mov	sp, r7
 810d27c:	bd80      	pop	{r7, pc}
	...

0810d280 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 810d280:	b580      	push	{r7, lr}
 810d282:	b086      	sub	sp, #24
 810d284:	af00      	add	r7, sp, #0
 810d286:	60f8      	str	r0, [r7, #12]
 810d288:	60b9      	str	r1, [r7, #8]
 810d28a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 810d28c:	68bb      	ldr	r3, [r7, #8]
 810d28e:	2b00      	cmp	r3, #0
 810d290:	d106      	bne.n	810d2a0 <netif_do_set_ipaddr+0x20>
 810d292:	4b1d      	ldr	r3, [pc, #116]	@ (810d308 <netif_do_set_ipaddr+0x88>)
 810d294:	f240 12cb 	movw	r2, #459	@ 0x1cb
 810d298:	491c      	ldr	r1, [pc, #112]	@ (810d30c <netif_do_set_ipaddr+0x8c>)
 810d29a:	481d      	ldr	r0, [pc, #116]	@ (810d310 <netif_do_set_ipaddr+0x90>)
 810d29c:	f00a f8cc 	bl	8117438 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 810d2a0:	687b      	ldr	r3, [r7, #4]
 810d2a2:	2b00      	cmp	r3, #0
 810d2a4:	d106      	bne.n	810d2b4 <netif_do_set_ipaddr+0x34>
 810d2a6:	4b18      	ldr	r3, [pc, #96]	@ (810d308 <netif_do_set_ipaddr+0x88>)
 810d2a8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 810d2ac:	4917      	ldr	r1, [pc, #92]	@ (810d30c <netif_do_set_ipaddr+0x8c>)
 810d2ae:	4818      	ldr	r0, [pc, #96]	@ (810d310 <netif_do_set_ipaddr+0x90>)
 810d2b0:	f00a f8c2 	bl	8117438 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 810d2b4:	68bb      	ldr	r3, [r7, #8]
 810d2b6:	681a      	ldr	r2, [r3, #0]
 810d2b8:	68fb      	ldr	r3, [r7, #12]
 810d2ba:	3304      	adds	r3, #4
 810d2bc:	681b      	ldr	r3, [r3, #0]
 810d2be:	429a      	cmp	r2, r3
 810d2c0:	d01c      	beq.n	810d2fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 810d2c2:	68bb      	ldr	r3, [r7, #8]
 810d2c4:	681b      	ldr	r3, [r3, #0]
 810d2c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 810d2c8:	68fb      	ldr	r3, [r7, #12]
 810d2ca:	3304      	adds	r3, #4
 810d2cc:	681a      	ldr	r2, [r3, #0]
 810d2ce:	687b      	ldr	r3, [r7, #4]
 810d2d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 810d2d2:	f107 0314 	add.w	r3, r7, #20
 810d2d6:	4619      	mov	r1, r3
 810d2d8:	6878      	ldr	r0, [r7, #4]
 810d2da:	f7ff ffbf 	bl	810d25c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 810d2de:	68bb      	ldr	r3, [r7, #8]
 810d2e0:	2b00      	cmp	r3, #0
 810d2e2:	d002      	beq.n	810d2ea <netif_do_set_ipaddr+0x6a>
 810d2e4:	68bb      	ldr	r3, [r7, #8]
 810d2e6:	681b      	ldr	r3, [r3, #0]
 810d2e8:	e000      	b.n	810d2ec <netif_do_set_ipaddr+0x6c>
 810d2ea:	2300      	movs	r3, #0
 810d2ec:	68fa      	ldr	r2, [r7, #12]
 810d2ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 810d2f0:	2101      	movs	r1, #1
 810d2f2:	68f8      	ldr	r0, [r7, #12]
 810d2f4:	f000 f8d2 	bl	810d49c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 810d2f8:	2301      	movs	r3, #1
 810d2fa:	e000      	b.n	810d2fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 810d2fc:	2300      	movs	r3, #0
}
 810d2fe:	4618      	mov	r0, r3
 810d300:	3718      	adds	r7, #24
 810d302:	46bd      	mov	sp, r7
 810d304:	bd80      	pop	{r7, pc}
 810d306:	bf00      	nop
 810d308:	0811ce50 	.word	0x0811ce50
 810d30c:	0811cf94 	.word	0x0811cf94
 810d310:	0811cecc 	.word	0x0811cecc

0810d314 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 810d314:	b480      	push	{r7}
 810d316:	b085      	sub	sp, #20
 810d318:	af00      	add	r7, sp, #0
 810d31a:	60f8      	str	r0, [r7, #12]
 810d31c:	60b9      	str	r1, [r7, #8]
 810d31e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 810d320:	68bb      	ldr	r3, [r7, #8]
 810d322:	681a      	ldr	r2, [r3, #0]
 810d324:	68fb      	ldr	r3, [r7, #12]
 810d326:	3308      	adds	r3, #8
 810d328:	681b      	ldr	r3, [r3, #0]
 810d32a:	429a      	cmp	r2, r3
 810d32c:	d00a      	beq.n	810d344 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 810d32e:	68bb      	ldr	r3, [r7, #8]
 810d330:	2b00      	cmp	r3, #0
 810d332:	d002      	beq.n	810d33a <netif_do_set_netmask+0x26>
 810d334:	68bb      	ldr	r3, [r7, #8]
 810d336:	681b      	ldr	r3, [r3, #0]
 810d338:	e000      	b.n	810d33c <netif_do_set_netmask+0x28>
 810d33a:	2300      	movs	r3, #0
 810d33c:	68fa      	ldr	r2, [r7, #12]
 810d33e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 810d340:	2301      	movs	r3, #1
 810d342:	e000      	b.n	810d346 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 810d344:	2300      	movs	r3, #0
}
 810d346:	4618      	mov	r0, r3
 810d348:	3714      	adds	r7, #20
 810d34a:	46bd      	mov	sp, r7
 810d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d350:	4770      	bx	lr

0810d352 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 810d352:	b480      	push	{r7}
 810d354:	b085      	sub	sp, #20
 810d356:	af00      	add	r7, sp, #0
 810d358:	60f8      	str	r0, [r7, #12]
 810d35a:	60b9      	str	r1, [r7, #8]
 810d35c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 810d35e:	68bb      	ldr	r3, [r7, #8]
 810d360:	681a      	ldr	r2, [r3, #0]
 810d362:	68fb      	ldr	r3, [r7, #12]
 810d364:	330c      	adds	r3, #12
 810d366:	681b      	ldr	r3, [r3, #0]
 810d368:	429a      	cmp	r2, r3
 810d36a:	d00a      	beq.n	810d382 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 810d36c:	68bb      	ldr	r3, [r7, #8]
 810d36e:	2b00      	cmp	r3, #0
 810d370:	d002      	beq.n	810d378 <netif_do_set_gw+0x26>
 810d372:	68bb      	ldr	r3, [r7, #8]
 810d374:	681b      	ldr	r3, [r3, #0]
 810d376:	e000      	b.n	810d37a <netif_do_set_gw+0x28>
 810d378:	2300      	movs	r3, #0
 810d37a:	68fa      	ldr	r2, [r7, #12]
 810d37c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 810d37e:	2301      	movs	r3, #1
 810d380:	e000      	b.n	810d384 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 810d382:	2300      	movs	r3, #0
}
 810d384:	4618      	mov	r0, r3
 810d386:	3714      	adds	r7, #20
 810d388:	46bd      	mov	sp, r7
 810d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d38e:	4770      	bx	lr

0810d390 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 810d390:	b580      	push	{r7, lr}
 810d392:	b088      	sub	sp, #32
 810d394:	af00      	add	r7, sp, #0
 810d396:	60f8      	str	r0, [r7, #12]
 810d398:	60b9      	str	r1, [r7, #8]
 810d39a:	607a      	str	r2, [r7, #4]
 810d39c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 810d39e:	2300      	movs	r3, #0
 810d3a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 810d3a2:	2300      	movs	r3, #0
 810d3a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 810d3a6:	68bb      	ldr	r3, [r7, #8]
 810d3a8:	2b00      	cmp	r3, #0
 810d3aa:	d101      	bne.n	810d3b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 810d3ac:	4b1c      	ldr	r3, [pc, #112]	@ (810d420 <netif_set_addr+0x90>)
 810d3ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 810d3b0:	687b      	ldr	r3, [r7, #4]
 810d3b2:	2b00      	cmp	r3, #0
 810d3b4:	d101      	bne.n	810d3ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 810d3b6:	4b1a      	ldr	r3, [pc, #104]	@ (810d420 <netif_set_addr+0x90>)
 810d3b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 810d3ba:	683b      	ldr	r3, [r7, #0]
 810d3bc:	2b00      	cmp	r3, #0
 810d3be:	d101      	bne.n	810d3c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 810d3c0:	4b17      	ldr	r3, [pc, #92]	@ (810d420 <netif_set_addr+0x90>)
 810d3c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 810d3c4:	68bb      	ldr	r3, [r7, #8]
 810d3c6:	2b00      	cmp	r3, #0
 810d3c8:	d003      	beq.n	810d3d2 <netif_set_addr+0x42>
 810d3ca:	68bb      	ldr	r3, [r7, #8]
 810d3cc:	681b      	ldr	r3, [r3, #0]
 810d3ce:	2b00      	cmp	r3, #0
 810d3d0:	d101      	bne.n	810d3d6 <netif_set_addr+0x46>
 810d3d2:	2301      	movs	r3, #1
 810d3d4:	e000      	b.n	810d3d8 <netif_set_addr+0x48>
 810d3d6:	2300      	movs	r3, #0
 810d3d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 810d3da:	697b      	ldr	r3, [r7, #20]
 810d3dc:	2b00      	cmp	r3, #0
 810d3de:	d006      	beq.n	810d3ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 810d3e0:	f107 0310 	add.w	r3, r7, #16
 810d3e4:	461a      	mov	r2, r3
 810d3e6:	68b9      	ldr	r1, [r7, #8]
 810d3e8:	68f8      	ldr	r0, [r7, #12]
 810d3ea:	f7ff ff49 	bl	810d280 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 810d3ee:	69fa      	ldr	r2, [r7, #28]
 810d3f0:	6879      	ldr	r1, [r7, #4]
 810d3f2:	68f8      	ldr	r0, [r7, #12]
 810d3f4:	f7ff ff8e 	bl	810d314 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 810d3f8:	69ba      	ldr	r2, [r7, #24]
 810d3fa:	6839      	ldr	r1, [r7, #0]
 810d3fc:	68f8      	ldr	r0, [r7, #12]
 810d3fe:	f7ff ffa8 	bl	810d352 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 810d402:	697b      	ldr	r3, [r7, #20]
 810d404:	2b00      	cmp	r3, #0
 810d406:	d106      	bne.n	810d416 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 810d408:	f107 0310 	add.w	r3, r7, #16
 810d40c:	461a      	mov	r2, r3
 810d40e:	68b9      	ldr	r1, [r7, #8]
 810d410:	68f8      	ldr	r0, [r7, #12]
 810d412:	f7ff ff35 	bl	810d280 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 810d416:	bf00      	nop
 810d418:	3720      	adds	r7, #32
 810d41a:	46bd      	mov	sp, r7
 810d41c:	bd80      	pop	{r7, pc}
 810d41e:	bf00      	nop
 810d420:	0811ef78 	.word	0x0811ef78

0810d424 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 810d424:	b480      	push	{r7}
 810d426:	b083      	sub	sp, #12
 810d428:	af00      	add	r7, sp, #0
 810d42a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 810d42c:	4a04      	ldr	r2, [pc, #16]	@ (810d440 <netif_set_default+0x1c>)
 810d42e:	687b      	ldr	r3, [r7, #4]
 810d430:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 810d432:	bf00      	nop
 810d434:	370c      	adds	r7, #12
 810d436:	46bd      	mov	sp, r7
 810d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d43c:	4770      	bx	lr
 810d43e:	bf00      	nop
 810d440:	100176f0 	.word	0x100176f0

0810d444 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 810d444:	b580      	push	{r7, lr}
 810d446:	b082      	sub	sp, #8
 810d448:	af00      	add	r7, sp, #0
 810d44a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 810d44c:	687b      	ldr	r3, [r7, #4]
 810d44e:	2b00      	cmp	r3, #0
 810d450:	d107      	bne.n	810d462 <netif_set_up+0x1e>
 810d452:	4b0f      	ldr	r3, [pc, #60]	@ (810d490 <netif_set_up+0x4c>)
 810d454:	f44f 7254 	mov.w	r2, #848	@ 0x350
 810d458:	490e      	ldr	r1, [pc, #56]	@ (810d494 <netif_set_up+0x50>)
 810d45a:	480f      	ldr	r0, [pc, #60]	@ (810d498 <netif_set_up+0x54>)
 810d45c:	f009 ffec 	bl	8117438 <iprintf>
 810d460:	e013      	b.n	810d48a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 810d462:	687b      	ldr	r3, [r7, #4]
 810d464:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d468:	f003 0301 	and.w	r3, r3, #1
 810d46c:	2b00      	cmp	r3, #0
 810d46e:	d10c      	bne.n	810d48a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 810d470:	687b      	ldr	r3, [r7, #4]
 810d472:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d476:	f043 0301 	orr.w	r3, r3, #1
 810d47a:	b2da      	uxtb	r2, r3
 810d47c:	687b      	ldr	r3, [r7, #4]
 810d47e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 810d482:	2103      	movs	r1, #3
 810d484:	6878      	ldr	r0, [r7, #4]
 810d486:	f000 f809 	bl	810d49c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 810d48a:	3708      	adds	r7, #8
 810d48c:	46bd      	mov	sp, r7
 810d48e:	bd80      	pop	{r7, pc}
 810d490:	0811ce50 	.word	0x0811ce50
 810d494:	0811d004 	.word	0x0811d004
 810d498:	0811cecc 	.word	0x0811cecc

0810d49c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 810d49c:	b580      	push	{r7, lr}
 810d49e:	b082      	sub	sp, #8
 810d4a0:	af00      	add	r7, sp, #0
 810d4a2:	6078      	str	r0, [r7, #4]
 810d4a4:	460b      	mov	r3, r1
 810d4a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 810d4a8:	687b      	ldr	r3, [r7, #4]
 810d4aa:	2b00      	cmp	r3, #0
 810d4ac:	d106      	bne.n	810d4bc <netif_issue_reports+0x20>
 810d4ae:	4b18      	ldr	r3, [pc, #96]	@ (810d510 <netif_issue_reports+0x74>)
 810d4b0:	f240 326d 	movw	r2, #877	@ 0x36d
 810d4b4:	4917      	ldr	r1, [pc, #92]	@ (810d514 <netif_issue_reports+0x78>)
 810d4b6:	4818      	ldr	r0, [pc, #96]	@ (810d518 <netif_issue_reports+0x7c>)
 810d4b8:	f009 ffbe 	bl	8117438 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 810d4bc:	687b      	ldr	r3, [r7, #4]
 810d4be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d4c2:	f003 0304 	and.w	r3, r3, #4
 810d4c6:	2b00      	cmp	r3, #0
 810d4c8:	d01e      	beq.n	810d508 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 810d4ca:	687b      	ldr	r3, [r7, #4]
 810d4cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d4d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 810d4d4:	2b00      	cmp	r3, #0
 810d4d6:	d017      	beq.n	810d508 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 810d4d8:	78fb      	ldrb	r3, [r7, #3]
 810d4da:	f003 0301 	and.w	r3, r3, #1
 810d4de:	2b00      	cmp	r3, #0
 810d4e0:	d013      	beq.n	810d50a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810d4e2:	687b      	ldr	r3, [r7, #4]
 810d4e4:	3304      	adds	r3, #4
 810d4e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 810d4e8:	2b00      	cmp	r3, #0
 810d4ea:	d00e      	beq.n	810d50a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 810d4ec:	687b      	ldr	r3, [r7, #4]
 810d4ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d4f2:	f003 0308 	and.w	r3, r3, #8
 810d4f6:	2b00      	cmp	r3, #0
 810d4f8:	d007      	beq.n	810d50a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 810d4fa:	687b      	ldr	r3, [r7, #4]
 810d4fc:	3304      	adds	r3, #4
 810d4fe:	4619      	mov	r1, r3
 810d500:	6878      	ldr	r0, [r7, #4]
 810d502:	f7fd fc87 	bl	810ae14 <etharp_request>
 810d506:	e000      	b.n	810d50a <netif_issue_reports+0x6e>
    return;
 810d508:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 810d50a:	3708      	adds	r7, #8
 810d50c:	46bd      	mov	sp, r7
 810d50e:	bd80      	pop	{r7, pc}
 810d510:	0811ce50 	.word	0x0811ce50
 810d514:	0811d020 	.word	0x0811d020
 810d518:	0811cecc 	.word	0x0811cecc

0810d51c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 810d51c:	b580      	push	{r7, lr}
 810d51e:	b082      	sub	sp, #8
 810d520:	af00      	add	r7, sp, #0
 810d522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 810d524:	687b      	ldr	r3, [r7, #4]
 810d526:	2b00      	cmp	r3, #0
 810d528:	d107      	bne.n	810d53a <netif_set_down+0x1e>
 810d52a:	4b12      	ldr	r3, [pc, #72]	@ (810d574 <netif_set_down+0x58>)
 810d52c:	f240 329b 	movw	r2, #923	@ 0x39b
 810d530:	4911      	ldr	r1, [pc, #68]	@ (810d578 <netif_set_down+0x5c>)
 810d532:	4812      	ldr	r0, [pc, #72]	@ (810d57c <netif_set_down+0x60>)
 810d534:	f009 ff80 	bl	8117438 <iprintf>
 810d538:	e019      	b.n	810d56e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 810d53a:	687b      	ldr	r3, [r7, #4]
 810d53c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d540:	f003 0301 	and.w	r3, r3, #1
 810d544:	2b00      	cmp	r3, #0
 810d546:	d012      	beq.n	810d56e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 810d548:	687b      	ldr	r3, [r7, #4]
 810d54a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d54e:	f023 0301 	bic.w	r3, r3, #1
 810d552:	b2da      	uxtb	r2, r3
 810d554:	687b      	ldr	r3, [r7, #4]
 810d556:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 810d55a:	687b      	ldr	r3, [r7, #4]
 810d55c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d560:	f003 0308 	and.w	r3, r3, #8
 810d564:	2b00      	cmp	r3, #0
 810d566:	d002      	beq.n	810d56e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 810d568:	6878      	ldr	r0, [r7, #4]
 810d56a:	f7fd f811 	bl	810a590 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 810d56e:	3708      	adds	r7, #8
 810d570:	46bd      	mov	sp, r7
 810d572:	bd80      	pop	{r7, pc}
 810d574:	0811ce50 	.word	0x0811ce50
 810d578:	0811d044 	.word	0x0811d044
 810d57c:	0811cecc 	.word	0x0811cecc

0810d580 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 810d580:	b580      	push	{r7, lr}
 810d582:	b082      	sub	sp, #8
 810d584:	af00      	add	r7, sp, #0
 810d586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 810d588:	687b      	ldr	r3, [r7, #4]
 810d58a:	2b00      	cmp	r3, #0
 810d58c:	d107      	bne.n	810d59e <netif_set_link_up+0x1e>
 810d58e:	4b13      	ldr	r3, [pc, #76]	@ (810d5dc <netif_set_link_up+0x5c>)
 810d590:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 810d594:	4912      	ldr	r1, [pc, #72]	@ (810d5e0 <netif_set_link_up+0x60>)
 810d596:	4813      	ldr	r0, [pc, #76]	@ (810d5e4 <netif_set_link_up+0x64>)
 810d598:	f009 ff4e 	bl	8117438 <iprintf>
 810d59c:	e01b      	b.n	810d5d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 810d59e:	687b      	ldr	r3, [r7, #4]
 810d5a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d5a4:	f003 0304 	and.w	r3, r3, #4
 810d5a8:	2b00      	cmp	r3, #0
 810d5aa:	d114      	bne.n	810d5d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 810d5ac:	687b      	ldr	r3, [r7, #4]
 810d5ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d5b2:	f043 0304 	orr.w	r3, r3, #4
 810d5b6:	b2da      	uxtb	r2, r3
 810d5b8:	687b      	ldr	r3, [r7, #4]
 810d5ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 810d5be:	2103      	movs	r1, #3
 810d5c0:	6878      	ldr	r0, [r7, #4]
 810d5c2:	f7ff ff6b 	bl	810d49c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 810d5c6:	687b      	ldr	r3, [r7, #4]
 810d5c8:	69db      	ldr	r3, [r3, #28]
 810d5ca:	2b00      	cmp	r3, #0
 810d5cc:	d003      	beq.n	810d5d6 <netif_set_link_up+0x56>
 810d5ce:	687b      	ldr	r3, [r7, #4]
 810d5d0:	69db      	ldr	r3, [r3, #28]
 810d5d2:	6878      	ldr	r0, [r7, #4]
 810d5d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 810d5d6:	3708      	adds	r7, #8
 810d5d8:	46bd      	mov	sp, r7
 810d5da:	bd80      	pop	{r7, pc}
 810d5dc:	0811ce50 	.word	0x0811ce50
 810d5e0:	0811d064 	.word	0x0811d064
 810d5e4:	0811cecc 	.word	0x0811cecc

0810d5e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 810d5e8:	b580      	push	{r7, lr}
 810d5ea:	b082      	sub	sp, #8
 810d5ec:	af00      	add	r7, sp, #0
 810d5ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 810d5f0:	687b      	ldr	r3, [r7, #4]
 810d5f2:	2b00      	cmp	r3, #0
 810d5f4:	d107      	bne.n	810d606 <netif_set_link_down+0x1e>
 810d5f6:	4b11      	ldr	r3, [pc, #68]	@ (810d63c <netif_set_link_down+0x54>)
 810d5f8:	f240 4206 	movw	r2, #1030	@ 0x406
 810d5fc:	4910      	ldr	r1, [pc, #64]	@ (810d640 <netif_set_link_down+0x58>)
 810d5fe:	4811      	ldr	r0, [pc, #68]	@ (810d644 <netif_set_link_down+0x5c>)
 810d600:	f009 ff1a 	bl	8117438 <iprintf>
 810d604:	e017      	b.n	810d636 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 810d606:	687b      	ldr	r3, [r7, #4]
 810d608:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d60c:	f003 0304 	and.w	r3, r3, #4
 810d610:	2b00      	cmp	r3, #0
 810d612:	d010      	beq.n	810d636 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 810d614:	687b      	ldr	r3, [r7, #4]
 810d616:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d61a:	f023 0304 	bic.w	r3, r3, #4
 810d61e:	b2da      	uxtb	r2, r3
 810d620:	687b      	ldr	r3, [r7, #4]
 810d622:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 810d626:	687b      	ldr	r3, [r7, #4]
 810d628:	69db      	ldr	r3, [r3, #28]
 810d62a:	2b00      	cmp	r3, #0
 810d62c:	d003      	beq.n	810d636 <netif_set_link_down+0x4e>
 810d62e:	687b      	ldr	r3, [r7, #4]
 810d630:	69db      	ldr	r3, [r3, #28]
 810d632:	6878      	ldr	r0, [r7, #4]
 810d634:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 810d636:	3708      	adds	r7, #8
 810d638:	46bd      	mov	sp, r7
 810d63a:	bd80      	pop	{r7, pc}
 810d63c:	0811ce50 	.word	0x0811ce50
 810d640:	0811d088 	.word	0x0811d088
 810d644:	0811cecc 	.word	0x0811cecc

0810d648 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 810d648:	b480      	push	{r7}
 810d64a:	b083      	sub	sp, #12
 810d64c:	af00      	add	r7, sp, #0
 810d64e:	6078      	str	r0, [r7, #4]
 810d650:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 810d652:	687b      	ldr	r3, [r7, #4]
 810d654:	2b00      	cmp	r3, #0
 810d656:	d002      	beq.n	810d65e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 810d658:	687b      	ldr	r3, [r7, #4]
 810d65a:	683a      	ldr	r2, [r7, #0]
 810d65c:	61da      	str	r2, [r3, #28]
  }
}
 810d65e:	bf00      	nop
 810d660:	370c      	adds	r7, #12
 810d662:	46bd      	mov	sp, r7
 810d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d668:	4770      	bx	lr

0810d66a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 810d66a:	b480      	push	{r7}
 810d66c:	b085      	sub	sp, #20
 810d66e:	af00      	add	r7, sp, #0
 810d670:	60f8      	str	r0, [r7, #12]
 810d672:	60b9      	str	r1, [r7, #8]
 810d674:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 810d676:	f06f 030b 	mvn.w	r3, #11
}
 810d67a:	4618      	mov	r0, r3
 810d67c:	3714      	adds	r7, #20
 810d67e:	46bd      	mov	sp, r7
 810d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d684:	4770      	bx	lr
	...

0810d688 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 810d688:	b480      	push	{r7}
 810d68a:	b085      	sub	sp, #20
 810d68c:	af00      	add	r7, sp, #0
 810d68e:	4603      	mov	r3, r0
 810d690:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 810d692:	79fb      	ldrb	r3, [r7, #7]
 810d694:	2b00      	cmp	r3, #0
 810d696:	d013      	beq.n	810d6c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 810d698:	4b0d      	ldr	r3, [pc, #52]	@ (810d6d0 <netif_get_by_index+0x48>)
 810d69a:	681b      	ldr	r3, [r3, #0]
 810d69c:	60fb      	str	r3, [r7, #12]
 810d69e:	e00c      	b.n	810d6ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 810d6a0:	68fb      	ldr	r3, [r7, #12]
 810d6a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810d6a6:	3301      	adds	r3, #1
 810d6a8:	b2db      	uxtb	r3, r3
 810d6aa:	79fa      	ldrb	r2, [r7, #7]
 810d6ac:	429a      	cmp	r2, r3
 810d6ae:	d101      	bne.n	810d6b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 810d6b0:	68fb      	ldr	r3, [r7, #12]
 810d6b2:	e006      	b.n	810d6c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 810d6b4:	68fb      	ldr	r3, [r7, #12]
 810d6b6:	681b      	ldr	r3, [r3, #0]
 810d6b8:	60fb      	str	r3, [r7, #12]
 810d6ba:	68fb      	ldr	r3, [r7, #12]
 810d6bc:	2b00      	cmp	r3, #0
 810d6be:	d1ef      	bne.n	810d6a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 810d6c0:	2300      	movs	r3, #0
}
 810d6c2:	4618      	mov	r0, r3
 810d6c4:	3714      	adds	r7, #20
 810d6c6:	46bd      	mov	sp, r7
 810d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d6cc:	4770      	bx	lr
 810d6ce:	bf00      	nop
 810d6d0:	100176ec 	.word	0x100176ec

0810d6d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 810d6d4:	b580      	push	{r7, lr}
 810d6d6:	b082      	sub	sp, #8
 810d6d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 810d6da:	4b0c      	ldr	r3, [pc, #48]	@ (810d70c <pbuf_free_ooseq+0x38>)
 810d6dc:	2200      	movs	r2, #0
 810d6de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 810d6e0:	4b0b      	ldr	r3, [pc, #44]	@ (810d710 <pbuf_free_ooseq+0x3c>)
 810d6e2:	681b      	ldr	r3, [r3, #0]
 810d6e4:	607b      	str	r3, [r7, #4]
 810d6e6:	e00a      	b.n	810d6fe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 810d6e8:	687b      	ldr	r3, [r7, #4]
 810d6ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810d6ec:	2b00      	cmp	r3, #0
 810d6ee:	d003      	beq.n	810d6f8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 810d6f0:	6878      	ldr	r0, [r7, #4]
 810d6f2:	f002 fad9 	bl	810fca8 <tcp_free_ooseq>
      return;
 810d6f6:	e005      	b.n	810d704 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 810d6f8:	687b      	ldr	r3, [r7, #4]
 810d6fa:	68db      	ldr	r3, [r3, #12]
 810d6fc:	607b      	str	r3, [r7, #4]
 810d6fe:	687b      	ldr	r3, [r7, #4]
 810d700:	2b00      	cmp	r3, #0
 810d702:	d1f1      	bne.n	810d6e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 810d704:	3708      	adds	r7, #8
 810d706:	46bd      	mov	sp, r7
 810d708:	bd80      	pop	{r7, pc}
 810d70a:	bf00      	nop
 810d70c:	100176f5 	.word	0x100176f5
 810d710:	10017704 	.word	0x10017704

0810d714 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 810d714:	b480      	push	{r7}
 810d716:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 810d718:	4b03      	ldr	r3, [pc, #12]	@ (810d728 <pbuf_pool_is_empty+0x14>)
 810d71a:	2201      	movs	r2, #1
 810d71c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 810d71e:	bf00      	nop
 810d720:	46bd      	mov	sp, r7
 810d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d726:	4770      	bx	lr
 810d728:	100176f5 	.word	0x100176f5

0810d72c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 810d72c:	b480      	push	{r7}
 810d72e:	b085      	sub	sp, #20
 810d730:	af00      	add	r7, sp, #0
 810d732:	60f8      	str	r0, [r7, #12]
 810d734:	60b9      	str	r1, [r7, #8]
 810d736:	4611      	mov	r1, r2
 810d738:	461a      	mov	r2, r3
 810d73a:	460b      	mov	r3, r1
 810d73c:	80fb      	strh	r3, [r7, #6]
 810d73e:	4613      	mov	r3, r2
 810d740:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 810d742:	68fb      	ldr	r3, [r7, #12]
 810d744:	2200      	movs	r2, #0
 810d746:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 810d748:	68fb      	ldr	r3, [r7, #12]
 810d74a:	68ba      	ldr	r2, [r7, #8]
 810d74c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 810d74e:	68fb      	ldr	r3, [r7, #12]
 810d750:	88fa      	ldrh	r2, [r7, #6]
 810d752:	811a      	strh	r2, [r3, #8]
  p->len = len;
 810d754:	68fb      	ldr	r3, [r7, #12]
 810d756:	88ba      	ldrh	r2, [r7, #4]
 810d758:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 810d75a:	8b3b      	ldrh	r3, [r7, #24]
 810d75c:	b2da      	uxtb	r2, r3
 810d75e:	68fb      	ldr	r3, [r7, #12]
 810d760:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 810d762:	68fb      	ldr	r3, [r7, #12]
 810d764:	7f3a      	ldrb	r2, [r7, #28]
 810d766:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 810d768:	68fb      	ldr	r3, [r7, #12]
 810d76a:	2201      	movs	r2, #1
 810d76c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 810d76e:	68fb      	ldr	r3, [r7, #12]
 810d770:	2200      	movs	r2, #0
 810d772:	73da      	strb	r2, [r3, #15]
}
 810d774:	bf00      	nop
 810d776:	3714      	adds	r7, #20
 810d778:	46bd      	mov	sp, r7
 810d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d77e:	4770      	bx	lr

0810d780 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 810d780:	b580      	push	{r7, lr}
 810d782:	b08c      	sub	sp, #48	@ 0x30
 810d784:	af02      	add	r7, sp, #8
 810d786:	4603      	mov	r3, r0
 810d788:	71fb      	strb	r3, [r7, #7]
 810d78a:	460b      	mov	r3, r1
 810d78c:	80bb      	strh	r3, [r7, #4]
 810d78e:	4613      	mov	r3, r2
 810d790:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 810d792:	79fb      	ldrb	r3, [r7, #7]
 810d794:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 810d796:	887b      	ldrh	r3, [r7, #2]
 810d798:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 810d79c:	d07f      	beq.n	810d89e <pbuf_alloc+0x11e>
 810d79e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 810d7a2:	f300 80c8 	bgt.w	810d936 <pbuf_alloc+0x1b6>
 810d7a6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 810d7aa:	d010      	beq.n	810d7ce <pbuf_alloc+0x4e>
 810d7ac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 810d7b0:	f300 80c1 	bgt.w	810d936 <pbuf_alloc+0x1b6>
 810d7b4:	2b01      	cmp	r3, #1
 810d7b6:	d002      	beq.n	810d7be <pbuf_alloc+0x3e>
 810d7b8:	2b41      	cmp	r3, #65	@ 0x41
 810d7ba:	f040 80bc 	bne.w	810d936 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 810d7be:	887a      	ldrh	r2, [r7, #2]
 810d7c0:	88bb      	ldrh	r3, [r7, #4]
 810d7c2:	4619      	mov	r1, r3
 810d7c4:	2000      	movs	r0, #0
 810d7c6:	f000 f8d1 	bl	810d96c <pbuf_alloc_reference>
 810d7ca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 810d7cc:	e0bd      	b.n	810d94a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 810d7ce:	2300      	movs	r3, #0
 810d7d0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 810d7d2:	2300      	movs	r3, #0
 810d7d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 810d7d6:	88bb      	ldrh	r3, [r7, #4]
 810d7d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 810d7da:	2008      	movs	r0, #8
 810d7dc:	f7ff fbce 	bl	810cf7c <memp_malloc>
 810d7e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 810d7e2:	693b      	ldr	r3, [r7, #16]
 810d7e4:	2b00      	cmp	r3, #0
 810d7e6:	d109      	bne.n	810d7fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 810d7e8:	f7ff ff94 	bl	810d714 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 810d7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7ee:	2b00      	cmp	r3, #0
 810d7f0:	d002      	beq.n	810d7f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 810d7f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810d7f4:	f000 faa8 	bl	810dd48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 810d7f8:	2300      	movs	r3, #0
 810d7fa:	e0a7      	b.n	810d94c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 810d7fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810d7fe:	3303      	adds	r3, #3
 810d800:	b29b      	uxth	r3, r3
 810d802:	f023 0303 	bic.w	r3, r3, #3
 810d806:	b29b      	uxth	r3, r3
 810d808:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 810d80c:	b29b      	uxth	r3, r3
 810d80e:	8b7a      	ldrh	r2, [r7, #26]
 810d810:	4293      	cmp	r3, r2
 810d812:	bf28      	it	cs
 810d814:	4613      	movcs	r3, r2
 810d816:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 810d818:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810d81a:	3310      	adds	r3, #16
 810d81c:	693a      	ldr	r2, [r7, #16]
 810d81e:	4413      	add	r3, r2
 810d820:	3303      	adds	r3, #3
 810d822:	f023 0303 	bic.w	r3, r3, #3
 810d826:	4618      	mov	r0, r3
 810d828:	89f9      	ldrh	r1, [r7, #14]
 810d82a:	8b7a      	ldrh	r2, [r7, #26]
 810d82c:	2300      	movs	r3, #0
 810d82e:	9301      	str	r3, [sp, #4]
 810d830:	887b      	ldrh	r3, [r7, #2]
 810d832:	9300      	str	r3, [sp, #0]
 810d834:	460b      	mov	r3, r1
 810d836:	4601      	mov	r1, r0
 810d838:	6938      	ldr	r0, [r7, #16]
 810d83a:	f7ff ff77 	bl	810d72c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 810d83e:	693b      	ldr	r3, [r7, #16]
 810d840:	685b      	ldr	r3, [r3, #4]
 810d842:	f003 0303 	and.w	r3, r3, #3
 810d846:	2b00      	cmp	r3, #0
 810d848:	d006      	beq.n	810d858 <pbuf_alloc+0xd8>
 810d84a:	4b42      	ldr	r3, [pc, #264]	@ (810d954 <pbuf_alloc+0x1d4>)
 810d84c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810d850:	4941      	ldr	r1, [pc, #260]	@ (810d958 <pbuf_alloc+0x1d8>)
 810d852:	4842      	ldr	r0, [pc, #264]	@ (810d95c <pbuf_alloc+0x1dc>)
 810d854:	f009 fdf0 	bl	8117438 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 810d858:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810d85a:	3303      	adds	r3, #3
 810d85c:	f023 0303 	bic.w	r3, r3, #3
 810d860:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 810d864:	d106      	bne.n	810d874 <pbuf_alloc+0xf4>
 810d866:	4b3b      	ldr	r3, [pc, #236]	@ (810d954 <pbuf_alloc+0x1d4>)
 810d868:	f44f 7281 	mov.w	r2, #258	@ 0x102
 810d86c:	493c      	ldr	r1, [pc, #240]	@ (810d960 <pbuf_alloc+0x1e0>)
 810d86e:	483b      	ldr	r0, [pc, #236]	@ (810d95c <pbuf_alloc+0x1dc>)
 810d870:	f009 fde2 	bl	8117438 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 810d874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d876:	2b00      	cmp	r3, #0
 810d878:	d102      	bne.n	810d880 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 810d87a:	693b      	ldr	r3, [r7, #16]
 810d87c:	627b      	str	r3, [r7, #36]	@ 0x24
 810d87e:	e002      	b.n	810d886 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 810d880:	69fb      	ldr	r3, [r7, #28]
 810d882:	693a      	ldr	r2, [r7, #16]
 810d884:	601a      	str	r2, [r3, #0]
        }
        last = q;
 810d886:	693b      	ldr	r3, [r7, #16]
 810d888:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 810d88a:	8b7a      	ldrh	r2, [r7, #26]
 810d88c:	89fb      	ldrh	r3, [r7, #14]
 810d88e:	1ad3      	subs	r3, r2, r3
 810d890:	837b      	strh	r3, [r7, #26]
        offset = 0;
 810d892:	2300      	movs	r3, #0
 810d894:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 810d896:	8b7b      	ldrh	r3, [r7, #26]
 810d898:	2b00      	cmp	r3, #0
 810d89a:	d19e      	bne.n	810d7da <pbuf_alloc+0x5a>
      break;
 810d89c:	e055      	b.n	810d94a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 810d89e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810d8a0:	3303      	adds	r3, #3
 810d8a2:	b29b      	uxth	r3, r3
 810d8a4:	f023 0303 	bic.w	r3, r3, #3
 810d8a8:	b29a      	uxth	r2, r3
 810d8aa:	88bb      	ldrh	r3, [r7, #4]
 810d8ac:	3303      	adds	r3, #3
 810d8ae:	b29b      	uxth	r3, r3
 810d8b0:	f023 0303 	bic.w	r3, r3, #3
 810d8b4:	b29b      	uxth	r3, r3
 810d8b6:	4413      	add	r3, r2
 810d8b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 810d8ba:	8b3b      	ldrh	r3, [r7, #24]
 810d8bc:	3310      	adds	r3, #16
 810d8be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 810d8c0:	8b3a      	ldrh	r2, [r7, #24]
 810d8c2:	88bb      	ldrh	r3, [r7, #4]
 810d8c4:	3303      	adds	r3, #3
 810d8c6:	f023 0303 	bic.w	r3, r3, #3
 810d8ca:	429a      	cmp	r2, r3
 810d8cc:	d306      	bcc.n	810d8dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 810d8ce:	8afa      	ldrh	r2, [r7, #22]
 810d8d0:	88bb      	ldrh	r3, [r7, #4]
 810d8d2:	3303      	adds	r3, #3
 810d8d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 810d8d8:	429a      	cmp	r2, r3
 810d8da:	d201      	bcs.n	810d8e0 <pbuf_alloc+0x160>
        return NULL;
 810d8dc:	2300      	movs	r3, #0
 810d8de:	e035      	b.n	810d94c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 810d8e0:	8afb      	ldrh	r3, [r7, #22]
 810d8e2:	4618      	mov	r0, r3
 810d8e4:	f7ff f9ba 	bl	810cc5c <mem_malloc>
 810d8e8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 810d8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d8ec:	2b00      	cmp	r3, #0
 810d8ee:	d101      	bne.n	810d8f4 <pbuf_alloc+0x174>
        return NULL;
 810d8f0:	2300      	movs	r3, #0
 810d8f2:	e02b      	b.n	810d94c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 810d8f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810d8f6:	3310      	adds	r3, #16
 810d8f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810d8fa:	4413      	add	r3, r2
 810d8fc:	3303      	adds	r3, #3
 810d8fe:	f023 0303 	bic.w	r3, r3, #3
 810d902:	4618      	mov	r0, r3
 810d904:	88b9      	ldrh	r1, [r7, #4]
 810d906:	88ba      	ldrh	r2, [r7, #4]
 810d908:	2300      	movs	r3, #0
 810d90a:	9301      	str	r3, [sp, #4]
 810d90c:	887b      	ldrh	r3, [r7, #2]
 810d90e:	9300      	str	r3, [sp, #0]
 810d910:	460b      	mov	r3, r1
 810d912:	4601      	mov	r1, r0
 810d914:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810d916:	f7ff ff09 	bl	810d72c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 810d91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d91c:	685b      	ldr	r3, [r3, #4]
 810d91e:	f003 0303 	and.w	r3, r3, #3
 810d922:	2b00      	cmp	r3, #0
 810d924:	d010      	beq.n	810d948 <pbuf_alloc+0x1c8>
 810d926:	4b0b      	ldr	r3, [pc, #44]	@ (810d954 <pbuf_alloc+0x1d4>)
 810d928:	f44f 7291 	mov.w	r2, #290	@ 0x122
 810d92c:	490d      	ldr	r1, [pc, #52]	@ (810d964 <pbuf_alloc+0x1e4>)
 810d92e:	480b      	ldr	r0, [pc, #44]	@ (810d95c <pbuf_alloc+0x1dc>)
 810d930:	f009 fd82 	bl	8117438 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 810d934:	e008      	b.n	810d948 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 810d936:	4b07      	ldr	r3, [pc, #28]	@ (810d954 <pbuf_alloc+0x1d4>)
 810d938:	f240 1227 	movw	r2, #295	@ 0x127
 810d93c:	490a      	ldr	r1, [pc, #40]	@ (810d968 <pbuf_alloc+0x1e8>)
 810d93e:	4807      	ldr	r0, [pc, #28]	@ (810d95c <pbuf_alloc+0x1dc>)
 810d940:	f009 fd7a 	bl	8117438 <iprintf>
      return NULL;
 810d944:	2300      	movs	r3, #0
 810d946:	e001      	b.n	810d94c <pbuf_alloc+0x1cc>
      break;
 810d948:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 810d94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810d94c:	4618      	mov	r0, r3
 810d94e:	3728      	adds	r7, #40	@ 0x28
 810d950:	46bd      	mov	sp, r7
 810d952:	bd80      	pop	{r7, pc}
 810d954:	0811d0ac 	.word	0x0811d0ac
 810d958:	0811d10c 	.word	0x0811d10c
 810d95c:	0811d13c 	.word	0x0811d13c
 810d960:	0811d164 	.word	0x0811d164
 810d964:	0811d198 	.word	0x0811d198
 810d968:	0811d1c4 	.word	0x0811d1c4

0810d96c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 810d96c:	b580      	push	{r7, lr}
 810d96e:	b086      	sub	sp, #24
 810d970:	af02      	add	r7, sp, #8
 810d972:	6078      	str	r0, [r7, #4]
 810d974:	460b      	mov	r3, r1
 810d976:	807b      	strh	r3, [r7, #2]
 810d978:	4613      	mov	r3, r2
 810d97a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 810d97c:	883b      	ldrh	r3, [r7, #0]
 810d97e:	2b41      	cmp	r3, #65	@ 0x41
 810d980:	d009      	beq.n	810d996 <pbuf_alloc_reference+0x2a>
 810d982:	883b      	ldrh	r3, [r7, #0]
 810d984:	2b01      	cmp	r3, #1
 810d986:	d006      	beq.n	810d996 <pbuf_alloc_reference+0x2a>
 810d988:	4b0f      	ldr	r3, [pc, #60]	@ (810d9c8 <pbuf_alloc_reference+0x5c>)
 810d98a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 810d98e:	490f      	ldr	r1, [pc, #60]	@ (810d9cc <pbuf_alloc_reference+0x60>)
 810d990:	480f      	ldr	r0, [pc, #60]	@ (810d9d0 <pbuf_alloc_reference+0x64>)
 810d992:	f009 fd51 	bl	8117438 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 810d996:	2007      	movs	r0, #7
 810d998:	f7ff faf0 	bl	810cf7c <memp_malloc>
 810d99c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 810d99e:	68fb      	ldr	r3, [r7, #12]
 810d9a0:	2b00      	cmp	r3, #0
 810d9a2:	d101      	bne.n	810d9a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 810d9a4:	2300      	movs	r3, #0
 810d9a6:	e00b      	b.n	810d9c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 810d9a8:	8879      	ldrh	r1, [r7, #2]
 810d9aa:	887a      	ldrh	r2, [r7, #2]
 810d9ac:	2300      	movs	r3, #0
 810d9ae:	9301      	str	r3, [sp, #4]
 810d9b0:	883b      	ldrh	r3, [r7, #0]
 810d9b2:	9300      	str	r3, [sp, #0]
 810d9b4:	460b      	mov	r3, r1
 810d9b6:	6879      	ldr	r1, [r7, #4]
 810d9b8:	68f8      	ldr	r0, [r7, #12]
 810d9ba:	f7ff feb7 	bl	810d72c <pbuf_init_alloced_pbuf>
  return p;
 810d9be:	68fb      	ldr	r3, [r7, #12]
}
 810d9c0:	4618      	mov	r0, r3
 810d9c2:	3710      	adds	r7, #16
 810d9c4:	46bd      	mov	sp, r7
 810d9c6:	bd80      	pop	{r7, pc}
 810d9c8:	0811d0ac 	.word	0x0811d0ac
 810d9cc:	0811d1e0 	.word	0x0811d1e0
 810d9d0:	0811d13c 	.word	0x0811d13c

0810d9d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 810d9d4:	b580      	push	{r7, lr}
 810d9d6:	b088      	sub	sp, #32
 810d9d8:	af02      	add	r7, sp, #8
 810d9da:	607b      	str	r3, [r7, #4]
 810d9dc:	4603      	mov	r3, r0
 810d9de:	73fb      	strb	r3, [r7, #15]
 810d9e0:	460b      	mov	r3, r1
 810d9e2:	81bb      	strh	r3, [r7, #12]
 810d9e4:	4613      	mov	r3, r2
 810d9e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 810d9e8:	7bfb      	ldrb	r3, [r7, #15]
 810d9ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 810d9ec:	8a7b      	ldrh	r3, [r7, #18]
 810d9ee:	3303      	adds	r3, #3
 810d9f0:	f023 0203 	bic.w	r2, r3, #3
 810d9f4:	89bb      	ldrh	r3, [r7, #12]
 810d9f6:	441a      	add	r2, r3
 810d9f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810d9fa:	429a      	cmp	r2, r3
 810d9fc:	d901      	bls.n	810da02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 810d9fe:	2300      	movs	r3, #0
 810da00:	e018      	b.n	810da34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 810da02:	6a3b      	ldr	r3, [r7, #32]
 810da04:	2b00      	cmp	r3, #0
 810da06:	d007      	beq.n	810da18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 810da08:	8a7b      	ldrh	r3, [r7, #18]
 810da0a:	3303      	adds	r3, #3
 810da0c:	f023 0303 	bic.w	r3, r3, #3
 810da10:	6a3a      	ldr	r2, [r7, #32]
 810da12:	4413      	add	r3, r2
 810da14:	617b      	str	r3, [r7, #20]
 810da16:	e001      	b.n	810da1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 810da18:	2300      	movs	r3, #0
 810da1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 810da1c:	6878      	ldr	r0, [r7, #4]
 810da1e:	89b9      	ldrh	r1, [r7, #12]
 810da20:	89ba      	ldrh	r2, [r7, #12]
 810da22:	2302      	movs	r3, #2
 810da24:	9301      	str	r3, [sp, #4]
 810da26:	897b      	ldrh	r3, [r7, #10]
 810da28:	9300      	str	r3, [sp, #0]
 810da2a:	460b      	mov	r3, r1
 810da2c:	6979      	ldr	r1, [r7, #20]
 810da2e:	f7ff fe7d 	bl	810d72c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 810da32:	687b      	ldr	r3, [r7, #4]
}
 810da34:	4618      	mov	r0, r3
 810da36:	3718      	adds	r7, #24
 810da38:	46bd      	mov	sp, r7
 810da3a:	bd80      	pop	{r7, pc}

0810da3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 810da3c:	b580      	push	{r7, lr}
 810da3e:	b084      	sub	sp, #16
 810da40:	af00      	add	r7, sp, #0
 810da42:	6078      	str	r0, [r7, #4]
 810da44:	460b      	mov	r3, r1
 810da46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 810da48:	687b      	ldr	r3, [r7, #4]
 810da4a:	2b00      	cmp	r3, #0
 810da4c:	d106      	bne.n	810da5c <pbuf_realloc+0x20>
 810da4e:	4b3a      	ldr	r3, [pc, #232]	@ (810db38 <pbuf_realloc+0xfc>)
 810da50:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 810da54:	4939      	ldr	r1, [pc, #228]	@ (810db3c <pbuf_realloc+0x100>)
 810da56:	483a      	ldr	r0, [pc, #232]	@ (810db40 <pbuf_realloc+0x104>)
 810da58:	f009 fcee 	bl	8117438 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 810da5c:	687b      	ldr	r3, [r7, #4]
 810da5e:	891b      	ldrh	r3, [r3, #8]
 810da60:	887a      	ldrh	r2, [r7, #2]
 810da62:	429a      	cmp	r2, r3
 810da64:	d263      	bcs.n	810db2e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 810da66:	687b      	ldr	r3, [r7, #4]
 810da68:	891a      	ldrh	r2, [r3, #8]
 810da6a:	887b      	ldrh	r3, [r7, #2]
 810da6c:	1ad3      	subs	r3, r2, r3
 810da6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 810da70:	887b      	ldrh	r3, [r7, #2]
 810da72:	817b      	strh	r3, [r7, #10]
  q = p;
 810da74:	687b      	ldr	r3, [r7, #4]
 810da76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 810da78:	e018      	b.n	810daac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 810da7a:	68fb      	ldr	r3, [r7, #12]
 810da7c:	895b      	ldrh	r3, [r3, #10]
 810da7e:	897a      	ldrh	r2, [r7, #10]
 810da80:	1ad3      	subs	r3, r2, r3
 810da82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 810da84:	68fb      	ldr	r3, [r7, #12]
 810da86:	891a      	ldrh	r2, [r3, #8]
 810da88:	893b      	ldrh	r3, [r7, #8]
 810da8a:	1ad3      	subs	r3, r2, r3
 810da8c:	b29a      	uxth	r2, r3
 810da8e:	68fb      	ldr	r3, [r7, #12]
 810da90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 810da92:	68fb      	ldr	r3, [r7, #12]
 810da94:	681b      	ldr	r3, [r3, #0]
 810da96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 810da98:	68fb      	ldr	r3, [r7, #12]
 810da9a:	2b00      	cmp	r3, #0
 810da9c:	d106      	bne.n	810daac <pbuf_realloc+0x70>
 810da9e:	4b26      	ldr	r3, [pc, #152]	@ (810db38 <pbuf_realloc+0xfc>)
 810daa0:	f240 12af 	movw	r2, #431	@ 0x1af
 810daa4:	4927      	ldr	r1, [pc, #156]	@ (810db44 <pbuf_realloc+0x108>)
 810daa6:	4826      	ldr	r0, [pc, #152]	@ (810db40 <pbuf_realloc+0x104>)
 810daa8:	f009 fcc6 	bl	8117438 <iprintf>
  while (rem_len > q->len) {
 810daac:	68fb      	ldr	r3, [r7, #12]
 810daae:	895b      	ldrh	r3, [r3, #10]
 810dab0:	897a      	ldrh	r2, [r7, #10]
 810dab2:	429a      	cmp	r2, r3
 810dab4:	d8e1      	bhi.n	810da7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 810dab6:	68fb      	ldr	r3, [r7, #12]
 810dab8:	7b1b      	ldrb	r3, [r3, #12]
 810daba:	f003 030f 	and.w	r3, r3, #15
 810dabe:	2b00      	cmp	r3, #0
 810dac0:	d121      	bne.n	810db06 <pbuf_realloc+0xca>
 810dac2:	68fb      	ldr	r3, [r7, #12]
 810dac4:	895b      	ldrh	r3, [r3, #10]
 810dac6:	897a      	ldrh	r2, [r7, #10]
 810dac8:	429a      	cmp	r2, r3
 810daca:	d01c      	beq.n	810db06 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 810dacc:	68fb      	ldr	r3, [r7, #12]
 810dace:	7b5b      	ldrb	r3, [r3, #13]
 810dad0:	f003 0302 	and.w	r3, r3, #2
 810dad4:	2b00      	cmp	r3, #0
 810dad6:	d116      	bne.n	810db06 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 810dad8:	68fb      	ldr	r3, [r7, #12]
 810dada:	685a      	ldr	r2, [r3, #4]
 810dadc:	68fb      	ldr	r3, [r7, #12]
 810dade:	1ad3      	subs	r3, r2, r3
 810dae0:	b29a      	uxth	r2, r3
 810dae2:	897b      	ldrh	r3, [r7, #10]
 810dae4:	4413      	add	r3, r2
 810dae6:	b29b      	uxth	r3, r3
 810dae8:	4619      	mov	r1, r3
 810daea:	68f8      	ldr	r0, [r7, #12]
 810daec:	f7fe ffba 	bl	810ca64 <mem_trim>
 810daf0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 810daf2:	68fb      	ldr	r3, [r7, #12]
 810daf4:	2b00      	cmp	r3, #0
 810daf6:	d106      	bne.n	810db06 <pbuf_realloc+0xca>
 810daf8:	4b0f      	ldr	r3, [pc, #60]	@ (810db38 <pbuf_realloc+0xfc>)
 810dafa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 810dafe:	4912      	ldr	r1, [pc, #72]	@ (810db48 <pbuf_realloc+0x10c>)
 810db00:	480f      	ldr	r0, [pc, #60]	@ (810db40 <pbuf_realloc+0x104>)
 810db02:	f009 fc99 	bl	8117438 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 810db06:	68fb      	ldr	r3, [r7, #12]
 810db08:	897a      	ldrh	r2, [r7, #10]
 810db0a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 810db0c:	68fb      	ldr	r3, [r7, #12]
 810db0e:	895a      	ldrh	r2, [r3, #10]
 810db10:	68fb      	ldr	r3, [r7, #12]
 810db12:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 810db14:	68fb      	ldr	r3, [r7, #12]
 810db16:	681b      	ldr	r3, [r3, #0]
 810db18:	2b00      	cmp	r3, #0
 810db1a:	d004      	beq.n	810db26 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 810db1c:	68fb      	ldr	r3, [r7, #12]
 810db1e:	681b      	ldr	r3, [r3, #0]
 810db20:	4618      	mov	r0, r3
 810db22:	f000 f911 	bl	810dd48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 810db26:	68fb      	ldr	r3, [r7, #12]
 810db28:	2200      	movs	r2, #0
 810db2a:	601a      	str	r2, [r3, #0]
 810db2c:	e000      	b.n	810db30 <pbuf_realloc+0xf4>
    return;
 810db2e:	bf00      	nop

}
 810db30:	3710      	adds	r7, #16
 810db32:	46bd      	mov	sp, r7
 810db34:	bd80      	pop	{r7, pc}
 810db36:	bf00      	nop
 810db38:	0811d0ac 	.word	0x0811d0ac
 810db3c:	0811d1f4 	.word	0x0811d1f4
 810db40:	0811d13c 	.word	0x0811d13c
 810db44:	0811d20c 	.word	0x0811d20c
 810db48:	0811d224 	.word	0x0811d224

0810db4c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 810db4c:	b580      	push	{r7, lr}
 810db4e:	b086      	sub	sp, #24
 810db50:	af00      	add	r7, sp, #0
 810db52:	60f8      	str	r0, [r7, #12]
 810db54:	60b9      	str	r1, [r7, #8]
 810db56:	4613      	mov	r3, r2
 810db58:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 810db5a:	68fb      	ldr	r3, [r7, #12]
 810db5c:	2b00      	cmp	r3, #0
 810db5e:	d106      	bne.n	810db6e <pbuf_add_header_impl+0x22>
 810db60:	4b2b      	ldr	r3, [pc, #172]	@ (810dc10 <pbuf_add_header_impl+0xc4>)
 810db62:	f240 12df 	movw	r2, #479	@ 0x1df
 810db66:	492b      	ldr	r1, [pc, #172]	@ (810dc14 <pbuf_add_header_impl+0xc8>)
 810db68:	482b      	ldr	r0, [pc, #172]	@ (810dc18 <pbuf_add_header_impl+0xcc>)
 810db6a:	f009 fc65 	bl	8117438 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 810db6e:	68fb      	ldr	r3, [r7, #12]
 810db70:	2b00      	cmp	r3, #0
 810db72:	d003      	beq.n	810db7c <pbuf_add_header_impl+0x30>
 810db74:	68bb      	ldr	r3, [r7, #8]
 810db76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810db7a:	d301      	bcc.n	810db80 <pbuf_add_header_impl+0x34>
    return 1;
 810db7c:	2301      	movs	r3, #1
 810db7e:	e043      	b.n	810dc08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 810db80:	68bb      	ldr	r3, [r7, #8]
 810db82:	2b00      	cmp	r3, #0
 810db84:	d101      	bne.n	810db8a <pbuf_add_header_impl+0x3e>
    return 0;
 810db86:	2300      	movs	r3, #0
 810db88:	e03e      	b.n	810dc08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 810db8a:	68bb      	ldr	r3, [r7, #8]
 810db8c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 810db8e:	68fb      	ldr	r3, [r7, #12]
 810db90:	891a      	ldrh	r2, [r3, #8]
 810db92:	8a7b      	ldrh	r3, [r7, #18]
 810db94:	4413      	add	r3, r2
 810db96:	b29b      	uxth	r3, r3
 810db98:	8a7a      	ldrh	r2, [r7, #18]
 810db9a:	429a      	cmp	r2, r3
 810db9c:	d901      	bls.n	810dba2 <pbuf_add_header_impl+0x56>
    return 1;
 810db9e:	2301      	movs	r3, #1
 810dba0:	e032      	b.n	810dc08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 810dba2:	68fb      	ldr	r3, [r7, #12]
 810dba4:	7b1b      	ldrb	r3, [r3, #12]
 810dba6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 810dba8:	8a3b      	ldrh	r3, [r7, #16]
 810dbaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810dbae:	2b00      	cmp	r3, #0
 810dbb0:	d00c      	beq.n	810dbcc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 810dbb2:	68fb      	ldr	r3, [r7, #12]
 810dbb4:	685a      	ldr	r2, [r3, #4]
 810dbb6:	68bb      	ldr	r3, [r7, #8]
 810dbb8:	425b      	negs	r3, r3
 810dbba:	4413      	add	r3, r2
 810dbbc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 810dbbe:	68fb      	ldr	r3, [r7, #12]
 810dbc0:	3310      	adds	r3, #16
 810dbc2:	697a      	ldr	r2, [r7, #20]
 810dbc4:	429a      	cmp	r2, r3
 810dbc6:	d20d      	bcs.n	810dbe4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 810dbc8:	2301      	movs	r3, #1
 810dbca:	e01d      	b.n	810dc08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 810dbcc:	79fb      	ldrb	r3, [r7, #7]
 810dbce:	2b00      	cmp	r3, #0
 810dbd0:	d006      	beq.n	810dbe0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 810dbd2:	68fb      	ldr	r3, [r7, #12]
 810dbd4:	685a      	ldr	r2, [r3, #4]
 810dbd6:	68bb      	ldr	r3, [r7, #8]
 810dbd8:	425b      	negs	r3, r3
 810dbda:	4413      	add	r3, r2
 810dbdc:	617b      	str	r3, [r7, #20]
 810dbde:	e001      	b.n	810dbe4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 810dbe0:	2301      	movs	r3, #1
 810dbe2:	e011      	b.n	810dc08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 810dbe4:	68fb      	ldr	r3, [r7, #12]
 810dbe6:	697a      	ldr	r2, [r7, #20]
 810dbe8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 810dbea:	68fb      	ldr	r3, [r7, #12]
 810dbec:	895a      	ldrh	r2, [r3, #10]
 810dbee:	8a7b      	ldrh	r3, [r7, #18]
 810dbf0:	4413      	add	r3, r2
 810dbf2:	b29a      	uxth	r2, r3
 810dbf4:	68fb      	ldr	r3, [r7, #12]
 810dbf6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 810dbf8:	68fb      	ldr	r3, [r7, #12]
 810dbfa:	891a      	ldrh	r2, [r3, #8]
 810dbfc:	8a7b      	ldrh	r3, [r7, #18]
 810dbfe:	4413      	add	r3, r2
 810dc00:	b29a      	uxth	r2, r3
 810dc02:	68fb      	ldr	r3, [r7, #12]
 810dc04:	811a      	strh	r2, [r3, #8]


  return 0;
 810dc06:	2300      	movs	r3, #0
}
 810dc08:	4618      	mov	r0, r3
 810dc0a:	3718      	adds	r7, #24
 810dc0c:	46bd      	mov	sp, r7
 810dc0e:	bd80      	pop	{r7, pc}
 810dc10:	0811d0ac 	.word	0x0811d0ac
 810dc14:	0811d240 	.word	0x0811d240
 810dc18:	0811d13c 	.word	0x0811d13c

0810dc1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 810dc1c:	b580      	push	{r7, lr}
 810dc1e:	b082      	sub	sp, #8
 810dc20:	af00      	add	r7, sp, #0
 810dc22:	6078      	str	r0, [r7, #4]
 810dc24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 810dc26:	2200      	movs	r2, #0
 810dc28:	6839      	ldr	r1, [r7, #0]
 810dc2a:	6878      	ldr	r0, [r7, #4]
 810dc2c:	f7ff ff8e 	bl	810db4c <pbuf_add_header_impl>
 810dc30:	4603      	mov	r3, r0
}
 810dc32:	4618      	mov	r0, r3
 810dc34:	3708      	adds	r7, #8
 810dc36:	46bd      	mov	sp, r7
 810dc38:	bd80      	pop	{r7, pc}
	...

0810dc3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 810dc3c:	b580      	push	{r7, lr}
 810dc3e:	b084      	sub	sp, #16
 810dc40:	af00      	add	r7, sp, #0
 810dc42:	6078      	str	r0, [r7, #4]
 810dc44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 810dc46:	687b      	ldr	r3, [r7, #4]
 810dc48:	2b00      	cmp	r3, #0
 810dc4a:	d106      	bne.n	810dc5a <pbuf_remove_header+0x1e>
 810dc4c:	4b20      	ldr	r3, [pc, #128]	@ (810dcd0 <pbuf_remove_header+0x94>)
 810dc4e:	f240 224b 	movw	r2, #587	@ 0x24b
 810dc52:	4920      	ldr	r1, [pc, #128]	@ (810dcd4 <pbuf_remove_header+0x98>)
 810dc54:	4820      	ldr	r0, [pc, #128]	@ (810dcd8 <pbuf_remove_header+0x9c>)
 810dc56:	f009 fbef 	bl	8117438 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 810dc5a:	687b      	ldr	r3, [r7, #4]
 810dc5c:	2b00      	cmp	r3, #0
 810dc5e:	d003      	beq.n	810dc68 <pbuf_remove_header+0x2c>
 810dc60:	683b      	ldr	r3, [r7, #0]
 810dc62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810dc66:	d301      	bcc.n	810dc6c <pbuf_remove_header+0x30>
    return 1;
 810dc68:	2301      	movs	r3, #1
 810dc6a:	e02c      	b.n	810dcc6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 810dc6c:	683b      	ldr	r3, [r7, #0]
 810dc6e:	2b00      	cmp	r3, #0
 810dc70:	d101      	bne.n	810dc76 <pbuf_remove_header+0x3a>
    return 0;
 810dc72:	2300      	movs	r3, #0
 810dc74:	e027      	b.n	810dcc6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 810dc76:	683b      	ldr	r3, [r7, #0]
 810dc78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 810dc7a:	687b      	ldr	r3, [r7, #4]
 810dc7c:	895b      	ldrh	r3, [r3, #10]
 810dc7e:	89fa      	ldrh	r2, [r7, #14]
 810dc80:	429a      	cmp	r2, r3
 810dc82:	d908      	bls.n	810dc96 <pbuf_remove_header+0x5a>
 810dc84:	4b12      	ldr	r3, [pc, #72]	@ (810dcd0 <pbuf_remove_header+0x94>)
 810dc86:	f240 2255 	movw	r2, #597	@ 0x255
 810dc8a:	4914      	ldr	r1, [pc, #80]	@ (810dcdc <pbuf_remove_header+0xa0>)
 810dc8c:	4812      	ldr	r0, [pc, #72]	@ (810dcd8 <pbuf_remove_header+0x9c>)
 810dc8e:	f009 fbd3 	bl	8117438 <iprintf>
 810dc92:	2301      	movs	r3, #1
 810dc94:	e017      	b.n	810dcc6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 810dc96:	687b      	ldr	r3, [r7, #4]
 810dc98:	685b      	ldr	r3, [r3, #4]
 810dc9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 810dc9c:	687b      	ldr	r3, [r7, #4]
 810dc9e:	685a      	ldr	r2, [r3, #4]
 810dca0:	683b      	ldr	r3, [r7, #0]
 810dca2:	441a      	add	r2, r3
 810dca4:	687b      	ldr	r3, [r7, #4]
 810dca6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 810dca8:	687b      	ldr	r3, [r7, #4]
 810dcaa:	895a      	ldrh	r2, [r3, #10]
 810dcac:	89fb      	ldrh	r3, [r7, #14]
 810dcae:	1ad3      	subs	r3, r2, r3
 810dcb0:	b29a      	uxth	r2, r3
 810dcb2:	687b      	ldr	r3, [r7, #4]
 810dcb4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 810dcb6:	687b      	ldr	r3, [r7, #4]
 810dcb8:	891a      	ldrh	r2, [r3, #8]
 810dcba:	89fb      	ldrh	r3, [r7, #14]
 810dcbc:	1ad3      	subs	r3, r2, r3
 810dcbe:	b29a      	uxth	r2, r3
 810dcc0:	687b      	ldr	r3, [r7, #4]
 810dcc2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 810dcc4:	2300      	movs	r3, #0
}
 810dcc6:	4618      	mov	r0, r3
 810dcc8:	3710      	adds	r7, #16
 810dcca:	46bd      	mov	sp, r7
 810dccc:	bd80      	pop	{r7, pc}
 810dcce:	bf00      	nop
 810dcd0:	0811d0ac 	.word	0x0811d0ac
 810dcd4:	0811d240 	.word	0x0811d240
 810dcd8:	0811d13c 	.word	0x0811d13c
 810dcdc:	0811d24c 	.word	0x0811d24c

0810dce0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 810dce0:	b580      	push	{r7, lr}
 810dce2:	b082      	sub	sp, #8
 810dce4:	af00      	add	r7, sp, #0
 810dce6:	6078      	str	r0, [r7, #4]
 810dce8:	460b      	mov	r3, r1
 810dcea:	807b      	strh	r3, [r7, #2]
 810dcec:	4613      	mov	r3, r2
 810dcee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 810dcf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810dcf4:	2b00      	cmp	r3, #0
 810dcf6:	da08      	bge.n	810dd0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 810dcf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810dcfc:	425b      	negs	r3, r3
 810dcfe:	4619      	mov	r1, r3
 810dd00:	6878      	ldr	r0, [r7, #4]
 810dd02:	f7ff ff9b 	bl	810dc3c <pbuf_remove_header>
 810dd06:	4603      	mov	r3, r0
 810dd08:	e007      	b.n	810dd1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 810dd0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810dd0e:	787a      	ldrb	r2, [r7, #1]
 810dd10:	4619      	mov	r1, r3
 810dd12:	6878      	ldr	r0, [r7, #4]
 810dd14:	f7ff ff1a 	bl	810db4c <pbuf_add_header_impl>
 810dd18:	4603      	mov	r3, r0
  }
}
 810dd1a:	4618      	mov	r0, r3
 810dd1c:	3708      	adds	r7, #8
 810dd1e:	46bd      	mov	sp, r7
 810dd20:	bd80      	pop	{r7, pc}

0810dd22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 810dd22:	b580      	push	{r7, lr}
 810dd24:	b082      	sub	sp, #8
 810dd26:	af00      	add	r7, sp, #0
 810dd28:	6078      	str	r0, [r7, #4]
 810dd2a:	460b      	mov	r3, r1
 810dd2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 810dd2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810dd32:	2201      	movs	r2, #1
 810dd34:	4619      	mov	r1, r3
 810dd36:	6878      	ldr	r0, [r7, #4]
 810dd38:	f7ff ffd2 	bl	810dce0 <pbuf_header_impl>
 810dd3c:	4603      	mov	r3, r0
}
 810dd3e:	4618      	mov	r0, r3
 810dd40:	3708      	adds	r7, #8
 810dd42:	46bd      	mov	sp, r7
 810dd44:	bd80      	pop	{r7, pc}
	...

0810dd48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 810dd48:	b580      	push	{r7, lr}
 810dd4a:	b086      	sub	sp, #24
 810dd4c:	af00      	add	r7, sp, #0
 810dd4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 810dd50:	687b      	ldr	r3, [r7, #4]
 810dd52:	2b00      	cmp	r3, #0
 810dd54:	d10b      	bne.n	810dd6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 810dd56:	687b      	ldr	r3, [r7, #4]
 810dd58:	2b00      	cmp	r3, #0
 810dd5a:	d106      	bne.n	810dd6a <pbuf_free+0x22>
 810dd5c:	4b38      	ldr	r3, [pc, #224]	@ (810de40 <pbuf_free+0xf8>)
 810dd5e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 810dd62:	4938      	ldr	r1, [pc, #224]	@ (810de44 <pbuf_free+0xfc>)
 810dd64:	4838      	ldr	r0, [pc, #224]	@ (810de48 <pbuf_free+0x100>)
 810dd66:	f009 fb67 	bl	8117438 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 810dd6a:	2300      	movs	r3, #0
 810dd6c:	e063      	b.n	810de36 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 810dd6e:	2300      	movs	r3, #0
 810dd70:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 810dd72:	e05c      	b.n	810de2e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 810dd74:	687b      	ldr	r3, [r7, #4]
 810dd76:	7b9b      	ldrb	r3, [r3, #14]
 810dd78:	2b00      	cmp	r3, #0
 810dd7a:	d106      	bne.n	810dd8a <pbuf_free+0x42>
 810dd7c:	4b30      	ldr	r3, [pc, #192]	@ (810de40 <pbuf_free+0xf8>)
 810dd7e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 810dd82:	4932      	ldr	r1, [pc, #200]	@ (810de4c <pbuf_free+0x104>)
 810dd84:	4830      	ldr	r0, [pc, #192]	@ (810de48 <pbuf_free+0x100>)
 810dd86:	f009 fb57 	bl	8117438 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 810dd8a:	687b      	ldr	r3, [r7, #4]
 810dd8c:	7b9b      	ldrb	r3, [r3, #14]
 810dd8e:	3b01      	subs	r3, #1
 810dd90:	b2da      	uxtb	r2, r3
 810dd92:	687b      	ldr	r3, [r7, #4]
 810dd94:	739a      	strb	r2, [r3, #14]
 810dd96:	687b      	ldr	r3, [r7, #4]
 810dd98:	7b9b      	ldrb	r3, [r3, #14]
 810dd9a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 810dd9c:	7dbb      	ldrb	r3, [r7, #22]
 810dd9e:	2b00      	cmp	r3, #0
 810dda0:	d143      	bne.n	810de2a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 810dda2:	687b      	ldr	r3, [r7, #4]
 810dda4:	681b      	ldr	r3, [r3, #0]
 810dda6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 810dda8:	687b      	ldr	r3, [r7, #4]
 810ddaa:	7b1b      	ldrb	r3, [r3, #12]
 810ddac:	f003 030f 	and.w	r3, r3, #15
 810ddb0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 810ddb2:	687b      	ldr	r3, [r7, #4]
 810ddb4:	7b5b      	ldrb	r3, [r3, #13]
 810ddb6:	f003 0302 	and.w	r3, r3, #2
 810ddba:	2b00      	cmp	r3, #0
 810ddbc:	d011      	beq.n	810dde2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 810ddbe:	687b      	ldr	r3, [r7, #4]
 810ddc0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 810ddc2:	68bb      	ldr	r3, [r7, #8]
 810ddc4:	691b      	ldr	r3, [r3, #16]
 810ddc6:	2b00      	cmp	r3, #0
 810ddc8:	d106      	bne.n	810ddd8 <pbuf_free+0x90>
 810ddca:	4b1d      	ldr	r3, [pc, #116]	@ (810de40 <pbuf_free+0xf8>)
 810ddcc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 810ddd0:	491f      	ldr	r1, [pc, #124]	@ (810de50 <pbuf_free+0x108>)
 810ddd2:	481d      	ldr	r0, [pc, #116]	@ (810de48 <pbuf_free+0x100>)
 810ddd4:	f009 fb30 	bl	8117438 <iprintf>
        pc->custom_free_function(p);
 810ddd8:	68bb      	ldr	r3, [r7, #8]
 810ddda:	691b      	ldr	r3, [r3, #16]
 810dddc:	6878      	ldr	r0, [r7, #4]
 810ddde:	4798      	blx	r3
 810dde0:	e01d      	b.n	810de1e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 810dde2:	7bfb      	ldrb	r3, [r7, #15]
 810dde4:	2b02      	cmp	r3, #2
 810dde6:	d104      	bne.n	810ddf2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 810dde8:	6879      	ldr	r1, [r7, #4]
 810ddea:	2008      	movs	r0, #8
 810ddec:	f7ff f936 	bl	810d05c <memp_free>
 810ddf0:	e015      	b.n	810de1e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 810ddf2:	7bfb      	ldrb	r3, [r7, #15]
 810ddf4:	2b01      	cmp	r3, #1
 810ddf6:	d104      	bne.n	810de02 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 810ddf8:	6879      	ldr	r1, [r7, #4]
 810ddfa:	2007      	movs	r0, #7
 810ddfc:	f7ff f92e 	bl	810d05c <memp_free>
 810de00:	e00d      	b.n	810de1e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 810de02:	7bfb      	ldrb	r3, [r7, #15]
 810de04:	2b00      	cmp	r3, #0
 810de06:	d103      	bne.n	810de10 <pbuf_free+0xc8>
          mem_free(p);
 810de08:	6878      	ldr	r0, [r7, #4]
 810de0a:	f7fe fdc1 	bl	810c990 <mem_free>
 810de0e:	e006      	b.n	810de1e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 810de10:	4b0b      	ldr	r3, [pc, #44]	@ (810de40 <pbuf_free+0xf8>)
 810de12:	f240 320f 	movw	r2, #783	@ 0x30f
 810de16:	490f      	ldr	r1, [pc, #60]	@ (810de54 <pbuf_free+0x10c>)
 810de18:	480b      	ldr	r0, [pc, #44]	@ (810de48 <pbuf_free+0x100>)
 810de1a:	f009 fb0d 	bl	8117438 <iprintf>
        }
      }
      count++;
 810de1e:	7dfb      	ldrb	r3, [r7, #23]
 810de20:	3301      	adds	r3, #1
 810de22:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 810de24:	693b      	ldr	r3, [r7, #16]
 810de26:	607b      	str	r3, [r7, #4]
 810de28:	e001      	b.n	810de2e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 810de2a:	2300      	movs	r3, #0
 810de2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 810de2e:	687b      	ldr	r3, [r7, #4]
 810de30:	2b00      	cmp	r3, #0
 810de32:	d19f      	bne.n	810dd74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 810de34:	7dfb      	ldrb	r3, [r7, #23]
}
 810de36:	4618      	mov	r0, r3
 810de38:	3718      	adds	r7, #24
 810de3a:	46bd      	mov	sp, r7
 810de3c:	bd80      	pop	{r7, pc}
 810de3e:	bf00      	nop
 810de40:	0811d0ac 	.word	0x0811d0ac
 810de44:	0811d240 	.word	0x0811d240
 810de48:	0811d13c 	.word	0x0811d13c
 810de4c:	0811d26c 	.word	0x0811d26c
 810de50:	0811d284 	.word	0x0811d284
 810de54:	0811d2a8 	.word	0x0811d2a8

0810de58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 810de58:	b480      	push	{r7}
 810de5a:	b085      	sub	sp, #20
 810de5c:	af00      	add	r7, sp, #0
 810de5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 810de60:	2300      	movs	r3, #0
 810de62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 810de64:	e005      	b.n	810de72 <pbuf_clen+0x1a>
    ++len;
 810de66:	89fb      	ldrh	r3, [r7, #14]
 810de68:	3301      	adds	r3, #1
 810de6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 810de6c:	687b      	ldr	r3, [r7, #4]
 810de6e:	681b      	ldr	r3, [r3, #0]
 810de70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 810de72:	687b      	ldr	r3, [r7, #4]
 810de74:	2b00      	cmp	r3, #0
 810de76:	d1f6      	bne.n	810de66 <pbuf_clen+0xe>
  }
  return len;
 810de78:	89fb      	ldrh	r3, [r7, #14]
}
 810de7a:	4618      	mov	r0, r3
 810de7c:	3714      	adds	r7, #20
 810de7e:	46bd      	mov	sp, r7
 810de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de84:	4770      	bx	lr
	...

0810de88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 810de88:	b580      	push	{r7, lr}
 810de8a:	b082      	sub	sp, #8
 810de8c:	af00      	add	r7, sp, #0
 810de8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 810de90:	687b      	ldr	r3, [r7, #4]
 810de92:	2b00      	cmp	r3, #0
 810de94:	d010      	beq.n	810deb8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 810de96:	687b      	ldr	r3, [r7, #4]
 810de98:	7b9b      	ldrb	r3, [r3, #14]
 810de9a:	3301      	adds	r3, #1
 810de9c:	b2da      	uxtb	r2, r3
 810de9e:	687b      	ldr	r3, [r7, #4]
 810dea0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 810dea2:	687b      	ldr	r3, [r7, #4]
 810dea4:	7b9b      	ldrb	r3, [r3, #14]
 810dea6:	2b00      	cmp	r3, #0
 810dea8:	d106      	bne.n	810deb8 <pbuf_ref+0x30>
 810deaa:	4b05      	ldr	r3, [pc, #20]	@ (810dec0 <pbuf_ref+0x38>)
 810deac:	f240 3242 	movw	r2, #834	@ 0x342
 810deb0:	4904      	ldr	r1, [pc, #16]	@ (810dec4 <pbuf_ref+0x3c>)
 810deb2:	4805      	ldr	r0, [pc, #20]	@ (810dec8 <pbuf_ref+0x40>)
 810deb4:	f009 fac0 	bl	8117438 <iprintf>
  }
}
 810deb8:	bf00      	nop
 810deba:	3708      	adds	r7, #8
 810debc:	46bd      	mov	sp, r7
 810debe:	bd80      	pop	{r7, pc}
 810dec0:	0811d0ac 	.word	0x0811d0ac
 810dec4:	0811d2bc 	.word	0x0811d2bc
 810dec8:	0811d13c 	.word	0x0811d13c

0810decc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 810decc:	b580      	push	{r7, lr}
 810dece:	b084      	sub	sp, #16
 810ded0:	af00      	add	r7, sp, #0
 810ded2:	6078      	str	r0, [r7, #4]
 810ded4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 810ded6:	687b      	ldr	r3, [r7, #4]
 810ded8:	2b00      	cmp	r3, #0
 810deda:	d002      	beq.n	810dee2 <pbuf_cat+0x16>
 810dedc:	683b      	ldr	r3, [r7, #0]
 810dede:	2b00      	cmp	r3, #0
 810dee0:	d107      	bne.n	810def2 <pbuf_cat+0x26>
 810dee2:	4b20      	ldr	r3, [pc, #128]	@ (810df64 <pbuf_cat+0x98>)
 810dee4:	f240 3259 	movw	r2, #857	@ 0x359
 810dee8:	491f      	ldr	r1, [pc, #124]	@ (810df68 <pbuf_cat+0x9c>)
 810deea:	4820      	ldr	r0, [pc, #128]	@ (810df6c <pbuf_cat+0xa0>)
 810deec:	f009 faa4 	bl	8117438 <iprintf>
 810def0:	e034      	b.n	810df5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 810def2:	687b      	ldr	r3, [r7, #4]
 810def4:	60fb      	str	r3, [r7, #12]
 810def6:	e00a      	b.n	810df0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 810def8:	68fb      	ldr	r3, [r7, #12]
 810defa:	891a      	ldrh	r2, [r3, #8]
 810defc:	683b      	ldr	r3, [r7, #0]
 810defe:	891b      	ldrh	r3, [r3, #8]
 810df00:	4413      	add	r3, r2
 810df02:	b29a      	uxth	r2, r3
 810df04:	68fb      	ldr	r3, [r7, #12]
 810df06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 810df08:	68fb      	ldr	r3, [r7, #12]
 810df0a:	681b      	ldr	r3, [r3, #0]
 810df0c:	60fb      	str	r3, [r7, #12]
 810df0e:	68fb      	ldr	r3, [r7, #12]
 810df10:	681b      	ldr	r3, [r3, #0]
 810df12:	2b00      	cmp	r3, #0
 810df14:	d1f0      	bne.n	810def8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 810df16:	68fb      	ldr	r3, [r7, #12]
 810df18:	891a      	ldrh	r2, [r3, #8]
 810df1a:	68fb      	ldr	r3, [r7, #12]
 810df1c:	895b      	ldrh	r3, [r3, #10]
 810df1e:	429a      	cmp	r2, r3
 810df20:	d006      	beq.n	810df30 <pbuf_cat+0x64>
 810df22:	4b10      	ldr	r3, [pc, #64]	@ (810df64 <pbuf_cat+0x98>)
 810df24:	f240 3262 	movw	r2, #866	@ 0x362
 810df28:	4911      	ldr	r1, [pc, #68]	@ (810df70 <pbuf_cat+0xa4>)
 810df2a:	4810      	ldr	r0, [pc, #64]	@ (810df6c <pbuf_cat+0xa0>)
 810df2c:	f009 fa84 	bl	8117438 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 810df30:	68fb      	ldr	r3, [r7, #12]
 810df32:	681b      	ldr	r3, [r3, #0]
 810df34:	2b00      	cmp	r3, #0
 810df36:	d006      	beq.n	810df46 <pbuf_cat+0x7a>
 810df38:	4b0a      	ldr	r3, [pc, #40]	@ (810df64 <pbuf_cat+0x98>)
 810df3a:	f240 3263 	movw	r2, #867	@ 0x363
 810df3e:	490d      	ldr	r1, [pc, #52]	@ (810df74 <pbuf_cat+0xa8>)
 810df40:	480a      	ldr	r0, [pc, #40]	@ (810df6c <pbuf_cat+0xa0>)
 810df42:	f009 fa79 	bl	8117438 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 810df46:	68fb      	ldr	r3, [r7, #12]
 810df48:	891a      	ldrh	r2, [r3, #8]
 810df4a:	683b      	ldr	r3, [r7, #0]
 810df4c:	891b      	ldrh	r3, [r3, #8]
 810df4e:	4413      	add	r3, r2
 810df50:	b29a      	uxth	r2, r3
 810df52:	68fb      	ldr	r3, [r7, #12]
 810df54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 810df56:	68fb      	ldr	r3, [r7, #12]
 810df58:	683a      	ldr	r2, [r7, #0]
 810df5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 810df5c:	3710      	adds	r7, #16
 810df5e:	46bd      	mov	sp, r7
 810df60:	bd80      	pop	{r7, pc}
 810df62:	bf00      	nop
 810df64:	0811d0ac 	.word	0x0811d0ac
 810df68:	0811d2d0 	.word	0x0811d2d0
 810df6c:	0811d13c 	.word	0x0811d13c
 810df70:	0811d308 	.word	0x0811d308
 810df74:	0811d338 	.word	0x0811d338

0810df78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 810df78:	b580      	push	{r7, lr}
 810df7a:	b086      	sub	sp, #24
 810df7c:	af00      	add	r7, sp, #0
 810df7e:	6078      	str	r0, [r7, #4]
 810df80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 810df82:	2300      	movs	r3, #0
 810df84:	617b      	str	r3, [r7, #20]
 810df86:	2300      	movs	r3, #0
 810df88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 810df8a:	687b      	ldr	r3, [r7, #4]
 810df8c:	2b00      	cmp	r3, #0
 810df8e:	d008      	beq.n	810dfa2 <pbuf_copy+0x2a>
 810df90:	683b      	ldr	r3, [r7, #0]
 810df92:	2b00      	cmp	r3, #0
 810df94:	d005      	beq.n	810dfa2 <pbuf_copy+0x2a>
 810df96:	687b      	ldr	r3, [r7, #4]
 810df98:	891a      	ldrh	r2, [r3, #8]
 810df9a:	683b      	ldr	r3, [r7, #0]
 810df9c:	891b      	ldrh	r3, [r3, #8]
 810df9e:	429a      	cmp	r2, r3
 810dfa0:	d209      	bcs.n	810dfb6 <pbuf_copy+0x3e>
 810dfa2:	4b57      	ldr	r3, [pc, #348]	@ (810e100 <pbuf_copy+0x188>)
 810dfa4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 810dfa8:	4956      	ldr	r1, [pc, #344]	@ (810e104 <pbuf_copy+0x18c>)
 810dfaa:	4857      	ldr	r0, [pc, #348]	@ (810e108 <pbuf_copy+0x190>)
 810dfac:	f009 fa44 	bl	8117438 <iprintf>
 810dfb0:	f06f 030f 	mvn.w	r3, #15
 810dfb4:	e09f      	b.n	810e0f6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 810dfb6:	687b      	ldr	r3, [r7, #4]
 810dfb8:	895b      	ldrh	r3, [r3, #10]
 810dfba:	461a      	mov	r2, r3
 810dfbc:	697b      	ldr	r3, [r7, #20]
 810dfbe:	1ad2      	subs	r2, r2, r3
 810dfc0:	683b      	ldr	r3, [r7, #0]
 810dfc2:	895b      	ldrh	r3, [r3, #10]
 810dfc4:	4619      	mov	r1, r3
 810dfc6:	693b      	ldr	r3, [r7, #16]
 810dfc8:	1acb      	subs	r3, r1, r3
 810dfca:	429a      	cmp	r2, r3
 810dfcc:	d306      	bcc.n	810dfdc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 810dfce:	683b      	ldr	r3, [r7, #0]
 810dfd0:	895b      	ldrh	r3, [r3, #10]
 810dfd2:	461a      	mov	r2, r3
 810dfd4:	693b      	ldr	r3, [r7, #16]
 810dfd6:	1ad3      	subs	r3, r2, r3
 810dfd8:	60fb      	str	r3, [r7, #12]
 810dfda:	e005      	b.n	810dfe8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 810dfdc:	687b      	ldr	r3, [r7, #4]
 810dfde:	895b      	ldrh	r3, [r3, #10]
 810dfe0:	461a      	mov	r2, r3
 810dfe2:	697b      	ldr	r3, [r7, #20]
 810dfe4:	1ad3      	subs	r3, r2, r3
 810dfe6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 810dfe8:	687b      	ldr	r3, [r7, #4]
 810dfea:	685a      	ldr	r2, [r3, #4]
 810dfec:	697b      	ldr	r3, [r7, #20]
 810dfee:	18d0      	adds	r0, r2, r3
 810dff0:	683b      	ldr	r3, [r7, #0]
 810dff2:	685a      	ldr	r2, [r3, #4]
 810dff4:	693b      	ldr	r3, [r7, #16]
 810dff6:	4413      	add	r3, r2
 810dff8:	68fa      	ldr	r2, [r7, #12]
 810dffa:	4619      	mov	r1, r3
 810dffc:	f009 fc9b 	bl	8117936 <memcpy>
    offset_to += len;
 810e000:	697a      	ldr	r2, [r7, #20]
 810e002:	68fb      	ldr	r3, [r7, #12]
 810e004:	4413      	add	r3, r2
 810e006:	617b      	str	r3, [r7, #20]
    offset_from += len;
 810e008:	693a      	ldr	r2, [r7, #16]
 810e00a:	68fb      	ldr	r3, [r7, #12]
 810e00c:	4413      	add	r3, r2
 810e00e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 810e010:	687b      	ldr	r3, [r7, #4]
 810e012:	895b      	ldrh	r3, [r3, #10]
 810e014:	461a      	mov	r2, r3
 810e016:	697b      	ldr	r3, [r7, #20]
 810e018:	4293      	cmp	r3, r2
 810e01a:	d906      	bls.n	810e02a <pbuf_copy+0xb2>
 810e01c:	4b38      	ldr	r3, [pc, #224]	@ (810e100 <pbuf_copy+0x188>)
 810e01e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 810e022:	493a      	ldr	r1, [pc, #232]	@ (810e10c <pbuf_copy+0x194>)
 810e024:	4838      	ldr	r0, [pc, #224]	@ (810e108 <pbuf_copy+0x190>)
 810e026:	f009 fa07 	bl	8117438 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 810e02a:	683b      	ldr	r3, [r7, #0]
 810e02c:	895b      	ldrh	r3, [r3, #10]
 810e02e:	461a      	mov	r2, r3
 810e030:	693b      	ldr	r3, [r7, #16]
 810e032:	4293      	cmp	r3, r2
 810e034:	d906      	bls.n	810e044 <pbuf_copy+0xcc>
 810e036:	4b32      	ldr	r3, [pc, #200]	@ (810e100 <pbuf_copy+0x188>)
 810e038:	f240 32da 	movw	r2, #986	@ 0x3da
 810e03c:	4934      	ldr	r1, [pc, #208]	@ (810e110 <pbuf_copy+0x198>)
 810e03e:	4832      	ldr	r0, [pc, #200]	@ (810e108 <pbuf_copy+0x190>)
 810e040:	f009 f9fa 	bl	8117438 <iprintf>
    if (offset_from >= p_from->len) {
 810e044:	683b      	ldr	r3, [r7, #0]
 810e046:	895b      	ldrh	r3, [r3, #10]
 810e048:	461a      	mov	r2, r3
 810e04a:	693b      	ldr	r3, [r7, #16]
 810e04c:	4293      	cmp	r3, r2
 810e04e:	d304      	bcc.n	810e05a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 810e050:	2300      	movs	r3, #0
 810e052:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 810e054:	683b      	ldr	r3, [r7, #0]
 810e056:	681b      	ldr	r3, [r3, #0]
 810e058:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 810e05a:	687b      	ldr	r3, [r7, #4]
 810e05c:	895b      	ldrh	r3, [r3, #10]
 810e05e:	461a      	mov	r2, r3
 810e060:	697b      	ldr	r3, [r7, #20]
 810e062:	4293      	cmp	r3, r2
 810e064:	d114      	bne.n	810e090 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 810e066:	2300      	movs	r3, #0
 810e068:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 810e06a:	687b      	ldr	r3, [r7, #4]
 810e06c:	681b      	ldr	r3, [r3, #0]
 810e06e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 810e070:	687b      	ldr	r3, [r7, #4]
 810e072:	2b00      	cmp	r3, #0
 810e074:	d10c      	bne.n	810e090 <pbuf_copy+0x118>
 810e076:	683b      	ldr	r3, [r7, #0]
 810e078:	2b00      	cmp	r3, #0
 810e07a:	d009      	beq.n	810e090 <pbuf_copy+0x118>
 810e07c:	4b20      	ldr	r3, [pc, #128]	@ (810e100 <pbuf_copy+0x188>)
 810e07e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 810e082:	4924      	ldr	r1, [pc, #144]	@ (810e114 <pbuf_copy+0x19c>)
 810e084:	4820      	ldr	r0, [pc, #128]	@ (810e108 <pbuf_copy+0x190>)
 810e086:	f009 f9d7 	bl	8117438 <iprintf>
 810e08a:	f06f 030f 	mvn.w	r3, #15
 810e08e:	e032      	b.n	810e0f6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 810e090:	683b      	ldr	r3, [r7, #0]
 810e092:	2b00      	cmp	r3, #0
 810e094:	d013      	beq.n	810e0be <pbuf_copy+0x146>
 810e096:	683b      	ldr	r3, [r7, #0]
 810e098:	895a      	ldrh	r2, [r3, #10]
 810e09a:	683b      	ldr	r3, [r7, #0]
 810e09c:	891b      	ldrh	r3, [r3, #8]
 810e09e:	429a      	cmp	r2, r3
 810e0a0:	d10d      	bne.n	810e0be <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 810e0a2:	683b      	ldr	r3, [r7, #0]
 810e0a4:	681b      	ldr	r3, [r3, #0]
 810e0a6:	2b00      	cmp	r3, #0
 810e0a8:	d009      	beq.n	810e0be <pbuf_copy+0x146>
 810e0aa:	4b15      	ldr	r3, [pc, #84]	@ (810e100 <pbuf_copy+0x188>)
 810e0ac:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 810e0b0:	4919      	ldr	r1, [pc, #100]	@ (810e118 <pbuf_copy+0x1a0>)
 810e0b2:	4815      	ldr	r0, [pc, #84]	@ (810e108 <pbuf_copy+0x190>)
 810e0b4:	f009 f9c0 	bl	8117438 <iprintf>
 810e0b8:	f06f 0305 	mvn.w	r3, #5
 810e0bc:	e01b      	b.n	810e0f6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 810e0be:	687b      	ldr	r3, [r7, #4]
 810e0c0:	2b00      	cmp	r3, #0
 810e0c2:	d013      	beq.n	810e0ec <pbuf_copy+0x174>
 810e0c4:	687b      	ldr	r3, [r7, #4]
 810e0c6:	895a      	ldrh	r2, [r3, #10]
 810e0c8:	687b      	ldr	r3, [r7, #4]
 810e0ca:	891b      	ldrh	r3, [r3, #8]
 810e0cc:	429a      	cmp	r2, r3
 810e0ce:	d10d      	bne.n	810e0ec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 810e0d0:	687b      	ldr	r3, [r7, #4]
 810e0d2:	681b      	ldr	r3, [r3, #0]
 810e0d4:	2b00      	cmp	r3, #0
 810e0d6:	d009      	beq.n	810e0ec <pbuf_copy+0x174>
 810e0d8:	4b09      	ldr	r3, [pc, #36]	@ (810e100 <pbuf_copy+0x188>)
 810e0da:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 810e0de:	490e      	ldr	r1, [pc, #56]	@ (810e118 <pbuf_copy+0x1a0>)
 810e0e0:	4809      	ldr	r0, [pc, #36]	@ (810e108 <pbuf_copy+0x190>)
 810e0e2:	f009 f9a9 	bl	8117438 <iprintf>
 810e0e6:	f06f 0305 	mvn.w	r3, #5
 810e0ea:	e004      	b.n	810e0f6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 810e0ec:	683b      	ldr	r3, [r7, #0]
 810e0ee:	2b00      	cmp	r3, #0
 810e0f0:	f47f af61 	bne.w	810dfb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 810e0f4:	2300      	movs	r3, #0
}
 810e0f6:	4618      	mov	r0, r3
 810e0f8:	3718      	adds	r7, #24
 810e0fa:	46bd      	mov	sp, r7
 810e0fc:	bd80      	pop	{r7, pc}
 810e0fe:	bf00      	nop
 810e100:	0811d0ac 	.word	0x0811d0ac
 810e104:	0811d384 	.word	0x0811d384
 810e108:	0811d13c 	.word	0x0811d13c
 810e10c:	0811d3b4 	.word	0x0811d3b4
 810e110:	0811d3cc 	.word	0x0811d3cc
 810e114:	0811d3e8 	.word	0x0811d3e8
 810e118:	0811d3f8 	.word	0x0811d3f8

0810e11c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 810e11c:	b580      	push	{r7, lr}
 810e11e:	b088      	sub	sp, #32
 810e120:	af00      	add	r7, sp, #0
 810e122:	60f8      	str	r0, [r7, #12]
 810e124:	60b9      	str	r1, [r7, #8]
 810e126:	4611      	mov	r1, r2
 810e128:	461a      	mov	r2, r3
 810e12a:	460b      	mov	r3, r1
 810e12c:	80fb      	strh	r3, [r7, #6]
 810e12e:	4613      	mov	r3, r2
 810e130:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 810e132:	2300      	movs	r3, #0
 810e134:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 810e136:	2300      	movs	r3, #0
 810e138:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 810e13a:	68fb      	ldr	r3, [r7, #12]
 810e13c:	2b00      	cmp	r3, #0
 810e13e:	d108      	bne.n	810e152 <pbuf_copy_partial+0x36>
 810e140:	4b2b      	ldr	r3, [pc, #172]	@ (810e1f0 <pbuf_copy_partial+0xd4>)
 810e142:	f240 420a 	movw	r2, #1034	@ 0x40a
 810e146:	492b      	ldr	r1, [pc, #172]	@ (810e1f4 <pbuf_copy_partial+0xd8>)
 810e148:	482b      	ldr	r0, [pc, #172]	@ (810e1f8 <pbuf_copy_partial+0xdc>)
 810e14a:	f009 f975 	bl	8117438 <iprintf>
 810e14e:	2300      	movs	r3, #0
 810e150:	e04a      	b.n	810e1e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 810e152:	68bb      	ldr	r3, [r7, #8]
 810e154:	2b00      	cmp	r3, #0
 810e156:	d108      	bne.n	810e16a <pbuf_copy_partial+0x4e>
 810e158:	4b25      	ldr	r3, [pc, #148]	@ (810e1f0 <pbuf_copy_partial+0xd4>)
 810e15a:	f240 420b 	movw	r2, #1035	@ 0x40b
 810e15e:	4927      	ldr	r1, [pc, #156]	@ (810e1fc <pbuf_copy_partial+0xe0>)
 810e160:	4825      	ldr	r0, [pc, #148]	@ (810e1f8 <pbuf_copy_partial+0xdc>)
 810e162:	f009 f969 	bl	8117438 <iprintf>
 810e166:	2300      	movs	r3, #0
 810e168:	e03e      	b.n	810e1e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 810e16a:	68fb      	ldr	r3, [r7, #12]
 810e16c:	61fb      	str	r3, [r7, #28]
 810e16e:	e034      	b.n	810e1da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 810e170:	88bb      	ldrh	r3, [r7, #4]
 810e172:	2b00      	cmp	r3, #0
 810e174:	d00a      	beq.n	810e18c <pbuf_copy_partial+0x70>
 810e176:	69fb      	ldr	r3, [r7, #28]
 810e178:	895b      	ldrh	r3, [r3, #10]
 810e17a:	88ba      	ldrh	r2, [r7, #4]
 810e17c:	429a      	cmp	r2, r3
 810e17e:	d305      	bcc.n	810e18c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 810e180:	69fb      	ldr	r3, [r7, #28]
 810e182:	895b      	ldrh	r3, [r3, #10]
 810e184:	88ba      	ldrh	r2, [r7, #4]
 810e186:	1ad3      	subs	r3, r2, r3
 810e188:	80bb      	strh	r3, [r7, #4]
 810e18a:	e023      	b.n	810e1d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 810e18c:	69fb      	ldr	r3, [r7, #28]
 810e18e:	895a      	ldrh	r2, [r3, #10]
 810e190:	88bb      	ldrh	r3, [r7, #4]
 810e192:	1ad3      	subs	r3, r2, r3
 810e194:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 810e196:	8b3a      	ldrh	r2, [r7, #24]
 810e198:	88fb      	ldrh	r3, [r7, #6]
 810e19a:	429a      	cmp	r2, r3
 810e19c:	d901      	bls.n	810e1a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 810e19e:	88fb      	ldrh	r3, [r7, #6]
 810e1a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 810e1a2:	8b7b      	ldrh	r3, [r7, #26]
 810e1a4:	68ba      	ldr	r2, [r7, #8]
 810e1a6:	18d0      	adds	r0, r2, r3
 810e1a8:	69fb      	ldr	r3, [r7, #28]
 810e1aa:	685a      	ldr	r2, [r3, #4]
 810e1ac:	88bb      	ldrh	r3, [r7, #4]
 810e1ae:	4413      	add	r3, r2
 810e1b0:	8b3a      	ldrh	r2, [r7, #24]
 810e1b2:	4619      	mov	r1, r3
 810e1b4:	f009 fbbf 	bl	8117936 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 810e1b8:	8afa      	ldrh	r2, [r7, #22]
 810e1ba:	8b3b      	ldrh	r3, [r7, #24]
 810e1bc:	4413      	add	r3, r2
 810e1be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 810e1c0:	8b7a      	ldrh	r2, [r7, #26]
 810e1c2:	8b3b      	ldrh	r3, [r7, #24]
 810e1c4:	4413      	add	r3, r2
 810e1c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 810e1c8:	88fa      	ldrh	r2, [r7, #6]
 810e1ca:	8b3b      	ldrh	r3, [r7, #24]
 810e1cc:	1ad3      	subs	r3, r2, r3
 810e1ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 810e1d0:	2300      	movs	r3, #0
 810e1d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 810e1d4:	69fb      	ldr	r3, [r7, #28]
 810e1d6:	681b      	ldr	r3, [r3, #0]
 810e1d8:	61fb      	str	r3, [r7, #28]
 810e1da:	88fb      	ldrh	r3, [r7, #6]
 810e1dc:	2b00      	cmp	r3, #0
 810e1de:	d002      	beq.n	810e1e6 <pbuf_copy_partial+0xca>
 810e1e0:	69fb      	ldr	r3, [r7, #28]
 810e1e2:	2b00      	cmp	r3, #0
 810e1e4:	d1c4      	bne.n	810e170 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 810e1e6:	8afb      	ldrh	r3, [r7, #22]
}
 810e1e8:	4618      	mov	r0, r3
 810e1ea:	3720      	adds	r7, #32
 810e1ec:	46bd      	mov	sp, r7
 810e1ee:	bd80      	pop	{r7, pc}
 810e1f0:	0811d0ac 	.word	0x0811d0ac
 810e1f4:	0811d424 	.word	0x0811d424
 810e1f8:	0811d13c 	.word	0x0811d13c
 810e1fc:	0811d444 	.word	0x0811d444

0810e200 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 810e200:	b580      	push	{r7, lr}
 810e202:	b084      	sub	sp, #16
 810e204:	af00      	add	r7, sp, #0
 810e206:	4603      	mov	r3, r0
 810e208:	603a      	str	r2, [r7, #0]
 810e20a:	71fb      	strb	r3, [r7, #7]
 810e20c:	460b      	mov	r3, r1
 810e20e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 810e210:	683b      	ldr	r3, [r7, #0]
 810e212:	8919      	ldrh	r1, [r3, #8]
 810e214:	88ba      	ldrh	r2, [r7, #4]
 810e216:	79fb      	ldrb	r3, [r7, #7]
 810e218:	4618      	mov	r0, r3
 810e21a:	f7ff fab1 	bl	810d780 <pbuf_alloc>
 810e21e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 810e220:	68fb      	ldr	r3, [r7, #12]
 810e222:	2b00      	cmp	r3, #0
 810e224:	d101      	bne.n	810e22a <pbuf_clone+0x2a>
    return NULL;
 810e226:	2300      	movs	r3, #0
 810e228:	e011      	b.n	810e24e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 810e22a:	6839      	ldr	r1, [r7, #0]
 810e22c:	68f8      	ldr	r0, [r7, #12]
 810e22e:	f7ff fea3 	bl	810df78 <pbuf_copy>
 810e232:	4603      	mov	r3, r0
 810e234:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 810e236:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810e23a:	2b00      	cmp	r3, #0
 810e23c:	d006      	beq.n	810e24c <pbuf_clone+0x4c>
 810e23e:	4b06      	ldr	r3, [pc, #24]	@ (810e258 <pbuf_clone+0x58>)
 810e240:	f240 5224 	movw	r2, #1316	@ 0x524
 810e244:	4905      	ldr	r1, [pc, #20]	@ (810e25c <pbuf_clone+0x5c>)
 810e246:	4806      	ldr	r0, [pc, #24]	@ (810e260 <pbuf_clone+0x60>)
 810e248:	f009 f8f6 	bl	8117438 <iprintf>
  return q;
 810e24c:	68fb      	ldr	r3, [r7, #12]
}
 810e24e:	4618      	mov	r0, r3
 810e250:	3710      	adds	r7, #16
 810e252:	46bd      	mov	sp, r7
 810e254:	bd80      	pop	{r7, pc}
 810e256:	bf00      	nop
 810e258:	0811d0ac 	.word	0x0811d0ac
 810e25c:	0811d550 	.word	0x0811d550
 810e260:	0811d13c 	.word	0x0811d13c

0810e264 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 810e264:	b580      	push	{r7, lr}
 810e266:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 810e268:	f008 f906 	bl	8116478 <rand>
 810e26c:	4603      	mov	r3, r0
 810e26e:	b29b      	uxth	r3, r3
 810e270:	f3c3 030d 	ubfx	r3, r3, #0, #14
 810e274:	b29b      	uxth	r3, r3
 810e276:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 810e27a:	b29a      	uxth	r2, r3
 810e27c:	4b01      	ldr	r3, [pc, #4]	@ (810e284 <tcp_init+0x20>)
 810e27e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 810e280:	bf00      	nop
 810e282:	bd80      	pop	{r7, pc}
 810e284:	100001c2 	.word	0x100001c2

0810e288 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 810e288:	b580      	push	{r7, lr}
 810e28a:	b082      	sub	sp, #8
 810e28c:	af00      	add	r7, sp, #0
 810e28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 810e290:	687b      	ldr	r3, [r7, #4]
 810e292:	7d1b      	ldrb	r3, [r3, #20]
 810e294:	2b01      	cmp	r3, #1
 810e296:	d105      	bne.n	810e2a4 <tcp_free+0x1c>
 810e298:	4b06      	ldr	r3, [pc, #24]	@ (810e2b4 <tcp_free+0x2c>)
 810e29a:	22d4      	movs	r2, #212	@ 0xd4
 810e29c:	4906      	ldr	r1, [pc, #24]	@ (810e2b8 <tcp_free+0x30>)
 810e29e:	4807      	ldr	r0, [pc, #28]	@ (810e2bc <tcp_free+0x34>)
 810e2a0:	f009 f8ca 	bl	8117438 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 810e2a4:	6879      	ldr	r1, [r7, #4]
 810e2a6:	2001      	movs	r0, #1
 810e2a8:	f7fe fed8 	bl	810d05c <memp_free>
}
 810e2ac:	bf00      	nop
 810e2ae:	3708      	adds	r7, #8
 810e2b0:	46bd      	mov	sp, r7
 810e2b2:	bd80      	pop	{r7, pc}
 810e2b4:	0811d5dc 	.word	0x0811d5dc
 810e2b8:	0811d63c 	.word	0x0811d63c
 810e2bc:	0811d650 	.word	0x0811d650

0810e2c0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 810e2c0:	b580      	push	{r7, lr}
 810e2c2:	b082      	sub	sp, #8
 810e2c4:	af00      	add	r7, sp, #0
 810e2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 810e2c8:	687b      	ldr	r3, [r7, #4]
 810e2ca:	7d1b      	ldrb	r3, [r3, #20]
 810e2cc:	2b01      	cmp	r3, #1
 810e2ce:	d105      	bne.n	810e2dc <tcp_free_listen+0x1c>
 810e2d0:	4b06      	ldr	r3, [pc, #24]	@ (810e2ec <tcp_free_listen+0x2c>)
 810e2d2:	22df      	movs	r2, #223	@ 0xdf
 810e2d4:	4906      	ldr	r1, [pc, #24]	@ (810e2f0 <tcp_free_listen+0x30>)
 810e2d6:	4807      	ldr	r0, [pc, #28]	@ (810e2f4 <tcp_free_listen+0x34>)
 810e2d8:	f009 f8ae 	bl	8117438 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 810e2dc:	6879      	ldr	r1, [r7, #4]
 810e2de:	2002      	movs	r0, #2
 810e2e0:	f7fe febc 	bl	810d05c <memp_free>
}
 810e2e4:	bf00      	nop
 810e2e6:	3708      	adds	r7, #8
 810e2e8:	46bd      	mov	sp, r7
 810e2ea:	bd80      	pop	{r7, pc}
 810e2ec:	0811d5dc 	.word	0x0811d5dc
 810e2f0:	0811d678 	.word	0x0811d678
 810e2f4:	0811d650 	.word	0x0811d650

0810e2f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 810e2f8:	b580      	push	{r7, lr}
 810e2fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 810e2fc:	f001 f802 	bl	810f304 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 810e300:	4b07      	ldr	r3, [pc, #28]	@ (810e320 <tcp_tmr+0x28>)
 810e302:	781b      	ldrb	r3, [r3, #0]
 810e304:	3301      	adds	r3, #1
 810e306:	b2da      	uxtb	r2, r3
 810e308:	4b05      	ldr	r3, [pc, #20]	@ (810e320 <tcp_tmr+0x28>)
 810e30a:	701a      	strb	r2, [r3, #0]
 810e30c:	4b04      	ldr	r3, [pc, #16]	@ (810e320 <tcp_tmr+0x28>)
 810e30e:	781b      	ldrb	r3, [r3, #0]
 810e310:	f003 0301 	and.w	r3, r3, #1
 810e314:	2b00      	cmp	r3, #0
 810e316:	d001      	beq.n	810e31c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 810e318:	f000 fcb2 	bl	810ec80 <tcp_slowtmr>
  }
}
 810e31c:	bf00      	nop
 810e31e:	bd80      	pop	{r7, pc}
 810e320:	1001770d 	.word	0x1001770d

0810e324 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 810e324:	b580      	push	{r7, lr}
 810e326:	b084      	sub	sp, #16
 810e328:	af00      	add	r7, sp, #0
 810e32a:	6078      	str	r0, [r7, #4]
 810e32c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 810e32e:	683b      	ldr	r3, [r7, #0]
 810e330:	2b00      	cmp	r3, #0
 810e332:	d105      	bne.n	810e340 <tcp_remove_listener+0x1c>
 810e334:	4b0d      	ldr	r3, [pc, #52]	@ (810e36c <tcp_remove_listener+0x48>)
 810e336:	22ff      	movs	r2, #255	@ 0xff
 810e338:	490d      	ldr	r1, [pc, #52]	@ (810e370 <tcp_remove_listener+0x4c>)
 810e33a:	480e      	ldr	r0, [pc, #56]	@ (810e374 <tcp_remove_listener+0x50>)
 810e33c:	f009 f87c 	bl	8117438 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 810e340:	687b      	ldr	r3, [r7, #4]
 810e342:	60fb      	str	r3, [r7, #12]
 810e344:	e00a      	b.n	810e35c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 810e346:	68fb      	ldr	r3, [r7, #12]
 810e348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810e34a:	683a      	ldr	r2, [r7, #0]
 810e34c:	429a      	cmp	r2, r3
 810e34e:	d102      	bne.n	810e356 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 810e350:	68fb      	ldr	r3, [r7, #12]
 810e352:	2200      	movs	r2, #0
 810e354:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 810e356:	68fb      	ldr	r3, [r7, #12]
 810e358:	68db      	ldr	r3, [r3, #12]
 810e35a:	60fb      	str	r3, [r7, #12]
 810e35c:	68fb      	ldr	r3, [r7, #12]
 810e35e:	2b00      	cmp	r3, #0
 810e360:	d1f1      	bne.n	810e346 <tcp_remove_listener+0x22>
    }
  }
}
 810e362:	bf00      	nop
 810e364:	bf00      	nop
 810e366:	3710      	adds	r7, #16
 810e368:	46bd      	mov	sp, r7
 810e36a:	bd80      	pop	{r7, pc}
 810e36c:	0811d5dc 	.word	0x0811d5dc
 810e370:	0811d694 	.word	0x0811d694
 810e374:	0811d650 	.word	0x0811d650

0810e378 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 810e378:	b580      	push	{r7, lr}
 810e37a:	b084      	sub	sp, #16
 810e37c:	af00      	add	r7, sp, #0
 810e37e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 810e380:	687b      	ldr	r3, [r7, #4]
 810e382:	2b00      	cmp	r3, #0
 810e384:	d106      	bne.n	810e394 <tcp_listen_closed+0x1c>
 810e386:	4b14      	ldr	r3, [pc, #80]	@ (810e3d8 <tcp_listen_closed+0x60>)
 810e388:	f240 1211 	movw	r2, #273	@ 0x111
 810e38c:	4913      	ldr	r1, [pc, #76]	@ (810e3dc <tcp_listen_closed+0x64>)
 810e38e:	4814      	ldr	r0, [pc, #80]	@ (810e3e0 <tcp_listen_closed+0x68>)
 810e390:	f009 f852 	bl	8117438 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 810e394:	687b      	ldr	r3, [r7, #4]
 810e396:	7d1b      	ldrb	r3, [r3, #20]
 810e398:	2b01      	cmp	r3, #1
 810e39a:	d006      	beq.n	810e3aa <tcp_listen_closed+0x32>
 810e39c:	4b0e      	ldr	r3, [pc, #56]	@ (810e3d8 <tcp_listen_closed+0x60>)
 810e39e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 810e3a2:	4910      	ldr	r1, [pc, #64]	@ (810e3e4 <tcp_listen_closed+0x6c>)
 810e3a4:	480e      	ldr	r0, [pc, #56]	@ (810e3e0 <tcp_listen_closed+0x68>)
 810e3a6:	f009 f847 	bl	8117438 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 810e3aa:	2301      	movs	r3, #1
 810e3ac:	60fb      	str	r3, [r7, #12]
 810e3ae:	e00b      	b.n	810e3c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 810e3b0:	4a0d      	ldr	r2, [pc, #52]	@ (810e3e8 <tcp_listen_closed+0x70>)
 810e3b2:	68fb      	ldr	r3, [r7, #12]
 810e3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810e3b8:	681b      	ldr	r3, [r3, #0]
 810e3ba:	6879      	ldr	r1, [r7, #4]
 810e3bc:	4618      	mov	r0, r3
 810e3be:	f7ff ffb1 	bl	810e324 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 810e3c2:	68fb      	ldr	r3, [r7, #12]
 810e3c4:	3301      	adds	r3, #1
 810e3c6:	60fb      	str	r3, [r7, #12]
 810e3c8:	68fb      	ldr	r3, [r7, #12]
 810e3ca:	2b03      	cmp	r3, #3
 810e3cc:	d9f0      	bls.n	810e3b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 810e3ce:	bf00      	nop
 810e3d0:	bf00      	nop
 810e3d2:	3710      	adds	r7, #16
 810e3d4:	46bd      	mov	sp, r7
 810e3d6:	bd80      	pop	{r7, pc}
 810e3d8:	0811d5dc 	.word	0x0811d5dc
 810e3dc:	0811d6bc 	.word	0x0811d6bc
 810e3e0:	0811d650 	.word	0x0811d650
 810e3e4:	0811d6c8 	.word	0x0811d6c8
 810e3e8:	0811f024 	.word	0x0811f024

0810e3ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 810e3ec:	b5b0      	push	{r4, r5, r7, lr}
 810e3ee:	b088      	sub	sp, #32
 810e3f0:	af04      	add	r7, sp, #16
 810e3f2:	6078      	str	r0, [r7, #4]
 810e3f4:	460b      	mov	r3, r1
 810e3f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 810e3f8:	687b      	ldr	r3, [r7, #4]
 810e3fa:	2b00      	cmp	r3, #0
 810e3fc:	d106      	bne.n	810e40c <tcp_close_shutdown+0x20>
 810e3fe:	4b63      	ldr	r3, [pc, #396]	@ (810e58c <tcp_close_shutdown+0x1a0>)
 810e400:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 810e404:	4962      	ldr	r1, [pc, #392]	@ (810e590 <tcp_close_shutdown+0x1a4>)
 810e406:	4863      	ldr	r0, [pc, #396]	@ (810e594 <tcp_close_shutdown+0x1a8>)
 810e408:	f009 f816 	bl	8117438 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 810e40c:	78fb      	ldrb	r3, [r7, #3]
 810e40e:	2b00      	cmp	r3, #0
 810e410:	d066      	beq.n	810e4e0 <tcp_close_shutdown+0xf4>
 810e412:	687b      	ldr	r3, [r7, #4]
 810e414:	7d1b      	ldrb	r3, [r3, #20]
 810e416:	2b04      	cmp	r3, #4
 810e418:	d003      	beq.n	810e422 <tcp_close_shutdown+0x36>
 810e41a:	687b      	ldr	r3, [r7, #4]
 810e41c:	7d1b      	ldrb	r3, [r3, #20]
 810e41e:	2b07      	cmp	r3, #7
 810e420:	d15e      	bne.n	810e4e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 810e422:	687b      	ldr	r3, [r7, #4]
 810e424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810e426:	2b00      	cmp	r3, #0
 810e428:	d104      	bne.n	810e434 <tcp_close_shutdown+0x48>
 810e42a:	687b      	ldr	r3, [r7, #4]
 810e42c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810e42e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 810e432:	d055      	beq.n	810e4e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 810e434:	687b      	ldr	r3, [r7, #4]
 810e436:	8b5b      	ldrh	r3, [r3, #26]
 810e438:	f003 0310 	and.w	r3, r3, #16
 810e43c:	2b00      	cmp	r3, #0
 810e43e:	d106      	bne.n	810e44e <tcp_close_shutdown+0x62>
 810e440:	4b52      	ldr	r3, [pc, #328]	@ (810e58c <tcp_close_shutdown+0x1a0>)
 810e442:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 810e446:	4954      	ldr	r1, [pc, #336]	@ (810e598 <tcp_close_shutdown+0x1ac>)
 810e448:	4852      	ldr	r0, [pc, #328]	@ (810e594 <tcp_close_shutdown+0x1a8>)
 810e44a:	f008 fff5 	bl	8117438 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 810e44e:	687b      	ldr	r3, [r7, #4]
 810e450:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 810e452:	687b      	ldr	r3, [r7, #4]
 810e454:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 810e456:	687d      	ldr	r5, [r7, #4]
 810e458:	687b      	ldr	r3, [r7, #4]
 810e45a:	3304      	adds	r3, #4
 810e45c:	687a      	ldr	r2, [r7, #4]
 810e45e:	8ad2      	ldrh	r2, [r2, #22]
 810e460:	6879      	ldr	r1, [r7, #4]
 810e462:	8b09      	ldrh	r1, [r1, #24]
 810e464:	9102      	str	r1, [sp, #8]
 810e466:	9201      	str	r2, [sp, #4]
 810e468:	9300      	str	r3, [sp, #0]
 810e46a:	462b      	mov	r3, r5
 810e46c:	4622      	mov	r2, r4
 810e46e:	4601      	mov	r1, r0
 810e470:	6878      	ldr	r0, [r7, #4]
 810e472:	f005 fc7f 	bl	8113d74 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 810e476:	6878      	ldr	r0, [r7, #4]
 810e478:	f001 fa62 	bl	810f940 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 810e47c:	4b47      	ldr	r3, [pc, #284]	@ (810e59c <tcp_close_shutdown+0x1b0>)
 810e47e:	681b      	ldr	r3, [r3, #0]
 810e480:	687a      	ldr	r2, [r7, #4]
 810e482:	429a      	cmp	r2, r3
 810e484:	d105      	bne.n	810e492 <tcp_close_shutdown+0xa6>
 810e486:	4b45      	ldr	r3, [pc, #276]	@ (810e59c <tcp_close_shutdown+0x1b0>)
 810e488:	681b      	ldr	r3, [r3, #0]
 810e48a:	68db      	ldr	r3, [r3, #12]
 810e48c:	4a43      	ldr	r2, [pc, #268]	@ (810e59c <tcp_close_shutdown+0x1b0>)
 810e48e:	6013      	str	r3, [r2, #0]
 810e490:	e013      	b.n	810e4ba <tcp_close_shutdown+0xce>
 810e492:	4b42      	ldr	r3, [pc, #264]	@ (810e59c <tcp_close_shutdown+0x1b0>)
 810e494:	681b      	ldr	r3, [r3, #0]
 810e496:	60fb      	str	r3, [r7, #12]
 810e498:	e00c      	b.n	810e4b4 <tcp_close_shutdown+0xc8>
 810e49a:	68fb      	ldr	r3, [r7, #12]
 810e49c:	68db      	ldr	r3, [r3, #12]
 810e49e:	687a      	ldr	r2, [r7, #4]
 810e4a0:	429a      	cmp	r2, r3
 810e4a2:	d104      	bne.n	810e4ae <tcp_close_shutdown+0xc2>
 810e4a4:	687b      	ldr	r3, [r7, #4]
 810e4a6:	68da      	ldr	r2, [r3, #12]
 810e4a8:	68fb      	ldr	r3, [r7, #12]
 810e4aa:	60da      	str	r2, [r3, #12]
 810e4ac:	e005      	b.n	810e4ba <tcp_close_shutdown+0xce>
 810e4ae:	68fb      	ldr	r3, [r7, #12]
 810e4b0:	68db      	ldr	r3, [r3, #12]
 810e4b2:	60fb      	str	r3, [r7, #12]
 810e4b4:	68fb      	ldr	r3, [r7, #12]
 810e4b6:	2b00      	cmp	r3, #0
 810e4b8:	d1ef      	bne.n	810e49a <tcp_close_shutdown+0xae>
 810e4ba:	687b      	ldr	r3, [r7, #4]
 810e4bc:	2200      	movs	r2, #0
 810e4be:	60da      	str	r2, [r3, #12]
 810e4c0:	4b37      	ldr	r3, [pc, #220]	@ (810e5a0 <tcp_close_shutdown+0x1b4>)
 810e4c2:	2201      	movs	r2, #1
 810e4c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 810e4c6:	4b37      	ldr	r3, [pc, #220]	@ (810e5a4 <tcp_close_shutdown+0x1b8>)
 810e4c8:	681b      	ldr	r3, [r3, #0]
 810e4ca:	687a      	ldr	r2, [r7, #4]
 810e4cc:	429a      	cmp	r2, r3
 810e4ce:	d102      	bne.n	810e4d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 810e4d0:	f003 fef6 	bl	81122c0 <tcp_trigger_input_pcb_close>
 810e4d4:	e002      	b.n	810e4dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 810e4d6:	6878      	ldr	r0, [r7, #4]
 810e4d8:	f7ff fed6 	bl	810e288 <tcp_free>
      }
      return ERR_OK;
 810e4dc:	2300      	movs	r3, #0
 810e4de:	e050      	b.n	810e582 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 810e4e0:	687b      	ldr	r3, [r7, #4]
 810e4e2:	7d1b      	ldrb	r3, [r3, #20]
 810e4e4:	2b02      	cmp	r3, #2
 810e4e6:	d03b      	beq.n	810e560 <tcp_close_shutdown+0x174>
 810e4e8:	2b02      	cmp	r3, #2
 810e4ea:	dc44      	bgt.n	810e576 <tcp_close_shutdown+0x18a>
 810e4ec:	2b00      	cmp	r3, #0
 810e4ee:	d002      	beq.n	810e4f6 <tcp_close_shutdown+0x10a>
 810e4f0:	2b01      	cmp	r3, #1
 810e4f2:	d02a      	beq.n	810e54a <tcp_close_shutdown+0x15e>
 810e4f4:	e03f      	b.n	810e576 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 810e4f6:	687b      	ldr	r3, [r7, #4]
 810e4f8:	8adb      	ldrh	r3, [r3, #22]
 810e4fa:	2b00      	cmp	r3, #0
 810e4fc:	d021      	beq.n	810e542 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 810e4fe:	4b2a      	ldr	r3, [pc, #168]	@ (810e5a8 <tcp_close_shutdown+0x1bc>)
 810e500:	681b      	ldr	r3, [r3, #0]
 810e502:	687a      	ldr	r2, [r7, #4]
 810e504:	429a      	cmp	r2, r3
 810e506:	d105      	bne.n	810e514 <tcp_close_shutdown+0x128>
 810e508:	4b27      	ldr	r3, [pc, #156]	@ (810e5a8 <tcp_close_shutdown+0x1bc>)
 810e50a:	681b      	ldr	r3, [r3, #0]
 810e50c:	68db      	ldr	r3, [r3, #12]
 810e50e:	4a26      	ldr	r2, [pc, #152]	@ (810e5a8 <tcp_close_shutdown+0x1bc>)
 810e510:	6013      	str	r3, [r2, #0]
 810e512:	e013      	b.n	810e53c <tcp_close_shutdown+0x150>
 810e514:	4b24      	ldr	r3, [pc, #144]	@ (810e5a8 <tcp_close_shutdown+0x1bc>)
 810e516:	681b      	ldr	r3, [r3, #0]
 810e518:	60bb      	str	r3, [r7, #8]
 810e51a:	e00c      	b.n	810e536 <tcp_close_shutdown+0x14a>
 810e51c:	68bb      	ldr	r3, [r7, #8]
 810e51e:	68db      	ldr	r3, [r3, #12]
 810e520:	687a      	ldr	r2, [r7, #4]
 810e522:	429a      	cmp	r2, r3
 810e524:	d104      	bne.n	810e530 <tcp_close_shutdown+0x144>
 810e526:	687b      	ldr	r3, [r7, #4]
 810e528:	68da      	ldr	r2, [r3, #12]
 810e52a:	68bb      	ldr	r3, [r7, #8]
 810e52c:	60da      	str	r2, [r3, #12]
 810e52e:	e005      	b.n	810e53c <tcp_close_shutdown+0x150>
 810e530:	68bb      	ldr	r3, [r7, #8]
 810e532:	68db      	ldr	r3, [r3, #12]
 810e534:	60bb      	str	r3, [r7, #8]
 810e536:	68bb      	ldr	r3, [r7, #8]
 810e538:	2b00      	cmp	r3, #0
 810e53a:	d1ef      	bne.n	810e51c <tcp_close_shutdown+0x130>
 810e53c:	687b      	ldr	r3, [r7, #4]
 810e53e:	2200      	movs	r2, #0
 810e540:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 810e542:	6878      	ldr	r0, [r7, #4]
 810e544:	f7ff fea0 	bl	810e288 <tcp_free>
      break;
 810e548:	e01a      	b.n	810e580 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 810e54a:	6878      	ldr	r0, [r7, #4]
 810e54c:	f7ff ff14 	bl	810e378 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 810e550:	6879      	ldr	r1, [r7, #4]
 810e552:	4816      	ldr	r0, [pc, #88]	@ (810e5ac <tcp_close_shutdown+0x1c0>)
 810e554:	f001 fa44 	bl	810f9e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 810e558:	6878      	ldr	r0, [r7, #4]
 810e55a:	f7ff feb1 	bl	810e2c0 <tcp_free_listen>
      break;
 810e55e:	e00f      	b.n	810e580 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 810e560:	6879      	ldr	r1, [r7, #4]
 810e562:	480e      	ldr	r0, [pc, #56]	@ (810e59c <tcp_close_shutdown+0x1b0>)
 810e564:	f001 fa3c 	bl	810f9e0 <tcp_pcb_remove>
 810e568:	4b0d      	ldr	r3, [pc, #52]	@ (810e5a0 <tcp_close_shutdown+0x1b4>)
 810e56a:	2201      	movs	r2, #1
 810e56c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 810e56e:	6878      	ldr	r0, [r7, #4]
 810e570:	f7ff fe8a 	bl	810e288 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 810e574:	e004      	b.n	810e580 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 810e576:	6878      	ldr	r0, [r7, #4]
 810e578:	f000 f81a 	bl	810e5b0 <tcp_close_shutdown_fin>
 810e57c:	4603      	mov	r3, r0
 810e57e:	e000      	b.n	810e582 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 810e580:	2300      	movs	r3, #0
}
 810e582:	4618      	mov	r0, r3
 810e584:	3710      	adds	r7, #16
 810e586:	46bd      	mov	sp, r7
 810e588:	bdb0      	pop	{r4, r5, r7, pc}
 810e58a:	bf00      	nop
 810e58c:	0811d5dc 	.word	0x0811d5dc
 810e590:	0811d6e0 	.word	0x0811d6e0
 810e594:	0811d650 	.word	0x0811d650
 810e598:	0811d700 	.word	0x0811d700
 810e59c:	10017704 	.word	0x10017704
 810e5a0:	1001770c 	.word	0x1001770c
 810e5a4:	10017744 	.word	0x10017744
 810e5a8:	100176fc 	.word	0x100176fc
 810e5ac:	10017700 	.word	0x10017700

0810e5b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 810e5b0:	b580      	push	{r7, lr}
 810e5b2:	b084      	sub	sp, #16
 810e5b4:	af00      	add	r7, sp, #0
 810e5b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 810e5b8:	687b      	ldr	r3, [r7, #4]
 810e5ba:	2b00      	cmp	r3, #0
 810e5bc:	d106      	bne.n	810e5cc <tcp_close_shutdown_fin+0x1c>
 810e5be:	4b2e      	ldr	r3, [pc, #184]	@ (810e678 <tcp_close_shutdown_fin+0xc8>)
 810e5c0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 810e5c4:	492d      	ldr	r1, [pc, #180]	@ (810e67c <tcp_close_shutdown_fin+0xcc>)
 810e5c6:	482e      	ldr	r0, [pc, #184]	@ (810e680 <tcp_close_shutdown_fin+0xd0>)
 810e5c8:	f008 ff36 	bl	8117438 <iprintf>

  switch (pcb->state) {
 810e5cc:	687b      	ldr	r3, [r7, #4]
 810e5ce:	7d1b      	ldrb	r3, [r3, #20]
 810e5d0:	2b07      	cmp	r3, #7
 810e5d2:	d020      	beq.n	810e616 <tcp_close_shutdown_fin+0x66>
 810e5d4:	2b07      	cmp	r3, #7
 810e5d6:	dc2b      	bgt.n	810e630 <tcp_close_shutdown_fin+0x80>
 810e5d8:	2b03      	cmp	r3, #3
 810e5da:	d002      	beq.n	810e5e2 <tcp_close_shutdown_fin+0x32>
 810e5dc:	2b04      	cmp	r3, #4
 810e5de:	d00d      	beq.n	810e5fc <tcp_close_shutdown_fin+0x4c>
 810e5e0:	e026      	b.n	810e630 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 810e5e2:	6878      	ldr	r0, [r7, #4]
 810e5e4:	f004 fcd4 	bl	8112f90 <tcp_send_fin>
 810e5e8:	4603      	mov	r3, r0
 810e5ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 810e5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e5f0:	2b00      	cmp	r3, #0
 810e5f2:	d11f      	bne.n	810e634 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 810e5f4:	687b      	ldr	r3, [r7, #4]
 810e5f6:	2205      	movs	r2, #5
 810e5f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 810e5fa:	e01b      	b.n	810e634 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 810e5fc:	6878      	ldr	r0, [r7, #4]
 810e5fe:	f004 fcc7 	bl	8112f90 <tcp_send_fin>
 810e602:	4603      	mov	r3, r0
 810e604:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 810e606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e60a:	2b00      	cmp	r3, #0
 810e60c:	d114      	bne.n	810e638 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 810e60e:	687b      	ldr	r3, [r7, #4]
 810e610:	2205      	movs	r2, #5
 810e612:	751a      	strb	r2, [r3, #20]
      }
      break;
 810e614:	e010      	b.n	810e638 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 810e616:	6878      	ldr	r0, [r7, #4]
 810e618:	f004 fcba 	bl	8112f90 <tcp_send_fin>
 810e61c:	4603      	mov	r3, r0
 810e61e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 810e620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e624:	2b00      	cmp	r3, #0
 810e626:	d109      	bne.n	810e63c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 810e628:	687b      	ldr	r3, [r7, #4]
 810e62a:	2209      	movs	r2, #9
 810e62c:	751a      	strb	r2, [r3, #20]
      }
      break;
 810e62e:	e005      	b.n	810e63c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 810e630:	2300      	movs	r3, #0
 810e632:	e01c      	b.n	810e66e <tcp_close_shutdown_fin+0xbe>
      break;
 810e634:	bf00      	nop
 810e636:	e002      	b.n	810e63e <tcp_close_shutdown_fin+0x8e>
      break;
 810e638:	bf00      	nop
 810e63a:	e000      	b.n	810e63e <tcp_close_shutdown_fin+0x8e>
      break;
 810e63c:	bf00      	nop
  }

  if (err == ERR_OK) {
 810e63e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e642:	2b00      	cmp	r3, #0
 810e644:	d103      	bne.n	810e64e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 810e646:	6878      	ldr	r0, [r7, #4]
 810e648:	f004 fde0 	bl	811320c <tcp_output>
 810e64c:	e00d      	b.n	810e66a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 810e64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e652:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e656:	d108      	bne.n	810e66a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 810e658:	687b      	ldr	r3, [r7, #4]
 810e65a:	8b5b      	ldrh	r3, [r3, #26]
 810e65c:	f043 0308 	orr.w	r3, r3, #8
 810e660:	b29a      	uxth	r2, r3
 810e662:	687b      	ldr	r3, [r7, #4]
 810e664:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 810e666:	2300      	movs	r3, #0
 810e668:	e001      	b.n	810e66e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 810e66a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 810e66e:	4618      	mov	r0, r3
 810e670:	3710      	adds	r7, #16
 810e672:	46bd      	mov	sp, r7
 810e674:	bd80      	pop	{r7, pc}
 810e676:	bf00      	nop
 810e678:	0811d5dc 	.word	0x0811d5dc
 810e67c:	0811d6bc 	.word	0x0811d6bc
 810e680:	0811d650 	.word	0x0811d650

0810e684 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 810e684:	b580      	push	{r7, lr}
 810e686:	b082      	sub	sp, #8
 810e688:	af00      	add	r7, sp, #0
 810e68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 810e68c:	687b      	ldr	r3, [r7, #4]
 810e68e:	2b00      	cmp	r3, #0
 810e690:	d109      	bne.n	810e6a6 <tcp_close+0x22>
 810e692:	4b0f      	ldr	r3, [pc, #60]	@ (810e6d0 <tcp_close+0x4c>)
 810e694:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 810e698:	490e      	ldr	r1, [pc, #56]	@ (810e6d4 <tcp_close+0x50>)
 810e69a:	480f      	ldr	r0, [pc, #60]	@ (810e6d8 <tcp_close+0x54>)
 810e69c:	f008 fecc 	bl	8117438 <iprintf>
 810e6a0:	f06f 030f 	mvn.w	r3, #15
 810e6a4:	e00f      	b.n	810e6c6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 810e6a6:	687b      	ldr	r3, [r7, #4]
 810e6a8:	7d1b      	ldrb	r3, [r3, #20]
 810e6aa:	2b01      	cmp	r3, #1
 810e6ac:	d006      	beq.n	810e6bc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 810e6ae:	687b      	ldr	r3, [r7, #4]
 810e6b0:	8b5b      	ldrh	r3, [r3, #26]
 810e6b2:	f043 0310 	orr.w	r3, r3, #16
 810e6b6:	b29a      	uxth	r2, r3
 810e6b8:	687b      	ldr	r3, [r7, #4]
 810e6ba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 810e6bc:	2101      	movs	r1, #1
 810e6be:	6878      	ldr	r0, [r7, #4]
 810e6c0:	f7ff fe94 	bl	810e3ec <tcp_close_shutdown>
 810e6c4:	4603      	mov	r3, r0
}
 810e6c6:	4618      	mov	r0, r3
 810e6c8:	3708      	adds	r7, #8
 810e6ca:	46bd      	mov	sp, r7
 810e6cc:	bd80      	pop	{r7, pc}
 810e6ce:	bf00      	nop
 810e6d0:	0811d5dc 	.word	0x0811d5dc
 810e6d4:	0811d71c 	.word	0x0811d71c
 810e6d8:	0811d650 	.word	0x0811d650

0810e6dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 810e6dc:	b580      	push	{r7, lr}
 810e6de:	b08e      	sub	sp, #56	@ 0x38
 810e6e0:	af04      	add	r7, sp, #16
 810e6e2:	6078      	str	r0, [r7, #4]
 810e6e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 810e6e6:	687b      	ldr	r3, [r7, #4]
 810e6e8:	2b00      	cmp	r3, #0
 810e6ea:	d107      	bne.n	810e6fc <tcp_abandon+0x20>
 810e6ec:	4b52      	ldr	r3, [pc, #328]	@ (810e838 <tcp_abandon+0x15c>)
 810e6ee:	f240 223d 	movw	r2, #573	@ 0x23d
 810e6f2:	4952      	ldr	r1, [pc, #328]	@ (810e83c <tcp_abandon+0x160>)
 810e6f4:	4852      	ldr	r0, [pc, #328]	@ (810e840 <tcp_abandon+0x164>)
 810e6f6:	f008 fe9f 	bl	8117438 <iprintf>
 810e6fa:	e099      	b.n	810e830 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 810e6fc:	687b      	ldr	r3, [r7, #4]
 810e6fe:	7d1b      	ldrb	r3, [r3, #20]
 810e700:	2b01      	cmp	r3, #1
 810e702:	d106      	bne.n	810e712 <tcp_abandon+0x36>
 810e704:	4b4c      	ldr	r3, [pc, #304]	@ (810e838 <tcp_abandon+0x15c>)
 810e706:	f44f 7210 	mov.w	r2, #576	@ 0x240
 810e70a:	494e      	ldr	r1, [pc, #312]	@ (810e844 <tcp_abandon+0x168>)
 810e70c:	484c      	ldr	r0, [pc, #304]	@ (810e840 <tcp_abandon+0x164>)
 810e70e:	f008 fe93 	bl	8117438 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 810e712:	687b      	ldr	r3, [r7, #4]
 810e714:	7d1b      	ldrb	r3, [r3, #20]
 810e716:	2b0a      	cmp	r3, #10
 810e718:	d107      	bne.n	810e72a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 810e71a:	6879      	ldr	r1, [r7, #4]
 810e71c:	484a      	ldr	r0, [pc, #296]	@ (810e848 <tcp_abandon+0x16c>)
 810e71e:	f001 f95f 	bl	810f9e0 <tcp_pcb_remove>
    tcp_free(pcb);
 810e722:	6878      	ldr	r0, [r7, #4]
 810e724:	f7ff fdb0 	bl	810e288 <tcp_free>
 810e728:	e082      	b.n	810e830 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 810e72a:	2300      	movs	r3, #0
 810e72c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 810e72e:	2300      	movs	r3, #0
 810e730:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 810e732:	687b      	ldr	r3, [r7, #4]
 810e734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e736:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 810e738:	687b      	ldr	r3, [r7, #4]
 810e73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e73c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 810e73e:	687b      	ldr	r3, [r7, #4]
 810e740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e744:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 810e746:	687b      	ldr	r3, [r7, #4]
 810e748:	691b      	ldr	r3, [r3, #16]
 810e74a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 810e74c:	687b      	ldr	r3, [r7, #4]
 810e74e:	7d1b      	ldrb	r3, [r3, #20]
 810e750:	2b00      	cmp	r3, #0
 810e752:	d126      	bne.n	810e7a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 810e754:	687b      	ldr	r3, [r7, #4]
 810e756:	8adb      	ldrh	r3, [r3, #22]
 810e758:	2b00      	cmp	r3, #0
 810e75a:	d02e      	beq.n	810e7ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 810e75c:	4b3b      	ldr	r3, [pc, #236]	@ (810e84c <tcp_abandon+0x170>)
 810e75e:	681b      	ldr	r3, [r3, #0]
 810e760:	687a      	ldr	r2, [r7, #4]
 810e762:	429a      	cmp	r2, r3
 810e764:	d105      	bne.n	810e772 <tcp_abandon+0x96>
 810e766:	4b39      	ldr	r3, [pc, #228]	@ (810e84c <tcp_abandon+0x170>)
 810e768:	681b      	ldr	r3, [r3, #0]
 810e76a:	68db      	ldr	r3, [r3, #12]
 810e76c:	4a37      	ldr	r2, [pc, #220]	@ (810e84c <tcp_abandon+0x170>)
 810e76e:	6013      	str	r3, [r2, #0]
 810e770:	e013      	b.n	810e79a <tcp_abandon+0xbe>
 810e772:	4b36      	ldr	r3, [pc, #216]	@ (810e84c <tcp_abandon+0x170>)
 810e774:	681b      	ldr	r3, [r3, #0]
 810e776:	61fb      	str	r3, [r7, #28]
 810e778:	e00c      	b.n	810e794 <tcp_abandon+0xb8>
 810e77a:	69fb      	ldr	r3, [r7, #28]
 810e77c:	68db      	ldr	r3, [r3, #12]
 810e77e:	687a      	ldr	r2, [r7, #4]
 810e780:	429a      	cmp	r2, r3
 810e782:	d104      	bne.n	810e78e <tcp_abandon+0xb2>
 810e784:	687b      	ldr	r3, [r7, #4]
 810e786:	68da      	ldr	r2, [r3, #12]
 810e788:	69fb      	ldr	r3, [r7, #28]
 810e78a:	60da      	str	r2, [r3, #12]
 810e78c:	e005      	b.n	810e79a <tcp_abandon+0xbe>
 810e78e:	69fb      	ldr	r3, [r7, #28]
 810e790:	68db      	ldr	r3, [r3, #12]
 810e792:	61fb      	str	r3, [r7, #28]
 810e794:	69fb      	ldr	r3, [r7, #28]
 810e796:	2b00      	cmp	r3, #0
 810e798:	d1ef      	bne.n	810e77a <tcp_abandon+0x9e>
 810e79a:	687b      	ldr	r3, [r7, #4]
 810e79c:	2200      	movs	r2, #0
 810e79e:	60da      	str	r2, [r3, #12]
 810e7a0:	e00b      	b.n	810e7ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 810e7a2:	683b      	ldr	r3, [r7, #0]
 810e7a4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 810e7a6:	687b      	ldr	r3, [r7, #4]
 810e7a8:	8adb      	ldrh	r3, [r3, #22]
 810e7aa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 810e7ac:	6879      	ldr	r1, [r7, #4]
 810e7ae:	4828      	ldr	r0, [pc, #160]	@ (810e850 <tcp_abandon+0x174>)
 810e7b0:	f001 f916 	bl	810f9e0 <tcp_pcb_remove>
 810e7b4:	4b27      	ldr	r3, [pc, #156]	@ (810e854 <tcp_abandon+0x178>)
 810e7b6:	2201      	movs	r2, #1
 810e7b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 810e7ba:	687b      	ldr	r3, [r7, #4]
 810e7bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810e7be:	2b00      	cmp	r3, #0
 810e7c0:	d004      	beq.n	810e7cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 810e7c2:	687b      	ldr	r3, [r7, #4]
 810e7c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810e7c6:	4618      	mov	r0, r3
 810e7c8:	f000 fe7c 	bl	810f4c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 810e7cc:	687b      	ldr	r3, [r7, #4]
 810e7ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e7d0:	2b00      	cmp	r3, #0
 810e7d2:	d004      	beq.n	810e7de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 810e7d4:	687b      	ldr	r3, [r7, #4]
 810e7d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e7d8:	4618      	mov	r0, r3
 810e7da:	f000 fe73 	bl	810f4c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 810e7de:	687b      	ldr	r3, [r7, #4]
 810e7e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810e7e2:	2b00      	cmp	r3, #0
 810e7e4:	d004      	beq.n	810e7f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 810e7e6:	687b      	ldr	r3, [r7, #4]
 810e7e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810e7ea:	4618      	mov	r0, r3
 810e7ec:	f000 fe6a 	bl	810f4c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 810e7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7f2:	2b00      	cmp	r3, #0
 810e7f4:	d00e      	beq.n	810e814 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 810e7f6:	6879      	ldr	r1, [r7, #4]
 810e7f8:	687b      	ldr	r3, [r7, #4]
 810e7fa:	3304      	adds	r3, #4
 810e7fc:	687a      	ldr	r2, [r7, #4]
 810e7fe:	8b12      	ldrh	r2, [r2, #24]
 810e800:	9202      	str	r2, [sp, #8]
 810e802:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 810e804:	9201      	str	r2, [sp, #4]
 810e806:	9300      	str	r3, [sp, #0]
 810e808:	460b      	mov	r3, r1
 810e80a:	697a      	ldr	r2, [r7, #20]
 810e80c:	69b9      	ldr	r1, [r7, #24]
 810e80e:	6878      	ldr	r0, [r7, #4]
 810e810:	f005 fab0 	bl	8113d74 <tcp_rst>
    }
    last_state = pcb->state;
 810e814:	687b      	ldr	r3, [r7, #4]
 810e816:	7d1b      	ldrb	r3, [r3, #20]
 810e818:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 810e81a:	6878      	ldr	r0, [r7, #4]
 810e81c:	f7ff fd34 	bl	810e288 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 810e820:	693b      	ldr	r3, [r7, #16]
 810e822:	2b00      	cmp	r3, #0
 810e824:	d004      	beq.n	810e830 <tcp_abandon+0x154>
 810e826:	693b      	ldr	r3, [r7, #16]
 810e828:	f06f 010c 	mvn.w	r1, #12
 810e82c:	68f8      	ldr	r0, [r7, #12]
 810e82e:	4798      	blx	r3
  }
}
 810e830:	3728      	adds	r7, #40	@ 0x28
 810e832:	46bd      	mov	sp, r7
 810e834:	bd80      	pop	{r7, pc}
 810e836:	bf00      	nop
 810e838:	0811d5dc 	.word	0x0811d5dc
 810e83c:	0811d750 	.word	0x0811d750
 810e840:	0811d650 	.word	0x0811d650
 810e844:	0811d76c 	.word	0x0811d76c
 810e848:	10017708 	.word	0x10017708
 810e84c:	100176fc 	.word	0x100176fc
 810e850:	10017704 	.word	0x10017704
 810e854:	1001770c 	.word	0x1001770c

0810e858 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 810e858:	b580      	push	{r7, lr}
 810e85a:	b082      	sub	sp, #8
 810e85c:	af00      	add	r7, sp, #0
 810e85e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 810e860:	2101      	movs	r1, #1
 810e862:	6878      	ldr	r0, [r7, #4]
 810e864:	f7ff ff3a 	bl	810e6dc <tcp_abandon>
}
 810e868:	bf00      	nop
 810e86a:	3708      	adds	r7, #8
 810e86c:	46bd      	mov	sp, r7
 810e86e:	bd80      	pop	{r7, pc}

0810e870 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 810e870:	b580      	push	{r7, lr}
 810e872:	b084      	sub	sp, #16
 810e874:	af00      	add	r7, sp, #0
 810e876:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 810e878:	687b      	ldr	r3, [r7, #4]
 810e87a:	2b00      	cmp	r3, #0
 810e87c:	d106      	bne.n	810e88c <tcp_update_rcv_ann_wnd+0x1c>
 810e87e:	4b25      	ldr	r3, [pc, #148]	@ (810e914 <tcp_update_rcv_ann_wnd+0xa4>)
 810e880:	f240 32a6 	movw	r2, #934	@ 0x3a6
 810e884:	4924      	ldr	r1, [pc, #144]	@ (810e918 <tcp_update_rcv_ann_wnd+0xa8>)
 810e886:	4825      	ldr	r0, [pc, #148]	@ (810e91c <tcp_update_rcv_ann_wnd+0xac>)
 810e888:	f008 fdd6 	bl	8117438 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 810e88c:	687b      	ldr	r3, [r7, #4]
 810e88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e890:	687a      	ldr	r2, [r7, #4]
 810e892:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 810e894:	4413      	add	r3, r2
 810e896:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 810e898:	687b      	ldr	r3, [r7, #4]
 810e89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e89c:	687a      	ldr	r2, [r7, #4]
 810e89e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 810e8a0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 810e8a4:	bf28      	it	cs
 810e8a6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 810e8aa:	b292      	uxth	r2, r2
 810e8ac:	4413      	add	r3, r2
 810e8ae:	68fa      	ldr	r2, [r7, #12]
 810e8b0:	1ad3      	subs	r3, r2, r3
 810e8b2:	2b00      	cmp	r3, #0
 810e8b4:	db08      	blt.n	810e8c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 810e8b6:	687b      	ldr	r3, [r7, #4]
 810e8b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 810e8ba:	687b      	ldr	r3, [r7, #4]
 810e8bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 810e8be:	687b      	ldr	r3, [r7, #4]
 810e8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e8c2:	68fa      	ldr	r2, [r7, #12]
 810e8c4:	1ad3      	subs	r3, r2, r3
 810e8c6:	e020      	b.n	810e90a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 810e8c8:	687b      	ldr	r3, [r7, #4]
 810e8ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e8cc:	687b      	ldr	r3, [r7, #4]
 810e8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e8d0:	1ad3      	subs	r3, r2, r3
 810e8d2:	2b00      	cmp	r3, #0
 810e8d4:	dd03      	ble.n	810e8de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 810e8d6:	687b      	ldr	r3, [r7, #4]
 810e8d8:	2200      	movs	r2, #0
 810e8da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 810e8dc:	e014      	b.n	810e908 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 810e8de:	687b      	ldr	r3, [r7, #4]
 810e8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e8e2:	687b      	ldr	r3, [r7, #4]
 810e8e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e8e6:	1ad3      	subs	r3, r2, r3
 810e8e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 810e8ea:	68bb      	ldr	r3, [r7, #8]
 810e8ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810e8f0:	d306      	bcc.n	810e900 <tcp_update_rcv_ann_wnd+0x90>
 810e8f2:	4b08      	ldr	r3, [pc, #32]	@ (810e914 <tcp_update_rcv_ann_wnd+0xa4>)
 810e8f4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 810e8f8:	4909      	ldr	r1, [pc, #36]	@ (810e920 <tcp_update_rcv_ann_wnd+0xb0>)
 810e8fa:	4808      	ldr	r0, [pc, #32]	@ (810e91c <tcp_update_rcv_ann_wnd+0xac>)
 810e8fc:	f008 fd9c 	bl	8117438 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 810e900:	68bb      	ldr	r3, [r7, #8]
 810e902:	b29a      	uxth	r2, r3
 810e904:	687b      	ldr	r3, [r7, #4]
 810e906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 810e908:	2300      	movs	r3, #0
  }
}
 810e90a:	4618      	mov	r0, r3
 810e90c:	3710      	adds	r7, #16
 810e90e:	46bd      	mov	sp, r7
 810e910:	bd80      	pop	{r7, pc}
 810e912:	bf00      	nop
 810e914:	0811d5dc 	.word	0x0811d5dc
 810e918:	0811d868 	.word	0x0811d868
 810e91c:	0811d650 	.word	0x0811d650
 810e920:	0811d88c 	.word	0x0811d88c

0810e924 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 810e924:	b580      	push	{r7, lr}
 810e926:	b084      	sub	sp, #16
 810e928:	af00      	add	r7, sp, #0
 810e92a:	6078      	str	r0, [r7, #4]
 810e92c:	460b      	mov	r3, r1
 810e92e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 810e930:	687b      	ldr	r3, [r7, #4]
 810e932:	2b00      	cmp	r3, #0
 810e934:	d107      	bne.n	810e946 <tcp_recved+0x22>
 810e936:	4b1f      	ldr	r3, [pc, #124]	@ (810e9b4 <tcp_recved+0x90>)
 810e938:	f240 32cf 	movw	r2, #975	@ 0x3cf
 810e93c:	491e      	ldr	r1, [pc, #120]	@ (810e9b8 <tcp_recved+0x94>)
 810e93e:	481f      	ldr	r0, [pc, #124]	@ (810e9bc <tcp_recved+0x98>)
 810e940:	f008 fd7a 	bl	8117438 <iprintf>
 810e944:	e032      	b.n	810e9ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 810e946:	687b      	ldr	r3, [r7, #4]
 810e948:	7d1b      	ldrb	r3, [r3, #20]
 810e94a:	2b01      	cmp	r3, #1
 810e94c:	d106      	bne.n	810e95c <tcp_recved+0x38>
 810e94e:	4b19      	ldr	r3, [pc, #100]	@ (810e9b4 <tcp_recved+0x90>)
 810e950:	f240 32d2 	movw	r2, #978	@ 0x3d2
 810e954:	491a      	ldr	r1, [pc, #104]	@ (810e9c0 <tcp_recved+0x9c>)
 810e956:	4819      	ldr	r0, [pc, #100]	@ (810e9bc <tcp_recved+0x98>)
 810e958:	f008 fd6e 	bl	8117438 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 810e95c:	687b      	ldr	r3, [r7, #4]
 810e95e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 810e960:	887b      	ldrh	r3, [r7, #2]
 810e962:	4413      	add	r3, r2
 810e964:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 810e966:	89fb      	ldrh	r3, [r7, #14]
 810e968:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 810e96c:	d804      	bhi.n	810e978 <tcp_recved+0x54>
 810e96e:	687b      	ldr	r3, [r7, #4]
 810e970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810e972:	89fa      	ldrh	r2, [r7, #14]
 810e974:	429a      	cmp	r2, r3
 810e976:	d204      	bcs.n	810e982 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 810e978:	687b      	ldr	r3, [r7, #4]
 810e97a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 810e97e:	851a      	strh	r2, [r3, #40]	@ 0x28
 810e980:	e002      	b.n	810e988 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 810e982:	687b      	ldr	r3, [r7, #4]
 810e984:	89fa      	ldrh	r2, [r7, #14]
 810e986:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 810e988:	6878      	ldr	r0, [r7, #4]
 810e98a:	f7ff ff71 	bl	810e870 <tcp_update_rcv_ann_wnd>
 810e98e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 810e990:	68bb      	ldr	r3, [r7, #8]
 810e992:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 810e996:	d309      	bcc.n	810e9ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 810e998:	687b      	ldr	r3, [r7, #4]
 810e99a:	8b5b      	ldrh	r3, [r3, #26]
 810e99c:	f043 0302 	orr.w	r3, r3, #2
 810e9a0:	b29a      	uxth	r2, r3
 810e9a2:	687b      	ldr	r3, [r7, #4]
 810e9a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 810e9a6:	6878      	ldr	r0, [r7, #4]
 810e9a8:	f004 fc30 	bl	811320c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 810e9ac:	3710      	adds	r7, #16
 810e9ae:	46bd      	mov	sp, r7
 810e9b0:	bd80      	pop	{r7, pc}
 810e9b2:	bf00      	nop
 810e9b4:	0811d5dc 	.word	0x0811d5dc
 810e9b8:	0811d8a8 	.word	0x0811d8a8
 810e9bc:	0811d650 	.word	0x0811d650
 810e9c0:	0811d8c0 	.word	0x0811d8c0

0810e9c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 810e9c4:	b480      	push	{r7}
 810e9c6:	b083      	sub	sp, #12
 810e9c8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 810e9ca:	2300      	movs	r3, #0
 810e9cc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 810e9ce:	4b1e      	ldr	r3, [pc, #120]	@ (810ea48 <tcp_new_port+0x84>)
 810e9d0:	881b      	ldrh	r3, [r3, #0]
 810e9d2:	3301      	adds	r3, #1
 810e9d4:	b29a      	uxth	r2, r3
 810e9d6:	4b1c      	ldr	r3, [pc, #112]	@ (810ea48 <tcp_new_port+0x84>)
 810e9d8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 810e9da:	4b1b      	ldr	r3, [pc, #108]	@ (810ea48 <tcp_new_port+0x84>)
 810e9dc:	881b      	ldrh	r3, [r3, #0]
 810e9de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810e9e2:	4293      	cmp	r3, r2
 810e9e4:	d103      	bne.n	810e9ee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 810e9e6:	4b18      	ldr	r3, [pc, #96]	@ (810ea48 <tcp_new_port+0x84>)
 810e9e8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 810e9ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 810e9ee:	2300      	movs	r3, #0
 810e9f0:	71fb      	strb	r3, [r7, #7]
 810e9f2:	e01e      	b.n	810ea32 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 810e9f4:	79fb      	ldrb	r3, [r7, #7]
 810e9f6:	4a15      	ldr	r2, [pc, #84]	@ (810ea4c <tcp_new_port+0x88>)
 810e9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810e9fc:	681b      	ldr	r3, [r3, #0]
 810e9fe:	603b      	str	r3, [r7, #0]
 810ea00:	e011      	b.n	810ea26 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 810ea02:	683b      	ldr	r3, [r7, #0]
 810ea04:	8ada      	ldrh	r2, [r3, #22]
 810ea06:	4b10      	ldr	r3, [pc, #64]	@ (810ea48 <tcp_new_port+0x84>)
 810ea08:	881b      	ldrh	r3, [r3, #0]
 810ea0a:	429a      	cmp	r2, r3
 810ea0c:	d108      	bne.n	810ea20 <tcp_new_port+0x5c>
        n++;
 810ea0e:	88bb      	ldrh	r3, [r7, #4]
 810ea10:	3301      	adds	r3, #1
 810ea12:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 810ea14:	88bb      	ldrh	r3, [r7, #4]
 810ea16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810ea1a:	d3d8      	bcc.n	810e9ce <tcp_new_port+0xa>
          return 0;
 810ea1c:	2300      	movs	r3, #0
 810ea1e:	e00d      	b.n	810ea3c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 810ea20:	683b      	ldr	r3, [r7, #0]
 810ea22:	68db      	ldr	r3, [r3, #12]
 810ea24:	603b      	str	r3, [r7, #0]
 810ea26:	683b      	ldr	r3, [r7, #0]
 810ea28:	2b00      	cmp	r3, #0
 810ea2a:	d1ea      	bne.n	810ea02 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 810ea2c:	79fb      	ldrb	r3, [r7, #7]
 810ea2e:	3301      	adds	r3, #1
 810ea30:	71fb      	strb	r3, [r7, #7]
 810ea32:	79fb      	ldrb	r3, [r7, #7]
 810ea34:	2b03      	cmp	r3, #3
 810ea36:	d9dd      	bls.n	810e9f4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 810ea38:	4b03      	ldr	r3, [pc, #12]	@ (810ea48 <tcp_new_port+0x84>)
 810ea3a:	881b      	ldrh	r3, [r3, #0]
}
 810ea3c:	4618      	mov	r0, r3
 810ea3e:	370c      	adds	r7, #12
 810ea40:	46bd      	mov	sp, r7
 810ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea46:	4770      	bx	lr
 810ea48:	100001c2 	.word	0x100001c2
 810ea4c:	0811f024 	.word	0x0811f024

0810ea50 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 810ea50:	b580      	push	{r7, lr}
 810ea52:	b08a      	sub	sp, #40	@ 0x28
 810ea54:	af00      	add	r7, sp, #0
 810ea56:	60f8      	str	r0, [r7, #12]
 810ea58:	60b9      	str	r1, [r7, #8]
 810ea5a:	603b      	str	r3, [r7, #0]
 810ea5c:	4613      	mov	r3, r2
 810ea5e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 810ea60:	2300      	movs	r3, #0
 810ea62:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 810ea64:	68fb      	ldr	r3, [r7, #12]
 810ea66:	2b00      	cmp	r3, #0
 810ea68:	d109      	bne.n	810ea7e <tcp_connect+0x2e>
 810ea6a:	4b7d      	ldr	r3, [pc, #500]	@ (810ec60 <tcp_connect+0x210>)
 810ea6c:	f240 4235 	movw	r2, #1077	@ 0x435
 810ea70:	497c      	ldr	r1, [pc, #496]	@ (810ec64 <tcp_connect+0x214>)
 810ea72:	487d      	ldr	r0, [pc, #500]	@ (810ec68 <tcp_connect+0x218>)
 810ea74:	f008 fce0 	bl	8117438 <iprintf>
 810ea78:	f06f 030f 	mvn.w	r3, #15
 810ea7c:	e0ec      	b.n	810ec58 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 810ea7e:	68bb      	ldr	r3, [r7, #8]
 810ea80:	2b00      	cmp	r3, #0
 810ea82:	d109      	bne.n	810ea98 <tcp_connect+0x48>
 810ea84:	4b76      	ldr	r3, [pc, #472]	@ (810ec60 <tcp_connect+0x210>)
 810ea86:	f240 4236 	movw	r2, #1078	@ 0x436
 810ea8a:	4978      	ldr	r1, [pc, #480]	@ (810ec6c <tcp_connect+0x21c>)
 810ea8c:	4876      	ldr	r0, [pc, #472]	@ (810ec68 <tcp_connect+0x218>)
 810ea8e:	f008 fcd3 	bl	8117438 <iprintf>
 810ea92:	f06f 030f 	mvn.w	r3, #15
 810ea96:	e0df      	b.n	810ec58 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 810ea98:	68fb      	ldr	r3, [r7, #12]
 810ea9a:	7d1b      	ldrb	r3, [r3, #20]
 810ea9c:	2b00      	cmp	r3, #0
 810ea9e:	d009      	beq.n	810eab4 <tcp_connect+0x64>
 810eaa0:	4b6f      	ldr	r3, [pc, #444]	@ (810ec60 <tcp_connect+0x210>)
 810eaa2:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 810eaa6:	4972      	ldr	r1, [pc, #456]	@ (810ec70 <tcp_connect+0x220>)
 810eaa8:	486f      	ldr	r0, [pc, #444]	@ (810ec68 <tcp_connect+0x218>)
 810eaaa:	f008 fcc5 	bl	8117438 <iprintf>
 810eaae:	f06f 0309 	mvn.w	r3, #9
 810eab2:	e0d1      	b.n	810ec58 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 810eab4:	68bb      	ldr	r3, [r7, #8]
 810eab6:	2b00      	cmp	r3, #0
 810eab8:	d002      	beq.n	810eac0 <tcp_connect+0x70>
 810eaba:	68bb      	ldr	r3, [r7, #8]
 810eabc:	681b      	ldr	r3, [r3, #0]
 810eabe:	e000      	b.n	810eac2 <tcp_connect+0x72>
 810eac0:	2300      	movs	r3, #0
 810eac2:	68fa      	ldr	r2, [r7, #12]
 810eac4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 810eac6:	68fb      	ldr	r3, [r7, #12]
 810eac8:	88fa      	ldrh	r2, [r7, #6]
 810eaca:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 810eacc:	68fb      	ldr	r3, [r7, #12]
 810eace:	7a1b      	ldrb	r3, [r3, #8]
 810ead0:	2b00      	cmp	r3, #0
 810ead2:	d006      	beq.n	810eae2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 810ead4:	68fb      	ldr	r3, [r7, #12]
 810ead6:	7a1b      	ldrb	r3, [r3, #8]
 810ead8:	4618      	mov	r0, r3
 810eada:	f7fe fdd5 	bl	810d688 <netif_get_by_index>
 810eade:	6278      	str	r0, [r7, #36]	@ 0x24
 810eae0:	e005      	b.n	810eaee <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 810eae2:	68fb      	ldr	r3, [r7, #12]
 810eae4:	3304      	adds	r3, #4
 810eae6:	4618      	mov	r0, r3
 810eae8:	f7fc fd02 	bl	810b4f0 <ip4_route>
 810eaec:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 810eaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eaf0:	2b00      	cmp	r3, #0
 810eaf2:	d102      	bne.n	810eafa <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 810eaf4:	f06f 0303 	mvn.w	r3, #3
 810eaf8:	e0ae      	b.n	810ec58 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 810eafa:	68fb      	ldr	r3, [r7, #12]
 810eafc:	2b00      	cmp	r3, #0
 810eafe:	d003      	beq.n	810eb08 <tcp_connect+0xb8>
 810eb00:	68fb      	ldr	r3, [r7, #12]
 810eb02:	681b      	ldr	r3, [r3, #0]
 810eb04:	2b00      	cmp	r3, #0
 810eb06:	d111      	bne.n	810eb2c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 810eb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb0a:	2b00      	cmp	r3, #0
 810eb0c:	d002      	beq.n	810eb14 <tcp_connect+0xc4>
 810eb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb10:	3304      	adds	r3, #4
 810eb12:	e000      	b.n	810eb16 <tcp_connect+0xc6>
 810eb14:	2300      	movs	r3, #0
 810eb16:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 810eb18:	69fb      	ldr	r3, [r7, #28]
 810eb1a:	2b00      	cmp	r3, #0
 810eb1c:	d102      	bne.n	810eb24 <tcp_connect+0xd4>
      return ERR_RTE;
 810eb1e:	f06f 0303 	mvn.w	r3, #3
 810eb22:	e099      	b.n	810ec58 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 810eb24:	69fb      	ldr	r3, [r7, #28]
 810eb26:	681a      	ldr	r2, [r3, #0]
 810eb28:	68fb      	ldr	r3, [r7, #12]
 810eb2a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 810eb2c:	68fb      	ldr	r3, [r7, #12]
 810eb2e:	8adb      	ldrh	r3, [r3, #22]
 810eb30:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 810eb32:	68fb      	ldr	r3, [r7, #12]
 810eb34:	8adb      	ldrh	r3, [r3, #22]
 810eb36:	2b00      	cmp	r3, #0
 810eb38:	d10c      	bne.n	810eb54 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 810eb3a:	f7ff ff43 	bl	810e9c4 <tcp_new_port>
 810eb3e:	4603      	mov	r3, r0
 810eb40:	461a      	mov	r2, r3
 810eb42:	68fb      	ldr	r3, [r7, #12]
 810eb44:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 810eb46:	68fb      	ldr	r3, [r7, #12]
 810eb48:	8adb      	ldrh	r3, [r3, #22]
 810eb4a:	2b00      	cmp	r3, #0
 810eb4c:	d102      	bne.n	810eb54 <tcp_connect+0x104>
      return ERR_BUF;
 810eb4e:	f06f 0301 	mvn.w	r3, #1
 810eb52:	e081      	b.n	810ec58 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 810eb54:	68f8      	ldr	r0, [r7, #12]
 810eb56:	f000 ffd7 	bl	810fb08 <tcp_next_iss>
 810eb5a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 810eb5c:	68fb      	ldr	r3, [r7, #12]
 810eb5e:	2200      	movs	r2, #0
 810eb60:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 810eb62:	68fb      	ldr	r3, [r7, #12]
 810eb64:	697a      	ldr	r2, [r7, #20]
 810eb66:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 810eb68:	697b      	ldr	r3, [r7, #20]
 810eb6a:	1e5a      	subs	r2, r3, #1
 810eb6c:	68fb      	ldr	r3, [r7, #12]
 810eb6e:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 810eb70:	697b      	ldr	r3, [r7, #20]
 810eb72:	1e5a      	subs	r2, r3, #1
 810eb74:	68fb      	ldr	r3, [r7, #12]
 810eb76:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 810eb78:	697b      	ldr	r3, [r7, #20]
 810eb7a:	1e5a      	subs	r2, r3, #1
 810eb7c:	68fb      	ldr	r3, [r7, #12]
 810eb7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 810eb80:	68fb      	ldr	r3, [r7, #12]
 810eb82:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 810eb86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 810eb88:	68fb      	ldr	r3, [r7, #12]
 810eb8a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 810eb8c:	68fb      	ldr	r3, [r7, #12]
 810eb8e:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 810eb90:	68fb      	ldr	r3, [r7, #12]
 810eb92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810eb94:	68fb      	ldr	r3, [r7, #12]
 810eb96:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 810eb98:	68fb      	ldr	r3, [r7, #12]
 810eb9a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 810eb9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 810eba2:	68fb      	ldr	r3, [r7, #12]
 810eba4:	f44f 7206 	mov.w	r2, #536	@ 0x218
 810eba8:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 810ebaa:	68fb      	ldr	r3, [r7, #12]
 810ebac:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 810ebae:	68fb      	ldr	r3, [r7, #12]
 810ebb0:	3304      	adds	r3, #4
 810ebb2:	461a      	mov	r2, r3
 810ebb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810ebb6:	f000 ffcd 	bl	810fb54 <tcp_eff_send_mss_netif>
 810ebba:	4603      	mov	r3, r0
 810ebbc:	461a      	mov	r2, r3
 810ebbe:	68fb      	ldr	r3, [r7, #12]
 810ebc0:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 810ebc2:	68fb      	ldr	r3, [r7, #12]
 810ebc4:	2201      	movs	r2, #1
 810ebc6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 810ebca:	68fb      	ldr	r3, [r7, #12]
 810ebcc:	683a      	ldr	r2, [r7, #0]
 810ebce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 810ebd2:	2102      	movs	r1, #2
 810ebd4:	68f8      	ldr	r0, [r7, #12]
 810ebd6:	f004 fa2b 	bl	8113030 <tcp_enqueue_flags>
 810ebda:	4603      	mov	r3, r0
 810ebdc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 810ebde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 810ebe2:	2b00      	cmp	r3, #0
 810ebe4:	d136      	bne.n	810ec54 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 810ebe6:	68fb      	ldr	r3, [r7, #12]
 810ebe8:	2202      	movs	r2, #2
 810ebea:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 810ebec:	8b7b      	ldrh	r3, [r7, #26]
 810ebee:	2b00      	cmp	r3, #0
 810ebf0:	d021      	beq.n	810ec36 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 810ebf2:	4b20      	ldr	r3, [pc, #128]	@ (810ec74 <tcp_connect+0x224>)
 810ebf4:	681b      	ldr	r3, [r3, #0]
 810ebf6:	68fa      	ldr	r2, [r7, #12]
 810ebf8:	429a      	cmp	r2, r3
 810ebfa:	d105      	bne.n	810ec08 <tcp_connect+0x1b8>
 810ebfc:	4b1d      	ldr	r3, [pc, #116]	@ (810ec74 <tcp_connect+0x224>)
 810ebfe:	681b      	ldr	r3, [r3, #0]
 810ec00:	68db      	ldr	r3, [r3, #12]
 810ec02:	4a1c      	ldr	r2, [pc, #112]	@ (810ec74 <tcp_connect+0x224>)
 810ec04:	6013      	str	r3, [r2, #0]
 810ec06:	e013      	b.n	810ec30 <tcp_connect+0x1e0>
 810ec08:	4b1a      	ldr	r3, [pc, #104]	@ (810ec74 <tcp_connect+0x224>)
 810ec0a:	681b      	ldr	r3, [r3, #0]
 810ec0c:	623b      	str	r3, [r7, #32]
 810ec0e:	e00c      	b.n	810ec2a <tcp_connect+0x1da>
 810ec10:	6a3b      	ldr	r3, [r7, #32]
 810ec12:	68db      	ldr	r3, [r3, #12]
 810ec14:	68fa      	ldr	r2, [r7, #12]
 810ec16:	429a      	cmp	r2, r3
 810ec18:	d104      	bne.n	810ec24 <tcp_connect+0x1d4>
 810ec1a:	68fb      	ldr	r3, [r7, #12]
 810ec1c:	68da      	ldr	r2, [r3, #12]
 810ec1e:	6a3b      	ldr	r3, [r7, #32]
 810ec20:	60da      	str	r2, [r3, #12]
 810ec22:	e005      	b.n	810ec30 <tcp_connect+0x1e0>
 810ec24:	6a3b      	ldr	r3, [r7, #32]
 810ec26:	68db      	ldr	r3, [r3, #12]
 810ec28:	623b      	str	r3, [r7, #32]
 810ec2a:	6a3b      	ldr	r3, [r7, #32]
 810ec2c:	2b00      	cmp	r3, #0
 810ec2e:	d1ef      	bne.n	810ec10 <tcp_connect+0x1c0>
 810ec30:	68fb      	ldr	r3, [r7, #12]
 810ec32:	2200      	movs	r2, #0
 810ec34:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 810ec36:	4b10      	ldr	r3, [pc, #64]	@ (810ec78 <tcp_connect+0x228>)
 810ec38:	681a      	ldr	r2, [r3, #0]
 810ec3a:	68fb      	ldr	r3, [r7, #12]
 810ec3c:	60da      	str	r2, [r3, #12]
 810ec3e:	4a0e      	ldr	r2, [pc, #56]	@ (810ec78 <tcp_connect+0x228>)
 810ec40:	68fb      	ldr	r3, [r7, #12]
 810ec42:	6013      	str	r3, [r2, #0]
 810ec44:	f005 fa58 	bl	81140f8 <tcp_timer_needed>
 810ec48:	4b0c      	ldr	r3, [pc, #48]	@ (810ec7c <tcp_connect+0x22c>)
 810ec4a:	2201      	movs	r2, #1
 810ec4c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 810ec4e:	68f8      	ldr	r0, [r7, #12]
 810ec50:	f004 fadc 	bl	811320c <tcp_output>
  }
  return ret;
 810ec54:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 810ec58:	4618      	mov	r0, r3
 810ec5a:	3728      	adds	r7, #40	@ 0x28
 810ec5c:	46bd      	mov	sp, r7
 810ec5e:	bd80      	pop	{r7, pc}
 810ec60:	0811d5dc 	.word	0x0811d5dc
 810ec64:	0811d8e8 	.word	0x0811d8e8
 810ec68:	0811d650 	.word	0x0811d650
 810ec6c:	0811d904 	.word	0x0811d904
 810ec70:	0811d920 	.word	0x0811d920
 810ec74:	100176fc 	.word	0x100176fc
 810ec78:	10017704 	.word	0x10017704
 810ec7c:	1001770c 	.word	0x1001770c

0810ec80 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 810ec80:	b5b0      	push	{r4, r5, r7, lr}
 810ec82:	b090      	sub	sp, #64	@ 0x40
 810ec84:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 810ec86:	2300      	movs	r3, #0
 810ec88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 810ec8c:	4b95      	ldr	r3, [pc, #596]	@ (810eee4 <tcp_slowtmr+0x264>)
 810ec8e:	681b      	ldr	r3, [r3, #0]
 810ec90:	3301      	adds	r3, #1
 810ec92:	4a94      	ldr	r2, [pc, #592]	@ (810eee4 <tcp_slowtmr+0x264>)
 810ec94:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 810ec96:	4b94      	ldr	r3, [pc, #592]	@ (810eee8 <tcp_slowtmr+0x268>)
 810ec98:	781b      	ldrb	r3, [r3, #0]
 810ec9a:	3301      	adds	r3, #1
 810ec9c:	b2da      	uxtb	r2, r3
 810ec9e:	4b92      	ldr	r3, [pc, #584]	@ (810eee8 <tcp_slowtmr+0x268>)
 810eca0:	701a      	strb	r2, [r3, #0]
 810eca2:	e000      	b.n	810eca6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 810eca4:	bf00      	nop
  prev = NULL;
 810eca6:	2300      	movs	r3, #0
 810eca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 810ecaa:	4b90      	ldr	r3, [pc, #576]	@ (810eeec <tcp_slowtmr+0x26c>)
 810ecac:	681b      	ldr	r3, [r3, #0]
 810ecae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 810ecb0:	e29f      	b.n	810f1f2 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 810ecb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ecb4:	7d1b      	ldrb	r3, [r3, #20]
 810ecb6:	2b00      	cmp	r3, #0
 810ecb8:	d106      	bne.n	810ecc8 <tcp_slowtmr+0x48>
 810ecba:	4b8d      	ldr	r3, [pc, #564]	@ (810eef0 <tcp_slowtmr+0x270>)
 810ecbc:	f240 42be 	movw	r2, #1214	@ 0x4be
 810ecc0:	498c      	ldr	r1, [pc, #560]	@ (810eef4 <tcp_slowtmr+0x274>)
 810ecc2:	488d      	ldr	r0, [pc, #564]	@ (810eef8 <tcp_slowtmr+0x278>)
 810ecc4:	f008 fbb8 	bl	8117438 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 810ecc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ecca:	7d1b      	ldrb	r3, [r3, #20]
 810eccc:	2b01      	cmp	r3, #1
 810ecce:	d106      	bne.n	810ecde <tcp_slowtmr+0x5e>
 810ecd0:	4b87      	ldr	r3, [pc, #540]	@ (810eef0 <tcp_slowtmr+0x270>)
 810ecd2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 810ecd6:	4989      	ldr	r1, [pc, #548]	@ (810eefc <tcp_slowtmr+0x27c>)
 810ecd8:	4887      	ldr	r0, [pc, #540]	@ (810eef8 <tcp_slowtmr+0x278>)
 810ecda:	f008 fbad 	bl	8117438 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 810ecde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ece0:	7d1b      	ldrb	r3, [r3, #20]
 810ece2:	2b0a      	cmp	r3, #10
 810ece4:	d106      	bne.n	810ecf4 <tcp_slowtmr+0x74>
 810ece6:	4b82      	ldr	r3, [pc, #520]	@ (810eef0 <tcp_slowtmr+0x270>)
 810ece8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 810ecec:	4984      	ldr	r1, [pc, #528]	@ (810ef00 <tcp_slowtmr+0x280>)
 810ecee:	4882      	ldr	r0, [pc, #520]	@ (810eef8 <tcp_slowtmr+0x278>)
 810ecf0:	f008 fba2 	bl	8117438 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 810ecf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ecf6:	7f9a      	ldrb	r2, [r3, #30]
 810ecf8:	4b7b      	ldr	r3, [pc, #492]	@ (810eee8 <tcp_slowtmr+0x268>)
 810ecfa:	781b      	ldrb	r3, [r3, #0]
 810ecfc:	429a      	cmp	r2, r3
 810ecfe:	d105      	bne.n	810ed0c <tcp_slowtmr+0x8c>
      prev = pcb;
 810ed00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed02:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 810ed04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed06:	68db      	ldr	r3, [r3, #12]
 810ed08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 810ed0a:	e272      	b.n	810f1f2 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 810ed0c:	4b76      	ldr	r3, [pc, #472]	@ (810eee8 <tcp_slowtmr+0x268>)
 810ed0e:	781a      	ldrb	r2, [r3, #0]
 810ed10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed12:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 810ed14:	2300      	movs	r3, #0
 810ed16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 810ed1a:	2300      	movs	r3, #0
 810ed1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 810ed20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed22:	7d1b      	ldrb	r3, [r3, #20]
 810ed24:	2b02      	cmp	r3, #2
 810ed26:	d10a      	bne.n	810ed3e <tcp_slowtmr+0xbe>
 810ed28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810ed2e:	2b05      	cmp	r3, #5
 810ed30:	d905      	bls.n	810ed3e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 810ed32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810ed36:	3301      	adds	r3, #1
 810ed38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810ed3c:	e11e      	b.n	810ef7c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 810ed3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810ed44:	2b0b      	cmp	r3, #11
 810ed46:	d905      	bls.n	810ed54 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 810ed48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810ed4c:	3301      	adds	r3, #1
 810ed4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810ed52:	e113      	b.n	810ef7c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 810ed54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 810ed5a:	2b00      	cmp	r3, #0
 810ed5c:	d075      	beq.n	810ee4a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 810ed5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ed62:	2b00      	cmp	r3, #0
 810ed64:	d006      	beq.n	810ed74 <tcp_slowtmr+0xf4>
 810ed66:	4b62      	ldr	r3, [pc, #392]	@ (810eef0 <tcp_slowtmr+0x270>)
 810ed68:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 810ed6c:	4965      	ldr	r1, [pc, #404]	@ (810ef04 <tcp_slowtmr+0x284>)
 810ed6e:	4862      	ldr	r0, [pc, #392]	@ (810eef8 <tcp_slowtmr+0x278>)
 810ed70:	f008 fb62 	bl	8117438 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 810ed74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ed78:	2b00      	cmp	r3, #0
 810ed7a:	d106      	bne.n	810ed8a <tcp_slowtmr+0x10a>
 810ed7c:	4b5c      	ldr	r3, [pc, #368]	@ (810eef0 <tcp_slowtmr+0x270>)
 810ed7e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 810ed82:	4961      	ldr	r1, [pc, #388]	@ (810ef08 <tcp_slowtmr+0x288>)
 810ed84:	485c      	ldr	r0, [pc, #368]	@ (810eef8 <tcp_slowtmr+0x278>)
 810ed86:	f008 fb57 	bl	8117438 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 810ed8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed8c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 810ed90:	2b0b      	cmp	r3, #11
 810ed92:	d905      	bls.n	810eda0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 810ed94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810ed98:	3301      	adds	r3, #1
 810ed9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810ed9e:	e0ed      	b.n	810ef7c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 810eda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eda2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 810eda6:	3b01      	subs	r3, #1
 810eda8:	4a58      	ldr	r2, [pc, #352]	@ (810ef0c <tcp_slowtmr+0x28c>)
 810edaa:	5cd3      	ldrb	r3, [r2, r3]
 810edac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 810edae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810edb0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 810edb4:	7c7a      	ldrb	r2, [r7, #17]
 810edb6:	429a      	cmp	r2, r3
 810edb8:	d907      	bls.n	810edca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 810edba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810edbc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 810edc0:	3301      	adds	r3, #1
 810edc2:	b2da      	uxtb	r2, r3
 810edc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810edc6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 810edca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810edcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 810edd0:	7c7a      	ldrb	r2, [r7, #17]
 810edd2:	429a      	cmp	r2, r3
 810edd4:	f200 80d2 	bhi.w	810ef7c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 810edd8:	2301      	movs	r3, #1
 810edda:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 810eddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810edde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810ede2:	2b00      	cmp	r3, #0
 810ede4:	d108      	bne.n	810edf8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 810ede6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810ede8:	f005 f8b8 	bl	8113f5c <tcp_zero_window_probe>
 810edec:	4603      	mov	r3, r0
 810edee:	2b00      	cmp	r3, #0
 810edf0:	d014      	beq.n	810ee1c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 810edf2:	2300      	movs	r3, #0
 810edf4:	623b      	str	r3, [r7, #32]
 810edf6:	e011      	b.n	810ee1c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 810edf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810edfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810edfe:	4619      	mov	r1, r3
 810ee00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810ee02:	f003 ff7d 	bl	8112d00 <tcp_split_unsent_seg>
 810ee06:	4603      	mov	r3, r0
 810ee08:	2b00      	cmp	r3, #0
 810ee0a:	d107      	bne.n	810ee1c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 810ee0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810ee0e:	f004 f9fd 	bl	811320c <tcp_output>
 810ee12:	4603      	mov	r3, r0
 810ee14:	2b00      	cmp	r3, #0
 810ee16:	d101      	bne.n	810ee1c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 810ee18:	2300      	movs	r3, #0
 810ee1a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 810ee1c:	6a3b      	ldr	r3, [r7, #32]
 810ee1e:	2b00      	cmp	r3, #0
 810ee20:	f000 80ac 	beq.w	810ef7c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 810ee24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee26:	2200      	movs	r2, #0
 810ee28:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 810ee2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee2e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 810ee32:	2b06      	cmp	r3, #6
 810ee34:	f200 80a2 	bhi.w	810ef7c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 810ee38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 810ee3e:	3301      	adds	r3, #1
 810ee40:	b2da      	uxtb	r2, r3
 810ee42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee44:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 810ee48:	e098      	b.n	810ef7c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 810ee4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 810ee50:	2b00      	cmp	r3, #0
 810ee52:	db0f      	blt.n	810ee74 <tcp_slowtmr+0x1f4>
 810ee54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 810ee5a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 810ee5e:	4293      	cmp	r3, r2
 810ee60:	d008      	beq.n	810ee74 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 810ee62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 810ee68:	b29b      	uxth	r3, r3
 810ee6a:	3301      	adds	r3, #1
 810ee6c:	b29b      	uxth	r3, r3
 810ee6e:	b21a      	sxth	r2, r3
 810ee70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee72:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 810ee74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee76:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 810ee7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee7c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 810ee80:	429a      	cmp	r2, r3
 810ee82:	db7b      	blt.n	810ef7c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 810ee84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810ee86:	f004 fcb5 	bl	81137f4 <tcp_rexmit_rto_prepare>
 810ee8a:	4603      	mov	r3, r0
 810ee8c:	2b00      	cmp	r3, #0
 810ee8e:	d007      	beq.n	810eea0 <tcp_slowtmr+0x220>
 810ee90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ee94:	2b00      	cmp	r3, #0
 810ee96:	d171      	bne.n	810ef7c <tcp_slowtmr+0x2fc>
 810ee98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ee9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ee9c:	2b00      	cmp	r3, #0
 810ee9e:	d06d      	beq.n	810ef7c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 810eea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eea2:	7d1b      	ldrb	r3, [r3, #20]
 810eea4:	2b02      	cmp	r3, #2
 810eea6:	d03a      	beq.n	810ef1e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 810eea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eeaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810eeae:	2b0c      	cmp	r3, #12
 810eeb0:	bf28      	it	cs
 810eeb2:	230c      	movcs	r3, #12
 810eeb4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 810eeb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eeb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 810eebc:	10db      	asrs	r3, r3, #3
 810eebe:	b21b      	sxth	r3, r3
 810eec0:	461a      	mov	r2, r3
 810eec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eec4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 810eec8:	4413      	add	r3, r2
 810eeca:	7efa      	ldrb	r2, [r7, #27]
 810eecc:	4910      	ldr	r1, [pc, #64]	@ (810ef10 <tcp_slowtmr+0x290>)
 810eece:	5c8a      	ldrb	r2, [r1, r2]
 810eed0:	4093      	lsls	r3, r2
 810eed2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 810eed4:	697b      	ldr	r3, [r7, #20]
 810eed6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 810eeda:	4293      	cmp	r3, r2
 810eedc:	dc1a      	bgt.n	810ef14 <tcp_slowtmr+0x294>
 810eede:	697b      	ldr	r3, [r7, #20]
 810eee0:	b21a      	sxth	r2, r3
 810eee2:	e019      	b.n	810ef18 <tcp_slowtmr+0x298>
 810eee4:	100176f8 	.word	0x100176f8
 810eee8:	1001770e 	.word	0x1001770e
 810eeec:	10017704 	.word	0x10017704
 810eef0:	0811d5dc 	.word	0x0811d5dc
 810eef4:	0811d950 	.word	0x0811d950
 810eef8:	0811d650 	.word	0x0811d650
 810eefc:	0811d97c 	.word	0x0811d97c
 810ef00:	0811d9a8 	.word	0x0811d9a8
 810ef04:	0811d9d8 	.word	0x0811d9d8
 810ef08:	0811da0c 	.word	0x0811da0c
 810ef0c:	0811f01c 	.word	0x0811f01c
 810ef10:	0811f00c 	.word	0x0811f00c
 810ef14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 810ef18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 810ef1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef20:	2200      	movs	r2, #0
 810ef22:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 810ef24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 810ef2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 810ef30:	4293      	cmp	r3, r2
 810ef32:	bf28      	it	cs
 810ef34:	4613      	movcs	r3, r2
 810ef36:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 810ef38:	8a7b      	ldrh	r3, [r7, #18]
 810ef3a:	085b      	lsrs	r3, r3, #1
 810ef3c:	b29a      	uxth	r2, r3
 810ef3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef40:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 810ef44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 810ef4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 810ef4e:	005b      	lsls	r3, r3, #1
 810ef50:	b29b      	uxth	r3, r3
 810ef52:	429a      	cmp	r2, r3
 810ef54:	d206      	bcs.n	810ef64 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 810ef56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 810ef5a:	005b      	lsls	r3, r3, #1
 810ef5c:	b29a      	uxth	r2, r3
 810ef5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef60:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 810ef64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef66:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 810ef68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 810ef6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef70:	2200      	movs	r2, #0
 810ef72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 810ef76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810ef78:	f004 fcac 	bl	81138d4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 810ef7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef7e:	7d1b      	ldrb	r3, [r3, #20]
 810ef80:	2b06      	cmp	r3, #6
 810ef82:	d111      	bne.n	810efa8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 810ef84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef86:	8b5b      	ldrh	r3, [r3, #26]
 810ef88:	f003 0310 	and.w	r3, r3, #16
 810ef8c:	2b00      	cmp	r3, #0
 810ef8e:	d00b      	beq.n	810efa8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 810ef90:	4b9d      	ldr	r3, [pc, #628]	@ (810f208 <tcp_slowtmr+0x588>)
 810ef92:	681a      	ldr	r2, [r3, #0]
 810ef94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ef96:	6a1b      	ldr	r3, [r3, #32]
 810ef98:	1ad3      	subs	r3, r2, r3
 810ef9a:	2b28      	cmp	r3, #40	@ 0x28
 810ef9c:	d904      	bls.n	810efa8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 810ef9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810efa2:	3301      	adds	r3, #1
 810efa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 810efa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810efaa:	7a5b      	ldrb	r3, [r3, #9]
 810efac:	f003 0308 	and.w	r3, r3, #8
 810efb0:	2b00      	cmp	r3, #0
 810efb2:	d04c      	beq.n	810f04e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 810efb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810efb6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 810efb8:	2b04      	cmp	r3, #4
 810efba:	d003      	beq.n	810efc4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 810efbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810efbe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 810efc0:	2b07      	cmp	r3, #7
 810efc2:	d144      	bne.n	810f04e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 810efc4:	4b90      	ldr	r3, [pc, #576]	@ (810f208 <tcp_slowtmr+0x588>)
 810efc6:	681a      	ldr	r2, [r3, #0]
 810efc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810efca:	6a1b      	ldr	r3, [r3, #32]
 810efcc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 810efce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810efd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810efd4:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 810efd8:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 810efdc:	498b      	ldr	r1, [pc, #556]	@ (810f20c <tcp_slowtmr+0x58c>)
 810efde:	fba1 1303 	umull	r1, r3, r1, r3
 810efe2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 810efe4:	429a      	cmp	r2, r3
 810efe6:	d90a      	bls.n	810effe <tcp_slowtmr+0x37e>
        ++pcb_remove;
 810efe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810efec:	3301      	adds	r3, #1
 810efee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 810eff2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 810eff6:	3301      	adds	r3, #1
 810eff8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 810effc:	e027      	b.n	810f04e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 810effe:	4b82      	ldr	r3, [pc, #520]	@ (810f208 <tcp_slowtmr+0x588>)
 810f000:	681a      	ldr	r2, [r3, #0]
 810f002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f004:	6a1b      	ldr	r3, [r3, #32]
 810f006:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 810f008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f00a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 810f00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f010:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 810f014:	4618      	mov	r0, r3
 810f016:	4b7e      	ldr	r3, [pc, #504]	@ (810f210 <tcp_slowtmr+0x590>)
 810f018:	fb00 f303 	mul.w	r3, r0, r3
 810f01c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 810f01e:	497b      	ldr	r1, [pc, #492]	@ (810f20c <tcp_slowtmr+0x58c>)
 810f020:	fba1 1303 	umull	r1, r3, r1, r3
 810f024:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 810f026:	429a      	cmp	r2, r3
 810f028:	d911      	bls.n	810f04e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 810f02a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f02c:	f004 ff56 	bl	8113edc <tcp_keepalive>
 810f030:	4603      	mov	r3, r0
 810f032:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 810f036:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 810f03a:	2b00      	cmp	r3, #0
 810f03c:	d107      	bne.n	810f04e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 810f03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f040:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 810f044:	3301      	adds	r3, #1
 810f046:	b2da      	uxtb	r2, r3
 810f048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f04a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 810f04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810f052:	2b00      	cmp	r3, #0
 810f054:	d011      	beq.n	810f07a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 810f056:	4b6c      	ldr	r3, [pc, #432]	@ (810f208 <tcp_slowtmr+0x588>)
 810f058:	681a      	ldr	r2, [r3, #0]
 810f05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f05c:	6a1b      	ldr	r3, [r3, #32]
 810f05e:	1ad2      	subs	r2, r2, r3
 810f060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f062:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 810f066:	4619      	mov	r1, r3
 810f068:	460b      	mov	r3, r1
 810f06a:	005b      	lsls	r3, r3, #1
 810f06c:	440b      	add	r3, r1
 810f06e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 810f070:	429a      	cmp	r2, r3
 810f072:	d302      	bcc.n	810f07a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 810f074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f076:	f000 fe17 	bl	810fca8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 810f07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f07c:	7d1b      	ldrb	r3, [r3, #20]
 810f07e:	2b03      	cmp	r3, #3
 810f080:	d10b      	bne.n	810f09a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 810f082:	4b61      	ldr	r3, [pc, #388]	@ (810f208 <tcp_slowtmr+0x588>)
 810f084:	681a      	ldr	r2, [r3, #0]
 810f086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f088:	6a1b      	ldr	r3, [r3, #32]
 810f08a:	1ad3      	subs	r3, r2, r3
 810f08c:	2b28      	cmp	r3, #40	@ 0x28
 810f08e:	d904      	bls.n	810f09a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 810f090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f094:	3301      	adds	r3, #1
 810f096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 810f09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f09c:	7d1b      	ldrb	r3, [r3, #20]
 810f09e:	2b09      	cmp	r3, #9
 810f0a0:	d10b      	bne.n	810f0ba <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 810f0a2:	4b59      	ldr	r3, [pc, #356]	@ (810f208 <tcp_slowtmr+0x588>)
 810f0a4:	681a      	ldr	r2, [r3, #0]
 810f0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f0a8:	6a1b      	ldr	r3, [r3, #32]
 810f0aa:	1ad3      	subs	r3, r2, r3
 810f0ac:	2bf0      	cmp	r3, #240	@ 0xf0
 810f0ae:	d904      	bls.n	810f0ba <tcp_slowtmr+0x43a>
        ++pcb_remove;
 810f0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f0b4:	3301      	adds	r3, #1
 810f0b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 810f0ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f0be:	2b00      	cmp	r3, #0
 810f0c0:	d060      	beq.n	810f184 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 810f0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810f0c8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 810f0ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f0cc:	f000 fc38 	bl	810f940 <tcp_pcb_purge>
      if (prev != NULL) {
 810f0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0d2:	2b00      	cmp	r3, #0
 810f0d4:	d010      	beq.n	810f0f8 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 810f0d6:	4b4f      	ldr	r3, [pc, #316]	@ (810f214 <tcp_slowtmr+0x594>)
 810f0d8:	681b      	ldr	r3, [r3, #0]
 810f0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f0dc:	429a      	cmp	r2, r3
 810f0de:	d106      	bne.n	810f0ee <tcp_slowtmr+0x46e>
 810f0e0:	4b4d      	ldr	r3, [pc, #308]	@ (810f218 <tcp_slowtmr+0x598>)
 810f0e2:	f240 526d 	movw	r2, #1389	@ 0x56d
 810f0e6:	494d      	ldr	r1, [pc, #308]	@ (810f21c <tcp_slowtmr+0x59c>)
 810f0e8:	484d      	ldr	r0, [pc, #308]	@ (810f220 <tcp_slowtmr+0x5a0>)
 810f0ea:	f008 f9a5 	bl	8117438 <iprintf>
        prev->next = pcb->next;
 810f0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f0f0:	68da      	ldr	r2, [r3, #12]
 810f0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0f4:	60da      	str	r2, [r3, #12]
 810f0f6:	e00f      	b.n	810f118 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 810f0f8:	4b46      	ldr	r3, [pc, #280]	@ (810f214 <tcp_slowtmr+0x594>)
 810f0fa:	681b      	ldr	r3, [r3, #0]
 810f0fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f0fe:	429a      	cmp	r2, r3
 810f100:	d006      	beq.n	810f110 <tcp_slowtmr+0x490>
 810f102:	4b45      	ldr	r3, [pc, #276]	@ (810f218 <tcp_slowtmr+0x598>)
 810f104:	f240 5271 	movw	r2, #1393	@ 0x571
 810f108:	4946      	ldr	r1, [pc, #280]	@ (810f224 <tcp_slowtmr+0x5a4>)
 810f10a:	4845      	ldr	r0, [pc, #276]	@ (810f220 <tcp_slowtmr+0x5a0>)
 810f10c:	f008 f994 	bl	8117438 <iprintf>
        tcp_active_pcbs = pcb->next;
 810f110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f112:	68db      	ldr	r3, [r3, #12]
 810f114:	4a3f      	ldr	r2, [pc, #252]	@ (810f214 <tcp_slowtmr+0x594>)
 810f116:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 810f118:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 810f11c:	2b00      	cmp	r3, #0
 810f11e:	d013      	beq.n	810f148 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 810f120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f122:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 810f124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f126:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 810f128:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 810f12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f12c:	3304      	adds	r3, #4
 810f12e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f130:	8ad2      	ldrh	r2, [r2, #22]
 810f132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810f134:	8b09      	ldrh	r1, [r1, #24]
 810f136:	9102      	str	r1, [sp, #8]
 810f138:	9201      	str	r2, [sp, #4]
 810f13a:	9300      	str	r3, [sp, #0]
 810f13c:	462b      	mov	r3, r5
 810f13e:	4622      	mov	r2, r4
 810f140:	4601      	mov	r1, r0
 810f142:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f144:	f004 fe16 	bl	8113d74 <tcp_rst>
      err_arg = pcb->callback_arg;
 810f148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f14a:	691b      	ldr	r3, [r3, #16]
 810f14c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 810f14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f150:	7d1b      	ldrb	r3, [r3, #20]
 810f152:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 810f154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f156:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 810f158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f15a:	68db      	ldr	r3, [r3, #12]
 810f15c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 810f15e:	6838      	ldr	r0, [r7, #0]
 810f160:	f7ff f892 	bl	810e288 <tcp_free>
      tcp_active_pcbs_changed = 0;
 810f164:	4b30      	ldr	r3, [pc, #192]	@ (810f228 <tcp_slowtmr+0x5a8>)
 810f166:	2200      	movs	r2, #0
 810f168:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 810f16a:	68fb      	ldr	r3, [r7, #12]
 810f16c:	2b00      	cmp	r3, #0
 810f16e:	d004      	beq.n	810f17a <tcp_slowtmr+0x4fa>
 810f170:	68fb      	ldr	r3, [r7, #12]
 810f172:	f06f 010c 	mvn.w	r1, #12
 810f176:	68b8      	ldr	r0, [r7, #8]
 810f178:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 810f17a:	4b2b      	ldr	r3, [pc, #172]	@ (810f228 <tcp_slowtmr+0x5a8>)
 810f17c:	781b      	ldrb	r3, [r3, #0]
 810f17e:	2b00      	cmp	r3, #0
 810f180:	d037      	beq.n	810f1f2 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 810f182:	e590      	b.n	810eca6 <tcp_slowtmr+0x26>
      prev = pcb;
 810f184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f186:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 810f188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f18a:	68db      	ldr	r3, [r3, #12]
 810f18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 810f18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f190:	7f1b      	ldrb	r3, [r3, #28]
 810f192:	3301      	adds	r3, #1
 810f194:	b2da      	uxtb	r2, r3
 810f196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f198:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 810f19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f19c:	7f1a      	ldrb	r2, [r3, #28]
 810f19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1a0:	7f5b      	ldrb	r3, [r3, #29]
 810f1a2:	429a      	cmp	r2, r3
 810f1a4:	d325      	bcc.n	810f1f2 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 810f1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1a8:	2200      	movs	r2, #0
 810f1aa:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 810f1ac:	4b1e      	ldr	r3, [pc, #120]	@ (810f228 <tcp_slowtmr+0x5a8>)
 810f1ae:	2200      	movs	r2, #0
 810f1b0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 810f1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810f1b8:	2b00      	cmp	r3, #0
 810f1ba:	d00b      	beq.n	810f1d4 <tcp_slowtmr+0x554>
 810f1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f1be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810f1c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810f1c4:	6912      	ldr	r2, [r2, #16]
 810f1c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810f1c8:	4610      	mov	r0, r2
 810f1ca:	4798      	blx	r3
 810f1cc:	4603      	mov	r3, r0
 810f1ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 810f1d2:	e002      	b.n	810f1da <tcp_slowtmr+0x55a>
 810f1d4:	2300      	movs	r3, #0
 810f1d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 810f1da:	4b13      	ldr	r3, [pc, #76]	@ (810f228 <tcp_slowtmr+0x5a8>)
 810f1dc:	781b      	ldrb	r3, [r3, #0]
 810f1de:	2b00      	cmp	r3, #0
 810f1e0:	f47f ad60 	bne.w	810eca4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 810f1e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 810f1e8:	2b00      	cmp	r3, #0
 810f1ea:	d102      	bne.n	810f1f2 <tcp_slowtmr+0x572>
          tcp_output(prev);
 810f1ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f1ee:	f004 f80d 	bl	811320c <tcp_output>
  while (pcb != NULL) {
 810f1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f1f4:	2b00      	cmp	r3, #0
 810f1f6:	f47f ad5c 	bne.w	810ecb2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 810f1fa:	2300      	movs	r3, #0
 810f1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 810f1fe:	4b0b      	ldr	r3, [pc, #44]	@ (810f22c <tcp_slowtmr+0x5ac>)
 810f200:	681b      	ldr	r3, [r3, #0]
 810f202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 810f204:	e067      	b.n	810f2d6 <tcp_slowtmr+0x656>
 810f206:	bf00      	nop
 810f208:	100176f8 	.word	0x100176f8
 810f20c:	10624dd3 	.word	0x10624dd3
 810f210:	000124f8 	.word	0x000124f8
 810f214:	10017704 	.word	0x10017704
 810f218:	0811d5dc 	.word	0x0811d5dc
 810f21c:	0811da44 	.word	0x0811da44
 810f220:	0811d650 	.word	0x0811d650
 810f224:	0811da70 	.word	0x0811da70
 810f228:	1001770c 	.word	0x1001770c
 810f22c:	10017708 	.word	0x10017708
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 810f230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f232:	7d1b      	ldrb	r3, [r3, #20]
 810f234:	2b0a      	cmp	r3, #10
 810f236:	d006      	beq.n	810f246 <tcp_slowtmr+0x5c6>
 810f238:	4b2b      	ldr	r3, [pc, #172]	@ (810f2e8 <tcp_slowtmr+0x668>)
 810f23a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 810f23e:	492b      	ldr	r1, [pc, #172]	@ (810f2ec <tcp_slowtmr+0x66c>)
 810f240:	482b      	ldr	r0, [pc, #172]	@ (810f2f0 <tcp_slowtmr+0x670>)
 810f242:	f008 f8f9 	bl	8117438 <iprintf>
    pcb_remove = 0;
 810f246:	2300      	movs	r3, #0
 810f248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 810f24c:	4b29      	ldr	r3, [pc, #164]	@ (810f2f4 <tcp_slowtmr+0x674>)
 810f24e:	681a      	ldr	r2, [r3, #0]
 810f250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f252:	6a1b      	ldr	r3, [r3, #32]
 810f254:	1ad3      	subs	r3, r2, r3
 810f256:	2bf0      	cmp	r3, #240	@ 0xf0
 810f258:	d904      	bls.n	810f264 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 810f25a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f25e:	3301      	adds	r3, #1
 810f260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 810f264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f268:	2b00      	cmp	r3, #0
 810f26a:	d02f      	beq.n	810f2cc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 810f26c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f26e:	f000 fb67 	bl	810f940 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 810f272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f274:	2b00      	cmp	r3, #0
 810f276:	d010      	beq.n	810f29a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 810f278:	4b1f      	ldr	r3, [pc, #124]	@ (810f2f8 <tcp_slowtmr+0x678>)
 810f27a:	681b      	ldr	r3, [r3, #0]
 810f27c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f27e:	429a      	cmp	r2, r3
 810f280:	d106      	bne.n	810f290 <tcp_slowtmr+0x610>
 810f282:	4b19      	ldr	r3, [pc, #100]	@ (810f2e8 <tcp_slowtmr+0x668>)
 810f284:	f240 52af 	movw	r2, #1455	@ 0x5af
 810f288:	491c      	ldr	r1, [pc, #112]	@ (810f2fc <tcp_slowtmr+0x67c>)
 810f28a:	4819      	ldr	r0, [pc, #100]	@ (810f2f0 <tcp_slowtmr+0x670>)
 810f28c:	f008 f8d4 	bl	8117438 <iprintf>
        prev->next = pcb->next;
 810f290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f292:	68da      	ldr	r2, [r3, #12]
 810f294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f296:	60da      	str	r2, [r3, #12]
 810f298:	e00f      	b.n	810f2ba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 810f29a:	4b17      	ldr	r3, [pc, #92]	@ (810f2f8 <tcp_slowtmr+0x678>)
 810f29c:	681b      	ldr	r3, [r3, #0]
 810f29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f2a0:	429a      	cmp	r2, r3
 810f2a2:	d006      	beq.n	810f2b2 <tcp_slowtmr+0x632>
 810f2a4:	4b10      	ldr	r3, [pc, #64]	@ (810f2e8 <tcp_slowtmr+0x668>)
 810f2a6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 810f2aa:	4915      	ldr	r1, [pc, #84]	@ (810f300 <tcp_slowtmr+0x680>)
 810f2ac:	4810      	ldr	r0, [pc, #64]	@ (810f2f0 <tcp_slowtmr+0x670>)
 810f2ae:	f008 f8c3 	bl	8117438 <iprintf>
        tcp_tw_pcbs = pcb->next;
 810f2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f2b4:	68db      	ldr	r3, [r3, #12]
 810f2b6:	4a10      	ldr	r2, [pc, #64]	@ (810f2f8 <tcp_slowtmr+0x678>)
 810f2b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 810f2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f2bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 810f2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f2c0:	68db      	ldr	r3, [r3, #12]
 810f2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 810f2c4:	69f8      	ldr	r0, [r7, #28]
 810f2c6:	f7fe ffdf 	bl	810e288 <tcp_free>
 810f2ca:	e004      	b.n	810f2d6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 810f2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 810f2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f2d2:	68db      	ldr	r3, [r3, #12]
 810f2d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 810f2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f2d8:	2b00      	cmp	r3, #0
 810f2da:	d1a9      	bne.n	810f230 <tcp_slowtmr+0x5b0>
    }
  }
}
 810f2dc:	bf00      	nop
 810f2de:	bf00      	nop
 810f2e0:	3730      	adds	r7, #48	@ 0x30
 810f2e2:	46bd      	mov	sp, r7
 810f2e4:	bdb0      	pop	{r4, r5, r7, pc}
 810f2e6:	bf00      	nop
 810f2e8:	0811d5dc 	.word	0x0811d5dc
 810f2ec:	0811da9c 	.word	0x0811da9c
 810f2f0:	0811d650 	.word	0x0811d650
 810f2f4:	100176f8 	.word	0x100176f8
 810f2f8:	10017708 	.word	0x10017708
 810f2fc:	0811dacc 	.word	0x0811dacc
 810f300:	0811daf4 	.word	0x0811daf4

0810f304 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 810f304:	b580      	push	{r7, lr}
 810f306:	b082      	sub	sp, #8
 810f308:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 810f30a:	4b2d      	ldr	r3, [pc, #180]	@ (810f3c0 <tcp_fasttmr+0xbc>)
 810f30c:	781b      	ldrb	r3, [r3, #0]
 810f30e:	3301      	adds	r3, #1
 810f310:	b2da      	uxtb	r2, r3
 810f312:	4b2b      	ldr	r3, [pc, #172]	@ (810f3c0 <tcp_fasttmr+0xbc>)
 810f314:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 810f316:	4b2b      	ldr	r3, [pc, #172]	@ (810f3c4 <tcp_fasttmr+0xc0>)
 810f318:	681b      	ldr	r3, [r3, #0]
 810f31a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 810f31c:	e048      	b.n	810f3b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 810f31e:	687b      	ldr	r3, [r7, #4]
 810f320:	7f9a      	ldrb	r2, [r3, #30]
 810f322:	4b27      	ldr	r3, [pc, #156]	@ (810f3c0 <tcp_fasttmr+0xbc>)
 810f324:	781b      	ldrb	r3, [r3, #0]
 810f326:	429a      	cmp	r2, r3
 810f328:	d03f      	beq.n	810f3aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 810f32a:	4b25      	ldr	r3, [pc, #148]	@ (810f3c0 <tcp_fasttmr+0xbc>)
 810f32c:	781a      	ldrb	r2, [r3, #0]
 810f32e:	687b      	ldr	r3, [r7, #4]
 810f330:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 810f332:	687b      	ldr	r3, [r7, #4]
 810f334:	8b5b      	ldrh	r3, [r3, #26]
 810f336:	f003 0301 	and.w	r3, r3, #1
 810f33a:	2b00      	cmp	r3, #0
 810f33c:	d010      	beq.n	810f360 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 810f33e:	687b      	ldr	r3, [r7, #4]
 810f340:	8b5b      	ldrh	r3, [r3, #26]
 810f342:	f043 0302 	orr.w	r3, r3, #2
 810f346:	b29a      	uxth	r2, r3
 810f348:	687b      	ldr	r3, [r7, #4]
 810f34a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 810f34c:	6878      	ldr	r0, [r7, #4]
 810f34e:	f003 ff5d 	bl	811320c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 810f352:	687b      	ldr	r3, [r7, #4]
 810f354:	8b5b      	ldrh	r3, [r3, #26]
 810f356:	f023 0303 	bic.w	r3, r3, #3
 810f35a:	b29a      	uxth	r2, r3
 810f35c:	687b      	ldr	r3, [r7, #4]
 810f35e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 810f360:	687b      	ldr	r3, [r7, #4]
 810f362:	8b5b      	ldrh	r3, [r3, #26]
 810f364:	f003 0308 	and.w	r3, r3, #8
 810f368:	2b00      	cmp	r3, #0
 810f36a:	d009      	beq.n	810f380 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 810f36c:	687b      	ldr	r3, [r7, #4]
 810f36e:	8b5b      	ldrh	r3, [r3, #26]
 810f370:	f023 0308 	bic.w	r3, r3, #8
 810f374:	b29a      	uxth	r2, r3
 810f376:	687b      	ldr	r3, [r7, #4]
 810f378:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 810f37a:	6878      	ldr	r0, [r7, #4]
 810f37c:	f7ff f918 	bl	810e5b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 810f380:	687b      	ldr	r3, [r7, #4]
 810f382:	68db      	ldr	r3, [r3, #12]
 810f384:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 810f386:	687b      	ldr	r3, [r7, #4]
 810f388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810f38a:	2b00      	cmp	r3, #0
 810f38c:	d00a      	beq.n	810f3a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 810f38e:	4b0e      	ldr	r3, [pc, #56]	@ (810f3c8 <tcp_fasttmr+0xc4>)
 810f390:	2200      	movs	r2, #0
 810f392:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 810f394:	6878      	ldr	r0, [r7, #4]
 810f396:	f000 f819 	bl	810f3cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 810f39a:	4b0b      	ldr	r3, [pc, #44]	@ (810f3c8 <tcp_fasttmr+0xc4>)
 810f39c:	781b      	ldrb	r3, [r3, #0]
 810f39e:	2b00      	cmp	r3, #0
 810f3a0:	d000      	beq.n	810f3a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 810f3a2:	e7b8      	b.n	810f316 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 810f3a4:	683b      	ldr	r3, [r7, #0]
 810f3a6:	607b      	str	r3, [r7, #4]
 810f3a8:	e002      	b.n	810f3b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 810f3aa:	687b      	ldr	r3, [r7, #4]
 810f3ac:	68db      	ldr	r3, [r3, #12]
 810f3ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 810f3b0:	687b      	ldr	r3, [r7, #4]
 810f3b2:	2b00      	cmp	r3, #0
 810f3b4:	d1b3      	bne.n	810f31e <tcp_fasttmr+0x1a>
    }
  }
}
 810f3b6:	bf00      	nop
 810f3b8:	bf00      	nop
 810f3ba:	3708      	adds	r7, #8
 810f3bc:	46bd      	mov	sp, r7
 810f3be:	bd80      	pop	{r7, pc}
 810f3c0:	1001770e 	.word	0x1001770e
 810f3c4:	10017704 	.word	0x10017704
 810f3c8:	1001770c 	.word	0x1001770c

0810f3cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 810f3cc:	b590      	push	{r4, r7, lr}
 810f3ce:	b085      	sub	sp, #20
 810f3d0:	af00      	add	r7, sp, #0
 810f3d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 810f3d4:	687b      	ldr	r3, [r7, #4]
 810f3d6:	2b00      	cmp	r3, #0
 810f3d8:	d109      	bne.n	810f3ee <tcp_process_refused_data+0x22>
 810f3da:	4b37      	ldr	r3, [pc, #220]	@ (810f4b8 <tcp_process_refused_data+0xec>)
 810f3dc:	f240 6209 	movw	r2, #1545	@ 0x609
 810f3e0:	4936      	ldr	r1, [pc, #216]	@ (810f4bc <tcp_process_refused_data+0xf0>)
 810f3e2:	4837      	ldr	r0, [pc, #220]	@ (810f4c0 <tcp_process_refused_data+0xf4>)
 810f3e4:	f008 f828 	bl	8117438 <iprintf>
 810f3e8:	f06f 030f 	mvn.w	r3, #15
 810f3ec:	e060      	b.n	810f4b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 810f3ee:	687b      	ldr	r3, [r7, #4]
 810f3f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810f3f2:	7b5b      	ldrb	r3, [r3, #13]
 810f3f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 810f3f6:	687b      	ldr	r3, [r7, #4]
 810f3f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810f3fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 810f3fc:	687b      	ldr	r3, [r7, #4]
 810f3fe:	2200      	movs	r2, #0
 810f400:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 810f402:	687b      	ldr	r3, [r7, #4]
 810f404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810f408:	2b00      	cmp	r3, #0
 810f40a:	d00b      	beq.n	810f424 <tcp_process_refused_data+0x58>
 810f40c:	687b      	ldr	r3, [r7, #4]
 810f40e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 810f412:	687b      	ldr	r3, [r7, #4]
 810f414:	6918      	ldr	r0, [r3, #16]
 810f416:	2300      	movs	r3, #0
 810f418:	68ba      	ldr	r2, [r7, #8]
 810f41a:	6879      	ldr	r1, [r7, #4]
 810f41c:	47a0      	blx	r4
 810f41e:	4603      	mov	r3, r0
 810f420:	73fb      	strb	r3, [r7, #15]
 810f422:	e007      	b.n	810f434 <tcp_process_refused_data+0x68>
 810f424:	2300      	movs	r3, #0
 810f426:	68ba      	ldr	r2, [r7, #8]
 810f428:	6879      	ldr	r1, [r7, #4]
 810f42a:	2000      	movs	r0, #0
 810f42c:	f000 f8a4 	bl	810f578 <tcp_recv_null>
 810f430:	4603      	mov	r3, r0
 810f432:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 810f434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810f438:	2b00      	cmp	r3, #0
 810f43a:	d12a      	bne.n	810f492 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 810f43c:	7bbb      	ldrb	r3, [r7, #14]
 810f43e:	f003 0320 	and.w	r3, r3, #32
 810f442:	2b00      	cmp	r3, #0
 810f444:	d033      	beq.n	810f4ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 810f446:	687b      	ldr	r3, [r7, #4]
 810f448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810f44a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 810f44e:	d005      	beq.n	810f45c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 810f450:	687b      	ldr	r3, [r7, #4]
 810f452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810f454:	3301      	adds	r3, #1
 810f456:	b29a      	uxth	r2, r3
 810f458:	687b      	ldr	r3, [r7, #4]
 810f45a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 810f45c:	687b      	ldr	r3, [r7, #4]
 810f45e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810f462:	2b00      	cmp	r3, #0
 810f464:	d00b      	beq.n	810f47e <tcp_process_refused_data+0xb2>
 810f466:	687b      	ldr	r3, [r7, #4]
 810f468:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 810f46c:	687b      	ldr	r3, [r7, #4]
 810f46e:	6918      	ldr	r0, [r3, #16]
 810f470:	2300      	movs	r3, #0
 810f472:	2200      	movs	r2, #0
 810f474:	6879      	ldr	r1, [r7, #4]
 810f476:	47a0      	blx	r4
 810f478:	4603      	mov	r3, r0
 810f47a:	73fb      	strb	r3, [r7, #15]
 810f47c:	e001      	b.n	810f482 <tcp_process_refused_data+0xb6>
 810f47e:	2300      	movs	r3, #0
 810f480:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 810f482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810f486:	f113 0f0d 	cmn.w	r3, #13
 810f48a:	d110      	bne.n	810f4ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 810f48c:	f06f 030c 	mvn.w	r3, #12
 810f490:	e00e      	b.n	810f4b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 810f492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810f496:	f113 0f0d 	cmn.w	r3, #13
 810f49a:	d102      	bne.n	810f4a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 810f49c:	f06f 030c 	mvn.w	r3, #12
 810f4a0:	e006      	b.n	810f4b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 810f4a2:	687b      	ldr	r3, [r7, #4]
 810f4a4:	68ba      	ldr	r2, [r7, #8]
 810f4a6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 810f4a8:	f06f 0304 	mvn.w	r3, #4
 810f4ac:	e000      	b.n	810f4b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 810f4ae:	2300      	movs	r3, #0
}
 810f4b0:	4618      	mov	r0, r3
 810f4b2:	3714      	adds	r7, #20
 810f4b4:	46bd      	mov	sp, r7
 810f4b6:	bd90      	pop	{r4, r7, pc}
 810f4b8:	0811d5dc 	.word	0x0811d5dc
 810f4bc:	0811db1c 	.word	0x0811db1c
 810f4c0:	0811d650 	.word	0x0811d650

0810f4c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 810f4c4:	b580      	push	{r7, lr}
 810f4c6:	b084      	sub	sp, #16
 810f4c8:	af00      	add	r7, sp, #0
 810f4ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 810f4cc:	e007      	b.n	810f4de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 810f4ce:	687b      	ldr	r3, [r7, #4]
 810f4d0:	681b      	ldr	r3, [r3, #0]
 810f4d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 810f4d4:	6878      	ldr	r0, [r7, #4]
 810f4d6:	f000 f80a 	bl	810f4ee <tcp_seg_free>
    seg = next;
 810f4da:	68fb      	ldr	r3, [r7, #12]
 810f4dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 810f4de:	687b      	ldr	r3, [r7, #4]
 810f4e0:	2b00      	cmp	r3, #0
 810f4e2:	d1f4      	bne.n	810f4ce <tcp_segs_free+0xa>
  }
}
 810f4e4:	bf00      	nop
 810f4e6:	bf00      	nop
 810f4e8:	3710      	adds	r7, #16
 810f4ea:	46bd      	mov	sp, r7
 810f4ec:	bd80      	pop	{r7, pc}

0810f4ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 810f4ee:	b580      	push	{r7, lr}
 810f4f0:	b082      	sub	sp, #8
 810f4f2:	af00      	add	r7, sp, #0
 810f4f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 810f4f6:	687b      	ldr	r3, [r7, #4]
 810f4f8:	2b00      	cmp	r3, #0
 810f4fa:	d00c      	beq.n	810f516 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 810f4fc:	687b      	ldr	r3, [r7, #4]
 810f4fe:	685b      	ldr	r3, [r3, #4]
 810f500:	2b00      	cmp	r3, #0
 810f502:	d004      	beq.n	810f50e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 810f504:	687b      	ldr	r3, [r7, #4]
 810f506:	685b      	ldr	r3, [r3, #4]
 810f508:	4618      	mov	r0, r3
 810f50a:	f7fe fc1d 	bl	810dd48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 810f50e:	6879      	ldr	r1, [r7, #4]
 810f510:	2003      	movs	r0, #3
 810f512:	f7fd fda3 	bl	810d05c <memp_free>
  }
}
 810f516:	bf00      	nop
 810f518:	3708      	adds	r7, #8
 810f51a:	46bd      	mov	sp, r7
 810f51c:	bd80      	pop	{r7, pc}
	...

0810f520 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 810f520:	b580      	push	{r7, lr}
 810f522:	b084      	sub	sp, #16
 810f524:	af00      	add	r7, sp, #0
 810f526:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 810f528:	687b      	ldr	r3, [r7, #4]
 810f52a:	2b00      	cmp	r3, #0
 810f52c:	d106      	bne.n	810f53c <tcp_seg_copy+0x1c>
 810f52e:	4b0f      	ldr	r3, [pc, #60]	@ (810f56c <tcp_seg_copy+0x4c>)
 810f530:	f240 6282 	movw	r2, #1666	@ 0x682
 810f534:	490e      	ldr	r1, [pc, #56]	@ (810f570 <tcp_seg_copy+0x50>)
 810f536:	480f      	ldr	r0, [pc, #60]	@ (810f574 <tcp_seg_copy+0x54>)
 810f538:	f007 ff7e 	bl	8117438 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 810f53c:	2003      	movs	r0, #3
 810f53e:	f7fd fd1d 	bl	810cf7c <memp_malloc>
 810f542:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 810f544:	68fb      	ldr	r3, [r7, #12]
 810f546:	2b00      	cmp	r3, #0
 810f548:	d101      	bne.n	810f54e <tcp_seg_copy+0x2e>
    return NULL;
 810f54a:	2300      	movs	r3, #0
 810f54c:	e00a      	b.n	810f564 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 810f54e:	2210      	movs	r2, #16
 810f550:	6879      	ldr	r1, [r7, #4]
 810f552:	68f8      	ldr	r0, [r7, #12]
 810f554:	f008 f9ef 	bl	8117936 <memcpy>
  pbuf_ref(cseg->p);
 810f558:	68fb      	ldr	r3, [r7, #12]
 810f55a:	685b      	ldr	r3, [r3, #4]
 810f55c:	4618      	mov	r0, r3
 810f55e:	f7fe fc93 	bl	810de88 <pbuf_ref>
  return cseg;
 810f562:	68fb      	ldr	r3, [r7, #12]
}
 810f564:	4618      	mov	r0, r3
 810f566:	3710      	adds	r7, #16
 810f568:	46bd      	mov	sp, r7
 810f56a:	bd80      	pop	{r7, pc}
 810f56c:	0811d5dc 	.word	0x0811d5dc
 810f570:	0811db60 	.word	0x0811db60
 810f574:	0811d650 	.word	0x0811d650

0810f578 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 810f578:	b580      	push	{r7, lr}
 810f57a:	b084      	sub	sp, #16
 810f57c:	af00      	add	r7, sp, #0
 810f57e:	60f8      	str	r0, [r7, #12]
 810f580:	60b9      	str	r1, [r7, #8]
 810f582:	607a      	str	r2, [r7, #4]
 810f584:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 810f586:	68bb      	ldr	r3, [r7, #8]
 810f588:	2b00      	cmp	r3, #0
 810f58a:	d109      	bne.n	810f5a0 <tcp_recv_null+0x28>
 810f58c:	4b12      	ldr	r3, [pc, #72]	@ (810f5d8 <tcp_recv_null+0x60>)
 810f58e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 810f592:	4912      	ldr	r1, [pc, #72]	@ (810f5dc <tcp_recv_null+0x64>)
 810f594:	4812      	ldr	r0, [pc, #72]	@ (810f5e0 <tcp_recv_null+0x68>)
 810f596:	f007 ff4f 	bl	8117438 <iprintf>
 810f59a:	f06f 030f 	mvn.w	r3, #15
 810f59e:	e016      	b.n	810f5ce <tcp_recv_null+0x56>

  if (p != NULL) {
 810f5a0:	687b      	ldr	r3, [r7, #4]
 810f5a2:	2b00      	cmp	r3, #0
 810f5a4:	d009      	beq.n	810f5ba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 810f5a6:	687b      	ldr	r3, [r7, #4]
 810f5a8:	891b      	ldrh	r3, [r3, #8]
 810f5aa:	4619      	mov	r1, r3
 810f5ac:	68b8      	ldr	r0, [r7, #8]
 810f5ae:	f7ff f9b9 	bl	810e924 <tcp_recved>
    pbuf_free(p);
 810f5b2:	6878      	ldr	r0, [r7, #4]
 810f5b4:	f7fe fbc8 	bl	810dd48 <pbuf_free>
 810f5b8:	e008      	b.n	810f5cc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 810f5ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810f5be:	2b00      	cmp	r3, #0
 810f5c0:	d104      	bne.n	810f5cc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 810f5c2:	68b8      	ldr	r0, [r7, #8]
 810f5c4:	f7ff f85e 	bl	810e684 <tcp_close>
 810f5c8:	4603      	mov	r3, r0
 810f5ca:	e000      	b.n	810f5ce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 810f5cc:	2300      	movs	r3, #0
}
 810f5ce:	4618      	mov	r0, r3
 810f5d0:	3710      	adds	r7, #16
 810f5d2:	46bd      	mov	sp, r7
 810f5d4:	bd80      	pop	{r7, pc}
 810f5d6:	bf00      	nop
 810f5d8:	0811d5dc 	.word	0x0811d5dc
 810f5dc:	0811db7c 	.word	0x0811db7c
 810f5e0:	0811d650 	.word	0x0811d650

0810f5e4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 810f5e4:	b580      	push	{r7, lr}
 810f5e6:	b086      	sub	sp, #24
 810f5e8:	af00      	add	r7, sp, #0
 810f5ea:	4603      	mov	r3, r0
 810f5ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 810f5ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810f5f2:	2b00      	cmp	r3, #0
 810f5f4:	db01      	blt.n	810f5fa <tcp_kill_prio+0x16>
 810f5f6:	79fb      	ldrb	r3, [r7, #7]
 810f5f8:	e000      	b.n	810f5fc <tcp_kill_prio+0x18>
 810f5fa:	237f      	movs	r3, #127	@ 0x7f
 810f5fc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 810f5fe:	7afb      	ldrb	r3, [r7, #11]
 810f600:	2b00      	cmp	r3, #0
 810f602:	d034      	beq.n	810f66e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 810f604:	7afb      	ldrb	r3, [r7, #11]
 810f606:	3b01      	subs	r3, #1
 810f608:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 810f60a:	2300      	movs	r3, #0
 810f60c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 810f60e:	2300      	movs	r3, #0
 810f610:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 810f612:	4b19      	ldr	r3, [pc, #100]	@ (810f678 <tcp_kill_prio+0x94>)
 810f614:	681b      	ldr	r3, [r3, #0]
 810f616:	617b      	str	r3, [r7, #20]
 810f618:	e01f      	b.n	810f65a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 810f61a:	697b      	ldr	r3, [r7, #20]
 810f61c:	7d5b      	ldrb	r3, [r3, #21]
 810f61e:	7afa      	ldrb	r2, [r7, #11]
 810f620:	429a      	cmp	r2, r3
 810f622:	d80c      	bhi.n	810f63e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 810f624:	697b      	ldr	r3, [r7, #20]
 810f626:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 810f628:	7afa      	ldrb	r2, [r7, #11]
 810f62a:	429a      	cmp	r2, r3
 810f62c:	d112      	bne.n	810f654 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 810f62e:	4b13      	ldr	r3, [pc, #76]	@ (810f67c <tcp_kill_prio+0x98>)
 810f630:	681a      	ldr	r2, [r3, #0]
 810f632:	697b      	ldr	r3, [r7, #20]
 810f634:	6a1b      	ldr	r3, [r3, #32]
 810f636:	1ad3      	subs	r3, r2, r3
 810f638:	68fa      	ldr	r2, [r7, #12]
 810f63a:	429a      	cmp	r2, r3
 810f63c:	d80a      	bhi.n	810f654 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 810f63e:	4b0f      	ldr	r3, [pc, #60]	@ (810f67c <tcp_kill_prio+0x98>)
 810f640:	681a      	ldr	r2, [r3, #0]
 810f642:	697b      	ldr	r3, [r7, #20]
 810f644:	6a1b      	ldr	r3, [r3, #32]
 810f646:	1ad3      	subs	r3, r2, r3
 810f648:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 810f64a:	697b      	ldr	r3, [r7, #20]
 810f64c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 810f64e:	697b      	ldr	r3, [r7, #20]
 810f650:	7d5b      	ldrb	r3, [r3, #21]
 810f652:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 810f654:	697b      	ldr	r3, [r7, #20]
 810f656:	68db      	ldr	r3, [r3, #12]
 810f658:	617b      	str	r3, [r7, #20]
 810f65a:	697b      	ldr	r3, [r7, #20]
 810f65c:	2b00      	cmp	r3, #0
 810f65e:	d1dc      	bne.n	810f61a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 810f660:	693b      	ldr	r3, [r7, #16]
 810f662:	2b00      	cmp	r3, #0
 810f664:	d004      	beq.n	810f670 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 810f666:	6938      	ldr	r0, [r7, #16]
 810f668:	f7ff f8f6 	bl	810e858 <tcp_abort>
 810f66c:	e000      	b.n	810f670 <tcp_kill_prio+0x8c>
    return;
 810f66e:	bf00      	nop
  }
}
 810f670:	3718      	adds	r7, #24
 810f672:	46bd      	mov	sp, r7
 810f674:	bd80      	pop	{r7, pc}
 810f676:	bf00      	nop
 810f678:	10017704 	.word	0x10017704
 810f67c:	100176f8 	.word	0x100176f8

0810f680 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 810f680:	b580      	push	{r7, lr}
 810f682:	b086      	sub	sp, #24
 810f684:	af00      	add	r7, sp, #0
 810f686:	4603      	mov	r3, r0
 810f688:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 810f68a:	79fb      	ldrb	r3, [r7, #7]
 810f68c:	2b08      	cmp	r3, #8
 810f68e:	d009      	beq.n	810f6a4 <tcp_kill_state+0x24>
 810f690:	79fb      	ldrb	r3, [r7, #7]
 810f692:	2b09      	cmp	r3, #9
 810f694:	d006      	beq.n	810f6a4 <tcp_kill_state+0x24>
 810f696:	4b1a      	ldr	r3, [pc, #104]	@ (810f700 <tcp_kill_state+0x80>)
 810f698:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 810f69c:	4919      	ldr	r1, [pc, #100]	@ (810f704 <tcp_kill_state+0x84>)
 810f69e:	481a      	ldr	r0, [pc, #104]	@ (810f708 <tcp_kill_state+0x88>)
 810f6a0:	f007 feca 	bl	8117438 <iprintf>

  inactivity = 0;
 810f6a4:	2300      	movs	r3, #0
 810f6a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 810f6a8:	2300      	movs	r3, #0
 810f6aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 810f6ac:	4b17      	ldr	r3, [pc, #92]	@ (810f70c <tcp_kill_state+0x8c>)
 810f6ae:	681b      	ldr	r3, [r3, #0]
 810f6b0:	617b      	str	r3, [r7, #20]
 810f6b2:	e017      	b.n	810f6e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 810f6b4:	697b      	ldr	r3, [r7, #20]
 810f6b6:	7d1b      	ldrb	r3, [r3, #20]
 810f6b8:	79fa      	ldrb	r2, [r7, #7]
 810f6ba:	429a      	cmp	r2, r3
 810f6bc:	d10f      	bne.n	810f6de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 810f6be:	4b14      	ldr	r3, [pc, #80]	@ (810f710 <tcp_kill_state+0x90>)
 810f6c0:	681a      	ldr	r2, [r3, #0]
 810f6c2:	697b      	ldr	r3, [r7, #20]
 810f6c4:	6a1b      	ldr	r3, [r3, #32]
 810f6c6:	1ad3      	subs	r3, r2, r3
 810f6c8:	68fa      	ldr	r2, [r7, #12]
 810f6ca:	429a      	cmp	r2, r3
 810f6cc:	d807      	bhi.n	810f6de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 810f6ce:	4b10      	ldr	r3, [pc, #64]	@ (810f710 <tcp_kill_state+0x90>)
 810f6d0:	681a      	ldr	r2, [r3, #0]
 810f6d2:	697b      	ldr	r3, [r7, #20]
 810f6d4:	6a1b      	ldr	r3, [r3, #32]
 810f6d6:	1ad3      	subs	r3, r2, r3
 810f6d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 810f6da:	697b      	ldr	r3, [r7, #20]
 810f6dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 810f6de:	697b      	ldr	r3, [r7, #20]
 810f6e0:	68db      	ldr	r3, [r3, #12]
 810f6e2:	617b      	str	r3, [r7, #20]
 810f6e4:	697b      	ldr	r3, [r7, #20]
 810f6e6:	2b00      	cmp	r3, #0
 810f6e8:	d1e4      	bne.n	810f6b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 810f6ea:	693b      	ldr	r3, [r7, #16]
 810f6ec:	2b00      	cmp	r3, #0
 810f6ee:	d003      	beq.n	810f6f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 810f6f0:	2100      	movs	r1, #0
 810f6f2:	6938      	ldr	r0, [r7, #16]
 810f6f4:	f7fe fff2 	bl	810e6dc <tcp_abandon>
  }
}
 810f6f8:	bf00      	nop
 810f6fa:	3718      	adds	r7, #24
 810f6fc:	46bd      	mov	sp, r7
 810f6fe:	bd80      	pop	{r7, pc}
 810f700:	0811d5dc 	.word	0x0811d5dc
 810f704:	0811db98 	.word	0x0811db98
 810f708:	0811d650 	.word	0x0811d650
 810f70c:	10017704 	.word	0x10017704
 810f710:	100176f8 	.word	0x100176f8

0810f714 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 810f714:	b580      	push	{r7, lr}
 810f716:	b084      	sub	sp, #16
 810f718:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 810f71a:	2300      	movs	r3, #0
 810f71c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 810f71e:	2300      	movs	r3, #0
 810f720:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 810f722:	4b12      	ldr	r3, [pc, #72]	@ (810f76c <tcp_kill_timewait+0x58>)
 810f724:	681b      	ldr	r3, [r3, #0]
 810f726:	60fb      	str	r3, [r7, #12]
 810f728:	e012      	b.n	810f750 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 810f72a:	4b11      	ldr	r3, [pc, #68]	@ (810f770 <tcp_kill_timewait+0x5c>)
 810f72c:	681a      	ldr	r2, [r3, #0]
 810f72e:	68fb      	ldr	r3, [r7, #12]
 810f730:	6a1b      	ldr	r3, [r3, #32]
 810f732:	1ad3      	subs	r3, r2, r3
 810f734:	687a      	ldr	r2, [r7, #4]
 810f736:	429a      	cmp	r2, r3
 810f738:	d807      	bhi.n	810f74a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 810f73a:	4b0d      	ldr	r3, [pc, #52]	@ (810f770 <tcp_kill_timewait+0x5c>)
 810f73c:	681a      	ldr	r2, [r3, #0]
 810f73e:	68fb      	ldr	r3, [r7, #12]
 810f740:	6a1b      	ldr	r3, [r3, #32]
 810f742:	1ad3      	subs	r3, r2, r3
 810f744:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 810f746:	68fb      	ldr	r3, [r7, #12]
 810f748:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 810f74a:	68fb      	ldr	r3, [r7, #12]
 810f74c:	68db      	ldr	r3, [r3, #12]
 810f74e:	60fb      	str	r3, [r7, #12]
 810f750:	68fb      	ldr	r3, [r7, #12]
 810f752:	2b00      	cmp	r3, #0
 810f754:	d1e9      	bne.n	810f72a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 810f756:	68bb      	ldr	r3, [r7, #8]
 810f758:	2b00      	cmp	r3, #0
 810f75a:	d002      	beq.n	810f762 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 810f75c:	68b8      	ldr	r0, [r7, #8]
 810f75e:	f7ff f87b 	bl	810e858 <tcp_abort>
  }
}
 810f762:	bf00      	nop
 810f764:	3710      	adds	r7, #16
 810f766:	46bd      	mov	sp, r7
 810f768:	bd80      	pop	{r7, pc}
 810f76a:	bf00      	nop
 810f76c:	10017708 	.word	0x10017708
 810f770:	100176f8 	.word	0x100176f8

0810f774 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 810f774:	b580      	push	{r7, lr}
 810f776:	b082      	sub	sp, #8
 810f778:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 810f77a:	4b10      	ldr	r3, [pc, #64]	@ (810f7bc <tcp_handle_closepend+0x48>)
 810f77c:	681b      	ldr	r3, [r3, #0]
 810f77e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 810f780:	e014      	b.n	810f7ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 810f782:	687b      	ldr	r3, [r7, #4]
 810f784:	68db      	ldr	r3, [r3, #12]
 810f786:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 810f788:	687b      	ldr	r3, [r7, #4]
 810f78a:	8b5b      	ldrh	r3, [r3, #26]
 810f78c:	f003 0308 	and.w	r3, r3, #8
 810f790:	2b00      	cmp	r3, #0
 810f792:	d009      	beq.n	810f7a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 810f794:	687b      	ldr	r3, [r7, #4]
 810f796:	8b5b      	ldrh	r3, [r3, #26]
 810f798:	f023 0308 	bic.w	r3, r3, #8
 810f79c:	b29a      	uxth	r2, r3
 810f79e:	687b      	ldr	r3, [r7, #4]
 810f7a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 810f7a2:	6878      	ldr	r0, [r7, #4]
 810f7a4:	f7fe ff04 	bl	810e5b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 810f7a8:	683b      	ldr	r3, [r7, #0]
 810f7aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 810f7ac:	687b      	ldr	r3, [r7, #4]
 810f7ae:	2b00      	cmp	r3, #0
 810f7b0:	d1e7      	bne.n	810f782 <tcp_handle_closepend+0xe>
  }
}
 810f7b2:	bf00      	nop
 810f7b4:	bf00      	nop
 810f7b6:	3708      	adds	r7, #8
 810f7b8:	46bd      	mov	sp, r7
 810f7ba:	bd80      	pop	{r7, pc}
 810f7bc:	10017704 	.word	0x10017704

0810f7c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 810f7c0:	b580      	push	{r7, lr}
 810f7c2:	b084      	sub	sp, #16
 810f7c4:	af00      	add	r7, sp, #0
 810f7c6:	4603      	mov	r3, r0
 810f7c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 810f7ca:	2001      	movs	r0, #1
 810f7cc:	f7fd fbd6 	bl	810cf7c <memp_malloc>
 810f7d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 810f7d2:	68fb      	ldr	r3, [r7, #12]
 810f7d4:	2b00      	cmp	r3, #0
 810f7d6:	d126      	bne.n	810f826 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 810f7d8:	f7ff ffcc 	bl	810f774 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 810f7dc:	f7ff ff9a 	bl	810f714 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 810f7e0:	2001      	movs	r0, #1
 810f7e2:	f7fd fbcb 	bl	810cf7c <memp_malloc>
 810f7e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 810f7e8:	68fb      	ldr	r3, [r7, #12]
 810f7ea:	2b00      	cmp	r3, #0
 810f7ec:	d11b      	bne.n	810f826 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 810f7ee:	2009      	movs	r0, #9
 810f7f0:	f7ff ff46 	bl	810f680 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 810f7f4:	2001      	movs	r0, #1
 810f7f6:	f7fd fbc1 	bl	810cf7c <memp_malloc>
 810f7fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 810f7fc:	68fb      	ldr	r3, [r7, #12]
 810f7fe:	2b00      	cmp	r3, #0
 810f800:	d111      	bne.n	810f826 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 810f802:	2008      	movs	r0, #8
 810f804:	f7ff ff3c 	bl	810f680 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 810f808:	2001      	movs	r0, #1
 810f80a:	f7fd fbb7 	bl	810cf7c <memp_malloc>
 810f80e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 810f810:	68fb      	ldr	r3, [r7, #12]
 810f812:	2b00      	cmp	r3, #0
 810f814:	d107      	bne.n	810f826 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 810f816:	79fb      	ldrb	r3, [r7, #7]
 810f818:	4618      	mov	r0, r3
 810f81a:	f7ff fee3 	bl	810f5e4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 810f81e:	2001      	movs	r0, #1
 810f820:	f7fd fbac 	bl	810cf7c <memp_malloc>
 810f824:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 810f826:	68fb      	ldr	r3, [r7, #12]
 810f828:	2b00      	cmp	r3, #0
 810f82a:	d03f      	beq.n	810f8ac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 810f82c:	229c      	movs	r2, #156	@ 0x9c
 810f82e:	2100      	movs	r1, #0
 810f830:	68f8      	ldr	r0, [r7, #12]
 810f832:	f007 ffcb 	bl	81177cc <memset>
    pcb->prio = prio;
 810f836:	68fb      	ldr	r3, [r7, #12]
 810f838:	79fa      	ldrb	r2, [r7, #7]
 810f83a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 810f83c:	68fb      	ldr	r3, [r7, #12]
 810f83e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 810f842:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 810f846:	68fb      	ldr	r3, [r7, #12]
 810f848:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 810f84c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 810f84e:	68fb      	ldr	r3, [r7, #12]
 810f850:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 810f852:	68fb      	ldr	r3, [r7, #12]
 810f854:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 810f856:	68fb      	ldr	r3, [r7, #12]
 810f858:	22ff      	movs	r2, #255	@ 0xff
 810f85a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 810f85c:	68fb      	ldr	r3, [r7, #12]
 810f85e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 810f862:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 810f864:	68fb      	ldr	r3, [r7, #12]
 810f866:	2206      	movs	r2, #6
 810f868:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 810f86c:	68fb      	ldr	r3, [r7, #12]
 810f86e:	2206      	movs	r2, #6
 810f870:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 810f872:	68fb      	ldr	r3, [r7, #12]
 810f874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810f878:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 810f87a:	68fb      	ldr	r3, [r7, #12]
 810f87c:	2201      	movs	r2, #1
 810f87e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 810f882:	4b0d      	ldr	r3, [pc, #52]	@ (810f8b8 <tcp_alloc+0xf8>)
 810f884:	681a      	ldr	r2, [r3, #0]
 810f886:	68fb      	ldr	r3, [r7, #12]
 810f888:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 810f88a:	4b0c      	ldr	r3, [pc, #48]	@ (810f8bc <tcp_alloc+0xfc>)
 810f88c:	781a      	ldrb	r2, [r3, #0]
 810f88e:	68fb      	ldr	r3, [r7, #12]
 810f890:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 810f892:	68fb      	ldr	r3, [r7, #12]
 810f894:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 810f898:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 810f89c:	68fb      	ldr	r3, [r7, #12]
 810f89e:	4a08      	ldr	r2, [pc, #32]	@ (810f8c0 <tcp_alloc+0x100>)
 810f8a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 810f8a4:	68fb      	ldr	r3, [r7, #12]
 810f8a6:	4a07      	ldr	r2, [pc, #28]	@ (810f8c4 <tcp_alloc+0x104>)
 810f8a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 810f8ac:	68fb      	ldr	r3, [r7, #12]
}
 810f8ae:	4618      	mov	r0, r3
 810f8b0:	3710      	adds	r7, #16
 810f8b2:	46bd      	mov	sp, r7
 810f8b4:	bd80      	pop	{r7, pc}
 810f8b6:	bf00      	nop
 810f8b8:	100176f8 	.word	0x100176f8
 810f8bc:	1001770e 	.word	0x1001770e
 810f8c0:	0810f579 	.word	0x0810f579
 810f8c4:	006ddd00 	.word	0x006ddd00

0810f8c8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 810f8c8:	b580      	push	{r7, lr}
 810f8ca:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 810f8cc:	2040      	movs	r0, #64	@ 0x40
 810f8ce:	f7ff ff77 	bl	810f7c0 <tcp_alloc>
 810f8d2:	4603      	mov	r3, r0
}
 810f8d4:	4618      	mov	r0, r3
 810f8d6:	bd80      	pop	{r7, pc}

0810f8d8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 810f8d8:	b480      	push	{r7}
 810f8da:	b083      	sub	sp, #12
 810f8dc:	af00      	add	r7, sp, #0
 810f8de:	6078      	str	r0, [r7, #4]
 810f8e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 810f8e2:	687b      	ldr	r3, [r7, #4]
 810f8e4:	2b00      	cmp	r3, #0
 810f8e6:	d002      	beq.n	810f8ee <tcp_arg+0x16>
    pcb->callback_arg = arg;
 810f8e8:	687b      	ldr	r3, [r7, #4]
 810f8ea:	683a      	ldr	r2, [r7, #0]
 810f8ec:	611a      	str	r2, [r3, #16]
  }
}
 810f8ee:	bf00      	nop
 810f8f0:	370c      	adds	r7, #12
 810f8f2:	46bd      	mov	sp, r7
 810f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f8f8:	4770      	bx	lr
	...

0810f8fc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 810f8fc:	b580      	push	{r7, lr}
 810f8fe:	b082      	sub	sp, #8
 810f900:	af00      	add	r7, sp, #0
 810f902:	6078      	str	r0, [r7, #4]
 810f904:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 810f906:	687b      	ldr	r3, [r7, #4]
 810f908:	2b00      	cmp	r3, #0
 810f90a:	d00e      	beq.n	810f92a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 810f90c:	687b      	ldr	r3, [r7, #4]
 810f90e:	7d1b      	ldrb	r3, [r3, #20]
 810f910:	2b01      	cmp	r3, #1
 810f912:	d106      	bne.n	810f922 <tcp_recv+0x26>
 810f914:	4b07      	ldr	r3, [pc, #28]	@ (810f934 <tcp_recv+0x38>)
 810f916:	f240 72df 	movw	r2, #2015	@ 0x7df
 810f91a:	4907      	ldr	r1, [pc, #28]	@ (810f938 <tcp_recv+0x3c>)
 810f91c:	4807      	ldr	r0, [pc, #28]	@ (810f93c <tcp_recv+0x40>)
 810f91e:	f007 fd8b 	bl	8117438 <iprintf>
    pcb->recv = recv;
 810f922:	687b      	ldr	r3, [r7, #4]
 810f924:	683a      	ldr	r2, [r7, #0]
 810f926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 810f92a:	bf00      	nop
 810f92c:	3708      	adds	r7, #8
 810f92e:	46bd      	mov	sp, r7
 810f930:	bd80      	pop	{r7, pc}
 810f932:	bf00      	nop
 810f934:	0811d5dc 	.word	0x0811d5dc
 810f938:	0811dba8 	.word	0x0811dba8
 810f93c:	0811d650 	.word	0x0811d650

0810f940 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 810f940:	b580      	push	{r7, lr}
 810f942:	b082      	sub	sp, #8
 810f944:	af00      	add	r7, sp, #0
 810f946:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 810f948:	687b      	ldr	r3, [r7, #4]
 810f94a:	2b00      	cmp	r3, #0
 810f94c:	d107      	bne.n	810f95e <tcp_pcb_purge+0x1e>
 810f94e:	4b21      	ldr	r3, [pc, #132]	@ (810f9d4 <tcp_pcb_purge+0x94>)
 810f950:	f640 0251 	movw	r2, #2129	@ 0x851
 810f954:	4920      	ldr	r1, [pc, #128]	@ (810f9d8 <tcp_pcb_purge+0x98>)
 810f956:	4821      	ldr	r0, [pc, #132]	@ (810f9dc <tcp_pcb_purge+0x9c>)
 810f958:	f007 fd6e 	bl	8117438 <iprintf>
 810f95c:	e037      	b.n	810f9ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 810f95e:	687b      	ldr	r3, [r7, #4]
 810f960:	7d1b      	ldrb	r3, [r3, #20]
 810f962:	2b00      	cmp	r3, #0
 810f964:	d033      	beq.n	810f9ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 810f966:	687b      	ldr	r3, [r7, #4]
 810f968:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 810f96a:	2b0a      	cmp	r3, #10
 810f96c:	d02f      	beq.n	810f9ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 810f96e:	687b      	ldr	r3, [r7, #4]
 810f970:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 810f972:	2b01      	cmp	r3, #1
 810f974:	d02b      	beq.n	810f9ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 810f976:	687b      	ldr	r3, [r7, #4]
 810f978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810f97a:	2b00      	cmp	r3, #0
 810f97c:	d007      	beq.n	810f98e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 810f97e:	687b      	ldr	r3, [r7, #4]
 810f980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810f982:	4618      	mov	r0, r3
 810f984:	f7fe f9e0 	bl	810dd48 <pbuf_free>
      pcb->refused_data = NULL;
 810f988:	687b      	ldr	r3, [r7, #4]
 810f98a:	2200      	movs	r2, #0
 810f98c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 810f98e:	687b      	ldr	r3, [r7, #4]
 810f990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810f992:	2b00      	cmp	r3, #0
 810f994:	d002      	beq.n	810f99c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 810f996:	6878      	ldr	r0, [r7, #4]
 810f998:	f000 f986 	bl	810fca8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 810f99c:	687b      	ldr	r3, [r7, #4]
 810f99e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810f9a2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 810f9a4:	687b      	ldr	r3, [r7, #4]
 810f9a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f9a8:	4618      	mov	r0, r3
 810f9aa:	f7ff fd8b 	bl	810f4c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 810f9ae:	687b      	ldr	r3, [r7, #4]
 810f9b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810f9b2:	4618      	mov	r0, r3
 810f9b4:	f7ff fd86 	bl	810f4c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 810f9b8:	687b      	ldr	r3, [r7, #4]
 810f9ba:	2200      	movs	r2, #0
 810f9bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 810f9be:	687b      	ldr	r3, [r7, #4]
 810f9c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810f9c2:	687b      	ldr	r3, [r7, #4]
 810f9c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 810f9c6:	687b      	ldr	r3, [r7, #4]
 810f9c8:	2200      	movs	r2, #0
 810f9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 810f9ce:	3708      	adds	r7, #8
 810f9d0:	46bd      	mov	sp, r7
 810f9d2:	bd80      	pop	{r7, pc}
 810f9d4:	0811d5dc 	.word	0x0811d5dc
 810f9d8:	0811dc58 	.word	0x0811dc58
 810f9dc:	0811d650 	.word	0x0811d650

0810f9e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 810f9e0:	b580      	push	{r7, lr}
 810f9e2:	b084      	sub	sp, #16
 810f9e4:	af00      	add	r7, sp, #0
 810f9e6:	6078      	str	r0, [r7, #4]
 810f9e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 810f9ea:	683b      	ldr	r3, [r7, #0]
 810f9ec:	2b00      	cmp	r3, #0
 810f9ee:	d106      	bne.n	810f9fe <tcp_pcb_remove+0x1e>
 810f9f0:	4b3e      	ldr	r3, [pc, #248]	@ (810faec <tcp_pcb_remove+0x10c>)
 810f9f2:	f640 0283 	movw	r2, #2179	@ 0x883
 810f9f6:	493e      	ldr	r1, [pc, #248]	@ (810faf0 <tcp_pcb_remove+0x110>)
 810f9f8:	483e      	ldr	r0, [pc, #248]	@ (810faf4 <tcp_pcb_remove+0x114>)
 810f9fa:	f007 fd1d 	bl	8117438 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 810f9fe:	687b      	ldr	r3, [r7, #4]
 810fa00:	2b00      	cmp	r3, #0
 810fa02:	d106      	bne.n	810fa12 <tcp_pcb_remove+0x32>
 810fa04:	4b39      	ldr	r3, [pc, #228]	@ (810faec <tcp_pcb_remove+0x10c>)
 810fa06:	f640 0284 	movw	r2, #2180	@ 0x884
 810fa0a:	493b      	ldr	r1, [pc, #236]	@ (810faf8 <tcp_pcb_remove+0x118>)
 810fa0c:	4839      	ldr	r0, [pc, #228]	@ (810faf4 <tcp_pcb_remove+0x114>)
 810fa0e:	f007 fd13 	bl	8117438 <iprintf>

  TCP_RMV(pcblist, pcb);
 810fa12:	687b      	ldr	r3, [r7, #4]
 810fa14:	681b      	ldr	r3, [r3, #0]
 810fa16:	683a      	ldr	r2, [r7, #0]
 810fa18:	429a      	cmp	r2, r3
 810fa1a:	d105      	bne.n	810fa28 <tcp_pcb_remove+0x48>
 810fa1c:	687b      	ldr	r3, [r7, #4]
 810fa1e:	681b      	ldr	r3, [r3, #0]
 810fa20:	68da      	ldr	r2, [r3, #12]
 810fa22:	687b      	ldr	r3, [r7, #4]
 810fa24:	601a      	str	r2, [r3, #0]
 810fa26:	e013      	b.n	810fa50 <tcp_pcb_remove+0x70>
 810fa28:	687b      	ldr	r3, [r7, #4]
 810fa2a:	681b      	ldr	r3, [r3, #0]
 810fa2c:	60fb      	str	r3, [r7, #12]
 810fa2e:	e00c      	b.n	810fa4a <tcp_pcb_remove+0x6a>
 810fa30:	68fb      	ldr	r3, [r7, #12]
 810fa32:	68db      	ldr	r3, [r3, #12]
 810fa34:	683a      	ldr	r2, [r7, #0]
 810fa36:	429a      	cmp	r2, r3
 810fa38:	d104      	bne.n	810fa44 <tcp_pcb_remove+0x64>
 810fa3a:	683b      	ldr	r3, [r7, #0]
 810fa3c:	68da      	ldr	r2, [r3, #12]
 810fa3e:	68fb      	ldr	r3, [r7, #12]
 810fa40:	60da      	str	r2, [r3, #12]
 810fa42:	e005      	b.n	810fa50 <tcp_pcb_remove+0x70>
 810fa44:	68fb      	ldr	r3, [r7, #12]
 810fa46:	68db      	ldr	r3, [r3, #12]
 810fa48:	60fb      	str	r3, [r7, #12]
 810fa4a:	68fb      	ldr	r3, [r7, #12]
 810fa4c:	2b00      	cmp	r3, #0
 810fa4e:	d1ef      	bne.n	810fa30 <tcp_pcb_remove+0x50>
 810fa50:	683b      	ldr	r3, [r7, #0]
 810fa52:	2200      	movs	r2, #0
 810fa54:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 810fa56:	6838      	ldr	r0, [r7, #0]
 810fa58:	f7ff ff72 	bl	810f940 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 810fa5c:	683b      	ldr	r3, [r7, #0]
 810fa5e:	7d1b      	ldrb	r3, [r3, #20]
 810fa60:	2b0a      	cmp	r3, #10
 810fa62:	d013      	beq.n	810fa8c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 810fa64:	683b      	ldr	r3, [r7, #0]
 810fa66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 810fa68:	2b01      	cmp	r3, #1
 810fa6a:	d00f      	beq.n	810fa8c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 810fa6c:	683b      	ldr	r3, [r7, #0]
 810fa6e:	8b5b      	ldrh	r3, [r3, #26]
 810fa70:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 810fa74:	2b00      	cmp	r3, #0
 810fa76:	d009      	beq.n	810fa8c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 810fa78:	683b      	ldr	r3, [r7, #0]
 810fa7a:	8b5b      	ldrh	r3, [r3, #26]
 810fa7c:	f043 0302 	orr.w	r3, r3, #2
 810fa80:	b29a      	uxth	r2, r3
 810fa82:	683b      	ldr	r3, [r7, #0]
 810fa84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 810fa86:	6838      	ldr	r0, [r7, #0]
 810fa88:	f003 fbc0 	bl	811320c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 810fa8c:	683b      	ldr	r3, [r7, #0]
 810fa8e:	7d1b      	ldrb	r3, [r3, #20]
 810fa90:	2b01      	cmp	r3, #1
 810fa92:	d020      	beq.n	810fad6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 810fa94:	683b      	ldr	r3, [r7, #0]
 810fa96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810fa98:	2b00      	cmp	r3, #0
 810fa9a:	d006      	beq.n	810faaa <tcp_pcb_remove+0xca>
 810fa9c:	4b13      	ldr	r3, [pc, #76]	@ (810faec <tcp_pcb_remove+0x10c>)
 810fa9e:	f640 0293 	movw	r2, #2195	@ 0x893
 810faa2:	4916      	ldr	r1, [pc, #88]	@ (810fafc <tcp_pcb_remove+0x11c>)
 810faa4:	4813      	ldr	r0, [pc, #76]	@ (810faf4 <tcp_pcb_remove+0x114>)
 810faa6:	f007 fcc7 	bl	8117438 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 810faaa:	683b      	ldr	r3, [r7, #0]
 810faac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810faae:	2b00      	cmp	r3, #0
 810fab0:	d006      	beq.n	810fac0 <tcp_pcb_remove+0xe0>
 810fab2:	4b0e      	ldr	r3, [pc, #56]	@ (810faec <tcp_pcb_remove+0x10c>)
 810fab4:	f640 0294 	movw	r2, #2196	@ 0x894
 810fab8:	4911      	ldr	r1, [pc, #68]	@ (810fb00 <tcp_pcb_remove+0x120>)
 810faba:	480e      	ldr	r0, [pc, #56]	@ (810faf4 <tcp_pcb_remove+0x114>)
 810fabc:	f007 fcbc 	bl	8117438 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 810fac0:	683b      	ldr	r3, [r7, #0]
 810fac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810fac4:	2b00      	cmp	r3, #0
 810fac6:	d006      	beq.n	810fad6 <tcp_pcb_remove+0xf6>
 810fac8:	4b08      	ldr	r3, [pc, #32]	@ (810faec <tcp_pcb_remove+0x10c>)
 810faca:	f640 0296 	movw	r2, #2198	@ 0x896
 810face:	490d      	ldr	r1, [pc, #52]	@ (810fb04 <tcp_pcb_remove+0x124>)
 810fad0:	4808      	ldr	r0, [pc, #32]	@ (810faf4 <tcp_pcb_remove+0x114>)
 810fad2:	f007 fcb1 	bl	8117438 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 810fad6:	683b      	ldr	r3, [r7, #0]
 810fad8:	2200      	movs	r2, #0
 810fada:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 810fadc:	683b      	ldr	r3, [r7, #0]
 810fade:	2200      	movs	r2, #0
 810fae0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 810fae2:	bf00      	nop
 810fae4:	3710      	adds	r7, #16
 810fae6:	46bd      	mov	sp, r7
 810fae8:	bd80      	pop	{r7, pc}
 810faea:	bf00      	nop
 810faec:	0811d5dc 	.word	0x0811d5dc
 810faf0:	0811dc74 	.word	0x0811dc74
 810faf4:	0811d650 	.word	0x0811d650
 810faf8:	0811dc90 	.word	0x0811dc90
 810fafc:	0811dcb0 	.word	0x0811dcb0
 810fb00:	0811dcc8 	.word	0x0811dcc8
 810fb04:	0811dce4 	.word	0x0811dce4

0810fb08 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 810fb08:	b580      	push	{r7, lr}
 810fb0a:	b082      	sub	sp, #8
 810fb0c:	af00      	add	r7, sp, #0
 810fb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 810fb10:	687b      	ldr	r3, [r7, #4]
 810fb12:	2b00      	cmp	r3, #0
 810fb14:	d106      	bne.n	810fb24 <tcp_next_iss+0x1c>
 810fb16:	4b0a      	ldr	r3, [pc, #40]	@ (810fb40 <tcp_next_iss+0x38>)
 810fb18:	f640 02af 	movw	r2, #2223	@ 0x8af
 810fb1c:	4909      	ldr	r1, [pc, #36]	@ (810fb44 <tcp_next_iss+0x3c>)
 810fb1e:	480a      	ldr	r0, [pc, #40]	@ (810fb48 <tcp_next_iss+0x40>)
 810fb20:	f007 fc8a 	bl	8117438 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 810fb24:	4b09      	ldr	r3, [pc, #36]	@ (810fb4c <tcp_next_iss+0x44>)
 810fb26:	681a      	ldr	r2, [r3, #0]
 810fb28:	4b09      	ldr	r3, [pc, #36]	@ (810fb50 <tcp_next_iss+0x48>)
 810fb2a:	681b      	ldr	r3, [r3, #0]
 810fb2c:	4413      	add	r3, r2
 810fb2e:	4a07      	ldr	r2, [pc, #28]	@ (810fb4c <tcp_next_iss+0x44>)
 810fb30:	6013      	str	r3, [r2, #0]
  return iss;
 810fb32:	4b06      	ldr	r3, [pc, #24]	@ (810fb4c <tcp_next_iss+0x44>)
 810fb34:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 810fb36:	4618      	mov	r0, r3
 810fb38:	3708      	adds	r7, #8
 810fb3a:	46bd      	mov	sp, r7
 810fb3c:	bd80      	pop	{r7, pc}
 810fb3e:	bf00      	nop
 810fb40:	0811d5dc 	.word	0x0811d5dc
 810fb44:	0811dcfc 	.word	0x0811dcfc
 810fb48:	0811d650 	.word	0x0811d650
 810fb4c:	100001c4 	.word	0x100001c4
 810fb50:	100176f8 	.word	0x100176f8

0810fb54 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 810fb54:	b580      	push	{r7, lr}
 810fb56:	b086      	sub	sp, #24
 810fb58:	af00      	add	r7, sp, #0
 810fb5a:	4603      	mov	r3, r0
 810fb5c:	60b9      	str	r1, [r7, #8]
 810fb5e:	607a      	str	r2, [r7, #4]
 810fb60:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 810fb62:	687b      	ldr	r3, [r7, #4]
 810fb64:	2b00      	cmp	r3, #0
 810fb66:	d106      	bne.n	810fb76 <tcp_eff_send_mss_netif+0x22>
 810fb68:	4b14      	ldr	r3, [pc, #80]	@ (810fbbc <tcp_eff_send_mss_netif+0x68>)
 810fb6a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 810fb6e:	4914      	ldr	r1, [pc, #80]	@ (810fbc0 <tcp_eff_send_mss_netif+0x6c>)
 810fb70:	4814      	ldr	r0, [pc, #80]	@ (810fbc4 <tcp_eff_send_mss_netif+0x70>)
 810fb72:	f007 fc61 	bl	8117438 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 810fb76:	68bb      	ldr	r3, [r7, #8]
 810fb78:	2b00      	cmp	r3, #0
 810fb7a:	d101      	bne.n	810fb80 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 810fb7c:	89fb      	ldrh	r3, [r7, #14]
 810fb7e:	e019      	b.n	810fbb4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 810fb80:	68bb      	ldr	r3, [r7, #8]
 810fb82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810fb84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 810fb86:	8afb      	ldrh	r3, [r7, #22]
 810fb88:	2b00      	cmp	r3, #0
 810fb8a:	d012      	beq.n	810fbb2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 810fb8c:	2328      	movs	r3, #40	@ 0x28
 810fb8e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 810fb90:	8afa      	ldrh	r2, [r7, #22]
 810fb92:	8abb      	ldrh	r3, [r7, #20]
 810fb94:	429a      	cmp	r2, r3
 810fb96:	d904      	bls.n	810fba2 <tcp_eff_send_mss_netif+0x4e>
 810fb98:	8afa      	ldrh	r2, [r7, #22]
 810fb9a:	8abb      	ldrh	r3, [r7, #20]
 810fb9c:	1ad3      	subs	r3, r2, r3
 810fb9e:	b29b      	uxth	r3, r3
 810fba0:	e000      	b.n	810fba4 <tcp_eff_send_mss_netif+0x50>
 810fba2:	2300      	movs	r3, #0
 810fba4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 810fba6:	8a7a      	ldrh	r2, [r7, #18]
 810fba8:	89fb      	ldrh	r3, [r7, #14]
 810fbaa:	4293      	cmp	r3, r2
 810fbac:	bf28      	it	cs
 810fbae:	4613      	movcs	r3, r2
 810fbb0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 810fbb2:	89fb      	ldrh	r3, [r7, #14]
}
 810fbb4:	4618      	mov	r0, r3
 810fbb6:	3718      	adds	r7, #24
 810fbb8:	46bd      	mov	sp, r7
 810fbba:	bd80      	pop	{r7, pc}
 810fbbc:	0811d5dc 	.word	0x0811d5dc
 810fbc0:	0811dd18 	.word	0x0811dd18
 810fbc4:	0811d650 	.word	0x0811d650

0810fbc8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 810fbc8:	b580      	push	{r7, lr}
 810fbca:	b084      	sub	sp, #16
 810fbcc:	af00      	add	r7, sp, #0
 810fbce:	6078      	str	r0, [r7, #4]
 810fbd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 810fbd2:	683b      	ldr	r3, [r7, #0]
 810fbd4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 810fbd6:	687b      	ldr	r3, [r7, #4]
 810fbd8:	2b00      	cmp	r3, #0
 810fbda:	d119      	bne.n	810fc10 <tcp_netif_ip_addr_changed_pcblist+0x48>
 810fbdc:	4b10      	ldr	r3, [pc, #64]	@ (810fc20 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 810fbde:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 810fbe2:	4910      	ldr	r1, [pc, #64]	@ (810fc24 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 810fbe4:	4810      	ldr	r0, [pc, #64]	@ (810fc28 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 810fbe6:	f007 fc27 	bl	8117438 <iprintf>

  while (pcb != NULL) {
 810fbea:	e011      	b.n	810fc10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 810fbec:	68fb      	ldr	r3, [r7, #12]
 810fbee:	681a      	ldr	r2, [r3, #0]
 810fbf0:	687b      	ldr	r3, [r7, #4]
 810fbf2:	681b      	ldr	r3, [r3, #0]
 810fbf4:	429a      	cmp	r2, r3
 810fbf6:	d108      	bne.n	810fc0a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 810fbf8:	68fb      	ldr	r3, [r7, #12]
 810fbfa:	68db      	ldr	r3, [r3, #12]
 810fbfc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 810fbfe:	68f8      	ldr	r0, [r7, #12]
 810fc00:	f7fe fe2a 	bl	810e858 <tcp_abort>
      pcb = next;
 810fc04:	68bb      	ldr	r3, [r7, #8]
 810fc06:	60fb      	str	r3, [r7, #12]
 810fc08:	e002      	b.n	810fc10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 810fc0a:	68fb      	ldr	r3, [r7, #12]
 810fc0c:	68db      	ldr	r3, [r3, #12]
 810fc0e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 810fc10:	68fb      	ldr	r3, [r7, #12]
 810fc12:	2b00      	cmp	r3, #0
 810fc14:	d1ea      	bne.n	810fbec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 810fc16:	bf00      	nop
 810fc18:	bf00      	nop
 810fc1a:	3710      	adds	r7, #16
 810fc1c:	46bd      	mov	sp, r7
 810fc1e:	bd80      	pop	{r7, pc}
 810fc20:	0811d5dc 	.word	0x0811d5dc
 810fc24:	0811dd40 	.word	0x0811dd40
 810fc28:	0811d650 	.word	0x0811d650

0810fc2c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 810fc2c:	b580      	push	{r7, lr}
 810fc2e:	b084      	sub	sp, #16
 810fc30:	af00      	add	r7, sp, #0
 810fc32:	6078      	str	r0, [r7, #4]
 810fc34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 810fc36:	687b      	ldr	r3, [r7, #4]
 810fc38:	2b00      	cmp	r3, #0
 810fc3a:	d02a      	beq.n	810fc92 <tcp_netif_ip_addr_changed+0x66>
 810fc3c:	687b      	ldr	r3, [r7, #4]
 810fc3e:	681b      	ldr	r3, [r3, #0]
 810fc40:	2b00      	cmp	r3, #0
 810fc42:	d026      	beq.n	810fc92 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 810fc44:	4b15      	ldr	r3, [pc, #84]	@ (810fc9c <tcp_netif_ip_addr_changed+0x70>)
 810fc46:	681b      	ldr	r3, [r3, #0]
 810fc48:	4619      	mov	r1, r3
 810fc4a:	6878      	ldr	r0, [r7, #4]
 810fc4c:	f7ff ffbc 	bl	810fbc8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 810fc50:	4b13      	ldr	r3, [pc, #76]	@ (810fca0 <tcp_netif_ip_addr_changed+0x74>)
 810fc52:	681b      	ldr	r3, [r3, #0]
 810fc54:	4619      	mov	r1, r3
 810fc56:	6878      	ldr	r0, [r7, #4]
 810fc58:	f7ff ffb6 	bl	810fbc8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 810fc5c:	683b      	ldr	r3, [r7, #0]
 810fc5e:	2b00      	cmp	r3, #0
 810fc60:	d017      	beq.n	810fc92 <tcp_netif_ip_addr_changed+0x66>
 810fc62:	683b      	ldr	r3, [r7, #0]
 810fc64:	681b      	ldr	r3, [r3, #0]
 810fc66:	2b00      	cmp	r3, #0
 810fc68:	d013      	beq.n	810fc92 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 810fc6a:	4b0e      	ldr	r3, [pc, #56]	@ (810fca4 <tcp_netif_ip_addr_changed+0x78>)
 810fc6c:	681b      	ldr	r3, [r3, #0]
 810fc6e:	60fb      	str	r3, [r7, #12]
 810fc70:	e00c      	b.n	810fc8c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 810fc72:	68fb      	ldr	r3, [r7, #12]
 810fc74:	681a      	ldr	r2, [r3, #0]
 810fc76:	687b      	ldr	r3, [r7, #4]
 810fc78:	681b      	ldr	r3, [r3, #0]
 810fc7a:	429a      	cmp	r2, r3
 810fc7c:	d103      	bne.n	810fc86 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 810fc7e:	683b      	ldr	r3, [r7, #0]
 810fc80:	681a      	ldr	r2, [r3, #0]
 810fc82:	68fb      	ldr	r3, [r7, #12]
 810fc84:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 810fc86:	68fb      	ldr	r3, [r7, #12]
 810fc88:	68db      	ldr	r3, [r3, #12]
 810fc8a:	60fb      	str	r3, [r7, #12]
 810fc8c:	68fb      	ldr	r3, [r7, #12]
 810fc8e:	2b00      	cmp	r3, #0
 810fc90:	d1ef      	bne.n	810fc72 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 810fc92:	bf00      	nop
 810fc94:	3710      	adds	r7, #16
 810fc96:	46bd      	mov	sp, r7
 810fc98:	bd80      	pop	{r7, pc}
 810fc9a:	bf00      	nop
 810fc9c:	10017704 	.word	0x10017704
 810fca0:	100176fc 	.word	0x100176fc
 810fca4:	10017700 	.word	0x10017700

0810fca8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 810fca8:	b580      	push	{r7, lr}
 810fcaa:	b082      	sub	sp, #8
 810fcac:	af00      	add	r7, sp, #0
 810fcae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 810fcb0:	687b      	ldr	r3, [r7, #4]
 810fcb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810fcb4:	2b00      	cmp	r3, #0
 810fcb6:	d007      	beq.n	810fcc8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 810fcb8:	687b      	ldr	r3, [r7, #4]
 810fcba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810fcbc:	4618      	mov	r0, r3
 810fcbe:	f7ff fc01 	bl	810f4c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 810fcc2:	687b      	ldr	r3, [r7, #4]
 810fcc4:	2200      	movs	r2, #0
 810fcc6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 810fcc8:	bf00      	nop
 810fcca:	3708      	adds	r7, #8
 810fccc:	46bd      	mov	sp, r7
 810fcce:	bd80      	pop	{r7, pc}

0810fcd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 810fcd0:	b590      	push	{r4, r7, lr}
 810fcd2:	b08d      	sub	sp, #52	@ 0x34
 810fcd4:	af04      	add	r7, sp, #16
 810fcd6:	6078      	str	r0, [r7, #4]
 810fcd8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 810fcda:	687b      	ldr	r3, [r7, #4]
 810fcdc:	2b00      	cmp	r3, #0
 810fcde:	d105      	bne.n	810fcec <tcp_input+0x1c>
 810fce0:	4b9b      	ldr	r3, [pc, #620]	@ (810ff50 <tcp_input+0x280>)
 810fce2:	2283      	movs	r2, #131	@ 0x83
 810fce4:	499b      	ldr	r1, [pc, #620]	@ (810ff54 <tcp_input+0x284>)
 810fce6:	489c      	ldr	r0, [pc, #624]	@ (810ff58 <tcp_input+0x288>)
 810fce8:	f007 fba6 	bl	8117438 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 810fcec:	687b      	ldr	r3, [r7, #4]
 810fcee:	685b      	ldr	r3, [r3, #4]
 810fcf0:	4a9a      	ldr	r2, [pc, #616]	@ (810ff5c <tcp_input+0x28c>)
 810fcf2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 810fcf4:	687b      	ldr	r3, [r7, #4]
 810fcf6:	895b      	ldrh	r3, [r3, #10]
 810fcf8:	2b13      	cmp	r3, #19
 810fcfa:	f240 83d1 	bls.w	81104a0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 810fcfe:	4b98      	ldr	r3, [pc, #608]	@ (810ff60 <tcp_input+0x290>)
 810fd00:	695b      	ldr	r3, [r3, #20]
 810fd02:	4a97      	ldr	r2, [pc, #604]	@ (810ff60 <tcp_input+0x290>)
 810fd04:	6812      	ldr	r2, [r2, #0]
 810fd06:	4611      	mov	r1, r2
 810fd08:	4618      	mov	r0, r3
 810fd0a:	f7fb fe87 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 810fd0e:	4603      	mov	r3, r0
 810fd10:	2b00      	cmp	r3, #0
 810fd12:	f040 83c7 	bne.w	81104a4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 810fd16:	4b92      	ldr	r3, [pc, #584]	@ (810ff60 <tcp_input+0x290>)
 810fd18:	695b      	ldr	r3, [r3, #20]
 810fd1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 810fd1e:	2be0      	cmp	r3, #224	@ 0xe0
 810fd20:	f000 83c0 	beq.w	81104a4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 810fd24:	4b8d      	ldr	r3, [pc, #564]	@ (810ff5c <tcp_input+0x28c>)
 810fd26:	681b      	ldr	r3, [r3, #0]
 810fd28:	899b      	ldrh	r3, [r3, #12]
 810fd2a:	b29b      	uxth	r3, r3
 810fd2c:	4618      	mov	r0, r3
 810fd2e:	f7fa f907 	bl	8109f40 <lwip_htons>
 810fd32:	4603      	mov	r3, r0
 810fd34:	0b1b      	lsrs	r3, r3, #12
 810fd36:	b29b      	uxth	r3, r3
 810fd38:	b2db      	uxtb	r3, r3
 810fd3a:	009b      	lsls	r3, r3, #2
 810fd3c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 810fd3e:	7cbb      	ldrb	r3, [r7, #18]
 810fd40:	2b13      	cmp	r3, #19
 810fd42:	f240 83b1 	bls.w	81104a8 <tcp_input+0x7d8>
 810fd46:	7cbb      	ldrb	r3, [r7, #18]
 810fd48:	b29a      	uxth	r2, r3
 810fd4a:	687b      	ldr	r3, [r7, #4]
 810fd4c:	891b      	ldrh	r3, [r3, #8]
 810fd4e:	429a      	cmp	r2, r3
 810fd50:	f200 83aa 	bhi.w	81104a8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 810fd54:	7cbb      	ldrb	r3, [r7, #18]
 810fd56:	b29b      	uxth	r3, r3
 810fd58:	3b14      	subs	r3, #20
 810fd5a:	b29a      	uxth	r2, r3
 810fd5c:	4b81      	ldr	r3, [pc, #516]	@ (810ff64 <tcp_input+0x294>)
 810fd5e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 810fd60:	4b81      	ldr	r3, [pc, #516]	@ (810ff68 <tcp_input+0x298>)
 810fd62:	2200      	movs	r2, #0
 810fd64:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 810fd66:	687b      	ldr	r3, [r7, #4]
 810fd68:	895a      	ldrh	r2, [r3, #10]
 810fd6a:	7cbb      	ldrb	r3, [r7, #18]
 810fd6c:	b29b      	uxth	r3, r3
 810fd6e:	429a      	cmp	r2, r3
 810fd70:	d309      	bcc.n	810fd86 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 810fd72:	4b7c      	ldr	r3, [pc, #496]	@ (810ff64 <tcp_input+0x294>)
 810fd74:	881a      	ldrh	r2, [r3, #0]
 810fd76:	4b7d      	ldr	r3, [pc, #500]	@ (810ff6c <tcp_input+0x29c>)
 810fd78:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 810fd7a:	7cbb      	ldrb	r3, [r7, #18]
 810fd7c:	4619      	mov	r1, r3
 810fd7e:	6878      	ldr	r0, [r7, #4]
 810fd80:	f7fd ff5c 	bl	810dc3c <pbuf_remove_header>
 810fd84:	e04e      	b.n	810fe24 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 810fd86:	687b      	ldr	r3, [r7, #4]
 810fd88:	681b      	ldr	r3, [r3, #0]
 810fd8a:	2b00      	cmp	r3, #0
 810fd8c:	d105      	bne.n	810fd9a <tcp_input+0xca>
 810fd8e:	4b70      	ldr	r3, [pc, #448]	@ (810ff50 <tcp_input+0x280>)
 810fd90:	22c2      	movs	r2, #194	@ 0xc2
 810fd92:	4977      	ldr	r1, [pc, #476]	@ (810ff70 <tcp_input+0x2a0>)
 810fd94:	4870      	ldr	r0, [pc, #448]	@ (810ff58 <tcp_input+0x288>)
 810fd96:	f007 fb4f 	bl	8117438 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 810fd9a:	2114      	movs	r1, #20
 810fd9c:	6878      	ldr	r0, [r7, #4]
 810fd9e:	f7fd ff4d 	bl	810dc3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 810fda2:	687b      	ldr	r3, [r7, #4]
 810fda4:	895a      	ldrh	r2, [r3, #10]
 810fda6:	4b71      	ldr	r3, [pc, #452]	@ (810ff6c <tcp_input+0x29c>)
 810fda8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 810fdaa:	4b6e      	ldr	r3, [pc, #440]	@ (810ff64 <tcp_input+0x294>)
 810fdac:	881a      	ldrh	r2, [r3, #0]
 810fdae:	4b6f      	ldr	r3, [pc, #444]	@ (810ff6c <tcp_input+0x29c>)
 810fdb0:	881b      	ldrh	r3, [r3, #0]
 810fdb2:	1ad3      	subs	r3, r2, r3
 810fdb4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 810fdb6:	4b6d      	ldr	r3, [pc, #436]	@ (810ff6c <tcp_input+0x29c>)
 810fdb8:	881b      	ldrh	r3, [r3, #0]
 810fdba:	4619      	mov	r1, r3
 810fdbc:	6878      	ldr	r0, [r7, #4]
 810fdbe:	f7fd ff3d 	bl	810dc3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 810fdc2:	687b      	ldr	r3, [r7, #4]
 810fdc4:	681b      	ldr	r3, [r3, #0]
 810fdc6:	895b      	ldrh	r3, [r3, #10]
 810fdc8:	8a3a      	ldrh	r2, [r7, #16]
 810fdca:	429a      	cmp	r2, r3
 810fdcc:	f200 836e 	bhi.w	81104ac <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 810fdd0:	687b      	ldr	r3, [r7, #4]
 810fdd2:	681b      	ldr	r3, [r3, #0]
 810fdd4:	685b      	ldr	r3, [r3, #4]
 810fdd6:	4a64      	ldr	r2, [pc, #400]	@ (810ff68 <tcp_input+0x298>)
 810fdd8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 810fdda:	687b      	ldr	r3, [r7, #4]
 810fddc:	681b      	ldr	r3, [r3, #0]
 810fdde:	8a3a      	ldrh	r2, [r7, #16]
 810fde0:	4611      	mov	r1, r2
 810fde2:	4618      	mov	r0, r3
 810fde4:	f7fd ff2a 	bl	810dc3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 810fde8:	687b      	ldr	r3, [r7, #4]
 810fdea:	891a      	ldrh	r2, [r3, #8]
 810fdec:	8a3b      	ldrh	r3, [r7, #16]
 810fdee:	1ad3      	subs	r3, r2, r3
 810fdf0:	b29a      	uxth	r2, r3
 810fdf2:	687b      	ldr	r3, [r7, #4]
 810fdf4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 810fdf6:	687b      	ldr	r3, [r7, #4]
 810fdf8:	895b      	ldrh	r3, [r3, #10]
 810fdfa:	2b00      	cmp	r3, #0
 810fdfc:	d005      	beq.n	810fe0a <tcp_input+0x13a>
 810fdfe:	4b54      	ldr	r3, [pc, #336]	@ (810ff50 <tcp_input+0x280>)
 810fe00:	22df      	movs	r2, #223	@ 0xdf
 810fe02:	495c      	ldr	r1, [pc, #368]	@ (810ff74 <tcp_input+0x2a4>)
 810fe04:	4854      	ldr	r0, [pc, #336]	@ (810ff58 <tcp_input+0x288>)
 810fe06:	f007 fb17 	bl	8117438 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 810fe0a:	687b      	ldr	r3, [r7, #4]
 810fe0c:	891a      	ldrh	r2, [r3, #8]
 810fe0e:	687b      	ldr	r3, [r7, #4]
 810fe10:	681b      	ldr	r3, [r3, #0]
 810fe12:	891b      	ldrh	r3, [r3, #8]
 810fe14:	429a      	cmp	r2, r3
 810fe16:	d005      	beq.n	810fe24 <tcp_input+0x154>
 810fe18:	4b4d      	ldr	r3, [pc, #308]	@ (810ff50 <tcp_input+0x280>)
 810fe1a:	22e0      	movs	r2, #224	@ 0xe0
 810fe1c:	4956      	ldr	r1, [pc, #344]	@ (810ff78 <tcp_input+0x2a8>)
 810fe1e:	484e      	ldr	r0, [pc, #312]	@ (810ff58 <tcp_input+0x288>)
 810fe20:	f007 fb0a 	bl	8117438 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 810fe24:	4b4d      	ldr	r3, [pc, #308]	@ (810ff5c <tcp_input+0x28c>)
 810fe26:	681b      	ldr	r3, [r3, #0]
 810fe28:	881b      	ldrh	r3, [r3, #0]
 810fe2a:	b29b      	uxth	r3, r3
 810fe2c:	4a4b      	ldr	r2, [pc, #300]	@ (810ff5c <tcp_input+0x28c>)
 810fe2e:	6814      	ldr	r4, [r2, #0]
 810fe30:	4618      	mov	r0, r3
 810fe32:	f7fa f885 	bl	8109f40 <lwip_htons>
 810fe36:	4603      	mov	r3, r0
 810fe38:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 810fe3a:	4b48      	ldr	r3, [pc, #288]	@ (810ff5c <tcp_input+0x28c>)
 810fe3c:	681b      	ldr	r3, [r3, #0]
 810fe3e:	885b      	ldrh	r3, [r3, #2]
 810fe40:	b29b      	uxth	r3, r3
 810fe42:	4a46      	ldr	r2, [pc, #280]	@ (810ff5c <tcp_input+0x28c>)
 810fe44:	6814      	ldr	r4, [r2, #0]
 810fe46:	4618      	mov	r0, r3
 810fe48:	f7fa f87a 	bl	8109f40 <lwip_htons>
 810fe4c:	4603      	mov	r3, r0
 810fe4e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 810fe50:	4b42      	ldr	r3, [pc, #264]	@ (810ff5c <tcp_input+0x28c>)
 810fe52:	681b      	ldr	r3, [r3, #0]
 810fe54:	685b      	ldr	r3, [r3, #4]
 810fe56:	4a41      	ldr	r2, [pc, #260]	@ (810ff5c <tcp_input+0x28c>)
 810fe58:	6814      	ldr	r4, [r2, #0]
 810fe5a:	4618      	mov	r0, r3
 810fe5c:	f7fa f886 	bl	8109f6c <lwip_htonl>
 810fe60:	4603      	mov	r3, r0
 810fe62:	6063      	str	r3, [r4, #4]
 810fe64:	6863      	ldr	r3, [r4, #4]
 810fe66:	4a45      	ldr	r2, [pc, #276]	@ (810ff7c <tcp_input+0x2ac>)
 810fe68:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 810fe6a:	4b3c      	ldr	r3, [pc, #240]	@ (810ff5c <tcp_input+0x28c>)
 810fe6c:	681b      	ldr	r3, [r3, #0]
 810fe6e:	689b      	ldr	r3, [r3, #8]
 810fe70:	4a3a      	ldr	r2, [pc, #232]	@ (810ff5c <tcp_input+0x28c>)
 810fe72:	6814      	ldr	r4, [r2, #0]
 810fe74:	4618      	mov	r0, r3
 810fe76:	f7fa f879 	bl	8109f6c <lwip_htonl>
 810fe7a:	4603      	mov	r3, r0
 810fe7c:	60a3      	str	r3, [r4, #8]
 810fe7e:	68a3      	ldr	r3, [r4, #8]
 810fe80:	4a3f      	ldr	r2, [pc, #252]	@ (810ff80 <tcp_input+0x2b0>)
 810fe82:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 810fe84:	4b35      	ldr	r3, [pc, #212]	@ (810ff5c <tcp_input+0x28c>)
 810fe86:	681b      	ldr	r3, [r3, #0]
 810fe88:	89db      	ldrh	r3, [r3, #14]
 810fe8a:	b29b      	uxth	r3, r3
 810fe8c:	4a33      	ldr	r2, [pc, #204]	@ (810ff5c <tcp_input+0x28c>)
 810fe8e:	6814      	ldr	r4, [r2, #0]
 810fe90:	4618      	mov	r0, r3
 810fe92:	f7fa f855 	bl	8109f40 <lwip_htons>
 810fe96:	4603      	mov	r3, r0
 810fe98:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 810fe9a:	4b30      	ldr	r3, [pc, #192]	@ (810ff5c <tcp_input+0x28c>)
 810fe9c:	681b      	ldr	r3, [r3, #0]
 810fe9e:	899b      	ldrh	r3, [r3, #12]
 810fea0:	b29b      	uxth	r3, r3
 810fea2:	4618      	mov	r0, r3
 810fea4:	f7fa f84c 	bl	8109f40 <lwip_htons>
 810fea8:	4603      	mov	r3, r0
 810feaa:	b2db      	uxtb	r3, r3
 810feac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810feb0:	b2da      	uxtb	r2, r3
 810feb2:	4b34      	ldr	r3, [pc, #208]	@ (810ff84 <tcp_input+0x2b4>)
 810feb4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 810feb6:	687b      	ldr	r3, [r7, #4]
 810feb8:	891a      	ldrh	r2, [r3, #8]
 810feba:	4b33      	ldr	r3, [pc, #204]	@ (810ff88 <tcp_input+0x2b8>)
 810febc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 810febe:	4b31      	ldr	r3, [pc, #196]	@ (810ff84 <tcp_input+0x2b4>)
 810fec0:	781b      	ldrb	r3, [r3, #0]
 810fec2:	f003 0303 	and.w	r3, r3, #3
 810fec6:	2b00      	cmp	r3, #0
 810fec8:	d00c      	beq.n	810fee4 <tcp_input+0x214>
    tcplen++;
 810feca:	4b2f      	ldr	r3, [pc, #188]	@ (810ff88 <tcp_input+0x2b8>)
 810fecc:	881b      	ldrh	r3, [r3, #0]
 810fece:	3301      	adds	r3, #1
 810fed0:	b29a      	uxth	r2, r3
 810fed2:	4b2d      	ldr	r3, [pc, #180]	@ (810ff88 <tcp_input+0x2b8>)
 810fed4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 810fed6:	687b      	ldr	r3, [r7, #4]
 810fed8:	891a      	ldrh	r2, [r3, #8]
 810feda:	4b2b      	ldr	r3, [pc, #172]	@ (810ff88 <tcp_input+0x2b8>)
 810fedc:	881b      	ldrh	r3, [r3, #0]
 810fede:	429a      	cmp	r2, r3
 810fee0:	f200 82e6 	bhi.w	81104b0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 810fee4:	2300      	movs	r3, #0
 810fee6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 810fee8:	4b28      	ldr	r3, [pc, #160]	@ (810ff8c <tcp_input+0x2bc>)
 810feea:	681b      	ldr	r3, [r3, #0]
 810feec:	61fb      	str	r3, [r7, #28]
 810feee:	e09d      	b.n	811002c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 810fef0:	69fb      	ldr	r3, [r7, #28]
 810fef2:	7d1b      	ldrb	r3, [r3, #20]
 810fef4:	2b00      	cmp	r3, #0
 810fef6:	d105      	bne.n	810ff04 <tcp_input+0x234>
 810fef8:	4b15      	ldr	r3, [pc, #84]	@ (810ff50 <tcp_input+0x280>)
 810fefa:	22fb      	movs	r2, #251	@ 0xfb
 810fefc:	4924      	ldr	r1, [pc, #144]	@ (810ff90 <tcp_input+0x2c0>)
 810fefe:	4816      	ldr	r0, [pc, #88]	@ (810ff58 <tcp_input+0x288>)
 810ff00:	f007 fa9a 	bl	8117438 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 810ff04:	69fb      	ldr	r3, [r7, #28]
 810ff06:	7d1b      	ldrb	r3, [r3, #20]
 810ff08:	2b0a      	cmp	r3, #10
 810ff0a:	d105      	bne.n	810ff18 <tcp_input+0x248>
 810ff0c:	4b10      	ldr	r3, [pc, #64]	@ (810ff50 <tcp_input+0x280>)
 810ff0e:	22fc      	movs	r2, #252	@ 0xfc
 810ff10:	4920      	ldr	r1, [pc, #128]	@ (810ff94 <tcp_input+0x2c4>)
 810ff12:	4811      	ldr	r0, [pc, #68]	@ (810ff58 <tcp_input+0x288>)
 810ff14:	f007 fa90 	bl	8117438 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 810ff18:	69fb      	ldr	r3, [r7, #28]
 810ff1a:	7d1b      	ldrb	r3, [r3, #20]
 810ff1c:	2b01      	cmp	r3, #1
 810ff1e:	d105      	bne.n	810ff2c <tcp_input+0x25c>
 810ff20:	4b0b      	ldr	r3, [pc, #44]	@ (810ff50 <tcp_input+0x280>)
 810ff22:	22fd      	movs	r2, #253	@ 0xfd
 810ff24:	491c      	ldr	r1, [pc, #112]	@ (810ff98 <tcp_input+0x2c8>)
 810ff26:	480c      	ldr	r0, [pc, #48]	@ (810ff58 <tcp_input+0x288>)
 810ff28:	f007 fa86 	bl	8117438 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 810ff2c:	69fb      	ldr	r3, [r7, #28]
 810ff2e:	7a1b      	ldrb	r3, [r3, #8]
 810ff30:	2b00      	cmp	r3, #0
 810ff32:	d033      	beq.n	810ff9c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 810ff34:	69fb      	ldr	r3, [r7, #28]
 810ff36:	7a1a      	ldrb	r2, [r3, #8]
 810ff38:	4b09      	ldr	r3, [pc, #36]	@ (810ff60 <tcp_input+0x290>)
 810ff3a:	685b      	ldr	r3, [r3, #4]
 810ff3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810ff40:	3301      	adds	r3, #1
 810ff42:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 810ff44:	429a      	cmp	r2, r3
 810ff46:	d029      	beq.n	810ff9c <tcp_input+0x2cc>
      prev = pcb;
 810ff48:	69fb      	ldr	r3, [r7, #28]
 810ff4a:	61bb      	str	r3, [r7, #24]
      continue;
 810ff4c:	e06b      	b.n	8110026 <tcp_input+0x356>
 810ff4e:	bf00      	nop
 810ff50:	0811dd74 	.word	0x0811dd74
 810ff54:	0811ddd4 	.word	0x0811ddd4
 810ff58:	0811ddec 	.word	0x0811ddec
 810ff5c:	10017720 	.word	0x10017720
 810ff60:	100145b0 	.word	0x100145b0
 810ff64:	10017724 	.word	0x10017724
 810ff68:	10017728 	.word	0x10017728
 810ff6c:	10017726 	.word	0x10017726
 810ff70:	0811de14 	.word	0x0811de14
 810ff74:	0811de24 	.word	0x0811de24
 810ff78:	0811de30 	.word	0x0811de30
 810ff7c:	10017730 	.word	0x10017730
 810ff80:	10017734 	.word	0x10017734
 810ff84:	1001773c 	.word	0x1001773c
 810ff88:	1001773a 	.word	0x1001773a
 810ff8c:	10017704 	.word	0x10017704
 810ff90:	0811de50 	.word	0x0811de50
 810ff94:	0811de78 	.word	0x0811de78
 810ff98:	0811dea4 	.word	0x0811dea4
    }

    if (pcb->remote_port == tcphdr->src &&
 810ff9c:	69fb      	ldr	r3, [r7, #28]
 810ff9e:	8b1a      	ldrh	r2, [r3, #24]
 810ffa0:	4b72      	ldr	r3, [pc, #456]	@ (811016c <tcp_input+0x49c>)
 810ffa2:	681b      	ldr	r3, [r3, #0]
 810ffa4:	881b      	ldrh	r3, [r3, #0]
 810ffa6:	b29b      	uxth	r3, r3
 810ffa8:	429a      	cmp	r2, r3
 810ffaa:	d13a      	bne.n	8110022 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 810ffac:	69fb      	ldr	r3, [r7, #28]
 810ffae:	8ada      	ldrh	r2, [r3, #22]
 810ffb0:	4b6e      	ldr	r3, [pc, #440]	@ (811016c <tcp_input+0x49c>)
 810ffb2:	681b      	ldr	r3, [r3, #0]
 810ffb4:	885b      	ldrh	r3, [r3, #2]
 810ffb6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 810ffb8:	429a      	cmp	r2, r3
 810ffba:	d132      	bne.n	8110022 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 810ffbc:	69fb      	ldr	r3, [r7, #28]
 810ffbe:	685a      	ldr	r2, [r3, #4]
 810ffc0:	4b6b      	ldr	r3, [pc, #428]	@ (8110170 <tcp_input+0x4a0>)
 810ffc2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 810ffc4:	429a      	cmp	r2, r3
 810ffc6:	d12c      	bne.n	8110022 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 810ffc8:	69fb      	ldr	r3, [r7, #28]
 810ffca:	681a      	ldr	r2, [r3, #0]
 810ffcc:	4b68      	ldr	r3, [pc, #416]	@ (8110170 <tcp_input+0x4a0>)
 810ffce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 810ffd0:	429a      	cmp	r2, r3
 810ffd2:	d126      	bne.n	8110022 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 810ffd4:	69fb      	ldr	r3, [r7, #28]
 810ffd6:	68db      	ldr	r3, [r3, #12]
 810ffd8:	69fa      	ldr	r2, [r7, #28]
 810ffda:	429a      	cmp	r2, r3
 810ffdc:	d106      	bne.n	810ffec <tcp_input+0x31c>
 810ffde:	4b65      	ldr	r3, [pc, #404]	@ (8110174 <tcp_input+0x4a4>)
 810ffe0:	f240 120d 	movw	r2, #269	@ 0x10d
 810ffe4:	4964      	ldr	r1, [pc, #400]	@ (8110178 <tcp_input+0x4a8>)
 810ffe6:	4865      	ldr	r0, [pc, #404]	@ (811017c <tcp_input+0x4ac>)
 810ffe8:	f007 fa26 	bl	8117438 <iprintf>
      if (prev != NULL) {
 810ffec:	69bb      	ldr	r3, [r7, #24]
 810ffee:	2b00      	cmp	r3, #0
 810fff0:	d00a      	beq.n	8110008 <tcp_input+0x338>
        prev->next = pcb->next;
 810fff2:	69fb      	ldr	r3, [r7, #28]
 810fff4:	68da      	ldr	r2, [r3, #12]
 810fff6:	69bb      	ldr	r3, [r7, #24]
 810fff8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 810fffa:	4b61      	ldr	r3, [pc, #388]	@ (8110180 <tcp_input+0x4b0>)
 810fffc:	681a      	ldr	r2, [r3, #0]
 810fffe:	69fb      	ldr	r3, [r7, #28]
 8110000:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8110002:	4a5f      	ldr	r2, [pc, #380]	@ (8110180 <tcp_input+0x4b0>)
 8110004:	69fb      	ldr	r3, [r7, #28]
 8110006:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8110008:	69fb      	ldr	r3, [r7, #28]
 811000a:	68db      	ldr	r3, [r3, #12]
 811000c:	69fa      	ldr	r2, [r7, #28]
 811000e:	429a      	cmp	r2, r3
 8110010:	d111      	bne.n	8110036 <tcp_input+0x366>
 8110012:	4b58      	ldr	r3, [pc, #352]	@ (8110174 <tcp_input+0x4a4>)
 8110014:	f240 1215 	movw	r2, #277	@ 0x115
 8110018:	495a      	ldr	r1, [pc, #360]	@ (8110184 <tcp_input+0x4b4>)
 811001a:	4858      	ldr	r0, [pc, #352]	@ (811017c <tcp_input+0x4ac>)
 811001c:	f007 fa0c 	bl	8117438 <iprintf>
      break;
 8110020:	e009      	b.n	8110036 <tcp_input+0x366>
    }
    prev = pcb;
 8110022:	69fb      	ldr	r3, [r7, #28]
 8110024:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8110026:	69fb      	ldr	r3, [r7, #28]
 8110028:	68db      	ldr	r3, [r3, #12]
 811002a:	61fb      	str	r3, [r7, #28]
 811002c:	69fb      	ldr	r3, [r7, #28]
 811002e:	2b00      	cmp	r3, #0
 8110030:	f47f af5e 	bne.w	810fef0 <tcp_input+0x220>
 8110034:	e000      	b.n	8110038 <tcp_input+0x368>
      break;
 8110036:	bf00      	nop
  }

  if (pcb == NULL) {
 8110038:	69fb      	ldr	r3, [r7, #28]
 811003a:	2b00      	cmp	r3, #0
 811003c:	f040 80aa 	bne.w	8110194 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8110040:	4b51      	ldr	r3, [pc, #324]	@ (8110188 <tcp_input+0x4b8>)
 8110042:	681b      	ldr	r3, [r3, #0]
 8110044:	61fb      	str	r3, [r7, #28]
 8110046:	e03f      	b.n	81100c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8110048:	69fb      	ldr	r3, [r7, #28]
 811004a:	7d1b      	ldrb	r3, [r3, #20]
 811004c:	2b0a      	cmp	r3, #10
 811004e:	d006      	beq.n	811005e <tcp_input+0x38e>
 8110050:	4b48      	ldr	r3, [pc, #288]	@ (8110174 <tcp_input+0x4a4>)
 8110052:	f240 121f 	movw	r2, #287	@ 0x11f
 8110056:	494d      	ldr	r1, [pc, #308]	@ (811018c <tcp_input+0x4bc>)
 8110058:	4848      	ldr	r0, [pc, #288]	@ (811017c <tcp_input+0x4ac>)
 811005a:	f007 f9ed 	bl	8117438 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811005e:	69fb      	ldr	r3, [r7, #28]
 8110060:	7a1b      	ldrb	r3, [r3, #8]
 8110062:	2b00      	cmp	r3, #0
 8110064:	d009      	beq.n	811007a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8110066:	69fb      	ldr	r3, [r7, #28]
 8110068:	7a1a      	ldrb	r2, [r3, #8]
 811006a:	4b41      	ldr	r3, [pc, #260]	@ (8110170 <tcp_input+0x4a0>)
 811006c:	685b      	ldr	r3, [r3, #4]
 811006e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8110072:	3301      	adds	r3, #1
 8110074:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8110076:	429a      	cmp	r2, r3
 8110078:	d122      	bne.n	81100c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 811007a:	69fb      	ldr	r3, [r7, #28]
 811007c:	8b1a      	ldrh	r2, [r3, #24]
 811007e:	4b3b      	ldr	r3, [pc, #236]	@ (811016c <tcp_input+0x49c>)
 8110080:	681b      	ldr	r3, [r3, #0]
 8110082:	881b      	ldrh	r3, [r3, #0]
 8110084:	b29b      	uxth	r3, r3
 8110086:	429a      	cmp	r2, r3
 8110088:	d11b      	bne.n	81100c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 811008a:	69fb      	ldr	r3, [r7, #28]
 811008c:	8ada      	ldrh	r2, [r3, #22]
 811008e:	4b37      	ldr	r3, [pc, #220]	@ (811016c <tcp_input+0x49c>)
 8110090:	681b      	ldr	r3, [r3, #0]
 8110092:	885b      	ldrh	r3, [r3, #2]
 8110094:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8110096:	429a      	cmp	r2, r3
 8110098:	d113      	bne.n	81100c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811009a:	69fb      	ldr	r3, [r7, #28]
 811009c:	685a      	ldr	r2, [r3, #4]
 811009e:	4b34      	ldr	r3, [pc, #208]	@ (8110170 <tcp_input+0x4a0>)
 81100a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 81100a2:	429a      	cmp	r2, r3
 81100a4:	d10d      	bne.n	81100c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 81100a6:	69fb      	ldr	r3, [r7, #28]
 81100a8:	681a      	ldr	r2, [r3, #0]
 81100aa:	4b31      	ldr	r3, [pc, #196]	@ (8110170 <tcp_input+0x4a0>)
 81100ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 81100ae:	429a      	cmp	r2, r3
 81100b0:	d107      	bne.n	81100c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 81100b2:	69f8      	ldr	r0, [r7, #28]
 81100b4:	f000 fb56 	bl	8110764 <tcp_timewait_input>
        }
        pbuf_free(p);
 81100b8:	6878      	ldr	r0, [r7, #4]
 81100ba:	f7fd fe45 	bl	810dd48 <pbuf_free>
        return;
 81100be:	e1fd      	b.n	81104bc <tcp_input+0x7ec>
        continue;
 81100c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 81100c2:	69fb      	ldr	r3, [r7, #28]
 81100c4:	68db      	ldr	r3, [r3, #12]
 81100c6:	61fb      	str	r3, [r7, #28]
 81100c8:	69fb      	ldr	r3, [r7, #28]
 81100ca:	2b00      	cmp	r3, #0
 81100cc:	d1bc      	bne.n	8110048 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 81100ce:	2300      	movs	r3, #0
 81100d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 81100d2:	4b2f      	ldr	r3, [pc, #188]	@ (8110190 <tcp_input+0x4c0>)
 81100d4:	681b      	ldr	r3, [r3, #0]
 81100d6:	617b      	str	r3, [r7, #20]
 81100d8:	e02a      	b.n	8110130 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 81100da:	697b      	ldr	r3, [r7, #20]
 81100dc:	7a1b      	ldrb	r3, [r3, #8]
 81100de:	2b00      	cmp	r3, #0
 81100e0:	d00c      	beq.n	81100fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 81100e2:	697b      	ldr	r3, [r7, #20]
 81100e4:	7a1a      	ldrb	r2, [r3, #8]
 81100e6:	4b22      	ldr	r3, [pc, #136]	@ (8110170 <tcp_input+0x4a0>)
 81100e8:	685b      	ldr	r3, [r3, #4]
 81100ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81100ee:	3301      	adds	r3, #1
 81100f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 81100f2:	429a      	cmp	r2, r3
 81100f4:	d002      	beq.n	81100fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 81100f6:	697b      	ldr	r3, [r7, #20]
 81100f8:	61bb      	str	r3, [r7, #24]
        continue;
 81100fa:	e016      	b.n	811012a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 81100fc:	697b      	ldr	r3, [r7, #20]
 81100fe:	8ada      	ldrh	r2, [r3, #22]
 8110100:	4b1a      	ldr	r3, [pc, #104]	@ (811016c <tcp_input+0x49c>)
 8110102:	681b      	ldr	r3, [r3, #0]
 8110104:	885b      	ldrh	r3, [r3, #2]
 8110106:	b29b      	uxth	r3, r3
 8110108:	429a      	cmp	r2, r3
 811010a:	d10c      	bne.n	8110126 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 811010c:	697b      	ldr	r3, [r7, #20]
 811010e:	681a      	ldr	r2, [r3, #0]
 8110110:	4b17      	ldr	r3, [pc, #92]	@ (8110170 <tcp_input+0x4a0>)
 8110112:	695b      	ldr	r3, [r3, #20]
 8110114:	429a      	cmp	r2, r3
 8110116:	d00f      	beq.n	8110138 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8110118:	697b      	ldr	r3, [r7, #20]
 811011a:	2b00      	cmp	r3, #0
 811011c:	d00d      	beq.n	811013a <tcp_input+0x46a>
 811011e:	697b      	ldr	r3, [r7, #20]
 8110120:	681b      	ldr	r3, [r3, #0]
 8110122:	2b00      	cmp	r3, #0
 8110124:	d009      	beq.n	811013a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8110126:	697b      	ldr	r3, [r7, #20]
 8110128:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811012a:	697b      	ldr	r3, [r7, #20]
 811012c:	68db      	ldr	r3, [r3, #12]
 811012e:	617b      	str	r3, [r7, #20]
 8110130:	697b      	ldr	r3, [r7, #20]
 8110132:	2b00      	cmp	r3, #0
 8110134:	d1d1      	bne.n	81100da <tcp_input+0x40a>
 8110136:	e000      	b.n	811013a <tcp_input+0x46a>
            break;
 8110138:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 811013a:	697b      	ldr	r3, [r7, #20]
 811013c:	2b00      	cmp	r3, #0
 811013e:	d029      	beq.n	8110194 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8110140:	69bb      	ldr	r3, [r7, #24]
 8110142:	2b00      	cmp	r3, #0
 8110144:	d00a      	beq.n	811015c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8110146:	697b      	ldr	r3, [r7, #20]
 8110148:	68da      	ldr	r2, [r3, #12]
 811014a:	69bb      	ldr	r3, [r7, #24]
 811014c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 811014e:	4b10      	ldr	r3, [pc, #64]	@ (8110190 <tcp_input+0x4c0>)
 8110150:	681a      	ldr	r2, [r3, #0]
 8110152:	697b      	ldr	r3, [r7, #20]
 8110154:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8110156:	4a0e      	ldr	r2, [pc, #56]	@ (8110190 <tcp_input+0x4c0>)
 8110158:	697b      	ldr	r3, [r7, #20]
 811015a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 811015c:	6978      	ldr	r0, [r7, #20]
 811015e:	f000 fa03 	bl	8110568 <tcp_listen_input>
      }
      pbuf_free(p);
 8110162:	6878      	ldr	r0, [r7, #4]
 8110164:	f7fd fdf0 	bl	810dd48 <pbuf_free>
      return;
 8110168:	e1a8      	b.n	81104bc <tcp_input+0x7ec>
 811016a:	bf00      	nop
 811016c:	10017720 	.word	0x10017720
 8110170:	100145b0 	.word	0x100145b0
 8110174:	0811dd74 	.word	0x0811dd74
 8110178:	0811decc 	.word	0x0811decc
 811017c:	0811ddec 	.word	0x0811ddec
 8110180:	10017704 	.word	0x10017704
 8110184:	0811def8 	.word	0x0811def8
 8110188:	10017708 	.word	0x10017708
 811018c:	0811df24 	.word	0x0811df24
 8110190:	10017700 	.word	0x10017700
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8110194:	69fb      	ldr	r3, [r7, #28]
 8110196:	2b00      	cmp	r3, #0
 8110198:	f000 8158 	beq.w	811044c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 811019c:	4b95      	ldr	r3, [pc, #596]	@ (81103f4 <tcp_input+0x724>)
 811019e:	2200      	movs	r2, #0
 81101a0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 81101a2:	687b      	ldr	r3, [r7, #4]
 81101a4:	891a      	ldrh	r2, [r3, #8]
 81101a6:	4b93      	ldr	r3, [pc, #588]	@ (81103f4 <tcp_input+0x724>)
 81101a8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 81101aa:	4a92      	ldr	r2, [pc, #584]	@ (81103f4 <tcp_input+0x724>)
 81101ac:	687b      	ldr	r3, [r7, #4]
 81101ae:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 81101b0:	4b91      	ldr	r3, [pc, #580]	@ (81103f8 <tcp_input+0x728>)
 81101b2:	681b      	ldr	r3, [r3, #0]
 81101b4:	4a8f      	ldr	r2, [pc, #572]	@ (81103f4 <tcp_input+0x724>)
 81101b6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 81101b8:	4b90      	ldr	r3, [pc, #576]	@ (81103fc <tcp_input+0x72c>)
 81101ba:	2200      	movs	r2, #0
 81101bc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 81101be:	4b90      	ldr	r3, [pc, #576]	@ (8110400 <tcp_input+0x730>)
 81101c0:	2200      	movs	r2, #0
 81101c2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 81101c4:	4b8f      	ldr	r3, [pc, #572]	@ (8110404 <tcp_input+0x734>)
 81101c6:	2200      	movs	r2, #0
 81101c8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 81101ca:	4b8f      	ldr	r3, [pc, #572]	@ (8110408 <tcp_input+0x738>)
 81101cc:	781b      	ldrb	r3, [r3, #0]
 81101ce:	f003 0308 	and.w	r3, r3, #8
 81101d2:	2b00      	cmp	r3, #0
 81101d4:	d006      	beq.n	81101e4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 81101d6:	687b      	ldr	r3, [r7, #4]
 81101d8:	7b5b      	ldrb	r3, [r3, #13]
 81101da:	f043 0301 	orr.w	r3, r3, #1
 81101de:	b2da      	uxtb	r2, r3
 81101e0:	687b      	ldr	r3, [r7, #4]
 81101e2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 81101e4:	69fb      	ldr	r3, [r7, #28]
 81101e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81101e8:	2b00      	cmp	r3, #0
 81101ea:	d017      	beq.n	811021c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 81101ec:	69f8      	ldr	r0, [r7, #28]
 81101ee:	f7ff f8ed 	bl	810f3cc <tcp_process_refused_data>
 81101f2:	4603      	mov	r3, r0
 81101f4:	f113 0f0d 	cmn.w	r3, #13
 81101f8:	d007      	beq.n	811020a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 81101fa:	69fb      	ldr	r3, [r7, #28]
 81101fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 81101fe:	2b00      	cmp	r3, #0
 8110200:	d00c      	beq.n	811021c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8110202:	4b82      	ldr	r3, [pc, #520]	@ (811040c <tcp_input+0x73c>)
 8110204:	881b      	ldrh	r3, [r3, #0]
 8110206:	2b00      	cmp	r3, #0
 8110208:	d008      	beq.n	811021c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 811020a:	69fb      	ldr	r3, [r7, #28]
 811020c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811020e:	2b00      	cmp	r3, #0
 8110210:	f040 80e3 	bne.w	81103da <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8110214:	69f8      	ldr	r0, [r7, #28]
 8110216:	f003 fdff 	bl	8113e18 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 811021a:	e0de      	b.n	81103da <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 811021c:	4a7c      	ldr	r2, [pc, #496]	@ (8110410 <tcp_input+0x740>)
 811021e:	69fb      	ldr	r3, [r7, #28]
 8110220:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8110222:	69f8      	ldr	r0, [r7, #28]
 8110224:	f000 fb18 	bl	8110858 <tcp_process>
 8110228:	4603      	mov	r3, r0
 811022a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 811022c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8110230:	f113 0f0d 	cmn.w	r3, #13
 8110234:	f000 80d3 	beq.w	81103de <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8110238:	4b71      	ldr	r3, [pc, #452]	@ (8110400 <tcp_input+0x730>)
 811023a:	781b      	ldrb	r3, [r3, #0]
 811023c:	f003 0308 	and.w	r3, r3, #8
 8110240:	2b00      	cmp	r3, #0
 8110242:	d015      	beq.n	8110270 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8110244:	69fb      	ldr	r3, [r7, #28]
 8110246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811024a:	2b00      	cmp	r3, #0
 811024c:	d008      	beq.n	8110260 <tcp_input+0x590>
 811024e:	69fb      	ldr	r3, [r7, #28]
 8110250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110254:	69fa      	ldr	r2, [r7, #28]
 8110256:	6912      	ldr	r2, [r2, #16]
 8110258:	f06f 010d 	mvn.w	r1, #13
 811025c:	4610      	mov	r0, r2
 811025e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8110260:	69f9      	ldr	r1, [r7, #28]
 8110262:	486c      	ldr	r0, [pc, #432]	@ (8110414 <tcp_input+0x744>)
 8110264:	f7ff fbbc 	bl	810f9e0 <tcp_pcb_remove>
        tcp_free(pcb);
 8110268:	69f8      	ldr	r0, [r7, #28]
 811026a:	f7fe f80d 	bl	810e288 <tcp_free>
 811026e:	e0da      	b.n	8110426 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8110270:	2300      	movs	r3, #0
 8110272:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8110274:	4b63      	ldr	r3, [pc, #396]	@ (8110404 <tcp_input+0x734>)
 8110276:	881b      	ldrh	r3, [r3, #0]
 8110278:	2b00      	cmp	r3, #0
 811027a:	d01d      	beq.n	81102b8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 811027c:	4b61      	ldr	r3, [pc, #388]	@ (8110404 <tcp_input+0x734>)
 811027e:	881b      	ldrh	r3, [r3, #0]
 8110280:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8110282:	69fb      	ldr	r3, [r7, #28]
 8110284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8110288:	2b00      	cmp	r3, #0
 811028a:	d00a      	beq.n	81102a2 <tcp_input+0x5d2>
 811028c:	69fb      	ldr	r3, [r7, #28]
 811028e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8110292:	69fa      	ldr	r2, [r7, #28]
 8110294:	6910      	ldr	r0, [r2, #16]
 8110296:	89fa      	ldrh	r2, [r7, #14]
 8110298:	69f9      	ldr	r1, [r7, #28]
 811029a:	4798      	blx	r3
 811029c:	4603      	mov	r3, r0
 811029e:	74fb      	strb	r3, [r7, #19]
 81102a0:	e001      	b.n	81102a6 <tcp_input+0x5d6>
 81102a2:	2300      	movs	r3, #0
 81102a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 81102a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 81102aa:	f113 0f0d 	cmn.w	r3, #13
 81102ae:	f000 8098 	beq.w	81103e2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 81102b2:	4b54      	ldr	r3, [pc, #336]	@ (8110404 <tcp_input+0x734>)
 81102b4:	2200      	movs	r2, #0
 81102b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 81102b8:	69f8      	ldr	r0, [r7, #28]
 81102ba:	f000 f915 	bl	81104e8 <tcp_input_delayed_close>
 81102be:	4603      	mov	r3, r0
 81102c0:	2b00      	cmp	r3, #0
 81102c2:	f040 8090 	bne.w	81103e6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 81102c6:	4b4d      	ldr	r3, [pc, #308]	@ (81103fc <tcp_input+0x72c>)
 81102c8:	681b      	ldr	r3, [r3, #0]
 81102ca:	2b00      	cmp	r3, #0
 81102cc:	d041      	beq.n	8110352 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 81102ce:	69fb      	ldr	r3, [r7, #28]
 81102d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81102d2:	2b00      	cmp	r3, #0
 81102d4:	d006      	beq.n	81102e4 <tcp_input+0x614>
 81102d6:	4b50      	ldr	r3, [pc, #320]	@ (8110418 <tcp_input+0x748>)
 81102d8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 81102dc:	494f      	ldr	r1, [pc, #316]	@ (811041c <tcp_input+0x74c>)
 81102de:	4850      	ldr	r0, [pc, #320]	@ (8110420 <tcp_input+0x750>)
 81102e0:	f007 f8aa 	bl	8117438 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 81102e4:	69fb      	ldr	r3, [r7, #28]
 81102e6:	8b5b      	ldrh	r3, [r3, #26]
 81102e8:	f003 0310 	and.w	r3, r3, #16
 81102ec:	2b00      	cmp	r3, #0
 81102ee:	d008      	beq.n	8110302 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 81102f0:	4b42      	ldr	r3, [pc, #264]	@ (81103fc <tcp_input+0x72c>)
 81102f2:	681b      	ldr	r3, [r3, #0]
 81102f4:	4618      	mov	r0, r3
 81102f6:	f7fd fd27 	bl	810dd48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 81102fa:	69f8      	ldr	r0, [r7, #28]
 81102fc:	f7fe faac 	bl	810e858 <tcp_abort>
            goto aborted;
 8110300:	e091      	b.n	8110426 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8110302:	69fb      	ldr	r3, [r7, #28]
 8110304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8110308:	2b00      	cmp	r3, #0
 811030a:	d00c      	beq.n	8110326 <tcp_input+0x656>
 811030c:	69fb      	ldr	r3, [r7, #28]
 811030e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8110312:	69fb      	ldr	r3, [r7, #28]
 8110314:	6918      	ldr	r0, [r3, #16]
 8110316:	4b39      	ldr	r3, [pc, #228]	@ (81103fc <tcp_input+0x72c>)
 8110318:	681a      	ldr	r2, [r3, #0]
 811031a:	2300      	movs	r3, #0
 811031c:	69f9      	ldr	r1, [r7, #28]
 811031e:	47a0      	blx	r4
 8110320:	4603      	mov	r3, r0
 8110322:	74fb      	strb	r3, [r7, #19]
 8110324:	e008      	b.n	8110338 <tcp_input+0x668>
 8110326:	4b35      	ldr	r3, [pc, #212]	@ (81103fc <tcp_input+0x72c>)
 8110328:	681a      	ldr	r2, [r3, #0]
 811032a:	2300      	movs	r3, #0
 811032c:	69f9      	ldr	r1, [r7, #28]
 811032e:	2000      	movs	r0, #0
 8110330:	f7ff f922 	bl	810f578 <tcp_recv_null>
 8110334:	4603      	mov	r3, r0
 8110336:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8110338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811033c:	f113 0f0d 	cmn.w	r3, #13
 8110340:	d053      	beq.n	81103ea <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8110342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8110346:	2b00      	cmp	r3, #0
 8110348:	d003      	beq.n	8110352 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 811034a:	4b2c      	ldr	r3, [pc, #176]	@ (81103fc <tcp_input+0x72c>)
 811034c:	681a      	ldr	r2, [r3, #0]
 811034e:	69fb      	ldr	r3, [r7, #28]
 8110350:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8110352:	4b2b      	ldr	r3, [pc, #172]	@ (8110400 <tcp_input+0x730>)
 8110354:	781b      	ldrb	r3, [r3, #0]
 8110356:	f003 0320 	and.w	r3, r3, #32
 811035a:	2b00      	cmp	r3, #0
 811035c:	d030      	beq.n	81103c0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 811035e:	69fb      	ldr	r3, [r7, #28]
 8110360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110362:	2b00      	cmp	r3, #0
 8110364:	d009      	beq.n	811037a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8110366:	69fb      	ldr	r3, [r7, #28]
 8110368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811036a:	7b5a      	ldrb	r2, [r3, #13]
 811036c:	69fb      	ldr	r3, [r7, #28]
 811036e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110370:	f042 0220 	orr.w	r2, r2, #32
 8110374:	b2d2      	uxtb	r2, r2
 8110376:	735a      	strb	r2, [r3, #13]
 8110378:	e022      	b.n	81103c0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811037a:	69fb      	ldr	r3, [r7, #28]
 811037c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811037e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8110382:	d005      	beq.n	8110390 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8110384:	69fb      	ldr	r3, [r7, #28]
 8110386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8110388:	3301      	adds	r3, #1
 811038a:	b29a      	uxth	r2, r3
 811038c:	69fb      	ldr	r3, [r7, #28]
 811038e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8110390:	69fb      	ldr	r3, [r7, #28]
 8110392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8110396:	2b00      	cmp	r3, #0
 8110398:	d00b      	beq.n	81103b2 <tcp_input+0x6e2>
 811039a:	69fb      	ldr	r3, [r7, #28]
 811039c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 81103a0:	69fb      	ldr	r3, [r7, #28]
 81103a2:	6918      	ldr	r0, [r3, #16]
 81103a4:	2300      	movs	r3, #0
 81103a6:	2200      	movs	r2, #0
 81103a8:	69f9      	ldr	r1, [r7, #28]
 81103aa:	47a0      	blx	r4
 81103ac:	4603      	mov	r3, r0
 81103ae:	74fb      	strb	r3, [r7, #19]
 81103b0:	e001      	b.n	81103b6 <tcp_input+0x6e6>
 81103b2:	2300      	movs	r3, #0
 81103b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 81103b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 81103ba:	f113 0f0d 	cmn.w	r3, #13
 81103be:	d016      	beq.n	81103ee <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 81103c0:	4b13      	ldr	r3, [pc, #76]	@ (8110410 <tcp_input+0x740>)
 81103c2:	2200      	movs	r2, #0
 81103c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 81103c6:	69f8      	ldr	r0, [r7, #28]
 81103c8:	f000 f88e 	bl	81104e8 <tcp_input_delayed_close>
 81103cc:	4603      	mov	r3, r0
 81103ce:	2b00      	cmp	r3, #0
 81103d0:	d128      	bne.n	8110424 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 81103d2:	69f8      	ldr	r0, [r7, #28]
 81103d4:	f002 ff1a 	bl	811320c <tcp_output>
 81103d8:	e025      	b.n	8110426 <tcp_input+0x756>
        goto aborted;
 81103da:	bf00      	nop
 81103dc:	e023      	b.n	8110426 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 81103de:	bf00      	nop
 81103e0:	e021      	b.n	8110426 <tcp_input+0x756>
              goto aborted;
 81103e2:	bf00      	nop
 81103e4:	e01f      	b.n	8110426 <tcp_input+0x756>
          goto aborted;
 81103e6:	bf00      	nop
 81103e8:	e01d      	b.n	8110426 <tcp_input+0x756>
            goto aborted;
 81103ea:	bf00      	nop
 81103ec:	e01b      	b.n	8110426 <tcp_input+0x756>
              goto aborted;
 81103ee:	bf00      	nop
 81103f0:	e019      	b.n	8110426 <tcp_input+0x756>
 81103f2:	bf00      	nop
 81103f4:	10017710 	.word	0x10017710
 81103f8:	10017720 	.word	0x10017720
 81103fc:	10017740 	.word	0x10017740
 8110400:	1001773d 	.word	0x1001773d
 8110404:	10017738 	.word	0x10017738
 8110408:	1001773c 	.word	0x1001773c
 811040c:	1001773a 	.word	0x1001773a
 8110410:	10017744 	.word	0x10017744
 8110414:	10017704 	.word	0x10017704
 8110418:	0811dd74 	.word	0x0811dd74
 811041c:	0811df54 	.word	0x0811df54
 8110420:	0811ddec 	.word	0x0811ddec
          goto aborted;
 8110424:	bf00      	nop
    tcp_input_pcb = NULL;
 8110426:	4b27      	ldr	r3, [pc, #156]	@ (81104c4 <tcp_input+0x7f4>)
 8110428:	2200      	movs	r2, #0
 811042a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 811042c:	4b26      	ldr	r3, [pc, #152]	@ (81104c8 <tcp_input+0x7f8>)
 811042e:	2200      	movs	r2, #0
 8110430:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8110432:	4b26      	ldr	r3, [pc, #152]	@ (81104cc <tcp_input+0x7fc>)
 8110434:	685b      	ldr	r3, [r3, #4]
 8110436:	2b00      	cmp	r3, #0
 8110438:	d03f      	beq.n	81104ba <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 811043a:	4b24      	ldr	r3, [pc, #144]	@ (81104cc <tcp_input+0x7fc>)
 811043c:	685b      	ldr	r3, [r3, #4]
 811043e:	4618      	mov	r0, r3
 8110440:	f7fd fc82 	bl	810dd48 <pbuf_free>
      inseg.p = NULL;
 8110444:	4b21      	ldr	r3, [pc, #132]	@ (81104cc <tcp_input+0x7fc>)
 8110446:	2200      	movs	r2, #0
 8110448:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 811044a:	e036      	b.n	81104ba <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 811044c:	4b20      	ldr	r3, [pc, #128]	@ (81104d0 <tcp_input+0x800>)
 811044e:	681b      	ldr	r3, [r3, #0]
 8110450:	899b      	ldrh	r3, [r3, #12]
 8110452:	b29b      	uxth	r3, r3
 8110454:	4618      	mov	r0, r3
 8110456:	f7f9 fd73 	bl	8109f40 <lwip_htons>
 811045a:	4603      	mov	r3, r0
 811045c:	b2db      	uxtb	r3, r3
 811045e:	f003 0304 	and.w	r3, r3, #4
 8110462:	2b00      	cmp	r3, #0
 8110464:	d118      	bne.n	8110498 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8110466:	4b1b      	ldr	r3, [pc, #108]	@ (81104d4 <tcp_input+0x804>)
 8110468:	6819      	ldr	r1, [r3, #0]
 811046a:	4b1b      	ldr	r3, [pc, #108]	@ (81104d8 <tcp_input+0x808>)
 811046c:	881b      	ldrh	r3, [r3, #0]
 811046e:	461a      	mov	r2, r3
 8110470:	4b1a      	ldr	r3, [pc, #104]	@ (81104dc <tcp_input+0x80c>)
 8110472:	681b      	ldr	r3, [r3, #0]
 8110474:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8110476:	4b16      	ldr	r3, [pc, #88]	@ (81104d0 <tcp_input+0x800>)
 8110478:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811047a:	885b      	ldrh	r3, [r3, #2]
 811047c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811047e:	4a14      	ldr	r2, [pc, #80]	@ (81104d0 <tcp_input+0x800>)
 8110480:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8110482:	8812      	ldrh	r2, [r2, #0]
 8110484:	b292      	uxth	r2, r2
 8110486:	9202      	str	r2, [sp, #8]
 8110488:	9301      	str	r3, [sp, #4]
 811048a:	4b15      	ldr	r3, [pc, #84]	@ (81104e0 <tcp_input+0x810>)
 811048c:	9300      	str	r3, [sp, #0]
 811048e:	4b15      	ldr	r3, [pc, #84]	@ (81104e4 <tcp_input+0x814>)
 8110490:	4602      	mov	r2, r0
 8110492:	2000      	movs	r0, #0
 8110494:	f003 fc6e 	bl	8113d74 <tcp_rst>
    pbuf_free(p);
 8110498:	6878      	ldr	r0, [r7, #4]
 811049a:	f7fd fc55 	bl	810dd48 <pbuf_free>
  return;
 811049e:	e00c      	b.n	81104ba <tcp_input+0x7ea>
    goto dropped;
 81104a0:	bf00      	nop
 81104a2:	e006      	b.n	81104b2 <tcp_input+0x7e2>
    goto dropped;
 81104a4:	bf00      	nop
 81104a6:	e004      	b.n	81104b2 <tcp_input+0x7e2>
    goto dropped;
 81104a8:	bf00      	nop
 81104aa:	e002      	b.n	81104b2 <tcp_input+0x7e2>
      goto dropped;
 81104ac:	bf00      	nop
 81104ae:	e000      	b.n	81104b2 <tcp_input+0x7e2>
      goto dropped;
 81104b0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 81104b2:	6878      	ldr	r0, [r7, #4]
 81104b4:	f7fd fc48 	bl	810dd48 <pbuf_free>
 81104b8:	e000      	b.n	81104bc <tcp_input+0x7ec>
  return;
 81104ba:	bf00      	nop
}
 81104bc:	3724      	adds	r7, #36	@ 0x24
 81104be:	46bd      	mov	sp, r7
 81104c0:	bd90      	pop	{r4, r7, pc}
 81104c2:	bf00      	nop
 81104c4:	10017744 	.word	0x10017744
 81104c8:	10017740 	.word	0x10017740
 81104cc:	10017710 	.word	0x10017710
 81104d0:	10017720 	.word	0x10017720
 81104d4:	10017734 	.word	0x10017734
 81104d8:	1001773a 	.word	0x1001773a
 81104dc:	10017730 	.word	0x10017730
 81104e0:	100145c0 	.word	0x100145c0
 81104e4:	100145c4 	.word	0x100145c4

081104e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 81104e8:	b580      	push	{r7, lr}
 81104ea:	b082      	sub	sp, #8
 81104ec:	af00      	add	r7, sp, #0
 81104ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 81104f0:	687b      	ldr	r3, [r7, #4]
 81104f2:	2b00      	cmp	r3, #0
 81104f4:	d106      	bne.n	8110504 <tcp_input_delayed_close+0x1c>
 81104f6:	4b17      	ldr	r3, [pc, #92]	@ (8110554 <tcp_input_delayed_close+0x6c>)
 81104f8:	f240 225a 	movw	r2, #602	@ 0x25a
 81104fc:	4916      	ldr	r1, [pc, #88]	@ (8110558 <tcp_input_delayed_close+0x70>)
 81104fe:	4817      	ldr	r0, [pc, #92]	@ (811055c <tcp_input_delayed_close+0x74>)
 8110500:	f006 ff9a 	bl	8117438 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8110504:	4b16      	ldr	r3, [pc, #88]	@ (8110560 <tcp_input_delayed_close+0x78>)
 8110506:	781b      	ldrb	r3, [r3, #0]
 8110508:	f003 0310 	and.w	r3, r3, #16
 811050c:	2b00      	cmp	r3, #0
 811050e:	d01c      	beq.n	811054a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8110510:	687b      	ldr	r3, [r7, #4]
 8110512:	8b5b      	ldrh	r3, [r3, #26]
 8110514:	f003 0310 	and.w	r3, r3, #16
 8110518:	2b00      	cmp	r3, #0
 811051a:	d10d      	bne.n	8110538 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 811051c:	687b      	ldr	r3, [r7, #4]
 811051e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110522:	2b00      	cmp	r3, #0
 8110524:	d008      	beq.n	8110538 <tcp_input_delayed_close+0x50>
 8110526:	687b      	ldr	r3, [r7, #4]
 8110528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811052c:	687a      	ldr	r2, [r7, #4]
 811052e:	6912      	ldr	r2, [r2, #16]
 8110530:	f06f 010e 	mvn.w	r1, #14
 8110534:	4610      	mov	r0, r2
 8110536:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8110538:	6879      	ldr	r1, [r7, #4]
 811053a:	480a      	ldr	r0, [pc, #40]	@ (8110564 <tcp_input_delayed_close+0x7c>)
 811053c:	f7ff fa50 	bl	810f9e0 <tcp_pcb_remove>
    tcp_free(pcb);
 8110540:	6878      	ldr	r0, [r7, #4]
 8110542:	f7fd fea1 	bl	810e288 <tcp_free>
    return 1;
 8110546:	2301      	movs	r3, #1
 8110548:	e000      	b.n	811054c <tcp_input_delayed_close+0x64>
  }
  return 0;
 811054a:	2300      	movs	r3, #0
}
 811054c:	4618      	mov	r0, r3
 811054e:	3708      	adds	r7, #8
 8110550:	46bd      	mov	sp, r7
 8110552:	bd80      	pop	{r7, pc}
 8110554:	0811dd74 	.word	0x0811dd74
 8110558:	0811df70 	.word	0x0811df70
 811055c:	0811ddec 	.word	0x0811ddec
 8110560:	1001773d 	.word	0x1001773d
 8110564:	10017704 	.word	0x10017704

08110568 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8110568:	b590      	push	{r4, r7, lr}
 811056a:	b08b      	sub	sp, #44	@ 0x2c
 811056c:	af04      	add	r7, sp, #16
 811056e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8110570:	4b6f      	ldr	r3, [pc, #444]	@ (8110730 <tcp_listen_input+0x1c8>)
 8110572:	781b      	ldrb	r3, [r3, #0]
 8110574:	f003 0304 	and.w	r3, r3, #4
 8110578:	2b00      	cmp	r3, #0
 811057a:	f040 80d2 	bne.w	8110722 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 811057e:	687b      	ldr	r3, [r7, #4]
 8110580:	2b00      	cmp	r3, #0
 8110582:	d106      	bne.n	8110592 <tcp_listen_input+0x2a>
 8110584:	4b6b      	ldr	r3, [pc, #428]	@ (8110734 <tcp_listen_input+0x1cc>)
 8110586:	f240 2281 	movw	r2, #641	@ 0x281
 811058a:	496b      	ldr	r1, [pc, #428]	@ (8110738 <tcp_listen_input+0x1d0>)
 811058c:	486b      	ldr	r0, [pc, #428]	@ (811073c <tcp_listen_input+0x1d4>)
 811058e:	f006 ff53 	bl	8117438 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8110592:	4b67      	ldr	r3, [pc, #412]	@ (8110730 <tcp_listen_input+0x1c8>)
 8110594:	781b      	ldrb	r3, [r3, #0]
 8110596:	f003 0310 	and.w	r3, r3, #16
 811059a:	2b00      	cmp	r3, #0
 811059c:	d019      	beq.n	81105d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811059e:	4b68      	ldr	r3, [pc, #416]	@ (8110740 <tcp_listen_input+0x1d8>)
 81105a0:	6819      	ldr	r1, [r3, #0]
 81105a2:	4b68      	ldr	r3, [pc, #416]	@ (8110744 <tcp_listen_input+0x1dc>)
 81105a4:	881b      	ldrh	r3, [r3, #0]
 81105a6:	461a      	mov	r2, r3
 81105a8:	4b67      	ldr	r3, [pc, #412]	@ (8110748 <tcp_listen_input+0x1e0>)
 81105aa:	681b      	ldr	r3, [r3, #0]
 81105ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81105ae:	4b67      	ldr	r3, [pc, #412]	@ (811074c <tcp_listen_input+0x1e4>)
 81105b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81105b2:	885b      	ldrh	r3, [r3, #2]
 81105b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81105b6:	4a65      	ldr	r2, [pc, #404]	@ (811074c <tcp_listen_input+0x1e4>)
 81105b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81105ba:	8812      	ldrh	r2, [r2, #0]
 81105bc:	b292      	uxth	r2, r2
 81105be:	9202      	str	r2, [sp, #8]
 81105c0:	9301      	str	r3, [sp, #4]
 81105c2:	4b63      	ldr	r3, [pc, #396]	@ (8110750 <tcp_listen_input+0x1e8>)
 81105c4:	9300      	str	r3, [sp, #0]
 81105c6:	4b63      	ldr	r3, [pc, #396]	@ (8110754 <tcp_listen_input+0x1ec>)
 81105c8:	4602      	mov	r2, r0
 81105ca:	6878      	ldr	r0, [r7, #4]
 81105cc:	f003 fbd2 	bl	8113d74 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 81105d0:	e0a9      	b.n	8110726 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 81105d2:	4b57      	ldr	r3, [pc, #348]	@ (8110730 <tcp_listen_input+0x1c8>)
 81105d4:	781b      	ldrb	r3, [r3, #0]
 81105d6:	f003 0302 	and.w	r3, r3, #2
 81105da:	2b00      	cmp	r3, #0
 81105dc:	f000 80a3 	beq.w	8110726 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 81105e0:	687b      	ldr	r3, [r7, #4]
 81105e2:	7d5b      	ldrb	r3, [r3, #21]
 81105e4:	4618      	mov	r0, r3
 81105e6:	f7ff f8eb 	bl	810f7c0 <tcp_alloc>
 81105ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 81105ec:	697b      	ldr	r3, [r7, #20]
 81105ee:	2b00      	cmp	r3, #0
 81105f0:	d111      	bne.n	8110616 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 81105f2:	687b      	ldr	r3, [r7, #4]
 81105f4:	699b      	ldr	r3, [r3, #24]
 81105f6:	2b00      	cmp	r3, #0
 81105f8:	d00a      	beq.n	8110610 <tcp_listen_input+0xa8>
 81105fa:	687b      	ldr	r3, [r7, #4]
 81105fc:	699b      	ldr	r3, [r3, #24]
 81105fe:	687a      	ldr	r2, [r7, #4]
 8110600:	6910      	ldr	r0, [r2, #16]
 8110602:	f04f 32ff 	mov.w	r2, #4294967295
 8110606:	2100      	movs	r1, #0
 8110608:	4798      	blx	r3
 811060a:	4603      	mov	r3, r0
 811060c:	73bb      	strb	r3, [r7, #14]
      return;
 811060e:	e08b      	b.n	8110728 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8110610:	23f0      	movs	r3, #240	@ 0xf0
 8110612:	73bb      	strb	r3, [r7, #14]
      return;
 8110614:	e088      	b.n	8110728 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8110616:	4b50      	ldr	r3, [pc, #320]	@ (8110758 <tcp_listen_input+0x1f0>)
 8110618:	695a      	ldr	r2, [r3, #20]
 811061a:	697b      	ldr	r3, [r7, #20]
 811061c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 811061e:	4b4e      	ldr	r3, [pc, #312]	@ (8110758 <tcp_listen_input+0x1f0>)
 8110620:	691a      	ldr	r2, [r3, #16]
 8110622:	697b      	ldr	r3, [r7, #20]
 8110624:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8110626:	687b      	ldr	r3, [r7, #4]
 8110628:	8ada      	ldrh	r2, [r3, #22]
 811062a:	697b      	ldr	r3, [r7, #20]
 811062c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 811062e:	4b47      	ldr	r3, [pc, #284]	@ (811074c <tcp_listen_input+0x1e4>)
 8110630:	681b      	ldr	r3, [r3, #0]
 8110632:	881b      	ldrh	r3, [r3, #0]
 8110634:	b29a      	uxth	r2, r3
 8110636:	697b      	ldr	r3, [r7, #20]
 8110638:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 811063a:	697b      	ldr	r3, [r7, #20]
 811063c:	2203      	movs	r2, #3
 811063e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8110640:	4b41      	ldr	r3, [pc, #260]	@ (8110748 <tcp_listen_input+0x1e0>)
 8110642:	681b      	ldr	r3, [r3, #0]
 8110644:	1c5a      	adds	r2, r3, #1
 8110646:	697b      	ldr	r3, [r7, #20]
 8110648:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 811064a:	697b      	ldr	r3, [r7, #20]
 811064c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811064e:	697b      	ldr	r3, [r7, #20]
 8110650:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8110652:	6978      	ldr	r0, [r7, #20]
 8110654:	f7ff fa58 	bl	810fb08 <tcp_next_iss>
 8110658:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 811065a:	697b      	ldr	r3, [r7, #20]
 811065c:	693a      	ldr	r2, [r7, #16]
 811065e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8110660:	697b      	ldr	r3, [r7, #20]
 8110662:	693a      	ldr	r2, [r7, #16]
 8110664:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8110666:	697b      	ldr	r3, [r7, #20]
 8110668:	693a      	ldr	r2, [r7, #16]
 811066a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 811066c:	697b      	ldr	r3, [r7, #20]
 811066e:	693a      	ldr	r2, [r7, #16]
 8110670:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8110672:	4b35      	ldr	r3, [pc, #212]	@ (8110748 <tcp_listen_input+0x1e0>)
 8110674:	681b      	ldr	r3, [r3, #0]
 8110676:	1e5a      	subs	r2, r3, #1
 8110678:	697b      	ldr	r3, [r7, #20]
 811067a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 811067c:	687b      	ldr	r3, [r7, #4]
 811067e:	691a      	ldr	r2, [r3, #16]
 8110680:	697b      	ldr	r3, [r7, #20]
 8110682:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8110684:	697b      	ldr	r3, [r7, #20]
 8110686:	687a      	ldr	r2, [r7, #4]
 8110688:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 811068a:	687b      	ldr	r3, [r7, #4]
 811068c:	7a5b      	ldrb	r3, [r3, #9]
 811068e:	f003 030c 	and.w	r3, r3, #12
 8110692:	b2da      	uxtb	r2, r3
 8110694:	697b      	ldr	r3, [r7, #20]
 8110696:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8110698:	687b      	ldr	r3, [r7, #4]
 811069a:	7a1a      	ldrb	r2, [r3, #8]
 811069c:	697b      	ldr	r3, [r7, #20]
 811069e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 81106a0:	4b2e      	ldr	r3, [pc, #184]	@ (811075c <tcp_listen_input+0x1f4>)
 81106a2:	681a      	ldr	r2, [r3, #0]
 81106a4:	697b      	ldr	r3, [r7, #20]
 81106a6:	60da      	str	r2, [r3, #12]
 81106a8:	4a2c      	ldr	r2, [pc, #176]	@ (811075c <tcp_listen_input+0x1f4>)
 81106aa:	697b      	ldr	r3, [r7, #20]
 81106ac:	6013      	str	r3, [r2, #0]
 81106ae:	f003 fd23 	bl	81140f8 <tcp_timer_needed>
 81106b2:	4b2b      	ldr	r3, [pc, #172]	@ (8110760 <tcp_listen_input+0x1f8>)
 81106b4:	2201      	movs	r2, #1
 81106b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 81106b8:	6978      	ldr	r0, [r7, #20]
 81106ba:	f001 fd8b 	bl	81121d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 81106be:	4b23      	ldr	r3, [pc, #140]	@ (811074c <tcp_listen_input+0x1e4>)
 81106c0:	681b      	ldr	r3, [r3, #0]
 81106c2:	89db      	ldrh	r3, [r3, #14]
 81106c4:	b29a      	uxth	r2, r3
 81106c6:	697b      	ldr	r3, [r7, #20]
 81106c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 81106cc:	697b      	ldr	r3, [r7, #20]
 81106ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81106d2:	697b      	ldr	r3, [r7, #20]
 81106d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 81106d8:	697b      	ldr	r3, [r7, #20]
 81106da:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 81106dc:	697b      	ldr	r3, [r7, #20]
 81106de:	3304      	adds	r3, #4
 81106e0:	4618      	mov	r0, r3
 81106e2:	f7fa ff05 	bl	810b4f0 <ip4_route>
 81106e6:	4601      	mov	r1, r0
 81106e8:	697b      	ldr	r3, [r7, #20]
 81106ea:	3304      	adds	r3, #4
 81106ec:	461a      	mov	r2, r3
 81106ee:	4620      	mov	r0, r4
 81106f0:	f7ff fa30 	bl	810fb54 <tcp_eff_send_mss_netif>
 81106f4:	4603      	mov	r3, r0
 81106f6:	461a      	mov	r2, r3
 81106f8:	697b      	ldr	r3, [r7, #20]
 81106fa:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 81106fc:	2112      	movs	r1, #18
 81106fe:	6978      	ldr	r0, [r7, #20]
 8110700:	f002 fc96 	bl	8113030 <tcp_enqueue_flags>
 8110704:	4603      	mov	r3, r0
 8110706:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8110708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811070c:	2b00      	cmp	r3, #0
 811070e:	d004      	beq.n	811071a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8110710:	2100      	movs	r1, #0
 8110712:	6978      	ldr	r0, [r7, #20]
 8110714:	f7fd ffe2 	bl	810e6dc <tcp_abandon>
      return;
 8110718:	e006      	b.n	8110728 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 811071a:	6978      	ldr	r0, [r7, #20]
 811071c:	f002 fd76 	bl	811320c <tcp_output>
  return;
 8110720:	e001      	b.n	8110726 <tcp_listen_input+0x1be>
    return;
 8110722:	bf00      	nop
 8110724:	e000      	b.n	8110728 <tcp_listen_input+0x1c0>
  return;
 8110726:	bf00      	nop
}
 8110728:	371c      	adds	r7, #28
 811072a:	46bd      	mov	sp, r7
 811072c:	bd90      	pop	{r4, r7, pc}
 811072e:	bf00      	nop
 8110730:	1001773c 	.word	0x1001773c
 8110734:	0811dd74 	.word	0x0811dd74
 8110738:	0811df98 	.word	0x0811df98
 811073c:	0811ddec 	.word	0x0811ddec
 8110740:	10017734 	.word	0x10017734
 8110744:	1001773a 	.word	0x1001773a
 8110748:	10017730 	.word	0x10017730
 811074c:	10017720 	.word	0x10017720
 8110750:	100145c0 	.word	0x100145c0
 8110754:	100145c4 	.word	0x100145c4
 8110758:	100145b0 	.word	0x100145b0
 811075c:	10017704 	.word	0x10017704
 8110760:	1001770c 	.word	0x1001770c

08110764 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8110764:	b580      	push	{r7, lr}
 8110766:	b086      	sub	sp, #24
 8110768:	af04      	add	r7, sp, #16
 811076a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 811076c:	4b2f      	ldr	r3, [pc, #188]	@ (811082c <tcp_timewait_input+0xc8>)
 811076e:	781b      	ldrb	r3, [r3, #0]
 8110770:	f003 0304 	and.w	r3, r3, #4
 8110774:	2b00      	cmp	r3, #0
 8110776:	d153      	bne.n	8110820 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8110778:	687b      	ldr	r3, [r7, #4]
 811077a:	2b00      	cmp	r3, #0
 811077c:	d106      	bne.n	811078c <tcp_timewait_input+0x28>
 811077e:	4b2c      	ldr	r3, [pc, #176]	@ (8110830 <tcp_timewait_input+0xcc>)
 8110780:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8110784:	492b      	ldr	r1, [pc, #172]	@ (8110834 <tcp_timewait_input+0xd0>)
 8110786:	482c      	ldr	r0, [pc, #176]	@ (8110838 <tcp_timewait_input+0xd4>)
 8110788:	f006 fe56 	bl	8117438 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 811078c:	4b27      	ldr	r3, [pc, #156]	@ (811082c <tcp_timewait_input+0xc8>)
 811078e:	781b      	ldrb	r3, [r3, #0]
 8110790:	f003 0302 	and.w	r3, r3, #2
 8110794:	2b00      	cmp	r3, #0
 8110796:	d02a      	beq.n	81107ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8110798:	4b28      	ldr	r3, [pc, #160]	@ (811083c <tcp_timewait_input+0xd8>)
 811079a:	681a      	ldr	r2, [r3, #0]
 811079c:	687b      	ldr	r3, [r7, #4]
 811079e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81107a0:	1ad3      	subs	r3, r2, r3
 81107a2:	2b00      	cmp	r3, #0
 81107a4:	db2d      	blt.n	8110802 <tcp_timewait_input+0x9e>
 81107a6:	4b25      	ldr	r3, [pc, #148]	@ (811083c <tcp_timewait_input+0xd8>)
 81107a8:	681a      	ldr	r2, [r3, #0]
 81107aa:	687b      	ldr	r3, [r7, #4]
 81107ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81107ae:	6879      	ldr	r1, [r7, #4]
 81107b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81107b2:	440b      	add	r3, r1
 81107b4:	1ad3      	subs	r3, r2, r3
 81107b6:	2b00      	cmp	r3, #0
 81107b8:	dc23      	bgt.n	8110802 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81107ba:	4b21      	ldr	r3, [pc, #132]	@ (8110840 <tcp_timewait_input+0xdc>)
 81107bc:	6819      	ldr	r1, [r3, #0]
 81107be:	4b21      	ldr	r3, [pc, #132]	@ (8110844 <tcp_timewait_input+0xe0>)
 81107c0:	881b      	ldrh	r3, [r3, #0]
 81107c2:	461a      	mov	r2, r3
 81107c4:	4b1d      	ldr	r3, [pc, #116]	@ (811083c <tcp_timewait_input+0xd8>)
 81107c6:	681b      	ldr	r3, [r3, #0]
 81107c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81107ca:	4b1f      	ldr	r3, [pc, #124]	@ (8110848 <tcp_timewait_input+0xe4>)
 81107cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81107ce:	885b      	ldrh	r3, [r3, #2]
 81107d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81107d2:	4a1d      	ldr	r2, [pc, #116]	@ (8110848 <tcp_timewait_input+0xe4>)
 81107d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81107d6:	8812      	ldrh	r2, [r2, #0]
 81107d8:	b292      	uxth	r2, r2
 81107da:	9202      	str	r2, [sp, #8]
 81107dc:	9301      	str	r3, [sp, #4]
 81107de:	4b1b      	ldr	r3, [pc, #108]	@ (811084c <tcp_timewait_input+0xe8>)
 81107e0:	9300      	str	r3, [sp, #0]
 81107e2:	4b1b      	ldr	r3, [pc, #108]	@ (8110850 <tcp_timewait_input+0xec>)
 81107e4:	4602      	mov	r2, r0
 81107e6:	6878      	ldr	r0, [r7, #4]
 81107e8:	f003 fac4 	bl	8113d74 <tcp_rst>
      return;
 81107ec:	e01b      	b.n	8110826 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 81107ee:	4b0f      	ldr	r3, [pc, #60]	@ (811082c <tcp_timewait_input+0xc8>)
 81107f0:	781b      	ldrb	r3, [r3, #0]
 81107f2:	f003 0301 	and.w	r3, r3, #1
 81107f6:	2b00      	cmp	r3, #0
 81107f8:	d003      	beq.n	8110802 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 81107fa:	4b16      	ldr	r3, [pc, #88]	@ (8110854 <tcp_timewait_input+0xf0>)
 81107fc:	681a      	ldr	r2, [r3, #0]
 81107fe:	687b      	ldr	r3, [r7, #4]
 8110800:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8110802:	4b10      	ldr	r3, [pc, #64]	@ (8110844 <tcp_timewait_input+0xe0>)
 8110804:	881b      	ldrh	r3, [r3, #0]
 8110806:	2b00      	cmp	r3, #0
 8110808:	d00c      	beq.n	8110824 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 811080a:	687b      	ldr	r3, [r7, #4]
 811080c:	8b5b      	ldrh	r3, [r3, #26]
 811080e:	f043 0302 	orr.w	r3, r3, #2
 8110812:	b29a      	uxth	r2, r3
 8110814:	687b      	ldr	r3, [r7, #4]
 8110816:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8110818:	6878      	ldr	r0, [r7, #4]
 811081a:	f002 fcf7 	bl	811320c <tcp_output>
  }
  return;
 811081e:	e001      	b.n	8110824 <tcp_timewait_input+0xc0>
    return;
 8110820:	bf00      	nop
 8110822:	e000      	b.n	8110826 <tcp_timewait_input+0xc2>
  return;
 8110824:	bf00      	nop
}
 8110826:	3708      	adds	r7, #8
 8110828:	46bd      	mov	sp, r7
 811082a:	bd80      	pop	{r7, pc}
 811082c:	1001773c 	.word	0x1001773c
 8110830:	0811dd74 	.word	0x0811dd74
 8110834:	0811dfb8 	.word	0x0811dfb8
 8110838:	0811ddec 	.word	0x0811ddec
 811083c:	10017730 	.word	0x10017730
 8110840:	10017734 	.word	0x10017734
 8110844:	1001773a 	.word	0x1001773a
 8110848:	10017720 	.word	0x10017720
 811084c:	100145c0 	.word	0x100145c0
 8110850:	100145c4 	.word	0x100145c4
 8110854:	100176f8 	.word	0x100176f8

08110858 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8110858:	b590      	push	{r4, r7, lr}
 811085a:	b08d      	sub	sp, #52	@ 0x34
 811085c:	af04      	add	r7, sp, #16
 811085e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8110860:	2300      	movs	r3, #0
 8110862:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8110864:	2300      	movs	r3, #0
 8110866:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8110868:	687b      	ldr	r3, [r7, #4]
 811086a:	2b00      	cmp	r3, #0
 811086c:	d106      	bne.n	811087c <tcp_process+0x24>
 811086e:	4b9d      	ldr	r3, [pc, #628]	@ (8110ae4 <tcp_process+0x28c>)
 8110870:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8110874:	499c      	ldr	r1, [pc, #624]	@ (8110ae8 <tcp_process+0x290>)
 8110876:	489d      	ldr	r0, [pc, #628]	@ (8110aec <tcp_process+0x294>)
 8110878:	f006 fdde 	bl	8117438 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 811087c:	4b9c      	ldr	r3, [pc, #624]	@ (8110af0 <tcp_process+0x298>)
 811087e:	781b      	ldrb	r3, [r3, #0]
 8110880:	f003 0304 	and.w	r3, r3, #4
 8110884:	2b00      	cmp	r3, #0
 8110886:	d04e      	beq.n	8110926 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8110888:	687b      	ldr	r3, [r7, #4]
 811088a:	7d1b      	ldrb	r3, [r3, #20]
 811088c:	2b02      	cmp	r3, #2
 811088e:	d108      	bne.n	81108a2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8110890:	687b      	ldr	r3, [r7, #4]
 8110892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8110894:	4b97      	ldr	r3, [pc, #604]	@ (8110af4 <tcp_process+0x29c>)
 8110896:	681b      	ldr	r3, [r3, #0]
 8110898:	429a      	cmp	r2, r3
 811089a:	d123      	bne.n	81108e4 <tcp_process+0x8c>
        acceptable = 1;
 811089c:	2301      	movs	r3, #1
 811089e:	76fb      	strb	r3, [r7, #27]
 81108a0:	e020      	b.n	81108e4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 81108a2:	687b      	ldr	r3, [r7, #4]
 81108a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81108a6:	4b94      	ldr	r3, [pc, #592]	@ (8110af8 <tcp_process+0x2a0>)
 81108a8:	681b      	ldr	r3, [r3, #0]
 81108aa:	429a      	cmp	r2, r3
 81108ac:	d102      	bne.n	81108b4 <tcp_process+0x5c>
        acceptable = 1;
 81108ae:	2301      	movs	r3, #1
 81108b0:	76fb      	strb	r3, [r7, #27]
 81108b2:	e017      	b.n	81108e4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 81108b4:	4b90      	ldr	r3, [pc, #576]	@ (8110af8 <tcp_process+0x2a0>)
 81108b6:	681a      	ldr	r2, [r3, #0]
 81108b8:	687b      	ldr	r3, [r7, #4]
 81108ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81108bc:	1ad3      	subs	r3, r2, r3
 81108be:	2b00      	cmp	r3, #0
 81108c0:	db10      	blt.n	81108e4 <tcp_process+0x8c>
 81108c2:	4b8d      	ldr	r3, [pc, #564]	@ (8110af8 <tcp_process+0x2a0>)
 81108c4:	681a      	ldr	r2, [r3, #0]
 81108c6:	687b      	ldr	r3, [r7, #4]
 81108c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81108ca:	6879      	ldr	r1, [r7, #4]
 81108cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81108ce:	440b      	add	r3, r1
 81108d0:	1ad3      	subs	r3, r2, r3
 81108d2:	2b00      	cmp	r3, #0
 81108d4:	dc06      	bgt.n	81108e4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 81108d6:	687b      	ldr	r3, [r7, #4]
 81108d8:	8b5b      	ldrh	r3, [r3, #26]
 81108da:	f043 0302 	orr.w	r3, r3, #2
 81108de:	b29a      	uxth	r2, r3
 81108e0:	687b      	ldr	r3, [r7, #4]
 81108e2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 81108e4:	7efb      	ldrb	r3, [r7, #27]
 81108e6:	2b00      	cmp	r3, #0
 81108e8:	d01b      	beq.n	8110922 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 81108ea:	687b      	ldr	r3, [r7, #4]
 81108ec:	7d1b      	ldrb	r3, [r3, #20]
 81108ee:	2b00      	cmp	r3, #0
 81108f0:	d106      	bne.n	8110900 <tcp_process+0xa8>
 81108f2:	4b7c      	ldr	r3, [pc, #496]	@ (8110ae4 <tcp_process+0x28c>)
 81108f4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 81108f8:	4980      	ldr	r1, [pc, #512]	@ (8110afc <tcp_process+0x2a4>)
 81108fa:	487c      	ldr	r0, [pc, #496]	@ (8110aec <tcp_process+0x294>)
 81108fc:	f006 fd9c 	bl	8117438 <iprintf>
      recv_flags |= TF_RESET;
 8110900:	4b7f      	ldr	r3, [pc, #508]	@ (8110b00 <tcp_process+0x2a8>)
 8110902:	781b      	ldrb	r3, [r3, #0]
 8110904:	f043 0308 	orr.w	r3, r3, #8
 8110908:	b2da      	uxtb	r2, r3
 811090a:	4b7d      	ldr	r3, [pc, #500]	@ (8110b00 <tcp_process+0x2a8>)
 811090c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 811090e:	687b      	ldr	r3, [r7, #4]
 8110910:	8b5b      	ldrh	r3, [r3, #26]
 8110912:	f023 0301 	bic.w	r3, r3, #1
 8110916:	b29a      	uxth	r2, r3
 8110918:	687b      	ldr	r3, [r7, #4]
 811091a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 811091c:	f06f 030d 	mvn.w	r3, #13
 8110920:	e37a      	b.n	8111018 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8110922:	2300      	movs	r3, #0
 8110924:	e378      	b.n	8111018 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8110926:	4b72      	ldr	r3, [pc, #456]	@ (8110af0 <tcp_process+0x298>)
 8110928:	781b      	ldrb	r3, [r3, #0]
 811092a:	f003 0302 	and.w	r3, r3, #2
 811092e:	2b00      	cmp	r3, #0
 8110930:	d010      	beq.n	8110954 <tcp_process+0xfc>
 8110932:	687b      	ldr	r3, [r7, #4]
 8110934:	7d1b      	ldrb	r3, [r3, #20]
 8110936:	2b02      	cmp	r3, #2
 8110938:	d00c      	beq.n	8110954 <tcp_process+0xfc>
 811093a:	687b      	ldr	r3, [r7, #4]
 811093c:	7d1b      	ldrb	r3, [r3, #20]
 811093e:	2b03      	cmp	r3, #3
 8110940:	d008      	beq.n	8110954 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8110942:	687b      	ldr	r3, [r7, #4]
 8110944:	8b5b      	ldrh	r3, [r3, #26]
 8110946:	f043 0302 	orr.w	r3, r3, #2
 811094a:	b29a      	uxth	r2, r3
 811094c:	687b      	ldr	r3, [r7, #4]
 811094e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8110950:	2300      	movs	r3, #0
 8110952:	e361      	b.n	8111018 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8110954:	687b      	ldr	r3, [r7, #4]
 8110956:	8b5b      	ldrh	r3, [r3, #26]
 8110958:	f003 0310 	and.w	r3, r3, #16
 811095c:	2b00      	cmp	r3, #0
 811095e:	d103      	bne.n	8110968 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8110960:	4b68      	ldr	r3, [pc, #416]	@ (8110b04 <tcp_process+0x2ac>)
 8110962:	681a      	ldr	r2, [r3, #0]
 8110964:	687b      	ldr	r3, [r7, #4]
 8110966:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8110968:	687b      	ldr	r3, [r7, #4]
 811096a:	2200      	movs	r2, #0
 811096c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8110970:	687b      	ldr	r3, [r7, #4]
 8110972:	2200      	movs	r2, #0
 8110974:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8110978:	6878      	ldr	r0, [r7, #4]
 811097a:	f001 fc2b 	bl	81121d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 811097e:	687b      	ldr	r3, [r7, #4]
 8110980:	7d1b      	ldrb	r3, [r3, #20]
 8110982:	3b02      	subs	r3, #2
 8110984:	2b07      	cmp	r3, #7
 8110986:	f200 8337 	bhi.w	8110ff8 <tcp_process+0x7a0>
 811098a:	a201      	add	r2, pc, #4	@ (adr r2, 8110990 <tcp_process+0x138>)
 811098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110990:	081109b1 	.word	0x081109b1
 8110994:	08110be1 	.word	0x08110be1
 8110998:	08110d59 	.word	0x08110d59
 811099c:	08110d83 	.word	0x08110d83
 81109a0:	08110ea7 	.word	0x08110ea7
 81109a4:	08110d59 	.word	0x08110d59
 81109a8:	08110f33 	.word	0x08110f33
 81109ac:	08110fc3 	.word	0x08110fc3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 81109b0:	4b4f      	ldr	r3, [pc, #316]	@ (8110af0 <tcp_process+0x298>)
 81109b2:	781b      	ldrb	r3, [r3, #0]
 81109b4:	f003 0310 	and.w	r3, r3, #16
 81109b8:	2b00      	cmp	r3, #0
 81109ba:	f000 80e4 	beq.w	8110b86 <tcp_process+0x32e>
 81109be:	4b4c      	ldr	r3, [pc, #304]	@ (8110af0 <tcp_process+0x298>)
 81109c0:	781b      	ldrb	r3, [r3, #0]
 81109c2:	f003 0302 	and.w	r3, r3, #2
 81109c6:	2b00      	cmp	r3, #0
 81109c8:	f000 80dd 	beq.w	8110b86 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 81109cc:	687b      	ldr	r3, [r7, #4]
 81109ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81109d0:	1c5a      	adds	r2, r3, #1
 81109d2:	4b48      	ldr	r3, [pc, #288]	@ (8110af4 <tcp_process+0x29c>)
 81109d4:	681b      	ldr	r3, [r3, #0]
 81109d6:	429a      	cmp	r2, r3
 81109d8:	f040 80d5 	bne.w	8110b86 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 81109dc:	4b46      	ldr	r3, [pc, #280]	@ (8110af8 <tcp_process+0x2a0>)
 81109de:	681b      	ldr	r3, [r3, #0]
 81109e0:	1c5a      	adds	r2, r3, #1
 81109e2:	687b      	ldr	r3, [r7, #4]
 81109e4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 81109e6:	687b      	ldr	r3, [r7, #4]
 81109e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81109ea:	687b      	ldr	r3, [r7, #4]
 81109ec:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 81109ee:	4b41      	ldr	r3, [pc, #260]	@ (8110af4 <tcp_process+0x29c>)
 81109f0:	681a      	ldr	r2, [r3, #0]
 81109f2:	687b      	ldr	r3, [r7, #4]
 81109f4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 81109f6:	4b44      	ldr	r3, [pc, #272]	@ (8110b08 <tcp_process+0x2b0>)
 81109f8:	681b      	ldr	r3, [r3, #0]
 81109fa:	89db      	ldrh	r3, [r3, #14]
 81109fc:	b29a      	uxth	r2, r3
 81109fe:	687b      	ldr	r3, [r7, #4]
 8110a00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8110a04:	687b      	ldr	r3, [r7, #4]
 8110a06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8110a0a:	687b      	ldr	r3, [r7, #4]
 8110a0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8110a10:	4b39      	ldr	r3, [pc, #228]	@ (8110af8 <tcp_process+0x2a0>)
 8110a12:	681b      	ldr	r3, [r3, #0]
 8110a14:	1e5a      	subs	r2, r3, #1
 8110a16:	687b      	ldr	r3, [r7, #4]
 8110a18:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8110a1a:	687b      	ldr	r3, [r7, #4]
 8110a1c:	2204      	movs	r2, #4
 8110a1e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8110a20:	687b      	ldr	r3, [r7, #4]
 8110a22:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8110a24:	687b      	ldr	r3, [r7, #4]
 8110a26:	3304      	adds	r3, #4
 8110a28:	4618      	mov	r0, r3
 8110a2a:	f7fa fd61 	bl	810b4f0 <ip4_route>
 8110a2e:	4601      	mov	r1, r0
 8110a30:	687b      	ldr	r3, [r7, #4]
 8110a32:	3304      	adds	r3, #4
 8110a34:	461a      	mov	r2, r3
 8110a36:	4620      	mov	r0, r4
 8110a38:	f7ff f88c 	bl	810fb54 <tcp_eff_send_mss_netif>
 8110a3c:	4603      	mov	r3, r0
 8110a3e:	461a      	mov	r2, r3
 8110a40:	687b      	ldr	r3, [r7, #4]
 8110a42:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8110a44:	687b      	ldr	r3, [r7, #4]
 8110a46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110a48:	009a      	lsls	r2, r3, #2
 8110a4a:	687b      	ldr	r3, [r7, #4]
 8110a4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110a4e:	005b      	lsls	r3, r3, #1
 8110a50:	f241 111c 	movw	r1, #4380	@ 0x111c
 8110a54:	428b      	cmp	r3, r1
 8110a56:	bf38      	it	cc
 8110a58:	460b      	movcc	r3, r1
 8110a5a:	429a      	cmp	r2, r3
 8110a5c:	d204      	bcs.n	8110a68 <tcp_process+0x210>
 8110a5e:	687b      	ldr	r3, [r7, #4]
 8110a60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110a62:	009b      	lsls	r3, r3, #2
 8110a64:	b29b      	uxth	r3, r3
 8110a66:	e00d      	b.n	8110a84 <tcp_process+0x22c>
 8110a68:	687b      	ldr	r3, [r7, #4]
 8110a6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110a6c:	005b      	lsls	r3, r3, #1
 8110a6e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8110a72:	4293      	cmp	r3, r2
 8110a74:	d904      	bls.n	8110a80 <tcp_process+0x228>
 8110a76:	687b      	ldr	r3, [r7, #4]
 8110a78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110a7a:	005b      	lsls	r3, r3, #1
 8110a7c:	b29b      	uxth	r3, r3
 8110a7e:	e001      	b.n	8110a84 <tcp_process+0x22c>
 8110a80:	f241 131c 	movw	r3, #4380	@ 0x111c
 8110a84:	687a      	ldr	r2, [r7, #4]
 8110a86:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8110a8a:	687b      	ldr	r3, [r7, #4]
 8110a8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8110a90:	2b00      	cmp	r3, #0
 8110a92:	d106      	bne.n	8110aa2 <tcp_process+0x24a>
 8110a94:	4b13      	ldr	r3, [pc, #76]	@ (8110ae4 <tcp_process+0x28c>)
 8110a96:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8110a9a:	491c      	ldr	r1, [pc, #112]	@ (8110b0c <tcp_process+0x2b4>)
 8110a9c:	4813      	ldr	r0, [pc, #76]	@ (8110aec <tcp_process+0x294>)
 8110a9e:	f006 fccb 	bl	8117438 <iprintf>
        --pcb->snd_queuelen;
 8110aa2:	687b      	ldr	r3, [r7, #4]
 8110aa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8110aa8:	3b01      	subs	r3, #1
 8110aaa:	b29a      	uxth	r2, r3
 8110aac:	687b      	ldr	r3, [r7, #4]
 8110aae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8110ab2:	687b      	ldr	r3, [r7, #4]
 8110ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110ab6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8110ab8:	69fb      	ldr	r3, [r7, #28]
 8110aba:	2b00      	cmp	r3, #0
 8110abc:	d12a      	bne.n	8110b14 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8110abe:	687b      	ldr	r3, [r7, #4]
 8110ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110ac2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8110ac4:	69fb      	ldr	r3, [r7, #28]
 8110ac6:	2b00      	cmp	r3, #0
 8110ac8:	d106      	bne.n	8110ad8 <tcp_process+0x280>
 8110aca:	4b06      	ldr	r3, [pc, #24]	@ (8110ae4 <tcp_process+0x28c>)
 8110acc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8110ad0:	490f      	ldr	r1, [pc, #60]	@ (8110b10 <tcp_process+0x2b8>)
 8110ad2:	4806      	ldr	r0, [pc, #24]	@ (8110aec <tcp_process+0x294>)
 8110ad4:	f006 fcb0 	bl	8117438 <iprintf>
          pcb->unsent = rseg->next;
 8110ad8:	69fb      	ldr	r3, [r7, #28]
 8110ada:	681a      	ldr	r2, [r3, #0]
 8110adc:	687b      	ldr	r3, [r7, #4]
 8110ade:	66da      	str	r2, [r3, #108]	@ 0x6c
 8110ae0:	e01c      	b.n	8110b1c <tcp_process+0x2c4>
 8110ae2:	bf00      	nop
 8110ae4:	0811dd74 	.word	0x0811dd74
 8110ae8:	0811dfd8 	.word	0x0811dfd8
 8110aec:	0811ddec 	.word	0x0811ddec
 8110af0:	1001773c 	.word	0x1001773c
 8110af4:	10017734 	.word	0x10017734
 8110af8:	10017730 	.word	0x10017730
 8110afc:	0811dff4 	.word	0x0811dff4
 8110b00:	1001773d 	.word	0x1001773d
 8110b04:	100176f8 	.word	0x100176f8
 8110b08:	10017720 	.word	0x10017720
 8110b0c:	0811e014 	.word	0x0811e014
 8110b10:	0811e02c 	.word	0x0811e02c
        } else {
          pcb->unacked = rseg->next;
 8110b14:	69fb      	ldr	r3, [r7, #28]
 8110b16:	681a      	ldr	r2, [r3, #0]
 8110b18:	687b      	ldr	r3, [r7, #4]
 8110b1a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8110b1c:	69f8      	ldr	r0, [r7, #28]
 8110b1e:	f7fe fce6 	bl	810f4ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8110b22:	687b      	ldr	r3, [r7, #4]
 8110b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110b26:	2b00      	cmp	r3, #0
 8110b28:	d104      	bne.n	8110b34 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8110b2a:	687b      	ldr	r3, [r7, #4]
 8110b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8110b30:	861a      	strh	r2, [r3, #48]	@ 0x30
 8110b32:	e006      	b.n	8110b42 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8110b34:	687b      	ldr	r3, [r7, #4]
 8110b36:	2200      	movs	r2, #0
 8110b38:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8110b3a:	687b      	ldr	r3, [r7, #4]
 8110b3c:	2200      	movs	r2, #0
 8110b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8110b42:	687b      	ldr	r3, [r7, #4]
 8110b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8110b48:	2b00      	cmp	r3, #0
 8110b4a:	d00a      	beq.n	8110b62 <tcp_process+0x30a>
 8110b4c:	687b      	ldr	r3, [r7, #4]
 8110b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8110b52:	687a      	ldr	r2, [r7, #4]
 8110b54:	6910      	ldr	r0, [r2, #16]
 8110b56:	2200      	movs	r2, #0
 8110b58:	6879      	ldr	r1, [r7, #4]
 8110b5a:	4798      	blx	r3
 8110b5c:	4603      	mov	r3, r0
 8110b5e:	76bb      	strb	r3, [r7, #26]
 8110b60:	e001      	b.n	8110b66 <tcp_process+0x30e>
 8110b62:	2300      	movs	r3, #0
 8110b64:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8110b66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8110b6a:	f113 0f0d 	cmn.w	r3, #13
 8110b6e:	d102      	bne.n	8110b76 <tcp_process+0x31e>
          return ERR_ABRT;
 8110b70:	f06f 030c 	mvn.w	r3, #12
 8110b74:	e250      	b.n	8111018 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8110b76:	687b      	ldr	r3, [r7, #4]
 8110b78:	8b5b      	ldrh	r3, [r3, #26]
 8110b7a:	f043 0302 	orr.w	r3, r3, #2
 8110b7e:	b29a      	uxth	r2, r3
 8110b80:	687b      	ldr	r3, [r7, #4]
 8110b82:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8110b84:	e23a      	b.n	8110ffc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8110b86:	4b98      	ldr	r3, [pc, #608]	@ (8110de8 <tcp_process+0x590>)
 8110b88:	781b      	ldrb	r3, [r3, #0]
 8110b8a:	f003 0310 	and.w	r3, r3, #16
 8110b8e:	2b00      	cmp	r3, #0
 8110b90:	f000 8234 	beq.w	8110ffc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8110b94:	4b95      	ldr	r3, [pc, #596]	@ (8110dec <tcp_process+0x594>)
 8110b96:	6819      	ldr	r1, [r3, #0]
 8110b98:	4b95      	ldr	r3, [pc, #596]	@ (8110df0 <tcp_process+0x598>)
 8110b9a:	881b      	ldrh	r3, [r3, #0]
 8110b9c:	461a      	mov	r2, r3
 8110b9e:	4b95      	ldr	r3, [pc, #596]	@ (8110df4 <tcp_process+0x59c>)
 8110ba0:	681b      	ldr	r3, [r3, #0]
 8110ba2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8110ba4:	4b94      	ldr	r3, [pc, #592]	@ (8110df8 <tcp_process+0x5a0>)
 8110ba6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8110ba8:	885b      	ldrh	r3, [r3, #2]
 8110baa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8110bac:	4a92      	ldr	r2, [pc, #584]	@ (8110df8 <tcp_process+0x5a0>)
 8110bae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8110bb0:	8812      	ldrh	r2, [r2, #0]
 8110bb2:	b292      	uxth	r2, r2
 8110bb4:	9202      	str	r2, [sp, #8]
 8110bb6:	9301      	str	r3, [sp, #4]
 8110bb8:	4b90      	ldr	r3, [pc, #576]	@ (8110dfc <tcp_process+0x5a4>)
 8110bba:	9300      	str	r3, [sp, #0]
 8110bbc:	4b90      	ldr	r3, [pc, #576]	@ (8110e00 <tcp_process+0x5a8>)
 8110bbe:	4602      	mov	r2, r0
 8110bc0:	6878      	ldr	r0, [r7, #4]
 8110bc2:	f003 f8d7 	bl	8113d74 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8110bc6:	687b      	ldr	r3, [r7, #4]
 8110bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8110bcc:	2b05      	cmp	r3, #5
 8110bce:	f200 8215 	bhi.w	8110ffc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8110bd2:	687b      	ldr	r3, [r7, #4]
 8110bd4:	2200      	movs	r2, #0
 8110bd6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8110bd8:	6878      	ldr	r0, [r7, #4]
 8110bda:	f002 fea3 	bl	8113924 <tcp_rexmit_rto>
      break;
 8110bde:	e20d      	b.n	8110ffc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8110be0:	4b81      	ldr	r3, [pc, #516]	@ (8110de8 <tcp_process+0x590>)
 8110be2:	781b      	ldrb	r3, [r3, #0]
 8110be4:	f003 0310 	and.w	r3, r3, #16
 8110be8:	2b00      	cmp	r3, #0
 8110bea:	f000 80a1 	beq.w	8110d30 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8110bee:	4b7f      	ldr	r3, [pc, #508]	@ (8110dec <tcp_process+0x594>)
 8110bf0:	681a      	ldr	r2, [r3, #0]
 8110bf2:	687b      	ldr	r3, [r7, #4]
 8110bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8110bf6:	1ad3      	subs	r3, r2, r3
 8110bf8:	3b01      	subs	r3, #1
 8110bfa:	2b00      	cmp	r3, #0
 8110bfc:	db7e      	blt.n	8110cfc <tcp_process+0x4a4>
 8110bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8110dec <tcp_process+0x594>)
 8110c00:	681a      	ldr	r2, [r3, #0]
 8110c02:	687b      	ldr	r3, [r7, #4]
 8110c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110c06:	1ad3      	subs	r3, r2, r3
 8110c08:	2b00      	cmp	r3, #0
 8110c0a:	dc77      	bgt.n	8110cfc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8110c0c:	687b      	ldr	r3, [r7, #4]
 8110c0e:	2204      	movs	r2, #4
 8110c10:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8110c12:	687b      	ldr	r3, [r7, #4]
 8110c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8110c16:	2b00      	cmp	r3, #0
 8110c18:	d102      	bne.n	8110c20 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8110c1a:	23fa      	movs	r3, #250	@ 0xfa
 8110c1c:	76bb      	strb	r3, [r7, #26]
 8110c1e:	e01d      	b.n	8110c5c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8110c20:	687b      	ldr	r3, [r7, #4]
 8110c22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8110c24:	699b      	ldr	r3, [r3, #24]
 8110c26:	2b00      	cmp	r3, #0
 8110c28:	d106      	bne.n	8110c38 <tcp_process+0x3e0>
 8110c2a:	4b76      	ldr	r3, [pc, #472]	@ (8110e04 <tcp_process+0x5ac>)
 8110c2c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8110c30:	4975      	ldr	r1, [pc, #468]	@ (8110e08 <tcp_process+0x5b0>)
 8110c32:	4876      	ldr	r0, [pc, #472]	@ (8110e0c <tcp_process+0x5b4>)
 8110c34:	f006 fc00 	bl	8117438 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8110c38:	687b      	ldr	r3, [r7, #4]
 8110c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8110c3c:	699b      	ldr	r3, [r3, #24]
 8110c3e:	2b00      	cmp	r3, #0
 8110c40:	d00a      	beq.n	8110c58 <tcp_process+0x400>
 8110c42:	687b      	ldr	r3, [r7, #4]
 8110c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8110c46:	699b      	ldr	r3, [r3, #24]
 8110c48:	687a      	ldr	r2, [r7, #4]
 8110c4a:	6910      	ldr	r0, [r2, #16]
 8110c4c:	2200      	movs	r2, #0
 8110c4e:	6879      	ldr	r1, [r7, #4]
 8110c50:	4798      	blx	r3
 8110c52:	4603      	mov	r3, r0
 8110c54:	76bb      	strb	r3, [r7, #26]
 8110c56:	e001      	b.n	8110c5c <tcp_process+0x404>
 8110c58:	23f0      	movs	r3, #240	@ 0xf0
 8110c5a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8110c5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8110c60:	2b00      	cmp	r3, #0
 8110c62:	d00a      	beq.n	8110c7a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8110c64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8110c68:	f113 0f0d 	cmn.w	r3, #13
 8110c6c:	d002      	beq.n	8110c74 <tcp_process+0x41c>
              tcp_abort(pcb);
 8110c6e:	6878      	ldr	r0, [r7, #4]
 8110c70:	f7fd fdf2 	bl	810e858 <tcp_abort>
            }
            return ERR_ABRT;
 8110c74:	f06f 030c 	mvn.w	r3, #12
 8110c78:	e1ce      	b.n	8111018 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8110c7a:	6878      	ldr	r0, [r7, #4]
 8110c7c:	f000 fae0 	bl	8111240 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8110c80:	4b63      	ldr	r3, [pc, #396]	@ (8110e10 <tcp_process+0x5b8>)
 8110c82:	881b      	ldrh	r3, [r3, #0]
 8110c84:	2b00      	cmp	r3, #0
 8110c86:	d005      	beq.n	8110c94 <tcp_process+0x43c>
            recv_acked--;
 8110c88:	4b61      	ldr	r3, [pc, #388]	@ (8110e10 <tcp_process+0x5b8>)
 8110c8a:	881b      	ldrh	r3, [r3, #0]
 8110c8c:	3b01      	subs	r3, #1
 8110c8e:	b29a      	uxth	r2, r3
 8110c90:	4b5f      	ldr	r3, [pc, #380]	@ (8110e10 <tcp_process+0x5b8>)
 8110c92:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8110c94:	687b      	ldr	r3, [r7, #4]
 8110c96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110c98:	009a      	lsls	r2, r3, #2
 8110c9a:	687b      	ldr	r3, [r7, #4]
 8110c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110c9e:	005b      	lsls	r3, r3, #1
 8110ca0:	f241 111c 	movw	r1, #4380	@ 0x111c
 8110ca4:	428b      	cmp	r3, r1
 8110ca6:	bf38      	it	cc
 8110ca8:	460b      	movcc	r3, r1
 8110caa:	429a      	cmp	r2, r3
 8110cac:	d204      	bcs.n	8110cb8 <tcp_process+0x460>
 8110cae:	687b      	ldr	r3, [r7, #4]
 8110cb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110cb2:	009b      	lsls	r3, r3, #2
 8110cb4:	b29b      	uxth	r3, r3
 8110cb6:	e00d      	b.n	8110cd4 <tcp_process+0x47c>
 8110cb8:	687b      	ldr	r3, [r7, #4]
 8110cba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110cbc:	005b      	lsls	r3, r3, #1
 8110cbe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8110cc2:	4293      	cmp	r3, r2
 8110cc4:	d904      	bls.n	8110cd0 <tcp_process+0x478>
 8110cc6:	687b      	ldr	r3, [r7, #4]
 8110cc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110cca:	005b      	lsls	r3, r3, #1
 8110ccc:	b29b      	uxth	r3, r3
 8110cce:	e001      	b.n	8110cd4 <tcp_process+0x47c>
 8110cd0:	f241 131c 	movw	r3, #4380	@ 0x111c
 8110cd4:	687a      	ldr	r2, [r7, #4]
 8110cd6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8110cda:	4b4e      	ldr	r3, [pc, #312]	@ (8110e14 <tcp_process+0x5bc>)
 8110cdc:	781b      	ldrb	r3, [r3, #0]
 8110cde:	f003 0320 	and.w	r3, r3, #32
 8110ce2:	2b00      	cmp	r3, #0
 8110ce4:	d037      	beq.n	8110d56 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8110ce6:	687b      	ldr	r3, [r7, #4]
 8110ce8:	8b5b      	ldrh	r3, [r3, #26]
 8110cea:	f043 0302 	orr.w	r3, r3, #2
 8110cee:	b29a      	uxth	r2, r3
 8110cf0:	687b      	ldr	r3, [r7, #4]
 8110cf2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8110cf4:	687b      	ldr	r3, [r7, #4]
 8110cf6:	2207      	movs	r2, #7
 8110cf8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8110cfa:	e02c      	b.n	8110d56 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8110cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8110dec <tcp_process+0x594>)
 8110cfe:	6819      	ldr	r1, [r3, #0]
 8110d00:	4b3b      	ldr	r3, [pc, #236]	@ (8110df0 <tcp_process+0x598>)
 8110d02:	881b      	ldrh	r3, [r3, #0]
 8110d04:	461a      	mov	r2, r3
 8110d06:	4b3b      	ldr	r3, [pc, #236]	@ (8110df4 <tcp_process+0x59c>)
 8110d08:	681b      	ldr	r3, [r3, #0]
 8110d0a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8110d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8110df8 <tcp_process+0x5a0>)
 8110d0e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8110d10:	885b      	ldrh	r3, [r3, #2]
 8110d12:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8110d14:	4a38      	ldr	r2, [pc, #224]	@ (8110df8 <tcp_process+0x5a0>)
 8110d16:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8110d18:	8812      	ldrh	r2, [r2, #0]
 8110d1a:	b292      	uxth	r2, r2
 8110d1c:	9202      	str	r2, [sp, #8]
 8110d1e:	9301      	str	r3, [sp, #4]
 8110d20:	4b36      	ldr	r3, [pc, #216]	@ (8110dfc <tcp_process+0x5a4>)
 8110d22:	9300      	str	r3, [sp, #0]
 8110d24:	4b36      	ldr	r3, [pc, #216]	@ (8110e00 <tcp_process+0x5a8>)
 8110d26:	4602      	mov	r2, r0
 8110d28:	6878      	ldr	r0, [r7, #4]
 8110d2a:	f003 f823 	bl	8113d74 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8110d2e:	e167      	b.n	8111000 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8110d30:	4b2d      	ldr	r3, [pc, #180]	@ (8110de8 <tcp_process+0x590>)
 8110d32:	781b      	ldrb	r3, [r3, #0]
 8110d34:	f003 0302 	and.w	r3, r3, #2
 8110d38:	2b00      	cmp	r3, #0
 8110d3a:	f000 8161 	beq.w	8111000 <tcp_process+0x7a8>
 8110d3e:	687b      	ldr	r3, [r7, #4]
 8110d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110d42:	1e5a      	subs	r2, r3, #1
 8110d44:	4b2b      	ldr	r3, [pc, #172]	@ (8110df4 <tcp_process+0x59c>)
 8110d46:	681b      	ldr	r3, [r3, #0]
 8110d48:	429a      	cmp	r2, r3
 8110d4a:	f040 8159 	bne.w	8111000 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8110d4e:	6878      	ldr	r0, [r7, #4]
 8110d50:	f002 fe0a 	bl	8113968 <tcp_rexmit>
      break;
 8110d54:	e154      	b.n	8111000 <tcp_process+0x7a8>
 8110d56:	e153      	b.n	8111000 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8110d58:	6878      	ldr	r0, [r7, #4]
 8110d5a:	f000 fa71 	bl	8111240 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8110d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8110e14 <tcp_process+0x5bc>)
 8110d60:	781b      	ldrb	r3, [r3, #0]
 8110d62:	f003 0320 	and.w	r3, r3, #32
 8110d66:	2b00      	cmp	r3, #0
 8110d68:	f000 814c 	beq.w	8111004 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8110d6c:	687b      	ldr	r3, [r7, #4]
 8110d6e:	8b5b      	ldrh	r3, [r3, #26]
 8110d70:	f043 0302 	orr.w	r3, r3, #2
 8110d74:	b29a      	uxth	r2, r3
 8110d76:	687b      	ldr	r3, [r7, #4]
 8110d78:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8110d7a:	687b      	ldr	r3, [r7, #4]
 8110d7c:	2207      	movs	r2, #7
 8110d7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8110d80:	e140      	b.n	8111004 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8110d82:	6878      	ldr	r0, [r7, #4]
 8110d84:	f000 fa5c 	bl	8111240 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8110d88:	4b22      	ldr	r3, [pc, #136]	@ (8110e14 <tcp_process+0x5bc>)
 8110d8a:	781b      	ldrb	r3, [r3, #0]
 8110d8c:	f003 0320 	and.w	r3, r3, #32
 8110d90:	2b00      	cmp	r3, #0
 8110d92:	d071      	beq.n	8110e78 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8110d94:	4b14      	ldr	r3, [pc, #80]	@ (8110de8 <tcp_process+0x590>)
 8110d96:	781b      	ldrb	r3, [r3, #0]
 8110d98:	f003 0310 	and.w	r3, r3, #16
 8110d9c:	2b00      	cmp	r3, #0
 8110d9e:	d060      	beq.n	8110e62 <tcp_process+0x60a>
 8110da0:	687b      	ldr	r3, [r7, #4]
 8110da2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8110da4:	4b11      	ldr	r3, [pc, #68]	@ (8110dec <tcp_process+0x594>)
 8110da6:	681b      	ldr	r3, [r3, #0]
 8110da8:	429a      	cmp	r2, r3
 8110daa:	d15a      	bne.n	8110e62 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8110dac:	687b      	ldr	r3, [r7, #4]
 8110dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8110db0:	2b00      	cmp	r3, #0
 8110db2:	d156      	bne.n	8110e62 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8110db4:	687b      	ldr	r3, [r7, #4]
 8110db6:	8b5b      	ldrh	r3, [r3, #26]
 8110db8:	f043 0302 	orr.w	r3, r3, #2
 8110dbc:	b29a      	uxth	r2, r3
 8110dbe:	687b      	ldr	r3, [r7, #4]
 8110dc0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8110dc2:	6878      	ldr	r0, [r7, #4]
 8110dc4:	f7fe fdbc 	bl	810f940 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8110dc8:	4b13      	ldr	r3, [pc, #76]	@ (8110e18 <tcp_process+0x5c0>)
 8110dca:	681b      	ldr	r3, [r3, #0]
 8110dcc:	687a      	ldr	r2, [r7, #4]
 8110dce:	429a      	cmp	r2, r3
 8110dd0:	d105      	bne.n	8110dde <tcp_process+0x586>
 8110dd2:	4b11      	ldr	r3, [pc, #68]	@ (8110e18 <tcp_process+0x5c0>)
 8110dd4:	681b      	ldr	r3, [r3, #0]
 8110dd6:	68db      	ldr	r3, [r3, #12]
 8110dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8110e18 <tcp_process+0x5c0>)
 8110dda:	6013      	str	r3, [r2, #0]
 8110ddc:	e02e      	b.n	8110e3c <tcp_process+0x5e4>
 8110dde:	4b0e      	ldr	r3, [pc, #56]	@ (8110e18 <tcp_process+0x5c0>)
 8110de0:	681b      	ldr	r3, [r3, #0]
 8110de2:	617b      	str	r3, [r7, #20]
 8110de4:	e027      	b.n	8110e36 <tcp_process+0x5de>
 8110de6:	bf00      	nop
 8110de8:	1001773c 	.word	0x1001773c
 8110dec:	10017734 	.word	0x10017734
 8110df0:	1001773a 	.word	0x1001773a
 8110df4:	10017730 	.word	0x10017730
 8110df8:	10017720 	.word	0x10017720
 8110dfc:	100145c0 	.word	0x100145c0
 8110e00:	100145c4 	.word	0x100145c4
 8110e04:	0811dd74 	.word	0x0811dd74
 8110e08:	0811e040 	.word	0x0811e040
 8110e0c:	0811ddec 	.word	0x0811ddec
 8110e10:	10017738 	.word	0x10017738
 8110e14:	1001773d 	.word	0x1001773d
 8110e18:	10017704 	.word	0x10017704
 8110e1c:	697b      	ldr	r3, [r7, #20]
 8110e1e:	68db      	ldr	r3, [r3, #12]
 8110e20:	687a      	ldr	r2, [r7, #4]
 8110e22:	429a      	cmp	r2, r3
 8110e24:	d104      	bne.n	8110e30 <tcp_process+0x5d8>
 8110e26:	687b      	ldr	r3, [r7, #4]
 8110e28:	68da      	ldr	r2, [r3, #12]
 8110e2a:	697b      	ldr	r3, [r7, #20]
 8110e2c:	60da      	str	r2, [r3, #12]
 8110e2e:	e005      	b.n	8110e3c <tcp_process+0x5e4>
 8110e30:	697b      	ldr	r3, [r7, #20]
 8110e32:	68db      	ldr	r3, [r3, #12]
 8110e34:	617b      	str	r3, [r7, #20]
 8110e36:	697b      	ldr	r3, [r7, #20]
 8110e38:	2b00      	cmp	r3, #0
 8110e3a:	d1ef      	bne.n	8110e1c <tcp_process+0x5c4>
 8110e3c:	687b      	ldr	r3, [r7, #4]
 8110e3e:	2200      	movs	r2, #0
 8110e40:	60da      	str	r2, [r3, #12]
 8110e42:	4b77      	ldr	r3, [pc, #476]	@ (8111020 <tcp_process+0x7c8>)
 8110e44:	2201      	movs	r2, #1
 8110e46:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8110e48:	687b      	ldr	r3, [r7, #4]
 8110e4a:	220a      	movs	r2, #10
 8110e4c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8110e4e:	4b75      	ldr	r3, [pc, #468]	@ (8111024 <tcp_process+0x7cc>)
 8110e50:	681a      	ldr	r2, [r3, #0]
 8110e52:	687b      	ldr	r3, [r7, #4]
 8110e54:	60da      	str	r2, [r3, #12]
 8110e56:	4a73      	ldr	r2, [pc, #460]	@ (8111024 <tcp_process+0x7cc>)
 8110e58:	687b      	ldr	r3, [r7, #4]
 8110e5a:	6013      	str	r3, [r2, #0]
 8110e5c:	f003 f94c 	bl	81140f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8110e60:	e0d2      	b.n	8111008 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8110e62:	687b      	ldr	r3, [r7, #4]
 8110e64:	8b5b      	ldrh	r3, [r3, #26]
 8110e66:	f043 0302 	orr.w	r3, r3, #2
 8110e6a:	b29a      	uxth	r2, r3
 8110e6c:	687b      	ldr	r3, [r7, #4]
 8110e6e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8110e70:	687b      	ldr	r3, [r7, #4]
 8110e72:	2208      	movs	r2, #8
 8110e74:	751a      	strb	r2, [r3, #20]
      break;
 8110e76:	e0c7      	b.n	8111008 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8110e78:	4b6b      	ldr	r3, [pc, #428]	@ (8111028 <tcp_process+0x7d0>)
 8110e7a:	781b      	ldrb	r3, [r3, #0]
 8110e7c:	f003 0310 	and.w	r3, r3, #16
 8110e80:	2b00      	cmp	r3, #0
 8110e82:	f000 80c1 	beq.w	8111008 <tcp_process+0x7b0>
 8110e86:	687b      	ldr	r3, [r7, #4]
 8110e88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8110e8a:	4b68      	ldr	r3, [pc, #416]	@ (811102c <tcp_process+0x7d4>)
 8110e8c:	681b      	ldr	r3, [r3, #0]
 8110e8e:	429a      	cmp	r2, r3
 8110e90:	f040 80ba 	bne.w	8111008 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8110e94:	687b      	ldr	r3, [r7, #4]
 8110e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8110e98:	2b00      	cmp	r3, #0
 8110e9a:	f040 80b5 	bne.w	8111008 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8110e9e:	687b      	ldr	r3, [r7, #4]
 8110ea0:	2206      	movs	r2, #6
 8110ea2:	751a      	strb	r2, [r3, #20]
      break;
 8110ea4:	e0b0      	b.n	8111008 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8110ea6:	6878      	ldr	r0, [r7, #4]
 8110ea8:	f000 f9ca 	bl	8111240 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8110eac:	4b60      	ldr	r3, [pc, #384]	@ (8111030 <tcp_process+0x7d8>)
 8110eae:	781b      	ldrb	r3, [r3, #0]
 8110eb0:	f003 0320 	and.w	r3, r3, #32
 8110eb4:	2b00      	cmp	r3, #0
 8110eb6:	f000 80a9 	beq.w	811100c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8110eba:	687b      	ldr	r3, [r7, #4]
 8110ebc:	8b5b      	ldrh	r3, [r3, #26]
 8110ebe:	f043 0302 	orr.w	r3, r3, #2
 8110ec2:	b29a      	uxth	r2, r3
 8110ec4:	687b      	ldr	r3, [r7, #4]
 8110ec6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8110ec8:	6878      	ldr	r0, [r7, #4]
 8110eca:	f7fe fd39 	bl	810f940 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8110ece:	4b59      	ldr	r3, [pc, #356]	@ (8111034 <tcp_process+0x7dc>)
 8110ed0:	681b      	ldr	r3, [r3, #0]
 8110ed2:	687a      	ldr	r2, [r7, #4]
 8110ed4:	429a      	cmp	r2, r3
 8110ed6:	d105      	bne.n	8110ee4 <tcp_process+0x68c>
 8110ed8:	4b56      	ldr	r3, [pc, #344]	@ (8111034 <tcp_process+0x7dc>)
 8110eda:	681b      	ldr	r3, [r3, #0]
 8110edc:	68db      	ldr	r3, [r3, #12]
 8110ede:	4a55      	ldr	r2, [pc, #340]	@ (8111034 <tcp_process+0x7dc>)
 8110ee0:	6013      	str	r3, [r2, #0]
 8110ee2:	e013      	b.n	8110f0c <tcp_process+0x6b4>
 8110ee4:	4b53      	ldr	r3, [pc, #332]	@ (8111034 <tcp_process+0x7dc>)
 8110ee6:	681b      	ldr	r3, [r3, #0]
 8110ee8:	613b      	str	r3, [r7, #16]
 8110eea:	e00c      	b.n	8110f06 <tcp_process+0x6ae>
 8110eec:	693b      	ldr	r3, [r7, #16]
 8110eee:	68db      	ldr	r3, [r3, #12]
 8110ef0:	687a      	ldr	r2, [r7, #4]
 8110ef2:	429a      	cmp	r2, r3
 8110ef4:	d104      	bne.n	8110f00 <tcp_process+0x6a8>
 8110ef6:	687b      	ldr	r3, [r7, #4]
 8110ef8:	68da      	ldr	r2, [r3, #12]
 8110efa:	693b      	ldr	r3, [r7, #16]
 8110efc:	60da      	str	r2, [r3, #12]
 8110efe:	e005      	b.n	8110f0c <tcp_process+0x6b4>
 8110f00:	693b      	ldr	r3, [r7, #16]
 8110f02:	68db      	ldr	r3, [r3, #12]
 8110f04:	613b      	str	r3, [r7, #16]
 8110f06:	693b      	ldr	r3, [r7, #16]
 8110f08:	2b00      	cmp	r3, #0
 8110f0a:	d1ef      	bne.n	8110eec <tcp_process+0x694>
 8110f0c:	687b      	ldr	r3, [r7, #4]
 8110f0e:	2200      	movs	r2, #0
 8110f10:	60da      	str	r2, [r3, #12]
 8110f12:	4b43      	ldr	r3, [pc, #268]	@ (8111020 <tcp_process+0x7c8>)
 8110f14:	2201      	movs	r2, #1
 8110f16:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8110f18:	687b      	ldr	r3, [r7, #4]
 8110f1a:	220a      	movs	r2, #10
 8110f1c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8110f1e:	4b41      	ldr	r3, [pc, #260]	@ (8111024 <tcp_process+0x7cc>)
 8110f20:	681a      	ldr	r2, [r3, #0]
 8110f22:	687b      	ldr	r3, [r7, #4]
 8110f24:	60da      	str	r2, [r3, #12]
 8110f26:	4a3f      	ldr	r2, [pc, #252]	@ (8111024 <tcp_process+0x7cc>)
 8110f28:	687b      	ldr	r3, [r7, #4]
 8110f2a:	6013      	str	r3, [r2, #0]
 8110f2c:	f003 f8e4 	bl	81140f8 <tcp_timer_needed>
      }
      break;
 8110f30:	e06c      	b.n	811100c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8110f32:	6878      	ldr	r0, [r7, #4]
 8110f34:	f000 f984 	bl	8111240 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8110f38:	4b3b      	ldr	r3, [pc, #236]	@ (8111028 <tcp_process+0x7d0>)
 8110f3a:	781b      	ldrb	r3, [r3, #0]
 8110f3c:	f003 0310 	and.w	r3, r3, #16
 8110f40:	2b00      	cmp	r3, #0
 8110f42:	d065      	beq.n	8111010 <tcp_process+0x7b8>
 8110f44:	687b      	ldr	r3, [r7, #4]
 8110f46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8110f48:	4b38      	ldr	r3, [pc, #224]	@ (811102c <tcp_process+0x7d4>)
 8110f4a:	681b      	ldr	r3, [r3, #0]
 8110f4c:	429a      	cmp	r2, r3
 8110f4e:	d15f      	bne.n	8111010 <tcp_process+0x7b8>
 8110f50:	687b      	ldr	r3, [r7, #4]
 8110f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110f54:	2b00      	cmp	r3, #0
 8110f56:	d15b      	bne.n	8111010 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8110f58:	6878      	ldr	r0, [r7, #4]
 8110f5a:	f7fe fcf1 	bl	810f940 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8110f5e:	4b35      	ldr	r3, [pc, #212]	@ (8111034 <tcp_process+0x7dc>)
 8110f60:	681b      	ldr	r3, [r3, #0]
 8110f62:	687a      	ldr	r2, [r7, #4]
 8110f64:	429a      	cmp	r2, r3
 8110f66:	d105      	bne.n	8110f74 <tcp_process+0x71c>
 8110f68:	4b32      	ldr	r3, [pc, #200]	@ (8111034 <tcp_process+0x7dc>)
 8110f6a:	681b      	ldr	r3, [r3, #0]
 8110f6c:	68db      	ldr	r3, [r3, #12]
 8110f6e:	4a31      	ldr	r2, [pc, #196]	@ (8111034 <tcp_process+0x7dc>)
 8110f70:	6013      	str	r3, [r2, #0]
 8110f72:	e013      	b.n	8110f9c <tcp_process+0x744>
 8110f74:	4b2f      	ldr	r3, [pc, #188]	@ (8111034 <tcp_process+0x7dc>)
 8110f76:	681b      	ldr	r3, [r3, #0]
 8110f78:	60fb      	str	r3, [r7, #12]
 8110f7a:	e00c      	b.n	8110f96 <tcp_process+0x73e>
 8110f7c:	68fb      	ldr	r3, [r7, #12]
 8110f7e:	68db      	ldr	r3, [r3, #12]
 8110f80:	687a      	ldr	r2, [r7, #4]
 8110f82:	429a      	cmp	r2, r3
 8110f84:	d104      	bne.n	8110f90 <tcp_process+0x738>
 8110f86:	687b      	ldr	r3, [r7, #4]
 8110f88:	68da      	ldr	r2, [r3, #12]
 8110f8a:	68fb      	ldr	r3, [r7, #12]
 8110f8c:	60da      	str	r2, [r3, #12]
 8110f8e:	e005      	b.n	8110f9c <tcp_process+0x744>
 8110f90:	68fb      	ldr	r3, [r7, #12]
 8110f92:	68db      	ldr	r3, [r3, #12]
 8110f94:	60fb      	str	r3, [r7, #12]
 8110f96:	68fb      	ldr	r3, [r7, #12]
 8110f98:	2b00      	cmp	r3, #0
 8110f9a:	d1ef      	bne.n	8110f7c <tcp_process+0x724>
 8110f9c:	687b      	ldr	r3, [r7, #4]
 8110f9e:	2200      	movs	r2, #0
 8110fa0:	60da      	str	r2, [r3, #12]
 8110fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8111020 <tcp_process+0x7c8>)
 8110fa4:	2201      	movs	r2, #1
 8110fa6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8110fa8:	687b      	ldr	r3, [r7, #4]
 8110faa:	220a      	movs	r2, #10
 8110fac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8110fae:	4b1d      	ldr	r3, [pc, #116]	@ (8111024 <tcp_process+0x7cc>)
 8110fb0:	681a      	ldr	r2, [r3, #0]
 8110fb2:	687b      	ldr	r3, [r7, #4]
 8110fb4:	60da      	str	r2, [r3, #12]
 8110fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8111024 <tcp_process+0x7cc>)
 8110fb8:	687b      	ldr	r3, [r7, #4]
 8110fba:	6013      	str	r3, [r2, #0]
 8110fbc:	f003 f89c 	bl	81140f8 <tcp_timer_needed>
      }
      break;
 8110fc0:	e026      	b.n	8111010 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8110fc2:	6878      	ldr	r0, [r7, #4]
 8110fc4:	f000 f93c 	bl	8111240 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8110fc8:	4b17      	ldr	r3, [pc, #92]	@ (8111028 <tcp_process+0x7d0>)
 8110fca:	781b      	ldrb	r3, [r3, #0]
 8110fcc:	f003 0310 	and.w	r3, r3, #16
 8110fd0:	2b00      	cmp	r3, #0
 8110fd2:	d01f      	beq.n	8111014 <tcp_process+0x7bc>
 8110fd4:	687b      	ldr	r3, [r7, #4]
 8110fd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8110fd8:	4b14      	ldr	r3, [pc, #80]	@ (811102c <tcp_process+0x7d4>)
 8110fda:	681b      	ldr	r3, [r3, #0]
 8110fdc:	429a      	cmp	r2, r3
 8110fde:	d119      	bne.n	8111014 <tcp_process+0x7bc>
 8110fe0:	687b      	ldr	r3, [r7, #4]
 8110fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110fe4:	2b00      	cmp	r3, #0
 8110fe6:	d115      	bne.n	8111014 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8110fe8:	4b11      	ldr	r3, [pc, #68]	@ (8111030 <tcp_process+0x7d8>)
 8110fea:	781b      	ldrb	r3, [r3, #0]
 8110fec:	f043 0310 	orr.w	r3, r3, #16
 8110ff0:	b2da      	uxtb	r2, r3
 8110ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8111030 <tcp_process+0x7d8>)
 8110ff4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8110ff6:	e00d      	b.n	8111014 <tcp_process+0x7bc>
    default:
      break;
 8110ff8:	bf00      	nop
 8110ffa:	e00c      	b.n	8111016 <tcp_process+0x7be>
      break;
 8110ffc:	bf00      	nop
 8110ffe:	e00a      	b.n	8111016 <tcp_process+0x7be>
      break;
 8111000:	bf00      	nop
 8111002:	e008      	b.n	8111016 <tcp_process+0x7be>
      break;
 8111004:	bf00      	nop
 8111006:	e006      	b.n	8111016 <tcp_process+0x7be>
      break;
 8111008:	bf00      	nop
 811100a:	e004      	b.n	8111016 <tcp_process+0x7be>
      break;
 811100c:	bf00      	nop
 811100e:	e002      	b.n	8111016 <tcp_process+0x7be>
      break;
 8111010:	bf00      	nop
 8111012:	e000      	b.n	8111016 <tcp_process+0x7be>
      break;
 8111014:	bf00      	nop
  }
  return ERR_OK;
 8111016:	2300      	movs	r3, #0
}
 8111018:	4618      	mov	r0, r3
 811101a:	3724      	adds	r7, #36	@ 0x24
 811101c:	46bd      	mov	sp, r7
 811101e:	bd90      	pop	{r4, r7, pc}
 8111020:	1001770c 	.word	0x1001770c
 8111024:	10017708 	.word	0x10017708
 8111028:	1001773c 	.word	0x1001773c
 811102c:	10017734 	.word	0x10017734
 8111030:	1001773d 	.word	0x1001773d
 8111034:	10017704 	.word	0x10017704

08111038 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8111038:	b590      	push	{r4, r7, lr}
 811103a:	b085      	sub	sp, #20
 811103c:	af00      	add	r7, sp, #0
 811103e:	6078      	str	r0, [r7, #4]
 8111040:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8111042:	687b      	ldr	r3, [r7, #4]
 8111044:	2b00      	cmp	r3, #0
 8111046:	d106      	bne.n	8111056 <tcp_oos_insert_segment+0x1e>
 8111048:	4b3b      	ldr	r3, [pc, #236]	@ (8111138 <tcp_oos_insert_segment+0x100>)
 811104a:	f240 421f 	movw	r2, #1055	@ 0x41f
 811104e:	493b      	ldr	r1, [pc, #236]	@ (811113c <tcp_oos_insert_segment+0x104>)
 8111050:	483b      	ldr	r0, [pc, #236]	@ (8111140 <tcp_oos_insert_segment+0x108>)
 8111052:	f006 f9f1 	bl	8117438 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8111056:	687b      	ldr	r3, [r7, #4]
 8111058:	68db      	ldr	r3, [r3, #12]
 811105a:	899b      	ldrh	r3, [r3, #12]
 811105c:	b29b      	uxth	r3, r3
 811105e:	4618      	mov	r0, r3
 8111060:	f7f8 ff6e 	bl	8109f40 <lwip_htons>
 8111064:	4603      	mov	r3, r0
 8111066:	b2db      	uxtb	r3, r3
 8111068:	f003 0301 	and.w	r3, r3, #1
 811106c:	2b00      	cmp	r3, #0
 811106e:	d028      	beq.n	81110c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8111070:	6838      	ldr	r0, [r7, #0]
 8111072:	f7fe fa27 	bl	810f4c4 <tcp_segs_free>
    next = NULL;
 8111076:	2300      	movs	r3, #0
 8111078:	603b      	str	r3, [r7, #0]
 811107a:	e056      	b.n	811112a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811107c:	683b      	ldr	r3, [r7, #0]
 811107e:	68db      	ldr	r3, [r3, #12]
 8111080:	899b      	ldrh	r3, [r3, #12]
 8111082:	b29b      	uxth	r3, r3
 8111084:	4618      	mov	r0, r3
 8111086:	f7f8 ff5b 	bl	8109f40 <lwip_htons>
 811108a:	4603      	mov	r3, r0
 811108c:	b2db      	uxtb	r3, r3
 811108e:	f003 0301 	and.w	r3, r3, #1
 8111092:	2b00      	cmp	r3, #0
 8111094:	d00d      	beq.n	81110b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8111096:	687b      	ldr	r3, [r7, #4]
 8111098:	68db      	ldr	r3, [r3, #12]
 811109a:	899b      	ldrh	r3, [r3, #12]
 811109c:	b29c      	uxth	r4, r3
 811109e:	2001      	movs	r0, #1
 81110a0:	f7f8 ff4e 	bl	8109f40 <lwip_htons>
 81110a4:	4603      	mov	r3, r0
 81110a6:	461a      	mov	r2, r3
 81110a8:	687b      	ldr	r3, [r7, #4]
 81110aa:	68db      	ldr	r3, [r3, #12]
 81110ac:	4322      	orrs	r2, r4
 81110ae:	b292      	uxth	r2, r2
 81110b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 81110b2:	683b      	ldr	r3, [r7, #0]
 81110b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 81110b6:	683b      	ldr	r3, [r7, #0]
 81110b8:	681b      	ldr	r3, [r3, #0]
 81110ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 81110bc:	68f8      	ldr	r0, [r7, #12]
 81110be:	f7fe fa16 	bl	810f4ee <tcp_seg_free>
    while (next &&
 81110c2:	683b      	ldr	r3, [r7, #0]
 81110c4:	2b00      	cmp	r3, #0
 81110c6:	d00e      	beq.n	81110e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 81110c8:	687b      	ldr	r3, [r7, #4]
 81110ca:	891b      	ldrh	r3, [r3, #8]
 81110cc:	461a      	mov	r2, r3
 81110ce:	4b1d      	ldr	r3, [pc, #116]	@ (8111144 <tcp_oos_insert_segment+0x10c>)
 81110d0:	681b      	ldr	r3, [r3, #0]
 81110d2:	441a      	add	r2, r3
 81110d4:	683b      	ldr	r3, [r7, #0]
 81110d6:	68db      	ldr	r3, [r3, #12]
 81110d8:	685b      	ldr	r3, [r3, #4]
 81110da:	6839      	ldr	r1, [r7, #0]
 81110dc:	8909      	ldrh	r1, [r1, #8]
 81110de:	440b      	add	r3, r1
 81110e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 81110e2:	2b00      	cmp	r3, #0
 81110e4:	daca      	bge.n	811107c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 81110e6:	683b      	ldr	r3, [r7, #0]
 81110e8:	2b00      	cmp	r3, #0
 81110ea:	d01e      	beq.n	811112a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 81110ec:	687b      	ldr	r3, [r7, #4]
 81110ee:	891b      	ldrh	r3, [r3, #8]
 81110f0:	461a      	mov	r2, r3
 81110f2:	4b14      	ldr	r3, [pc, #80]	@ (8111144 <tcp_oos_insert_segment+0x10c>)
 81110f4:	681b      	ldr	r3, [r3, #0]
 81110f6:	441a      	add	r2, r3
 81110f8:	683b      	ldr	r3, [r7, #0]
 81110fa:	68db      	ldr	r3, [r3, #12]
 81110fc:	685b      	ldr	r3, [r3, #4]
 81110fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8111100:	2b00      	cmp	r3, #0
 8111102:	dd12      	ble.n	811112a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8111104:	683b      	ldr	r3, [r7, #0]
 8111106:	68db      	ldr	r3, [r3, #12]
 8111108:	685b      	ldr	r3, [r3, #4]
 811110a:	b29a      	uxth	r2, r3
 811110c:	4b0d      	ldr	r3, [pc, #52]	@ (8111144 <tcp_oos_insert_segment+0x10c>)
 811110e:	681b      	ldr	r3, [r3, #0]
 8111110:	b29b      	uxth	r3, r3
 8111112:	1ad3      	subs	r3, r2, r3
 8111114:	b29a      	uxth	r2, r3
 8111116:	687b      	ldr	r3, [r7, #4]
 8111118:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 811111a:	687b      	ldr	r3, [r7, #4]
 811111c:	685a      	ldr	r2, [r3, #4]
 811111e:	687b      	ldr	r3, [r7, #4]
 8111120:	891b      	ldrh	r3, [r3, #8]
 8111122:	4619      	mov	r1, r3
 8111124:	4610      	mov	r0, r2
 8111126:	f7fc fc89 	bl	810da3c <pbuf_realloc>
    }
  }
  cseg->next = next;
 811112a:	687b      	ldr	r3, [r7, #4]
 811112c:	683a      	ldr	r2, [r7, #0]
 811112e:	601a      	str	r2, [r3, #0]
}
 8111130:	bf00      	nop
 8111132:	3714      	adds	r7, #20
 8111134:	46bd      	mov	sp, r7
 8111136:	bd90      	pop	{r4, r7, pc}
 8111138:	0811dd74 	.word	0x0811dd74
 811113c:	0811e060 	.word	0x0811e060
 8111140:	0811ddec 	.word	0x0811ddec
 8111144:	10017730 	.word	0x10017730

08111148 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8111148:	b5b0      	push	{r4, r5, r7, lr}
 811114a:	b086      	sub	sp, #24
 811114c:	af00      	add	r7, sp, #0
 811114e:	60f8      	str	r0, [r7, #12]
 8111150:	60b9      	str	r1, [r7, #8]
 8111152:	607a      	str	r2, [r7, #4]
 8111154:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8111156:	e03e      	b.n	81111d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8111158:	68bb      	ldr	r3, [r7, #8]
 811115a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 811115c:	68bb      	ldr	r3, [r7, #8]
 811115e:	681b      	ldr	r3, [r3, #0]
 8111160:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8111162:	697b      	ldr	r3, [r7, #20]
 8111164:	685b      	ldr	r3, [r3, #4]
 8111166:	4618      	mov	r0, r3
 8111168:	f7fc fe76 	bl	810de58 <pbuf_clen>
 811116c:	4603      	mov	r3, r0
 811116e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8111170:	68fb      	ldr	r3, [r7, #12]
 8111172:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8111176:	8a7a      	ldrh	r2, [r7, #18]
 8111178:	429a      	cmp	r2, r3
 811117a:	d906      	bls.n	811118a <tcp_free_acked_segments+0x42>
 811117c:	4b2a      	ldr	r3, [pc, #168]	@ (8111228 <tcp_free_acked_segments+0xe0>)
 811117e:	f240 4257 	movw	r2, #1111	@ 0x457
 8111182:	492a      	ldr	r1, [pc, #168]	@ (811122c <tcp_free_acked_segments+0xe4>)
 8111184:	482a      	ldr	r0, [pc, #168]	@ (8111230 <tcp_free_acked_segments+0xe8>)
 8111186:	f006 f957 	bl	8117438 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 811118a:	68fb      	ldr	r3, [r7, #12]
 811118c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8111190:	8a7b      	ldrh	r3, [r7, #18]
 8111192:	1ad3      	subs	r3, r2, r3
 8111194:	b29a      	uxth	r2, r3
 8111196:	68fb      	ldr	r3, [r7, #12]
 8111198:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 811119c:	697b      	ldr	r3, [r7, #20]
 811119e:	891a      	ldrh	r2, [r3, #8]
 81111a0:	4b24      	ldr	r3, [pc, #144]	@ (8111234 <tcp_free_acked_segments+0xec>)
 81111a2:	881b      	ldrh	r3, [r3, #0]
 81111a4:	4413      	add	r3, r2
 81111a6:	b29a      	uxth	r2, r3
 81111a8:	4b22      	ldr	r3, [pc, #136]	@ (8111234 <tcp_free_acked_segments+0xec>)
 81111aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 81111ac:	6978      	ldr	r0, [r7, #20]
 81111ae:	f7fe f99e 	bl	810f4ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 81111b2:	68fb      	ldr	r3, [r7, #12]
 81111b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81111b8:	2b00      	cmp	r3, #0
 81111ba:	d00c      	beq.n	81111d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 81111bc:	68bb      	ldr	r3, [r7, #8]
 81111be:	2b00      	cmp	r3, #0
 81111c0:	d109      	bne.n	81111d6 <tcp_free_acked_segments+0x8e>
 81111c2:	683b      	ldr	r3, [r7, #0]
 81111c4:	2b00      	cmp	r3, #0
 81111c6:	d106      	bne.n	81111d6 <tcp_free_acked_segments+0x8e>
 81111c8:	4b17      	ldr	r3, [pc, #92]	@ (8111228 <tcp_free_acked_segments+0xe0>)
 81111ca:	f240 4261 	movw	r2, #1121	@ 0x461
 81111ce:	491a      	ldr	r1, [pc, #104]	@ (8111238 <tcp_free_acked_segments+0xf0>)
 81111d0:	4817      	ldr	r0, [pc, #92]	@ (8111230 <tcp_free_acked_segments+0xe8>)
 81111d2:	f006 f931 	bl	8117438 <iprintf>
  while (seg_list != NULL &&
 81111d6:	68bb      	ldr	r3, [r7, #8]
 81111d8:	2b00      	cmp	r3, #0
 81111da:	d020      	beq.n	811121e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 81111dc:	68bb      	ldr	r3, [r7, #8]
 81111de:	68db      	ldr	r3, [r3, #12]
 81111e0:	685b      	ldr	r3, [r3, #4]
 81111e2:	4618      	mov	r0, r3
 81111e4:	f7f8 fec2 	bl	8109f6c <lwip_htonl>
 81111e8:	4604      	mov	r4, r0
 81111ea:	68bb      	ldr	r3, [r7, #8]
 81111ec:	891b      	ldrh	r3, [r3, #8]
 81111ee:	461d      	mov	r5, r3
 81111f0:	68bb      	ldr	r3, [r7, #8]
 81111f2:	68db      	ldr	r3, [r3, #12]
 81111f4:	899b      	ldrh	r3, [r3, #12]
 81111f6:	b29b      	uxth	r3, r3
 81111f8:	4618      	mov	r0, r3
 81111fa:	f7f8 fea1 	bl	8109f40 <lwip_htons>
 81111fe:	4603      	mov	r3, r0
 8111200:	b2db      	uxtb	r3, r3
 8111202:	f003 0303 	and.w	r3, r3, #3
 8111206:	2b00      	cmp	r3, #0
 8111208:	d001      	beq.n	811120e <tcp_free_acked_segments+0xc6>
 811120a:	2301      	movs	r3, #1
 811120c:	e000      	b.n	8111210 <tcp_free_acked_segments+0xc8>
 811120e:	2300      	movs	r3, #0
 8111210:	442b      	add	r3, r5
 8111212:	18e2      	adds	r2, r4, r3
 8111214:	4b09      	ldr	r3, [pc, #36]	@ (811123c <tcp_free_acked_segments+0xf4>)
 8111216:	681b      	ldr	r3, [r3, #0]
 8111218:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 811121a:	2b00      	cmp	r3, #0
 811121c:	dd9c      	ble.n	8111158 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 811121e:	68bb      	ldr	r3, [r7, #8]
}
 8111220:	4618      	mov	r0, r3
 8111222:	3718      	adds	r7, #24
 8111224:	46bd      	mov	sp, r7
 8111226:	bdb0      	pop	{r4, r5, r7, pc}
 8111228:	0811dd74 	.word	0x0811dd74
 811122c:	0811e088 	.word	0x0811e088
 8111230:	0811ddec 	.word	0x0811ddec
 8111234:	10017738 	.word	0x10017738
 8111238:	0811e0b0 	.word	0x0811e0b0
 811123c:	10017734 	.word	0x10017734

08111240 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8111240:	b5b0      	push	{r4, r5, r7, lr}
 8111242:	b094      	sub	sp, #80	@ 0x50
 8111244:	af00      	add	r7, sp, #0
 8111246:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8111248:	2300      	movs	r3, #0
 811124a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 811124c:	687b      	ldr	r3, [r7, #4]
 811124e:	2b00      	cmp	r3, #0
 8111250:	d106      	bne.n	8111260 <tcp_receive+0x20>
 8111252:	4b91      	ldr	r3, [pc, #580]	@ (8111498 <tcp_receive+0x258>)
 8111254:	f240 427b 	movw	r2, #1147	@ 0x47b
 8111258:	4990      	ldr	r1, [pc, #576]	@ (811149c <tcp_receive+0x25c>)
 811125a:	4891      	ldr	r0, [pc, #580]	@ (81114a0 <tcp_receive+0x260>)
 811125c:	f006 f8ec 	bl	8117438 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8111260:	687b      	ldr	r3, [r7, #4]
 8111262:	7d1b      	ldrb	r3, [r3, #20]
 8111264:	2b03      	cmp	r3, #3
 8111266:	d806      	bhi.n	8111276 <tcp_receive+0x36>
 8111268:	4b8b      	ldr	r3, [pc, #556]	@ (8111498 <tcp_receive+0x258>)
 811126a:	f240 427c 	movw	r2, #1148	@ 0x47c
 811126e:	498d      	ldr	r1, [pc, #564]	@ (81114a4 <tcp_receive+0x264>)
 8111270:	488b      	ldr	r0, [pc, #556]	@ (81114a0 <tcp_receive+0x260>)
 8111272:	f006 f8e1 	bl	8117438 <iprintf>

  if (flags & TCP_ACK) {
 8111276:	4b8c      	ldr	r3, [pc, #560]	@ (81114a8 <tcp_receive+0x268>)
 8111278:	781b      	ldrb	r3, [r3, #0]
 811127a:	f003 0310 	and.w	r3, r3, #16
 811127e:	2b00      	cmp	r3, #0
 8111280:	f000 8264 	beq.w	811174c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8111284:	687b      	ldr	r3, [r7, #4]
 8111286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811128a:	461a      	mov	r2, r3
 811128c:	687b      	ldr	r3, [r7, #4]
 811128e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8111290:	4413      	add	r3, r2
 8111292:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8111294:	687b      	ldr	r3, [r7, #4]
 8111296:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8111298:	4b84      	ldr	r3, [pc, #528]	@ (81114ac <tcp_receive+0x26c>)
 811129a:	681b      	ldr	r3, [r3, #0]
 811129c:	1ad3      	subs	r3, r2, r3
 811129e:	2b00      	cmp	r3, #0
 81112a0:	db1b      	blt.n	81112da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81112a2:	687b      	ldr	r3, [r7, #4]
 81112a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81112a6:	4b81      	ldr	r3, [pc, #516]	@ (81114ac <tcp_receive+0x26c>)
 81112a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 81112aa:	429a      	cmp	r2, r3
 81112ac:	d106      	bne.n	81112bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81112ae:	687b      	ldr	r3, [r7, #4]
 81112b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81112b2:	4b7f      	ldr	r3, [pc, #508]	@ (81114b0 <tcp_receive+0x270>)
 81112b4:	681b      	ldr	r3, [r3, #0]
 81112b6:	1ad3      	subs	r3, r2, r3
 81112b8:	2b00      	cmp	r3, #0
 81112ba:	db0e      	blt.n	81112da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 81112bc:	687b      	ldr	r3, [r7, #4]
 81112be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81112c0:	4b7b      	ldr	r3, [pc, #492]	@ (81114b0 <tcp_receive+0x270>)
 81112c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81112c4:	429a      	cmp	r2, r3
 81112c6:	d125      	bne.n	8111314 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 81112c8:	4b7a      	ldr	r3, [pc, #488]	@ (81114b4 <tcp_receive+0x274>)
 81112ca:	681b      	ldr	r3, [r3, #0]
 81112cc:	89db      	ldrh	r3, [r3, #14]
 81112ce:	b29a      	uxth	r2, r3
 81112d0:	687b      	ldr	r3, [r7, #4]
 81112d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81112d6:	429a      	cmp	r2, r3
 81112d8:	d91c      	bls.n	8111314 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 81112da:	4b76      	ldr	r3, [pc, #472]	@ (81114b4 <tcp_receive+0x274>)
 81112dc:	681b      	ldr	r3, [r3, #0]
 81112de:	89db      	ldrh	r3, [r3, #14]
 81112e0:	b29a      	uxth	r2, r3
 81112e2:	687b      	ldr	r3, [r7, #4]
 81112e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 81112e8:	687b      	ldr	r3, [r7, #4]
 81112ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 81112ee:	687b      	ldr	r3, [r7, #4]
 81112f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81112f4:	429a      	cmp	r2, r3
 81112f6:	d205      	bcs.n	8111304 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 81112f8:	687b      	ldr	r3, [r7, #4]
 81112fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81112fe:	687b      	ldr	r3, [r7, #4]
 8111300:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8111304:	4b69      	ldr	r3, [pc, #420]	@ (81114ac <tcp_receive+0x26c>)
 8111306:	681a      	ldr	r2, [r3, #0]
 8111308:	687b      	ldr	r3, [r7, #4]
 811130a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 811130c:	4b68      	ldr	r3, [pc, #416]	@ (81114b0 <tcp_receive+0x270>)
 811130e:	681a      	ldr	r2, [r3, #0]
 8111310:	687b      	ldr	r3, [r7, #4]
 8111312:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8111314:	4b66      	ldr	r3, [pc, #408]	@ (81114b0 <tcp_receive+0x270>)
 8111316:	681a      	ldr	r2, [r3, #0]
 8111318:	687b      	ldr	r3, [r7, #4]
 811131a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811131c:	1ad3      	subs	r3, r2, r3
 811131e:	2b00      	cmp	r3, #0
 8111320:	dc58      	bgt.n	81113d4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8111322:	4b65      	ldr	r3, [pc, #404]	@ (81114b8 <tcp_receive+0x278>)
 8111324:	881b      	ldrh	r3, [r3, #0]
 8111326:	2b00      	cmp	r3, #0
 8111328:	d14b      	bne.n	81113c2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 811132a:	687b      	ldr	r3, [r7, #4]
 811132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811132e:	687a      	ldr	r2, [r7, #4]
 8111330:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8111334:	4413      	add	r3, r2
 8111336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8111338:	429a      	cmp	r2, r3
 811133a:	d142      	bne.n	81113c2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 811133c:	687b      	ldr	r3, [r7, #4]
 811133e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8111342:	2b00      	cmp	r3, #0
 8111344:	db3d      	blt.n	81113c2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8111346:	687b      	ldr	r3, [r7, #4]
 8111348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811134a:	4b59      	ldr	r3, [pc, #356]	@ (81114b0 <tcp_receive+0x270>)
 811134c:	681b      	ldr	r3, [r3, #0]
 811134e:	429a      	cmp	r2, r3
 8111350:	d137      	bne.n	81113c2 <tcp_receive+0x182>
              found_dupack = 1;
 8111352:	2301      	movs	r3, #1
 8111354:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8111356:	687b      	ldr	r3, [r7, #4]
 8111358:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811135c:	2bff      	cmp	r3, #255	@ 0xff
 811135e:	d007      	beq.n	8111370 <tcp_receive+0x130>
                ++pcb->dupacks;
 8111360:	687b      	ldr	r3, [r7, #4]
 8111362:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8111366:	3301      	adds	r3, #1
 8111368:	b2da      	uxtb	r2, r3
 811136a:	687b      	ldr	r3, [r7, #4]
 811136c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8111370:	687b      	ldr	r3, [r7, #4]
 8111372:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8111376:	2b03      	cmp	r3, #3
 8111378:	d91b      	bls.n	81113b2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 811137a:	687b      	ldr	r3, [r7, #4]
 811137c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8111380:	687b      	ldr	r3, [r7, #4]
 8111382:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8111384:	4413      	add	r3, r2
 8111386:	b29a      	uxth	r2, r3
 8111388:	687b      	ldr	r3, [r7, #4]
 811138a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811138e:	429a      	cmp	r2, r3
 8111390:	d30a      	bcc.n	81113a8 <tcp_receive+0x168>
 8111392:	687b      	ldr	r3, [r7, #4]
 8111394:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8111398:	687b      	ldr	r3, [r7, #4]
 811139a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811139c:	4413      	add	r3, r2
 811139e:	b29a      	uxth	r2, r3
 81113a0:	687b      	ldr	r3, [r7, #4]
 81113a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 81113a6:	e004      	b.n	81113b2 <tcp_receive+0x172>
 81113a8:	687b      	ldr	r3, [r7, #4]
 81113aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81113ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 81113b2:	687b      	ldr	r3, [r7, #4]
 81113b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 81113b8:	2b02      	cmp	r3, #2
 81113ba:	d902      	bls.n	81113c2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 81113bc:	6878      	ldr	r0, [r7, #4]
 81113be:	f002 fb3f 	bl	8113a40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 81113c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81113c4:	2b00      	cmp	r3, #0
 81113c6:	f040 8161 	bne.w	811168c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 81113ca:	687b      	ldr	r3, [r7, #4]
 81113cc:	2200      	movs	r2, #0
 81113ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 81113d2:	e15b      	b.n	811168c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 81113d4:	4b36      	ldr	r3, [pc, #216]	@ (81114b0 <tcp_receive+0x270>)
 81113d6:	681a      	ldr	r2, [r3, #0]
 81113d8:	687b      	ldr	r3, [r7, #4]
 81113da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81113dc:	1ad3      	subs	r3, r2, r3
 81113de:	3b01      	subs	r3, #1
 81113e0:	2b00      	cmp	r3, #0
 81113e2:	f2c0 814e 	blt.w	8111682 <tcp_receive+0x442>
 81113e6:	4b32      	ldr	r3, [pc, #200]	@ (81114b0 <tcp_receive+0x270>)
 81113e8:	681a      	ldr	r2, [r3, #0]
 81113ea:	687b      	ldr	r3, [r7, #4]
 81113ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81113ee:	1ad3      	subs	r3, r2, r3
 81113f0:	2b00      	cmp	r3, #0
 81113f2:	f300 8146 	bgt.w	8111682 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 81113f6:	687b      	ldr	r3, [r7, #4]
 81113f8:	8b5b      	ldrh	r3, [r3, #26]
 81113fa:	f003 0304 	and.w	r3, r3, #4
 81113fe:	2b00      	cmp	r3, #0
 8111400:	d010      	beq.n	8111424 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8111402:	687b      	ldr	r3, [r7, #4]
 8111404:	8b5b      	ldrh	r3, [r3, #26]
 8111406:	f023 0304 	bic.w	r3, r3, #4
 811140a:	b29a      	uxth	r2, r3
 811140c:	687b      	ldr	r3, [r7, #4]
 811140e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8111410:	687b      	ldr	r3, [r7, #4]
 8111412:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8111416:	687b      	ldr	r3, [r7, #4]
 8111418:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 811141c:	687b      	ldr	r3, [r7, #4]
 811141e:	2200      	movs	r2, #0
 8111420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8111424:	687b      	ldr	r3, [r7, #4]
 8111426:	2200      	movs	r2, #0
 8111428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811142c:	687b      	ldr	r3, [r7, #4]
 811142e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8111432:	10db      	asrs	r3, r3, #3
 8111434:	b21b      	sxth	r3, r3
 8111436:	b29a      	uxth	r2, r3
 8111438:	687b      	ldr	r3, [r7, #4]
 811143a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811143e:	b29b      	uxth	r3, r3
 8111440:	4413      	add	r3, r2
 8111442:	b29b      	uxth	r3, r3
 8111444:	b21a      	sxth	r2, r3
 8111446:	687b      	ldr	r3, [r7, #4]
 8111448:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 811144c:	4b18      	ldr	r3, [pc, #96]	@ (81114b0 <tcp_receive+0x270>)
 811144e:	681b      	ldr	r3, [r3, #0]
 8111450:	b29a      	uxth	r2, r3
 8111452:	687b      	ldr	r3, [r7, #4]
 8111454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8111456:	b29b      	uxth	r3, r3
 8111458:	1ad3      	subs	r3, r2, r3
 811145a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 811145c:	687b      	ldr	r3, [r7, #4]
 811145e:	2200      	movs	r2, #0
 8111460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8111464:	4b12      	ldr	r3, [pc, #72]	@ (81114b0 <tcp_receive+0x270>)
 8111466:	681a      	ldr	r2, [r3, #0]
 8111468:	687b      	ldr	r3, [r7, #4]
 811146a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 811146c:	687b      	ldr	r3, [r7, #4]
 811146e:	7d1b      	ldrb	r3, [r3, #20]
 8111470:	2b03      	cmp	r3, #3
 8111472:	f240 8097 	bls.w	81115a4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8111476:	687b      	ldr	r3, [r7, #4]
 8111478:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811147c:	687b      	ldr	r3, [r7, #4]
 811147e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8111482:	429a      	cmp	r2, r3
 8111484:	d245      	bcs.n	8111512 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8111486:	687b      	ldr	r3, [r7, #4]
 8111488:	8b5b      	ldrh	r3, [r3, #26]
 811148a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811148e:	2b00      	cmp	r3, #0
 8111490:	d014      	beq.n	81114bc <tcp_receive+0x27c>
 8111492:	2301      	movs	r3, #1
 8111494:	e013      	b.n	81114be <tcp_receive+0x27e>
 8111496:	bf00      	nop
 8111498:	0811dd74 	.word	0x0811dd74
 811149c:	0811e0d0 	.word	0x0811e0d0
 81114a0:	0811ddec 	.word	0x0811ddec
 81114a4:	0811e0ec 	.word	0x0811e0ec
 81114a8:	1001773c 	.word	0x1001773c
 81114ac:	10017730 	.word	0x10017730
 81114b0:	10017734 	.word	0x10017734
 81114b4:	10017720 	.word	0x10017720
 81114b8:	1001773a 	.word	0x1001773a
 81114bc:	2302      	movs	r3, #2
 81114be:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 81114c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 81114c6:	b29a      	uxth	r2, r3
 81114c8:	687b      	ldr	r3, [r7, #4]
 81114ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81114cc:	fb12 f303 	smulbb	r3, r2, r3
 81114d0:	b29b      	uxth	r3, r3
 81114d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 81114d4:	4293      	cmp	r3, r2
 81114d6:	bf28      	it	cs
 81114d8:	4613      	movcs	r3, r2
 81114da:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 81114dc:	687b      	ldr	r3, [r7, #4]
 81114de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81114e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81114e4:	4413      	add	r3, r2
 81114e6:	b29a      	uxth	r2, r3
 81114e8:	687b      	ldr	r3, [r7, #4]
 81114ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 81114ee:	429a      	cmp	r2, r3
 81114f0:	d309      	bcc.n	8111506 <tcp_receive+0x2c6>
 81114f2:	687b      	ldr	r3, [r7, #4]
 81114f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81114f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81114fa:	4413      	add	r3, r2
 81114fc:	b29a      	uxth	r2, r3
 81114fe:	687b      	ldr	r3, [r7, #4]
 8111500:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8111504:	e04e      	b.n	81115a4 <tcp_receive+0x364>
 8111506:	687b      	ldr	r3, [r7, #4]
 8111508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811150c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8111510:	e048      	b.n	81115a4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8111512:	687b      	ldr	r3, [r7, #4]
 8111514:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8111518:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811151a:	4413      	add	r3, r2
 811151c:	b29a      	uxth	r2, r3
 811151e:	687b      	ldr	r3, [r7, #4]
 8111520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8111524:	429a      	cmp	r2, r3
 8111526:	d309      	bcc.n	811153c <tcp_receive+0x2fc>
 8111528:	687b      	ldr	r3, [r7, #4]
 811152a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811152e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8111530:	4413      	add	r3, r2
 8111532:	b29a      	uxth	r2, r3
 8111534:	687b      	ldr	r3, [r7, #4]
 8111536:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 811153a:	e004      	b.n	8111546 <tcp_receive+0x306>
 811153c:	687b      	ldr	r3, [r7, #4]
 811153e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8111542:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8111546:	687b      	ldr	r3, [r7, #4]
 8111548:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811154c:	687b      	ldr	r3, [r7, #4]
 811154e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8111552:	429a      	cmp	r2, r3
 8111554:	d326      	bcc.n	81115a4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8111556:	687b      	ldr	r3, [r7, #4]
 8111558:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811155c:	687b      	ldr	r3, [r7, #4]
 811155e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8111562:	1ad3      	subs	r3, r2, r3
 8111564:	b29a      	uxth	r2, r3
 8111566:	687b      	ldr	r3, [r7, #4]
 8111568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 811156c:	687b      	ldr	r3, [r7, #4]
 811156e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8111572:	687b      	ldr	r3, [r7, #4]
 8111574:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8111576:	4413      	add	r3, r2
 8111578:	b29a      	uxth	r2, r3
 811157a:	687b      	ldr	r3, [r7, #4]
 811157c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8111580:	429a      	cmp	r2, r3
 8111582:	d30a      	bcc.n	811159a <tcp_receive+0x35a>
 8111584:	687b      	ldr	r3, [r7, #4]
 8111586:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811158a:	687b      	ldr	r3, [r7, #4]
 811158c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811158e:	4413      	add	r3, r2
 8111590:	b29a      	uxth	r2, r3
 8111592:	687b      	ldr	r3, [r7, #4]
 8111594:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8111598:	e004      	b.n	81115a4 <tcp_receive+0x364>
 811159a:	687b      	ldr	r3, [r7, #4]
 811159c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81115a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 81115a4:	687b      	ldr	r3, [r7, #4]
 81115a6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81115a8:	687b      	ldr	r3, [r7, #4]
 81115aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81115ac:	4a98      	ldr	r2, [pc, #608]	@ (8111810 <tcp_receive+0x5d0>)
 81115ae:	6878      	ldr	r0, [r7, #4]
 81115b0:	f7ff fdca 	bl	8111148 <tcp_free_acked_segments>
 81115b4:	4602      	mov	r2, r0
 81115b6:	687b      	ldr	r3, [r7, #4]
 81115b8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 81115ba:	687b      	ldr	r3, [r7, #4]
 81115bc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 81115be:	687b      	ldr	r3, [r7, #4]
 81115c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81115c2:	4a94      	ldr	r2, [pc, #592]	@ (8111814 <tcp_receive+0x5d4>)
 81115c4:	6878      	ldr	r0, [r7, #4]
 81115c6:	f7ff fdbf 	bl	8111148 <tcp_free_acked_segments>
 81115ca:	4602      	mov	r2, r0
 81115cc:	687b      	ldr	r3, [r7, #4]
 81115ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 81115d0:	687b      	ldr	r3, [r7, #4]
 81115d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81115d4:	2b00      	cmp	r3, #0
 81115d6:	d104      	bne.n	81115e2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 81115d8:	687b      	ldr	r3, [r7, #4]
 81115da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81115de:	861a      	strh	r2, [r3, #48]	@ 0x30
 81115e0:	e002      	b.n	81115e8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 81115e2:	687b      	ldr	r3, [r7, #4]
 81115e4:	2200      	movs	r2, #0
 81115e6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 81115e8:	687b      	ldr	r3, [r7, #4]
 81115ea:	2200      	movs	r2, #0
 81115ec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 81115ee:	687b      	ldr	r3, [r7, #4]
 81115f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81115f2:	2b00      	cmp	r3, #0
 81115f4:	d103      	bne.n	81115fe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 81115f6:	687b      	ldr	r3, [r7, #4]
 81115f8:	2200      	movs	r2, #0
 81115fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 81115fe:	687b      	ldr	r3, [r7, #4]
 8111600:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8111604:	4b84      	ldr	r3, [pc, #528]	@ (8111818 <tcp_receive+0x5d8>)
 8111606:	881b      	ldrh	r3, [r3, #0]
 8111608:	4413      	add	r3, r2
 811160a:	b29a      	uxth	r2, r3
 811160c:	687b      	ldr	r3, [r7, #4]
 811160e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8111612:	687b      	ldr	r3, [r7, #4]
 8111614:	8b5b      	ldrh	r3, [r3, #26]
 8111616:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811161a:	2b00      	cmp	r3, #0
 811161c:	d035      	beq.n	811168a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 811161e:	687b      	ldr	r3, [r7, #4]
 8111620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8111622:	2b00      	cmp	r3, #0
 8111624:	d118      	bne.n	8111658 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8111626:	687b      	ldr	r3, [r7, #4]
 8111628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811162a:	2b00      	cmp	r3, #0
 811162c:	d00c      	beq.n	8111648 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 811162e:	687b      	ldr	r3, [r7, #4]
 8111630:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8111632:	687b      	ldr	r3, [r7, #4]
 8111634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8111636:	68db      	ldr	r3, [r3, #12]
 8111638:	685b      	ldr	r3, [r3, #4]
 811163a:	4618      	mov	r0, r3
 811163c:	f7f8 fc96 	bl	8109f6c <lwip_htonl>
 8111640:	4603      	mov	r3, r0
 8111642:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8111644:	2b00      	cmp	r3, #0
 8111646:	dc20      	bgt.n	811168a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8111648:	687b      	ldr	r3, [r7, #4]
 811164a:	8b5b      	ldrh	r3, [r3, #26]
 811164c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8111650:	b29a      	uxth	r2, r3
 8111652:	687b      	ldr	r3, [r7, #4]
 8111654:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8111656:	e018      	b.n	811168a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8111658:	687b      	ldr	r3, [r7, #4]
 811165a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811165c:	687b      	ldr	r3, [r7, #4]
 811165e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8111660:	68db      	ldr	r3, [r3, #12]
 8111662:	685b      	ldr	r3, [r3, #4]
 8111664:	4618      	mov	r0, r3
 8111666:	f7f8 fc81 	bl	8109f6c <lwip_htonl>
 811166a:	4603      	mov	r3, r0
 811166c:	1ae3      	subs	r3, r4, r3
 811166e:	2b00      	cmp	r3, #0
 8111670:	dc0b      	bgt.n	811168a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8111672:	687b      	ldr	r3, [r7, #4]
 8111674:	8b5b      	ldrh	r3, [r3, #26]
 8111676:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811167a:	b29a      	uxth	r2, r3
 811167c:	687b      	ldr	r3, [r7, #4]
 811167e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8111680:	e003      	b.n	811168a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8111682:	6878      	ldr	r0, [r7, #4]
 8111684:	f002 fbc8 	bl	8113e18 <tcp_send_empty_ack>
 8111688:	e000      	b.n	811168c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811168a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 811168c:	687b      	ldr	r3, [r7, #4]
 811168e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8111690:	2b00      	cmp	r3, #0
 8111692:	d05b      	beq.n	811174c <tcp_receive+0x50c>
 8111694:	687b      	ldr	r3, [r7, #4]
 8111696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8111698:	4b60      	ldr	r3, [pc, #384]	@ (811181c <tcp_receive+0x5dc>)
 811169a:	681b      	ldr	r3, [r3, #0]
 811169c:	1ad3      	subs	r3, r2, r3
 811169e:	2b00      	cmp	r3, #0
 81116a0:	da54      	bge.n	811174c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 81116a2:	4b5f      	ldr	r3, [pc, #380]	@ (8111820 <tcp_receive+0x5e0>)
 81116a4:	681b      	ldr	r3, [r3, #0]
 81116a6:	b29a      	uxth	r2, r3
 81116a8:	687b      	ldr	r3, [r7, #4]
 81116aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81116ac:	b29b      	uxth	r3, r3
 81116ae:	1ad3      	subs	r3, r2, r3
 81116b0:	b29b      	uxth	r3, r3
 81116b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 81116b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 81116ba:	687b      	ldr	r3, [r7, #4]
 81116bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 81116c0:	10db      	asrs	r3, r3, #3
 81116c2:	b21b      	sxth	r3, r3
 81116c4:	b29b      	uxth	r3, r3
 81116c6:	1ad3      	subs	r3, r2, r3
 81116c8:	b29b      	uxth	r3, r3
 81116ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 81116ce:	687b      	ldr	r3, [r7, #4]
 81116d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 81116d4:	b29a      	uxth	r2, r3
 81116d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 81116da:	4413      	add	r3, r2
 81116dc:	b29b      	uxth	r3, r3
 81116de:	b21a      	sxth	r2, r3
 81116e0:	687b      	ldr	r3, [r7, #4]
 81116e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 81116e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 81116e8:	2b00      	cmp	r3, #0
 81116ea:	da05      	bge.n	81116f8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 81116ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 81116f0:	425b      	negs	r3, r3
 81116f2:	b29b      	uxth	r3, r3
 81116f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 81116f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 81116fc:	687b      	ldr	r3, [r7, #4]
 81116fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8111702:	109b      	asrs	r3, r3, #2
 8111704:	b21b      	sxth	r3, r3
 8111706:	b29b      	uxth	r3, r3
 8111708:	1ad3      	subs	r3, r2, r3
 811170a:	b29b      	uxth	r3, r3
 811170c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8111710:	687b      	ldr	r3, [r7, #4]
 8111712:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8111716:	b29a      	uxth	r2, r3
 8111718:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811171c:	4413      	add	r3, r2
 811171e:	b29b      	uxth	r3, r3
 8111720:	b21a      	sxth	r2, r3
 8111722:	687b      	ldr	r3, [r7, #4]
 8111724:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8111726:	687b      	ldr	r3, [r7, #4]
 8111728:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811172c:	10db      	asrs	r3, r3, #3
 811172e:	b21b      	sxth	r3, r3
 8111730:	b29a      	uxth	r2, r3
 8111732:	687b      	ldr	r3, [r7, #4]
 8111734:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8111738:	b29b      	uxth	r3, r3
 811173a:	4413      	add	r3, r2
 811173c:	b29b      	uxth	r3, r3
 811173e:	b21a      	sxth	r2, r3
 8111740:	687b      	ldr	r3, [r7, #4]
 8111742:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8111746:	687b      	ldr	r3, [r7, #4]
 8111748:	2200      	movs	r2, #0
 811174a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 811174c:	4b35      	ldr	r3, [pc, #212]	@ (8111824 <tcp_receive+0x5e4>)
 811174e:	881b      	ldrh	r3, [r3, #0]
 8111750:	2b00      	cmp	r3, #0
 8111752:	f000 84df 	beq.w	8112114 <tcp_receive+0xed4>
 8111756:	687b      	ldr	r3, [r7, #4]
 8111758:	7d1b      	ldrb	r3, [r3, #20]
 811175a:	2b06      	cmp	r3, #6
 811175c:	f200 84da 	bhi.w	8112114 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8111760:	687b      	ldr	r3, [r7, #4]
 8111762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111764:	4b30      	ldr	r3, [pc, #192]	@ (8111828 <tcp_receive+0x5e8>)
 8111766:	681b      	ldr	r3, [r3, #0]
 8111768:	1ad3      	subs	r3, r2, r3
 811176a:	3b01      	subs	r3, #1
 811176c:	2b00      	cmp	r3, #0
 811176e:	f2c0 808f 	blt.w	8111890 <tcp_receive+0x650>
 8111772:	687b      	ldr	r3, [r7, #4]
 8111774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111776:	4b2b      	ldr	r3, [pc, #172]	@ (8111824 <tcp_receive+0x5e4>)
 8111778:	881b      	ldrh	r3, [r3, #0]
 811177a:	4619      	mov	r1, r3
 811177c:	4b2a      	ldr	r3, [pc, #168]	@ (8111828 <tcp_receive+0x5e8>)
 811177e:	681b      	ldr	r3, [r3, #0]
 8111780:	440b      	add	r3, r1
 8111782:	1ad3      	subs	r3, r2, r3
 8111784:	3301      	adds	r3, #1
 8111786:	2b00      	cmp	r3, #0
 8111788:	f300 8082 	bgt.w	8111890 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 811178c:	4b27      	ldr	r3, [pc, #156]	@ (811182c <tcp_receive+0x5ec>)
 811178e:	685b      	ldr	r3, [r3, #4]
 8111790:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8111792:	687b      	ldr	r3, [r7, #4]
 8111794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111796:	4b24      	ldr	r3, [pc, #144]	@ (8111828 <tcp_receive+0x5e8>)
 8111798:	681b      	ldr	r3, [r3, #0]
 811179a:	1ad3      	subs	r3, r2, r3
 811179c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 811179e:	4b23      	ldr	r3, [pc, #140]	@ (811182c <tcp_receive+0x5ec>)
 81117a0:	685b      	ldr	r3, [r3, #4]
 81117a2:	2b00      	cmp	r3, #0
 81117a4:	d106      	bne.n	81117b4 <tcp_receive+0x574>
 81117a6:	4b22      	ldr	r3, [pc, #136]	@ (8111830 <tcp_receive+0x5f0>)
 81117a8:	f240 5294 	movw	r2, #1428	@ 0x594
 81117ac:	4921      	ldr	r1, [pc, #132]	@ (8111834 <tcp_receive+0x5f4>)
 81117ae:	4822      	ldr	r0, [pc, #136]	@ (8111838 <tcp_receive+0x5f8>)
 81117b0:	f005 fe42 	bl	8117438 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 81117b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81117b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 81117ba:	4293      	cmp	r3, r2
 81117bc:	d906      	bls.n	81117cc <tcp_receive+0x58c>
 81117be:	4b1c      	ldr	r3, [pc, #112]	@ (8111830 <tcp_receive+0x5f0>)
 81117c0:	f240 5295 	movw	r2, #1429	@ 0x595
 81117c4:	491d      	ldr	r1, [pc, #116]	@ (811183c <tcp_receive+0x5fc>)
 81117c6:	481c      	ldr	r0, [pc, #112]	@ (8111838 <tcp_receive+0x5f8>)
 81117c8:	f005 fe36 	bl	8117438 <iprintf>
      off = (u16_t)off32;
 81117cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81117ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 81117d2:	4b16      	ldr	r3, [pc, #88]	@ (811182c <tcp_receive+0x5ec>)
 81117d4:	685b      	ldr	r3, [r3, #4]
 81117d6:	891b      	ldrh	r3, [r3, #8]
 81117d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81117dc:	429a      	cmp	r2, r3
 81117de:	d906      	bls.n	81117ee <tcp_receive+0x5ae>
 81117e0:	4b13      	ldr	r3, [pc, #76]	@ (8111830 <tcp_receive+0x5f0>)
 81117e2:	f240 5297 	movw	r2, #1431	@ 0x597
 81117e6:	4916      	ldr	r1, [pc, #88]	@ (8111840 <tcp_receive+0x600>)
 81117e8:	4813      	ldr	r0, [pc, #76]	@ (8111838 <tcp_receive+0x5f8>)
 81117ea:	f005 fe25 	bl	8117438 <iprintf>
      inseg.len -= off;
 81117ee:	4b0f      	ldr	r3, [pc, #60]	@ (811182c <tcp_receive+0x5ec>)
 81117f0:	891a      	ldrh	r2, [r3, #8]
 81117f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81117f6:	1ad3      	subs	r3, r2, r3
 81117f8:	b29a      	uxth	r2, r3
 81117fa:	4b0c      	ldr	r3, [pc, #48]	@ (811182c <tcp_receive+0x5ec>)
 81117fc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 81117fe:	4b0b      	ldr	r3, [pc, #44]	@ (811182c <tcp_receive+0x5ec>)
 8111800:	685b      	ldr	r3, [r3, #4]
 8111802:	891a      	ldrh	r2, [r3, #8]
 8111804:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8111808:	1ad3      	subs	r3, r2, r3
 811180a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 811180c:	e02a      	b.n	8111864 <tcp_receive+0x624>
 811180e:	bf00      	nop
 8111810:	0811e108 	.word	0x0811e108
 8111814:	0811e110 	.word	0x0811e110
 8111818:	10017738 	.word	0x10017738
 811181c:	10017734 	.word	0x10017734
 8111820:	100176f8 	.word	0x100176f8
 8111824:	1001773a 	.word	0x1001773a
 8111828:	10017730 	.word	0x10017730
 811182c:	10017710 	.word	0x10017710
 8111830:	0811dd74 	.word	0x0811dd74
 8111834:	0811e118 	.word	0x0811e118
 8111838:	0811ddec 	.word	0x0811ddec
 811183c:	0811e128 	.word	0x0811e128
 8111840:	0811e138 	.word	0x0811e138
        off -= p->len;
 8111844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111846:	895b      	ldrh	r3, [r3, #10]
 8111848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811184c:	1ad3      	subs	r3, r2, r3
 811184e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8111852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111854:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8111856:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8111858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811185a:	2200      	movs	r2, #0
 811185c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 811185e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111860:	681b      	ldr	r3, [r3, #0]
 8111862:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8111864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111866:	895b      	ldrh	r3, [r3, #10]
 8111868:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811186c:	429a      	cmp	r2, r3
 811186e:	d8e9      	bhi.n	8111844 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8111870:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8111874:	4619      	mov	r1, r3
 8111876:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8111878:	f7fc f9e0 	bl	810dc3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 811187c:	687b      	ldr	r3, [r7, #4]
 811187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111880:	4a90      	ldr	r2, [pc, #576]	@ (8111ac4 <tcp_receive+0x884>)
 8111882:	6013      	str	r3, [r2, #0]
 8111884:	4b90      	ldr	r3, [pc, #576]	@ (8111ac8 <tcp_receive+0x888>)
 8111886:	68db      	ldr	r3, [r3, #12]
 8111888:	4a8e      	ldr	r2, [pc, #568]	@ (8111ac4 <tcp_receive+0x884>)
 811188a:	6812      	ldr	r2, [r2, #0]
 811188c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811188e:	e00d      	b.n	81118ac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8111890:	4b8c      	ldr	r3, [pc, #560]	@ (8111ac4 <tcp_receive+0x884>)
 8111892:	681a      	ldr	r2, [r3, #0]
 8111894:	687b      	ldr	r3, [r7, #4]
 8111896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111898:	1ad3      	subs	r3, r2, r3
 811189a:	2b00      	cmp	r3, #0
 811189c:	da06      	bge.n	81118ac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 811189e:	687b      	ldr	r3, [r7, #4]
 81118a0:	8b5b      	ldrh	r3, [r3, #26]
 81118a2:	f043 0302 	orr.w	r3, r3, #2
 81118a6:	b29a      	uxth	r2, r3
 81118a8:	687b      	ldr	r3, [r7, #4]
 81118aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 81118ac:	4b85      	ldr	r3, [pc, #532]	@ (8111ac4 <tcp_receive+0x884>)
 81118ae:	681a      	ldr	r2, [r3, #0]
 81118b0:	687b      	ldr	r3, [r7, #4]
 81118b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81118b4:	1ad3      	subs	r3, r2, r3
 81118b6:	2b00      	cmp	r3, #0
 81118b8:	f2c0 8427 	blt.w	811210a <tcp_receive+0xeca>
 81118bc:	4b81      	ldr	r3, [pc, #516]	@ (8111ac4 <tcp_receive+0x884>)
 81118be:	681a      	ldr	r2, [r3, #0]
 81118c0:	687b      	ldr	r3, [r7, #4]
 81118c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81118c4:	6879      	ldr	r1, [r7, #4]
 81118c6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81118c8:	440b      	add	r3, r1
 81118ca:	1ad3      	subs	r3, r2, r3
 81118cc:	3301      	adds	r3, #1
 81118ce:	2b00      	cmp	r3, #0
 81118d0:	f300 841b 	bgt.w	811210a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 81118d4:	687b      	ldr	r3, [r7, #4]
 81118d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81118d8:	4b7a      	ldr	r3, [pc, #488]	@ (8111ac4 <tcp_receive+0x884>)
 81118da:	681b      	ldr	r3, [r3, #0]
 81118dc:	429a      	cmp	r2, r3
 81118de:	f040 8298 	bne.w	8111e12 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 81118e2:	4b79      	ldr	r3, [pc, #484]	@ (8111ac8 <tcp_receive+0x888>)
 81118e4:	891c      	ldrh	r4, [r3, #8]
 81118e6:	4b78      	ldr	r3, [pc, #480]	@ (8111ac8 <tcp_receive+0x888>)
 81118e8:	68db      	ldr	r3, [r3, #12]
 81118ea:	899b      	ldrh	r3, [r3, #12]
 81118ec:	b29b      	uxth	r3, r3
 81118ee:	4618      	mov	r0, r3
 81118f0:	f7f8 fb26 	bl	8109f40 <lwip_htons>
 81118f4:	4603      	mov	r3, r0
 81118f6:	b2db      	uxtb	r3, r3
 81118f8:	f003 0303 	and.w	r3, r3, #3
 81118fc:	2b00      	cmp	r3, #0
 81118fe:	d001      	beq.n	8111904 <tcp_receive+0x6c4>
 8111900:	2301      	movs	r3, #1
 8111902:	e000      	b.n	8111906 <tcp_receive+0x6c6>
 8111904:	2300      	movs	r3, #0
 8111906:	4423      	add	r3, r4
 8111908:	b29a      	uxth	r2, r3
 811190a:	4b70      	ldr	r3, [pc, #448]	@ (8111acc <tcp_receive+0x88c>)
 811190c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 811190e:	687b      	ldr	r3, [r7, #4]
 8111910:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8111912:	4b6e      	ldr	r3, [pc, #440]	@ (8111acc <tcp_receive+0x88c>)
 8111914:	881b      	ldrh	r3, [r3, #0]
 8111916:	429a      	cmp	r2, r3
 8111918:	d274      	bcs.n	8111a04 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811191a:	4b6b      	ldr	r3, [pc, #428]	@ (8111ac8 <tcp_receive+0x888>)
 811191c:	68db      	ldr	r3, [r3, #12]
 811191e:	899b      	ldrh	r3, [r3, #12]
 8111920:	b29b      	uxth	r3, r3
 8111922:	4618      	mov	r0, r3
 8111924:	f7f8 fb0c 	bl	8109f40 <lwip_htons>
 8111928:	4603      	mov	r3, r0
 811192a:	b2db      	uxtb	r3, r3
 811192c:	f003 0301 	and.w	r3, r3, #1
 8111930:	2b00      	cmp	r3, #0
 8111932:	d01e      	beq.n	8111972 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8111934:	4b64      	ldr	r3, [pc, #400]	@ (8111ac8 <tcp_receive+0x888>)
 8111936:	68db      	ldr	r3, [r3, #12]
 8111938:	899b      	ldrh	r3, [r3, #12]
 811193a:	b29b      	uxth	r3, r3
 811193c:	b21b      	sxth	r3, r3
 811193e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8111942:	b21c      	sxth	r4, r3
 8111944:	4b60      	ldr	r3, [pc, #384]	@ (8111ac8 <tcp_receive+0x888>)
 8111946:	68db      	ldr	r3, [r3, #12]
 8111948:	899b      	ldrh	r3, [r3, #12]
 811194a:	b29b      	uxth	r3, r3
 811194c:	4618      	mov	r0, r3
 811194e:	f7f8 faf7 	bl	8109f40 <lwip_htons>
 8111952:	4603      	mov	r3, r0
 8111954:	b2db      	uxtb	r3, r3
 8111956:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811195a:	b29b      	uxth	r3, r3
 811195c:	4618      	mov	r0, r3
 811195e:	f7f8 faef 	bl	8109f40 <lwip_htons>
 8111962:	4603      	mov	r3, r0
 8111964:	b21b      	sxth	r3, r3
 8111966:	4323      	orrs	r3, r4
 8111968:	b21a      	sxth	r2, r3
 811196a:	4b57      	ldr	r3, [pc, #348]	@ (8111ac8 <tcp_receive+0x888>)
 811196c:	68db      	ldr	r3, [r3, #12]
 811196e:	b292      	uxth	r2, r2
 8111970:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8111972:	687b      	ldr	r3, [r7, #4]
 8111974:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8111976:	4b54      	ldr	r3, [pc, #336]	@ (8111ac8 <tcp_receive+0x888>)
 8111978:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811197a:	4b53      	ldr	r3, [pc, #332]	@ (8111ac8 <tcp_receive+0x888>)
 811197c:	68db      	ldr	r3, [r3, #12]
 811197e:	899b      	ldrh	r3, [r3, #12]
 8111980:	b29b      	uxth	r3, r3
 8111982:	4618      	mov	r0, r3
 8111984:	f7f8 fadc 	bl	8109f40 <lwip_htons>
 8111988:	4603      	mov	r3, r0
 811198a:	b2db      	uxtb	r3, r3
 811198c:	f003 0302 	and.w	r3, r3, #2
 8111990:	2b00      	cmp	r3, #0
 8111992:	d005      	beq.n	81119a0 <tcp_receive+0x760>
            inseg.len -= 1;
 8111994:	4b4c      	ldr	r3, [pc, #304]	@ (8111ac8 <tcp_receive+0x888>)
 8111996:	891b      	ldrh	r3, [r3, #8]
 8111998:	3b01      	subs	r3, #1
 811199a:	b29a      	uxth	r2, r3
 811199c:	4b4a      	ldr	r3, [pc, #296]	@ (8111ac8 <tcp_receive+0x888>)
 811199e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 81119a0:	4b49      	ldr	r3, [pc, #292]	@ (8111ac8 <tcp_receive+0x888>)
 81119a2:	685b      	ldr	r3, [r3, #4]
 81119a4:	4a48      	ldr	r2, [pc, #288]	@ (8111ac8 <tcp_receive+0x888>)
 81119a6:	8912      	ldrh	r2, [r2, #8]
 81119a8:	4611      	mov	r1, r2
 81119aa:	4618      	mov	r0, r3
 81119ac:	f7fc f846 	bl	810da3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 81119b0:	4b45      	ldr	r3, [pc, #276]	@ (8111ac8 <tcp_receive+0x888>)
 81119b2:	891c      	ldrh	r4, [r3, #8]
 81119b4:	4b44      	ldr	r3, [pc, #272]	@ (8111ac8 <tcp_receive+0x888>)
 81119b6:	68db      	ldr	r3, [r3, #12]
 81119b8:	899b      	ldrh	r3, [r3, #12]
 81119ba:	b29b      	uxth	r3, r3
 81119bc:	4618      	mov	r0, r3
 81119be:	f7f8 fabf 	bl	8109f40 <lwip_htons>
 81119c2:	4603      	mov	r3, r0
 81119c4:	b2db      	uxtb	r3, r3
 81119c6:	f003 0303 	and.w	r3, r3, #3
 81119ca:	2b00      	cmp	r3, #0
 81119cc:	d001      	beq.n	81119d2 <tcp_receive+0x792>
 81119ce:	2301      	movs	r3, #1
 81119d0:	e000      	b.n	81119d4 <tcp_receive+0x794>
 81119d2:	2300      	movs	r3, #0
 81119d4:	4423      	add	r3, r4
 81119d6:	b29a      	uxth	r2, r3
 81119d8:	4b3c      	ldr	r3, [pc, #240]	@ (8111acc <tcp_receive+0x88c>)
 81119da:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 81119dc:	4b3b      	ldr	r3, [pc, #236]	@ (8111acc <tcp_receive+0x88c>)
 81119de:	881b      	ldrh	r3, [r3, #0]
 81119e0:	461a      	mov	r2, r3
 81119e2:	4b38      	ldr	r3, [pc, #224]	@ (8111ac4 <tcp_receive+0x884>)
 81119e4:	681b      	ldr	r3, [r3, #0]
 81119e6:	441a      	add	r2, r3
 81119e8:	687b      	ldr	r3, [r7, #4]
 81119ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81119ec:	6879      	ldr	r1, [r7, #4]
 81119ee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81119f0:	440b      	add	r3, r1
 81119f2:	429a      	cmp	r2, r3
 81119f4:	d006      	beq.n	8111a04 <tcp_receive+0x7c4>
 81119f6:	4b36      	ldr	r3, [pc, #216]	@ (8111ad0 <tcp_receive+0x890>)
 81119f8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 81119fc:	4935      	ldr	r1, [pc, #212]	@ (8111ad4 <tcp_receive+0x894>)
 81119fe:	4836      	ldr	r0, [pc, #216]	@ (8111ad8 <tcp_receive+0x898>)
 8111a00:	f005 fd1a 	bl	8117438 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8111a04:	687b      	ldr	r3, [r7, #4]
 8111a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111a08:	2b00      	cmp	r3, #0
 8111a0a:	f000 80e6 	beq.w	8111bda <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8111a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8111ac8 <tcp_receive+0x888>)
 8111a10:	68db      	ldr	r3, [r3, #12]
 8111a12:	899b      	ldrh	r3, [r3, #12]
 8111a14:	b29b      	uxth	r3, r3
 8111a16:	4618      	mov	r0, r3
 8111a18:	f7f8 fa92 	bl	8109f40 <lwip_htons>
 8111a1c:	4603      	mov	r3, r0
 8111a1e:	b2db      	uxtb	r3, r3
 8111a20:	f003 0301 	and.w	r3, r3, #1
 8111a24:	2b00      	cmp	r3, #0
 8111a26:	d010      	beq.n	8111a4a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8111a28:	e00a      	b.n	8111a40 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8111a2a:	687b      	ldr	r3, [r7, #4]
 8111a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111a2e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8111a30:	687b      	ldr	r3, [r7, #4]
 8111a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111a34:	681a      	ldr	r2, [r3, #0]
 8111a36:	687b      	ldr	r3, [r7, #4]
 8111a38:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8111a3a:	68f8      	ldr	r0, [r7, #12]
 8111a3c:	f7fd fd57 	bl	810f4ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8111a40:	687b      	ldr	r3, [r7, #4]
 8111a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111a44:	2b00      	cmp	r3, #0
 8111a46:	d1f0      	bne.n	8111a2a <tcp_receive+0x7ea>
 8111a48:	e0c7      	b.n	8111bda <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8111a4a:	687b      	ldr	r3, [r7, #4]
 8111a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8111a50:	e051      	b.n	8111af6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8111a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111a54:	68db      	ldr	r3, [r3, #12]
 8111a56:	899b      	ldrh	r3, [r3, #12]
 8111a58:	b29b      	uxth	r3, r3
 8111a5a:	4618      	mov	r0, r3
 8111a5c:	f7f8 fa70 	bl	8109f40 <lwip_htons>
 8111a60:	4603      	mov	r3, r0
 8111a62:	b2db      	uxtb	r3, r3
 8111a64:	f003 0301 	and.w	r3, r3, #1
 8111a68:	2b00      	cmp	r3, #0
 8111a6a:	d03c      	beq.n	8111ae6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8111a6c:	4b16      	ldr	r3, [pc, #88]	@ (8111ac8 <tcp_receive+0x888>)
 8111a6e:	68db      	ldr	r3, [r3, #12]
 8111a70:	899b      	ldrh	r3, [r3, #12]
 8111a72:	b29b      	uxth	r3, r3
 8111a74:	4618      	mov	r0, r3
 8111a76:	f7f8 fa63 	bl	8109f40 <lwip_htons>
 8111a7a:	4603      	mov	r3, r0
 8111a7c:	b2db      	uxtb	r3, r3
 8111a7e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8111a82:	2b00      	cmp	r3, #0
 8111a84:	d12f      	bne.n	8111ae6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8111a86:	4b10      	ldr	r3, [pc, #64]	@ (8111ac8 <tcp_receive+0x888>)
 8111a88:	68db      	ldr	r3, [r3, #12]
 8111a8a:	899b      	ldrh	r3, [r3, #12]
 8111a8c:	b29c      	uxth	r4, r3
 8111a8e:	2001      	movs	r0, #1
 8111a90:	f7f8 fa56 	bl	8109f40 <lwip_htons>
 8111a94:	4603      	mov	r3, r0
 8111a96:	461a      	mov	r2, r3
 8111a98:	4b0b      	ldr	r3, [pc, #44]	@ (8111ac8 <tcp_receive+0x888>)
 8111a9a:	68db      	ldr	r3, [r3, #12]
 8111a9c:	4322      	orrs	r2, r4
 8111a9e:	b292      	uxth	r2, r2
 8111aa0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8111aa2:	4b09      	ldr	r3, [pc, #36]	@ (8111ac8 <tcp_receive+0x888>)
 8111aa4:	891c      	ldrh	r4, [r3, #8]
 8111aa6:	4b08      	ldr	r3, [pc, #32]	@ (8111ac8 <tcp_receive+0x888>)
 8111aa8:	68db      	ldr	r3, [r3, #12]
 8111aaa:	899b      	ldrh	r3, [r3, #12]
 8111aac:	b29b      	uxth	r3, r3
 8111aae:	4618      	mov	r0, r3
 8111ab0:	f7f8 fa46 	bl	8109f40 <lwip_htons>
 8111ab4:	4603      	mov	r3, r0
 8111ab6:	b2db      	uxtb	r3, r3
 8111ab8:	f003 0303 	and.w	r3, r3, #3
 8111abc:	2b00      	cmp	r3, #0
 8111abe:	d00d      	beq.n	8111adc <tcp_receive+0x89c>
 8111ac0:	2301      	movs	r3, #1
 8111ac2:	e00c      	b.n	8111ade <tcp_receive+0x89e>
 8111ac4:	10017730 	.word	0x10017730
 8111ac8:	10017710 	.word	0x10017710
 8111acc:	1001773a 	.word	0x1001773a
 8111ad0:	0811dd74 	.word	0x0811dd74
 8111ad4:	0811e148 	.word	0x0811e148
 8111ad8:	0811ddec 	.word	0x0811ddec
 8111adc:	2300      	movs	r3, #0
 8111ade:	4423      	add	r3, r4
 8111ae0:	b29a      	uxth	r2, r3
 8111ae2:	4b98      	ldr	r3, [pc, #608]	@ (8111d44 <tcp_receive+0xb04>)
 8111ae4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8111ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111ae8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8111aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111aec:	681b      	ldr	r3, [r3, #0]
 8111aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8111af0:	6938      	ldr	r0, [r7, #16]
 8111af2:	f7fd fcfc 	bl	810f4ee <tcp_seg_free>
            while (next &&
 8111af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111af8:	2b00      	cmp	r3, #0
 8111afa:	d00e      	beq.n	8111b1a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8111afc:	4b91      	ldr	r3, [pc, #580]	@ (8111d44 <tcp_receive+0xb04>)
 8111afe:	881b      	ldrh	r3, [r3, #0]
 8111b00:	461a      	mov	r2, r3
 8111b02:	4b91      	ldr	r3, [pc, #580]	@ (8111d48 <tcp_receive+0xb08>)
 8111b04:	681b      	ldr	r3, [r3, #0]
 8111b06:	441a      	add	r2, r3
 8111b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111b0a:	68db      	ldr	r3, [r3, #12]
 8111b0c:	685b      	ldr	r3, [r3, #4]
 8111b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8111b10:	8909      	ldrh	r1, [r1, #8]
 8111b12:	440b      	add	r3, r1
 8111b14:	1ad3      	subs	r3, r2, r3
            while (next &&
 8111b16:	2b00      	cmp	r3, #0
 8111b18:	da9b      	bge.n	8111a52 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8111b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111b1c:	2b00      	cmp	r3, #0
 8111b1e:	d059      	beq.n	8111bd4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8111b20:	4b88      	ldr	r3, [pc, #544]	@ (8111d44 <tcp_receive+0xb04>)
 8111b22:	881b      	ldrh	r3, [r3, #0]
 8111b24:	461a      	mov	r2, r3
 8111b26:	4b88      	ldr	r3, [pc, #544]	@ (8111d48 <tcp_receive+0xb08>)
 8111b28:	681b      	ldr	r3, [r3, #0]
 8111b2a:	441a      	add	r2, r3
 8111b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111b2e:	68db      	ldr	r3, [r3, #12]
 8111b30:	685b      	ldr	r3, [r3, #4]
 8111b32:	1ad3      	subs	r3, r2, r3
            if (next &&
 8111b34:	2b00      	cmp	r3, #0
 8111b36:	dd4d      	ble.n	8111bd4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8111b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111b3a:	68db      	ldr	r3, [r3, #12]
 8111b3c:	685b      	ldr	r3, [r3, #4]
 8111b3e:	b29a      	uxth	r2, r3
 8111b40:	4b81      	ldr	r3, [pc, #516]	@ (8111d48 <tcp_receive+0xb08>)
 8111b42:	681b      	ldr	r3, [r3, #0]
 8111b44:	b29b      	uxth	r3, r3
 8111b46:	1ad3      	subs	r3, r2, r3
 8111b48:	b29a      	uxth	r2, r3
 8111b4a:	4b80      	ldr	r3, [pc, #512]	@ (8111d4c <tcp_receive+0xb0c>)
 8111b4c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8111b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8111d4c <tcp_receive+0xb0c>)
 8111b50:	68db      	ldr	r3, [r3, #12]
 8111b52:	899b      	ldrh	r3, [r3, #12]
 8111b54:	b29b      	uxth	r3, r3
 8111b56:	4618      	mov	r0, r3
 8111b58:	f7f8 f9f2 	bl	8109f40 <lwip_htons>
 8111b5c:	4603      	mov	r3, r0
 8111b5e:	b2db      	uxtb	r3, r3
 8111b60:	f003 0302 	and.w	r3, r3, #2
 8111b64:	2b00      	cmp	r3, #0
 8111b66:	d005      	beq.n	8111b74 <tcp_receive+0x934>
                inseg.len -= 1;
 8111b68:	4b78      	ldr	r3, [pc, #480]	@ (8111d4c <tcp_receive+0xb0c>)
 8111b6a:	891b      	ldrh	r3, [r3, #8]
 8111b6c:	3b01      	subs	r3, #1
 8111b6e:	b29a      	uxth	r2, r3
 8111b70:	4b76      	ldr	r3, [pc, #472]	@ (8111d4c <tcp_receive+0xb0c>)
 8111b72:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8111b74:	4b75      	ldr	r3, [pc, #468]	@ (8111d4c <tcp_receive+0xb0c>)
 8111b76:	685b      	ldr	r3, [r3, #4]
 8111b78:	4a74      	ldr	r2, [pc, #464]	@ (8111d4c <tcp_receive+0xb0c>)
 8111b7a:	8912      	ldrh	r2, [r2, #8]
 8111b7c:	4611      	mov	r1, r2
 8111b7e:	4618      	mov	r0, r3
 8111b80:	f7fb ff5c 	bl	810da3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8111b84:	4b71      	ldr	r3, [pc, #452]	@ (8111d4c <tcp_receive+0xb0c>)
 8111b86:	891c      	ldrh	r4, [r3, #8]
 8111b88:	4b70      	ldr	r3, [pc, #448]	@ (8111d4c <tcp_receive+0xb0c>)
 8111b8a:	68db      	ldr	r3, [r3, #12]
 8111b8c:	899b      	ldrh	r3, [r3, #12]
 8111b8e:	b29b      	uxth	r3, r3
 8111b90:	4618      	mov	r0, r3
 8111b92:	f7f8 f9d5 	bl	8109f40 <lwip_htons>
 8111b96:	4603      	mov	r3, r0
 8111b98:	b2db      	uxtb	r3, r3
 8111b9a:	f003 0303 	and.w	r3, r3, #3
 8111b9e:	2b00      	cmp	r3, #0
 8111ba0:	d001      	beq.n	8111ba6 <tcp_receive+0x966>
 8111ba2:	2301      	movs	r3, #1
 8111ba4:	e000      	b.n	8111ba8 <tcp_receive+0x968>
 8111ba6:	2300      	movs	r3, #0
 8111ba8:	4423      	add	r3, r4
 8111baa:	b29a      	uxth	r2, r3
 8111bac:	4b65      	ldr	r3, [pc, #404]	@ (8111d44 <tcp_receive+0xb04>)
 8111bae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8111bb0:	4b64      	ldr	r3, [pc, #400]	@ (8111d44 <tcp_receive+0xb04>)
 8111bb2:	881b      	ldrh	r3, [r3, #0]
 8111bb4:	461a      	mov	r2, r3
 8111bb6:	4b64      	ldr	r3, [pc, #400]	@ (8111d48 <tcp_receive+0xb08>)
 8111bb8:	681b      	ldr	r3, [r3, #0]
 8111bba:	441a      	add	r2, r3
 8111bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111bbe:	68db      	ldr	r3, [r3, #12]
 8111bc0:	685b      	ldr	r3, [r3, #4]
 8111bc2:	429a      	cmp	r2, r3
 8111bc4:	d006      	beq.n	8111bd4 <tcp_receive+0x994>
 8111bc6:	4b62      	ldr	r3, [pc, #392]	@ (8111d50 <tcp_receive+0xb10>)
 8111bc8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8111bcc:	4961      	ldr	r1, [pc, #388]	@ (8111d54 <tcp_receive+0xb14>)
 8111bce:	4862      	ldr	r0, [pc, #392]	@ (8111d58 <tcp_receive+0xb18>)
 8111bd0:	f005 fc32 	bl	8117438 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8111bd4:	687b      	ldr	r3, [r7, #4]
 8111bd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8111bd8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8111bda:	4b5a      	ldr	r3, [pc, #360]	@ (8111d44 <tcp_receive+0xb04>)
 8111bdc:	881b      	ldrh	r3, [r3, #0]
 8111bde:	461a      	mov	r2, r3
 8111be0:	4b59      	ldr	r3, [pc, #356]	@ (8111d48 <tcp_receive+0xb08>)
 8111be2:	681b      	ldr	r3, [r3, #0]
 8111be4:	441a      	add	r2, r3
 8111be6:	687b      	ldr	r3, [r7, #4]
 8111be8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8111bea:	687b      	ldr	r3, [r7, #4]
 8111bec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8111bee:	4b55      	ldr	r3, [pc, #340]	@ (8111d44 <tcp_receive+0xb04>)
 8111bf0:	881b      	ldrh	r3, [r3, #0]
 8111bf2:	429a      	cmp	r2, r3
 8111bf4:	d206      	bcs.n	8111c04 <tcp_receive+0x9c4>
 8111bf6:	4b56      	ldr	r3, [pc, #344]	@ (8111d50 <tcp_receive+0xb10>)
 8111bf8:	f240 6207 	movw	r2, #1543	@ 0x607
 8111bfc:	4957      	ldr	r1, [pc, #348]	@ (8111d5c <tcp_receive+0xb1c>)
 8111bfe:	4856      	ldr	r0, [pc, #344]	@ (8111d58 <tcp_receive+0xb18>)
 8111c00:	f005 fc1a 	bl	8117438 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8111c04:	687b      	ldr	r3, [r7, #4]
 8111c06:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8111c08:	4b4e      	ldr	r3, [pc, #312]	@ (8111d44 <tcp_receive+0xb04>)
 8111c0a:	881b      	ldrh	r3, [r3, #0]
 8111c0c:	1ad3      	subs	r3, r2, r3
 8111c0e:	b29a      	uxth	r2, r3
 8111c10:	687b      	ldr	r3, [r7, #4]
 8111c12:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8111c14:	6878      	ldr	r0, [r7, #4]
 8111c16:	f7fc fe2b 	bl	810e870 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8111c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8111d4c <tcp_receive+0xb0c>)
 8111c1c:	685b      	ldr	r3, [r3, #4]
 8111c1e:	891b      	ldrh	r3, [r3, #8]
 8111c20:	2b00      	cmp	r3, #0
 8111c22:	d006      	beq.n	8111c32 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8111c24:	4b49      	ldr	r3, [pc, #292]	@ (8111d4c <tcp_receive+0xb0c>)
 8111c26:	685b      	ldr	r3, [r3, #4]
 8111c28:	4a4d      	ldr	r2, [pc, #308]	@ (8111d60 <tcp_receive+0xb20>)
 8111c2a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8111c2c:	4b47      	ldr	r3, [pc, #284]	@ (8111d4c <tcp_receive+0xb0c>)
 8111c2e:	2200      	movs	r2, #0
 8111c30:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8111c32:	4b46      	ldr	r3, [pc, #280]	@ (8111d4c <tcp_receive+0xb0c>)
 8111c34:	68db      	ldr	r3, [r3, #12]
 8111c36:	899b      	ldrh	r3, [r3, #12]
 8111c38:	b29b      	uxth	r3, r3
 8111c3a:	4618      	mov	r0, r3
 8111c3c:	f7f8 f980 	bl	8109f40 <lwip_htons>
 8111c40:	4603      	mov	r3, r0
 8111c42:	b2db      	uxtb	r3, r3
 8111c44:	f003 0301 	and.w	r3, r3, #1
 8111c48:	2b00      	cmp	r3, #0
 8111c4a:	f000 80b8 	beq.w	8111dbe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8111c4e:	4b45      	ldr	r3, [pc, #276]	@ (8111d64 <tcp_receive+0xb24>)
 8111c50:	781b      	ldrb	r3, [r3, #0]
 8111c52:	f043 0320 	orr.w	r3, r3, #32
 8111c56:	b2da      	uxtb	r2, r3
 8111c58:	4b42      	ldr	r3, [pc, #264]	@ (8111d64 <tcp_receive+0xb24>)
 8111c5a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8111c5c:	e0af      	b.n	8111dbe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8111c5e:	687b      	ldr	r3, [r7, #4]
 8111c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111c62:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8111c64:	687b      	ldr	r3, [r7, #4]
 8111c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111c68:	68db      	ldr	r3, [r3, #12]
 8111c6a:	685b      	ldr	r3, [r3, #4]
 8111c6c:	4a36      	ldr	r2, [pc, #216]	@ (8111d48 <tcp_receive+0xb08>)
 8111c6e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8111c70:	68bb      	ldr	r3, [r7, #8]
 8111c72:	891b      	ldrh	r3, [r3, #8]
 8111c74:	461c      	mov	r4, r3
 8111c76:	68bb      	ldr	r3, [r7, #8]
 8111c78:	68db      	ldr	r3, [r3, #12]
 8111c7a:	899b      	ldrh	r3, [r3, #12]
 8111c7c:	b29b      	uxth	r3, r3
 8111c7e:	4618      	mov	r0, r3
 8111c80:	f7f8 f95e 	bl	8109f40 <lwip_htons>
 8111c84:	4603      	mov	r3, r0
 8111c86:	b2db      	uxtb	r3, r3
 8111c88:	f003 0303 	and.w	r3, r3, #3
 8111c8c:	2b00      	cmp	r3, #0
 8111c8e:	d001      	beq.n	8111c94 <tcp_receive+0xa54>
 8111c90:	2301      	movs	r3, #1
 8111c92:	e000      	b.n	8111c96 <tcp_receive+0xa56>
 8111c94:	2300      	movs	r3, #0
 8111c96:	191a      	adds	r2, r3, r4
 8111c98:	687b      	ldr	r3, [r7, #4]
 8111c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111c9c:	441a      	add	r2, r3
 8111c9e:	687b      	ldr	r3, [r7, #4]
 8111ca0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8111ca2:	687b      	ldr	r3, [r7, #4]
 8111ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8111ca6:	461c      	mov	r4, r3
 8111ca8:	68bb      	ldr	r3, [r7, #8]
 8111caa:	891b      	ldrh	r3, [r3, #8]
 8111cac:	461d      	mov	r5, r3
 8111cae:	68bb      	ldr	r3, [r7, #8]
 8111cb0:	68db      	ldr	r3, [r3, #12]
 8111cb2:	899b      	ldrh	r3, [r3, #12]
 8111cb4:	b29b      	uxth	r3, r3
 8111cb6:	4618      	mov	r0, r3
 8111cb8:	f7f8 f942 	bl	8109f40 <lwip_htons>
 8111cbc:	4603      	mov	r3, r0
 8111cbe:	b2db      	uxtb	r3, r3
 8111cc0:	f003 0303 	and.w	r3, r3, #3
 8111cc4:	2b00      	cmp	r3, #0
 8111cc6:	d001      	beq.n	8111ccc <tcp_receive+0xa8c>
 8111cc8:	2301      	movs	r3, #1
 8111cca:	e000      	b.n	8111cce <tcp_receive+0xa8e>
 8111ccc:	2300      	movs	r3, #0
 8111cce:	442b      	add	r3, r5
 8111cd0:	429c      	cmp	r4, r3
 8111cd2:	d206      	bcs.n	8111ce2 <tcp_receive+0xaa2>
 8111cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8111d50 <tcp_receive+0xb10>)
 8111cd6:	f240 622b 	movw	r2, #1579	@ 0x62b
 8111cda:	4923      	ldr	r1, [pc, #140]	@ (8111d68 <tcp_receive+0xb28>)
 8111cdc:	481e      	ldr	r0, [pc, #120]	@ (8111d58 <tcp_receive+0xb18>)
 8111cde:	f005 fbab 	bl	8117438 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8111ce2:	68bb      	ldr	r3, [r7, #8]
 8111ce4:	891b      	ldrh	r3, [r3, #8]
 8111ce6:	461c      	mov	r4, r3
 8111ce8:	68bb      	ldr	r3, [r7, #8]
 8111cea:	68db      	ldr	r3, [r3, #12]
 8111cec:	899b      	ldrh	r3, [r3, #12]
 8111cee:	b29b      	uxth	r3, r3
 8111cf0:	4618      	mov	r0, r3
 8111cf2:	f7f8 f925 	bl	8109f40 <lwip_htons>
 8111cf6:	4603      	mov	r3, r0
 8111cf8:	b2db      	uxtb	r3, r3
 8111cfa:	f003 0303 	and.w	r3, r3, #3
 8111cfe:	2b00      	cmp	r3, #0
 8111d00:	d001      	beq.n	8111d06 <tcp_receive+0xac6>
 8111d02:	2301      	movs	r3, #1
 8111d04:	e000      	b.n	8111d08 <tcp_receive+0xac8>
 8111d06:	2300      	movs	r3, #0
 8111d08:	1919      	adds	r1, r3, r4
 8111d0a:	687b      	ldr	r3, [r7, #4]
 8111d0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8111d0e:	b28b      	uxth	r3, r1
 8111d10:	1ad3      	subs	r3, r2, r3
 8111d12:	b29a      	uxth	r2, r3
 8111d14:	687b      	ldr	r3, [r7, #4]
 8111d16:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8111d18:	6878      	ldr	r0, [r7, #4]
 8111d1a:	f7fc fda9 	bl	810e870 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8111d1e:	68bb      	ldr	r3, [r7, #8]
 8111d20:	685b      	ldr	r3, [r3, #4]
 8111d22:	891b      	ldrh	r3, [r3, #8]
 8111d24:	2b00      	cmp	r3, #0
 8111d26:	d028      	beq.n	8111d7a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8111d28:	4b0d      	ldr	r3, [pc, #52]	@ (8111d60 <tcp_receive+0xb20>)
 8111d2a:	681b      	ldr	r3, [r3, #0]
 8111d2c:	2b00      	cmp	r3, #0
 8111d2e:	d01d      	beq.n	8111d6c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8111d30:	4b0b      	ldr	r3, [pc, #44]	@ (8111d60 <tcp_receive+0xb20>)
 8111d32:	681a      	ldr	r2, [r3, #0]
 8111d34:	68bb      	ldr	r3, [r7, #8]
 8111d36:	685b      	ldr	r3, [r3, #4]
 8111d38:	4619      	mov	r1, r3
 8111d3a:	4610      	mov	r0, r2
 8111d3c:	f7fc f8c6 	bl	810decc <pbuf_cat>
 8111d40:	e018      	b.n	8111d74 <tcp_receive+0xb34>
 8111d42:	bf00      	nop
 8111d44:	1001773a 	.word	0x1001773a
 8111d48:	10017730 	.word	0x10017730
 8111d4c:	10017710 	.word	0x10017710
 8111d50:	0811dd74 	.word	0x0811dd74
 8111d54:	0811e180 	.word	0x0811e180
 8111d58:	0811ddec 	.word	0x0811ddec
 8111d5c:	0811e1bc 	.word	0x0811e1bc
 8111d60:	10017740 	.word	0x10017740
 8111d64:	1001773d 	.word	0x1001773d
 8111d68:	0811e1dc 	.word	0x0811e1dc
            } else {
              recv_data = cseg->p;
 8111d6c:	68bb      	ldr	r3, [r7, #8]
 8111d6e:	685b      	ldr	r3, [r3, #4]
 8111d70:	4a70      	ldr	r2, [pc, #448]	@ (8111f34 <tcp_receive+0xcf4>)
 8111d72:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8111d74:	68bb      	ldr	r3, [r7, #8]
 8111d76:	2200      	movs	r2, #0
 8111d78:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8111d7a:	68bb      	ldr	r3, [r7, #8]
 8111d7c:	68db      	ldr	r3, [r3, #12]
 8111d7e:	899b      	ldrh	r3, [r3, #12]
 8111d80:	b29b      	uxth	r3, r3
 8111d82:	4618      	mov	r0, r3
 8111d84:	f7f8 f8dc 	bl	8109f40 <lwip_htons>
 8111d88:	4603      	mov	r3, r0
 8111d8a:	b2db      	uxtb	r3, r3
 8111d8c:	f003 0301 	and.w	r3, r3, #1
 8111d90:	2b00      	cmp	r3, #0
 8111d92:	d00d      	beq.n	8111db0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8111d94:	4b68      	ldr	r3, [pc, #416]	@ (8111f38 <tcp_receive+0xcf8>)
 8111d96:	781b      	ldrb	r3, [r3, #0]
 8111d98:	f043 0320 	orr.w	r3, r3, #32
 8111d9c:	b2da      	uxtb	r2, r3
 8111d9e:	4b66      	ldr	r3, [pc, #408]	@ (8111f38 <tcp_receive+0xcf8>)
 8111da0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8111da2:	687b      	ldr	r3, [r7, #4]
 8111da4:	7d1b      	ldrb	r3, [r3, #20]
 8111da6:	2b04      	cmp	r3, #4
 8111da8:	d102      	bne.n	8111db0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8111daa:	687b      	ldr	r3, [r7, #4]
 8111dac:	2207      	movs	r2, #7
 8111dae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8111db0:	68bb      	ldr	r3, [r7, #8]
 8111db2:	681a      	ldr	r2, [r3, #0]
 8111db4:	687b      	ldr	r3, [r7, #4]
 8111db6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8111db8:	68b8      	ldr	r0, [r7, #8]
 8111dba:	f7fd fb98 	bl	810f4ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8111dbe:	687b      	ldr	r3, [r7, #4]
 8111dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111dc2:	2b00      	cmp	r3, #0
 8111dc4:	d008      	beq.n	8111dd8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8111dc6:	687b      	ldr	r3, [r7, #4]
 8111dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111dca:	68db      	ldr	r3, [r3, #12]
 8111dcc:	685a      	ldr	r2, [r3, #4]
 8111dce:	687b      	ldr	r3, [r7, #4]
 8111dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8111dd2:	429a      	cmp	r2, r3
 8111dd4:	f43f af43 	beq.w	8111c5e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8111dd8:	687b      	ldr	r3, [r7, #4]
 8111dda:	8b5b      	ldrh	r3, [r3, #26]
 8111ddc:	f003 0301 	and.w	r3, r3, #1
 8111de0:	2b00      	cmp	r3, #0
 8111de2:	d00e      	beq.n	8111e02 <tcp_receive+0xbc2>
 8111de4:	687b      	ldr	r3, [r7, #4]
 8111de6:	8b5b      	ldrh	r3, [r3, #26]
 8111de8:	f023 0301 	bic.w	r3, r3, #1
 8111dec:	b29a      	uxth	r2, r3
 8111dee:	687b      	ldr	r3, [r7, #4]
 8111df0:	835a      	strh	r2, [r3, #26]
 8111df2:	687b      	ldr	r3, [r7, #4]
 8111df4:	8b5b      	ldrh	r3, [r3, #26]
 8111df6:	f043 0302 	orr.w	r3, r3, #2
 8111dfa:	b29a      	uxth	r2, r3
 8111dfc:	687b      	ldr	r3, [r7, #4]
 8111dfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8111e00:	e187      	b.n	8112112 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8111e02:	687b      	ldr	r3, [r7, #4]
 8111e04:	8b5b      	ldrh	r3, [r3, #26]
 8111e06:	f043 0301 	orr.w	r3, r3, #1
 8111e0a:	b29a      	uxth	r2, r3
 8111e0c:	687b      	ldr	r3, [r7, #4]
 8111e0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8111e10:	e17f      	b.n	8112112 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8111e12:	687b      	ldr	r3, [r7, #4]
 8111e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111e16:	2b00      	cmp	r3, #0
 8111e18:	d106      	bne.n	8111e28 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8111e1a:	4848      	ldr	r0, [pc, #288]	@ (8111f3c <tcp_receive+0xcfc>)
 8111e1c:	f7fd fb80 	bl	810f520 <tcp_seg_copy>
 8111e20:	4602      	mov	r2, r0
 8111e22:	687b      	ldr	r3, [r7, #4]
 8111e24:	675a      	str	r2, [r3, #116]	@ 0x74
 8111e26:	e16c      	b.n	8112102 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8111e28:	2300      	movs	r3, #0
 8111e2a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8111e2c:	687b      	ldr	r3, [r7, #4]
 8111e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8111e32:	e156      	b.n	81120e2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8111e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111e36:	68db      	ldr	r3, [r3, #12]
 8111e38:	685a      	ldr	r2, [r3, #4]
 8111e3a:	4b41      	ldr	r3, [pc, #260]	@ (8111f40 <tcp_receive+0xd00>)
 8111e3c:	681b      	ldr	r3, [r3, #0]
 8111e3e:	429a      	cmp	r2, r3
 8111e40:	d11d      	bne.n	8111e7e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8111e42:	4b3e      	ldr	r3, [pc, #248]	@ (8111f3c <tcp_receive+0xcfc>)
 8111e44:	891a      	ldrh	r2, [r3, #8]
 8111e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111e48:	891b      	ldrh	r3, [r3, #8]
 8111e4a:	429a      	cmp	r2, r3
 8111e4c:	f240 814e 	bls.w	81120ec <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8111e50:	483a      	ldr	r0, [pc, #232]	@ (8111f3c <tcp_receive+0xcfc>)
 8111e52:	f7fd fb65 	bl	810f520 <tcp_seg_copy>
 8111e56:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8111e58:	697b      	ldr	r3, [r7, #20]
 8111e5a:	2b00      	cmp	r3, #0
 8111e5c:	f000 8148 	beq.w	81120f0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8111e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111e62:	2b00      	cmp	r3, #0
 8111e64:	d003      	beq.n	8111e6e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8111e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111e68:	697a      	ldr	r2, [r7, #20]
 8111e6a:	601a      	str	r2, [r3, #0]
 8111e6c:	e002      	b.n	8111e74 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8111e6e:	687b      	ldr	r3, [r7, #4]
 8111e70:	697a      	ldr	r2, [r7, #20]
 8111e72:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8111e74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8111e76:	6978      	ldr	r0, [r7, #20]
 8111e78:	f7ff f8de 	bl	8111038 <tcp_oos_insert_segment>
                }
                break;
 8111e7c:	e138      	b.n	81120f0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8111e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111e80:	2b00      	cmp	r3, #0
 8111e82:	d117      	bne.n	8111eb4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8111e84:	4b2e      	ldr	r3, [pc, #184]	@ (8111f40 <tcp_receive+0xd00>)
 8111e86:	681a      	ldr	r2, [r3, #0]
 8111e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111e8a:	68db      	ldr	r3, [r3, #12]
 8111e8c:	685b      	ldr	r3, [r3, #4]
 8111e8e:	1ad3      	subs	r3, r2, r3
 8111e90:	2b00      	cmp	r3, #0
 8111e92:	da57      	bge.n	8111f44 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8111e94:	4829      	ldr	r0, [pc, #164]	@ (8111f3c <tcp_receive+0xcfc>)
 8111e96:	f7fd fb43 	bl	810f520 <tcp_seg_copy>
 8111e9a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8111e9c:	69bb      	ldr	r3, [r7, #24]
 8111e9e:	2b00      	cmp	r3, #0
 8111ea0:	f000 8128 	beq.w	81120f4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8111ea4:	687b      	ldr	r3, [r7, #4]
 8111ea6:	69ba      	ldr	r2, [r7, #24]
 8111ea8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8111eaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8111eac:	69b8      	ldr	r0, [r7, #24]
 8111eae:	f7ff f8c3 	bl	8111038 <tcp_oos_insert_segment>
                  }
                  break;
 8111eb2:	e11f      	b.n	81120f4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8111eb4:	4b22      	ldr	r3, [pc, #136]	@ (8111f40 <tcp_receive+0xd00>)
 8111eb6:	681a      	ldr	r2, [r3, #0]
 8111eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111eba:	68db      	ldr	r3, [r3, #12]
 8111ebc:	685b      	ldr	r3, [r3, #4]
 8111ebe:	1ad3      	subs	r3, r2, r3
 8111ec0:	3b01      	subs	r3, #1
 8111ec2:	2b00      	cmp	r3, #0
 8111ec4:	db3e      	blt.n	8111f44 <tcp_receive+0xd04>
 8111ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8111f40 <tcp_receive+0xd00>)
 8111ec8:	681a      	ldr	r2, [r3, #0]
 8111eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111ecc:	68db      	ldr	r3, [r3, #12]
 8111ece:	685b      	ldr	r3, [r3, #4]
 8111ed0:	1ad3      	subs	r3, r2, r3
 8111ed2:	3301      	adds	r3, #1
 8111ed4:	2b00      	cmp	r3, #0
 8111ed6:	dc35      	bgt.n	8111f44 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8111ed8:	4818      	ldr	r0, [pc, #96]	@ (8111f3c <tcp_receive+0xcfc>)
 8111eda:	f7fd fb21 	bl	810f520 <tcp_seg_copy>
 8111ede:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8111ee0:	69fb      	ldr	r3, [r7, #28]
 8111ee2:	2b00      	cmp	r3, #0
 8111ee4:	f000 8108 	beq.w	81120f8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8111ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111eea:	68db      	ldr	r3, [r3, #12]
 8111eec:	685b      	ldr	r3, [r3, #4]
 8111eee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8111ef0:	8912      	ldrh	r2, [r2, #8]
 8111ef2:	441a      	add	r2, r3
 8111ef4:	4b12      	ldr	r3, [pc, #72]	@ (8111f40 <tcp_receive+0xd00>)
 8111ef6:	681b      	ldr	r3, [r3, #0]
 8111ef8:	1ad3      	subs	r3, r2, r3
 8111efa:	2b00      	cmp	r3, #0
 8111efc:	dd12      	ble.n	8111f24 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8111efe:	4b10      	ldr	r3, [pc, #64]	@ (8111f40 <tcp_receive+0xd00>)
 8111f00:	681b      	ldr	r3, [r3, #0]
 8111f02:	b29a      	uxth	r2, r3
 8111f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111f06:	68db      	ldr	r3, [r3, #12]
 8111f08:	685b      	ldr	r3, [r3, #4]
 8111f0a:	b29b      	uxth	r3, r3
 8111f0c:	1ad3      	subs	r3, r2, r3
 8111f0e:	b29a      	uxth	r2, r3
 8111f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111f12:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8111f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111f16:	685a      	ldr	r2, [r3, #4]
 8111f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111f1a:	891b      	ldrh	r3, [r3, #8]
 8111f1c:	4619      	mov	r1, r3
 8111f1e:	4610      	mov	r0, r2
 8111f20:	f7fb fd8c 	bl	810da3c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8111f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111f26:	69fa      	ldr	r2, [r7, #28]
 8111f28:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8111f2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8111f2c:	69f8      	ldr	r0, [r7, #28]
 8111f2e:	f7ff f883 	bl	8111038 <tcp_oos_insert_segment>
                  }
                  break;
 8111f32:	e0e1      	b.n	81120f8 <tcp_receive+0xeb8>
 8111f34:	10017740 	.word	0x10017740
 8111f38:	1001773d 	.word	0x1001773d
 8111f3c:	10017710 	.word	0x10017710
 8111f40:	10017730 	.word	0x10017730
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8111f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111f46:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8111f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111f4a:	681b      	ldr	r3, [r3, #0]
 8111f4c:	2b00      	cmp	r3, #0
 8111f4e:	f040 80c5 	bne.w	81120dc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8111f52:	4b7f      	ldr	r3, [pc, #508]	@ (8112150 <tcp_receive+0xf10>)
 8111f54:	681a      	ldr	r2, [r3, #0]
 8111f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111f58:	68db      	ldr	r3, [r3, #12]
 8111f5a:	685b      	ldr	r3, [r3, #4]
 8111f5c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8111f5e:	2b00      	cmp	r3, #0
 8111f60:	f340 80bc 	ble.w	81120dc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8111f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111f66:	68db      	ldr	r3, [r3, #12]
 8111f68:	899b      	ldrh	r3, [r3, #12]
 8111f6a:	b29b      	uxth	r3, r3
 8111f6c:	4618      	mov	r0, r3
 8111f6e:	f7f7 ffe7 	bl	8109f40 <lwip_htons>
 8111f72:	4603      	mov	r3, r0
 8111f74:	b2db      	uxtb	r3, r3
 8111f76:	f003 0301 	and.w	r3, r3, #1
 8111f7a:	2b00      	cmp	r3, #0
 8111f7c:	f040 80be 	bne.w	81120fc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8111f80:	4874      	ldr	r0, [pc, #464]	@ (8112154 <tcp_receive+0xf14>)
 8111f82:	f7fd facd 	bl	810f520 <tcp_seg_copy>
 8111f86:	4602      	mov	r2, r0
 8111f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111f8a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8111f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111f8e:	681b      	ldr	r3, [r3, #0]
 8111f90:	2b00      	cmp	r3, #0
 8111f92:	f000 80b5 	beq.w	8112100 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8111f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111f98:	68db      	ldr	r3, [r3, #12]
 8111f9a:	685b      	ldr	r3, [r3, #4]
 8111f9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8111f9e:	8912      	ldrh	r2, [r2, #8]
 8111fa0:	441a      	add	r2, r3
 8111fa2:	4b6b      	ldr	r3, [pc, #428]	@ (8112150 <tcp_receive+0xf10>)
 8111fa4:	681b      	ldr	r3, [r3, #0]
 8111fa6:	1ad3      	subs	r3, r2, r3
 8111fa8:	2b00      	cmp	r3, #0
 8111faa:	dd12      	ble.n	8111fd2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8111fac:	4b68      	ldr	r3, [pc, #416]	@ (8112150 <tcp_receive+0xf10>)
 8111fae:	681b      	ldr	r3, [r3, #0]
 8111fb0:	b29a      	uxth	r2, r3
 8111fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111fb4:	68db      	ldr	r3, [r3, #12]
 8111fb6:	685b      	ldr	r3, [r3, #4]
 8111fb8:	b29b      	uxth	r3, r3
 8111fba:	1ad3      	subs	r3, r2, r3
 8111fbc:	b29a      	uxth	r2, r3
 8111fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111fc0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8111fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111fc4:	685a      	ldr	r2, [r3, #4]
 8111fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111fc8:	891b      	ldrh	r3, [r3, #8]
 8111fca:	4619      	mov	r1, r3
 8111fcc:	4610      	mov	r0, r2
 8111fce:	f7fb fd35 	bl	810da3c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8111fd2:	4b61      	ldr	r3, [pc, #388]	@ (8112158 <tcp_receive+0xf18>)
 8111fd4:	881b      	ldrh	r3, [r3, #0]
 8111fd6:	461a      	mov	r2, r3
 8111fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8112150 <tcp_receive+0xf10>)
 8111fda:	681b      	ldr	r3, [r3, #0]
 8111fdc:	441a      	add	r2, r3
 8111fde:	687b      	ldr	r3, [r7, #4]
 8111fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111fe2:	6879      	ldr	r1, [r7, #4]
 8111fe4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8111fe6:	440b      	add	r3, r1
 8111fe8:	1ad3      	subs	r3, r2, r3
 8111fea:	2b00      	cmp	r3, #0
 8111fec:	f340 8088 	ble.w	8112100 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8111ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111ff2:	681b      	ldr	r3, [r3, #0]
 8111ff4:	68db      	ldr	r3, [r3, #12]
 8111ff6:	899b      	ldrh	r3, [r3, #12]
 8111ff8:	b29b      	uxth	r3, r3
 8111ffa:	4618      	mov	r0, r3
 8111ffc:	f7f7 ffa0 	bl	8109f40 <lwip_htons>
 8112000:	4603      	mov	r3, r0
 8112002:	b2db      	uxtb	r3, r3
 8112004:	f003 0301 	and.w	r3, r3, #1
 8112008:	2b00      	cmp	r3, #0
 811200a:	d021      	beq.n	8112050 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 811200c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811200e:	681b      	ldr	r3, [r3, #0]
 8112010:	68db      	ldr	r3, [r3, #12]
 8112012:	899b      	ldrh	r3, [r3, #12]
 8112014:	b29b      	uxth	r3, r3
 8112016:	b21b      	sxth	r3, r3
 8112018:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811201c:	b21c      	sxth	r4, r3
 811201e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112020:	681b      	ldr	r3, [r3, #0]
 8112022:	68db      	ldr	r3, [r3, #12]
 8112024:	899b      	ldrh	r3, [r3, #12]
 8112026:	b29b      	uxth	r3, r3
 8112028:	4618      	mov	r0, r3
 811202a:	f7f7 ff89 	bl	8109f40 <lwip_htons>
 811202e:	4603      	mov	r3, r0
 8112030:	b2db      	uxtb	r3, r3
 8112032:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8112036:	b29b      	uxth	r3, r3
 8112038:	4618      	mov	r0, r3
 811203a:	f7f7 ff81 	bl	8109f40 <lwip_htons>
 811203e:	4603      	mov	r3, r0
 8112040:	b21b      	sxth	r3, r3
 8112042:	4323      	orrs	r3, r4
 8112044:	b21a      	sxth	r2, r3
 8112046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112048:	681b      	ldr	r3, [r3, #0]
 811204a:	68db      	ldr	r3, [r3, #12]
 811204c:	b292      	uxth	r2, r2
 811204e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8112050:	687b      	ldr	r3, [r7, #4]
 8112052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112054:	b29a      	uxth	r2, r3
 8112056:	687b      	ldr	r3, [r7, #4]
 8112058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811205a:	4413      	add	r3, r2
 811205c:	b299      	uxth	r1, r3
 811205e:	4b3c      	ldr	r3, [pc, #240]	@ (8112150 <tcp_receive+0xf10>)
 8112060:	681b      	ldr	r3, [r3, #0]
 8112062:	b29a      	uxth	r2, r3
 8112064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112066:	681b      	ldr	r3, [r3, #0]
 8112068:	1a8a      	subs	r2, r1, r2
 811206a:	b292      	uxth	r2, r2
 811206c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 811206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112070:	681b      	ldr	r3, [r3, #0]
 8112072:	685a      	ldr	r2, [r3, #4]
 8112074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112076:	681b      	ldr	r3, [r3, #0]
 8112078:	891b      	ldrh	r3, [r3, #8]
 811207a:	4619      	mov	r1, r3
 811207c:	4610      	mov	r0, r2
 811207e:	f7fb fcdd 	bl	810da3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8112082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112084:	681b      	ldr	r3, [r3, #0]
 8112086:	891c      	ldrh	r4, [r3, #8]
 8112088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811208a:	681b      	ldr	r3, [r3, #0]
 811208c:	68db      	ldr	r3, [r3, #12]
 811208e:	899b      	ldrh	r3, [r3, #12]
 8112090:	b29b      	uxth	r3, r3
 8112092:	4618      	mov	r0, r3
 8112094:	f7f7 ff54 	bl	8109f40 <lwip_htons>
 8112098:	4603      	mov	r3, r0
 811209a:	b2db      	uxtb	r3, r3
 811209c:	f003 0303 	and.w	r3, r3, #3
 81120a0:	2b00      	cmp	r3, #0
 81120a2:	d001      	beq.n	81120a8 <tcp_receive+0xe68>
 81120a4:	2301      	movs	r3, #1
 81120a6:	e000      	b.n	81120aa <tcp_receive+0xe6a>
 81120a8:	2300      	movs	r3, #0
 81120aa:	4423      	add	r3, r4
 81120ac:	b29a      	uxth	r2, r3
 81120ae:	4b2a      	ldr	r3, [pc, #168]	@ (8112158 <tcp_receive+0xf18>)
 81120b0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 81120b2:	4b29      	ldr	r3, [pc, #164]	@ (8112158 <tcp_receive+0xf18>)
 81120b4:	881b      	ldrh	r3, [r3, #0]
 81120b6:	461a      	mov	r2, r3
 81120b8:	4b25      	ldr	r3, [pc, #148]	@ (8112150 <tcp_receive+0xf10>)
 81120ba:	681b      	ldr	r3, [r3, #0]
 81120bc:	441a      	add	r2, r3
 81120be:	687b      	ldr	r3, [r7, #4]
 81120c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81120c2:	6879      	ldr	r1, [r7, #4]
 81120c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81120c6:	440b      	add	r3, r1
 81120c8:	429a      	cmp	r2, r3
 81120ca:	d019      	beq.n	8112100 <tcp_receive+0xec0>
 81120cc:	4b23      	ldr	r3, [pc, #140]	@ (811215c <tcp_receive+0xf1c>)
 81120ce:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 81120d2:	4923      	ldr	r1, [pc, #140]	@ (8112160 <tcp_receive+0xf20>)
 81120d4:	4823      	ldr	r0, [pc, #140]	@ (8112164 <tcp_receive+0xf24>)
 81120d6:	f005 f9af 	bl	8117438 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 81120da:	e011      	b.n	8112100 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 81120dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81120de:	681b      	ldr	r3, [r3, #0]
 81120e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81120e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81120e4:	2b00      	cmp	r3, #0
 81120e6:	f47f aea5 	bne.w	8111e34 <tcp_receive+0xbf4>
 81120ea:	e00a      	b.n	8112102 <tcp_receive+0xec2>
                break;
 81120ec:	bf00      	nop
 81120ee:	e008      	b.n	8112102 <tcp_receive+0xec2>
                break;
 81120f0:	bf00      	nop
 81120f2:	e006      	b.n	8112102 <tcp_receive+0xec2>
                  break;
 81120f4:	bf00      	nop
 81120f6:	e004      	b.n	8112102 <tcp_receive+0xec2>
                  break;
 81120f8:	bf00      	nop
 81120fa:	e002      	b.n	8112102 <tcp_receive+0xec2>
                  break;
 81120fc:	bf00      	nop
 81120fe:	e000      	b.n	8112102 <tcp_receive+0xec2>
                break;
 8112100:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8112102:	6878      	ldr	r0, [r7, #4]
 8112104:	f001 fe88 	bl	8113e18 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8112108:	e003      	b.n	8112112 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 811210a:	6878      	ldr	r0, [r7, #4]
 811210c:	f001 fe84 	bl	8113e18 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8112110:	e01a      	b.n	8112148 <tcp_receive+0xf08>
 8112112:	e019      	b.n	8112148 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8112114:	4b0e      	ldr	r3, [pc, #56]	@ (8112150 <tcp_receive+0xf10>)
 8112116:	681a      	ldr	r2, [r3, #0]
 8112118:	687b      	ldr	r3, [r7, #4]
 811211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811211c:	1ad3      	subs	r3, r2, r3
 811211e:	2b00      	cmp	r3, #0
 8112120:	db0a      	blt.n	8112138 <tcp_receive+0xef8>
 8112122:	4b0b      	ldr	r3, [pc, #44]	@ (8112150 <tcp_receive+0xf10>)
 8112124:	681a      	ldr	r2, [r3, #0]
 8112126:	687b      	ldr	r3, [r7, #4]
 8112128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811212a:	6879      	ldr	r1, [r7, #4]
 811212c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811212e:	440b      	add	r3, r1
 8112130:	1ad3      	subs	r3, r2, r3
 8112132:	3301      	adds	r3, #1
 8112134:	2b00      	cmp	r3, #0
 8112136:	dd07      	ble.n	8112148 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8112138:	687b      	ldr	r3, [r7, #4]
 811213a:	8b5b      	ldrh	r3, [r3, #26]
 811213c:	f043 0302 	orr.w	r3, r3, #2
 8112140:	b29a      	uxth	r2, r3
 8112142:	687b      	ldr	r3, [r7, #4]
 8112144:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8112146:	e7ff      	b.n	8112148 <tcp_receive+0xf08>
 8112148:	bf00      	nop
 811214a:	3750      	adds	r7, #80	@ 0x50
 811214c:	46bd      	mov	sp, r7
 811214e:	bdb0      	pop	{r4, r5, r7, pc}
 8112150:	10017730 	.word	0x10017730
 8112154:	10017710 	.word	0x10017710
 8112158:	1001773a 	.word	0x1001773a
 811215c:	0811dd74 	.word	0x0811dd74
 8112160:	0811e148 	.word	0x0811e148
 8112164:	0811ddec 	.word	0x0811ddec

08112168 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8112168:	b480      	push	{r7}
 811216a:	b083      	sub	sp, #12
 811216c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 811216e:	4b15      	ldr	r3, [pc, #84]	@ (81121c4 <tcp_get_next_optbyte+0x5c>)
 8112170:	881b      	ldrh	r3, [r3, #0]
 8112172:	1c5a      	adds	r2, r3, #1
 8112174:	b291      	uxth	r1, r2
 8112176:	4a13      	ldr	r2, [pc, #76]	@ (81121c4 <tcp_get_next_optbyte+0x5c>)
 8112178:	8011      	strh	r1, [r2, #0]
 811217a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 811217c:	4b12      	ldr	r3, [pc, #72]	@ (81121c8 <tcp_get_next_optbyte+0x60>)
 811217e:	681b      	ldr	r3, [r3, #0]
 8112180:	2b00      	cmp	r3, #0
 8112182:	d004      	beq.n	811218e <tcp_get_next_optbyte+0x26>
 8112184:	4b11      	ldr	r3, [pc, #68]	@ (81121cc <tcp_get_next_optbyte+0x64>)
 8112186:	881b      	ldrh	r3, [r3, #0]
 8112188:	88fa      	ldrh	r2, [r7, #6]
 811218a:	429a      	cmp	r2, r3
 811218c:	d208      	bcs.n	81121a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 811218e:	4b10      	ldr	r3, [pc, #64]	@ (81121d0 <tcp_get_next_optbyte+0x68>)
 8112190:	681b      	ldr	r3, [r3, #0]
 8112192:	3314      	adds	r3, #20
 8112194:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8112196:	88fb      	ldrh	r3, [r7, #6]
 8112198:	683a      	ldr	r2, [r7, #0]
 811219a:	4413      	add	r3, r2
 811219c:	781b      	ldrb	r3, [r3, #0]
 811219e:	e00b      	b.n	81121b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 81121a0:	88fb      	ldrh	r3, [r7, #6]
 81121a2:	b2da      	uxtb	r2, r3
 81121a4:	4b09      	ldr	r3, [pc, #36]	@ (81121cc <tcp_get_next_optbyte+0x64>)
 81121a6:	881b      	ldrh	r3, [r3, #0]
 81121a8:	b2db      	uxtb	r3, r3
 81121aa:	1ad3      	subs	r3, r2, r3
 81121ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 81121ae:	4b06      	ldr	r3, [pc, #24]	@ (81121c8 <tcp_get_next_optbyte+0x60>)
 81121b0:	681a      	ldr	r2, [r3, #0]
 81121b2:	797b      	ldrb	r3, [r7, #5]
 81121b4:	4413      	add	r3, r2
 81121b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 81121b8:	4618      	mov	r0, r3
 81121ba:	370c      	adds	r7, #12
 81121bc:	46bd      	mov	sp, r7
 81121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81121c2:	4770      	bx	lr
 81121c4:	1001772c 	.word	0x1001772c
 81121c8:	10017728 	.word	0x10017728
 81121cc:	10017726 	.word	0x10017726
 81121d0:	10017720 	.word	0x10017720

081121d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 81121d4:	b580      	push	{r7, lr}
 81121d6:	b084      	sub	sp, #16
 81121d8:	af00      	add	r7, sp, #0
 81121da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 81121dc:	687b      	ldr	r3, [r7, #4]
 81121de:	2b00      	cmp	r3, #0
 81121e0:	d106      	bne.n	81121f0 <tcp_parseopt+0x1c>
 81121e2:	4b32      	ldr	r3, [pc, #200]	@ (81122ac <tcp_parseopt+0xd8>)
 81121e4:	f240 727d 	movw	r2, #1917	@ 0x77d
 81121e8:	4931      	ldr	r1, [pc, #196]	@ (81122b0 <tcp_parseopt+0xdc>)
 81121ea:	4832      	ldr	r0, [pc, #200]	@ (81122b4 <tcp_parseopt+0xe0>)
 81121ec:	f005 f924 	bl	8117438 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 81121f0:	4b31      	ldr	r3, [pc, #196]	@ (81122b8 <tcp_parseopt+0xe4>)
 81121f2:	881b      	ldrh	r3, [r3, #0]
 81121f4:	2b00      	cmp	r3, #0
 81121f6:	d056      	beq.n	81122a6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 81121f8:	4b30      	ldr	r3, [pc, #192]	@ (81122bc <tcp_parseopt+0xe8>)
 81121fa:	2200      	movs	r2, #0
 81121fc:	801a      	strh	r2, [r3, #0]
 81121fe:	e046      	b.n	811228e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8112200:	f7ff ffb2 	bl	8112168 <tcp_get_next_optbyte>
 8112204:	4603      	mov	r3, r0
 8112206:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8112208:	7bfb      	ldrb	r3, [r7, #15]
 811220a:	2b02      	cmp	r3, #2
 811220c:	d006      	beq.n	811221c <tcp_parseopt+0x48>
 811220e:	2b02      	cmp	r3, #2
 8112210:	dc2a      	bgt.n	8112268 <tcp_parseopt+0x94>
 8112212:	2b00      	cmp	r3, #0
 8112214:	d042      	beq.n	811229c <tcp_parseopt+0xc8>
 8112216:	2b01      	cmp	r3, #1
 8112218:	d038      	beq.n	811228c <tcp_parseopt+0xb8>
 811221a:	e025      	b.n	8112268 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 811221c:	f7ff ffa4 	bl	8112168 <tcp_get_next_optbyte>
 8112220:	4603      	mov	r3, r0
 8112222:	2b04      	cmp	r3, #4
 8112224:	d13c      	bne.n	81122a0 <tcp_parseopt+0xcc>
 8112226:	4b25      	ldr	r3, [pc, #148]	@ (81122bc <tcp_parseopt+0xe8>)
 8112228:	881b      	ldrh	r3, [r3, #0]
 811222a:	3301      	adds	r3, #1
 811222c:	4a22      	ldr	r2, [pc, #136]	@ (81122b8 <tcp_parseopt+0xe4>)
 811222e:	8812      	ldrh	r2, [r2, #0]
 8112230:	4293      	cmp	r3, r2
 8112232:	da35      	bge.n	81122a0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8112234:	f7ff ff98 	bl	8112168 <tcp_get_next_optbyte>
 8112238:	4603      	mov	r3, r0
 811223a:	021b      	lsls	r3, r3, #8
 811223c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 811223e:	f7ff ff93 	bl	8112168 <tcp_get_next_optbyte>
 8112242:	4603      	mov	r3, r0
 8112244:	461a      	mov	r2, r3
 8112246:	89bb      	ldrh	r3, [r7, #12]
 8112248:	4313      	orrs	r3, r2
 811224a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 811224c:	89bb      	ldrh	r3, [r7, #12]
 811224e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8112252:	d804      	bhi.n	811225e <tcp_parseopt+0x8a>
 8112254:	89bb      	ldrh	r3, [r7, #12]
 8112256:	2b00      	cmp	r3, #0
 8112258:	d001      	beq.n	811225e <tcp_parseopt+0x8a>
 811225a:	89ba      	ldrh	r2, [r7, #12]
 811225c:	e001      	b.n	8112262 <tcp_parseopt+0x8e>
 811225e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8112262:	687b      	ldr	r3, [r7, #4]
 8112264:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8112266:	e012      	b.n	811228e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8112268:	f7ff ff7e 	bl	8112168 <tcp_get_next_optbyte>
 811226c:	4603      	mov	r3, r0
 811226e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8112270:	7afb      	ldrb	r3, [r7, #11]
 8112272:	2b01      	cmp	r3, #1
 8112274:	d916      	bls.n	81122a4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8112276:	7afb      	ldrb	r3, [r7, #11]
 8112278:	b29a      	uxth	r2, r3
 811227a:	4b10      	ldr	r3, [pc, #64]	@ (81122bc <tcp_parseopt+0xe8>)
 811227c:	881b      	ldrh	r3, [r3, #0]
 811227e:	4413      	add	r3, r2
 8112280:	b29b      	uxth	r3, r3
 8112282:	3b02      	subs	r3, #2
 8112284:	b29a      	uxth	r2, r3
 8112286:	4b0d      	ldr	r3, [pc, #52]	@ (81122bc <tcp_parseopt+0xe8>)
 8112288:	801a      	strh	r2, [r3, #0]
 811228a:	e000      	b.n	811228e <tcp_parseopt+0xba>
          break;
 811228c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811228e:	4b0b      	ldr	r3, [pc, #44]	@ (81122bc <tcp_parseopt+0xe8>)
 8112290:	881a      	ldrh	r2, [r3, #0]
 8112292:	4b09      	ldr	r3, [pc, #36]	@ (81122b8 <tcp_parseopt+0xe4>)
 8112294:	881b      	ldrh	r3, [r3, #0]
 8112296:	429a      	cmp	r2, r3
 8112298:	d3b2      	bcc.n	8112200 <tcp_parseopt+0x2c>
 811229a:	e004      	b.n	81122a6 <tcp_parseopt+0xd2>
          return;
 811229c:	bf00      	nop
 811229e:	e002      	b.n	81122a6 <tcp_parseopt+0xd2>
            return;
 81122a0:	bf00      	nop
 81122a2:	e000      	b.n	81122a6 <tcp_parseopt+0xd2>
            return;
 81122a4:	bf00      	nop
      }
    }
  }
}
 81122a6:	3710      	adds	r7, #16
 81122a8:	46bd      	mov	sp, r7
 81122aa:	bd80      	pop	{r7, pc}
 81122ac:	0811dd74 	.word	0x0811dd74
 81122b0:	0811e204 	.word	0x0811e204
 81122b4:	0811ddec 	.word	0x0811ddec
 81122b8:	10017724 	.word	0x10017724
 81122bc:	1001772c 	.word	0x1001772c

081122c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 81122c0:	b480      	push	{r7}
 81122c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 81122c4:	4b05      	ldr	r3, [pc, #20]	@ (81122dc <tcp_trigger_input_pcb_close+0x1c>)
 81122c6:	781b      	ldrb	r3, [r3, #0]
 81122c8:	f043 0310 	orr.w	r3, r3, #16
 81122cc:	b2da      	uxtb	r2, r3
 81122ce:	4b03      	ldr	r3, [pc, #12]	@ (81122dc <tcp_trigger_input_pcb_close+0x1c>)
 81122d0:	701a      	strb	r2, [r3, #0]
}
 81122d2:	bf00      	nop
 81122d4:	46bd      	mov	sp, r7
 81122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81122da:	4770      	bx	lr
 81122dc:	1001773d 	.word	0x1001773d

081122e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 81122e0:	b580      	push	{r7, lr}
 81122e2:	b084      	sub	sp, #16
 81122e4:	af00      	add	r7, sp, #0
 81122e6:	60f8      	str	r0, [r7, #12]
 81122e8:	60b9      	str	r1, [r7, #8]
 81122ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 81122ec:	68fb      	ldr	r3, [r7, #12]
 81122ee:	2b00      	cmp	r3, #0
 81122f0:	d00a      	beq.n	8112308 <tcp_route+0x28>
 81122f2:	68fb      	ldr	r3, [r7, #12]
 81122f4:	7a1b      	ldrb	r3, [r3, #8]
 81122f6:	2b00      	cmp	r3, #0
 81122f8:	d006      	beq.n	8112308 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 81122fa:	68fb      	ldr	r3, [r7, #12]
 81122fc:	7a1b      	ldrb	r3, [r3, #8]
 81122fe:	4618      	mov	r0, r3
 8112300:	f7fb f9c2 	bl	810d688 <netif_get_by_index>
 8112304:	4603      	mov	r3, r0
 8112306:	e003      	b.n	8112310 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8112308:	6878      	ldr	r0, [r7, #4]
 811230a:	f7f9 f8f1 	bl	810b4f0 <ip4_route>
 811230e:	4603      	mov	r3, r0
  }
}
 8112310:	4618      	mov	r0, r3
 8112312:	3710      	adds	r7, #16
 8112314:	46bd      	mov	sp, r7
 8112316:	bd80      	pop	{r7, pc}

08112318 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8112318:	b590      	push	{r4, r7, lr}
 811231a:	b087      	sub	sp, #28
 811231c:	af00      	add	r7, sp, #0
 811231e:	60f8      	str	r0, [r7, #12]
 8112320:	60b9      	str	r1, [r7, #8]
 8112322:	603b      	str	r3, [r7, #0]
 8112324:	4613      	mov	r3, r2
 8112326:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8112328:	68fb      	ldr	r3, [r7, #12]
 811232a:	2b00      	cmp	r3, #0
 811232c:	d105      	bne.n	811233a <tcp_create_segment+0x22>
 811232e:	4b43      	ldr	r3, [pc, #268]	@ (811243c <tcp_create_segment+0x124>)
 8112330:	22a3      	movs	r2, #163	@ 0xa3
 8112332:	4943      	ldr	r1, [pc, #268]	@ (8112440 <tcp_create_segment+0x128>)
 8112334:	4843      	ldr	r0, [pc, #268]	@ (8112444 <tcp_create_segment+0x12c>)
 8112336:	f005 f87f 	bl	8117438 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 811233a:	68bb      	ldr	r3, [r7, #8]
 811233c:	2b00      	cmp	r3, #0
 811233e:	d105      	bne.n	811234c <tcp_create_segment+0x34>
 8112340:	4b3e      	ldr	r3, [pc, #248]	@ (811243c <tcp_create_segment+0x124>)
 8112342:	22a4      	movs	r2, #164	@ 0xa4
 8112344:	4940      	ldr	r1, [pc, #256]	@ (8112448 <tcp_create_segment+0x130>)
 8112346:	483f      	ldr	r0, [pc, #252]	@ (8112444 <tcp_create_segment+0x12c>)
 8112348:	f005 f876 	bl	8117438 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811234c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8112350:	009b      	lsls	r3, r3, #2
 8112352:	b2db      	uxtb	r3, r3
 8112354:	f003 0304 	and.w	r3, r3, #4
 8112358:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 811235a:	2003      	movs	r0, #3
 811235c:	f7fa fe0e 	bl	810cf7c <memp_malloc>
 8112360:	6138      	str	r0, [r7, #16]
 8112362:	693b      	ldr	r3, [r7, #16]
 8112364:	2b00      	cmp	r3, #0
 8112366:	d104      	bne.n	8112372 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8112368:	68b8      	ldr	r0, [r7, #8]
 811236a:	f7fb fced 	bl	810dd48 <pbuf_free>
    return NULL;
 811236e:	2300      	movs	r3, #0
 8112370:	e060      	b.n	8112434 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8112372:	693b      	ldr	r3, [r7, #16]
 8112374:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8112378:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 811237a:	693b      	ldr	r3, [r7, #16]
 811237c:	2200      	movs	r2, #0
 811237e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8112380:	693b      	ldr	r3, [r7, #16]
 8112382:	68ba      	ldr	r2, [r7, #8]
 8112384:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8112386:	68bb      	ldr	r3, [r7, #8]
 8112388:	891a      	ldrh	r2, [r3, #8]
 811238a:	7dfb      	ldrb	r3, [r7, #23]
 811238c:	b29b      	uxth	r3, r3
 811238e:	429a      	cmp	r2, r3
 8112390:	d205      	bcs.n	811239e <tcp_create_segment+0x86>
 8112392:	4b2a      	ldr	r3, [pc, #168]	@ (811243c <tcp_create_segment+0x124>)
 8112394:	22b0      	movs	r2, #176	@ 0xb0
 8112396:	492d      	ldr	r1, [pc, #180]	@ (811244c <tcp_create_segment+0x134>)
 8112398:	482a      	ldr	r0, [pc, #168]	@ (8112444 <tcp_create_segment+0x12c>)
 811239a:	f005 f84d 	bl	8117438 <iprintf>
  seg->len = p->tot_len - optlen;
 811239e:	68bb      	ldr	r3, [r7, #8]
 81123a0:	891a      	ldrh	r2, [r3, #8]
 81123a2:	7dfb      	ldrb	r3, [r7, #23]
 81123a4:	b29b      	uxth	r3, r3
 81123a6:	1ad3      	subs	r3, r2, r3
 81123a8:	b29a      	uxth	r2, r3
 81123aa:	693b      	ldr	r3, [r7, #16]
 81123ac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 81123ae:	2114      	movs	r1, #20
 81123b0:	68b8      	ldr	r0, [r7, #8]
 81123b2:	f7fb fc33 	bl	810dc1c <pbuf_add_header>
 81123b6:	4603      	mov	r3, r0
 81123b8:	2b00      	cmp	r3, #0
 81123ba:	d004      	beq.n	81123c6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 81123bc:	6938      	ldr	r0, [r7, #16]
 81123be:	f7fd f896 	bl	810f4ee <tcp_seg_free>
    return NULL;
 81123c2:	2300      	movs	r3, #0
 81123c4:	e036      	b.n	8112434 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 81123c6:	693b      	ldr	r3, [r7, #16]
 81123c8:	685b      	ldr	r3, [r3, #4]
 81123ca:	685a      	ldr	r2, [r3, #4]
 81123cc:	693b      	ldr	r3, [r7, #16]
 81123ce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 81123d0:	68fb      	ldr	r3, [r7, #12]
 81123d2:	8ada      	ldrh	r2, [r3, #22]
 81123d4:	693b      	ldr	r3, [r7, #16]
 81123d6:	68dc      	ldr	r4, [r3, #12]
 81123d8:	4610      	mov	r0, r2
 81123da:	f7f7 fdb1 	bl	8109f40 <lwip_htons>
 81123de:	4603      	mov	r3, r0
 81123e0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 81123e2:	68fb      	ldr	r3, [r7, #12]
 81123e4:	8b1a      	ldrh	r2, [r3, #24]
 81123e6:	693b      	ldr	r3, [r7, #16]
 81123e8:	68dc      	ldr	r4, [r3, #12]
 81123ea:	4610      	mov	r0, r2
 81123ec:	f7f7 fda8 	bl	8109f40 <lwip_htons>
 81123f0:	4603      	mov	r3, r0
 81123f2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 81123f4:	693b      	ldr	r3, [r7, #16]
 81123f6:	68dc      	ldr	r4, [r3, #12]
 81123f8:	6838      	ldr	r0, [r7, #0]
 81123fa:	f7f7 fdb7 	bl	8109f6c <lwip_htonl>
 81123fe:	4603      	mov	r3, r0
 8112400:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8112402:	7dfb      	ldrb	r3, [r7, #23]
 8112404:	089b      	lsrs	r3, r3, #2
 8112406:	b2db      	uxtb	r3, r3
 8112408:	3305      	adds	r3, #5
 811240a:	b29b      	uxth	r3, r3
 811240c:	031b      	lsls	r3, r3, #12
 811240e:	b29a      	uxth	r2, r3
 8112410:	79fb      	ldrb	r3, [r7, #7]
 8112412:	b29b      	uxth	r3, r3
 8112414:	4313      	orrs	r3, r2
 8112416:	b29a      	uxth	r2, r3
 8112418:	693b      	ldr	r3, [r7, #16]
 811241a:	68dc      	ldr	r4, [r3, #12]
 811241c:	4610      	mov	r0, r2
 811241e:	f7f7 fd8f 	bl	8109f40 <lwip_htons>
 8112422:	4603      	mov	r3, r0
 8112424:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8112426:	693b      	ldr	r3, [r7, #16]
 8112428:	68db      	ldr	r3, [r3, #12]
 811242a:	2200      	movs	r2, #0
 811242c:	749a      	strb	r2, [r3, #18]
 811242e:	2200      	movs	r2, #0
 8112430:	74da      	strb	r2, [r3, #19]
  return seg;
 8112432:	693b      	ldr	r3, [r7, #16]
}
 8112434:	4618      	mov	r0, r3
 8112436:	371c      	adds	r7, #28
 8112438:	46bd      	mov	sp, r7
 811243a:	bd90      	pop	{r4, r7, pc}
 811243c:	0811e220 	.word	0x0811e220
 8112440:	0811e284 	.word	0x0811e284
 8112444:	0811e2a4 	.word	0x0811e2a4
 8112448:	0811e2cc 	.word	0x0811e2cc
 811244c:	0811e2f0 	.word	0x0811e2f0

08112450 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8112450:	b580      	push	{r7, lr}
 8112452:	b086      	sub	sp, #24
 8112454:	af00      	add	r7, sp, #0
 8112456:	607b      	str	r3, [r7, #4]
 8112458:	4603      	mov	r3, r0
 811245a:	73fb      	strb	r3, [r7, #15]
 811245c:	460b      	mov	r3, r1
 811245e:	81bb      	strh	r3, [r7, #12]
 8112460:	4613      	mov	r3, r2
 8112462:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8112464:	89bb      	ldrh	r3, [r7, #12]
 8112466:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8112468:	687b      	ldr	r3, [r7, #4]
 811246a:	2b00      	cmp	r3, #0
 811246c:	d105      	bne.n	811247a <tcp_pbuf_prealloc+0x2a>
 811246e:	4b30      	ldr	r3, [pc, #192]	@ (8112530 <tcp_pbuf_prealloc+0xe0>)
 8112470:	22e8      	movs	r2, #232	@ 0xe8
 8112472:	4930      	ldr	r1, [pc, #192]	@ (8112534 <tcp_pbuf_prealloc+0xe4>)
 8112474:	4830      	ldr	r0, [pc, #192]	@ (8112538 <tcp_pbuf_prealloc+0xe8>)
 8112476:	f004 ffdf 	bl	8117438 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 811247a:	6a3b      	ldr	r3, [r7, #32]
 811247c:	2b00      	cmp	r3, #0
 811247e:	d105      	bne.n	811248c <tcp_pbuf_prealloc+0x3c>
 8112480:	4b2b      	ldr	r3, [pc, #172]	@ (8112530 <tcp_pbuf_prealloc+0xe0>)
 8112482:	22e9      	movs	r2, #233	@ 0xe9
 8112484:	492d      	ldr	r1, [pc, #180]	@ (811253c <tcp_pbuf_prealloc+0xec>)
 8112486:	482c      	ldr	r0, [pc, #176]	@ (8112538 <tcp_pbuf_prealloc+0xe8>)
 8112488:	f004 ffd6 	bl	8117438 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 811248c:	89ba      	ldrh	r2, [r7, #12]
 811248e:	897b      	ldrh	r3, [r7, #10]
 8112490:	429a      	cmp	r2, r3
 8112492:	d221      	bcs.n	81124d8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8112494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8112498:	f003 0302 	and.w	r3, r3, #2
 811249c:	2b00      	cmp	r3, #0
 811249e:	d111      	bne.n	81124c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 81124a0:	6a3b      	ldr	r3, [r7, #32]
 81124a2:	8b5b      	ldrh	r3, [r3, #26]
 81124a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 81124a8:	2b00      	cmp	r3, #0
 81124aa:	d115      	bne.n	81124d8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 81124ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 81124b0:	2b00      	cmp	r3, #0
 81124b2:	d007      	beq.n	81124c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 81124b4:	6a3b      	ldr	r3, [r7, #32]
 81124b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 81124b8:	2b00      	cmp	r3, #0
 81124ba:	d103      	bne.n	81124c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 81124bc:	6a3b      	ldr	r3, [r7, #32]
 81124be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 81124c0:	2b00      	cmp	r3, #0
 81124c2:	d009      	beq.n	81124d8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 81124c4:	89bb      	ldrh	r3, [r7, #12]
 81124c6:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 81124ca:	f023 0203 	bic.w	r2, r3, #3
 81124ce:	897b      	ldrh	r3, [r7, #10]
 81124d0:	4293      	cmp	r3, r2
 81124d2:	bf28      	it	cs
 81124d4:	4613      	movcs	r3, r2
 81124d6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 81124d8:	8af9      	ldrh	r1, [r7, #22]
 81124da:	7bfb      	ldrb	r3, [r7, #15]
 81124dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81124e0:	4618      	mov	r0, r3
 81124e2:	f7fb f94d 	bl	810d780 <pbuf_alloc>
 81124e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81124e8:	693b      	ldr	r3, [r7, #16]
 81124ea:	2b00      	cmp	r3, #0
 81124ec:	d101      	bne.n	81124f2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 81124ee:	2300      	movs	r3, #0
 81124f0:	e019      	b.n	8112526 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 81124f2:	693b      	ldr	r3, [r7, #16]
 81124f4:	681b      	ldr	r3, [r3, #0]
 81124f6:	2b00      	cmp	r3, #0
 81124f8:	d006      	beq.n	8112508 <tcp_pbuf_prealloc+0xb8>
 81124fa:	4b0d      	ldr	r3, [pc, #52]	@ (8112530 <tcp_pbuf_prealloc+0xe0>)
 81124fc:	f240 120b 	movw	r2, #267	@ 0x10b
 8112500:	490f      	ldr	r1, [pc, #60]	@ (8112540 <tcp_pbuf_prealloc+0xf0>)
 8112502:	480d      	ldr	r0, [pc, #52]	@ (8112538 <tcp_pbuf_prealloc+0xe8>)
 8112504:	f004 ff98 	bl	8117438 <iprintf>
  *oversize = p->len - length;
 8112508:	693b      	ldr	r3, [r7, #16]
 811250a:	895a      	ldrh	r2, [r3, #10]
 811250c:	89bb      	ldrh	r3, [r7, #12]
 811250e:	1ad3      	subs	r3, r2, r3
 8112510:	b29a      	uxth	r2, r3
 8112512:	687b      	ldr	r3, [r7, #4]
 8112514:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8112516:	693b      	ldr	r3, [r7, #16]
 8112518:	89ba      	ldrh	r2, [r7, #12]
 811251a:	811a      	strh	r2, [r3, #8]
 811251c:	693b      	ldr	r3, [r7, #16]
 811251e:	891a      	ldrh	r2, [r3, #8]
 8112520:	693b      	ldr	r3, [r7, #16]
 8112522:	815a      	strh	r2, [r3, #10]
  return p;
 8112524:	693b      	ldr	r3, [r7, #16]
}
 8112526:	4618      	mov	r0, r3
 8112528:	3718      	adds	r7, #24
 811252a:	46bd      	mov	sp, r7
 811252c:	bd80      	pop	{r7, pc}
 811252e:	bf00      	nop
 8112530:	0811e220 	.word	0x0811e220
 8112534:	0811e308 	.word	0x0811e308
 8112538:	0811e2a4 	.word	0x0811e2a4
 811253c:	0811e32c 	.word	0x0811e32c
 8112540:	0811e34c 	.word	0x0811e34c

08112544 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8112544:	b580      	push	{r7, lr}
 8112546:	b082      	sub	sp, #8
 8112548:	af00      	add	r7, sp, #0
 811254a:	6078      	str	r0, [r7, #4]
 811254c:	460b      	mov	r3, r1
 811254e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8112550:	687b      	ldr	r3, [r7, #4]
 8112552:	2b00      	cmp	r3, #0
 8112554:	d106      	bne.n	8112564 <tcp_write_checks+0x20>
 8112556:	4b33      	ldr	r3, [pc, #204]	@ (8112624 <tcp_write_checks+0xe0>)
 8112558:	f240 1233 	movw	r2, #307	@ 0x133
 811255c:	4932      	ldr	r1, [pc, #200]	@ (8112628 <tcp_write_checks+0xe4>)
 811255e:	4833      	ldr	r0, [pc, #204]	@ (811262c <tcp_write_checks+0xe8>)
 8112560:	f004 ff6a 	bl	8117438 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8112564:	687b      	ldr	r3, [r7, #4]
 8112566:	7d1b      	ldrb	r3, [r3, #20]
 8112568:	2b04      	cmp	r3, #4
 811256a:	d00e      	beq.n	811258a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 811256c:	687b      	ldr	r3, [r7, #4]
 811256e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8112570:	2b07      	cmp	r3, #7
 8112572:	d00a      	beq.n	811258a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8112574:	687b      	ldr	r3, [r7, #4]
 8112576:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8112578:	2b02      	cmp	r3, #2
 811257a:	d006      	beq.n	811258a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 811257c:	687b      	ldr	r3, [r7, #4]
 811257e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8112580:	2b03      	cmp	r3, #3
 8112582:	d002      	beq.n	811258a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8112584:	f06f 030a 	mvn.w	r3, #10
 8112588:	e048      	b.n	811261c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 811258a:	887b      	ldrh	r3, [r7, #2]
 811258c:	2b00      	cmp	r3, #0
 811258e:	d101      	bne.n	8112594 <tcp_write_checks+0x50>
    return ERR_OK;
 8112590:	2300      	movs	r3, #0
 8112592:	e043      	b.n	811261c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8112594:	687b      	ldr	r3, [r7, #4]
 8112596:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811259a:	887a      	ldrh	r2, [r7, #2]
 811259c:	429a      	cmp	r2, r3
 811259e:	d909      	bls.n	81125b4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81125a0:	687b      	ldr	r3, [r7, #4]
 81125a2:	8b5b      	ldrh	r3, [r3, #26]
 81125a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81125a8:	b29a      	uxth	r2, r3
 81125aa:	687b      	ldr	r3, [r7, #4]
 81125ac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 81125ae:	f04f 33ff 	mov.w	r3, #4294967295
 81125b2:	e033      	b.n	811261c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 81125b4:	687b      	ldr	r3, [r7, #4]
 81125b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81125ba:	2b08      	cmp	r3, #8
 81125bc:	d909      	bls.n	81125d2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81125be:	687b      	ldr	r3, [r7, #4]
 81125c0:	8b5b      	ldrh	r3, [r3, #26]
 81125c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81125c6:	b29a      	uxth	r2, r3
 81125c8:	687b      	ldr	r3, [r7, #4]
 81125ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 81125cc:	f04f 33ff 	mov.w	r3, #4294967295
 81125d0:	e024      	b.n	811261c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 81125d2:	687b      	ldr	r3, [r7, #4]
 81125d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81125d8:	2b00      	cmp	r3, #0
 81125da:	d00f      	beq.n	81125fc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 81125dc:	687b      	ldr	r3, [r7, #4]
 81125de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81125e0:	2b00      	cmp	r3, #0
 81125e2:	d11a      	bne.n	811261a <tcp_write_checks+0xd6>
 81125e4:	687b      	ldr	r3, [r7, #4]
 81125e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81125e8:	2b00      	cmp	r3, #0
 81125ea:	d116      	bne.n	811261a <tcp_write_checks+0xd6>
 81125ec:	4b0d      	ldr	r3, [pc, #52]	@ (8112624 <tcp_write_checks+0xe0>)
 81125ee:	f240 1255 	movw	r2, #341	@ 0x155
 81125f2:	490f      	ldr	r1, [pc, #60]	@ (8112630 <tcp_write_checks+0xec>)
 81125f4:	480d      	ldr	r0, [pc, #52]	@ (811262c <tcp_write_checks+0xe8>)
 81125f6:	f004 ff1f 	bl	8117438 <iprintf>
 81125fa:	e00e      	b.n	811261a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 81125fc:	687b      	ldr	r3, [r7, #4]
 81125fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112600:	2b00      	cmp	r3, #0
 8112602:	d103      	bne.n	811260c <tcp_write_checks+0xc8>
 8112604:	687b      	ldr	r3, [r7, #4]
 8112606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112608:	2b00      	cmp	r3, #0
 811260a:	d006      	beq.n	811261a <tcp_write_checks+0xd6>
 811260c:	4b05      	ldr	r3, [pc, #20]	@ (8112624 <tcp_write_checks+0xe0>)
 811260e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8112612:	4908      	ldr	r1, [pc, #32]	@ (8112634 <tcp_write_checks+0xf0>)
 8112614:	4805      	ldr	r0, [pc, #20]	@ (811262c <tcp_write_checks+0xe8>)
 8112616:	f004 ff0f 	bl	8117438 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 811261a:	2300      	movs	r3, #0
}
 811261c:	4618      	mov	r0, r3
 811261e:	3708      	adds	r7, #8
 8112620:	46bd      	mov	sp, r7
 8112622:	bd80      	pop	{r7, pc}
 8112624:	0811e220 	.word	0x0811e220
 8112628:	0811e360 	.word	0x0811e360
 811262c:	0811e2a4 	.word	0x0811e2a4
 8112630:	0811e380 	.word	0x0811e380
 8112634:	0811e3bc 	.word	0x0811e3bc

08112638 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8112638:	b590      	push	{r4, r7, lr}
 811263a:	b09b      	sub	sp, #108	@ 0x6c
 811263c:	af04      	add	r7, sp, #16
 811263e:	60f8      	str	r0, [r7, #12]
 8112640:	60b9      	str	r1, [r7, #8]
 8112642:	4611      	mov	r1, r2
 8112644:	461a      	mov	r2, r3
 8112646:	460b      	mov	r3, r1
 8112648:	80fb      	strh	r3, [r7, #6]
 811264a:	4613      	mov	r3, r2
 811264c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 811264e:	2300      	movs	r3, #0
 8112650:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8112652:	2300      	movs	r3, #0
 8112654:	653b      	str	r3, [r7, #80]	@ 0x50
 8112656:	2300      	movs	r3, #0
 8112658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811265a:	2300      	movs	r3, #0
 811265c:	64bb      	str	r3, [r7, #72]	@ 0x48
 811265e:	2300      	movs	r3, #0
 8112660:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8112662:	2300      	movs	r3, #0
 8112664:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8112668:	2300      	movs	r3, #0
 811266a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 811266e:	2300      	movs	r3, #0
 8112670:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8112672:	2300      	movs	r3, #0
 8112674:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8112676:	2300      	movs	r3, #0
 8112678:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 811267a:	68fb      	ldr	r3, [r7, #12]
 811267c:	2b00      	cmp	r3, #0
 811267e:	d109      	bne.n	8112694 <tcp_write+0x5c>
 8112680:	4ba4      	ldr	r3, [pc, #656]	@ (8112914 <tcp_write+0x2dc>)
 8112682:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8112686:	49a4      	ldr	r1, [pc, #656]	@ (8112918 <tcp_write+0x2e0>)
 8112688:	48a4      	ldr	r0, [pc, #656]	@ (811291c <tcp_write+0x2e4>)
 811268a:	f004 fed5 	bl	8117438 <iprintf>
 811268e:	f06f 030f 	mvn.w	r3, #15
 8112692:	e32a      	b.n	8112cea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8112694:	68fb      	ldr	r3, [r7, #12]
 8112696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 811269a:	085b      	lsrs	r3, r3, #1
 811269c:	b29a      	uxth	r2, r3
 811269e:	68fb      	ldr	r3, [r7, #12]
 81126a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81126a2:	4293      	cmp	r3, r2
 81126a4:	bf28      	it	cs
 81126a6:	4613      	movcs	r3, r2
 81126a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 81126aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81126ac:	2b00      	cmp	r3, #0
 81126ae:	d102      	bne.n	81126b6 <tcp_write+0x7e>
 81126b0:	68fb      	ldr	r3, [r7, #12]
 81126b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81126b4:	e000      	b.n	81126b8 <tcp_write+0x80>
 81126b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81126b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 81126ba:	68bb      	ldr	r3, [r7, #8]
 81126bc:	2b00      	cmp	r3, #0
 81126be:	d109      	bne.n	81126d4 <tcp_write+0x9c>
 81126c0:	4b94      	ldr	r3, [pc, #592]	@ (8112914 <tcp_write+0x2dc>)
 81126c2:	f240 12ad 	movw	r2, #429	@ 0x1ad
 81126c6:	4996      	ldr	r1, [pc, #600]	@ (8112920 <tcp_write+0x2e8>)
 81126c8:	4894      	ldr	r0, [pc, #592]	@ (811291c <tcp_write+0x2e4>)
 81126ca:	f004 feb5 	bl	8117438 <iprintf>
 81126ce:	f06f 030f 	mvn.w	r3, #15
 81126d2:	e30a      	b.n	8112cea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 81126d4:	88fb      	ldrh	r3, [r7, #6]
 81126d6:	4619      	mov	r1, r3
 81126d8:	68f8      	ldr	r0, [r7, #12]
 81126da:	f7ff ff33 	bl	8112544 <tcp_write_checks>
 81126de:	4603      	mov	r3, r0
 81126e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 81126e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 81126e8:	2b00      	cmp	r3, #0
 81126ea:	d002      	beq.n	81126f2 <tcp_write+0xba>
    return err;
 81126ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 81126f0:	e2fb      	b.n	8112cea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 81126f2:	68fb      	ldr	r3, [r7, #12]
 81126f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81126f8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 81126fc:	2300      	movs	r3, #0
 81126fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8112702:	68fb      	ldr	r3, [r7, #12]
 8112704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112706:	2b00      	cmp	r3, #0
 8112708:	f000 80f6 	beq.w	81128f8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811270c:	68fb      	ldr	r3, [r7, #12]
 811270e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112710:	653b      	str	r3, [r7, #80]	@ 0x50
 8112712:	e002      	b.n	811271a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8112714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112716:	681b      	ldr	r3, [r3, #0]
 8112718:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811271a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811271c:	681b      	ldr	r3, [r3, #0]
 811271e:	2b00      	cmp	r3, #0
 8112720:	d1f8      	bne.n	8112714 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8112722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112724:	7a9b      	ldrb	r3, [r3, #10]
 8112726:	009b      	lsls	r3, r3, #2
 8112728:	b29b      	uxth	r3, r3
 811272a:	f003 0304 	and.w	r3, r3, #4
 811272e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8112730:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8112732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112734:	891b      	ldrh	r3, [r3, #8]
 8112736:	4619      	mov	r1, r3
 8112738:	8c3b      	ldrh	r3, [r7, #32]
 811273a:	440b      	add	r3, r1
 811273c:	429a      	cmp	r2, r3
 811273e:	da06      	bge.n	811274e <tcp_write+0x116>
 8112740:	4b74      	ldr	r3, [pc, #464]	@ (8112914 <tcp_write+0x2dc>)
 8112742:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8112746:	4977      	ldr	r1, [pc, #476]	@ (8112924 <tcp_write+0x2ec>)
 8112748:	4874      	ldr	r0, [pc, #464]	@ (811291c <tcp_write+0x2e4>)
 811274a:	f004 fe75 	bl	8117438 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 811274e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112750:	891a      	ldrh	r2, [r3, #8]
 8112752:	8c3b      	ldrh	r3, [r7, #32]
 8112754:	4413      	add	r3, r2
 8112756:	b29b      	uxth	r3, r3
 8112758:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811275a:	1ad3      	subs	r3, r2, r3
 811275c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 811275e:	68fb      	ldr	r3, [r7, #12]
 8112760:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8112764:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8112766:	8a7b      	ldrh	r3, [r7, #18]
 8112768:	2b00      	cmp	r3, #0
 811276a:	d026      	beq.n	81127ba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 811276c:	8a7b      	ldrh	r3, [r7, #18]
 811276e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8112770:	429a      	cmp	r2, r3
 8112772:	d206      	bcs.n	8112782 <tcp_write+0x14a>
 8112774:	4b67      	ldr	r3, [pc, #412]	@ (8112914 <tcp_write+0x2dc>)
 8112776:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 811277a:	496b      	ldr	r1, [pc, #428]	@ (8112928 <tcp_write+0x2f0>)
 811277c:	4867      	ldr	r0, [pc, #412]	@ (811291c <tcp_write+0x2e4>)
 811277e:	f004 fe5b 	bl	8117438 <iprintf>
      seg = last_unsent;
 8112782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112784:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8112786:	8a7b      	ldrh	r3, [r7, #18]
 8112788:	88fa      	ldrh	r2, [r7, #6]
 811278a:	4293      	cmp	r3, r2
 811278c:	bf28      	it	cs
 811278e:	4613      	movcs	r3, r2
 8112790:	b29b      	uxth	r3, r3
 8112792:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8112794:	4293      	cmp	r3, r2
 8112796:	bf28      	it	cs
 8112798:	4613      	movcs	r3, r2
 811279a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 811279c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81127a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81127a2:	4413      	add	r3, r2
 81127a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 81127a8:	8a7a      	ldrh	r2, [r7, #18]
 81127aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81127ac:	1ad3      	subs	r3, r2, r3
 81127ae:	b29b      	uxth	r3, r3
 81127b0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 81127b2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 81127b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81127b6:	1ad3      	subs	r3, r2, r3
 81127b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 81127ba:	8a7b      	ldrh	r3, [r7, #18]
 81127bc:	2b00      	cmp	r3, #0
 81127be:	d00b      	beq.n	81127d8 <tcp_write+0x1a0>
 81127c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81127c4:	88fb      	ldrh	r3, [r7, #6]
 81127c6:	429a      	cmp	r2, r3
 81127c8:	d006      	beq.n	81127d8 <tcp_write+0x1a0>
 81127ca:	4b52      	ldr	r3, [pc, #328]	@ (8112914 <tcp_write+0x2dc>)
 81127cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81127d0:	4956      	ldr	r1, [pc, #344]	@ (811292c <tcp_write+0x2f4>)
 81127d2:	4852      	ldr	r0, [pc, #328]	@ (811291c <tcp_write+0x2e4>)
 81127d4:	f004 fe30 	bl	8117438 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 81127d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81127dc:	88fb      	ldrh	r3, [r7, #6]
 81127de:	429a      	cmp	r2, r3
 81127e0:	f080 8167 	bcs.w	8112ab2 <tcp_write+0x47a>
 81127e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 81127e6:	2b00      	cmp	r3, #0
 81127e8:	f000 8163 	beq.w	8112ab2 <tcp_write+0x47a>
 81127ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81127ee:	891b      	ldrh	r3, [r3, #8]
 81127f0:	2b00      	cmp	r3, #0
 81127f2:	f000 815e 	beq.w	8112ab2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 81127f6:	88fa      	ldrh	r2, [r7, #6]
 81127f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81127fc:	1ad2      	subs	r2, r2, r3
 81127fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8112800:	4293      	cmp	r3, r2
 8112802:	bfa8      	it	ge
 8112804:	4613      	movge	r3, r2
 8112806:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8112808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811280a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 811280c:	797b      	ldrb	r3, [r7, #5]
 811280e:	f003 0301 	and.w	r3, r3, #1
 8112812:	2b00      	cmp	r3, #0
 8112814:	d027      	beq.n	8112866 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8112816:	f107 0012 	add.w	r0, r7, #18
 811281a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 811281c:	8bf9      	ldrh	r1, [r7, #30]
 811281e:	2301      	movs	r3, #1
 8112820:	9302      	str	r3, [sp, #8]
 8112822:	797b      	ldrb	r3, [r7, #5]
 8112824:	9301      	str	r3, [sp, #4]
 8112826:	68fb      	ldr	r3, [r7, #12]
 8112828:	9300      	str	r3, [sp, #0]
 811282a:	4603      	mov	r3, r0
 811282c:	2000      	movs	r0, #0
 811282e:	f7ff fe0f 	bl	8112450 <tcp_pbuf_prealloc>
 8112832:	6578      	str	r0, [r7, #84]	@ 0x54
 8112834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8112836:	2b00      	cmp	r3, #0
 8112838:	f000 8225 	beq.w	8112c86 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 811283c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811283e:	6858      	ldr	r0, [r3, #4]
 8112840:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8112844:	68ba      	ldr	r2, [r7, #8]
 8112846:	4413      	add	r3, r2
 8112848:	8bfa      	ldrh	r2, [r7, #30]
 811284a:	4619      	mov	r1, r3
 811284c:	f005 f873 	bl	8117936 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8112850:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8112852:	f7fb fb01 	bl	810de58 <pbuf_clen>
 8112856:	4603      	mov	r3, r0
 8112858:	461a      	mov	r2, r3
 811285a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 811285e:	4413      	add	r3, r2
 8112860:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8112864:	e041      	b.n	81128ea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8112866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112868:	685b      	ldr	r3, [r3, #4]
 811286a:	637b      	str	r3, [r7, #52]	@ 0x34
 811286c:	e002      	b.n	8112874 <tcp_write+0x23c>
 811286e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112870:	681b      	ldr	r3, [r3, #0]
 8112872:	637b      	str	r3, [r7, #52]	@ 0x34
 8112874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112876:	681b      	ldr	r3, [r3, #0]
 8112878:	2b00      	cmp	r3, #0
 811287a:	d1f8      	bne.n	811286e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 811287c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811287e:	7b1b      	ldrb	r3, [r3, #12]
 8112880:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8112884:	2b00      	cmp	r3, #0
 8112886:	d115      	bne.n	81128b4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8112888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811288a:	685b      	ldr	r3, [r3, #4]
 811288c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811288e:	8952      	ldrh	r2, [r2, #10]
 8112890:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8112892:	68ba      	ldr	r2, [r7, #8]
 8112894:	429a      	cmp	r2, r3
 8112896:	d10d      	bne.n	81128b4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8112898:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811289c:	2b00      	cmp	r3, #0
 811289e:	d006      	beq.n	81128ae <tcp_write+0x276>
 81128a0:	4b1c      	ldr	r3, [pc, #112]	@ (8112914 <tcp_write+0x2dc>)
 81128a2:	f240 2231 	movw	r2, #561	@ 0x231
 81128a6:	4922      	ldr	r1, [pc, #136]	@ (8112930 <tcp_write+0x2f8>)
 81128a8:	481c      	ldr	r0, [pc, #112]	@ (811291c <tcp_write+0x2e4>)
 81128aa:	f004 fdc5 	bl	8117438 <iprintf>
          extendlen = seglen;
 81128ae:	8bfb      	ldrh	r3, [r7, #30]
 81128b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 81128b2:	e01a      	b.n	81128ea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 81128b4:	8bfb      	ldrh	r3, [r7, #30]
 81128b6:	2201      	movs	r2, #1
 81128b8:	4619      	mov	r1, r3
 81128ba:	2000      	movs	r0, #0
 81128bc:	f7fa ff60 	bl	810d780 <pbuf_alloc>
 81128c0:	6578      	str	r0, [r7, #84]	@ 0x54
 81128c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81128c4:	2b00      	cmp	r3, #0
 81128c6:	f000 81e0 	beq.w	8112c8a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 81128ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81128ce:	68ba      	ldr	r2, [r7, #8]
 81128d0:	441a      	add	r2, r3
 81128d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81128d4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 81128d6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 81128d8:	f7fb fabe 	bl	810de58 <pbuf_clen>
 81128dc:	4603      	mov	r3, r0
 81128de:	461a      	mov	r2, r3
 81128e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81128e4:	4413      	add	r3, r2
 81128e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 81128ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81128ee:	8bfb      	ldrh	r3, [r7, #30]
 81128f0:	4413      	add	r3, r2
 81128f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 81128f6:	e0dc      	b.n	8112ab2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 81128f8:	68fb      	ldr	r3, [r7, #12]
 81128fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 81128fe:	2b00      	cmp	r3, #0
 8112900:	f000 80d7 	beq.w	8112ab2 <tcp_write+0x47a>
 8112904:	4b03      	ldr	r3, [pc, #12]	@ (8112914 <tcp_write+0x2dc>)
 8112906:	f240 224a 	movw	r2, #586	@ 0x24a
 811290a:	490a      	ldr	r1, [pc, #40]	@ (8112934 <tcp_write+0x2fc>)
 811290c:	4803      	ldr	r0, [pc, #12]	@ (811291c <tcp_write+0x2e4>)
 811290e:	f004 fd93 	bl	8117438 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8112912:	e0ce      	b.n	8112ab2 <tcp_write+0x47a>
 8112914:	0811e220 	.word	0x0811e220
 8112918:	0811e3f0 	.word	0x0811e3f0
 811291c:	0811e2a4 	.word	0x0811e2a4
 8112920:	0811e408 	.word	0x0811e408
 8112924:	0811e43c 	.word	0x0811e43c
 8112928:	0811e454 	.word	0x0811e454
 811292c:	0811e474 	.word	0x0811e474
 8112930:	0811e494 	.word	0x0811e494
 8112934:	0811e4c0 	.word	0x0811e4c0
    struct pbuf *p;
    u16_t left = len - pos;
 8112938:	88fa      	ldrh	r2, [r7, #6]
 811293a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811293e:	1ad3      	subs	r3, r2, r3
 8112940:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8112942:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8112946:	b29b      	uxth	r3, r3
 8112948:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811294a:	1ad3      	subs	r3, r2, r3
 811294c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 811294e:	8b7a      	ldrh	r2, [r7, #26]
 8112950:	8bbb      	ldrh	r3, [r7, #28]
 8112952:	4293      	cmp	r3, r2
 8112954:	bf28      	it	cs
 8112956:	4613      	movcs	r3, r2
 8112958:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 811295a:	797b      	ldrb	r3, [r7, #5]
 811295c:	f003 0301 	and.w	r3, r3, #1
 8112960:	2b00      	cmp	r3, #0
 8112962:	d036      	beq.n	81129d2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8112964:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8112968:	b29a      	uxth	r2, r3
 811296a:	8b3b      	ldrh	r3, [r7, #24]
 811296c:	4413      	add	r3, r2
 811296e:	b299      	uxth	r1, r3
 8112970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112972:	2b00      	cmp	r3, #0
 8112974:	bf0c      	ite	eq
 8112976:	2301      	moveq	r3, #1
 8112978:	2300      	movne	r3, #0
 811297a:	b2db      	uxtb	r3, r3
 811297c:	f107 0012 	add.w	r0, r7, #18
 8112980:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8112982:	9302      	str	r3, [sp, #8]
 8112984:	797b      	ldrb	r3, [r7, #5]
 8112986:	9301      	str	r3, [sp, #4]
 8112988:	68fb      	ldr	r3, [r7, #12]
 811298a:	9300      	str	r3, [sp, #0]
 811298c:	4603      	mov	r3, r0
 811298e:	2036      	movs	r0, #54	@ 0x36
 8112990:	f7ff fd5e 	bl	8112450 <tcp_pbuf_prealloc>
 8112994:	6338      	str	r0, [r7, #48]	@ 0x30
 8112996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112998:	2b00      	cmp	r3, #0
 811299a:	f000 8178 	beq.w	8112c8e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 811299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129a0:	895b      	ldrh	r3, [r3, #10]
 81129a2:	8b3a      	ldrh	r2, [r7, #24]
 81129a4:	429a      	cmp	r2, r3
 81129a6:	d906      	bls.n	81129b6 <tcp_write+0x37e>
 81129a8:	4b8c      	ldr	r3, [pc, #560]	@ (8112bdc <tcp_write+0x5a4>)
 81129aa:	f240 2266 	movw	r2, #614	@ 0x266
 81129ae:	498c      	ldr	r1, [pc, #560]	@ (8112be0 <tcp_write+0x5a8>)
 81129b0:	488c      	ldr	r0, [pc, #560]	@ (8112be4 <tcp_write+0x5ac>)
 81129b2:	f004 fd41 	bl	8117438 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 81129b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129b8:	685a      	ldr	r2, [r3, #4]
 81129ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81129be:	18d0      	adds	r0, r2, r3
 81129c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81129c4:	68ba      	ldr	r2, [r7, #8]
 81129c6:	4413      	add	r3, r2
 81129c8:	8b3a      	ldrh	r2, [r7, #24]
 81129ca:	4619      	mov	r1, r3
 81129cc:	f004 ffb3 	bl	8117936 <memcpy>
 81129d0:	e02f      	b.n	8112a32 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 81129d2:	8a7b      	ldrh	r3, [r7, #18]
 81129d4:	2b00      	cmp	r3, #0
 81129d6:	d006      	beq.n	81129e6 <tcp_write+0x3ae>
 81129d8:	4b80      	ldr	r3, [pc, #512]	@ (8112bdc <tcp_write+0x5a4>)
 81129da:	f240 2271 	movw	r2, #625	@ 0x271
 81129de:	4982      	ldr	r1, [pc, #520]	@ (8112be8 <tcp_write+0x5b0>)
 81129e0:	4880      	ldr	r0, [pc, #512]	@ (8112be4 <tcp_write+0x5ac>)
 81129e2:	f004 fd29 	bl	8117438 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 81129e6:	8b3b      	ldrh	r3, [r7, #24]
 81129e8:	2201      	movs	r2, #1
 81129ea:	4619      	mov	r1, r3
 81129ec:	2036      	movs	r0, #54	@ 0x36
 81129ee:	f7fa fec7 	bl	810d780 <pbuf_alloc>
 81129f2:	6178      	str	r0, [r7, #20]
 81129f4:	697b      	ldr	r3, [r7, #20]
 81129f6:	2b00      	cmp	r3, #0
 81129f8:	f000 814b 	beq.w	8112c92 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 81129fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8112a00:	68ba      	ldr	r2, [r7, #8]
 8112a02:	441a      	add	r2, r3
 8112a04:	697b      	ldr	r3, [r7, #20]
 8112a06:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8112a08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8112a0c:	b29b      	uxth	r3, r3
 8112a0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8112a12:	4619      	mov	r1, r3
 8112a14:	2036      	movs	r0, #54	@ 0x36
 8112a16:	f7fa feb3 	bl	810d780 <pbuf_alloc>
 8112a1a:	6338      	str	r0, [r7, #48]	@ 0x30
 8112a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112a1e:	2b00      	cmp	r3, #0
 8112a20:	d103      	bne.n	8112a2a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8112a22:	6978      	ldr	r0, [r7, #20]
 8112a24:	f7fb f990 	bl	810dd48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8112a28:	e136      	b.n	8112c98 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8112a2a:	6979      	ldr	r1, [r7, #20]
 8112a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112a2e:	f7fb fa4d 	bl	810decc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8112a32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112a34:	f7fb fa10 	bl	810de58 <pbuf_clen>
 8112a38:	4603      	mov	r3, r0
 8112a3a:	461a      	mov	r2, r3
 8112a3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8112a40:	4413      	add	r3, r2
 8112a42:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8112a46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8112a4a:	2b09      	cmp	r3, #9
 8112a4c:	d903      	bls.n	8112a56 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8112a4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112a50:	f7fb f97a 	bl	810dd48 <pbuf_free>
      goto memerr;
 8112a54:	e120      	b.n	8112c98 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8112a56:	68fb      	ldr	r3, [r7, #12]
 8112a58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8112a5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8112a5e:	441a      	add	r2, r3
 8112a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8112a64:	9300      	str	r3, [sp, #0]
 8112a66:	4613      	mov	r3, r2
 8112a68:	2200      	movs	r2, #0
 8112a6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8112a6c:	68f8      	ldr	r0, [r7, #12]
 8112a6e:	f7ff fc53 	bl	8112318 <tcp_create_segment>
 8112a72:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8112a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a76:	2b00      	cmp	r3, #0
 8112a78:	f000 810d 	beq.w	8112c96 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8112a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112a7e:	2b00      	cmp	r3, #0
 8112a80:	d102      	bne.n	8112a88 <tcp_write+0x450>
      queue = seg;
 8112a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8112a86:	e00c      	b.n	8112aa2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8112a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112a8a:	2b00      	cmp	r3, #0
 8112a8c:	d106      	bne.n	8112a9c <tcp_write+0x464>
 8112a8e:	4b53      	ldr	r3, [pc, #332]	@ (8112bdc <tcp_write+0x5a4>)
 8112a90:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8112a94:	4955      	ldr	r1, [pc, #340]	@ (8112bec <tcp_write+0x5b4>)
 8112a96:	4853      	ldr	r0, [pc, #332]	@ (8112be4 <tcp_write+0x5ac>)
 8112a98:	f004 fcce 	bl	8117438 <iprintf>
      prev_seg->next = seg;
 8112a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112a9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8112aa0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8112aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112aa4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8112aa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8112aaa:	8b3b      	ldrh	r3, [r7, #24]
 8112aac:	4413      	add	r3, r2
 8112aae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8112ab2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8112ab6:	88fb      	ldrh	r3, [r7, #6]
 8112ab8:	429a      	cmp	r2, r3
 8112aba:	f4ff af3d 	bcc.w	8112938 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8112abe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8112ac0:	2b00      	cmp	r3, #0
 8112ac2:	d02c      	beq.n	8112b1e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8112ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112ac6:	685b      	ldr	r3, [r3, #4]
 8112ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112aca:	e01e      	b.n	8112b0a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8112acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112ace:	891a      	ldrh	r2, [r3, #8]
 8112ad0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8112ad2:	4413      	add	r3, r2
 8112ad4:	b29a      	uxth	r2, r3
 8112ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112ad8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8112ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112adc:	681b      	ldr	r3, [r3, #0]
 8112ade:	2b00      	cmp	r3, #0
 8112ae0:	d110      	bne.n	8112b04 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8112ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112ae4:	685b      	ldr	r3, [r3, #4]
 8112ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112ae8:	8952      	ldrh	r2, [r2, #10]
 8112aea:	4413      	add	r3, r2
 8112aec:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8112aee:	68b9      	ldr	r1, [r7, #8]
 8112af0:	4618      	mov	r0, r3
 8112af2:	f004 ff20 	bl	8117936 <memcpy>
        p->len += oversize_used;
 8112af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112af8:	895a      	ldrh	r2, [r3, #10]
 8112afa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8112afc:	4413      	add	r3, r2
 8112afe:	b29a      	uxth	r2, r3
 8112b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112b02:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8112b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112b06:	681b      	ldr	r3, [r3, #0]
 8112b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112b0c:	2b00      	cmp	r3, #0
 8112b0e:	d1dd      	bne.n	8112acc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8112b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b12:	891a      	ldrh	r2, [r3, #8]
 8112b14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8112b16:	4413      	add	r3, r2
 8112b18:	b29a      	uxth	r2, r3
 8112b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b1c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8112b1e:	8a7a      	ldrh	r2, [r7, #18]
 8112b20:	68fb      	ldr	r3, [r7, #12]
 8112b22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8112b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8112b28:	2b00      	cmp	r3, #0
 8112b2a:	d018      	beq.n	8112b5e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8112b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b2e:	2b00      	cmp	r3, #0
 8112b30:	d106      	bne.n	8112b40 <tcp_write+0x508>
 8112b32:	4b2a      	ldr	r3, [pc, #168]	@ (8112bdc <tcp_write+0x5a4>)
 8112b34:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8112b38:	492d      	ldr	r1, [pc, #180]	@ (8112bf0 <tcp_write+0x5b8>)
 8112b3a:	482a      	ldr	r0, [pc, #168]	@ (8112be4 <tcp_write+0x5ac>)
 8112b3c:	f004 fc7c 	bl	8117438 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8112b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b42:	685b      	ldr	r3, [r3, #4]
 8112b44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8112b46:	4618      	mov	r0, r3
 8112b48:	f7fb f9c0 	bl	810decc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8112b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b4e:	891a      	ldrh	r2, [r3, #8]
 8112b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8112b52:	891b      	ldrh	r3, [r3, #8]
 8112b54:	4413      	add	r3, r2
 8112b56:	b29a      	uxth	r2, r3
 8112b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b5a:	811a      	strh	r2, [r3, #8]
 8112b5c:	e037      	b.n	8112bce <tcp_write+0x596>
  } else if (extendlen > 0) {
 8112b5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112b60:	2b00      	cmp	r3, #0
 8112b62:	d034      	beq.n	8112bce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8112b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b66:	2b00      	cmp	r3, #0
 8112b68:	d003      	beq.n	8112b72 <tcp_write+0x53a>
 8112b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b6c:	685b      	ldr	r3, [r3, #4]
 8112b6e:	2b00      	cmp	r3, #0
 8112b70:	d106      	bne.n	8112b80 <tcp_write+0x548>
 8112b72:	4b1a      	ldr	r3, [pc, #104]	@ (8112bdc <tcp_write+0x5a4>)
 8112b74:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8112b78:	491e      	ldr	r1, [pc, #120]	@ (8112bf4 <tcp_write+0x5bc>)
 8112b7a:	481a      	ldr	r0, [pc, #104]	@ (8112be4 <tcp_write+0x5ac>)
 8112b7c:	f004 fc5c 	bl	8117438 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8112b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112b82:	685b      	ldr	r3, [r3, #4]
 8112b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8112b86:	e009      	b.n	8112b9c <tcp_write+0x564>
      p->tot_len += extendlen;
 8112b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b8a:	891a      	ldrh	r2, [r3, #8]
 8112b8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112b8e:	4413      	add	r3, r2
 8112b90:	b29a      	uxth	r2, r3
 8112b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b94:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8112b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b98:	681b      	ldr	r3, [r3, #0]
 8112b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8112b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b9e:	681b      	ldr	r3, [r3, #0]
 8112ba0:	2b00      	cmp	r3, #0
 8112ba2:	d1f1      	bne.n	8112b88 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8112ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112ba6:	891a      	ldrh	r2, [r3, #8]
 8112ba8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112baa:	4413      	add	r3, r2
 8112bac:	b29a      	uxth	r2, r3
 8112bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bb0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8112bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bb4:	895a      	ldrh	r2, [r3, #10]
 8112bb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112bb8:	4413      	add	r3, r2
 8112bba:	b29a      	uxth	r2, r3
 8112bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bbe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8112bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112bc2:	891a      	ldrh	r2, [r3, #8]
 8112bc4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112bc6:	4413      	add	r3, r2
 8112bc8:	b29a      	uxth	r2, r3
 8112bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112bcc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8112bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112bd0:	2b00      	cmp	r3, #0
 8112bd2:	d111      	bne.n	8112bf8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8112bd4:	68fb      	ldr	r3, [r7, #12]
 8112bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8112bd8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8112bda:	e010      	b.n	8112bfe <tcp_write+0x5c6>
 8112bdc:	0811e220 	.word	0x0811e220
 8112be0:	0811e4f0 	.word	0x0811e4f0
 8112be4:	0811e2a4 	.word	0x0811e2a4
 8112be8:	0811e530 	.word	0x0811e530
 8112bec:	0811e540 	.word	0x0811e540
 8112bf0:	0811e554 	.word	0x0811e554
 8112bf4:	0811e58c 	.word	0x0811e58c
  } else {
    last_unsent->next = queue;
 8112bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8112bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8112bfc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8112bfe:	68fb      	ldr	r3, [r7, #12]
 8112c00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8112c02:	88fb      	ldrh	r3, [r7, #6]
 8112c04:	441a      	add	r2, r3
 8112c06:	68fb      	ldr	r3, [r7, #12]
 8112c08:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8112c0a:	68fb      	ldr	r3, [r7, #12]
 8112c0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8112c10:	88fb      	ldrh	r3, [r7, #6]
 8112c12:	1ad3      	subs	r3, r2, r3
 8112c14:	b29a      	uxth	r2, r3
 8112c16:	68fb      	ldr	r3, [r7, #12]
 8112c18:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8112c1c:	68fb      	ldr	r3, [r7, #12]
 8112c1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8112c22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8112c26:	68fb      	ldr	r3, [r7, #12]
 8112c28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8112c2c:	2b00      	cmp	r3, #0
 8112c2e:	d00e      	beq.n	8112c4e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8112c30:	68fb      	ldr	r3, [r7, #12]
 8112c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112c34:	2b00      	cmp	r3, #0
 8112c36:	d10a      	bne.n	8112c4e <tcp_write+0x616>
 8112c38:	68fb      	ldr	r3, [r7, #12]
 8112c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112c3c:	2b00      	cmp	r3, #0
 8112c3e:	d106      	bne.n	8112c4e <tcp_write+0x616>
 8112c40:	4b2c      	ldr	r3, [pc, #176]	@ (8112cf4 <tcp_write+0x6bc>)
 8112c42:	f240 3212 	movw	r2, #786	@ 0x312
 8112c46:	492c      	ldr	r1, [pc, #176]	@ (8112cf8 <tcp_write+0x6c0>)
 8112c48:	482c      	ldr	r0, [pc, #176]	@ (8112cfc <tcp_write+0x6c4>)
 8112c4a:	f004 fbf5 	bl	8117438 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8112c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112c50:	2b00      	cmp	r3, #0
 8112c52:	d016      	beq.n	8112c82 <tcp_write+0x64a>
 8112c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112c56:	68db      	ldr	r3, [r3, #12]
 8112c58:	2b00      	cmp	r3, #0
 8112c5a:	d012      	beq.n	8112c82 <tcp_write+0x64a>
 8112c5c:	797b      	ldrb	r3, [r7, #5]
 8112c5e:	f003 0302 	and.w	r3, r3, #2
 8112c62:	2b00      	cmp	r3, #0
 8112c64:	d10d      	bne.n	8112c82 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8112c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112c68:	68db      	ldr	r3, [r3, #12]
 8112c6a:	899b      	ldrh	r3, [r3, #12]
 8112c6c:	b29c      	uxth	r4, r3
 8112c6e:	2008      	movs	r0, #8
 8112c70:	f7f7 f966 	bl	8109f40 <lwip_htons>
 8112c74:	4603      	mov	r3, r0
 8112c76:	461a      	mov	r2, r3
 8112c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112c7a:	68db      	ldr	r3, [r3, #12]
 8112c7c:	4322      	orrs	r2, r4
 8112c7e:	b292      	uxth	r2, r2
 8112c80:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8112c82:	2300      	movs	r3, #0
 8112c84:	e031      	b.n	8112cea <tcp_write+0x6b2>
          goto memerr;
 8112c86:	bf00      	nop
 8112c88:	e006      	b.n	8112c98 <tcp_write+0x660>
            goto memerr;
 8112c8a:	bf00      	nop
 8112c8c:	e004      	b.n	8112c98 <tcp_write+0x660>
        goto memerr;
 8112c8e:	bf00      	nop
 8112c90:	e002      	b.n	8112c98 <tcp_write+0x660>
        goto memerr;
 8112c92:	bf00      	nop
 8112c94:	e000      	b.n	8112c98 <tcp_write+0x660>
      goto memerr;
 8112c96:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8112c98:	68fb      	ldr	r3, [r7, #12]
 8112c9a:	8b5b      	ldrh	r3, [r3, #26]
 8112c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8112ca0:	b29a      	uxth	r2, r3
 8112ca2:	68fb      	ldr	r3, [r7, #12]
 8112ca4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8112ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8112ca8:	2b00      	cmp	r3, #0
 8112caa:	d002      	beq.n	8112cb2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8112cac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8112cae:	f7fb f84b 	bl	810dd48 <pbuf_free>
  }
  if (queue != NULL) {
 8112cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112cb4:	2b00      	cmp	r3, #0
 8112cb6:	d002      	beq.n	8112cbe <tcp_write+0x686>
    tcp_segs_free(queue);
 8112cb8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8112cba:	f7fc fc03 	bl	810f4c4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8112cbe:	68fb      	ldr	r3, [r7, #12]
 8112cc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8112cc4:	2b00      	cmp	r3, #0
 8112cc6:	d00e      	beq.n	8112ce6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8112cc8:	68fb      	ldr	r3, [r7, #12]
 8112cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112ccc:	2b00      	cmp	r3, #0
 8112cce:	d10a      	bne.n	8112ce6 <tcp_write+0x6ae>
 8112cd0:	68fb      	ldr	r3, [r7, #12]
 8112cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112cd4:	2b00      	cmp	r3, #0
 8112cd6:	d106      	bne.n	8112ce6 <tcp_write+0x6ae>
 8112cd8:	4b06      	ldr	r3, [pc, #24]	@ (8112cf4 <tcp_write+0x6bc>)
 8112cda:	f240 3227 	movw	r2, #807	@ 0x327
 8112cde:	4906      	ldr	r1, [pc, #24]	@ (8112cf8 <tcp_write+0x6c0>)
 8112ce0:	4806      	ldr	r0, [pc, #24]	@ (8112cfc <tcp_write+0x6c4>)
 8112ce2:	f004 fba9 	bl	8117438 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8112ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8112cea:	4618      	mov	r0, r3
 8112cec:	375c      	adds	r7, #92	@ 0x5c
 8112cee:	46bd      	mov	sp, r7
 8112cf0:	bd90      	pop	{r4, r7, pc}
 8112cf2:	bf00      	nop
 8112cf4:	0811e220 	.word	0x0811e220
 8112cf8:	0811e5c4 	.word	0x0811e5c4
 8112cfc:	0811e2a4 	.word	0x0811e2a4

08112d00 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8112d00:	b590      	push	{r4, r7, lr}
 8112d02:	b08b      	sub	sp, #44	@ 0x2c
 8112d04:	af02      	add	r7, sp, #8
 8112d06:	6078      	str	r0, [r7, #4]
 8112d08:	460b      	mov	r3, r1
 8112d0a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8112d0c:	2300      	movs	r3, #0
 8112d0e:	61fb      	str	r3, [r7, #28]
 8112d10:	2300      	movs	r3, #0
 8112d12:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8112d14:	2300      	movs	r3, #0
 8112d16:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8112d18:	687b      	ldr	r3, [r7, #4]
 8112d1a:	2b00      	cmp	r3, #0
 8112d1c:	d106      	bne.n	8112d2c <tcp_split_unsent_seg+0x2c>
 8112d1e:	4b95      	ldr	r3, [pc, #596]	@ (8112f74 <tcp_split_unsent_seg+0x274>)
 8112d20:	f240 324b 	movw	r2, #843	@ 0x34b
 8112d24:	4994      	ldr	r1, [pc, #592]	@ (8112f78 <tcp_split_unsent_seg+0x278>)
 8112d26:	4895      	ldr	r0, [pc, #596]	@ (8112f7c <tcp_split_unsent_seg+0x27c>)
 8112d28:	f004 fb86 	bl	8117438 <iprintf>

  useg = pcb->unsent;
 8112d2c:	687b      	ldr	r3, [r7, #4]
 8112d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112d30:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8112d32:	697b      	ldr	r3, [r7, #20]
 8112d34:	2b00      	cmp	r3, #0
 8112d36:	d102      	bne.n	8112d3e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8112d38:	f04f 33ff 	mov.w	r3, #4294967295
 8112d3c:	e116      	b.n	8112f6c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8112d3e:	887b      	ldrh	r3, [r7, #2]
 8112d40:	2b00      	cmp	r3, #0
 8112d42:	d109      	bne.n	8112d58 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8112d44:	4b8b      	ldr	r3, [pc, #556]	@ (8112f74 <tcp_split_unsent_seg+0x274>)
 8112d46:	f240 3253 	movw	r2, #851	@ 0x353
 8112d4a:	498d      	ldr	r1, [pc, #564]	@ (8112f80 <tcp_split_unsent_seg+0x280>)
 8112d4c:	488b      	ldr	r0, [pc, #556]	@ (8112f7c <tcp_split_unsent_seg+0x27c>)
 8112d4e:	f004 fb73 	bl	8117438 <iprintf>
    return ERR_VAL;
 8112d52:	f06f 0305 	mvn.w	r3, #5
 8112d56:	e109      	b.n	8112f6c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8112d58:	697b      	ldr	r3, [r7, #20]
 8112d5a:	891b      	ldrh	r3, [r3, #8]
 8112d5c:	887a      	ldrh	r2, [r7, #2]
 8112d5e:	429a      	cmp	r2, r3
 8112d60:	d301      	bcc.n	8112d66 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8112d62:	2300      	movs	r3, #0
 8112d64:	e102      	b.n	8112f6c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8112d66:	687b      	ldr	r3, [r7, #4]
 8112d68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112d6a:	887a      	ldrh	r2, [r7, #2]
 8112d6c:	429a      	cmp	r2, r3
 8112d6e:	d906      	bls.n	8112d7e <tcp_split_unsent_seg+0x7e>
 8112d70:	4b80      	ldr	r3, [pc, #512]	@ (8112f74 <tcp_split_unsent_seg+0x274>)
 8112d72:	f240 325b 	movw	r2, #859	@ 0x35b
 8112d76:	4983      	ldr	r1, [pc, #524]	@ (8112f84 <tcp_split_unsent_seg+0x284>)
 8112d78:	4880      	ldr	r0, [pc, #512]	@ (8112f7c <tcp_split_unsent_seg+0x27c>)
 8112d7a:	f004 fb5d 	bl	8117438 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8112d7e:	697b      	ldr	r3, [r7, #20]
 8112d80:	891b      	ldrh	r3, [r3, #8]
 8112d82:	2b00      	cmp	r3, #0
 8112d84:	d106      	bne.n	8112d94 <tcp_split_unsent_seg+0x94>
 8112d86:	4b7b      	ldr	r3, [pc, #492]	@ (8112f74 <tcp_split_unsent_seg+0x274>)
 8112d88:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8112d8c:	497e      	ldr	r1, [pc, #504]	@ (8112f88 <tcp_split_unsent_seg+0x288>)
 8112d8e:	487b      	ldr	r0, [pc, #492]	@ (8112f7c <tcp_split_unsent_seg+0x27c>)
 8112d90:	f004 fb52 	bl	8117438 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8112d94:	697b      	ldr	r3, [r7, #20]
 8112d96:	7a9b      	ldrb	r3, [r3, #10]
 8112d98:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8112d9a:	7bfb      	ldrb	r3, [r7, #15]
 8112d9c:	009b      	lsls	r3, r3, #2
 8112d9e:	b2db      	uxtb	r3, r3
 8112da0:	f003 0304 	and.w	r3, r3, #4
 8112da4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8112da6:	697b      	ldr	r3, [r7, #20]
 8112da8:	891a      	ldrh	r2, [r3, #8]
 8112daa:	887b      	ldrh	r3, [r7, #2]
 8112dac:	1ad3      	subs	r3, r2, r3
 8112dae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8112db0:	7bbb      	ldrb	r3, [r7, #14]
 8112db2:	b29a      	uxth	r2, r3
 8112db4:	89bb      	ldrh	r3, [r7, #12]
 8112db6:	4413      	add	r3, r2
 8112db8:	b29b      	uxth	r3, r3
 8112dba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8112dbe:	4619      	mov	r1, r3
 8112dc0:	2036      	movs	r0, #54	@ 0x36
 8112dc2:	f7fa fcdd 	bl	810d780 <pbuf_alloc>
 8112dc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8112dc8:	693b      	ldr	r3, [r7, #16]
 8112dca:	2b00      	cmp	r3, #0
 8112dcc:	f000 80b7 	beq.w	8112f3e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8112dd0:	697b      	ldr	r3, [r7, #20]
 8112dd2:	685b      	ldr	r3, [r3, #4]
 8112dd4:	891a      	ldrh	r2, [r3, #8]
 8112dd6:	697b      	ldr	r3, [r7, #20]
 8112dd8:	891b      	ldrh	r3, [r3, #8]
 8112dda:	1ad3      	subs	r3, r2, r3
 8112ddc:	b29a      	uxth	r2, r3
 8112dde:	887b      	ldrh	r3, [r7, #2]
 8112de0:	4413      	add	r3, r2
 8112de2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8112de4:	697b      	ldr	r3, [r7, #20]
 8112de6:	6858      	ldr	r0, [r3, #4]
 8112de8:	693b      	ldr	r3, [r7, #16]
 8112dea:	685a      	ldr	r2, [r3, #4]
 8112dec:	7bbb      	ldrb	r3, [r7, #14]
 8112dee:	18d1      	adds	r1, r2, r3
 8112df0:	897b      	ldrh	r3, [r7, #10]
 8112df2:	89ba      	ldrh	r2, [r7, #12]
 8112df4:	f7fb f992 	bl	810e11c <pbuf_copy_partial>
 8112df8:	4603      	mov	r3, r0
 8112dfa:	461a      	mov	r2, r3
 8112dfc:	89bb      	ldrh	r3, [r7, #12]
 8112dfe:	4293      	cmp	r3, r2
 8112e00:	f040 809f 	bne.w	8112f42 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8112e04:	697b      	ldr	r3, [r7, #20]
 8112e06:	68db      	ldr	r3, [r3, #12]
 8112e08:	899b      	ldrh	r3, [r3, #12]
 8112e0a:	b29b      	uxth	r3, r3
 8112e0c:	4618      	mov	r0, r3
 8112e0e:	f7f7 f897 	bl	8109f40 <lwip_htons>
 8112e12:	4603      	mov	r3, r0
 8112e14:	b2db      	uxtb	r3, r3
 8112e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8112e1a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8112e1c:	2300      	movs	r3, #0
 8112e1e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8112e20:	7efb      	ldrb	r3, [r7, #27]
 8112e22:	f003 0308 	and.w	r3, r3, #8
 8112e26:	2b00      	cmp	r3, #0
 8112e28:	d007      	beq.n	8112e3a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8112e2a:	7efb      	ldrb	r3, [r7, #27]
 8112e2c:	f023 0308 	bic.w	r3, r3, #8
 8112e30:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8112e32:	7ebb      	ldrb	r3, [r7, #26]
 8112e34:	f043 0308 	orr.w	r3, r3, #8
 8112e38:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8112e3a:	7efb      	ldrb	r3, [r7, #27]
 8112e3c:	f003 0301 	and.w	r3, r3, #1
 8112e40:	2b00      	cmp	r3, #0
 8112e42:	d007      	beq.n	8112e54 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8112e44:	7efb      	ldrb	r3, [r7, #27]
 8112e46:	f023 0301 	bic.w	r3, r3, #1
 8112e4a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8112e4c:	7ebb      	ldrb	r3, [r7, #26]
 8112e4e:	f043 0301 	orr.w	r3, r3, #1
 8112e52:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8112e54:	697b      	ldr	r3, [r7, #20]
 8112e56:	68db      	ldr	r3, [r3, #12]
 8112e58:	685b      	ldr	r3, [r3, #4]
 8112e5a:	4618      	mov	r0, r3
 8112e5c:	f7f7 f886 	bl	8109f6c <lwip_htonl>
 8112e60:	4602      	mov	r2, r0
 8112e62:	887b      	ldrh	r3, [r7, #2]
 8112e64:	18d1      	adds	r1, r2, r3
 8112e66:	7eba      	ldrb	r2, [r7, #26]
 8112e68:	7bfb      	ldrb	r3, [r7, #15]
 8112e6a:	9300      	str	r3, [sp, #0]
 8112e6c:	460b      	mov	r3, r1
 8112e6e:	6939      	ldr	r1, [r7, #16]
 8112e70:	6878      	ldr	r0, [r7, #4]
 8112e72:	f7ff fa51 	bl	8112318 <tcp_create_segment>
 8112e76:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8112e78:	69fb      	ldr	r3, [r7, #28]
 8112e7a:	2b00      	cmp	r3, #0
 8112e7c:	d063      	beq.n	8112f46 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8112e7e:	697b      	ldr	r3, [r7, #20]
 8112e80:	685b      	ldr	r3, [r3, #4]
 8112e82:	4618      	mov	r0, r3
 8112e84:	f7fa ffe8 	bl	810de58 <pbuf_clen>
 8112e88:	4603      	mov	r3, r0
 8112e8a:	461a      	mov	r2, r3
 8112e8c:	687b      	ldr	r3, [r7, #4]
 8112e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8112e92:	1a9b      	subs	r3, r3, r2
 8112e94:	b29a      	uxth	r2, r3
 8112e96:	687b      	ldr	r3, [r7, #4]
 8112e98:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8112e9c:	697b      	ldr	r3, [r7, #20]
 8112e9e:	6858      	ldr	r0, [r3, #4]
 8112ea0:	697b      	ldr	r3, [r7, #20]
 8112ea2:	685b      	ldr	r3, [r3, #4]
 8112ea4:	891a      	ldrh	r2, [r3, #8]
 8112ea6:	89bb      	ldrh	r3, [r7, #12]
 8112ea8:	1ad3      	subs	r3, r2, r3
 8112eaa:	b29b      	uxth	r3, r3
 8112eac:	4619      	mov	r1, r3
 8112eae:	f7fa fdc5 	bl	810da3c <pbuf_realloc>
  useg->len -= remainder;
 8112eb2:	697b      	ldr	r3, [r7, #20]
 8112eb4:	891a      	ldrh	r2, [r3, #8]
 8112eb6:	89bb      	ldrh	r3, [r7, #12]
 8112eb8:	1ad3      	subs	r3, r2, r3
 8112eba:	b29a      	uxth	r2, r3
 8112ebc:	697b      	ldr	r3, [r7, #20]
 8112ebe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8112ec0:	697b      	ldr	r3, [r7, #20]
 8112ec2:	68db      	ldr	r3, [r3, #12]
 8112ec4:	899b      	ldrh	r3, [r3, #12]
 8112ec6:	b29c      	uxth	r4, r3
 8112ec8:	7efb      	ldrb	r3, [r7, #27]
 8112eca:	b29b      	uxth	r3, r3
 8112ecc:	4618      	mov	r0, r3
 8112ece:	f7f7 f837 	bl	8109f40 <lwip_htons>
 8112ed2:	4603      	mov	r3, r0
 8112ed4:	461a      	mov	r2, r3
 8112ed6:	697b      	ldr	r3, [r7, #20]
 8112ed8:	68db      	ldr	r3, [r3, #12]
 8112eda:	4322      	orrs	r2, r4
 8112edc:	b292      	uxth	r2, r2
 8112ede:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8112ee0:	697b      	ldr	r3, [r7, #20]
 8112ee2:	685b      	ldr	r3, [r3, #4]
 8112ee4:	4618      	mov	r0, r3
 8112ee6:	f7fa ffb7 	bl	810de58 <pbuf_clen>
 8112eea:	4603      	mov	r3, r0
 8112eec:	461a      	mov	r2, r3
 8112eee:	687b      	ldr	r3, [r7, #4]
 8112ef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8112ef4:	4413      	add	r3, r2
 8112ef6:	b29a      	uxth	r2, r3
 8112ef8:	687b      	ldr	r3, [r7, #4]
 8112efa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8112efe:	69fb      	ldr	r3, [r7, #28]
 8112f00:	685b      	ldr	r3, [r3, #4]
 8112f02:	4618      	mov	r0, r3
 8112f04:	f7fa ffa8 	bl	810de58 <pbuf_clen>
 8112f08:	4603      	mov	r3, r0
 8112f0a:	461a      	mov	r2, r3
 8112f0c:	687b      	ldr	r3, [r7, #4]
 8112f0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8112f12:	4413      	add	r3, r2
 8112f14:	b29a      	uxth	r2, r3
 8112f16:	687b      	ldr	r3, [r7, #4]
 8112f18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8112f1c:	697b      	ldr	r3, [r7, #20]
 8112f1e:	681a      	ldr	r2, [r3, #0]
 8112f20:	69fb      	ldr	r3, [r7, #28]
 8112f22:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8112f24:	697b      	ldr	r3, [r7, #20]
 8112f26:	69fa      	ldr	r2, [r7, #28]
 8112f28:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8112f2a:	69fb      	ldr	r3, [r7, #28]
 8112f2c:	681b      	ldr	r3, [r3, #0]
 8112f2e:	2b00      	cmp	r3, #0
 8112f30:	d103      	bne.n	8112f3a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8112f32:	687b      	ldr	r3, [r7, #4]
 8112f34:	2200      	movs	r2, #0
 8112f36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8112f3a:	2300      	movs	r3, #0
 8112f3c:	e016      	b.n	8112f6c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8112f3e:	bf00      	nop
 8112f40:	e002      	b.n	8112f48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8112f42:	bf00      	nop
 8112f44:	e000      	b.n	8112f48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8112f46:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8112f48:	69fb      	ldr	r3, [r7, #28]
 8112f4a:	2b00      	cmp	r3, #0
 8112f4c:	d006      	beq.n	8112f5c <tcp_split_unsent_seg+0x25c>
 8112f4e:	4b09      	ldr	r3, [pc, #36]	@ (8112f74 <tcp_split_unsent_seg+0x274>)
 8112f50:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8112f54:	490d      	ldr	r1, [pc, #52]	@ (8112f8c <tcp_split_unsent_seg+0x28c>)
 8112f56:	4809      	ldr	r0, [pc, #36]	@ (8112f7c <tcp_split_unsent_seg+0x27c>)
 8112f58:	f004 fa6e 	bl	8117438 <iprintf>
  if (p != NULL) {
 8112f5c:	693b      	ldr	r3, [r7, #16]
 8112f5e:	2b00      	cmp	r3, #0
 8112f60:	d002      	beq.n	8112f68 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8112f62:	6938      	ldr	r0, [r7, #16]
 8112f64:	f7fa fef0 	bl	810dd48 <pbuf_free>
  }

  return ERR_MEM;
 8112f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8112f6c:	4618      	mov	r0, r3
 8112f6e:	3724      	adds	r7, #36	@ 0x24
 8112f70:	46bd      	mov	sp, r7
 8112f72:	bd90      	pop	{r4, r7, pc}
 8112f74:	0811e220 	.word	0x0811e220
 8112f78:	0811e5e4 	.word	0x0811e5e4
 8112f7c:	0811e2a4 	.word	0x0811e2a4
 8112f80:	0811e608 	.word	0x0811e608
 8112f84:	0811e62c 	.word	0x0811e62c
 8112f88:	0811e63c 	.word	0x0811e63c
 8112f8c:	0811e64c 	.word	0x0811e64c

08112f90 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8112f90:	b590      	push	{r4, r7, lr}
 8112f92:	b085      	sub	sp, #20
 8112f94:	af00      	add	r7, sp, #0
 8112f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8112f98:	687b      	ldr	r3, [r7, #4]
 8112f9a:	2b00      	cmp	r3, #0
 8112f9c:	d106      	bne.n	8112fac <tcp_send_fin+0x1c>
 8112f9e:	4b21      	ldr	r3, [pc, #132]	@ (8113024 <tcp_send_fin+0x94>)
 8112fa0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8112fa4:	4920      	ldr	r1, [pc, #128]	@ (8113028 <tcp_send_fin+0x98>)
 8112fa6:	4821      	ldr	r0, [pc, #132]	@ (811302c <tcp_send_fin+0x9c>)
 8112fa8:	f004 fa46 	bl	8117438 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8112fac:	687b      	ldr	r3, [r7, #4]
 8112fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112fb0:	2b00      	cmp	r3, #0
 8112fb2:	d02e      	beq.n	8113012 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8112fb4:	687b      	ldr	r3, [r7, #4]
 8112fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112fb8:	60fb      	str	r3, [r7, #12]
 8112fba:	e002      	b.n	8112fc2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8112fbc:	68fb      	ldr	r3, [r7, #12]
 8112fbe:	681b      	ldr	r3, [r3, #0]
 8112fc0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8112fc2:	68fb      	ldr	r3, [r7, #12]
 8112fc4:	681b      	ldr	r3, [r3, #0]
 8112fc6:	2b00      	cmp	r3, #0
 8112fc8:	d1f8      	bne.n	8112fbc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8112fca:	68fb      	ldr	r3, [r7, #12]
 8112fcc:	68db      	ldr	r3, [r3, #12]
 8112fce:	899b      	ldrh	r3, [r3, #12]
 8112fd0:	b29b      	uxth	r3, r3
 8112fd2:	4618      	mov	r0, r3
 8112fd4:	f7f6 ffb4 	bl	8109f40 <lwip_htons>
 8112fd8:	4603      	mov	r3, r0
 8112fda:	b2db      	uxtb	r3, r3
 8112fdc:	f003 0307 	and.w	r3, r3, #7
 8112fe0:	2b00      	cmp	r3, #0
 8112fe2:	d116      	bne.n	8113012 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8112fe4:	68fb      	ldr	r3, [r7, #12]
 8112fe6:	68db      	ldr	r3, [r3, #12]
 8112fe8:	899b      	ldrh	r3, [r3, #12]
 8112fea:	b29c      	uxth	r4, r3
 8112fec:	2001      	movs	r0, #1
 8112fee:	f7f6 ffa7 	bl	8109f40 <lwip_htons>
 8112ff2:	4603      	mov	r3, r0
 8112ff4:	461a      	mov	r2, r3
 8112ff6:	68fb      	ldr	r3, [r7, #12]
 8112ff8:	68db      	ldr	r3, [r3, #12]
 8112ffa:	4322      	orrs	r2, r4
 8112ffc:	b292      	uxth	r2, r2
 8112ffe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8113000:	687b      	ldr	r3, [r7, #4]
 8113002:	8b5b      	ldrh	r3, [r3, #26]
 8113004:	f043 0320 	orr.w	r3, r3, #32
 8113008:	b29a      	uxth	r2, r3
 811300a:	687b      	ldr	r3, [r7, #4]
 811300c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 811300e:	2300      	movs	r3, #0
 8113010:	e004      	b.n	811301c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8113012:	2101      	movs	r1, #1
 8113014:	6878      	ldr	r0, [r7, #4]
 8113016:	f000 f80b 	bl	8113030 <tcp_enqueue_flags>
 811301a:	4603      	mov	r3, r0
}
 811301c:	4618      	mov	r0, r3
 811301e:	3714      	adds	r7, #20
 8113020:	46bd      	mov	sp, r7
 8113022:	bd90      	pop	{r4, r7, pc}
 8113024:	0811e220 	.word	0x0811e220
 8113028:	0811e658 	.word	0x0811e658
 811302c:	0811e2a4 	.word	0x0811e2a4

08113030 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8113030:	b580      	push	{r7, lr}
 8113032:	b08a      	sub	sp, #40	@ 0x28
 8113034:	af02      	add	r7, sp, #8
 8113036:	6078      	str	r0, [r7, #4]
 8113038:	460b      	mov	r3, r1
 811303a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 811303c:	2300      	movs	r3, #0
 811303e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8113040:	2300      	movs	r3, #0
 8113042:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8113044:	78fb      	ldrb	r3, [r7, #3]
 8113046:	f003 0303 	and.w	r3, r3, #3
 811304a:	2b00      	cmp	r3, #0
 811304c:	d106      	bne.n	811305c <tcp_enqueue_flags+0x2c>
 811304e:	4b67      	ldr	r3, [pc, #412]	@ (81131ec <tcp_enqueue_flags+0x1bc>)
 8113050:	f240 4211 	movw	r2, #1041	@ 0x411
 8113054:	4966      	ldr	r1, [pc, #408]	@ (81131f0 <tcp_enqueue_flags+0x1c0>)
 8113056:	4867      	ldr	r0, [pc, #412]	@ (81131f4 <tcp_enqueue_flags+0x1c4>)
 8113058:	f004 f9ee 	bl	8117438 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 811305c:	687b      	ldr	r3, [r7, #4]
 811305e:	2b00      	cmp	r3, #0
 8113060:	d106      	bne.n	8113070 <tcp_enqueue_flags+0x40>
 8113062:	4b62      	ldr	r3, [pc, #392]	@ (81131ec <tcp_enqueue_flags+0x1bc>)
 8113064:	f240 4213 	movw	r2, #1043	@ 0x413
 8113068:	4963      	ldr	r1, [pc, #396]	@ (81131f8 <tcp_enqueue_flags+0x1c8>)
 811306a:	4862      	ldr	r0, [pc, #392]	@ (81131f4 <tcp_enqueue_flags+0x1c4>)
 811306c:	f004 f9e4 	bl	8117438 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8113070:	78fb      	ldrb	r3, [r7, #3]
 8113072:	f003 0302 	and.w	r3, r3, #2
 8113076:	2b00      	cmp	r3, #0
 8113078:	d001      	beq.n	811307e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 811307a:	2301      	movs	r3, #1
 811307c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811307e:	7ffb      	ldrb	r3, [r7, #31]
 8113080:	009b      	lsls	r3, r3, #2
 8113082:	b2db      	uxtb	r3, r3
 8113084:	f003 0304 	and.w	r3, r3, #4
 8113088:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 811308a:	7dfb      	ldrb	r3, [r7, #23]
 811308c:	b29b      	uxth	r3, r3
 811308e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8113092:	4619      	mov	r1, r3
 8113094:	2036      	movs	r0, #54	@ 0x36
 8113096:	f7fa fb73 	bl	810d780 <pbuf_alloc>
 811309a:	6138      	str	r0, [r7, #16]
 811309c:	693b      	ldr	r3, [r7, #16]
 811309e:	2b00      	cmp	r3, #0
 81130a0:	d109      	bne.n	81130b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81130a2:	687b      	ldr	r3, [r7, #4]
 81130a4:	8b5b      	ldrh	r3, [r3, #26]
 81130a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81130aa:	b29a      	uxth	r2, r3
 81130ac:	687b      	ldr	r3, [r7, #4]
 81130ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 81130b0:	f04f 33ff 	mov.w	r3, #4294967295
 81130b4:	e095      	b.n	81131e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 81130b6:	693b      	ldr	r3, [r7, #16]
 81130b8:	895a      	ldrh	r2, [r3, #10]
 81130ba:	7dfb      	ldrb	r3, [r7, #23]
 81130bc:	b29b      	uxth	r3, r3
 81130be:	429a      	cmp	r2, r3
 81130c0:	d206      	bcs.n	81130d0 <tcp_enqueue_flags+0xa0>
 81130c2:	4b4a      	ldr	r3, [pc, #296]	@ (81131ec <tcp_enqueue_flags+0x1bc>)
 81130c4:	f240 4239 	movw	r2, #1081	@ 0x439
 81130c8:	494c      	ldr	r1, [pc, #304]	@ (81131fc <tcp_enqueue_flags+0x1cc>)
 81130ca:	484a      	ldr	r0, [pc, #296]	@ (81131f4 <tcp_enqueue_flags+0x1c4>)
 81130cc:	f004 f9b4 	bl	8117438 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 81130d0:	687b      	ldr	r3, [r7, #4]
 81130d2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 81130d4:	78fa      	ldrb	r2, [r7, #3]
 81130d6:	7ffb      	ldrb	r3, [r7, #31]
 81130d8:	9300      	str	r3, [sp, #0]
 81130da:	460b      	mov	r3, r1
 81130dc:	6939      	ldr	r1, [r7, #16]
 81130de:	6878      	ldr	r0, [r7, #4]
 81130e0:	f7ff f91a 	bl	8112318 <tcp_create_segment>
 81130e4:	60f8      	str	r0, [r7, #12]
 81130e6:	68fb      	ldr	r3, [r7, #12]
 81130e8:	2b00      	cmp	r3, #0
 81130ea:	d109      	bne.n	8113100 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81130ec:	687b      	ldr	r3, [r7, #4]
 81130ee:	8b5b      	ldrh	r3, [r3, #26]
 81130f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81130f4:	b29a      	uxth	r2, r3
 81130f6:	687b      	ldr	r3, [r7, #4]
 81130f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 81130fa:	f04f 33ff 	mov.w	r3, #4294967295
 81130fe:	e070      	b.n	81131e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8113100:	68fb      	ldr	r3, [r7, #12]
 8113102:	68db      	ldr	r3, [r3, #12]
 8113104:	f003 0303 	and.w	r3, r3, #3
 8113108:	2b00      	cmp	r3, #0
 811310a:	d006      	beq.n	811311a <tcp_enqueue_flags+0xea>
 811310c:	4b37      	ldr	r3, [pc, #220]	@ (81131ec <tcp_enqueue_flags+0x1bc>)
 811310e:	f240 4242 	movw	r2, #1090	@ 0x442
 8113112:	493b      	ldr	r1, [pc, #236]	@ (8113200 <tcp_enqueue_flags+0x1d0>)
 8113114:	4837      	ldr	r0, [pc, #220]	@ (81131f4 <tcp_enqueue_flags+0x1c4>)
 8113116:	f004 f98f 	bl	8117438 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 811311a:	68fb      	ldr	r3, [r7, #12]
 811311c:	891b      	ldrh	r3, [r3, #8]
 811311e:	2b00      	cmp	r3, #0
 8113120:	d006      	beq.n	8113130 <tcp_enqueue_flags+0x100>
 8113122:	4b32      	ldr	r3, [pc, #200]	@ (81131ec <tcp_enqueue_flags+0x1bc>)
 8113124:	f240 4243 	movw	r2, #1091	@ 0x443
 8113128:	4936      	ldr	r1, [pc, #216]	@ (8113204 <tcp_enqueue_flags+0x1d4>)
 811312a:	4832      	ldr	r0, [pc, #200]	@ (81131f4 <tcp_enqueue_flags+0x1c4>)
 811312c:	f004 f984 	bl	8117438 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8113130:	687b      	ldr	r3, [r7, #4]
 8113132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113134:	2b00      	cmp	r3, #0
 8113136:	d103      	bne.n	8113140 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8113138:	687b      	ldr	r3, [r7, #4]
 811313a:	68fa      	ldr	r2, [r7, #12]
 811313c:	66da      	str	r2, [r3, #108]	@ 0x6c
 811313e:	e00d      	b.n	811315c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8113140:	687b      	ldr	r3, [r7, #4]
 8113142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113144:	61bb      	str	r3, [r7, #24]
 8113146:	e002      	b.n	811314e <tcp_enqueue_flags+0x11e>
 8113148:	69bb      	ldr	r3, [r7, #24]
 811314a:	681b      	ldr	r3, [r3, #0]
 811314c:	61bb      	str	r3, [r7, #24]
 811314e:	69bb      	ldr	r3, [r7, #24]
 8113150:	681b      	ldr	r3, [r3, #0]
 8113152:	2b00      	cmp	r3, #0
 8113154:	d1f8      	bne.n	8113148 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8113156:	69bb      	ldr	r3, [r7, #24]
 8113158:	68fa      	ldr	r2, [r7, #12]
 811315a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 811315c:	687b      	ldr	r3, [r7, #4]
 811315e:	2200      	movs	r2, #0
 8113160:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8113164:	78fb      	ldrb	r3, [r7, #3]
 8113166:	f003 0302 	and.w	r3, r3, #2
 811316a:	2b00      	cmp	r3, #0
 811316c:	d104      	bne.n	8113178 <tcp_enqueue_flags+0x148>
 811316e:	78fb      	ldrb	r3, [r7, #3]
 8113170:	f003 0301 	and.w	r3, r3, #1
 8113174:	2b00      	cmp	r3, #0
 8113176:	d004      	beq.n	8113182 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8113178:	687b      	ldr	r3, [r7, #4]
 811317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 811317c:	1c5a      	adds	r2, r3, #1
 811317e:	687b      	ldr	r3, [r7, #4]
 8113180:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8113182:	78fb      	ldrb	r3, [r7, #3]
 8113184:	f003 0301 	and.w	r3, r3, #1
 8113188:	2b00      	cmp	r3, #0
 811318a:	d006      	beq.n	811319a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 811318c:	687b      	ldr	r3, [r7, #4]
 811318e:	8b5b      	ldrh	r3, [r3, #26]
 8113190:	f043 0320 	orr.w	r3, r3, #32
 8113194:	b29a      	uxth	r2, r3
 8113196:	687b      	ldr	r3, [r7, #4]
 8113198:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 811319a:	68fb      	ldr	r3, [r7, #12]
 811319c:	685b      	ldr	r3, [r3, #4]
 811319e:	4618      	mov	r0, r3
 81131a0:	f7fa fe5a 	bl	810de58 <pbuf_clen>
 81131a4:	4603      	mov	r3, r0
 81131a6:	461a      	mov	r2, r3
 81131a8:	687b      	ldr	r3, [r7, #4]
 81131aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81131ae:	4413      	add	r3, r2
 81131b0:	b29a      	uxth	r2, r3
 81131b2:	687b      	ldr	r3, [r7, #4]
 81131b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 81131b8:	687b      	ldr	r3, [r7, #4]
 81131ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81131be:	2b00      	cmp	r3, #0
 81131c0:	d00e      	beq.n	81131e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 81131c2:	687b      	ldr	r3, [r7, #4]
 81131c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81131c6:	2b00      	cmp	r3, #0
 81131c8:	d10a      	bne.n	81131e0 <tcp_enqueue_flags+0x1b0>
 81131ca:	687b      	ldr	r3, [r7, #4]
 81131cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81131ce:	2b00      	cmp	r3, #0
 81131d0:	d106      	bne.n	81131e0 <tcp_enqueue_flags+0x1b0>
 81131d2:	4b06      	ldr	r3, [pc, #24]	@ (81131ec <tcp_enqueue_flags+0x1bc>)
 81131d4:	f240 4265 	movw	r2, #1125	@ 0x465
 81131d8:	490b      	ldr	r1, [pc, #44]	@ (8113208 <tcp_enqueue_flags+0x1d8>)
 81131da:	4806      	ldr	r0, [pc, #24]	@ (81131f4 <tcp_enqueue_flags+0x1c4>)
 81131dc:	f004 f92c 	bl	8117438 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 81131e0:	2300      	movs	r3, #0
}
 81131e2:	4618      	mov	r0, r3
 81131e4:	3720      	adds	r7, #32
 81131e6:	46bd      	mov	sp, r7
 81131e8:	bd80      	pop	{r7, pc}
 81131ea:	bf00      	nop
 81131ec:	0811e220 	.word	0x0811e220
 81131f0:	0811e674 	.word	0x0811e674
 81131f4:	0811e2a4 	.word	0x0811e2a4
 81131f8:	0811e6cc 	.word	0x0811e6cc
 81131fc:	0811e6ec 	.word	0x0811e6ec
 8113200:	0811e728 	.word	0x0811e728
 8113204:	0811e740 	.word	0x0811e740
 8113208:	0811e76c 	.word	0x0811e76c

0811320c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 811320c:	b5b0      	push	{r4, r5, r7, lr}
 811320e:	b08a      	sub	sp, #40	@ 0x28
 8113210:	af00      	add	r7, sp, #0
 8113212:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8113214:	687b      	ldr	r3, [r7, #4]
 8113216:	2b00      	cmp	r3, #0
 8113218:	d106      	bne.n	8113228 <tcp_output+0x1c>
 811321a:	4b8a      	ldr	r3, [pc, #552]	@ (8113444 <tcp_output+0x238>)
 811321c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8113220:	4989      	ldr	r1, [pc, #548]	@ (8113448 <tcp_output+0x23c>)
 8113222:	488a      	ldr	r0, [pc, #552]	@ (811344c <tcp_output+0x240>)
 8113224:	f004 f908 	bl	8117438 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8113228:	687b      	ldr	r3, [r7, #4]
 811322a:	7d1b      	ldrb	r3, [r3, #20]
 811322c:	2b01      	cmp	r3, #1
 811322e:	d106      	bne.n	811323e <tcp_output+0x32>
 8113230:	4b84      	ldr	r3, [pc, #528]	@ (8113444 <tcp_output+0x238>)
 8113232:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8113236:	4986      	ldr	r1, [pc, #536]	@ (8113450 <tcp_output+0x244>)
 8113238:	4884      	ldr	r0, [pc, #528]	@ (811344c <tcp_output+0x240>)
 811323a:	f004 f8fd 	bl	8117438 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 811323e:	4b85      	ldr	r3, [pc, #532]	@ (8113454 <tcp_output+0x248>)
 8113240:	681b      	ldr	r3, [r3, #0]
 8113242:	687a      	ldr	r2, [r7, #4]
 8113244:	429a      	cmp	r2, r3
 8113246:	d101      	bne.n	811324c <tcp_output+0x40>
    return ERR_OK;
 8113248:	2300      	movs	r3, #0
 811324a:	e1ce      	b.n	81135ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 811324c:	687b      	ldr	r3, [r7, #4]
 811324e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8113252:	687b      	ldr	r3, [r7, #4]
 8113254:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8113258:	4293      	cmp	r3, r2
 811325a:	bf28      	it	cs
 811325c:	4613      	movcs	r3, r2
 811325e:	b29b      	uxth	r3, r3
 8113260:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8113262:	687b      	ldr	r3, [r7, #4]
 8113264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113266:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8113268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811326a:	2b00      	cmp	r3, #0
 811326c:	d10b      	bne.n	8113286 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 811326e:	687b      	ldr	r3, [r7, #4]
 8113270:	8b5b      	ldrh	r3, [r3, #26]
 8113272:	f003 0302 	and.w	r3, r3, #2
 8113276:	2b00      	cmp	r3, #0
 8113278:	f000 81aa 	beq.w	81135d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 811327c:	6878      	ldr	r0, [r7, #4]
 811327e:	f000 fdcb 	bl	8113e18 <tcp_send_empty_ack>
 8113282:	4603      	mov	r3, r0
 8113284:	e1b1      	b.n	81135ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8113286:	6879      	ldr	r1, [r7, #4]
 8113288:	687b      	ldr	r3, [r7, #4]
 811328a:	3304      	adds	r3, #4
 811328c:	461a      	mov	r2, r3
 811328e:	6878      	ldr	r0, [r7, #4]
 8113290:	f7ff f826 	bl	81122e0 <tcp_route>
 8113294:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8113296:	697b      	ldr	r3, [r7, #20]
 8113298:	2b00      	cmp	r3, #0
 811329a:	d102      	bne.n	81132a2 <tcp_output+0x96>
    return ERR_RTE;
 811329c:	f06f 0303 	mvn.w	r3, #3
 81132a0:	e1a3      	b.n	81135ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 81132a2:	687b      	ldr	r3, [r7, #4]
 81132a4:	2b00      	cmp	r3, #0
 81132a6:	d003      	beq.n	81132b0 <tcp_output+0xa4>
 81132a8:	687b      	ldr	r3, [r7, #4]
 81132aa:	681b      	ldr	r3, [r3, #0]
 81132ac:	2b00      	cmp	r3, #0
 81132ae:	d111      	bne.n	81132d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 81132b0:	697b      	ldr	r3, [r7, #20]
 81132b2:	2b00      	cmp	r3, #0
 81132b4:	d002      	beq.n	81132bc <tcp_output+0xb0>
 81132b6:	697b      	ldr	r3, [r7, #20]
 81132b8:	3304      	adds	r3, #4
 81132ba:	e000      	b.n	81132be <tcp_output+0xb2>
 81132bc:	2300      	movs	r3, #0
 81132be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 81132c0:	693b      	ldr	r3, [r7, #16]
 81132c2:	2b00      	cmp	r3, #0
 81132c4:	d102      	bne.n	81132cc <tcp_output+0xc0>
      return ERR_RTE;
 81132c6:	f06f 0303 	mvn.w	r3, #3
 81132ca:	e18e      	b.n	81135ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 81132cc:	693b      	ldr	r3, [r7, #16]
 81132ce:	681a      	ldr	r2, [r3, #0]
 81132d0:	687b      	ldr	r3, [r7, #4]
 81132d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 81132d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81132d6:	68db      	ldr	r3, [r3, #12]
 81132d8:	685b      	ldr	r3, [r3, #4]
 81132da:	4618      	mov	r0, r3
 81132dc:	f7f6 fe46 	bl	8109f6c <lwip_htonl>
 81132e0:	4602      	mov	r2, r0
 81132e2:	687b      	ldr	r3, [r7, #4]
 81132e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81132e6:	1ad3      	subs	r3, r2, r3
 81132e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81132ea:	8912      	ldrh	r2, [r2, #8]
 81132ec:	4413      	add	r3, r2
 81132ee:	69ba      	ldr	r2, [r7, #24]
 81132f0:	429a      	cmp	r2, r3
 81132f2:	d227      	bcs.n	8113344 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 81132f4:	687b      	ldr	r3, [r7, #4]
 81132f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81132fa:	461a      	mov	r2, r3
 81132fc:	69bb      	ldr	r3, [r7, #24]
 81132fe:	4293      	cmp	r3, r2
 8113300:	d114      	bne.n	811332c <tcp_output+0x120>
 8113302:	687b      	ldr	r3, [r7, #4]
 8113304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113306:	2b00      	cmp	r3, #0
 8113308:	d110      	bne.n	811332c <tcp_output+0x120>
 811330a:	687b      	ldr	r3, [r7, #4]
 811330c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8113310:	2b00      	cmp	r3, #0
 8113312:	d10b      	bne.n	811332c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8113314:	687b      	ldr	r3, [r7, #4]
 8113316:	2200      	movs	r2, #0
 8113318:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 811331c:	687b      	ldr	r3, [r7, #4]
 811331e:	2201      	movs	r2, #1
 8113320:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8113324:	687b      	ldr	r3, [r7, #4]
 8113326:	2200      	movs	r2, #0
 8113328:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 811332c:	687b      	ldr	r3, [r7, #4]
 811332e:	8b5b      	ldrh	r3, [r3, #26]
 8113330:	f003 0302 	and.w	r3, r3, #2
 8113334:	2b00      	cmp	r3, #0
 8113336:	f000 814d 	beq.w	81135d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 811333a:	6878      	ldr	r0, [r7, #4]
 811333c:	f000 fd6c 	bl	8113e18 <tcp_send_empty_ack>
 8113340:	4603      	mov	r3, r0
 8113342:	e152      	b.n	81135ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8113344:	687b      	ldr	r3, [r7, #4]
 8113346:	2200      	movs	r2, #0
 8113348:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 811334c:	687b      	ldr	r3, [r7, #4]
 811334e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113350:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8113352:	6a3b      	ldr	r3, [r7, #32]
 8113354:	2b00      	cmp	r3, #0
 8113356:	f000 811c 	beq.w	8113592 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 811335a:	e002      	b.n	8113362 <tcp_output+0x156>
 811335c:	6a3b      	ldr	r3, [r7, #32]
 811335e:	681b      	ldr	r3, [r3, #0]
 8113360:	623b      	str	r3, [r7, #32]
 8113362:	6a3b      	ldr	r3, [r7, #32]
 8113364:	681b      	ldr	r3, [r3, #0]
 8113366:	2b00      	cmp	r3, #0
 8113368:	d1f8      	bne.n	811335c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 811336a:	e112      	b.n	8113592 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 811336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811336e:	68db      	ldr	r3, [r3, #12]
 8113370:	899b      	ldrh	r3, [r3, #12]
 8113372:	b29b      	uxth	r3, r3
 8113374:	4618      	mov	r0, r3
 8113376:	f7f6 fde3 	bl	8109f40 <lwip_htons>
 811337a:	4603      	mov	r3, r0
 811337c:	b2db      	uxtb	r3, r3
 811337e:	f003 0304 	and.w	r3, r3, #4
 8113382:	2b00      	cmp	r3, #0
 8113384:	d006      	beq.n	8113394 <tcp_output+0x188>
 8113386:	4b2f      	ldr	r3, [pc, #188]	@ (8113444 <tcp_output+0x238>)
 8113388:	f240 5236 	movw	r2, #1334	@ 0x536
 811338c:	4932      	ldr	r1, [pc, #200]	@ (8113458 <tcp_output+0x24c>)
 811338e:	482f      	ldr	r0, [pc, #188]	@ (811344c <tcp_output+0x240>)
 8113390:	f004 f852 	bl	8117438 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8113394:	687b      	ldr	r3, [r7, #4]
 8113396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113398:	2b00      	cmp	r3, #0
 811339a:	d01f      	beq.n	81133dc <tcp_output+0x1d0>
 811339c:	687b      	ldr	r3, [r7, #4]
 811339e:	8b5b      	ldrh	r3, [r3, #26]
 81133a0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 81133a4:	2b00      	cmp	r3, #0
 81133a6:	d119      	bne.n	81133dc <tcp_output+0x1d0>
 81133a8:	687b      	ldr	r3, [r7, #4]
 81133aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81133ac:	2b00      	cmp	r3, #0
 81133ae:	d00b      	beq.n	81133c8 <tcp_output+0x1bc>
 81133b0:	687b      	ldr	r3, [r7, #4]
 81133b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81133b4:	681b      	ldr	r3, [r3, #0]
 81133b6:	2b00      	cmp	r3, #0
 81133b8:	d110      	bne.n	81133dc <tcp_output+0x1d0>
 81133ba:	687b      	ldr	r3, [r7, #4]
 81133bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81133be:	891a      	ldrh	r2, [r3, #8]
 81133c0:	687b      	ldr	r3, [r7, #4]
 81133c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81133c4:	429a      	cmp	r2, r3
 81133c6:	d209      	bcs.n	81133dc <tcp_output+0x1d0>
 81133c8:	687b      	ldr	r3, [r7, #4]
 81133ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 81133ce:	2b00      	cmp	r3, #0
 81133d0:	d004      	beq.n	81133dc <tcp_output+0x1d0>
 81133d2:	687b      	ldr	r3, [r7, #4]
 81133d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81133d8:	2b08      	cmp	r3, #8
 81133da:	d901      	bls.n	81133e0 <tcp_output+0x1d4>
 81133dc:	2301      	movs	r3, #1
 81133de:	e000      	b.n	81133e2 <tcp_output+0x1d6>
 81133e0:	2300      	movs	r3, #0
 81133e2:	2b00      	cmp	r3, #0
 81133e4:	d106      	bne.n	81133f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 81133e6:	687b      	ldr	r3, [r7, #4]
 81133e8:	8b5b      	ldrh	r3, [r3, #26]
 81133ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 81133ee:	2b00      	cmp	r3, #0
 81133f0:	f000 80e4 	beq.w	81135bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 81133f4:	687b      	ldr	r3, [r7, #4]
 81133f6:	7d1b      	ldrb	r3, [r3, #20]
 81133f8:	2b02      	cmp	r3, #2
 81133fa:	d00d      	beq.n	8113418 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 81133fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81133fe:	68db      	ldr	r3, [r3, #12]
 8113400:	899b      	ldrh	r3, [r3, #12]
 8113402:	b29c      	uxth	r4, r3
 8113404:	2010      	movs	r0, #16
 8113406:	f7f6 fd9b 	bl	8109f40 <lwip_htons>
 811340a:	4603      	mov	r3, r0
 811340c:	461a      	mov	r2, r3
 811340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113410:	68db      	ldr	r3, [r3, #12]
 8113412:	4322      	orrs	r2, r4
 8113414:	b292      	uxth	r2, r2
 8113416:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8113418:	697a      	ldr	r2, [r7, #20]
 811341a:	6879      	ldr	r1, [r7, #4]
 811341c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811341e:	f000 f909 	bl	8113634 <tcp_output_segment>
 8113422:	4603      	mov	r3, r0
 8113424:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8113426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811342a:	2b00      	cmp	r3, #0
 811342c:	d016      	beq.n	811345c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811342e:	687b      	ldr	r3, [r7, #4]
 8113430:	8b5b      	ldrh	r3, [r3, #26]
 8113432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8113436:	b29a      	uxth	r2, r3
 8113438:	687b      	ldr	r3, [r7, #4]
 811343a:	835a      	strh	r2, [r3, #26]
      return err;
 811343c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8113440:	e0d3      	b.n	81135ea <tcp_output+0x3de>
 8113442:	bf00      	nop
 8113444:	0811e220 	.word	0x0811e220
 8113448:	0811e794 	.word	0x0811e794
 811344c:	0811e2a4 	.word	0x0811e2a4
 8113450:	0811e7ac 	.word	0x0811e7ac
 8113454:	10017744 	.word	0x10017744
 8113458:	0811e7d4 	.word	0x0811e7d4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 811345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811345e:	681a      	ldr	r2, [r3, #0]
 8113460:	687b      	ldr	r3, [r7, #4]
 8113462:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8113464:	687b      	ldr	r3, [r7, #4]
 8113466:	7d1b      	ldrb	r3, [r3, #20]
 8113468:	2b02      	cmp	r3, #2
 811346a:	d006      	beq.n	811347a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811346c:	687b      	ldr	r3, [r7, #4]
 811346e:	8b5b      	ldrh	r3, [r3, #26]
 8113470:	f023 0303 	bic.w	r3, r3, #3
 8113474:	b29a      	uxth	r2, r3
 8113476:	687b      	ldr	r3, [r7, #4]
 8113478:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811347c:	68db      	ldr	r3, [r3, #12]
 811347e:	685b      	ldr	r3, [r3, #4]
 8113480:	4618      	mov	r0, r3
 8113482:	f7f6 fd73 	bl	8109f6c <lwip_htonl>
 8113486:	4604      	mov	r4, r0
 8113488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811348a:	891b      	ldrh	r3, [r3, #8]
 811348c:	461d      	mov	r5, r3
 811348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113490:	68db      	ldr	r3, [r3, #12]
 8113492:	899b      	ldrh	r3, [r3, #12]
 8113494:	b29b      	uxth	r3, r3
 8113496:	4618      	mov	r0, r3
 8113498:	f7f6 fd52 	bl	8109f40 <lwip_htons>
 811349c:	4603      	mov	r3, r0
 811349e:	b2db      	uxtb	r3, r3
 81134a0:	f003 0303 	and.w	r3, r3, #3
 81134a4:	2b00      	cmp	r3, #0
 81134a6:	d001      	beq.n	81134ac <tcp_output+0x2a0>
 81134a8:	2301      	movs	r3, #1
 81134aa:	e000      	b.n	81134ae <tcp_output+0x2a2>
 81134ac:	2300      	movs	r3, #0
 81134ae:	442b      	add	r3, r5
 81134b0:	4423      	add	r3, r4
 81134b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 81134b4:	687b      	ldr	r3, [r7, #4]
 81134b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81134b8:	68bb      	ldr	r3, [r7, #8]
 81134ba:	1ad3      	subs	r3, r2, r3
 81134bc:	2b00      	cmp	r3, #0
 81134be:	da02      	bge.n	81134c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 81134c0:	687b      	ldr	r3, [r7, #4]
 81134c2:	68ba      	ldr	r2, [r7, #8]
 81134c4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 81134c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81134c8:	891b      	ldrh	r3, [r3, #8]
 81134ca:	461c      	mov	r4, r3
 81134cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81134ce:	68db      	ldr	r3, [r3, #12]
 81134d0:	899b      	ldrh	r3, [r3, #12]
 81134d2:	b29b      	uxth	r3, r3
 81134d4:	4618      	mov	r0, r3
 81134d6:	f7f6 fd33 	bl	8109f40 <lwip_htons>
 81134da:	4603      	mov	r3, r0
 81134dc:	b2db      	uxtb	r3, r3
 81134de:	f003 0303 	and.w	r3, r3, #3
 81134e2:	2b00      	cmp	r3, #0
 81134e4:	d001      	beq.n	81134ea <tcp_output+0x2de>
 81134e6:	2301      	movs	r3, #1
 81134e8:	e000      	b.n	81134ec <tcp_output+0x2e0>
 81134ea:	2300      	movs	r3, #0
 81134ec:	4423      	add	r3, r4
 81134ee:	2b00      	cmp	r3, #0
 81134f0:	d049      	beq.n	8113586 <tcp_output+0x37a>
      seg->next = NULL;
 81134f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81134f4:	2200      	movs	r2, #0
 81134f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 81134f8:	687b      	ldr	r3, [r7, #4]
 81134fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81134fc:	2b00      	cmp	r3, #0
 81134fe:	d105      	bne.n	811350c <tcp_output+0x300>
        pcb->unacked = seg;
 8113500:	687b      	ldr	r3, [r7, #4]
 8113502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113504:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8113506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113508:	623b      	str	r3, [r7, #32]
 811350a:	e03f      	b.n	811358c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 811350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811350e:	68db      	ldr	r3, [r3, #12]
 8113510:	685b      	ldr	r3, [r3, #4]
 8113512:	4618      	mov	r0, r3
 8113514:	f7f6 fd2a 	bl	8109f6c <lwip_htonl>
 8113518:	4604      	mov	r4, r0
 811351a:	6a3b      	ldr	r3, [r7, #32]
 811351c:	68db      	ldr	r3, [r3, #12]
 811351e:	685b      	ldr	r3, [r3, #4]
 8113520:	4618      	mov	r0, r3
 8113522:	f7f6 fd23 	bl	8109f6c <lwip_htonl>
 8113526:	4603      	mov	r3, r0
 8113528:	1ae3      	subs	r3, r4, r3
 811352a:	2b00      	cmp	r3, #0
 811352c:	da24      	bge.n	8113578 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 811352e:	687b      	ldr	r3, [r7, #4]
 8113530:	3370      	adds	r3, #112	@ 0x70
 8113532:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8113534:	e002      	b.n	811353c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8113536:	69fb      	ldr	r3, [r7, #28]
 8113538:	681b      	ldr	r3, [r3, #0]
 811353a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811353c:	69fb      	ldr	r3, [r7, #28]
 811353e:	681b      	ldr	r3, [r3, #0]
 8113540:	2b00      	cmp	r3, #0
 8113542:	d011      	beq.n	8113568 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8113544:	69fb      	ldr	r3, [r7, #28]
 8113546:	681b      	ldr	r3, [r3, #0]
 8113548:	68db      	ldr	r3, [r3, #12]
 811354a:	685b      	ldr	r3, [r3, #4]
 811354c:	4618      	mov	r0, r3
 811354e:	f7f6 fd0d 	bl	8109f6c <lwip_htonl>
 8113552:	4604      	mov	r4, r0
 8113554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113556:	68db      	ldr	r3, [r3, #12]
 8113558:	685b      	ldr	r3, [r3, #4]
 811355a:	4618      	mov	r0, r3
 811355c:	f7f6 fd06 	bl	8109f6c <lwip_htonl>
 8113560:	4603      	mov	r3, r0
 8113562:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8113564:	2b00      	cmp	r3, #0
 8113566:	dbe6      	blt.n	8113536 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8113568:	69fb      	ldr	r3, [r7, #28]
 811356a:	681a      	ldr	r2, [r3, #0]
 811356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811356e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8113570:	69fb      	ldr	r3, [r7, #28]
 8113572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113574:	601a      	str	r2, [r3, #0]
 8113576:	e009      	b.n	811358c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8113578:	6a3b      	ldr	r3, [r7, #32]
 811357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811357c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 811357e:	6a3b      	ldr	r3, [r7, #32]
 8113580:	681b      	ldr	r3, [r3, #0]
 8113582:	623b      	str	r3, [r7, #32]
 8113584:	e002      	b.n	811358c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8113586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8113588:	f7fb ffb1 	bl	810f4ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 811358c:	687b      	ldr	r3, [r7, #4]
 811358e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113590:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8113592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113594:	2b00      	cmp	r3, #0
 8113596:	d012      	beq.n	81135be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8113598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811359a:	68db      	ldr	r3, [r3, #12]
 811359c:	685b      	ldr	r3, [r3, #4]
 811359e:	4618      	mov	r0, r3
 81135a0:	f7f6 fce4 	bl	8109f6c <lwip_htonl>
 81135a4:	4602      	mov	r2, r0
 81135a6:	687b      	ldr	r3, [r7, #4]
 81135a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81135aa:	1ad3      	subs	r3, r2, r3
 81135ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81135ae:	8912      	ldrh	r2, [r2, #8]
 81135b0:	4413      	add	r3, r2
  while (seg != NULL &&
 81135b2:	69ba      	ldr	r2, [r7, #24]
 81135b4:	429a      	cmp	r2, r3
 81135b6:	f4bf aed9 	bcs.w	811336c <tcp_output+0x160>
 81135ba:	e000      	b.n	81135be <tcp_output+0x3b2>
      break;
 81135bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 81135be:	687b      	ldr	r3, [r7, #4]
 81135c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81135c2:	2b00      	cmp	r3, #0
 81135c4:	d108      	bne.n	81135d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 81135c6:	687b      	ldr	r3, [r7, #4]
 81135c8:	2200      	movs	r2, #0
 81135ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 81135ce:	e004      	b.n	81135da <tcp_output+0x3ce>
    goto output_done;
 81135d0:	bf00      	nop
 81135d2:	e002      	b.n	81135da <tcp_output+0x3ce>
    goto output_done;
 81135d4:	bf00      	nop
 81135d6:	e000      	b.n	81135da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 81135d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 81135da:	687b      	ldr	r3, [r7, #4]
 81135dc:	8b5b      	ldrh	r3, [r3, #26]
 81135de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81135e2:	b29a      	uxth	r2, r3
 81135e4:	687b      	ldr	r3, [r7, #4]
 81135e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 81135e8:	2300      	movs	r3, #0
}
 81135ea:	4618      	mov	r0, r3
 81135ec:	3728      	adds	r7, #40	@ 0x28
 81135ee:	46bd      	mov	sp, r7
 81135f0:	bdb0      	pop	{r4, r5, r7, pc}
 81135f2:	bf00      	nop

081135f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 81135f4:	b580      	push	{r7, lr}
 81135f6:	b082      	sub	sp, #8
 81135f8:	af00      	add	r7, sp, #0
 81135fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 81135fc:	687b      	ldr	r3, [r7, #4]
 81135fe:	2b00      	cmp	r3, #0
 8113600:	d106      	bne.n	8113610 <tcp_output_segment_busy+0x1c>
 8113602:	4b09      	ldr	r3, [pc, #36]	@ (8113628 <tcp_output_segment_busy+0x34>)
 8113604:	f240 529a 	movw	r2, #1434	@ 0x59a
 8113608:	4908      	ldr	r1, [pc, #32]	@ (811362c <tcp_output_segment_busy+0x38>)
 811360a:	4809      	ldr	r0, [pc, #36]	@ (8113630 <tcp_output_segment_busy+0x3c>)
 811360c:	f003 ff14 	bl	8117438 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8113610:	687b      	ldr	r3, [r7, #4]
 8113612:	685b      	ldr	r3, [r3, #4]
 8113614:	7b9b      	ldrb	r3, [r3, #14]
 8113616:	2b01      	cmp	r3, #1
 8113618:	d001      	beq.n	811361e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 811361a:	2301      	movs	r3, #1
 811361c:	e000      	b.n	8113620 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 811361e:	2300      	movs	r3, #0
}
 8113620:	4618      	mov	r0, r3
 8113622:	3708      	adds	r7, #8
 8113624:	46bd      	mov	sp, r7
 8113626:	bd80      	pop	{r7, pc}
 8113628:	0811e220 	.word	0x0811e220
 811362c:	0811e7ec 	.word	0x0811e7ec
 8113630:	0811e2a4 	.word	0x0811e2a4

08113634 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8113634:	b5b0      	push	{r4, r5, r7, lr}
 8113636:	b08c      	sub	sp, #48	@ 0x30
 8113638:	af04      	add	r7, sp, #16
 811363a:	60f8      	str	r0, [r7, #12]
 811363c:	60b9      	str	r1, [r7, #8]
 811363e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8113640:	68fb      	ldr	r3, [r7, #12]
 8113642:	2b00      	cmp	r3, #0
 8113644:	d106      	bne.n	8113654 <tcp_output_segment+0x20>
 8113646:	4b64      	ldr	r3, [pc, #400]	@ (81137d8 <tcp_output_segment+0x1a4>)
 8113648:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 811364c:	4963      	ldr	r1, [pc, #396]	@ (81137dc <tcp_output_segment+0x1a8>)
 811364e:	4864      	ldr	r0, [pc, #400]	@ (81137e0 <tcp_output_segment+0x1ac>)
 8113650:	f003 fef2 	bl	8117438 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8113654:	68bb      	ldr	r3, [r7, #8]
 8113656:	2b00      	cmp	r3, #0
 8113658:	d106      	bne.n	8113668 <tcp_output_segment+0x34>
 811365a:	4b5f      	ldr	r3, [pc, #380]	@ (81137d8 <tcp_output_segment+0x1a4>)
 811365c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8113660:	4960      	ldr	r1, [pc, #384]	@ (81137e4 <tcp_output_segment+0x1b0>)
 8113662:	485f      	ldr	r0, [pc, #380]	@ (81137e0 <tcp_output_segment+0x1ac>)
 8113664:	f003 fee8 	bl	8117438 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8113668:	687b      	ldr	r3, [r7, #4]
 811366a:	2b00      	cmp	r3, #0
 811366c:	d106      	bne.n	811367c <tcp_output_segment+0x48>
 811366e:	4b5a      	ldr	r3, [pc, #360]	@ (81137d8 <tcp_output_segment+0x1a4>)
 8113670:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8113674:	495c      	ldr	r1, [pc, #368]	@ (81137e8 <tcp_output_segment+0x1b4>)
 8113676:	485a      	ldr	r0, [pc, #360]	@ (81137e0 <tcp_output_segment+0x1ac>)
 8113678:	f003 fede 	bl	8117438 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 811367c:	68f8      	ldr	r0, [r7, #12]
 811367e:	f7ff ffb9 	bl	81135f4 <tcp_output_segment_busy>
 8113682:	4603      	mov	r3, r0
 8113684:	2b00      	cmp	r3, #0
 8113686:	d001      	beq.n	811368c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8113688:	2300      	movs	r3, #0
 811368a:	e0a1      	b.n	81137d0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 811368c:	68bb      	ldr	r3, [r7, #8]
 811368e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8113690:	68fb      	ldr	r3, [r7, #12]
 8113692:	68dc      	ldr	r4, [r3, #12]
 8113694:	4610      	mov	r0, r2
 8113696:	f7f6 fc69 	bl	8109f6c <lwip_htonl>
 811369a:	4603      	mov	r3, r0
 811369c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 811369e:	68bb      	ldr	r3, [r7, #8]
 81136a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 81136a2:	68fb      	ldr	r3, [r7, #12]
 81136a4:	68dc      	ldr	r4, [r3, #12]
 81136a6:	4610      	mov	r0, r2
 81136a8:	f7f6 fc4a 	bl	8109f40 <lwip_htons>
 81136ac:	4603      	mov	r3, r0
 81136ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 81136b0:	68bb      	ldr	r3, [r7, #8]
 81136b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81136b4:	68ba      	ldr	r2, [r7, #8]
 81136b6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 81136b8:	441a      	add	r2, r3
 81136ba:	68bb      	ldr	r3, [r7, #8]
 81136bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 81136be:	68fb      	ldr	r3, [r7, #12]
 81136c0:	68db      	ldr	r3, [r3, #12]
 81136c2:	3314      	adds	r3, #20
 81136c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 81136c6:	68fb      	ldr	r3, [r7, #12]
 81136c8:	7a9b      	ldrb	r3, [r3, #10]
 81136ca:	f003 0301 	and.w	r3, r3, #1
 81136ce:	2b00      	cmp	r3, #0
 81136d0:	d015      	beq.n	81136fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 81136d2:	68bb      	ldr	r3, [r7, #8]
 81136d4:	3304      	adds	r3, #4
 81136d6:	461a      	mov	r2, r3
 81136d8:	6879      	ldr	r1, [r7, #4]
 81136da:	f44f 7006 	mov.w	r0, #536	@ 0x218
 81136de:	f7fc fa39 	bl	810fb54 <tcp_eff_send_mss_netif>
 81136e2:	4603      	mov	r3, r0
 81136e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 81136e6:	8b7b      	ldrh	r3, [r7, #26]
 81136e8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 81136ec:	4618      	mov	r0, r3
 81136ee:	f7f6 fc3d 	bl	8109f6c <lwip_htonl>
 81136f2:	4602      	mov	r2, r0
 81136f4:	69fb      	ldr	r3, [r7, #28]
 81136f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 81136f8:	69fb      	ldr	r3, [r7, #28]
 81136fa:	3304      	adds	r3, #4
 81136fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 81136fe:	68bb      	ldr	r3, [r7, #8]
 8113700:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8113704:	2b00      	cmp	r3, #0
 8113706:	da02      	bge.n	811370e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8113708:	68bb      	ldr	r3, [r7, #8]
 811370a:	2200      	movs	r2, #0
 811370c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 811370e:	68bb      	ldr	r3, [r7, #8]
 8113710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8113712:	2b00      	cmp	r3, #0
 8113714:	d10c      	bne.n	8113730 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8113716:	4b35      	ldr	r3, [pc, #212]	@ (81137ec <tcp_output_segment+0x1b8>)
 8113718:	681a      	ldr	r2, [r3, #0]
 811371a:	68bb      	ldr	r3, [r7, #8]
 811371c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 811371e:	68fb      	ldr	r3, [r7, #12]
 8113720:	68db      	ldr	r3, [r3, #12]
 8113722:	685b      	ldr	r3, [r3, #4]
 8113724:	4618      	mov	r0, r3
 8113726:	f7f6 fc21 	bl	8109f6c <lwip_htonl>
 811372a:	4602      	mov	r2, r0
 811372c:	68bb      	ldr	r3, [r7, #8]
 811372e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8113730:	68fb      	ldr	r3, [r7, #12]
 8113732:	68da      	ldr	r2, [r3, #12]
 8113734:	68fb      	ldr	r3, [r7, #12]
 8113736:	685b      	ldr	r3, [r3, #4]
 8113738:	685b      	ldr	r3, [r3, #4]
 811373a:	1ad3      	subs	r3, r2, r3
 811373c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 811373e:	68fb      	ldr	r3, [r7, #12]
 8113740:	685b      	ldr	r3, [r3, #4]
 8113742:	8959      	ldrh	r1, [r3, #10]
 8113744:	68fb      	ldr	r3, [r7, #12]
 8113746:	685b      	ldr	r3, [r3, #4]
 8113748:	8b3a      	ldrh	r2, [r7, #24]
 811374a:	1a8a      	subs	r2, r1, r2
 811374c:	b292      	uxth	r2, r2
 811374e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8113750:	68fb      	ldr	r3, [r7, #12]
 8113752:	685b      	ldr	r3, [r3, #4]
 8113754:	8919      	ldrh	r1, [r3, #8]
 8113756:	68fb      	ldr	r3, [r7, #12]
 8113758:	685b      	ldr	r3, [r3, #4]
 811375a:	8b3a      	ldrh	r2, [r7, #24]
 811375c:	1a8a      	subs	r2, r1, r2
 811375e:	b292      	uxth	r2, r2
 8113760:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8113762:	68fb      	ldr	r3, [r7, #12]
 8113764:	685b      	ldr	r3, [r3, #4]
 8113766:	68fa      	ldr	r2, [r7, #12]
 8113768:	68d2      	ldr	r2, [r2, #12]
 811376a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 811376c:	68fb      	ldr	r3, [r7, #12]
 811376e:	68db      	ldr	r3, [r3, #12]
 8113770:	2200      	movs	r2, #0
 8113772:	741a      	strb	r2, [r3, #16]
 8113774:	2200      	movs	r2, #0
 8113776:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8113778:	68fb      	ldr	r3, [r7, #12]
 811377a:	68da      	ldr	r2, [r3, #12]
 811377c:	68fb      	ldr	r3, [r7, #12]
 811377e:	7a9b      	ldrb	r3, [r3, #10]
 8113780:	f003 0301 	and.w	r3, r3, #1
 8113784:	2b00      	cmp	r3, #0
 8113786:	d001      	beq.n	811378c <tcp_output_segment+0x158>
 8113788:	2318      	movs	r3, #24
 811378a:	e000      	b.n	811378e <tcp_output_segment+0x15a>
 811378c:	2314      	movs	r3, #20
 811378e:	4413      	add	r3, r2
 8113790:	69fa      	ldr	r2, [r7, #28]
 8113792:	429a      	cmp	r2, r3
 8113794:	d006      	beq.n	81137a4 <tcp_output_segment+0x170>
 8113796:	4b10      	ldr	r3, [pc, #64]	@ (81137d8 <tcp_output_segment+0x1a4>)
 8113798:	f240 621c 	movw	r2, #1564	@ 0x61c
 811379c:	4914      	ldr	r1, [pc, #80]	@ (81137f0 <tcp_output_segment+0x1bc>)
 811379e:	4810      	ldr	r0, [pc, #64]	@ (81137e0 <tcp_output_segment+0x1ac>)
 81137a0:	f003 fe4a 	bl	8117438 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 81137a4:	68fb      	ldr	r3, [r7, #12]
 81137a6:	6858      	ldr	r0, [r3, #4]
 81137a8:	68b9      	ldr	r1, [r7, #8]
 81137aa:	68bb      	ldr	r3, [r7, #8]
 81137ac:	1d1c      	adds	r4, r3, #4
 81137ae:	68bb      	ldr	r3, [r7, #8]
 81137b0:	7add      	ldrb	r5, [r3, #11]
 81137b2:	68bb      	ldr	r3, [r7, #8]
 81137b4:	7a9b      	ldrb	r3, [r3, #10]
 81137b6:	687a      	ldr	r2, [r7, #4]
 81137b8:	9202      	str	r2, [sp, #8]
 81137ba:	2206      	movs	r2, #6
 81137bc:	9201      	str	r2, [sp, #4]
 81137be:	9300      	str	r3, [sp, #0]
 81137c0:	462b      	mov	r3, r5
 81137c2:	4622      	mov	r2, r4
 81137c4:	f7f8 f852 	bl	810b86c <ip4_output_if>
 81137c8:	4603      	mov	r3, r0
 81137ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 81137cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 81137d0:	4618      	mov	r0, r3
 81137d2:	3720      	adds	r7, #32
 81137d4:	46bd      	mov	sp, r7
 81137d6:	bdb0      	pop	{r4, r5, r7, pc}
 81137d8:	0811e220 	.word	0x0811e220
 81137dc:	0811e814 	.word	0x0811e814
 81137e0:	0811e2a4 	.word	0x0811e2a4
 81137e4:	0811e834 	.word	0x0811e834
 81137e8:	0811e854 	.word	0x0811e854
 81137ec:	100176f8 	.word	0x100176f8
 81137f0:	0811e878 	.word	0x0811e878

081137f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 81137f4:	b5b0      	push	{r4, r5, r7, lr}
 81137f6:	b084      	sub	sp, #16
 81137f8:	af00      	add	r7, sp, #0
 81137fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 81137fc:	687b      	ldr	r3, [r7, #4]
 81137fe:	2b00      	cmp	r3, #0
 8113800:	d106      	bne.n	8113810 <tcp_rexmit_rto_prepare+0x1c>
 8113802:	4b31      	ldr	r3, [pc, #196]	@ (81138c8 <tcp_rexmit_rto_prepare+0xd4>)
 8113804:	f240 6263 	movw	r2, #1635	@ 0x663
 8113808:	4930      	ldr	r1, [pc, #192]	@ (81138cc <tcp_rexmit_rto_prepare+0xd8>)
 811380a:	4831      	ldr	r0, [pc, #196]	@ (81138d0 <tcp_rexmit_rto_prepare+0xdc>)
 811380c:	f003 fe14 	bl	8117438 <iprintf>

  if (pcb->unacked == NULL) {
 8113810:	687b      	ldr	r3, [r7, #4]
 8113812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113814:	2b00      	cmp	r3, #0
 8113816:	d102      	bne.n	811381e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8113818:	f06f 0305 	mvn.w	r3, #5
 811381c:	e050      	b.n	81138c0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811381e:	687b      	ldr	r3, [r7, #4]
 8113820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113822:	60fb      	str	r3, [r7, #12]
 8113824:	e00b      	b.n	811383e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8113826:	68f8      	ldr	r0, [r7, #12]
 8113828:	f7ff fee4 	bl	81135f4 <tcp_output_segment_busy>
 811382c:	4603      	mov	r3, r0
 811382e:	2b00      	cmp	r3, #0
 8113830:	d002      	beq.n	8113838 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8113832:	f06f 0305 	mvn.w	r3, #5
 8113836:	e043      	b.n	81138c0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8113838:	68fb      	ldr	r3, [r7, #12]
 811383a:	681b      	ldr	r3, [r3, #0]
 811383c:	60fb      	str	r3, [r7, #12]
 811383e:	68fb      	ldr	r3, [r7, #12]
 8113840:	681b      	ldr	r3, [r3, #0]
 8113842:	2b00      	cmp	r3, #0
 8113844:	d1ef      	bne.n	8113826 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8113846:	68f8      	ldr	r0, [r7, #12]
 8113848:	f7ff fed4 	bl	81135f4 <tcp_output_segment_busy>
 811384c:	4603      	mov	r3, r0
 811384e:	2b00      	cmp	r3, #0
 8113850:	d002      	beq.n	8113858 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8113852:	f06f 0305 	mvn.w	r3, #5
 8113856:	e033      	b.n	81138c0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8113858:	687b      	ldr	r3, [r7, #4]
 811385a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811385c:	68fb      	ldr	r3, [r7, #12]
 811385e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8113860:	687b      	ldr	r3, [r7, #4]
 8113862:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8113864:	687b      	ldr	r3, [r7, #4]
 8113866:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8113868:	687b      	ldr	r3, [r7, #4]
 811386a:	2200      	movs	r2, #0
 811386c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 811386e:	687b      	ldr	r3, [r7, #4]
 8113870:	8b5b      	ldrh	r3, [r3, #26]
 8113872:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8113876:	b29a      	uxth	r2, r3
 8113878:	687b      	ldr	r3, [r7, #4]
 811387a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811387c:	68fb      	ldr	r3, [r7, #12]
 811387e:	68db      	ldr	r3, [r3, #12]
 8113880:	685b      	ldr	r3, [r3, #4]
 8113882:	4618      	mov	r0, r3
 8113884:	f7f6 fb72 	bl	8109f6c <lwip_htonl>
 8113888:	4604      	mov	r4, r0
 811388a:	68fb      	ldr	r3, [r7, #12]
 811388c:	891b      	ldrh	r3, [r3, #8]
 811388e:	461d      	mov	r5, r3
 8113890:	68fb      	ldr	r3, [r7, #12]
 8113892:	68db      	ldr	r3, [r3, #12]
 8113894:	899b      	ldrh	r3, [r3, #12]
 8113896:	b29b      	uxth	r3, r3
 8113898:	4618      	mov	r0, r3
 811389a:	f7f6 fb51 	bl	8109f40 <lwip_htons>
 811389e:	4603      	mov	r3, r0
 81138a0:	b2db      	uxtb	r3, r3
 81138a2:	f003 0303 	and.w	r3, r3, #3
 81138a6:	2b00      	cmp	r3, #0
 81138a8:	d001      	beq.n	81138ae <tcp_rexmit_rto_prepare+0xba>
 81138aa:	2301      	movs	r3, #1
 81138ac:	e000      	b.n	81138b0 <tcp_rexmit_rto_prepare+0xbc>
 81138ae:	2300      	movs	r3, #0
 81138b0:	442b      	add	r3, r5
 81138b2:	18e2      	adds	r2, r4, r3
 81138b4:	687b      	ldr	r3, [r7, #4]
 81138b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 81138b8:	687b      	ldr	r3, [r7, #4]
 81138ba:	2200      	movs	r2, #0
 81138bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 81138be:	2300      	movs	r3, #0
}
 81138c0:	4618      	mov	r0, r3
 81138c2:	3710      	adds	r7, #16
 81138c4:	46bd      	mov	sp, r7
 81138c6:	bdb0      	pop	{r4, r5, r7, pc}
 81138c8:	0811e220 	.word	0x0811e220
 81138cc:	0811e88c 	.word	0x0811e88c
 81138d0:	0811e2a4 	.word	0x0811e2a4

081138d4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 81138d4:	b580      	push	{r7, lr}
 81138d6:	b082      	sub	sp, #8
 81138d8:	af00      	add	r7, sp, #0
 81138da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 81138dc:	687b      	ldr	r3, [r7, #4]
 81138de:	2b00      	cmp	r3, #0
 81138e0:	d106      	bne.n	81138f0 <tcp_rexmit_rto_commit+0x1c>
 81138e2:	4b0d      	ldr	r3, [pc, #52]	@ (8113918 <tcp_rexmit_rto_commit+0x44>)
 81138e4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 81138e8:	490c      	ldr	r1, [pc, #48]	@ (811391c <tcp_rexmit_rto_commit+0x48>)
 81138ea:	480d      	ldr	r0, [pc, #52]	@ (8113920 <tcp_rexmit_rto_commit+0x4c>)
 81138ec:	f003 fda4 	bl	8117438 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 81138f0:	687b      	ldr	r3, [r7, #4]
 81138f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81138f6:	2bff      	cmp	r3, #255	@ 0xff
 81138f8:	d007      	beq.n	811390a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 81138fa:	687b      	ldr	r3, [r7, #4]
 81138fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8113900:	3301      	adds	r3, #1
 8113902:	b2da      	uxtb	r2, r3
 8113904:	687b      	ldr	r3, [r7, #4]
 8113906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 811390a:	6878      	ldr	r0, [r7, #4]
 811390c:	f7ff fc7e 	bl	811320c <tcp_output>
}
 8113910:	bf00      	nop
 8113912:	3708      	adds	r7, #8
 8113914:	46bd      	mov	sp, r7
 8113916:	bd80      	pop	{r7, pc}
 8113918:	0811e220 	.word	0x0811e220
 811391c:	0811e8b0 	.word	0x0811e8b0
 8113920:	0811e2a4 	.word	0x0811e2a4

08113924 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8113924:	b580      	push	{r7, lr}
 8113926:	b082      	sub	sp, #8
 8113928:	af00      	add	r7, sp, #0
 811392a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 811392c:	687b      	ldr	r3, [r7, #4]
 811392e:	2b00      	cmp	r3, #0
 8113930:	d106      	bne.n	8113940 <tcp_rexmit_rto+0x1c>
 8113932:	4b0a      	ldr	r3, [pc, #40]	@ (811395c <tcp_rexmit_rto+0x38>)
 8113934:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8113938:	4909      	ldr	r1, [pc, #36]	@ (8113960 <tcp_rexmit_rto+0x3c>)
 811393a:	480a      	ldr	r0, [pc, #40]	@ (8113964 <tcp_rexmit_rto+0x40>)
 811393c:	f003 fd7c 	bl	8117438 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8113940:	6878      	ldr	r0, [r7, #4]
 8113942:	f7ff ff57 	bl	81137f4 <tcp_rexmit_rto_prepare>
 8113946:	4603      	mov	r3, r0
 8113948:	2b00      	cmp	r3, #0
 811394a:	d102      	bne.n	8113952 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 811394c:	6878      	ldr	r0, [r7, #4]
 811394e:	f7ff ffc1 	bl	81138d4 <tcp_rexmit_rto_commit>
  }
}
 8113952:	bf00      	nop
 8113954:	3708      	adds	r7, #8
 8113956:	46bd      	mov	sp, r7
 8113958:	bd80      	pop	{r7, pc}
 811395a:	bf00      	nop
 811395c:	0811e220 	.word	0x0811e220
 8113960:	0811e8d4 	.word	0x0811e8d4
 8113964:	0811e2a4 	.word	0x0811e2a4

08113968 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8113968:	b590      	push	{r4, r7, lr}
 811396a:	b085      	sub	sp, #20
 811396c:	af00      	add	r7, sp, #0
 811396e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8113970:	687b      	ldr	r3, [r7, #4]
 8113972:	2b00      	cmp	r3, #0
 8113974:	d106      	bne.n	8113984 <tcp_rexmit+0x1c>
 8113976:	4b2f      	ldr	r3, [pc, #188]	@ (8113a34 <tcp_rexmit+0xcc>)
 8113978:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 811397c:	492e      	ldr	r1, [pc, #184]	@ (8113a38 <tcp_rexmit+0xd0>)
 811397e:	482f      	ldr	r0, [pc, #188]	@ (8113a3c <tcp_rexmit+0xd4>)
 8113980:	f003 fd5a 	bl	8117438 <iprintf>

  if (pcb->unacked == NULL) {
 8113984:	687b      	ldr	r3, [r7, #4]
 8113986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113988:	2b00      	cmp	r3, #0
 811398a:	d102      	bne.n	8113992 <tcp_rexmit+0x2a>
    return ERR_VAL;
 811398c:	f06f 0305 	mvn.w	r3, #5
 8113990:	e04c      	b.n	8113a2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8113992:	687b      	ldr	r3, [r7, #4]
 8113994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113996:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8113998:	68b8      	ldr	r0, [r7, #8]
 811399a:	f7ff fe2b 	bl	81135f4 <tcp_output_segment_busy>
 811399e:	4603      	mov	r3, r0
 81139a0:	2b00      	cmp	r3, #0
 81139a2:	d002      	beq.n	81139aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 81139a4:	f06f 0305 	mvn.w	r3, #5
 81139a8:	e040      	b.n	8113a2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 81139aa:	68bb      	ldr	r3, [r7, #8]
 81139ac:	681a      	ldr	r2, [r3, #0]
 81139ae:	687b      	ldr	r3, [r7, #4]
 81139b0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 81139b2:	687b      	ldr	r3, [r7, #4]
 81139b4:	336c      	adds	r3, #108	@ 0x6c
 81139b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 81139b8:	e002      	b.n	81139c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 81139ba:	68fb      	ldr	r3, [r7, #12]
 81139bc:	681b      	ldr	r3, [r3, #0]
 81139be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 81139c0:	68fb      	ldr	r3, [r7, #12]
 81139c2:	681b      	ldr	r3, [r3, #0]
 81139c4:	2b00      	cmp	r3, #0
 81139c6:	d011      	beq.n	81139ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 81139c8:	68fb      	ldr	r3, [r7, #12]
 81139ca:	681b      	ldr	r3, [r3, #0]
 81139cc:	68db      	ldr	r3, [r3, #12]
 81139ce:	685b      	ldr	r3, [r3, #4]
 81139d0:	4618      	mov	r0, r3
 81139d2:	f7f6 facb 	bl	8109f6c <lwip_htonl>
 81139d6:	4604      	mov	r4, r0
 81139d8:	68bb      	ldr	r3, [r7, #8]
 81139da:	68db      	ldr	r3, [r3, #12]
 81139dc:	685b      	ldr	r3, [r3, #4]
 81139de:	4618      	mov	r0, r3
 81139e0:	f7f6 fac4 	bl	8109f6c <lwip_htonl>
 81139e4:	4603      	mov	r3, r0
 81139e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 81139e8:	2b00      	cmp	r3, #0
 81139ea:	dbe6      	blt.n	81139ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 81139ec:	68fb      	ldr	r3, [r7, #12]
 81139ee:	681a      	ldr	r2, [r3, #0]
 81139f0:	68bb      	ldr	r3, [r7, #8]
 81139f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 81139f4:	68fb      	ldr	r3, [r7, #12]
 81139f6:	68ba      	ldr	r2, [r7, #8]
 81139f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 81139fa:	68bb      	ldr	r3, [r7, #8]
 81139fc:	681b      	ldr	r3, [r3, #0]
 81139fe:	2b00      	cmp	r3, #0
 8113a00:	d103      	bne.n	8113a0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8113a02:	687b      	ldr	r3, [r7, #4]
 8113a04:	2200      	movs	r2, #0
 8113a06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8113a0a:	687b      	ldr	r3, [r7, #4]
 8113a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8113a10:	2bff      	cmp	r3, #255	@ 0xff
 8113a12:	d007      	beq.n	8113a24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8113a14:	687b      	ldr	r3, [r7, #4]
 8113a16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8113a1a:	3301      	adds	r3, #1
 8113a1c:	b2da      	uxtb	r2, r3
 8113a1e:	687b      	ldr	r3, [r7, #4]
 8113a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8113a24:	687b      	ldr	r3, [r7, #4]
 8113a26:	2200      	movs	r2, #0
 8113a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8113a2a:	2300      	movs	r3, #0
}
 8113a2c:	4618      	mov	r0, r3
 8113a2e:	3714      	adds	r7, #20
 8113a30:	46bd      	mov	sp, r7
 8113a32:	bd90      	pop	{r4, r7, pc}
 8113a34:	0811e220 	.word	0x0811e220
 8113a38:	0811e8f0 	.word	0x0811e8f0
 8113a3c:	0811e2a4 	.word	0x0811e2a4

08113a40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8113a40:	b580      	push	{r7, lr}
 8113a42:	b082      	sub	sp, #8
 8113a44:	af00      	add	r7, sp, #0
 8113a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8113a48:	687b      	ldr	r3, [r7, #4]
 8113a4a:	2b00      	cmp	r3, #0
 8113a4c:	d106      	bne.n	8113a5c <tcp_rexmit_fast+0x1c>
 8113a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8113af8 <tcp_rexmit_fast+0xb8>)
 8113a50:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8113a54:	4929      	ldr	r1, [pc, #164]	@ (8113afc <tcp_rexmit_fast+0xbc>)
 8113a56:	482a      	ldr	r0, [pc, #168]	@ (8113b00 <tcp_rexmit_fast+0xc0>)
 8113a58:	f003 fcee 	bl	8117438 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8113a5c:	687b      	ldr	r3, [r7, #4]
 8113a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113a60:	2b00      	cmp	r3, #0
 8113a62:	d044      	beq.n	8113aee <tcp_rexmit_fast+0xae>
 8113a64:	687b      	ldr	r3, [r7, #4]
 8113a66:	8b5b      	ldrh	r3, [r3, #26]
 8113a68:	f003 0304 	and.w	r3, r3, #4
 8113a6c:	2b00      	cmp	r3, #0
 8113a6e:	d13e      	bne.n	8113aee <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8113a70:	6878      	ldr	r0, [r7, #4]
 8113a72:	f7ff ff79 	bl	8113968 <tcp_rexmit>
 8113a76:	4603      	mov	r3, r0
 8113a78:	2b00      	cmp	r3, #0
 8113a7a:	d138      	bne.n	8113aee <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8113a7c:	687b      	ldr	r3, [r7, #4]
 8113a7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8113a82:	687b      	ldr	r3, [r7, #4]
 8113a84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8113a88:	4293      	cmp	r3, r2
 8113a8a:	bf28      	it	cs
 8113a8c:	4613      	movcs	r3, r2
 8113a8e:	b29b      	uxth	r3, r3
 8113a90:	0fda      	lsrs	r2, r3, #31
 8113a92:	4413      	add	r3, r2
 8113a94:	105b      	asrs	r3, r3, #1
 8113a96:	b29a      	uxth	r2, r3
 8113a98:	687b      	ldr	r3, [r7, #4]
 8113a9a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8113a9e:	687b      	ldr	r3, [r7, #4]
 8113aa0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8113aa4:	461a      	mov	r2, r3
 8113aa6:	687b      	ldr	r3, [r7, #4]
 8113aa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8113aaa:	005b      	lsls	r3, r3, #1
 8113aac:	429a      	cmp	r2, r3
 8113aae:	d206      	bcs.n	8113abe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8113ab0:	687b      	ldr	r3, [r7, #4]
 8113ab2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8113ab4:	005b      	lsls	r3, r3, #1
 8113ab6:	b29a      	uxth	r2, r3
 8113ab8:	687b      	ldr	r3, [r7, #4]
 8113aba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8113abe:	687b      	ldr	r3, [r7, #4]
 8113ac0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8113ac4:	687b      	ldr	r3, [r7, #4]
 8113ac6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8113ac8:	4619      	mov	r1, r3
 8113aca:	0049      	lsls	r1, r1, #1
 8113acc:	440b      	add	r3, r1
 8113ace:	b29b      	uxth	r3, r3
 8113ad0:	4413      	add	r3, r2
 8113ad2:	b29a      	uxth	r2, r3
 8113ad4:	687b      	ldr	r3, [r7, #4]
 8113ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8113ada:	687b      	ldr	r3, [r7, #4]
 8113adc:	8b5b      	ldrh	r3, [r3, #26]
 8113ade:	f043 0304 	orr.w	r3, r3, #4
 8113ae2:	b29a      	uxth	r2, r3
 8113ae4:	687b      	ldr	r3, [r7, #4]
 8113ae6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8113ae8:	687b      	ldr	r3, [r7, #4]
 8113aea:	2200      	movs	r2, #0
 8113aec:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8113aee:	bf00      	nop
 8113af0:	3708      	adds	r7, #8
 8113af2:	46bd      	mov	sp, r7
 8113af4:	bd80      	pop	{r7, pc}
 8113af6:	bf00      	nop
 8113af8:	0811e220 	.word	0x0811e220
 8113afc:	0811e908 	.word	0x0811e908
 8113b00:	0811e2a4 	.word	0x0811e2a4

08113b04 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8113b04:	b580      	push	{r7, lr}
 8113b06:	b086      	sub	sp, #24
 8113b08:	af00      	add	r7, sp, #0
 8113b0a:	60f8      	str	r0, [r7, #12]
 8113b0c:	607b      	str	r3, [r7, #4]
 8113b0e:	460b      	mov	r3, r1
 8113b10:	817b      	strh	r3, [r7, #10]
 8113b12:	4613      	mov	r3, r2
 8113b14:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8113b16:	897a      	ldrh	r2, [r7, #10]
 8113b18:	893b      	ldrh	r3, [r7, #8]
 8113b1a:	4413      	add	r3, r2
 8113b1c:	b29b      	uxth	r3, r3
 8113b1e:	3314      	adds	r3, #20
 8113b20:	b29b      	uxth	r3, r3
 8113b22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8113b26:	4619      	mov	r1, r3
 8113b28:	2022      	movs	r0, #34	@ 0x22
 8113b2a:	f7f9 fe29 	bl	810d780 <pbuf_alloc>
 8113b2e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8113b30:	697b      	ldr	r3, [r7, #20]
 8113b32:	2b00      	cmp	r3, #0
 8113b34:	d04d      	beq.n	8113bd2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8113b36:	897b      	ldrh	r3, [r7, #10]
 8113b38:	3313      	adds	r3, #19
 8113b3a:	697a      	ldr	r2, [r7, #20]
 8113b3c:	8952      	ldrh	r2, [r2, #10]
 8113b3e:	4293      	cmp	r3, r2
 8113b40:	db06      	blt.n	8113b50 <tcp_output_alloc_header_common+0x4c>
 8113b42:	4b26      	ldr	r3, [pc, #152]	@ (8113bdc <tcp_output_alloc_header_common+0xd8>)
 8113b44:	f240 7223 	movw	r2, #1827	@ 0x723
 8113b48:	4925      	ldr	r1, [pc, #148]	@ (8113be0 <tcp_output_alloc_header_common+0xdc>)
 8113b4a:	4826      	ldr	r0, [pc, #152]	@ (8113be4 <tcp_output_alloc_header_common+0xe0>)
 8113b4c:	f003 fc74 	bl	8117438 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8113b50:	697b      	ldr	r3, [r7, #20]
 8113b52:	685b      	ldr	r3, [r3, #4]
 8113b54:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8113b56:	8c3b      	ldrh	r3, [r7, #32]
 8113b58:	4618      	mov	r0, r3
 8113b5a:	f7f6 f9f1 	bl	8109f40 <lwip_htons>
 8113b5e:	4603      	mov	r3, r0
 8113b60:	461a      	mov	r2, r3
 8113b62:	693b      	ldr	r3, [r7, #16]
 8113b64:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8113b66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8113b68:	4618      	mov	r0, r3
 8113b6a:	f7f6 f9e9 	bl	8109f40 <lwip_htons>
 8113b6e:	4603      	mov	r3, r0
 8113b70:	461a      	mov	r2, r3
 8113b72:	693b      	ldr	r3, [r7, #16]
 8113b74:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8113b76:	693b      	ldr	r3, [r7, #16]
 8113b78:	687a      	ldr	r2, [r7, #4]
 8113b7a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8113b7c:	68f8      	ldr	r0, [r7, #12]
 8113b7e:	f7f6 f9f5 	bl	8109f6c <lwip_htonl>
 8113b82:	4602      	mov	r2, r0
 8113b84:	693b      	ldr	r3, [r7, #16]
 8113b86:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8113b88:	897b      	ldrh	r3, [r7, #10]
 8113b8a:	089b      	lsrs	r3, r3, #2
 8113b8c:	b29b      	uxth	r3, r3
 8113b8e:	3305      	adds	r3, #5
 8113b90:	b29b      	uxth	r3, r3
 8113b92:	031b      	lsls	r3, r3, #12
 8113b94:	b29a      	uxth	r2, r3
 8113b96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8113b9a:	b29b      	uxth	r3, r3
 8113b9c:	4313      	orrs	r3, r2
 8113b9e:	b29b      	uxth	r3, r3
 8113ba0:	4618      	mov	r0, r3
 8113ba2:	f7f6 f9cd 	bl	8109f40 <lwip_htons>
 8113ba6:	4603      	mov	r3, r0
 8113ba8:	461a      	mov	r2, r3
 8113baa:	693b      	ldr	r3, [r7, #16]
 8113bac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8113bae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8113bb0:	4618      	mov	r0, r3
 8113bb2:	f7f6 f9c5 	bl	8109f40 <lwip_htons>
 8113bb6:	4603      	mov	r3, r0
 8113bb8:	461a      	mov	r2, r3
 8113bba:	693b      	ldr	r3, [r7, #16]
 8113bbc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8113bbe:	693b      	ldr	r3, [r7, #16]
 8113bc0:	2200      	movs	r2, #0
 8113bc2:	741a      	strb	r2, [r3, #16]
 8113bc4:	2200      	movs	r2, #0
 8113bc6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8113bc8:	693b      	ldr	r3, [r7, #16]
 8113bca:	2200      	movs	r2, #0
 8113bcc:	749a      	strb	r2, [r3, #18]
 8113bce:	2200      	movs	r2, #0
 8113bd0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8113bd2:	697b      	ldr	r3, [r7, #20]
}
 8113bd4:	4618      	mov	r0, r3
 8113bd6:	3718      	adds	r7, #24
 8113bd8:	46bd      	mov	sp, r7
 8113bda:	bd80      	pop	{r7, pc}
 8113bdc:	0811e220 	.word	0x0811e220
 8113be0:	0811e928 	.word	0x0811e928
 8113be4:	0811e2a4 	.word	0x0811e2a4

08113be8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8113be8:	b5b0      	push	{r4, r5, r7, lr}
 8113bea:	b08a      	sub	sp, #40	@ 0x28
 8113bec:	af04      	add	r7, sp, #16
 8113bee:	60f8      	str	r0, [r7, #12]
 8113bf0:	607b      	str	r3, [r7, #4]
 8113bf2:	460b      	mov	r3, r1
 8113bf4:	817b      	strh	r3, [r7, #10]
 8113bf6:	4613      	mov	r3, r2
 8113bf8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8113bfa:	68fb      	ldr	r3, [r7, #12]
 8113bfc:	2b00      	cmp	r3, #0
 8113bfe:	d106      	bne.n	8113c0e <tcp_output_alloc_header+0x26>
 8113c00:	4b15      	ldr	r3, [pc, #84]	@ (8113c58 <tcp_output_alloc_header+0x70>)
 8113c02:	f240 7242 	movw	r2, #1858	@ 0x742
 8113c06:	4915      	ldr	r1, [pc, #84]	@ (8113c5c <tcp_output_alloc_header+0x74>)
 8113c08:	4815      	ldr	r0, [pc, #84]	@ (8113c60 <tcp_output_alloc_header+0x78>)
 8113c0a:	f003 fc15 	bl	8117438 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8113c0e:	68fb      	ldr	r3, [r7, #12]
 8113c10:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8113c12:	68fb      	ldr	r3, [r7, #12]
 8113c14:	8adb      	ldrh	r3, [r3, #22]
 8113c16:	68fa      	ldr	r2, [r7, #12]
 8113c18:	8b12      	ldrh	r2, [r2, #24]
 8113c1a:	68f9      	ldr	r1, [r7, #12]
 8113c1c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8113c1e:	893d      	ldrh	r5, [r7, #8]
 8113c20:	897c      	ldrh	r4, [r7, #10]
 8113c22:	9103      	str	r1, [sp, #12]
 8113c24:	2110      	movs	r1, #16
 8113c26:	9102      	str	r1, [sp, #8]
 8113c28:	9201      	str	r2, [sp, #4]
 8113c2a:	9300      	str	r3, [sp, #0]
 8113c2c:	687b      	ldr	r3, [r7, #4]
 8113c2e:	462a      	mov	r2, r5
 8113c30:	4621      	mov	r1, r4
 8113c32:	f7ff ff67 	bl	8113b04 <tcp_output_alloc_header_common>
 8113c36:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8113c38:	697b      	ldr	r3, [r7, #20]
 8113c3a:	2b00      	cmp	r3, #0
 8113c3c:	d006      	beq.n	8113c4c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8113c3e:	68fb      	ldr	r3, [r7, #12]
 8113c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113c42:	68fa      	ldr	r2, [r7, #12]
 8113c44:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8113c46:	441a      	add	r2, r3
 8113c48:	68fb      	ldr	r3, [r7, #12]
 8113c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8113c4c:	697b      	ldr	r3, [r7, #20]
}
 8113c4e:	4618      	mov	r0, r3
 8113c50:	3718      	adds	r7, #24
 8113c52:	46bd      	mov	sp, r7
 8113c54:	bdb0      	pop	{r4, r5, r7, pc}
 8113c56:	bf00      	nop
 8113c58:	0811e220 	.word	0x0811e220
 8113c5c:	0811e958 	.word	0x0811e958
 8113c60:	0811e2a4 	.word	0x0811e2a4

08113c64 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8113c64:	b580      	push	{r7, lr}
 8113c66:	b088      	sub	sp, #32
 8113c68:	af00      	add	r7, sp, #0
 8113c6a:	60f8      	str	r0, [r7, #12]
 8113c6c:	60b9      	str	r1, [r7, #8]
 8113c6e:	4611      	mov	r1, r2
 8113c70:	461a      	mov	r2, r3
 8113c72:	460b      	mov	r3, r1
 8113c74:	71fb      	strb	r3, [r7, #7]
 8113c76:	4613      	mov	r3, r2
 8113c78:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8113c7a:	2300      	movs	r3, #0
 8113c7c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8113c7e:	68bb      	ldr	r3, [r7, #8]
 8113c80:	2b00      	cmp	r3, #0
 8113c82:	d106      	bne.n	8113c92 <tcp_output_fill_options+0x2e>
 8113c84:	4b12      	ldr	r3, [pc, #72]	@ (8113cd0 <tcp_output_fill_options+0x6c>)
 8113c86:	f240 7256 	movw	r2, #1878	@ 0x756
 8113c8a:	4912      	ldr	r1, [pc, #72]	@ (8113cd4 <tcp_output_fill_options+0x70>)
 8113c8c:	4812      	ldr	r0, [pc, #72]	@ (8113cd8 <tcp_output_fill_options+0x74>)
 8113c8e:	f003 fbd3 	bl	8117438 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8113c92:	68bb      	ldr	r3, [r7, #8]
 8113c94:	685b      	ldr	r3, [r3, #4]
 8113c96:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8113c98:	69bb      	ldr	r3, [r7, #24]
 8113c9a:	3314      	adds	r3, #20
 8113c9c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8113c9e:	8bfb      	ldrh	r3, [r7, #30]
 8113ca0:	009b      	lsls	r3, r3, #2
 8113ca2:	461a      	mov	r2, r3
 8113ca4:	79fb      	ldrb	r3, [r7, #7]
 8113ca6:	009b      	lsls	r3, r3, #2
 8113ca8:	f003 0304 	and.w	r3, r3, #4
 8113cac:	4413      	add	r3, r2
 8113cae:	3314      	adds	r3, #20
 8113cb0:	69ba      	ldr	r2, [r7, #24]
 8113cb2:	4413      	add	r3, r2
 8113cb4:	697a      	ldr	r2, [r7, #20]
 8113cb6:	429a      	cmp	r2, r3
 8113cb8:	d006      	beq.n	8113cc8 <tcp_output_fill_options+0x64>
 8113cba:	4b05      	ldr	r3, [pc, #20]	@ (8113cd0 <tcp_output_fill_options+0x6c>)
 8113cbc:	f240 7275 	movw	r2, #1909	@ 0x775
 8113cc0:	4906      	ldr	r1, [pc, #24]	@ (8113cdc <tcp_output_fill_options+0x78>)
 8113cc2:	4805      	ldr	r0, [pc, #20]	@ (8113cd8 <tcp_output_fill_options+0x74>)
 8113cc4:	f003 fbb8 	bl	8117438 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8113cc8:	bf00      	nop
 8113cca:	3720      	adds	r7, #32
 8113ccc:	46bd      	mov	sp, r7
 8113cce:	bd80      	pop	{r7, pc}
 8113cd0:	0811e220 	.word	0x0811e220
 8113cd4:	0811e980 	.word	0x0811e980
 8113cd8:	0811e2a4 	.word	0x0811e2a4
 8113cdc:	0811e878 	.word	0x0811e878

08113ce0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8113ce0:	b580      	push	{r7, lr}
 8113ce2:	b08a      	sub	sp, #40	@ 0x28
 8113ce4:	af04      	add	r7, sp, #16
 8113ce6:	60f8      	str	r0, [r7, #12]
 8113ce8:	60b9      	str	r1, [r7, #8]
 8113cea:	607a      	str	r2, [r7, #4]
 8113cec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8113cee:	68bb      	ldr	r3, [r7, #8]
 8113cf0:	2b00      	cmp	r3, #0
 8113cf2:	d106      	bne.n	8113d02 <tcp_output_control_segment+0x22>
 8113cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8113d68 <tcp_output_control_segment+0x88>)
 8113cf6:	f240 7287 	movw	r2, #1927	@ 0x787
 8113cfa:	491c      	ldr	r1, [pc, #112]	@ (8113d6c <tcp_output_control_segment+0x8c>)
 8113cfc:	481c      	ldr	r0, [pc, #112]	@ (8113d70 <tcp_output_control_segment+0x90>)
 8113cfe:	f003 fb9b 	bl	8117438 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8113d02:	683a      	ldr	r2, [r7, #0]
 8113d04:	6879      	ldr	r1, [r7, #4]
 8113d06:	68f8      	ldr	r0, [r7, #12]
 8113d08:	f7fe faea 	bl	81122e0 <tcp_route>
 8113d0c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8113d0e:	693b      	ldr	r3, [r7, #16]
 8113d10:	2b00      	cmp	r3, #0
 8113d12:	d102      	bne.n	8113d1a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8113d14:	23fc      	movs	r3, #252	@ 0xfc
 8113d16:	75fb      	strb	r3, [r7, #23]
 8113d18:	e01c      	b.n	8113d54 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8113d1a:	68fb      	ldr	r3, [r7, #12]
 8113d1c:	2b00      	cmp	r3, #0
 8113d1e:	d006      	beq.n	8113d2e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8113d20:	68fb      	ldr	r3, [r7, #12]
 8113d22:	7adb      	ldrb	r3, [r3, #11]
 8113d24:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8113d26:	68fb      	ldr	r3, [r7, #12]
 8113d28:	7a9b      	ldrb	r3, [r3, #10]
 8113d2a:	757b      	strb	r3, [r7, #21]
 8113d2c:	e003      	b.n	8113d36 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8113d2e:	23ff      	movs	r3, #255	@ 0xff
 8113d30:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8113d32:	2300      	movs	r3, #0
 8113d34:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8113d36:	7dba      	ldrb	r2, [r7, #22]
 8113d38:	693b      	ldr	r3, [r7, #16]
 8113d3a:	9302      	str	r3, [sp, #8]
 8113d3c:	2306      	movs	r3, #6
 8113d3e:	9301      	str	r3, [sp, #4]
 8113d40:	7d7b      	ldrb	r3, [r7, #21]
 8113d42:	9300      	str	r3, [sp, #0]
 8113d44:	4613      	mov	r3, r2
 8113d46:	683a      	ldr	r2, [r7, #0]
 8113d48:	6879      	ldr	r1, [r7, #4]
 8113d4a:	68b8      	ldr	r0, [r7, #8]
 8113d4c:	f7f7 fd8e 	bl	810b86c <ip4_output_if>
 8113d50:	4603      	mov	r3, r0
 8113d52:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8113d54:	68b8      	ldr	r0, [r7, #8]
 8113d56:	f7f9 fff7 	bl	810dd48 <pbuf_free>
  return err;
 8113d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8113d5e:	4618      	mov	r0, r3
 8113d60:	3718      	adds	r7, #24
 8113d62:	46bd      	mov	sp, r7
 8113d64:	bd80      	pop	{r7, pc}
 8113d66:	bf00      	nop
 8113d68:	0811e220 	.word	0x0811e220
 8113d6c:	0811e9a8 	.word	0x0811e9a8
 8113d70:	0811e2a4 	.word	0x0811e2a4

08113d74 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8113d74:	b590      	push	{r4, r7, lr}
 8113d76:	b08b      	sub	sp, #44	@ 0x2c
 8113d78:	af04      	add	r7, sp, #16
 8113d7a:	60f8      	str	r0, [r7, #12]
 8113d7c:	60b9      	str	r1, [r7, #8]
 8113d7e:	607a      	str	r2, [r7, #4]
 8113d80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8113d82:	683b      	ldr	r3, [r7, #0]
 8113d84:	2b00      	cmp	r3, #0
 8113d86:	d106      	bne.n	8113d96 <tcp_rst+0x22>
 8113d88:	4b1f      	ldr	r3, [pc, #124]	@ (8113e08 <tcp_rst+0x94>)
 8113d8a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8113d8e:	491f      	ldr	r1, [pc, #124]	@ (8113e0c <tcp_rst+0x98>)
 8113d90:	481f      	ldr	r0, [pc, #124]	@ (8113e10 <tcp_rst+0x9c>)
 8113d92:	f003 fb51 	bl	8117438 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8113d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113d98:	2b00      	cmp	r3, #0
 8113d9a:	d106      	bne.n	8113daa <tcp_rst+0x36>
 8113d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8113e08 <tcp_rst+0x94>)
 8113d9e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8113da2:	491c      	ldr	r1, [pc, #112]	@ (8113e14 <tcp_rst+0xa0>)
 8113da4:	481a      	ldr	r0, [pc, #104]	@ (8113e10 <tcp_rst+0x9c>)
 8113da6:	f003 fb47 	bl	8117438 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8113daa:	2300      	movs	r3, #0
 8113dac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8113dae:	f246 0308 	movw	r3, #24584	@ 0x6008
 8113db2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8113db4:	7dfb      	ldrb	r3, [r7, #23]
 8113db6:	b29c      	uxth	r4, r3
 8113db8:	68b8      	ldr	r0, [r7, #8]
 8113dba:	f7f6 f8d7 	bl	8109f6c <lwip_htonl>
 8113dbe:	4602      	mov	r2, r0
 8113dc0:	8abb      	ldrh	r3, [r7, #20]
 8113dc2:	9303      	str	r3, [sp, #12]
 8113dc4:	2314      	movs	r3, #20
 8113dc6:	9302      	str	r3, [sp, #8]
 8113dc8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8113dca:	9301      	str	r3, [sp, #4]
 8113dcc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8113dce:	9300      	str	r3, [sp, #0]
 8113dd0:	4613      	mov	r3, r2
 8113dd2:	2200      	movs	r2, #0
 8113dd4:	4621      	mov	r1, r4
 8113dd6:	6878      	ldr	r0, [r7, #4]
 8113dd8:	f7ff fe94 	bl	8113b04 <tcp_output_alloc_header_common>
 8113ddc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8113dde:	693b      	ldr	r3, [r7, #16]
 8113de0:	2b00      	cmp	r3, #0
 8113de2:	d00c      	beq.n	8113dfe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8113de4:	7dfb      	ldrb	r3, [r7, #23]
 8113de6:	2200      	movs	r2, #0
 8113de8:	6939      	ldr	r1, [r7, #16]
 8113dea:	68f8      	ldr	r0, [r7, #12]
 8113dec:	f7ff ff3a 	bl	8113c64 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8113df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113df2:	683a      	ldr	r2, [r7, #0]
 8113df4:	6939      	ldr	r1, [r7, #16]
 8113df6:	68f8      	ldr	r0, [r7, #12]
 8113df8:	f7ff ff72 	bl	8113ce0 <tcp_output_control_segment>
 8113dfc:	e000      	b.n	8113e00 <tcp_rst+0x8c>
    return;
 8113dfe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8113e00:	371c      	adds	r7, #28
 8113e02:	46bd      	mov	sp, r7
 8113e04:	bd90      	pop	{r4, r7, pc}
 8113e06:	bf00      	nop
 8113e08:	0811e220 	.word	0x0811e220
 8113e0c:	0811e9d4 	.word	0x0811e9d4
 8113e10:	0811e2a4 	.word	0x0811e2a4
 8113e14:	0811e9f0 	.word	0x0811e9f0

08113e18 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8113e18:	b590      	push	{r4, r7, lr}
 8113e1a:	b087      	sub	sp, #28
 8113e1c:	af00      	add	r7, sp, #0
 8113e1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8113e20:	2300      	movs	r3, #0
 8113e22:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8113e24:	2300      	movs	r3, #0
 8113e26:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8113e28:	687b      	ldr	r3, [r7, #4]
 8113e2a:	2b00      	cmp	r3, #0
 8113e2c:	d106      	bne.n	8113e3c <tcp_send_empty_ack+0x24>
 8113e2e:	4b28      	ldr	r3, [pc, #160]	@ (8113ed0 <tcp_send_empty_ack+0xb8>)
 8113e30:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8113e34:	4927      	ldr	r1, [pc, #156]	@ (8113ed4 <tcp_send_empty_ack+0xbc>)
 8113e36:	4828      	ldr	r0, [pc, #160]	@ (8113ed8 <tcp_send_empty_ack+0xc0>)
 8113e38:	f003 fafe 	bl	8117438 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8113e3c:	7dfb      	ldrb	r3, [r7, #23]
 8113e3e:	009b      	lsls	r3, r3, #2
 8113e40:	b2db      	uxtb	r3, r3
 8113e42:	f003 0304 	and.w	r3, r3, #4
 8113e46:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8113e48:	7d7b      	ldrb	r3, [r7, #21]
 8113e4a:	b29c      	uxth	r4, r3
 8113e4c:	687b      	ldr	r3, [r7, #4]
 8113e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113e50:	4618      	mov	r0, r3
 8113e52:	f7f6 f88b 	bl	8109f6c <lwip_htonl>
 8113e56:	4603      	mov	r3, r0
 8113e58:	2200      	movs	r2, #0
 8113e5a:	4621      	mov	r1, r4
 8113e5c:	6878      	ldr	r0, [r7, #4]
 8113e5e:	f7ff fec3 	bl	8113be8 <tcp_output_alloc_header>
 8113e62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8113e64:	693b      	ldr	r3, [r7, #16]
 8113e66:	2b00      	cmp	r3, #0
 8113e68:	d109      	bne.n	8113e7e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8113e6a:	687b      	ldr	r3, [r7, #4]
 8113e6c:	8b5b      	ldrh	r3, [r3, #26]
 8113e6e:	f043 0303 	orr.w	r3, r3, #3
 8113e72:	b29a      	uxth	r2, r3
 8113e74:	687b      	ldr	r3, [r7, #4]
 8113e76:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8113e78:	f06f 0301 	mvn.w	r3, #1
 8113e7c:	e023      	b.n	8113ec6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8113e7e:	7dbb      	ldrb	r3, [r7, #22]
 8113e80:	7dfa      	ldrb	r2, [r7, #23]
 8113e82:	6939      	ldr	r1, [r7, #16]
 8113e84:	6878      	ldr	r0, [r7, #4]
 8113e86:	f7ff feed 	bl	8113c64 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8113e8a:	687a      	ldr	r2, [r7, #4]
 8113e8c:	687b      	ldr	r3, [r7, #4]
 8113e8e:	3304      	adds	r3, #4
 8113e90:	6939      	ldr	r1, [r7, #16]
 8113e92:	6878      	ldr	r0, [r7, #4]
 8113e94:	f7ff ff24 	bl	8113ce0 <tcp_output_control_segment>
 8113e98:	4603      	mov	r3, r0
 8113e9a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8113e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8113ea0:	2b00      	cmp	r3, #0
 8113ea2:	d007      	beq.n	8113eb4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8113ea4:	687b      	ldr	r3, [r7, #4]
 8113ea6:	8b5b      	ldrh	r3, [r3, #26]
 8113ea8:	f043 0303 	orr.w	r3, r3, #3
 8113eac:	b29a      	uxth	r2, r3
 8113eae:	687b      	ldr	r3, [r7, #4]
 8113eb0:	835a      	strh	r2, [r3, #26]
 8113eb2:	e006      	b.n	8113ec2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8113eb4:	687b      	ldr	r3, [r7, #4]
 8113eb6:	8b5b      	ldrh	r3, [r3, #26]
 8113eb8:	f023 0303 	bic.w	r3, r3, #3
 8113ebc:	b29a      	uxth	r2, r3
 8113ebe:	687b      	ldr	r3, [r7, #4]
 8113ec0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8113ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8113ec6:	4618      	mov	r0, r3
 8113ec8:	371c      	adds	r7, #28
 8113eca:	46bd      	mov	sp, r7
 8113ecc:	bd90      	pop	{r4, r7, pc}
 8113ece:	bf00      	nop
 8113ed0:	0811e220 	.word	0x0811e220
 8113ed4:	0811ea0c 	.word	0x0811ea0c
 8113ed8:	0811e2a4 	.word	0x0811e2a4

08113edc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8113edc:	b590      	push	{r4, r7, lr}
 8113ede:	b087      	sub	sp, #28
 8113ee0:	af00      	add	r7, sp, #0
 8113ee2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8113ee4:	2300      	movs	r3, #0
 8113ee6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8113ee8:	687b      	ldr	r3, [r7, #4]
 8113eea:	2b00      	cmp	r3, #0
 8113eec:	d106      	bne.n	8113efc <tcp_keepalive+0x20>
 8113eee:	4b18      	ldr	r3, [pc, #96]	@ (8113f50 <tcp_keepalive+0x74>)
 8113ef0:	f640 0224 	movw	r2, #2084	@ 0x824
 8113ef4:	4917      	ldr	r1, [pc, #92]	@ (8113f54 <tcp_keepalive+0x78>)
 8113ef6:	4818      	ldr	r0, [pc, #96]	@ (8113f58 <tcp_keepalive+0x7c>)
 8113ef8:	f003 fa9e 	bl	8117438 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8113efc:	7dfb      	ldrb	r3, [r7, #23]
 8113efe:	b29c      	uxth	r4, r3
 8113f00:	687b      	ldr	r3, [r7, #4]
 8113f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113f04:	3b01      	subs	r3, #1
 8113f06:	4618      	mov	r0, r3
 8113f08:	f7f6 f830 	bl	8109f6c <lwip_htonl>
 8113f0c:	4603      	mov	r3, r0
 8113f0e:	2200      	movs	r2, #0
 8113f10:	4621      	mov	r1, r4
 8113f12:	6878      	ldr	r0, [r7, #4]
 8113f14:	f7ff fe68 	bl	8113be8 <tcp_output_alloc_header>
 8113f18:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8113f1a:	693b      	ldr	r3, [r7, #16]
 8113f1c:	2b00      	cmp	r3, #0
 8113f1e:	d102      	bne.n	8113f26 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8113f20:	f04f 33ff 	mov.w	r3, #4294967295
 8113f24:	e010      	b.n	8113f48 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8113f26:	7dfb      	ldrb	r3, [r7, #23]
 8113f28:	2200      	movs	r2, #0
 8113f2a:	6939      	ldr	r1, [r7, #16]
 8113f2c:	6878      	ldr	r0, [r7, #4]
 8113f2e:	f7ff fe99 	bl	8113c64 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8113f32:	687a      	ldr	r2, [r7, #4]
 8113f34:	687b      	ldr	r3, [r7, #4]
 8113f36:	3304      	adds	r3, #4
 8113f38:	6939      	ldr	r1, [r7, #16]
 8113f3a:	6878      	ldr	r0, [r7, #4]
 8113f3c:	f7ff fed0 	bl	8113ce0 <tcp_output_control_segment>
 8113f40:	4603      	mov	r3, r0
 8113f42:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8113f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8113f48:	4618      	mov	r0, r3
 8113f4a:	371c      	adds	r7, #28
 8113f4c:	46bd      	mov	sp, r7
 8113f4e:	bd90      	pop	{r4, r7, pc}
 8113f50:	0811e220 	.word	0x0811e220
 8113f54:	0811ea2c 	.word	0x0811ea2c
 8113f58:	0811e2a4 	.word	0x0811e2a4

08113f5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8113f5c:	b590      	push	{r4, r7, lr}
 8113f5e:	b08b      	sub	sp, #44	@ 0x2c
 8113f60:	af00      	add	r7, sp, #0
 8113f62:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8113f64:	2300      	movs	r3, #0
 8113f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8113f6a:	687b      	ldr	r3, [r7, #4]
 8113f6c:	2b00      	cmp	r3, #0
 8113f6e:	d106      	bne.n	8113f7e <tcp_zero_window_probe+0x22>
 8113f70:	4b4c      	ldr	r3, [pc, #304]	@ (81140a4 <tcp_zero_window_probe+0x148>)
 8113f72:	f640 024f 	movw	r2, #2127	@ 0x84f
 8113f76:	494c      	ldr	r1, [pc, #304]	@ (81140a8 <tcp_zero_window_probe+0x14c>)
 8113f78:	484c      	ldr	r0, [pc, #304]	@ (81140ac <tcp_zero_window_probe+0x150>)
 8113f7a:	f003 fa5d 	bl	8117438 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8113f7e:	687b      	ldr	r3, [r7, #4]
 8113f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113f82:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8113f84:	6a3b      	ldr	r3, [r7, #32]
 8113f86:	2b00      	cmp	r3, #0
 8113f88:	d101      	bne.n	8113f8e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8113f8a:	2300      	movs	r3, #0
 8113f8c:	e086      	b.n	811409c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8113f8e:	687b      	ldr	r3, [r7, #4]
 8113f90:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8113f94:	2bff      	cmp	r3, #255	@ 0xff
 8113f96:	d007      	beq.n	8113fa8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8113f98:	687b      	ldr	r3, [r7, #4]
 8113f9a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8113f9e:	3301      	adds	r3, #1
 8113fa0:	b2da      	uxtb	r2, r3
 8113fa2:	687b      	ldr	r3, [r7, #4]
 8113fa4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8113fa8:	6a3b      	ldr	r3, [r7, #32]
 8113faa:	68db      	ldr	r3, [r3, #12]
 8113fac:	899b      	ldrh	r3, [r3, #12]
 8113fae:	b29b      	uxth	r3, r3
 8113fb0:	4618      	mov	r0, r3
 8113fb2:	f7f5 ffc5 	bl	8109f40 <lwip_htons>
 8113fb6:	4603      	mov	r3, r0
 8113fb8:	b2db      	uxtb	r3, r3
 8113fba:	f003 0301 	and.w	r3, r3, #1
 8113fbe:	2b00      	cmp	r3, #0
 8113fc0:	d005      	beq.n	8113fce <tcp_zero_window_probe+0x72>
 8113fc2:	6a3b      	ldr	r3, [r7, #32]
 8113fc4:	891b      	ldrh	r3, [r3, #8]
 8113fc6:	2b00      	cmp	r3, #0
 8113fc8:	d101      	bne.n	8113fce <tcp_zero_window_probe+0x72>
 8113fca:	2301      	movs	r3, #1
 8113fcc:	e000      	b.n	8113fd0 <tcp_zero_window_probe+0x74>
 8113fce:	2300      	movs	r3, #0
 8113fd0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8113fd2:	7ffb      	ldrb	r3, [r7, #31]
 8113fd4:	2b00      	cmp	r3, #0
 8113fd6:	bf0c      	ite	eq
 8113fd8:	2301      	moveq	r3, #1
 8113fda:	2300      	movne	r3, #0
 8113fdc:	b2db      	uxtb	r3, r3
 8113fde:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8113fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8113fe4:	b299      	uxth	r1, r3
 8113fe6:	6a3b      	ldr	r3, [r7, #32]
 8113fe8:	68db      	ldr	r3, [r3, #12]
 8113fea:	685b      	ldr	r3, [r3, #4]
 8113fec:	8bba      	ldrh	r2, [r7, #28]
 8113fee:	6878      	ldr	r0, [r7, #4]
 8113ff0:	f7ff fdfa 	bl	8113be8 <tcp_output_alloc_header>
 8113ff4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8113ff6:	69bb      	ldr	r3, [r7, #24]
 8113ff8:	2b00      	cmp	r3, #0
 8113ffa:	d102      	bne.n	8114002 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8113ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8114000:	e04c      	b.n	811409c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8114002:	69bb      	ldr	r3, [r7, #24]
 8114004:	685b      	ldr	r3, [r3, #4]
 8114006:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8114008:	7ffb      	ldrb	r3, [r7, #31]
 811400a:	2b00      	cmp	r3, #0
 811400c:	d011      	beq.n	8114032 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 811400e:	697b      	ldr	r3, [r7, #20]
 8114010:	899b      	ldrh	r3, [r3, #12]
 8114012:	b29b      	uxth	r3, r3
 8114014:	b21b      	sxth	r3, r3
 8114016:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811401a:	b21c      	sxth	r4, r3
 811401c:	2011      	movs	r0, #17
 811401e:	f7f5 ff8f 	bl	8109f40 <lwip_htons>
 8114022:	4603      	mov	r3, r0
 8114024:	b21b      	sxth	r3, r3
 8114026:	4323      	orrs	r3, r4
 8114028:	b21b      	sxth	r3, r3
 811402a:	b29a      	uxth	r2, r3
 811402c:	697b      	ldr	r3, [r7, #20]
 811402e:	819a      	strh	r2, [r3, #12]
 8114030:	e010      	b.n	8114054 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8114032:	69bb      	ldr	r3, [r7, #24]
 8114034:	685b      	ldr	r3, [r3, #4]
 8114036:	3314      	adds	r3, #20
 8114038:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 811403a:	6a3b      	ldr	r3, [r7, #32]
 811403c:	6858      	ldr	r0, [r3, #4]
 811403e:	6a3b      	ldr	r3, [r7, #32]
 8114040:	685b      	ldr	r3, [r3, #4]
 8114042:	891a      	ldrh	r2, [r3, #8]
 8114044:	6a3b      	ldr	r3, [r7, #32]
 8114046:	891b      	ldrh	r3, [r3, #8]
 8114048:	1ad3      	subs	r3, r2, r3
 811404a:	b29b      	uxth	r3, r3
 811404c:	2201      	movs	r2, #1
 811404e:	6939      	ldr	r1, [r7, #16]
 8114050:	f7fa f864 	bl	810e11c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8114054:	6a3b      	ldr	r3, [r7, #32]
 8114056:	68db      	ldr	r3, [r3, #12]
 8114058:	685b      	ldr	r3, [r3, #4]
 811405a:	4618      	mov	r0, r3
 811405c:	f7f5 ff86 	bl	8109f6c <lwip_htonl>
 8114060:	4603      	mov	r3, r0
 8114062:	3301      	adds	r3, #1
 8114064:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8114066:	687b      	ldr	r3, [r7, #4]
 8114068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811406a:	68fb      	ldr	r3, [r7, #12]
 811406c:	1ad3      	subs	r3, r2, r3
 811406e:	2b00      	cmp	r3, #0
 8114070:	da02      	bge.n	8114078 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8114072:	687b      	ldr	r3, [r7, #4]
 8114074:	68fa      	ldr	r2, [r7, #12]
 8114076:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8114078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811407c:	2200      	movs	r2, #0
 811407e:	69b9      	ldr	r1, [r7, #24]
 8114080:	6878      	ldr	r0, [r7, #4]
 8114082:	f7ff fdef 	bl	8113c64 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8114086:	687a      	ldr	r2, [r7, #4]
 8114088:	687b      	ldr	r3, [r7, #4]
 811408a:	3304      	adds	r3, #4
 811408c:	69b9      	ldr	r1, [r7, #24]
 811408e:	6878      	ldr	r0, [r7, #4]
 8114090:	f7ff fe26 	bl	8113ce0 <tcp_output_control_segment>
 8114094:	4603      	mov	r3, r0
 8114096:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8114098:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 811409c:	4618      	mov	r0, r3
 811409e:	372c      	adds	r7, #44	@ 0x2c
 81140a0:	46bd      	mov	sp, r7
 81140a2:	bd90      	pop	{r4, r7, pc}
 81140a4:	0811e220 	.word	0x0811e220
 81140a8:	0811ea48 	.word	0x0811ea48
 81140ac:	0811e2a4 	.word	0x0811e2a4

081140b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 81140b0:	b580      	push	{r7, lr}
 81140b2:	b082      	sub	sp, #8
 81140b4:	af00      	add	r7, sp, #0
 81140b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 81140b8:	f7fa f91e 	bl	810e2f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 81140bc:	4b0a      	ldr	r3, [pc, #40]	@ (81140e8 <tcpip_tcp_timer+0x38>)
 81140be:	681b      	ldr	r3, [r3, #0]
 81140c0:	2b00      	cmp	r3, #0
 81140c2:	d103      	bne.n	81140cc <tcpip_tcp_timer+0x1c>
 81140c4:	4b09      	ldr	r3, [pc, #36]	@ (81140ec <tcpip_tcp_timer+0x3c>)
 81140c6:	681b      	ldr	r3, [r3, #0]
 81140c8:	2b00      	cmp	r3, #0
 81140ca:	d005      	beq.n	81140d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 81140cc:	2200      	movs	r2, #0
 81140ce:	4908      	ldr	r1, [pc, #32]	@ (81140f0 <tcpip_tcp_timer+0x40>)
 81140d0:	20fa      	movs	r0, #250	@ 0xfa
 81140d2:	f000 f8f3 	bl	81142bc <sys_timeout>
 81140d6:	e003      	b.n	81140e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 81140d8:	4b06      	ldr	r3, [pc, #24]	@ (81140f4 <tcpip_tcp_timer+0x44>)
 81140da:	2200      	movs	r2, #0
 81140dc:	601a      	str	r2, [r3, #0]
  }
}
 81140de:	bf00      	nop
 81140e0:	bf00      	nop
 81140e2:	3708      	adds	r7, #8
 81140e4:	46bd      	mov	sp, r7
 81140e6:	bd80      	pop	{r7, pc}
 81140e8:	10017704 	.word	0x10017704
 81140ec:	10017708 	.word	0x10017708
 81140f0:	081140b1 	.word	0x081140b1
 81140f4:	10017750 	.word	0x10017750

081140f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 81140f8:	b580      	push	{r7, lr}
 81140fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 81140fc:	4b0a      	ldr	r3, [pc, #40]	@ (8114128 <tcp_timer_needed+0x30>)
 81140fe:	681b      	ldr	r3, [r3, #0]
 8114100:	2b00      	cmp	r3, #0
 8114102:	d10f      	bne.n	8114124 <tcp_timer_needed+0x2c>
 8114104:	4b09      	ldr	r3, [pc, #36]	@ (811412c <tcp_timer_needed+0x34>)
 8114106:	681b      	ldr	r3, [r3, #0]
 8114108:	2b00      	cmp	r3, #0
 811410a:	d103      	bne.n	8114114 <tcp_timer_needed+0x1c>
 811410c:	4b08      	ldr	r3, [pc, #32]	@ (8114130 <tcp_timer_needed+0x38>)
 811410e:	681b      	ldr	r3, [r3, #0]
 8114110:	2b00      	cmp	r3, #0
 8114112:	d007      	beq.n	8114124 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8114114:	4b04      	ldr	r3, [pc, #16]	@ (8114128 <tcp_timer_needed+0x30>)
 8114116:	2201      	movs	r2, #1
 8114118:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 811411a:	2200      	movs	r2, #0
 811411c:	4905      	ldr	r1, [pc, #20]	@ (8114134 <tcp_timer_needed+0x3c>)
 811411e:	20fa      	movs	r0, #250	@ 0xfa
 8114120:	f000 f8cc 	bl	81142bc <sys_timeout>
  }
}
 8114124:	bf00      	nop
 8114126:	bd80      	pop	{r7, pc}
 8114128:	10017750 	.word	0x10017750
 811412c:	10017704 	.word	0x10017704
 8114130:	10017708 	.word	0x10017708
 8114134:	081140b1 	.word	0x081140b1

08114138 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8114138:	b580      	push	{r7, lr}
 811413a:	b086      	sub	sp, #24
 811413c:	af00      	add	r7, sp, #0
 811413e:	60f8      	str	r0, [r7, #12]
 8114140:	60b9      	str	r1, [r7, #8]
 8114142:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8114144:	2006      	movs	r0, #6
 8114146:	f7f8 ff19 	bl	810cf7c <memp_malloc>
 811414a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 811414c:	693b      	ldr	r3, [r7, #16]
 811414e:	2b00      	cmp	r3, #0
 8114150:	d109      	bne.n	8114166 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8114152:	693b      	ldr	r3, [r7, #16]
 8114154:	2b00      	cmp	r3, #0
 8114156:	d151      	bne.n	81141fc <sys_timeout_abs+0xc4>
 8114158:	4b2a      	ldr	r3, [pc, #168]	@ (8114204 <sys_timeout_abs+0xcc>)
 811415a:	22be      	movs	r2, #190	@ 0xbe
 811415c:	492a      	ldr	r1, [pc, #168]	@ (8114208 <sys_timeout_abs+0xd0>)
 811415e:	482b      	ldr	r0, [pc, #172]	@ (811420c <sys_timeout_abs+0xd4>)
 8114160:	f003 f96a 	bl	8117438 <iprintf>
    return;
 8114164:	e04a      	b.n	81141fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8114166:	693b      	ldr	r3, [r7, #16]
 8114168:	2200      	movs	r2, #0
 811416a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 811416c:	693b      	ldr	r3, [r7, #16]
 811416e:	68ba      	ldr	r2, [r7, #8]
 8114170:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8114172:	693b      	ldr	r3, [r7, #16]
 8114174:	687a      	ldr	r2, [r7, #4]
 8114176:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8114178:	693b      	ldr	r3, [r7, #16]
 811417a:	68fa      	ldr	r2, [r7, #12]
 811417c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 811417e:	4b24      	ldr	r3, [pc, #144]	@ (8114210 <sys_timeout_abs+0xd8>)
 8114180:	681b      	ldr	r3, [r3, #0]
 8114182:	2b00      	cmp	r3, #0
 8114184:	d103      	bne.n	811418e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8114186:	4a22      	ldr	r2, [pc, #136]	@ (8114210 <sys_timeout_abs+0xd8>)
 8114188:	693b      	ldr	r3, [r7, #16]
 811418a:	6013      	str	r3, [r2, #0]
    return;
 811418c:	e037      	b.n	81141fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 811418e:	693b      	ldr	r3, [r7, #16]
 8114190:	685a      	ldr	r2, [r3, #4]
 8114192:	4b1f      	ldr	r3, [pc, #124]	@ (8114210 <sys_timeout_abs+0xd8>)
 8114194:	681b      	ldr	r3, [r3, #0]
 8114196:	685b      	ldr	r3, [r3, #4]
 8114198:	1ad3      	subs	r3, r2, r3
 811419a:	0fdb      	lsrs	r3, r3, #31
 811419c:	f003 0301 	and.w	r3, r3, #1
 81141a0:	b2db      	uxtb	r3, r3
 81141a2:	2b00      	cmp	r3, #0
 81141a4:	d007      	beq.n	81141b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 81141a6:	4b1a      	ldr	r3, [pc, #104]	@ (8114210 <sys_timeout_abs+0xd8>)
 81141a8:	681a      	ldr	r2, [r3, #0]
 81141aa:	693b      	ldr	r3, [r7, #16]
 81141ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 81141ae:	4a18      	ldr	r2, [pc, #96]	@ (8114210 <sys_timeout_abs+0xd8>)
 81141b0:	693b      	ldr	r3, [r7, #16]
 81141b2:	6013      	str	r3, [r2, #0]
 81141b4:	e023      	b.n	81141fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 81141b6:	4b16      	ldr	r3, [pc, #88]	@ (8114210 <sys_timeout_abs+0xd8>)
 81141b8:	681b      	ldr	r3, [r3, #0]
 81141ba:	617b      	str	r3, [r7, #20]
 81141bc:	e01a      	b.n	81141f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 81141be:	697b      	ldr	r3, [r7, #20]
 81141c0:	681b      	ldr	r3, [r3, #0]
 81141c2:	2b00      	cmp	r3, #0
 81141c4:	d00b      	beq.n	81141de <sys_timeout_abs+0xa6>
 81141c6:	693b      	ldr	r3, [r7, #16]
 81141c8:	685a      	ldr	r2, [r3, #4]
 81141ca:	697b      	ldr	r3, [r7, #20]
 81141cc:	681b      	ldr	r3, [r3, #0]
 81141ce:	685b      	ldr	r3, [r3, #4]
 81141d0:	1ad3      	subs	r3, r2, r3
 81141d2:	0fdb      	lsrs	r3, r3, #31
 81141d4:	f003 0301 	and.w	r3, r3, #1
 81141d8:	b2db      	uxtb	r3, r3
 81141da:	2b00      	cmp	r3, #0
 81141dc:	d007      	beq.n	81141ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 81141de:	697b      	ldr	r3, [r7, #20]
 81141e0:	681a      	ldr	r2, [r3, #0]
 81141e2:	693b      	ldr	r3, [r7, #16]
 81141e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 81141e6:	697b      	ldr	r3, [r7, #20]
 81141e8:	693a      	ldr	r2, [r7, #16]
 81141ea:	601a      	str	r2, [r3, #0]
        break;
 81141ec:	e007      	b.n	81141fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 81141ee:	697b      	ldr	r3, [r7, #20]
 81141f0:	681b      	ldr	r3, [r3, #0]
 81141f2:	617b      	str	r3, [r7, #20]
 81141f4:	697b      	ldr	r3, [r7, #20]
 81141f6:	2b00      	cmp	r3, #0
 81141f8:	d1e1      	bne.n	81141be <sys_timeout_abs+0x86>
 81141fa:	e000      	b.n	81141fe <sys_timeout_abs+0xc6>
    return;
 81141fc:	bf00      	nop
      }
    }
  }
}
 81141fe:	3718      	adds	r7, #24
 8114200:	46bd      	mov	sp, r7
 8114202:	bd80      	pop	{r7, pc}
 8114204:	0811ea6c 	.word	0x0811ea6c
 8114208:	0811ead0 	.word	0x0811ead0
 811420c:	0811eb10 	.word	0x0811eb10
 8114210:	10017748 	.word	0x10017748

08114214 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8114214:	b580      	push	{r7, lr}
 8114216:	b086      	sub	sp, #24
 8114218:	af00      	add	r7, sp, #0
 811421a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 811421c:	687b      	ldr	r3, [r7, #4]
 811421e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8114220:	697b      	ldr	r3, [r7, #20]
 8114222:	685b      	ldr	r3, [r3, #4]
 8114224:	4798      	blx	r3

  now = sys_now();
 8114226:	f7f0 f957 	bl	81044d8 <sys_now>
 811422a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 811422c:	697b      	ldr	r3, [r7, #20]
 811422e:	681a      	ldr	r2, [r3, #0]
 8114230:	4b0f      	ldr	r3, [pc, #60]	@ (8114270 <lwip_cyclic_timer+0x5c>)
 8114232:	681b      	ldr	r3, [r3, #0]
 8114234:	4413      	add	r3, r2
 8114236:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8114238:	68fa      	ldr	r2, [r7, #12]
 811423a:	693b      	ldr	r3, [r7, #16]
 811423c:	1ad3      	subs	r3, r2, r3
 811423e:	0fdb      	lsrs	r3, r3, #31
 8114240:	f003 0301 	and.w	r3, r3, #1
 8114244:	b2db      	uxtb	r3, r3
 8114246:	2b00      	cmp	r3, #0
 8114248:	d009      	beq.n	811425e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 811424a:	697b      	ldr	r3, [r7, #20]
 811424c:	681a      	ldr	r2, [r3, #0]
 811424e:	693b      	ldr	r3, [r7, #16]
 8114250:	4413      	add	r3, r2
 8114252:	687a      	ldr	r2, [r7, #4]
 8114254:	4907      	ldr	r1, [pc, #28]	@ (8114274 <lwip_cyclic_timer+0x60>)
 8114256:	4618      	mov	r0, r3
 8114258:	f7ff ff6e 	bl	8114138 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 811425c:	e004      	b.n	8114268 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 811425e:	687a      	ldr	r2, [r7, #4]
 8114260:	4904      	ldr	r1, [pc, #16]	@ (8114274 <lwip_cyclic_timer+0x60>)
 8114262:	68f8      	ldr	r0, [r7, #12]
 8114264:	f7ff ff68 	bl	8114138 <sys_timeout_abs>
}
 8114268:	bf00      	nop
 811426a:	3718      	adds	r7, #24
 811426c:	46bd      	mov	sp, r7
 811426e:	bd80      	pop	{r7, pc}
 8114270:	1001774c 	.word	0x1001774c
 8114274:	08114215 	.word	0x08114215

08114278 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8114278:	b580      	push	{r7, lr}
 811427a:	b082      	sub	sp, #8
 811427c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811427e:	2301      	movs	r3, #1
 8114280:	607b      	str	r3, [r7, #4]
 8114282:	e00e      	b.n	81142a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8114284:	4a0b      	ldr	r2, [pc, #44]	@ (81142b4 <sys_timeouts_init+0x3c>)
 8114286:	687b      	ldr	r3, [r7, #4]
 8114288:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 811428c:	687b      	ldr	r3, [r7, #4]
 811428e:	00db      	lsls	r3, r3, #3
 8114290:	4a08      	ldr	r2, [pc, #32]	@ (81142b4 <sys_timeouts_init+0x3c>)
 8114292:	4413      	add	r3, r2
 8114294:	461a      	mov	r2, r3
 8114296:	4908      	ldr	r1, [pc, #32]	@ (81142b8 <sys_timeouts_init+0x40>)
 8114298:	f000 f810 	bl	81142bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811429c:	687b      	ldr	r3, [r7, #4]
 811429e:	3301      	adds	r3, #1
 81142a0:	607b      	str	r3, [r7, #4]
 81142a2:	687b      	ldr	r3, [r7, #4]
 81142a4:	2b02      	cmp	r3, #2
 81142a6:	d9ed      	bls.n	8114284 <sys_timeouts_init+0xc>
  }
}
 81142a8:	bf00      	nop
 81142aa:	bf00      	nop
 81142ac:	3708      	adds	r7, #8
 81142ae:	46bd      	mov	sp, r7
 81142b0:	bd80      	pop	{r7, pc}
 81142b2:	bf00      	nop
 81142b4:	0811f034 	.word	0x0811f034
 81142b8:	08114215 	.word	0x08114215

081142bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 81142bc:	b580      	push	{r7, lr}
 81142be:	b086      	sub	sp, #24
 81142c0:	af00      	add	r7, sp, #0
 81142c2:	60f8      	str	r0, [r7, #12]
 81142c4:	60b9      	str	r1, [r7, #8]
 81142c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 81142c8:	68fb      	ldr	r3, [r7, #12]
 81142ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81142ce:	d306      	bcc.n	81142de <sys_timeout+0x22>
 81142d0:	4b0a      	ldr	r3, [pc, #40]	@ (81142fc <sys_timeout+0x40>)
 81142d2:	f240 1229 	movw	r2, #297	@ 0x129
 81142d6:	490a      	ldr	r1, [pc, #40]	@ (8114300 <sys_timeout+0x44>)
 81142d8:	480a      	ldr	r0, [pc, #40]	@ (8114304 <sys_timeout+0x48>)
 81142da:	f003 f8ad 	bl	8117438 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 81142de:	f7f0 f8fb 	bl	81044d8 <sys_now>
 81142e2:	4602      	mov	r2, r0
 81142e4:	68fb      	ldr	r3, [r7, #12]
 81142e6:	4413      	add	r3, r2
 81142e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 81142ea:	687a      	ldr	r2, [r7, #4]
 81142ec:	68b9      	ldr	r1, [r7, #8]
 81142ee:	6978      	ldr	r0, [r7, #20]
 81142f0:	f7ff ff22 	bl	8114138 <sys_timeout_abs>
#endif
}
 81142f4:	bf00      	nop
 81142f6:	3718      	adds	r7, #24
 81142f8:	46bd      	mov	sp, r7
 81142fa:	bd80      	pop	{r7, pc}
 81142fc:	0811ea6c 	.word	0x0811ea6c
 8114300:	0811eb38 	.word	0x0811eb38
 8114304:	0811eb10 	.word	0x0811eb10

08114308 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8114308:	b580      	push	{r7, lr}
 811430a:	b084      	sub	sp, #16
 811430c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 811430e:	f7f0 f8e3 	bl	81044d8 <sys_now>
 8114312:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8114314:	4b1a      	ldr	r3, [pc, #104]	@ (8114380 <sys_check_timeouts+0x78>)
 8114316:	781b      	ldrb	r3, [r3, #0]
 8114318:	b2db      	uxtb	r3, r3
 811431a:	2b00      	cmp	r3, #0
 811431c:	d001      	beq.n	8114322 <sys_check_timeouts+0x1a>
 811431e:	f7f9 f9d9 	bl	810d6d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8114322:	4b18      	ldr	r3, [pc, #96]	@ (8114384 <sys_check_timeouts+0x7c>)
 8114324:	681b      	ldr	r3, [r3, #0]
 8114326:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8114328:	68bb      	ldr	r3, [r7, #8]
 811432a:	2b00      	cmp	r3, #0
 811432c:	d022      	beq.n	8114374 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 811432e:	68bb      	ldr	r3, [r7, #8]
 8114330:	685b      	ldr	r3, [r3, #4]
 8114332:	68fa      	ldr	r2, [r7, #12]
 8114334:	1ad3      	subs	r3, r2, r3
 8114336:	0fdb      	lsrs	r3, r3, #31
 8114338:	f003 0301 	and.w	r3, r3, #1
 811433c:	b2db      	uxtb	r3, r3
 811433e:	2b00      	cmp	r3, #0
 8114340:	d11a      	bne.n	8114378 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8114342:	68bb      	ldr	r3, [r7, #8]
 8114344:	681b      	ldr	r3, [r3, #0]
 8114346:	4a0f      	ldr	r2, [pc, #60]	@ (8114384 <sys_check_timeouts+0x7c>)
 8114348:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 811434a:	68bb      	ldr	r3, [r7, #8]
 811434c:	689b      	ldr	r3, [r3, #8]
 811434e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8114350:	68bb      	ldr	r3, [r7, #8]
 8114352:	68db      	ldr	r3, [r3, #12]
 8114354:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8114356:	68bb      	ldr	r3, [r7, #8]
 8114358:	685b      	ldr	r3, [r3, #4]
 811435a:	4a0b      	ldr	r2, [pc, #44]	@ (8114388 <sys_check_timeouts+0x80>)
 811435c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 811435e:	68b9      	ldr	r1, [r7, #8]
 8114360:	2006      	movs	r0, #6
 8114362:	f7f8 fe7b 	bl	810d05c <memp_free>
    if (handler != NULL) {
 8114366:	687b      	ldr	r3, [r7, #4]
 8114368:	2b00      	cmp	r3, #0
 811436a:	d0d3      	beq.n	8114314 <sys_check_timeouts+0xc>
      handler(arg);
 811436c:	687b      	ldr	r3, [r7, #4]
 811436e:	6838      	ldr	r0, [r7, #0]
 8114370:	4798      	blx	r3
  do {
 8114372:	e7cf      	b.n	8114314 <sys_check_timeouts+0xc>
      return;
 8114374:	bf00      	nop
 8114376:	e000      	b.n	811437a <sys_check_timeouts+0x72>
      return;
 8114378:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 811437a:	3710      	adds	r7, #16
 811437c:	46bd      	mov	sp, r7
 811437e:	bd80      	pop	{r7, pc}
 8114380:	100176f5 	.word	0x100176f5
 8114384:	10017748 	.word	0x10017748
 8114388:	1001774c 	.word	0x1001774c

0811438c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 811438c:	b580      	push	{r7, lr}
 811438e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8114390:	f002 f872 	bl	8116478 <rand>
 8114394:	4603      	mov	r3, r0
 8114396:	b29b      	uxth	r3, r3
 8114398:	f3c3 030d 	ubfx	r3, r3, #0, #14
 811439c:	b29b      	uxth	r3, r3
 811439e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 81143a2:	b29a      	uxth	r2, r3
 81143a4:	4b01      	ldr	r3, [pc, #4]	@ (81143ac <udp_init+0x20>)
 81143a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 81143a8:	bf00      	nop
 81143aa:	bd80      	pop	{r7, pc}
 81143ac:	100001c8 	.word	0x100001c8

081143b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 81143b0:	b480      	push	{r7}
 81143b2:	b083      	sub	sp, #12
 81143b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 81143b6:	2300      	movs	r3, #0
 81143b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 81143ba:	4b17      	ldr	r3, [pc, #92]	@ (8114418 <udp_new_port+0x68>)
 81143bc:	881b      	ldrh	r3, [r3, #0]
 81143be:	1c5a      	adds	r2, r3, #1
 81143c0:	b291      	uxth	r1, r2
 81143c2:	4a15      	ldr	r2, [pc, #84]	@ (8114418 <udp_new_port+0x68>)
 81143c4:	8011      	strh	r1, [r2, #0]
 81143c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81143ca:	4293      	cmp	r3, r2
 81143cc:	d103      	bne.n	81143d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 81143ce:	4b12      	ldr	r3, [pc, #72]	@ (8114418 <udp_new_port+0x68>)
 81143d0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 81143d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 81143d6:	4b11      	ldr	r3, [pc, #68]	@ (811441c <udp_new_port+0x6c>)
 81143d8:	681b      	ldr	r3, [r3, #0]
 81143da:	603b      	str	r3, [r7, #0]
 81143dc:	e011      	b.n	8114402 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 81143de:	683b      	ldr	r3, [r7, #0]
 81143e0:	8a5a      	ldrh	r2, [r3, #18]
 81143e2:	4b0d      	ldr	r3, [pc, #52]	@ (8114418 <udp_new_port+0x68>)
 81143e4:	881b      	ldrh	r3, [r3, #0]
 81143e6:	429a      	cmp	r2, r3
 81143e8:	d108      	bne.n	81143fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 81143ea:	88fb      	ldrh	r3, [r7, #6]
 81143ec:	3301      	adds	r3, #1
 81143ee:	80fb      	strh	r3, [r7, #6]
 81143f0:	88fb      	ldrh	r3, [r7, #6]
 81143f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81143f6:	d3e0      	bcc.n	81143ba <udp_new_port+0xa>
        return 0;
 81143f8:	2300      	movs	r3, #0
 81143fa:	e007      	b.n	811440c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 81143fc:	683b      	ldr	r3, [r7, #0]
 81143fe:	68db      	ldr	r3, [r3, #12]
 8114400:	603b      	str	r3, [r7, #0]
 8114402:	683b      	ldr	r3, [r7, #0]
 8114404:	2b00      	cmp	r3, #0
 8114406:	d1ea      	bne.n	81143de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8114408:	4b03      	ldr	r3, [pc, #12]	@ (8114418 <udp_new_port+0x68>)
 811440a:	881b      	ldrh	r3, [r3, #0]
}
 811440c:	4618      	mov	r0, r3
 811440e:	370c      	adds	r7, #12
 8114410:	46bd      	mov	sp, r7
 8114412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114416:	4770      	bx	lr
 8114418:	100001c8 	.word	0x100001c8
 811441c:	10017754 	.word	0x10017754

08114420 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8114420:	b580      	push	{r7, lr}
 8114422:	b084      	sub	sp, #16
 8114424:	af00      	add	r7, sp, #0
 8114426:	60f8      	str	r0, [r7, #12]
 8114428:	60b9      	str	r1, [r7, #8]
 811442a:	4613      	mov	r3, r2
 811442c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 811442e:	68fb      	ldr	r3, [r7, #12]
 8114430:	2b00      	cmp	r3, #0
 8114432:	d105      	bne.n	8114440 <udp_input_local_match+0x20>
 8114434:	4b27      	ldr	r3, [pc, #156]	@ (81144d4 <udp_input_local_match+0xb4>)
 8114436:	2287      	movs	r2, #135	@ 0x87
 8114438:	4927      	ldr	r1, [pc, #156]	@ (81144d8 <udp_input_local_match+0xb8>)
 811443a:	4828      	ldr	r0, [pc, #160]	@ (81144dc <udp_input_local_match+0xbc>)
 811443c:	f002 fffc 	bl	8117438 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8114440:	68bb      	ldr	r3, [r7, #8]
 8114442:	2b00      	cmp	r3, #0
 8114444:	d105      	bne.n	8114452 <udp_input_local_match+0x32>
 8114446:	4b23      	ldr	r3, [pc, #140]	@ (81144d4 <udp_input_local_match+0xb4>)
 8114448:	2288      	movs	r2, #136	@ 0x88
 811444a:	4925      	ldr	r1, [pc, #148]	@ (81144e0 <udp_input_local_match+0xc0>)
 811444c:	4823      	ldr	r0, [pc, #140]	@ (81144dc <udp_input_local_match+0xbc>)
 811444e:	f002 fff3 	bl	8117438 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8114452:	68fb      	ldr	r3, [r7, #12]
 8114454:	7a1b      	ldrb	r3, [r3, #8]
 8114456:	2b00      	cmp	r3, #0
 8114458:	d00b      	beq.n	8114472 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811445a:	68fb      	ldr	r3, [r7, #12]
 811445c:	7a1a      	ldrb	r2, [r3, #8]
 811445e:	4b21      	ldr	r3, [pc, #132]	@ (81144e4 <udp_input_local_match+0xc4>)
 8114460:	685b      	ldr	r3, [r3, #4]
 8114462:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8114466:	3301      	adds	r3, #1
 8114468:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811446a:	429a      	cmp	r2, r3
 811446c:	d001      	beq.n	8114472 <udp_input_local_match+0x52>
    return 0;
 811446e:	2300      	movs	r3, #0
 8114470:	e02b      	b.n	81144ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8114472:	79fb      	ldrb	r3, [r7, #7]
 8114474:	2b00      	cmp	r3, #0
 8114476:	d018      	beq.n	81144aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8114478:	68fb      	ldr	r3, [r7, #12]
 811447a:	2b00      	cmp	r3, #0
 811447c:	d013      	beq.n	81144a6 <udp_input_local_match+0x86>
 811447e:	68fb      	ldr	r3, [r7, #12]
 8114480:	681b      	ldr	r3, [r3, #0]
 8114482:	2b00      	cmp	r3, #0
 8114484:	d00f      	beq.n	81144a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8114486:	4b17      	ldr	r3, [pc, #92]	@ (81144e4 <udp_input_local_match+0xc4>)
 8114488:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811448e:	d00a      	beq.n	81144a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8114490:	68fb      	ldr	r3, [r7, #12]
 8114492:	681a      	ldr	r2, [r3, #0]
 8114494:	4b13      	ldr	r3, [pc, #76]	@ (81144e4 <udp_input_local_match+0xc4>)
 8114496:	695b      	ldr	r3, [r3, #20]
 8114498:	405a      	eors	r2, r3
 811449a:	68bb      	ldr	r3, [r7, #8]
 811449c:	3308      	adds	r3, #8
 811449e:	681b      	ldr	r3, [r3, #0]
 81144a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 81144a2:	2b00      	cmp	r3, #0
 81144a4:	d110      	bne.n	81144c8 <udp_input_local_match+0xa8>
          return 1;
 81144a6:	2301      	movs	r3, #1
 81144a8:	e00f      	b.n	81144ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 81144aa:	68fb      	ldr	r3, [r7, #12]
 81144ac:	2b00      	cmp	r3, #0
 81144ae:	d009      	beq.n	81144c4 <udp_input_local_match+0xa4>
 81144b0:	68fb      	ldr	r3, [r7, #12]
 81144b2:	681b      	ldr	r3, [r3, #0]
 81144b4:	2b00      	cmp	r3, #0
 81144b6:	d005      	beq.n	81144c4 <udp_input_local_match+0xa4>
 81144b8:	68fb      	ldr	r3, [r7, #12]
 81144ba:	681a      	ldr	r2, [r3, #0]
 81144bc:	4b09      	ldr	r3, [pc, #36]	@ (81144e4 <udp_input_local_match+0xc4>)
 81144be:	695b      	ldr	r3, [r3, #20]
 81144c0:	429a      	cmp	r2, r3
 81144c2:	d101      	bne.n	81144c8 <udp_input_local_match+0xa8>
        return 1;
 81144c4:	2301      	movs	r3, #1
 81144c6:	e000      	b.n	81144ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 81144c8:	2300      	movs	r3, #0
}
 81144ca:	4618      	mov	r0, r3
 81144cc:	3710      	adds	r7, #16
 81144ce:	46bd      	mov	sp, r7
 81144d0:	bd80      	pop	{r7, pc}
 81144d2:	bf00      	nop
 81144d4:	0811eb84 	.word	0x0811eb84
 81144d8:	0811ebe4 	.word	0x0811ebe4
 81144dc:	0811ec08 	.word	0x0811ec08
 81144e0:	0811ec30 	.word	0x0811ec30
 81144e4:	100145b0 	.word	0x100145b0

081144e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 81144e8:	b590      	push	{r4, r7, lr}
 81144ea:	b08d      	sub	sp, #52	@ 0x34
 81144ec:	af02      	add	r7, sp, #8
 81144ee:	6078      	str	r0, [r7, #4]
 81144f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 81144f2:	2300      	movs	r3, #0
 81144f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 81144f6:	687b      	ldr	r3, [r7, #4]
 81144f8:	2b00      	cmp	r3, #0
 81144fa:	d105      	bne.n	8114508 <udp_input+0x20>
 81144fc:	4b7c      	ldr	r3, [pc, #496]	@ (81146f0 <udp_input+0x208>)
 81144fe:	22cf      	movs	r2, #207	@ 0xcf
 8114500:	497c      	ldr	r1, [pc, #496]	@ (81146f4 <udp_input+0x20c>)
 8114502:	487d      	ldr	r0, [pc, #500]	@ (81146f8 <udp_input+0x210>)
 8114504:	f002 ff98 	bl	8117438 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8114508:	683b      	ldr	r3, [r7, #0]
 811450a:	2b00      	cmp	r3, #0
 811450c:	d105      	bne.n	811451a <udp_input+0x32>
 811450e:	4b78      	ldr	r3, [pc, #480]	@ (81146f0 <udp_input+0x208>)
 8114510:	22d0      	movs	r2, #208	@ 0xd0
 8114512:	497a      	ldr	r1, [pc, #488]	@ (81146fc <udp_input+0x214>)
 8114514:	4878      	ldr	r0, [pc, #480]	@ (81146f8 <udp_input+0x210>)
 8114516:	f002 ff8f 	bl	8117438 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 811451a:	687b      	ldr	r3, [r7, #4]
 811451c:	895b      	ldrh	r3, [r3, #10]
 811451e:	2b07      	cmp	r3, #7
 8114520:	d803      	bhi.n	811452a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8114522:	6878      	ldr	r0, [r7, #4]
 8114524:	f7f9 fc10 	bl	810dd48 <pbuf_free>
    goto end;
 8114528:	e0de      	b.n	81146e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 811452a:	687b      	ldr	r3, [r7, #4]
 811452c:	685b      	ldr	r3, [r3, #4]
 811452e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8114530:	4b73      	ldr	r3, [pc, #460]	@ (8114700 <udp_input+0x218>)
 8114532:	695b      	ldr	r3, [r3, #20]
 8114534:	4a72      	ldr	r2, [pc, #456]	@ (8114700 <udp_input+0x218>)
 8114536:	6812      	ldr	r2, [r2, #0]
 8114538:	4611      	mov	r1, r2
 811453a:	4618      	mov	r0, r3
 811453c:	f7f7 fa6e 	bl	810ba1c <ip4_addr_isbroadcast_u32>
 8114540:	4603      	mov	r3, r0
 8114542:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8114544:	697b      	ldr	r3, [r7, #20]
 8114546:	881b      	ldrh	r3, [r3, #0]
 8114548:	b29b      	uxth	r3, r3
 811454a:	4618      	mov	r0, r3
 811454c:	f7f5 fcf8 	bl	8109f40 <lwip_htons>
 8114550:	4603      	mov	r3, r0
 8114552:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8114554:	697b      	ldr	r3, [r7, #20]
 8114556:	885b      	ldrh	r3, [r3, #2]
 8114558:	b29b      	uxth	r3, r3
 811455a:	4618      	mov	r0, r3
 811455c:	f7f5 fcf0 	bl	8109f40 <lwip_htons>
 8114560:	4603      	mov	r3, r0
 8114562:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8114564:	2300      	movs	r3, #0
 8114566:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8114568:	2300      	movs	r3, #0
 811456a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 811456c:	2300      	movs	r3, #0
 811456e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8114570:	4b64      	ldr	r3, [pc, #400]	@ (8114704 <udp_input+0x21c>)
 8114572:	681b      	ldr	r3, [r3, #0]
 8114574:	627b      	str	r3, [r7, #36]	@ 0x24
 8114576:	e054      	b.n	8114622 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8114578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811457a:	8a5b      	ldrh	r3, [r3, #18]
 811457c:	89fa      	ldrh	r2, [r7, #14]
 811457e:	429a      	cmp	r2, r3
 8114580:	d14a      	bne.n	8114618 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8114582:	7cfb      	ldrb	r3, [r7, #19]
 8114584:	461a      	mov	r2, r3
 8114586:	6839      	ldr	r1, [r7, #0]
 8114588:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811458a:	f7ff ff49 	bl	8114420 <udp_input_local_match>
 811458e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8114590:	2b00      	cmp	r3, #0
 8114592:	d041      	beq.n	8114618 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8114594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114596:	7c1b      	ldrb	r3, [r3, #16]
 8114598:	f003 0304 	and.w	r3, r3, #4
 811459c:	2b00      	cmp	r3, #0
 811459e:	d11d      	bne.n	81145dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 81145a0:	69fb      	ldr	r3, [r7, #28]
 81145a2:	2b00      	cmp	r3, #0
 81145a4:	d102      	bne.n	81145ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 81145a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81145a8:	61fb      	str	r3, [r7, #28]
 81145aa:	e017      	b.n	81145dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 81145ac:	7cfb      	ldrb	r3, [r7, #19]
 81145ae:	2b00      	cmp	r3, #0
 81145b0:	d014      	beq.n	81145dc <udp_input+0xf4>
 81145b2:	4b53      	ldr	r3, [pc, #332]	@ (8114700 <udp_input+0x218>)
 81145b4:	695b      	ldr	r3, [r3, #20]
 81145b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81145ba:	d10f      	bne.n	81145dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 81145bc:	69fb      	ldr	r3, [r7, #28]
 81145be:	681a      	ldr	r2, [r3, #0]
 81145c0:	683b      	ldr	r3, [r7, #0]
 81145c2:	3304      	adds	r3, #4
 81145c4:	681b      	ldr	r3, [r3, #0]
 81145c6:	429a      	cmp	r2, r3
 81145c8:	d008      	beq.n	81145dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 81145ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81145cc:	681a      	ldr	r2, [r3, #0]
 81145ce:	683b      	ldr	r3, [r7, #0]
 81145d0:	3304      	adds	r3, #4
 81145d2:	681b      	ldr	r3, [r3, #0]
 81145d4:	429a      	cmp	r2, r3
 81145d6:	d101      	bne.n	81145dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 81145d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81145da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 81145dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81145de:	8a9b      	ldrh	r3, [r3, #20]
 81145e0:	8a3a      	ldrh	r2, [r7, #16]
 81145e2:	429a      	cmp	r2, r3
 81145e4:	d118      	bne.n	8114618 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 81145e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81145e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 81145ea:	2b00      	cmp	r3, #0
 81145ec:	d005      	beq.n	81145fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 81145ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81145f0:	685a      	ldr	r2, [r3, #4]
 81145f2:	4b43      	ldr	r3, [pc, #268]	@ (8114700 <udp_input+0x218>)
 81145f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 81145f6:	429a      	cmp	r2, r3
 81145f8:	d10e      	bne.n	8114618 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 81145fa:	6a3b      	ldr	r3, [r7, #32]
 81145fc:	2b00      	cmp	r3, #0
 81145fe:	d014      	beq.n	811462a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8114600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114602:	68da      	ldr	r2, [r3, #12]
 8114604:	6a3b      	ldr	r3, [r7, #32]
 8114606:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8114608:	4b3e      	ldr	r3, [pc, #248]	@ (8114704 <udp_input+0x21c>)
 811460a:	681a      	ldr	r2, [r3, #0]
 811460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811460e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8114610:	4a3c      	ldr	r2, [pc, #240]	@ (8114704 <udp_input+0x21c>)
 8114612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114614:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8114616:	e008      	b.n	811462a <udp_input+0x142>
      }
    }

    prev = pcb;
 8114618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811461a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811461e:	68db      	ldr	r3, [r3, #12]
 8114620:	627b      	str	r3, [r7, #36]	@ 0x24
 8114622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114624:	2b00      	cmp	r3, #0
 8114626:	d1a7      	bne.n	8114578 <udp_input+0x90>
 8114628:	e000      	b.n	811462c <udp_input+0x144>
        break;
 811462a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 811462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811462e:	2b00      	cmp	r3, #0
 8114630:	d101      	bne.n	8114636 <udp_input+0x14e>
    pcb = uncon_pcb;
 8114632:	69fb      	ldr	r3, [r7, #28]
 8114634:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8114636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114638:	2b00      	cmp	r3, #0
 811463a:	d002      	beq.n	8114642 <udp_input+0x15a>
    for_us = 1;
 811463c:	2301      	movs	r3, #1
 811463e:	76fb      	strb	r3, [r7, #27]
 8114640:	e00a      	b.n	8114658 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8114642:	683b      	ldr	r3, [r7, #0]
 8114644:	3304      	adds	r3, #4
 8114646:	681a      	ldr	r2, [r3, #0]
 8114648:	4b2d      	ldr	r3, [pc, #180]	@ (8114700 <udp_input+0x218>)
 811464a:	695b      	ldr	r3, [r3, #20]
 811464c:	429a      	cmp	r2, r3
 811464e:	bf0c      	ite	eq
 8114650:	2301      	moveq	r3, #1
 8114652:	2300      	movne	r3, #0
 8114654:	b2db      	uxtb	r3, r3
 8114656:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8114658:	7efb      	ldrb	r3, [r7, #27]
 811465a:	2b00      	cmp	r3, #0
 811465c:	d041      	beq.n	81146e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 811465e:	2108      	movs	r1, #8
 8114660:	6878      	ldr	r0, [r7, #4]
 8114662:	f7f9 faeb 	bl	810dc3c <pbuf_remove_header>
 8114666:	4603      	mov	r3, r0
 8114668:	2b00      	cmp	r3, #0
 811466a:	d00a      	beq.n	8114682 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 811466c:	4b20      	ldr	r3, [pc, #128]	@ (81146f0 <udp_input+0x208>)
 811466e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8114672:	4925      	ldr	r1, [pc, #148]	@ (8114708 <udp_input+0x220>)
 8114674:	4820      	ldr	r0, [pc, #128]	@ (81146f8 <udp_input+0x210>)
 8114676:	f002 fedf 	bl	8117438 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 811467a:	6878      	ldr	r0, [r7, #4]
 811467c:	f7f9 fb64 	bl	810dd48 <pbuf_free>
      goto end;
 8114680:	e032      	b.n	81146e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8114682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114684:	2b00      	cmp	r3, #0
 8114686:	d012      	beq.n	81146ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8114688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811468a:	699b      	ldr	r3, [r3, #24]
 811468c:	2b00      	cmp	r3, #0
 811468e:	d00a      	beq.n	81146a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8114690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114692:	699c      	ldr	r4, [r3, #24]
 8114694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114696:	69d8      	ldr	r0, [r3, #28]
 8114698:	8a3b      	ldrh	r3, [r7, #16]
 811469a:	9300      	str	r3, [sp, #0]
 811469c:	4b1b      	ldr	r3, [pc, #108]	@ (811470c <udp_input+0x224>)
 811469e:	687a      	ldr	r2, [r7, #4]
 81146a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81146a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 81146a4:	e021      	b.n	81146ea <udp_input+0x202>
        pbuf_free(p);
 81146a6:	6878      	ldr	r0, [r7, #4]
 81146a8:	f7f9 fb4e 	bl	810dd48 <pbuf_free>
        goto end;
 81146ac:	e01c      	b.n	81146e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 81146ae:	7cfb      	ldrb	r3, [r7, #19]
 81146b0:	2b00      	cmp	r3, #0
 81146b2:	d112      	bne.n	81146da <udp_input+0x1f2>
 81146b4:	4b12      	ldr	r3, [pc, #72]	@ (8114700 <udp_input+0x218>)
 81146b6:	695b      	ldr	r3, [r3, #20]
 81146b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81146bc:	2be0      	cmp	r3, #224	@ 0xe0
 81146be:	d00c      	beq.n	81146da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 81146c0:	4b0f      	ldr	r3, [pc, #60]	@ (8114700 <udp_input+0x218>)
 81146c2:	899b      	ldrh	r3, [r3, #12]
 81146c4:	3308      	adds	r3, #8
 81146c6:	b29b      	uxth	r3, r3
 81146c8:	b21b      	sxth	r3, r3
 81146ca:	4619      	mov	r1, r3
 81146cc:	6878      	ldr	r0, [r7, #4]
 81146ce:	f7f9 fb28 	bl	810dd22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 81146d2:	2103      	movs	r1, #3
 81146d4:	6878      	ldr	r0, [r7, #4]
 81146d6:	f7f6 fda5 	bl	810b224 <icmp_dest_unreach>
      pbuf_free(p);
 81146da:	6878      	ldr	r0, [r7, #4]
 81146dc:	f7f9 fb34 	bl	810dd48 <pbuf_free>
  return;
 81146e0:	e003      	b.n	81146ea <udp_input+0x202>
    pbuf_free(p);
 81146e2:	6878      	ldr	r0, [r7, #4]
 81146e4:	f7f9 fb30 	bl	810dd48 <pbuf_free>
  return;
 81146e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 81146ea:	372c      	adds	r7, #44	@ 0x2c
 81146ec:	46bd      	mov	sp, r7
 81146ee:	bd90      	pop	{r4, r7, pc}
 81146f0:	0811eb84 	.word	0x0811eb84
 81146f4:	0811ec58 	.word	0x0811ec58
 81146f8:	0811ec08 	.word	0x0811ec08
 81146fc:	0811ec70 	.word	0x0811ec70
 8114700:	100145b0 	.word	0x100145b0
 8114704:	10017754 	.word	0x10017754
 8114708:	0811ec8c 	.word	0x0811ec8c
 811470c:	100145c0 	.word	0x100145c0

08114710 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8114710:	b580      	push	{r7, lr}
 8114712:	b086      	sub	sp, #24
 8114714:	af00      	add	r7, sp, #0
 8114716:	60f8      	str	r0, [r7, #12]
 8114718:	60b9      	str	r1, [r7, #8]
 811471a:	4613      	mov	r3, r2
 811471c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811471e:	68bb      	ldr	r3, [r7, #8]
 8114720:	2b00      	cmp	r3, #0
 8114722:	d101      	bne.n	8114728 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8114724:	4b39      	ldr	r3, [pc, #228]	@ (811480c <udp_bind+0xfc>)
 8114726:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8114728:	68fb      	ldr	r3, [r7, #12]
 811472a:	2b00      	cmp	r3, #0
 811472c:	d109      	bne.n	8114742 <udp_bind+0x32>
 811472e:	4b38      	ldr	r3, [pc, #224]	@ (8114810 <udp_bind+0x100>)
 8114730:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8114734:	4937      	ldr	r1, [pc, #220]	@ (8114814 <udp_bind+0x104>)
 8114736:	4838      	ldr	r0, [pc, #224]	@ (8114818 <udp_bind+0x108>)
 8114738:	f002 fe7e 	bl	8117438 <iprintf>
 811473c:	f06f 030f 	mvn.w	r3, #15
 8114740:	e060      	b.n	8114804 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8114742:	2300      	movs	r3, #0
 8114744:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8114746:	4b35      	ldr	r3, [pc, #212]	@ (811481c <udp_bind+0x10c>)
 8114748:	681b      	ldr	r3, [r3, #0]
 811474a:	617b      	str	r3, [r7, #20]
 811474c:	e009      	b.n	8114762 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 811474e:	68fa      	ldr	r2, [r7, #12]
 8114750:	697b      	ldr	r3, [r7, #20]
 8114752:	429a      	cmp	r2, r3
 8114754:	d102      	bne.n	811475c <udp_bind+0x4c>
      rebind = 1;
 8114756:	2301      	movs	r3, #1
 8114758:	74fb      	strb	r3, [r7, #19]
      break;
 811475a:	e005      	b.n	8114768 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 811475c:	697b      	ldr	r3, [r7, #20]
 811475e:	68db      	ldr	r3, [r3, #12]
 8114760:	617b      	str	r3, [r7, #20]
 8114762:	697b      	ldr	r3, [r7, #20]
 8114764:	2b00      	cmp	r3, #0
 8114766:	d1f2      	bne.n	811474e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8114768:	88fb      	ldrh	r3, [r7, #6]
 811476a:	2b00      	cmp	r3, #0
 811476c:	d109      	bne.n	8114782 <udp_bind+0x72>
    port = udp_new_port();
 811476e:	f7ff fe1f 	bl	81143b0 <udp_new_port>
 8114772:	4603      	mov	r3, r0
 8114774:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8114776:	88fb      	ldrh	r3, [r7, #6]
 8114778:	2b00      	cmp	r3, #0
 811477a:	d12c      	bne.n	81147d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 811477c:	f06f 0307 	mvn.w	r3, #7
 8114780:	e040      	b.n	8114804 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8114782:	4b26      	ldr	r3, [pc, #152]	@ (811481c <udp_bind+0x10c>)
 8114784:	681b      	ldr	r3, [r3, #0]
 8114786:	617b      	str	r3, [r7, #20]
 8114788:	e022      	b.n	81147d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 811478a:	68fa      	ldr	r2, [r7, #12]
 811478c:	697b      	ldr	r3, [r7, #20]
 811478e:	429a      	cmp	r2, r3
 8114790:	d01b      	beq.n	81147ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8114792:	697b      	ldr	r3, [r7, #20]
 8114794:	8a5b      	ldrh	r3, [r3, #18]
 8114796:	88fa      	ldrh	r2, [r7, #6]
 8114798:	429a      	cmp	r2, r3
 811479a:	d116      	bne.n	81147ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 811479c:	697b      	ldr	r3, [r7, #20]
 811479e:	681a      	ldr	r2, [r3, #0]
 81147a0:	68bb      	ldr	r3, [r7, #8]
 81147a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 81147a4:	429a      	cmp	r2, r3
 81147a6:	d00d      	beq.n	81147c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81147a8:	68bb      	ldr	r3, [r7, #8]
 81147aa:	2b00      	cmp	r3, #0
 81147ac:	d00a      	beq.n	81147c4 <udp_bind+0xb4>
 81147ae:	68bb      	ldr	r3, [r7, #8]
 81147b0:	681b      	ldr	r3, [r3, #0]
 81147b2:	2b00      	cmp	r3, #0
 81147b4:	d006      	beq.n	81147c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 81147b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81147b8:	2b00      	cmp	r3, #0
 81147ba:	d003      	beq.n	81147c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 81147bc:	697b      	ldr	r3, [r7, #20]
 81147be:	681b      	ldr	r3, [r3, #0]
 81147c0:	2b00      	cmp	r3, #0
 81147c2:	d102      	bne.n	81147ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 81147c4:	f06f 0307 	mvn.w	r3, #7
 81147c8:	e01c      	b.n	8114804 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81147ca:	697b      	ldr	r3, [r7, #20]
 81147cc:	68db      	ldr	r3, [r3, #12]
 81147ce:	617b      	str	r3, [r7, #20]
 81147d0:	697b      	ldr	r3, [r7, #20]
 81147d2:	2b00      	cmp	r3, #0
 81147d4:	d1d9      	bne.n	811478a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 81147d6:	68bb      	ldr	r3, [r7, #8]
 81147d8:	2b00      	cmp	r3, #0
 81147da:	d002      	beq.n	81147e2 <udp_bind+0xd2>
 81147dc:	68bb      	ldr	r3, [r7, #8]
 81147de:	681b      	ldr	r3, [r3, #0]
 81147e0:	e000      	b.n	81147e4 <udp_bind+0xd4>
 81147e2:	2300      	movs	r3, #0
 81147e4:	68fa      	ldr	r2, [r7, #12]
 81147e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 81147e8:	68fb      	ldr	r3, [r7, #12]
 81147ea:	88fa      	ldrh	r2, [r7, #6]
 81147ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 81147ee:	7cfb      	ldrb	r3, [r7, #19]
 81147f0:	2b00      	cmp	r3, #0
 81147f2:	d106      	bne.n	8114802 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 81147f4:	4b09      	ldr	r3, [pc, #36]	@ (811481c <udp_bind+0x10c>)
 81147f6:	681a      	ldr	r2, [r3, #0]
 81147f8:	68fb      	ldr	r3, [r7, #12]
 81147fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 81147fc:	4a07      	ldr	r2, [pc, #28]	@ (811481c <udp_bind+0x10c>)
 81147fe:	68fb      	ldr	r3, [r7, #12]
 8114800:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8114802:	2300      	movs	r3, #0
}
 8114804:	4618      	mov	r0, r3
 8114806:	3718      	adds	r7, #24
 8114808:	46bd      	mov	sp, r7
 811480a:	bd80      	pop	{r7, pc}
 811480c:	0811ef78 	.word	0x0811ef78
 8114810:	0811eb84 	.word	0x0811eb84
 8114814:	0811ee7c 	.word	0x0811ee7c
 8114818:	0811ec08 	.word	0x0811ec08
 811481c:	10017754 	.word	0x10017754

08114820 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8114820:	b580      	push	{r7, lr}
 8114822:	b082      	sub	sp, #8
 8114824:	af00      	add	r7, sp, #0
 8114826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8114828:	687b      	ldr	r3, [r7, #4]
 811482a:	2b00      	cmp	r3, #0
 811482c:	d107      	bne.n	811483e <udp_disconnect+0x1e>
 811482e:	4b0d      	ldr	r3, [pc, #52]	@ (8114864 <udp_disconnect+0x44>)
 8114830:	f240 426a 	movw	r2, #1130	@ 0x46a
 8114834:	490c      	ldr	r1, [pc, #48]	@ (8114868 <udp_disconnect+0x48>)
 8114836:	480d      	ldr	r0, [pc, #52]	@ (811486c <udp_disconnect+0x4c>)
 8114838:	f002 fdfe 	bl	8117438 <iprintf>
 811483c:	e00f      	b.n	811485e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 811483e:	687b      	ldr	r3, [r7, #4]
 8114840:	2200      	movs	r2, #0
 8114842:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8114844:	687b      	ldr	r3, [r7, #4]
 8114846:	2200      	movs	r2, #0
 8114848:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 811484a:	687b      	ldr	r3, [r7, #4]
 811484c:	2200      	movs	r2, #0
 811484e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8114850:	687b      	ldr	r3, [r7, #4]
 8114852:	7c1b      	ldrb	r3, [r3, #16]
 8114854:	f023 0304 	bic.w	r3, r3, #4
 8114858:	b2da      	uxtb	r2, r3
 811485a:	687b      	ldr	r3, [r7, #4]
 811485c:	741a      	strb	r2, [r3, #16]
}
 811485e:	3708      	adds	r7, #8
 8114860:	46bd      	mov	sp, r7
 8114862:	bd80      	pop	{r7, pc}
 8114864:	0811eb84 	.word	0x0811eb84
 8114868:	0811eecc 	.word	0x0811eecc
 811486c:	0811ec08 	.word	0x0811ec08

08114870 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8114870:	b580      	push	{r7, lr}
 8114872:	b084      	sub	sp, #16
 8114874:	af00      	add	r7, sp, #0
 8114876:	60f8      	str	r0, [r7, #12]
 8114878:	60b9      	str	r1, [r7, #8]
 811487a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 811487c:	68fb      	ldr	r3, [r7, #12]
 811487e:	2b00      	cmp	r3, #0
 8114880:	d107      	bne.n	8114892 <udp_recv+0x22>
 8114882:	4b08      	ldr	r3, [pc, #32]	@ (81148a4 <udp_recv+0x34>)
 8114884:	f240 428a 	movw	r2, #1162	@ 0x48a
 8114888:	4907      	ldr	r1, [pc, #28]	@ (81148a8 <udp_recv+0x38>)
 811488a:	4808      	ldr	r0, [pc, #32]	@ (81148ac <udp_recv+0x3c>)
 811488c:	f002 fdd4 	bl	8117438 <iprintf>
 8114890:	e005      	b.n	811489e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8114892:	68fb      	ldr	r3, [r7, #12]
 8114894:	68ba      	ldr	r2, [r7, #8]
 8114896:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8114898:	68fb      	ldr	r3, [r7, #12]
 811489a:	687a      	ldr	r2, [r7, #4]
 811489c:	61da      	str	r2, [r3, #28]
}
 811489e:	3710      	adds	r7, #16
 81148a0:	46bd      	mov	sp, r7
 81148a2:	bd80      	pop	{r7, pc}
 81148a4:	0811eb84 	.word	0x0811eb84
 81148a8:	0811eee8 	.word	0x0811eee8
 81148ac:	0811ec08 	.word	0x0811ec08

081148b0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 81148b0:	b580      	push	{r7, lr}
 81148b2:	b084      	sub	sp, #16
 81148b4:	af00      	add	r7, sp, #0
 81148b6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 81148b8:	687b      	ldr	r3, [r7, #4]
 81148ba:	2b00      	cmp	r3, #0
 81148bc:	d107      	bne.n	81148ce <udp_remove+0x1e>
 81148be:	4b19      	ldr	r3, [pc, #100]	@ (8114924 <udp_remove+0x74>)
 81148c0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 81148c4:	4918      	ldr	r1, [pc, #96]	@ (8114928 <udp_remove+0x78>)
 81148c6:	4819      	ldr	r0, [pc, #100]	@ (811492c <udp_remove+0x7c>)
 81148c8:	f002 fdb6 	bl	8117438 <iprintf>
 81148cc:	e026      	b.n	811491c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 81148ce:	4b18      	ldr	r3, [pc, #96]	@ (8114930 <udp_remove+0x80>)
 81148d0:	681b      	ldr	r3, [r3, #0]
 81148d2:	687a      	ldr	r2, [r7, #4]
 81148d4:	429a      	cmp	r2, r3
 81148d6:	d105      	bne.n	81148e4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 81148d8:	4b15      	ldr	r3, [pc, #84]	@ (8114930 <udp_remove+0x80>)
 81148da:	681b      	ldr	r3, [r3, #0]
 81148dc:	68db      	ldr	r3, [r3, #12]
 81148de:	4a14      	ldr	r2, [pc, #80]	@ (8114930 <udp_remove+0x80>)
 81148e0:	6013      	str	r3, [r2, #0]
 81148e2:	e017      	b.n	8114914 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 81148e4:	4b12      	ldr	r3, [pc, #72]	@ (8114930 <udp_remove+0x80>)
 81148e6:	681b      	ldr	r3, [r3, #0]
 81148e8:	60fb      	str	r3, [r7, #12]
 81148ea:	e010      	b.n	811490e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 81148ec:	68fb      	ldr	r3, [r7, #12]
 81148ee:	68db      	ldr	r3, [r3, #12]
 81148f0:	2b00      	cmp	r3, #0
 81148f2:	d009      	beq.n	8114908 <udp_remove+0x58>
 81148f4:	68fb      	ldr	r3, [r7, #12]
 81148f6:	68db      	ldr	r3, [r3, #12]
 81148f8:	687a      	ldr	r2, [r7, #4]
 81148fa:	429a      	cmp	r2, r3
 81148fc:	d104      	bne.n	8114908 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 81148fe:	687b      	ldr	r3, [r7, #4]
 8114900:	68da      	ldr	r2, [r3, #12]
 8114902:	68fb      	ldr	r3, [r7, #12]
 8114904:	60da      	str	r2, [r3, #12]
        break;
 8114906:	e005      	b.n	8114914 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8114908:	68fb      	ldr	r3, [r7, #12]
 811490a:	68db      	ldr	r3, [r3, #12]
 811490c:	60fb      	str	r3, [r7, #12]
 811490e:	68fb      	ldr	r3, [r7, #12]
 8114910:	2b00      	cmp	r3, #0
 8114912:	d1eb      	bne.n	81148ec <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8114914:	6879      	ldr	r1, [r7, #4]
 8114916:	2000      	movs	r0, #0
 8114918:	f7f8 fba0 	bl	810d05c <memp_free>
}
 811491c:	3710      	adds	r7, #16
 811491e:	46bd      	mov	sp, r7
 8114920:	bd80      	pop	{r7, pc}
 8114922:	bf00      	nop
 8114924:	0811eb84 	.word	0x0811eb84
 8114928:	0811ef00 	.word	0x0811ef00
 811492c:	0811ec08 	.word	0x0811ec08
 8114930:	10017754 	.word	0x10017754

08114934 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8114934:	b580      	push	{r7, lr}
 8114936:	b082      	sub	sp, #8
 8114938:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 811493a:	2000      	movs	r0, #0
 811493c:	f7f8 fb1e 	bl	810cf7c <memp_malloc>
 8114940:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8114942:	687b      	ldr	r3, [r7, #4]
 8114944:	2b00      	cmp	r3, #0
 8114946:	d007      	beq.n	8114958 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8114948:	2220      	movs	r2, #32
 811494a:	2100      	movs	r1, #0
 811494c:	6878      	ldr	r0, [r7, #4]
 811494e:	f002 ff3d 	bl	81177cc <memset>
    pcb->ttl = UDP_TTL;
 8114952:	687b      	ldr	r3, [r7, #4]
 8114954:	22ff      	movs	r2, #255	@ 0xff
 8114956:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8114958:	687b      	ldr	r3, [r7, #4]
}
 811495a:	4618      	mov	r0, r3
 811495c:	3708      	adds	r7, #8
 811495e:	46bd      	mov	sp, r7
 8114960:	bd80      	pop	{r7, pc}
	...

08114964 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8114964:	b480      	push	{r7}
 8114966:	b085      	sub	sp, #20
 8114968:	af00      	add	r7, sp, #0
 811496a:	6078      	str	r0, [r7, #4]
 811496c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 811496e:	687b      	ldr	r3, [r7, #4]
 8114970:	2b00      	cmp	r3, #0
 8114972:	d01e      	beq.n	81149b2 <udp_netif_ip_addr_changed+0x4e>
 8114974:	687b      	ldr	r3, [r7, #4]
 8114976:	681b      	ldr	r3, [r3, #0]
 8114978:	2b00      	cmp	r3, #0
 811497a:	d01a      	beq.n	81149b2 <udp_netif_ip_addr_changed+0x4e>
 811497c:	683b      	ldr	r3, [r7, #0]
 811497e:	2b00      	cmp	r3, #0
 8114980:	d017      	beq.n	81149b2 <udp_netif_ip_addr_changed+0x4e>
 8114982:	683b      	ldr	r3, [r7, #0]
 8114984:	681b      	ldr	r3, [r3, #0]
 8114986:	2b00      	cmp	r3, #0
 8114988:	d013      	beq.n	81149b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 811498a:	4b0d      	ldr	r3, [pc, #52]	@ (81149c0 <udp_netif_ip_addr_changed+0x5c>)
 811498c:	681b      	ldr	r3, [r3, #0]
 811498e:	60fb      	str	r3, [r7, #12]
 8114990:	e00c      	b.n	81149ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8114992:	68fb      	ldr	r3, [r7, #12]
 8114994:	681a      	ldr	r2, [r3, #0]
 8114996:	687b      	ldr	r3, [r7, #4]
 8114998:	681b      	ldr	r3, [r3, #0]
 811499a:	429a      	cmp	r2, r3
 811499c:	d103      	bne.n	81149a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 811499e:	683b      	ldr	r3, [r7, #0]
 81149a0:	681a      	ldr	r2, [r3, #0]
 81149a2:	68fb      	ldr	r3, [r7, #12]
 81149a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 81149a6:	68fb      	ldr	r3, [r7, #12]
 81149a8:	68db      	ldr	r3, [r3, #12]
 81149aa:	60fb      	str	r3, [r7, #12]
 81149ac:	68fb      	ldr	r3, [r7, #12]
 81149ae:	2b00      	cmp	r3, #0
 81149b0:	d1ef      	bne.n	8114992 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 81149b2:	bf00      	nop
 81149b4:	3714      	adds	r7, #20
 81149b6:	46bd      	mov	sp, r7
 81149b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81149bc:	4770      	bx	lr
 81149be:	bf00      	nop
 81149c0:	10017754 	.word	0x10017754

081149c4 <atan2>:
 81149c4:	f000 bb30 	b.w	8115028 <__ieee754_atan2>

081149c8 <sqrt>:
 81149c8:	b538      	push	{r3, r4, r5, lr}
 81149ca:	ed2d 8b02 	vpush	{d8}
 81149ce:	ec55 4b10 	vmov	r4, r5, d0
 81149d2:	f000 f8cf 	bl	8114b74 <__ieee754_sqrt>
 81149d6:	4622      	mov	r2, r4
 81149d8:	462b      	mov	r3, r5
 81149da:	4620      	mov	r0, r4
 81149dc:	4629      	mov	r1, r5
 81149de:	eeb0 8a40 	vmov.f32	s16, s0
 81149e2:	eef0 8a60 	vmov.f32	s17, s1
 81149e6:	f7ec f939 	bl	8100c5c <__aeabi_dcmpun>
 81149ea:	b990      	cbnz	r0, 8114a12 <sqrt+0x4a>
 81149ec:	2200      	movs	r2, #0
 81149ee:	2300      	movs	r3, #0
 81149f0:	4620      	mov	r0, r4
 81149f2:	4629      	mov	r1, r5
 81149f4:	f7ec f90a 	bl	8100c0c <__aeabi_dcmplt>
 81149f8:	b158      	cbz	r0, 8114a12 <sqrt+0x4a>
 81149fa:	f002 ff6f 	bl	81178dc <__errno>
 81149fe:	2321      	movs	r3, #33	@ 0x21
 8114a00:	6003      	str	r3, [r0, #0]
 8114a02:	2200      	movs	r2, #0
 8114a04:	2300      	movs	r3, #0
 8114a06:	4610      	mov	r0, r2
 8114a08:	4619      	mov	r1, r3
 8114a0a:	f7eb ffb7 	bl	810097c <__aeabi_ddiv>
 8114a0e:	ec41 0b18 	vmov	d8, r0, r1
 8114a12:	eeb0 0a48 	vmov.f32	s0, s16
 8114a16:	eef0 0a68 	vmov.f32	s1, s17
 8114a1a:	ecbd 8b02 	vpop	{d8}
 8114a1e:	bd38      	pop	{r3, r4, r5, pc}

08114a20 <cos>:
 8114a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8114a22:	ec53 2b10 	vmov	r2, r3, d0
 8114a26:	4826      	ldr	r0, [pc, #152]	@ (8114ac0 <cos+0xa0>)
 8114a28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8114a2c:	4281      	cmp	r1, r0
 8114a2e:	d806      	bhi.n	8114a3e <cos+0x1e>
 8114a30:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8114ab8 <cos+0x98>
 8114a34:	b005      	add	sp, #20
 8114a36:	f85d eb04 	ldr.w	lr, [sp], #4
 8114a3a:	f000 b971 	b.w	8114d20 <__kernel_cos>
 8114a3e:	4821      	ldr	r0, [pc, #132]	@ (8114ac4 <cos+0xa4>)
 8114a40:	4281      	cmp	r1, r0
 8114a42:	d908      	bls.n	8114a56 <cos+0x36>
 8114a44:	4610      	mov	r0, r2
 8114a46:	4619      	mov	r1, r3
 8114a48:	f7eb fcb6 	bl	81003b8 <__aeabi_dsub>
 8114a4c:	ec41 0b10 	vmov	d0, r0, r1
 8114a50:	b005      	add	sp, #20
 8114a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8114a56:	4668      	mov	r0, sp
 8114a58:	f000 fbae 	bl	81151b8 <__ieee754_rem_pio2>
 8114a5c:	f000 0003 	and.w	r0, r0, #3
 8114a60:	2801      	cmp	r0, #1
 8114a62:	d00b      	beq.n	8114a7c <cos+0x5c>
 8114a64:	2802      	cmp	r0, #2
 8114a66:	d015      	beq.n	8114a94 <cos+0x74>
 8114a68:	b9d8      	cbnz	r0, 8114aa2 <cos+0x82>
 8114a6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8114a6e:	ed9d 0b00 	vldr	d0, [sp]
 8114a72:	f000 f955 	bl	8114d20 <__kernel_cos>
 8114a76:	ec51 0b10 	vmov	r0, r1, d0
 8114a7a:	e7e7      	b.n	8114a4c <cos+0x2c>
 8114a7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8114a80:	ed9d 0b00 	vldr	d0, [sp]
 8114a84:	f000 fa14 	bl	8114eb0 <__kernel_sin>
 8114a88:	ec53 2b10 	vmov	r2, r3, d0
 8114a8c:	4610      	mov	r0, r2
 8114a8e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8114a92:	e7db      	b.n	8114a4c <cos+0x2c>
 8114a94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8114a98:	ed9d 0b00 	vldr	d0, [sp]
 8114a9c:	f000 f940 	bl	8114d20 <__kernel_cos>
 8114aa0:	e7f2      	b.n	8114a88 <cos+0x68>
 8114aa2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8114aa6:	ed9d 0b00 	vldr	d0, [sp]
 8114aaa:	2001      	movs	r0, #1
 8114aac:	f000 fa00 	bl	8114eb0 <__kernel_sin>
 8114ab0:	e7e1      	b.n	8114a76 <cos+0x56>
 8114ab2:	bf00      	nop
 8114ab4:	f3af 8000 	nop.w
	...
 8114ac0:	3fe921fb 	.word	0x3fe921fb
 8114ac4:	7fefffff 	.word	0x7fefffff

08114ac8 <sin>:
 8114ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8114aca:	ec53 2b10 	vmov	r2, r3, d0
 8114ace:	4826      	ldr	r0, [pc, #152]	@ (8114b68 <sin+0xa0>)
 8114ad0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8114ad4:	4281      	cmp	r1, r0
 8114ad6:	d807      	bhi.n	8114ae8 <sin+0x20>
 8114ad8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8114b60 <sin+0x98>
 8114adc:	2000      	movs	r0, #0
 8114ade:	b005      	add	sp, #20
 8114ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8114ae4:	f000 b9e4 	b.w	8114eb0 <__kernel_sin>
 8114ae8:	4820      	ldr	r0, [pc, #128]	@ (8114b6c <sin+0xa4>)
 8114aea:	4281      	cmp	r1, r0
 8114aec:	d908      	bls.n	8114b00 <sin+0x38>
 8114aee:	4610      	mov	r0, r2
 8114af0:	4619      	mov	r1, r3
 8114af2:	f7eb fc61 	bl	81003b8 <__aeabi_dsub>
 8114af6:	ec41 0b10 	vmov	d0, r0, r1
 8114afa:	b005      	add	sp, #20
 8114afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8114b00:	4668      	mov	r0, sp
 8114b02:	f000 fb59 	bl	81151b8 <__ieee754_rem_pio2>
 8114b06:	f000 0003 	and.w	r0, r0, #3
 8114b0a:	2801      	cmp	r0, #1
 8114b0c:	d00c      	beq.n	8114b28 <sin+0x60>
 8114b0e:	2802      	cmp	r0, #2
 8114b10:	d011      	beq.n	8114b36 <sin+0x6e>
 8114b12:	b9e8      	cbnz	r0, 8114b50 <sin+0x88>
 8114b14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8114b18:	ed9d 0b00 	vldr	d0, [sp]
 8114b1c:	2001      	movs	r0, #1
 8114b1e:	f000 f9c7 	bl	8114eb0 <__kernel_sin>
 8114b22:	ec51 0b10 	vmov	r0, r1, d0
 8114b26:	e7e6      	b.n	8114af6 <sin+0x2e>
 8114b28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8114b2c:	ed9d 0b00 	vldr	d0, [sp]
 8114b30:	f000 f8f6 	bl	8114d20 <__kernel_cos>
 8114b34:	e7f5      	b.n	8114b22 <sin+0x5a>
 8114b36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8114b3a:	ed9d 0b00 	vldr	d0, [sp]
 8114b3e:	2001      	movs	r0, #1
 8114b40:	f000 f9b6 	bl	8114eb0 <__kernel_sin>
 8114b44:	ec53 2b10 	vmov	r2, r3, d0
 8114b48:	4610      	mov	r0, r2
 8114b4a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8114b4e:	e7d2      	b.n	8114af6 <sin+0x2e>
 8114b50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8114b54:	ed9d 0b00 	vldr	d0, [sp]
 8114b58:	f000 f8e2 	bl	8114d20 <__kernel_cos>
 8114b5c:	e7f2      	b.n	8114b44 <sin+0x7c>
 8114b5e:	bf00      	nop
	...
 8114b68:	3fe921fb 	.word	0x3fe921fb
 8114b6c:	7fefffff 	.word	0x7fefffff

08114b70 <atan2f>:
 8114b70:	f000 bebe 	b.w	81158f0 <__ieee754_atan2f>

08114b74 <__ieee754_sqrt>:
 8114b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114b78:	4a66      	ldr	r2, [pc, #408]	@ (8114d14 <__ieee754_sqrt+0x1a0>)
 8114b7a:	ec55 4b10 	vmov	r4, r5, d0
 8114b7e:	43aa      	bics	r2, r5
 8114b80:	462b      	mov	r3, r5
 8114b82:	4621      	mov	r1, r4
 8114b84:	d110      	bne.n	8114ba8 <__ieee754_sqrt+0x34>
 8114b86:	4622      	mov	r2, r4
 8114b88:	4620      	mov	r0, r4
 8114b8a:	4629      	mov	r1, r5
 8114b8c:	f7eb fdcc 	bl	8100728 <__aeabi_dmul>
 8114b90:	4602      	mov	r2, r0
 8114b92:	460b      	mov	r3, r1
 8114b94:	4620      	mov	r0, r4
 8114b96:	4629      	mov	r1, r5
 8114b98:	f7eb fc10 	bl	81003bc <__adddf3>
 8114b9c:	4604      	mov	r4, r0
 8114b9e:	460d      	mov	r5, r1
 8114ba0:	ec45 4b10 	vmov	d0, r4, r5
 8114ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114ba8:	2d00      	cmp	r5, #0
 8114baa:	dc0e      	bgt.n	8114bca <__ieee754_sqrt+0x56>
 8114bac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8114bb0:	4322      	orrs	r2, r4
 8114bb2:	d0f5      	beq.n	8114ba0 <__ieee754_sqrt+0x2c>
 8114bb4:	b19d      	cbz	r5, 8114bde <__ieee754_sqrt+0x6a>
 8114bb6:	4622      	mov	r2, r4
 8114bb8:	4620      	mov	r0, r4
 8114bba:	4629      	mov	r1, r5
 8114bbc:	f7eb fbfc 	bl	81003b8 <__aeabi_dsub>
 8114bc0:	4602      	mov	r2, r0
 8114bc2:	460b      	mov	r3, r1
 8114bc4:	f7eb feda 	bl	810097c <__aeabi_ddiv>
 8114bc8:	e7e8      	b.n	8114b9c <__ieee754_sqrt+0x28>
 8114bca:	152a      	asrs	r2, r5, #20
 8114bcc:	d115      	bne.n	8114bfa <__ieee754_sqrt+0x86>
 8114bce:	2000      	movs	r0, #0
 8114bd0:	e009      	b.n	8114be6 <__ieee754_sqrt+0x72>
 8114bd2:	0acb      	lsrs	r3, r1, #11
 8114bd4:	3a15      	subs	r2, #21
 8114bd6:	0549      	lsls	r1, r1, #21
 8114bd8:	2b00      	cmp	r3, #0
 8114bda:	d0fa      	beq.n	8114bd2 <__ieee754_sqrt+0x5e>
 8114bdc:	e7f7      	b.n	8114bce <__ieee754_sqrt+0x5a>
 8114bde:	462a      	mov	r2, r5
 8114be0:	e7fa      	b.n	8114bd8 <__ieee754_sqrt+0x64>
 8114be2:	005b      	lsls	r3, r3, #1
 8114be4:	3001      	adds	r0, #1
 8114be6:	02dc      	lsls	r4, r3, #11
 8114be8:	d5fb      	bpl.n	8114be2 <__ieee754_sqrt+0x6e>
 8114bea:	1e44      	subs	r4, r0, #1
 8114bec:	1b12      	subs	r2, r2, r4
 8114bee:	f1c0 0420 	rsb	r4, r0, #32
 8114bf2:	fa21 f404 	lsr.w	r4, r1, r4
 8114bf6:	4323      	orrs	r3, r4
 8114bf8:	4081      	lsls	r1, r0
 8114bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8114bfe:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8114c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8114c06:	07d2      	lsls	r2, r2, #31
 8114c08:	bf5c      	itt	pl
 8114c0a:	005b      	lslpl	r3, r3, #1
 8114c0c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8114c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8114c14:	bf58      	it	pl
 8114c16:	0049      	lslpl	r1, r1, #1
 8114c18:	2600      	movs	r6, #0
 8114c1a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8114c1e:	107f      	asrs	r7, r7, #1
 8114c20:	0049      	lsls	r1, r1, #1
 8114c22:	2016      	movs	r0, #22
 8114c24:	4632      	mov	r2, r6
 8114c26:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8114c2a:	1915      	adds	r5, r2, r4
 8114c2c:	429d      	cmp	r5, r3
 8114c2e:	bfde      	ittt	le
 8114c30:	192a      	addle	r2, r5, r4
 8114c32:	1b5b      	suble	r3, r3, r5
 8114c34:	1936      	addle	r6, r6, r4
 8114c36:	0fcd      	lsrs	r5, r1, #31
 8114c38:	3801      	subs	r0, #1
 8114c3a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8114c3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8114c42:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8114c46:	d1f0      	bne.n	8114c2a <__ieee754_sqrt+0xb6>
 8114c48:	4605      	mov	r5, r0
 8114c4a:	2420      	movs	r4, #32
 8114c4c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8114c50:	4293      	cmp	r3, r2
 8114c52:	eb0c 0e00 	add.w	lr, ip, r0
 8114c56:	dc02      	bgt.n	8114c5e <__ieee754_sqrt+0xea>
 8114c58:	d113      	bne.n	8114c82 <__ieee754_sqrt+0x10e>
 8114c5a:	458e      	cmp	lr, r1
 8114c5c:	d811      	bhi.n	8114c82 <__ieee754_sqrt+0x10e>
 8114c5e:	f1be 0f00 	cmp.w	lr, #0
 8114c62:	eb0e 000c 	add.w	r0, lr, ip
 8114c66:	da3f      	bge.n	8114ce8 <__ieee754_sqrt+0x174>
 8114c68:	2800      	cmp	r0, #0
 8114c6a:	db3d      	blt.n	8114ce8 <__ieee754_sqrt+0x174>
 8114c6c:	f102 0801 	add.w	r8, r2, #1
 8114c70:	1a9b      	subs	r3, r3, r2
 8114c72:	458e      	cmp	lr, r1
 8114c74:	bf88      	it	hi
 8114c76:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8114c7a:	eba1 010e 	sub.w	r1, r1, lr
 8114c7e:	4465      	add	r5, ip
 8114c80:	4642      	mov	r2, r8
 8114c82:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8114c86:	3c01      	subs	r4, #1
 8114c88:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8114c8c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8114c90:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8114c94:	d1dc      	bne.n	8114c50 <__ieee754_sqrt+0xdc>
 8114c96:	4319      	orrs	r1, r3
 8114c98:	d01b      	beq.n	8114cd2 <__ieee754_sqrt+0x15e>
 8114c9a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8114d18 <__ieee754_sqrt+0x1a4>
 8114c9e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8114d1c <__ieee754_sqrt+0x1a8>
 8114ca2:	e9da 0100 	ldrd	r0, r1, [sl]
 8114ca6:	e9db 2300 	ldrd	r2, r3, [fp]
 8114caa:	f7eb fb85 	bl	81003b8 <__aeabi_dsub>
 8114cae:	e9da 8900 	ldrd	r8, r9, [sl]
 8114cb2:	4602      	mov	r2, r0
 8114cb4:	460b      	mov	r3, r1
 8114cb6:	4640      	mov	r0, r8
 8114cb8:	4649      	mov	r1, r9
 8114cba:	f7eb ffb1 	bl	8100c20 <__aeabi_dcmple>
 8114cbe:	b140      	cbz	r0, 8114cd2 <__ieee754_sqrt+0x15e>
 8114cc0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8114cc4:	e9da 0100 	ldrd	r0, r1, [sl]
 8114cc8:	e9db 2300 	ldrd	r2, r3, [fp]
 8114ccc:	d10e      	bne.n	8114cec <__ieee754_sqrt+0x178>
 8114cce:	3601      	adds	r6, #1
 8114cd0:	4625      	mov	r5, r4
 8114cd2:	1073      	asrs	r3, r6, #1
 8114cd4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8114cd8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8114cdc:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8114ce0:	086b      	lsrs	r3, r5, #1
 8114ce2:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8114ce6:	e759      	b.n	8114b9c <__ieee754_sqrt+0x28>
 8114ce8:	4690      	mov	r8, r2
 8114cea:	e7c1      	b.n	8114c70 <__ieee754_sqrt+0xfc>
 8114cec:	f7eb fb66 	bl	81003bc <__adddf3>
 8114cf0:	e9da 8900 	ldrd	r8, r9, [sl]
 8114cf4:	4602      	mov	r2, r0
 8114cf6:	460b      	mov	r3, r1
 8114cf8:	4640      	mov	r0, r8
 8114cfa:	4649      	mov	r1, r9
 8114cfc:	f7eb ff86 	bl	8100c0c <__aeabi_dcmplt>
 8114d00:	b120      	cbz	r0, 8114d0c <__ieee754_sqrt+0x198>
 8114d02:	1cab      	adds	r3, r5, #2
 8114d04:	bf08      	it	eq
 8114d06:	3601      	addeq	r6, #1
 8114d08:	3502      	adds	r5, #2
 8114d0a:	e7e2      	b.n	8114cd2 <__ieee754_sqrt+0x15e>
 8114d0c:	1c6b      	adds	r3, r5, #1
 8114d0e:	f023 0501 	bic.w	r5, r3, #1
 8114d12:	e7de      	b.n	8114cd2 <__ieee754_sqrt+0x15e>
 8114d14:	7ff00000 	.word	0x7ff00000
 8114d18:	0811f058 	.word	0x0811f058
 8114d1c:	0811f050 	.word	0x0811f050

08114d20 <__kernel_cos>:
 8114d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114d24:	ec57 6b10 	vmov	r6, r7, d0
 8114d28:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8114d2c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8114d30:	ed8d 1b00 	vstr	d1, [sp]
 8114d34:	d206      	bcs.n	8114d44 <__kernel_cos+0x24>
 8114d36:	4630      	mov	r0, r6
 8114d38:	4639      	mov	r1, r7
 8114d3a:	f7eb ffa5 	bl	8100c88 <__aeabi_d2iz>
 8114d3e:	2800      	cmp	r0, #0
 8114d40:	f000 8088 	beq.w	8114e54 <__kernel_cos+0x134>
 8114d44:	4632      	mov	r2, r6
 8114d46:	463b      	mov	r3, r7
 8114d48:	4630      	mov	r0, r6
 8114d4a:	4639      	mov	r1, r7
 8114d4c:	f7eb fcec 	bl	8100728 <__aeabi_dmul>
 8114d50:	4b51      	ldr	r3, [pc, #324]	@ (8114e98 <__kernel_cos+0x178>)
 8114d52:	2200      	movs	r2, #0
 8114d54:	4604      	mov	r4, r0
 8114d56:	460d      	mov	r5, r1
 8114d58:	f7eb fce6 	bl	8100728 <__aeabi_dmul>
 8114d5c:	a340      	add	r3, pc, #256	@ (adr r3, 8114e60 <__kernel_cos+0x140>)
 8114d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114d62:	4682      	mov	sl, r0
 8114d64:	468b      	mov	fp, r1
 8114d66:	4620      	mov	r0, r4
 8114d68:	4629      	mov	r1, r5
 8114d6a:	f7eb fcdd 	bl	8100728 <__aeabi_dmul>
 8114d6e:	a33e      	add	r3, pc, #248	@ (adr r3, 8114e68 <__kernel_cos+0x148>)
 8114d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114d74:	f7eb fb22 	bl	81003bc <__adddf3>
 8114d78:	4622      	mov	r2, r4
 8114d7a:	462b      	mov	r3, r5
 8114d7c:	f7eb fcd4 	bl	8100728 <__aeabi_dmul>
 8114d80:	a33b      	add	r3, pc, #236	@ (adr r3, 8114e70 <__kernel_cos+0x150>)
 8114d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114d86:	f7eb fb17 	bl	81003b8 <__aeabi_dsub>
 8114d8a:	4622      	mov	r2, r4
 8114d8c:	462b      	mov	r3, r5
 8114d8e:	f7eb fccb 	bl	8100728 <__aeabi_dmul>
 8114d92:	a339      	add	r3, pc, #228	@ (adr r3, 8114e78 <__kernel_cos+0x158>)
 8114d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114d98:	f7eb fb10 	bl	81003bc <__adddf3>
 8114d9c:	4622      	mov	r2, r4
 8114d9e:	462b      	mov	r3, r5
 8114da0:	f7eb fcc2 	bl	8100728 <__aeabi_dmul>
 8114da4:	a336      	add	r3, pc, #216	@ (adr r3, 8114e80 <__kernel_cos+0x160>)
 8114da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114daa:	f7eb fb05 	bl	81003b8 <__aeabi_dsub>
 8114dae:	4622      	mov	r2, r4
 8114db0:	462b      	mov	r3, r5
 8114db2:	f7eb fcb9 	bl	8100728 <__aeabi_dmul>
 8114db6:	a334      	add	r3, pc, #208	@ (adr r3, 8114e88 <__kernel_cos+0x168>)
 8114db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114dbc:	f7eb fafe 	bl	81003bc <__adddf3>
 8114dc0:	4622      	mov	r2, r4
 8114dc2:	462b      	mov	r3, r5
 8114dc4:	f7eb fcb0 	bl	8100728 <__aeabi_dmul>
 8114dc8:	4622      	mov	r2, r4
 8114dca:	462b      	mov	r3, r5
 8114dcc:	f7eb fcac 	bl	8100728 <__aeabi_dmul>
 8114dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8114dd4:	4604      	mov	r4, r0
 8114dd6:	460d      	mov	r5, r1
 8114dd8:	4630      	mov	r0, r6
 8114dda:	4639      	mov	r1, r7
 8114ddc:	f7eb fca4 	bl	8100728 <__aeabi_dmul>
 8114de0:	460b      	mov	r3, r1
 8114de2:	4602      	mov	r2, r0
 8114de4:	4629      	mov	r1, r5
 8114de6:	4620      	mov	r0, r4
 8114de8:	f7eb fae6 	bl	81003b8 <__aeabi_dsub>
 8114dec:	4b2b      	ldr	r3, [pc, #172]	@ (8114e9c <__kernel_cos+0x17c>)
 8114dee:	4598      	cmp	r8, r3
 8114df0:	4606      	mov	r6, r0
 8114df2:	460f      	mov	r7, r1
 8114df4:	d810      	bhi.n	8114e18 <__kernel_cos+0xf8>
 8114df6:	4602      	mov	r2, r0
 8114df8:	460b      	mov	r3, r1
 8114dfa:	4650      	mov	r0, sl
 8114dfc:	4659      	mov	r1, fp
 8114dfe:	f7eb fadb 	bl	81003b8 <__aeabi_dsub>
 8114e02:	460b      	mov	r3, r1
 8114e04:	4926      	ldr	r1, [pc, #152]	@ (8114ea0 <__kernel_cos+0x180>)
 8114e06:	4602      	mov	r2, r0
 8114e08:	2000      	movs	r0, #0
 8114e0a:	f7eb fad5 	bl	81003b8 <__aeabi_dsub>
 8114e0e:	ec41 0b10 	vmov	d0, r0, r1
 8114e12:	b003      	add	sp, #12
 8114e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114e18:	4b22      	ldr	r3, [pc, #136]	@ (8114ea4 <__kernel_cos+0x184>)
 8114e1a:	4921      	ldr	r1, [pc, #132]	@ (8114ea0 <__kernel_cos+0x180>)
 8114e1c:	4598      	cmp	r8, r3
 8114e1e:	bf8c      	ite	hi
 8114e20:	4d21      	ldrhi	r5, [pc, #132]	@ (8114ea8 <__kernel_cos+0x188>)
 8114e22:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8114e26:	2400      	movs	r4, #0
 8114e28:	4622      	mov	r2, r4
 8114e2a:	462b      	mov	r3, r5
 8114e2c:	2000      	movs	r0, #0
 8114e2e:	f7eb fac3 	bl	81003b8 <__aeabi_dsub>
 8114e32:	4622      	mov	r2, r4
 8114e34:	4680      	mov	r8, r0
 8114e36:	4689      	mov	r9, r1
 8114e38:	462b      	mov	r3, r5
 8114e3a:	4650      	mov	r0, sl
 8114e3c:	4659      	mov	r1, fp
 8114e3e:	f7eb fabb 	bl	81003b8 <__aeabi_dsub>
 8114e42:	4632      	mov	r2, r6
 8114e44:	463b      	mov	r3, r7
 8114e46:	f7eb fab7 	bl	81003b8 <__aeabi_dsub>
 8114e4a:	4602      	mov	r2, r0
 8114e4c:	460b      	mov	r3, r1
 8114e4e:	4640      	mov	r0, r8
 8114e50:	4649      	mov	r1, r9
 8114e52:	e7da      	b.n	8114e0a <__kernel_cos+0xea>
 8114e54:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8114e90 <__kernel_cos+0x170>
 8114e58:	e7db      	b.n	8114e12 <__kernel_cos+0xf2>
 8114e5a:	bf00      	nop
 8114e5c:	f3af 8000 	nop.w
 8114e60:	be8838d4 	.word	0xbe8838d4
 8114e64:	bda8fae9 	.word	0xbda8fae9
 8114e68:	bdb4b1c4 	.word	0xbdb4b1c4
 8114e6c:	3e21ee9e 	.word	0x3e21ee9e
 8114e70:	809c52ad 	.word	0x809c52ad
 8114e74:	3e927e4f 	.word	0x3e927e4f
 8114e78:	19cb1590 	.word	0x19cb1590
 8114e7c:	3efa01a0 	.word	0x3efa01a0
 8114e80:	16c15177 	.word	0x16c15177
 8114e84:	3f56c16c 	.word	0x3f56c16c
 8114e88:	5555554c 	.word	0x5555554c
 8114e8c:	3fa55555 	.word	0x3fa55555
 8114e90:	00000000 	.word	0x00000000
 8114e94:	3ff00000 	.word	0x3ff00000
 8114e98:	3fe00000 	.word	0x3fe00000
 8114e9c:	3fd33332 	.word	0x3fd33332
 8114ea0:	3ff00000 	.word	0x3ff00000
 8114ea4:	3fe90000 	.word	0x3fe90000
 8114ea8:	3fd20000 	.word	0x3fd20000
 8114eac:	00000000 	.word	0x00000000

08114eb0 <__kernel_sin>:
 8114eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114eb4:	ec55 4b10 	vmov	r4, r5, d0
 8114eb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8114ebc:	b085      	sub	sp, #20
 8114ebe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8114ec2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8114ec6:	4680      	mov	r8, r0
 8114ec8:	d205      	bcs.n	8114ed6 <__kernel_sin+0x26>
 8114eca:	4620      	mov	r0, r4
 8114ecc:	4629      	mov	r1, r5
 8114ece:	f7eb fedb 	bl	8100c88 <__aeabi_d2iz>
 8114ed2:	2800      	cmp	r0, #0
 8114ed4:	d052      	beq.n	8114f7c <__kernel_sin+0xcc>
 8114ed6:	4622      	mov	r2, r4
 8114ed8:	462b      	mov	r3, r5
 8114eda:	4620      	mov	r0, r4
 8114edc:	4629      	mov	r1, r5
 8114ede:	f7eb fc23 	bl	8100728 <__aeabi_dmul>
 8114ee2:	4682      	mov	sl, r0
 8114ee4:	468b      	mov	fp, r1
 8114ee6:	4602      	mov	r2, r0
 8114ee8:	460b      	mov	r3, r1
 8114eea:	4620      	mov	r0, r4
 8114eec:	4629      	mov	r1, r5
 8114eee:	f7eb fc1b 	bl	8100728 <__aeabi_dmul>
 8114ef2:	a342      	add	r3, pc, #264	@ (adr r3, 8114ffc <__kernel_sin+0x14c>)
 8114ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8114efc:	4650      	mov	r0, sl
 8114efe:	4659      	mov	r1, fp
 8114f00:	f7eb fc12 	bl	8100728 <__aeabi_dmul>
 8114f04:	a33f      	add	r3, pc, #252	@ (adr r3, 8115004 <__kernel_sin+0x154>)
 8114f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114f0a:	f7eb fa55 	bl	81003b8 <__aeabi_dsub>
 8114f0e:	4652      	mov	r2, sl
 8114f10:	465b      	mov	r3, fp
 8114f12:	f7eb fc09 	bl	8100728 <__aeabi_dmul>
 8114f16:	a33d      	add	r3, pc, #244	@ (adr r3, 811500c <__kernel_sin+0x15c>)
 8114f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114f1c:	f7eb fa4e 	bl	81003bc <__adddf3>
 8114f20:	4652      	mov	r2, sl
 8114f22:	465b      	mov	r3, fp
 8114f24:	f7eb fc00 	bl	8100728 <__aeabi_dmul>
 8114f28:	a33a      	add	r3, pc, #232	@ (adr r3, 8115014 <__kernel_sin+0x164>)
 8114f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114f2e:	f7eb fa43 	bl	81003b8 <__aeabi_dsub>
 8114f32:	4652      	mov	r2, sl
 8114f34:	465b      	mov	r3, fp
 8114f36:	f7eb fbf7 	bl	8100728 <__aeabi_dmul>
 8114f3a:	a338      	add	r3, pc, #224	@ (adr r3, 811501c <__kernel_sin+0x16c>)
 8114f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114f40:	f7eb fa3c 	bl	81003bc <__adddf3>
 8114f44:	4606      	mov	r6, r0
 8114f46:	460f      	mov	r7, r1
 8114f48:	f1b8 0f00 	cmp.w	r8, #0
 8114f4c:	d11b      	bne.n	8114f86 <__kernel_sin+0xd6>
 8114f4e:	4602      	mov	r2, r0
 8114f50:	460b      	mov	r3, r1
 8114f52:	4650      	mov	r0, sl
 8114f54:	4659      	mov	r1, fp
 8114f56:	f7eb fbe7 	bl	8100728 <__aeabi_dmul>
 8114f5a:	a325      	add	r3, pc, #148	@ (adr r3, 8114ff0 <__kernel_sin+0x140>)
 8114f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114f60:	f7eb fa2a 	bl	81003b8 <__aeabi_dsub>
 8114f64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8114f68:	f7eb fbde 	bl	8100728 <__aeabi_dmul>
 8114f6c:	4602      	mov	r2, r0
 8114f6e:	460b      	mov	r3, r1
 8114f70:	4620      	mov	r0, r4
 8114f72:	4629      	mov	r1, r5
 8114f74:	f7eb fa22 	bl	81003bc <__adddf3>
 8114f78:	4604      	mov	r4, r0
 8114f7a:	460d      	mov	r5, r1
 8114f7c:	ec45 4b10 	vmov	d0, r4, r5
 8114f80:	b005      	add	sp, #20
 8114f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8114f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8114ff8 <__kernel_sin+0x148>)
 8114f8c:	2200      	movs	r2, #0
 8114f8e:	f7eb fbcb 	bl	8100728 <__aeabi_dmul>
 8114f92:	4632      	mov	r2, r6
 8114f94:	4680      	mov	r8, r0
 8114f96:	4689      	mov	r9, r1
 8114f98:	463b      	mov	r3, r7
 8114f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8114f9e:	f7eb fbc3 	bl	8100728 <__aeabi_dmul>
 8114fa2:	4602      	mov	r2, r0
 8114fa4:	460b      	mov	r3, r1
 8114fa6:	4640      	mov	r0, r8
 8114fa8:	4649      	mov	r1, r9
 8114faa:	f7eb fa05 	bl	81003b8 <__aeabi_dsub>
 8114fae:	4652      	mov	r2, sl
 8114fb0:	465b      	mov	r3, fp
 8114fb2:	f7eb fbb9 	bl	8100728 <__aeabi_dmul>
 8114fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8114fba:	f7eb f9fd 	bl	81003b8 <__aeabi_dsub>
 8114fbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8114ff0 <__kernel_sin+0x140>)
 8114fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114fc4:	4606      	mov	r6, r0
 8114fc6:	460f      	mov	r7, r1
 8114fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8114fcc:	f7eb fbac 	bl	8100728 <__aeabi_dmul>
 8114fd0:	4602      	mov	r2, r0
 8114fd2:	460b      	mov	r3, r1
 8114fd4:	4630      	mov	r0, r6
 8114fd6:	4639      	mov	r1, r7
 8114fd8:	f7eb f9f0 	bl	81003bc <__adddf3>
 8114fdc:	4602      	mov	r2, r0
 8114fde:	460b      	mov	r3, r1
 8114fe0:	4620      	mov	r0, r4
 8114fe2:	4629      	mov	r1, r5
 8114fe4:	f7eb f9e8 	bl	81003b8 <__aeabi_dsub>
 8114fe8:	e7c6      	b.n	8114f78 <__kernel_sin+0xc8>
 8114fea:	bf00      	nop
 8114fec:	f3af 8000 	nop.w
 8114ff0:	55555549 	.word	0x55555549
 8114ff4:	3fc55555 	.word	0x3fc55555
 8114ff8:	3fe00000 	.word	0x3fe00000
 8114ffc:	5acfd57c 	.word	0x5acfd57c
 8115000:	3de5d93a 	.word	0x3de5d93a
 8115004:	8a2b9ceb 	.word	0x8a2b9ceb
 8115008:	3e5ae5e6 	.word	0x3e5ae5e6
 811500c:	57b1fe7d 	.word	0x57b1fe7d
 8115010:	3ec71de3 	.word	0x3ec71de3
 8115014:	19c161d5 	.word	0x19c161d5
 8115018:	3f2a01a0 	.word	0x3f2a01a0
 811501c:	1110f8a6 	.word	0x1110f8a6
 8115020:	3f811111 	.word	0x3f811111
 8115024:	00000000 	.word	0x00000000

08115028 <__ieee754_atan2>:
 8115028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811502c:	ec57 6b11 	vmov	r6, r7, d1
 8115030:	4273      	negs	r3, r6
 8115032:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 81151b0 <__ieee754_atan2+0x188>
 8115036:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 811503a:	4333      	orrs	r3, r6
 811503c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8115040:	4543      	cmp	r3, r8
 8115042:	ec51 0b10 	vmov	r0, r1, d0
 8115046:	4635      	mov	r5, r6
 8115048:	d809      	bhi.n	811505e <__ieee754_atan2+0x36>
 811504a:	4244      	negs	r4, r0
 811504c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8115050:	4304      	orrs	r4, r0
 8115052:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8115056:	4544      	cmp	r4, r8
 8115058:	468e      	mov	lr, r1
 811505a:	4681      	mov	r9, r0
 811505c:	d907      	bls.n	811506e <__ieee754_atan2+0x46>
 811505e:	4632      	mov	r2, r6
 8115060:	463b      	mov	r3, r7
 8115062:	f7eb f9ab 	bl	81003bc <__adddf3>
 8115066:	ec41 0b10 	vmov	d0, r0, r1
 811506a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811506e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8115072:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8115076:	4334      	orrs	r4, r6
 8115078:	d103      	bne.n	8115082 <__ieee754_atan2+0x5a>
 811507a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811507e:	f000 ba97 	b.w	81155b0 <atan>
 8115082:	17bc      	asrs	r4, r7, #30
 8115084:	f004 0402 	and.w	r4, r4, #2
 8115088:	ea53 0909 	orrs.w	r9, r3, r9
 811508c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8115090:	d107      	bne.n	81150a2 <__ieee754_atan2+0x7a>
 8115092:	2c02      	cmp	r4, #2
 8115094:	d05f      	beq.n	8115156 <__ieee754_atan2+0x12e>
 8115096:	2c03      	cmp	r4, #3
 8115098:	d1e5      	bne.n	8115066 <__ieee754_atan2+0x3e>
 811509a:	a143      	add	r1, pc, #268	@ (adr r1, 81151a8 <__ieee754_atan2+0x180>)
 811509c:	e9d1 0100 	ldrd	r0, r1, [r1]
 81150a0:	e7e1      	b.n	8115066 <__ieee754_atan2+0x3e>
 81150a2:	4315      	orrs	r5, r2
 81150a4:	d106      	bne.n	81150b4 <__ieee754_atan2+0x8c>
 81150a6:	f1be 0f00 	cmp.w	lr, #0
 81150aa:	db5f      	blt.n	811516c <__ieee754_atan2+0x144>
 81150ac:	a136      	add	r1, pc, #216	@ (adr r1, 8115188 <__ieee754_atan2+0x160>)
 81150ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 81150b2:	e7d8      	b.n	8115066 <__ieee754_atan2+0x3e>
 81150b4:	4542      	cmp	r2, r8
 81150b6:	d10f      	bne.n	81150d8 <__ieee754_atan2+0xb0>
 81150b8:	4293      	cmp	r3, r2
 81150ba:	f104 34ff 	add.w	r4, r4, #4294967295
 81150be:	d107      	bne.n	81150d0 <__ieee754_atan2+0xa8>
 81150c0:	2c02      	cmp	r4, #2
 81150c2:	d84c      	bhi.n	811515e <__ieee754_atan2+0x136>
 81150c4:	4b36      	ldr	r3, [pc, #216]	@ (81151a0 <__ieee754_atan2+0x178>)
 81150c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81150ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 81150ce:	e7ca      	b.n	8115066 <__ieee754_atan2+0x3e>
 81150d0:	2c02      	cmp	r4, #2
 81150d2:	d848      	bhi.n	8115166 <__ieee754_atan2+0x13e>
 81150d4:	4b33      	ldr	r3, [pc, #204]	@ (81151a4 <__ieee754_atan2+0x17c>)
 81150d6:	e7f6      	b.n	81150c6 <__ieee754_atan2+0x9e>
 81150d8:	4543      	cmp	r3, r8
 81150da:	d0e4      	beq.n	81150a6 <__ieee754_atan2+0x7e>
 81150dc:	1a9b      	subs	r3, r3, r2
 81150de:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 81150e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 81150e6:	da1e      	bge.n	8115126 <__ieee754_atan2+0xfe>
 81150e8:	2f00      	cmp	r7, #0
 81150ea:	da01      	bge.n	81150f0 <__ieee754_atan2+0xc8>
 81150ec:	323c      	adds	r2, #60	@ 0x3c
 81150ee:	db1e      	blt.n	811512e <__ieee754_atan2+0x106>
 81150f0:	4632      	mov	r2, r6
 81150f2:	463b      	mov	r3, r7
 81150f4:	f7eb fc42 	bl	810097c <__aeabi_ddiv>
 81150f8:	ec41 0b10 	vmov	d0, r0, r1
 81150fc:	f000 fbf0 	bl	81158e0 <fabs>
 8115100:	f000 fa56 	bl	81155b0 <atan>
 8115104:	ec51 0b10 	vmov	r0, r1, d0
 8115108:	2c01      	cmp	r4, #1
 811510a:	d013      	beq.n	8115134 <__ieee754_atan2+0x10c>
 811510c:	2c02      	cmp	r4, #2
 811510e:	d015      	beq.n	811513c <__ieee754_atan2+0x114>
 8115110:	2c00      	cmp	r4, #0
 8115112:	d0a8      	beq.n	8115066 <__ieee754_atan2+0x3e>
 8115114:	a318      	add	r3, pc, #96	@ (adr r3, 8115178 <__ieee754_atan2+0x150>)
 8115116:	e9d3 2300 	ldrd	r2, r3, [r3]
 811511a:	f7eb f94d 	bl	81003b8 <__aeabi_dsub>
 811511e:	a318      	add	r3, pc, #96	@ (adr r3, 8115180 <__ieee754_atan2+0x158>)
 8115120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115124:	e014      	b.n	8115150 <__ieee754_atan2+0x128>
 8115126:	a118      	add	r1, pc, #96	@ (adr r1, 8115188 <__ieee754_atan2+0x160>)
 8115128:	e9d1 0100 	ldrd	r0, r1, [r1]
 811512c:	e7ec      	b.n	8115108 <__ieee754_atan2+0xe0>
 811512e:	2000      	movs	r0, #0
 8115130:	2100      	movs	r1, #0
 8115132:	e7e9      	b.n	8115108 <__ieee754_atan2+0xe0>
 8115134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8115138:	4619      	mov	r1, r3
 811513a:	e794      	b.n	8115066 <__ieee754_atan2+0x3e>
 811513c:	a30e      	add	r3, pc, #56	@ (adr r3, 8115178 <__ieee754_atan2+0x150>)
 811513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115142:	f7eb f939 	bl	81003b8 <__aeabi_dsub>
 8115146:	4602      	mov	r2, r0
 8115148:	460b      	mov	r3, r1
 811514a:	a10d      	add	r1, pc, #52	@ (adr r1, 8115180 <__ieee754_atan2+0x158>)
 811514c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8115150:	f7eb f932 	bl	81003b8 <__aeabi_dsub>
 8115154:	e787      	b.n	8115066 <__ieee754_atan2+0x3e>
 8115156:	a10a      	add	r1, pc, #40	@ (adr r1, 8115180 <__ieee754_atan2+0x158>)
 8115158:	e9d1 0100 	ldrd	r0, r1, [r1]
 811515c:	e783      	b.n	8115066 <__ieee754_atan2+0x3e>
 811515e:	a10c      	add	r1, pc, #48	@ (adr r1, 8115190 <__ieee754_atan2+0x168>)
 8115160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8115164:	e77f      	b.n	8115066 <__ieee754_atan2+0x3e>
 8115166:	2000      	movs	r0, #0
 8115168:	2100      	movs	r1, #0
 811516a:	e77c      	b.n	8115066 <__ieee754_atan2+0x3e>
 811516c:	a10a      	add	r1, pc, #40	@ (adr r1, 8115198 <__ieee754_atan2+0x170>)
 811516e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8115172:	e778      	b.n	8115066 <__ieee754_atan2+0x3e>
 8115174:	f3af 8000 	nop.w
 8115178:	33145c07 	.word	0x33145c07
 811517c:	3ca1a626 	.word	0x3ca1a626
 8115180:	54442d18 	.word	0x54442d18
 8115184:	400921fb 	.word	0x400921fb
 8115188:	54442d18 	.word	0x54442d18
 811518c:	3ff921fb 	.word	0x3ff921fb
 8115190:	54442d18 	.word	0x54442d18
 8115194:	3fe921fb 	.word	0x3fe921fb
 8115198:	54442d18 	.word	0x54442d18
 811519c:	bff921fb 	.word	0xbff921fb
 81151a0:	0811f078 	.word	0x0811f078
 81151a4:	0811f060 	.word	0x0811f060
 81151a8:	54442d18 	.word	0x54442d18
 81151ac:	c00921fb 	.word	0xc00921fb
 81151b0:	7ff00000 	.word	0x7ff00000
 81151b4:	00000000 	.word	0x00000000

081151b8 <__ieee754_rem_pio2>:
 81151b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81151bc:	ec57 6b10 	vmov	r6, r7, d0
 81151c0:	4bc5      	ldr	r3, [pc, #788]	@ (81154d8 <__ieee754_rem_pio2+0x320>)
 81151c2:	b08d      	sub	sp, #52	@ 0x34
 81151c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 81151c8:	4598      	cmp	r8, r3
 81151ca:	4604      	mov	r4, r0
 81151cc:	9704      	str	r7, [sp, #16]
 81151ce:	d807      	bhi.n	81151e0 <__ieee754_rem_pio2+0x28>
 81151d0:	2200      	movs	r2, #0
 81151d2:	2300      	movs	r3, #0
 81151d4:	ed80 0b00 	vstr	d0, [r0]
 81151d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 81151dc:	2500      	movs	r5, #0
 81151de:	e028      	b.n	8115232 <__ieee754_rem_pio2+0x7a>
 81151e0:	4bbe      	ldr	r3, [pc, #760]	@ (81154dc <__ieee754_rem_pio2+0x324>)
 81151e2:	4598      	cmp	r8, r3
 81151e4:	d878      	bhi.n	81152d8 <__ieee754_rem_pio2+0x120>
 81151e6:	9b04      	ldr	r3, [sp, #16]
 81151e8:	4dbd      	ldr	r5, [pc, #756]	@ (81154e0 <__ieee754_rem_pio2+0x328>)
 81151ea:	2b00      	cmp	r3, #0
 81151ec:	4630      	mov	r0, r6
 81151ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 81154a0 <__ieee754_rem_pio2+0x2e8>)
 81151f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81151f4:	4639      	mov	r1, r7
 81151f6:	dd38      	ble.n	811526a <__ieee754_rem_pio2+0xb2>
 81151f8:	f7eb f8de 	bl	81003b8 <__aeabi_dsub>
 81151fc:	45a8      	cmp	r8, r5
 81151fe:	4606      	mov	r6, r0
 8115200:	460f      	mov	r7, r1
 8115202:	d01a      	beq.n	811523a <__ieee754_rem_pio2+0x82>
 8115204:	a3a8      	add	r3, pc, #672	@ (adr r3, 81154a8 <__ieee754_rem_pio2+0x2f0>)
 8115206:	e9d3 2300 	ldrd	r2, r3, [r3]
 811520a:	f7eb f8d5 	bl	81003b8 <__aeabi_dsub>
 811520e:	4602      	mov	r2, r0
 8115210:	460b      	mov	r3, r1
 8115212:	4680      	mov	r8, r0
 8115214:	4689      	mov	r9, r1
 8115216:	4630      	mov	r0, r6
 8115218:	4639      	mov	r1, r7
 811521a:	f7eb f8cd 	bl	81003b8 <__aeabi_dsub>
 811521e:	a3a2      	add	r3, pc, #648	@ (adr r3, 81154a8 <__ieee754_rem_pio2+0x2f0>)
 8115220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115224:	f7eb f8c8 	bl	81003b8 <__aeabi_dsub>
 8115228:	e9c4 8900 	strd	r8, r9, [r4]
 811522c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8115230:	2501      	movs	r5, #1
 8115232:	4628      	mov	r0, r5
 8115234:	b00d      	add	sp, #52	@ 0x34
 8115236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811523a:	a39d      	add	r3, pc, #628	@ (adr r3, 81154b0 <__ieee754_rem_pio2+0x2f8>)
 811523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115240:	f7eb f8ba 	bl	81003b8 <__aeabi_dsub>
 8115244:	a39c      	add	r3, pc, #624	@ (adr r3, 81154b8 <__ieee754_rem_pio2+0x300>)
 8115246:	e9d3 2300 	ldrd	r2, r3, [r3]
 811524a:	4606      	mov	r6, r0
 811524c:	460f      	mov	r7, r1
 811524e:	f7eb f8b3 	bl	81003b8 <__aeabi_dsub>
 8115252:	4602      	mov	r2, r0
 8115254:	460b      	mov	r3, r1
 8115256:	4680      	mov	r8, r0
 8115258:	4689      	mov	r9, r1
 811525a:	4630      	mov	r0, r6
 811525c:	4639      	mov	r1, r7
 811525e:	f7eb f8ab 	bl	81003b8 <__aeabi_dsub>
 8115262:	a395      	add	r3, pc, #596	@ (adr r3, 81154b8 <__ieee754_rem_pio2+0x300>)
 8115264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115268:	e7dc      	b.n	8115224 <__ieee754_rem_pio2+0x6c>
 811526a:	f7eb f8a7 	bl	81003bc <__adddf3>
 811526e:	45a8      	cmp	r8, r5
 8115270:	4606      	mov	r6, r0
 8115272:	460f      	mov	r7, r1
 8115274:	d018      	beq.n	81152a8 <__ieee754_rem_pio2+0xf0>
 8115276:	a38c      	add	r3, pc, #560	@ (adr r3, 81154a8 <__ieee754_rem_pio2+0x2f0>)
 8115278:	e9d3 2300 	ldrd	r2, r3, [r3]
 811527c:	f7eb f89e 	bl	81003bc <__adddf3>
 8115280:	4602      	mov	r2, r0
 8115282:	460b      	mov	r3, r1
 8115284:	4680      	mov	r8, r0
 8115286:	4689      	mov	r9, r1
 8115288:	4630      	mov	r0, r6
 811528a:	4639      	mov	r1, r7
 811528c:	f7eb f894 	bl	81003b8 <__aeabi_dsub>
 8115290:	a385      	add	r3, pc, #532	@ (adr r3, 81154a8 <__ieee754_rem_pio2+0x2f0>)
 8115292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115296:	f7eb f891 	bl	81003bc <__adddf3>
 811529a:	f04f 35ff 	mov.w	r5, #4294967295
 811529e:	e9c4 8900 	strd	r8, r9, [r4]
 81152a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 81152a6:	e7c4      	b.n	8115232 <__ieee754_rem_pio2+0x7a>
 81152a8:	a381      	add	r3, pc, #516	@ (adr r3, 81154b0 <__ieee754_rem_pio2+0x2f8>)
 81152aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81152ae:	f7eb f885 	bl	81003bc <__adddf3>
 81152b2:	a381      	add	r3, pc, #516	@ (adr r3, 81154b8 <__ieee754_rem_pio2+0x300>)
 81152b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81152b8:	4606      	mov	r6, r0
 81152ba:	460f      	mov	r7, r1
 81152bc:	f7eb f87e 	bl	81003bc <__adddf3>
 81152c0:	4602      	mov	r2, r0
 81152c2:	460b      	mov	r3, r1
 81152c4:	4680      	mov	r8, r0
 81152c6:	4689      	mov	r9, r1
 81152c8:	4630      	mov	r0, r6
 81152ca:	4639      	mov	r1, r7
 81152cc:	f7eb f874 	bl	81003b8 <__aeabi_dsub>
 81152d0:	a379      	add	r3, pc, #484	@ (adr r3, 81154b8 <__ieee754_rem_pio2+0x300>)
 81152d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81152d6:	e7de      	b.n	8115296 <__ieee754_rem_pio2+0xde>
 81152d8:	4b82      	ldr	r3, [pc, #520]	@ (81154e4 <__ieee754_rem_pio2+0x32c>)
 81152da:	4598      	cmp	r8, r3
 81152dc:	f200 80d1 	bhi.w	8115482 <__ieee754_rem_pio2+0x2ca>
 81152e0:	f000 fafe 	bl	81158e0 <fabs>
 81152e4:	ec57 6b10 	vmov	r6, r7, d0
 81152e8:	a375      	add	r3, pc, #468	@ (adr r3, 81154c0 <__ieee754_rem_pio2+0x308>)
 81152ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81152ee:	4630      	mov	r0, r6
 81152f0:	4639      	mov	r1, r7
 81152f2:	f7eb fa19 	bl	8100728 <__aeabi_dmul>
 81152f6:	4b7c      	ldr	r3, [pc, #496]	@ (81154e8 <__ieee754_rem_pio2+0x330>)
 81152f8:	2200      	movs	r2, #0
 81152fa:	f7eb f85f 	bl	81003bc <__adddf3>
 81152fe:	f7eb fcc3 	bl	8100c88 <__aeabi_d2iz>
 8115302:	4605      	mov	r5, r0
 8115304:	f7eb f9a6 	bl	8100654 <__aeabi_i2d>
 8115308:	4602      	mov	r2, r0
 811530a:	460b      	mov	r3, r1
 811530c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8115310:	a363      	add	r3, pc, #396	@ (adr r3, 81154a0 <__ieee754_rem_pio2+0x2e8>)
 8115312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115316:	f7eb fa07 	bl	8100728 <__aeabi_dmul>
 811531a:	4602      	mov	r2, r0
 811531c:	460b      	mov	r3, r1
 811531e:	4630      	mov	r0, r6
 8115320:	4639      	mov	r1, r7
 8115322:	f7eb f849 	bl	81003b8 <__aeabi_dsub>
 8115326:	a360      	add	r3, pc, #384	@ (adr r3, 81154a8 <__ieee754_rem_pio2+0x2f0>)
 8115328:	e9d3 2300 	ldrd	r2, r3, [r3]
 811532c:	4682      	mov	sl, r0
 811532e:	468b      	mov	fp, r1
 8115330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115334:	f7eb f9f8 	bl	8100728 <__aeabi_dmul>
 8115338:	2d1f      	cmp	r5, #31
 811533a:	4606      	mov	r6, r0
 811533c:	460f      	mov	r7, r1
 811533e:	dc0c      	bgt.n	811535a <__ieee754_rem_pio2+0x1a2>
 8115340:	4b6a      	ldr	r3, [pc, #424]	@ (81154ec <__ieee754_rem_pio2+0x334>)
 8115342:	1e6a      	subs	r2, r5, #1
 8115344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8115348:	4543      	cmp	r3, r8
 811534a:	d006      	beq.n	811535a <__ieee754_rem_pio2+0x1a2>
 811534c:	4632      	mov	r2, r6
 811534e:	463b      	mov	r3, r7
 8115350:	4650      	mov	r0, sl
 8115352:	4659      	mov	r1, fp
 8115354:	f7eb f830 	bl	81003b8 <__aeabi_dsub>
 8115358:	e00e      	b.n	8115378 <__ieee754_rem_pio2+0x1c0>
 811535a:	463b      	mov	r3, r7
 811535c:	4632      	mov	r2, r6
 811535e:	4650      	mov	r0, sl
 8115360:	4659      	mov	r1, fp
 8115362:	f7eb f829 	bl	81003b8 <__aeabi_dsub>
 8115366:	ea4f 5328 	mov.w	r3, r8, asr #20
 811536a:	9305      	str	r3, [sp, #20]
 811536c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8115370:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8115374:	2b10      	cmp	r3, #16
 8115376:	dc02      	bgt.n	811537e <__ieee754_rem_pio2+0x1c6>
 8115378:	e9c4 0100 	strd	r0, r1, [r4]
 811537c:	e039      	b.n	81153f2 <__ieee754_rem_pio2+0x23a>
 811537e:	a34c      	add	r3, pc, #304	@ (adr r3, 81154b0 <__ieee754_rem_pio2+0x2f8>)
 8115380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115388:	f7eb f9ce 	bl	8100728 <__aeabi_dmul>
 811538c:	4606      	mov	r6, r0
 811538e:	460f      	mov	r7, r1
 8115390:	4602      	mov	r2, r0
 8115392:	460b      	mov	r3, r1
 8115394:	4650      	mov	r0, sl
 8115396:	4659      	mov	r1, fp
 8115398:	f7eb f80e 	bl	81003b8 <__aeabi_dsub>
 811539c:	4602      	mov	r2, r0
 811539e:	460b      	mov	r3, r1
 81153a0:	4680      	mov	r8, r0
 81153a2:	4689      	mov	r9, r1
 81153a4:	4650      	mov	r0, sl
 81153a6:	4659      	mov	r1, fp
 81153a8:	f7eb f806 	bl	81003b8 <__aeabi_dsub>
 81153ac:	4632      	mov	r2, r6
 81153ae:	463b      	mov	r3, r7
 81153b0:	f7eb f802 	bl	81003b8 <__aeabi_dsub>
 81153b4:	a340      	add	r3, pc, #256	@ (adr r3, 81154b8 <__ieee754_rem_pio2+0x300>)
 81153b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81153ba:	4606      	mov	r6, r0
 81153bc:	460f      	mov	r7, r1
 81153be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81153c2:	f7eb f9b1 	bl	8100728 <__aeabi_dmul>
 81153c6:	4632      	mov	r2, r6
 81153c8:	463b      	mov	r3, r7
 81153ca:	f7ea fff5 	bl	81003b8 <__aeabi_dsub>
 81153ce:	4602      	mov	r2, r0
 81153d0:	460b      	mov	r3, r1
 81153d2:	4606      	mov	r6, r0
 81153d4:	460f      	mov	r7, r1
 81153d6:	4640      	mov	r0, r8
 81153d8:	4649      	mov	r1, r9
 81153da:	f7ea ffed 	bl	81003b8 <__aeabi_dsub>
 81153de:	9a05      	ldr	r2, [sp, #20]
 81153e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 81153e4:	1ad3      	subs	r3, r2, r3
 81153e6:	2b31      	cmp	r3, #49	@ 0x31
 81153e8:	dc20      	bgt.n	811542c <__ieee754_rem_pio2+0x274>
 81153ea:	e9c4 0100 	strd	r0, r1, [r4]
 81153ee:	46c2      	mov	sl, r8
 81153f0:	46cb      	mov	fp, r9
 81153f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 81153f6:	4650      	mov	r0, sl
 81153f8:	4642      	mov	r2, r8
 81153fa:	464b      	mov	r3, r9
 81153fc:	4659      	mov	r1, fp
 81153fe:	f7ea ffdb 	bl	81003b8 <__aeabi_dsub>
 8115402:	463b      	mov	r3, r7
 8115404:	4632      	mov	r2, r6
 8115406:	f7ea ffd7 	bl	81003b8 <__aeabi_dsub>
 811540a:	9b04      	ldr	r3, [sp, #16]
 811540c:	2b00      	cmp	r3, #0
 811540e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8115412:	f6bf af0e 	bge.w	8115232 <__ieee754_rem_pio2+0x7a>
 8115416:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 811541a:	6063      	str	r3, [r4, #4]
 811541c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8115420:	f8c4 8000 	str.w	r8, [r4]
 8115424:	60a0      	str	r0, [r4, #8]
 8115426:	60e3      	str	r3, [r4, #12]
 8115428:	426d      	negs	r5, r5
 811542a:	e702      	b.n	8115232 <__ieee754_rem_pio2+0x7a>
 811542c:	a326      	add	r3, pc, #152	@ (adr r3, 81154c8 <__ieee754_rem_pio2+0x310>)
 811542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115436:	f7eb f977 	bl	8100728 <__aeabi_dmul>
 811543a:	4606      	mov	r6, r0
 811543c:	460f      	mov	r7, r1
 811543e:	4602      	mov	r2, r0
 8115440:	460b      	mov	r3, r1
 8115442:	4640      	mov	r0, r8
 8115444:	4649      	mov	r1, r9
 8115446:	f7ea ffb7 	bl	81003b8 <__aeabi_dsub>
 811544a:	4602      	mov	r2, r0
 811544c:	460b      	mov	r3, r1
 811544e:	4682      	mov	sl, r0
 8115450:	468b      	mov	fp, r1
 8115452:	4640      	mov	r0, r8
 8115454:	4649      	mov	r1, r9
 8115456:	f7ea ffaf 	bl	81003b8 <__aeabi_dsub>
 811545a:	4632      	mov	r2, r6
 811545c:	463b      	mov	r3, r7
 811545e:	f7ea ffab 	bl	81003b8 <__aeabi_dsub>
 8115462:	a31b      	add	r3, pc, #108	@ (adr r3, 81154d0 <__ieee754_rem_pio2+0x318>)
 8115464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115468:	4606      	mov	r6, r0
 811546a:	460f      	mov	r7, r1
 811546c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115470:	f7eb f95a 	bl	8100728 <__aeabi_dmul>
 8115474:	4632      	mov	r2, r6
 8115476:	463b      	mov	r3, r7
 8115478:	f7ea ff9e 	bl	81003b8 <__aeabi_dsub>
 811547c:	4606      	mov	r6, r0
 811547e:	460f      	mov	r7, r1
 8115480:	e764      	b.n	811534c <__ieee754_rem_pio2+0x194>
 8115482:	4b1b      	ldr	r3, [pc, #108]	@ (81154f0 <__ieee754_rem_pio2+0x338>)
 8115484:	4598      	cmp	r8, r3
 8115486:	d935      	bls.n	81154f4 <__ieee754_rem_pio2+0x33c>
 8115488:	4632      	mov	r2, r6
 811548a:	463b      	mov	r3, r7
 811548c:	4630      	mov	r0, r6
 811548e:	4639      	mov	r1, r7
 8115490:	f7ea ff92 	bl	81003b8 <__aeabi_dsub>
 8115494:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8115498:	e9c4 0100 	strd	r0, r1, [r4]
 811549c:	e69e      	b.n	81151dc <__ieee754_rem_pio2+0x24>
 811549e:	bf00      	nop
 81154a0:	54400000 	.word	0x54400000
 81154a4:	3ff921fb 	.word	0x3ff921fb
 81154a8:	1a626331 	.word	0x1a626331
 81154ac:	3dd0b461 	.word	0x3dd0b461
 81154b0:	1a600000 	.word	0x1a600000
 81154b4:	3dd0b461 	.word	0x3dd0b461
 81154b8:	2e037073 	.word	0x2e037073
 81154bc:	3ba3198a 	.word	0x3ba3198a
 81154c0:	6dc9c883 	.word	0x6dc9c883
 81154c4:	3fe45f30 	.word	0x3fe45f30
 81154c8:	2e000000 	.word	0x2e000000
 81154cc:	3ba3198a 	.word	0x3ba3198a
 81154d0:	252049c1 	.word	0x252049c1
 81154d4:	397b839a 	.word	0x397b839a
 81154d8:	3fe921fb 	.word	0x3fe921fb
 81154dc:	4002d97b 	.word	0x4002d97b
 81154e0:	3ff921fb 	.word	0x3ff921fb
 81154e4:	413921fb 	.word	0x413921fb
 81154e8:	3fe00000 	.word	0x3fe00000
 81154ec:	0811f090 	.word	0x0811f090
 81154f0:	7fefffff 	.word	0x7fefffff
 81154f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 81154f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 81154fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8115500:	4630      	mov	r0, r6
 8115502:	460f      	mov	r7, r1
 8115504:	f7eb fbc0 	bl	8100c88 <__aeabi_d2iz>
 8115508:	f7eb f8a4 	bl	8100654 <__aeabi_i2d>
 811550c:	4602      	mov	r2, r0
 811550e:	460b      	mov	r3, r1
 8115510:	4630      	mov	r0, r6
 8115512:	4639      	mov	r1, r7
 8115514:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8115518:	f7ea ff4e 	bl	81003b8 <__aeabi_dsub>
 811551c:	4b22      	ldr	r3, [pc, #136]	@ (81155a8 <__ieee754_rem_pio2+0x3f0>)
 811551e:	2200      	movs	r2, #0
 8115520:	f7eb f902 	bl	8100728 <__aeabi_dmul>
 8115524:	460f      	mov	r7, r1
 8115526:	4606      	mov	r6, r0
 8115528:	f7eb fbae 	bl	8100c88 <__aeabi_d2iz>
 811552c:	f7eb f892 	bl	8100654 <__aeabi_i2d>
 8115530:	4602      	mov	r2, r0
 8115532:	460b      	mov	r3, r1
 8115534:	4630      	mov	r0, r6
 8115536:	4639      	mov	r1, r7
 8115538:	e9cd 2308 	strd	r2, r3, [sp, #32]
 811553c:	f7ea ff3c 	bl	81003b8 <__aeabi_dsub>
 8115540:	4b19      	ldr	r3, [pc, #100]	@ (81155a8 <__ieee754_rem_pio2+0x3f0>)
 8115542:	2200      	movs	r2, #0
 8115544:	f7eb f8f0 	bl	8100728 <__aeabi_dmul>
 8115548:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 811554c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8115550:	f04f 0803 	mov.w	r8, #3
 8115554:	2600      	movs	r6, #0
 8115556:	2700      	movs	r7, #0
 8115558:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 811555c:	4632      	mov	r2, r6
 811555e:	463b      	mov	r3, r7
 8115560:	46c2      	mov	sl, r8
 8115562:	f108 38ff 	add.w	r8, r8, #4294967295
 8115566:	f7eb fb47 	bl	8100bf8 <__aeabi_dcmpeq>
 811556a:	2800      	cmp	r0, #0
 811556c:	d1f4      	bne.n	8115558 <__ieee754_rem_pio2+0x3a0>
 811556e:	4b0f      	ldr	r3, [pc, #60]	@ (81155ac <__ieee754_rem_pio2+0x3f4>)
 8115570:	9301      	str	r3, [sp, #4]
 8115572:	2302      	movs	r3, #2
 8115574:	9300      	str	r3, [sp, #0]
 8115576:	462a      	mov	r2, r5
 8115578:	4653      	mov	r3, sl
 811557a:	4621      	mov	r1, r4
 811557c:	a806      	add	r0, sp, #24
 811557e:	f000 fb33 	bl	8115be8 <__kernel_rem_pio2>
 8115582:	9b04      	ldr	r3, [sp, #16]
 8115584:	2b00      	cmp	r3, #0
 8115586:	4605      	mov	r5, r0
 8115588:	f6bf ae53 	bge.w	8115232 <__ieee754_rem_pio2+0x7a>
 811558c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8115590:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8115594:	e9c4 2300 	strd	r2, r3, [r4]
 8115598:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 811559c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81155a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 81155a4:	e740      	b.n	8115428 <__ieee754_rem_pio2+0x270>
 81155a6:	bf00      	nop
 81155a8:	41700000 	.word	0x41700000
 81155ac:	0811f110 	.word	0x0811f110

081155b0 <atan>:
 81155b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81155b4:	ec55 4b10 	vmov	r4, r5, d0
 81155b8:	4bbf      	ldr	r3, [pc, #764]	@ (81158b8 <atan+0x308>)
 81155ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 81155be:	429e      	cmp	r6, r3
 81155c0:	46ab      	mov	fp, r5
 81155c2:	d918      	bls.n	81155f6 <atan+0x46>
 81155c4:	4bbd      	ldr	r3, [pc, #756]	@ (81158bc <atan+0x30c>)
 81155c6:	429e      	cmp	r6, r3
 81155c8:	d801      	bhi.n	81155ce <atan+0x1e>
 81155ca:	d109      	bne.n	81155e0 <atan+0x30>
 81155cc:	b144      	cbz	r4, 81155e0 <atan+0x30>
 81155ce:	4622      	mov	r2, r4
 81155d0:	462b      	mov	r3, r5
 81155d2:	4620      	mov	r0, r4
 81155d4:	4629      	mov	r1, r5
 81155d6:	f7ea fef1 	bl	81003bc <__adddf3>
 81155da:	4604      	mov	r4, r0
 81155dc:	460d      	mov	r5, r1
 81155de:	e006      	b.n	81155ee <atan+0x3e>
 81155e0:	f1bb 0f00 	cmp.w	fp, #0
 81155e4:	f340 812b 	ble.w	811583e <atan+0x28e>
 81155e8:	a597      	add	r5, pc, #604	@ (adr r5, 8115848 <atan+0x298>)
 81155ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 81155ee:	ec45 4b10 	vmov	d0, r4, r5
 81155f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81155f6:	4bb2      	ldr	r3, [pc, #712]	@ (81158c0 <atan+0x310>)
 81155f8:	429e      	cmp	r6, r3
 81155fa:	d813      	bhi.n	8115624 <atan+0x74>
 81155fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8115600:	429e      	cmp	r6, r3
 8115602:	d80c      	bhi.n	811561e <atan+0x6e>
 8115604:	a392      	add	r3, pc, #584	@ (adr r3, 8115850 <atan+0x2a0>)
 8115606:	e9d3 2300 	ldrd	r2, r3, [r3]
 811560a:	4620      	mov	r0, r4
 811560c:	4629      	mov	r1, r5
 811560e:	f7ea fed5 	bl	81003bc <__adddf3>
 8115612:	4bac      	ldr	r3, [pc, #688]	@ (81158c4 <atan+0x314>)
 8115614:	2200      	movs	r2, #0
 8115616:	f7eb fb17 	bl	8100c48 <__aeabi_dcmpgt>
 811561a:	2800      	cmp	r0, #0
 811561c:	d1e7      	bne.n	81155ee <atan+0x3e>
 811561e:	f04f 3aff 	mov.w	sl, #4294967295
 8115622:	e029      	b.n	8115678 <atan+0xc8>
 8115624:	f000 f95c 	bl	81158e0 <fabs>
 8115628:	4ba7      	ldr	r3, [pc, #668]	@ (81158c8 <atan+0x318>)
 811562a:	429e      	cmp	r6, r3
 811562c:	ec55 4b10 	vmov	r4, r5, d0
 8115630:	f200 80bc 	bhi.w	81157ac <atan+0x1fc>
 8115634:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8115638:	429e      	cmp	r6, r3
 811563a:	f200 809e 	bhi.w	811577a <atan+0x1ca>
 811563e:	4622      	mov	r2, r4
 8115640:	462b      	mov	r3, r5
 8115642:	4620      	mov	r0, r4
 8115644:	4629      	mov	r1, r5
 8115646:	f7ea feb9 	bl	81003bc <__adddf3>
 811564a:	4b9e      	ldr	r3, [pc, #632]	@ (81158c4 <atan+0x314>)
 811564c:	2200      	movs	r2, #0
 811564e:	f7ea feb3 	bl	81003b8 <__aeabi_dsub>
 8115652:	2200      	movs	r2, #0
 8115654:	4606      	mov	r6, r0
 8115656:	460f      	mov	r7, r1
 8115658:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 811565c:	4620      	mov	r0, r4
 811565e:	4629      	mov	r1, r5
 8115660:	f7ea feac 	bl	81003bc <__adddf3>
 8115664:	4602      	mov	r2, r0
 8115666:	460b      	mov	r3, r1
 8115668:	4630      	mov	r0, r6
 811566a:	4639      	mov	r1, r7
 811566c:	f7eb f986 	bl	810097c <__aeabi_ddiv>
 8115670:	f04f 0a00 	mov.w	sl, #0
 8115674:	4604      	mov	r4, r0
 8115676:	460d      	mov	r5, r1
 8115678:	4622      	mov	r2, r4
 811567a:	462b      	mov	r3, r5
 811567c:	4620      	mov	r0, r4
 811567e:	4629      	mov	r1, r5
 8115680:	f7eb f852 	bl	8100728 <__aeabi_dmul>
 8115684:	4602      	mov	r2, r0
 8115686:	460b      	mov	r3, r1
 8115688:	4680      	mov	r8, r0
 811568a:	4689      	mov	r9, r1
 811568c:	f7eb f84c 	bl	8100728 <__aeabi_dmul>
 8115690:	a371      	add	r3, pc, #452	@ (adr r3, 8115858 <atan+0x2a8>)
 8115692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115696:	4606      	mov	r6, r0
 8115698:	460f      	mov	r7, r1
 811569a:	f7eb f845 	bl	8100728 <__aeabi_dmul>
 811569e:	a370      	add	r3, pc, #448	@ (adr r3, 8115860 <atan+0x2b0>)
 81156a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81156a4:	f7ea fe8a 	bl	81003bc <__adddf3>
 81156a8:	4632      	mov	r2, r6
 81156aa:	463b      	mov	r3, r7
 81156ac:	f7eb f83c 	bl	8100728 <__aeabi_dmul>
 81156b0:	a36d      	add	r3, pc, #436	@ (adr r3, 8115868 <atan+0x2b8>)
 81156b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81156b6:	f7ea fe81 	bl	81003bc <__adddf3>
 81156ba:	4632      	mov	r2, r6
 81156bc:	463b      	mov	r3, r7
 81156be:	f7eb f833 	bl	8100728 <__aeabi_dmul>
 81156c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8115870 <atan+0x2c0>)
 81156c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81156c8:	f7ea fe78 	bl	81003bc <__adddf3>
 81156cc:	4632      	mov	r2, r6
 81156ce:	463b      	mov	r3, r7
 81156d0:	f7eb f82a 	bl	8100728 <__aeabi_dmul>
 81156d4:	a368      	add	r3, pc, #416	@ (adr r3, 8115878 <atan+0x2c8>)
 81156d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81156da:	f7ea fe6f 	bl	81003bc <__adddf3>
 81156de:	4632      	mov	r2, r6
 81156e0:	463b      	mov	r3, r7
 81156e2:	f7eb f821 	bl	8100728 <__aeabi_dmul>
 81156e6:	a366      	add	r3, pc, #408	@ (adr r3, 8115880 <atan+0x2d0>)
 81156e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81156ec:	f7ea fe66 	bl	81003bc <__adddf3>
 81156f0:	4642      	mov	r2, r8
 81156f2:	464b      	mov	r3, r9
 81156f4:	f7eb f818 	bl	8100728 <__aeabi_dmul>
 81156f8:	a363      	add	r3, pc, #396	@ (adr r3, 8115888 <atan+0x2d8>)
 81156fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81156fe:	4680      	mov	r8, r0
 8115700:	4689      	mov	r9, r1
 8115702:	4630      	mov	r0, r6
 8115704:	4639      	mov	r1, r7
 8115706:	f7eb f80f 	bl	8100728 <__aeabi_dmul>
 811570a:	a361      	add	r3, pc, #388	@ (adr r3, 8115890 <atan+0x2e0>)
 811570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115710:	f7ea fe52 	bl	81003b8 <__aeabi_dsub>
 8115714:	4632      	mov	r2, r6
 8115716:	463b      	mov	r3, r7
 8115718:	f7eb f806 	bl	8100728 <__aeabi_dmul>
 811571c:	a35e      	add	r3, pc, #376	@ (adr r3, 8115898 <atan+0x2e8>)
 811571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115722:	f7ea fe49 	bl	81003b8 <__aeabi_dsub>
 8115726:	4632      	mov	r2, r6
 8115728:	463b      	mov	r3, r7
 811572a:	f7ea fffd 	bl	8100728 <__aeabi_dmul>
 811572e:	a35c      	add	r3, pc, #368	@ (adr r3, 81158a0 <atan+0x2f0>)
 8115730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115734:	f7ea fe40 	bl	81003b8 <__aeabi_dsub>
 8115738:	4632      	mov	r2, r6
 811573a:	463b      	mov	r3, r7
 811573c:	f7ea fff4 	bl	8100728 <__aeabi_dmul>
 8115740:	a359      	add	r3, pc, #356	@ (adr r3, 81158a8 <atan+0x2f8>)
 8115742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8115746:	f7ea fe37 	bl	81003b8 <__aeabi_dsub>
 811574a:	4632      	mov	r2, r6
 811574c:	463b      	mov	r3, r7
 811574e:	f7ea ffeb 	bl	8100728 <__aeabi_dmul>
 8115752:	4602      	mov	r2, r0
 8115754:	460b      	mov	r3, r1
 8115756:	4640      	mov	r0, r8
 8115758:	4649      	mov	r1, r9
 811575a:	f7ea fe2f 	bl	81003bc <__adddf3>
 811575e:	4622      	mov	r2, r4
 8115760:	462b      	mov	r3, r5
 8115762:	f7ea ffe1 	bl	8100728 <__aeabi_dmul>
 8115766:	f1ba 3fff 	cmp.w	sl, #4294967295
 811576a:	4602      	mov	r2, r0
 811576c:	460b      	mov	r3, r1
 811576e:	d148      	bne.n	8115802 <atan+0x252>
 8115770:	4620      	mov	r0, r4
 8115772:	4629      	mov	r1, r5
 8115774:	f7ea fe20 	bl	81003b8 <__aeabi_dsub>
 8115778:	e72f      	b.n	81155da <atan+0x2a>
 811577a:	4b52      	ldr	r3, [pc, #328]	@ (81158c4 <atan+0x314>)
 811577c:	2200      	movs	r2, #0
 811577e:	4620      	mov	r0, r4
 8115780:	4629      	mov	r1, r5
 8115782:	f7ea fe19 	bl	81003b8 <__aeabi_dsub>
 8115786:	4b4f      	ldr	r3, [pc, #316]	@ (81158c4 <atan+0x314>)
 8115788:	4606      	mov	r6, r0
 811578a:	460f      	mov	r7, r1
 811578c:	2200      	movs	r2, #0
 811578e:	4620      	mov	r0, r4
 8115790:	4629      	mov	r1, r5
 8115792:	f7ea fe13 	bl	81003bc <__adddf3>
 8115796:	4602      	mov	r2, r0
 8115798:	460b      	mov	r3, r1
 811579a:	4630      	mov	r0, r6
 811579c:	4639      	mov	r1, r7
 811579e:	f7eb f8ed 	bl	810097c <__aeabi_ddiv>
 81157a2:	f04f 0a01 	mov.w	sl, #1
 81157a6:	4604      	mov	r4, r0
 81157a8:	460d      	mov	r5, r1
 81157aa:	e765      	b.n	8115678 <atan+0xc8>
 81157ac:	4b47      	ldr	r3, [pc, #284]	@ (81158cc <atan+0x31c>)
 81157ae:	429e      	cmp	r6, r3
 81157b0:	d21c      	bcs.n	81157ec <atan+0x23c>
 81157b2:	4b47      	ldr	r3, [pc, #284]	@ (81158d0 <atan+0x320>)
 81157b4:	2200      	movs	r2, #0
 81157b6:	4620      	mov	r0, r4
 81157b8:	4629      	mov	r1, r5
 81157ba:	f7ea fdfd 	bl	81003b8 <__aeabi_dsub>
 81157be:	4b44      	ldr	r3, [pc, #272]	@ (81158d0 <atan+0x320>)
 81157c0:	4606      	mov	r6, r0
 81157c2:	460f      	mov	r7, r1
 81157c4:	2200      	movs	r2, #0
 81157c6:	4620      	mov	r0, r4
 81157c8:	4629      	mov	r1, r5
 81157ca:	f7ea ffad 	bl	8100728 <__aeabi_dmul>
 81157ce:	4b3d      	ldr	r3, [pc, #244]	@ (81158c4 <atan+0x314>)
 81157d0:	2200      	movs	r2, #0
 81157d2:	f7ea fdf3 	bl	81003bc <__adddf3>
 81157d6:	4602      	mov	r2, r0
 81157d8:	460b      	mov	r3, r1
 81157da:	4630      	mov	r0, r6
 81157dc:	4639      	mov	r1, r7
 81157de:	f7eb f8cd 	bl	810097c <__aeabi_ddiv>
 81157e2:	f04f 0a02 	mov.w	sl, #2
 81157e6:	4604      	mov	r4, r0
 81157e8:	460d      	mov	r5, r1
 81157ea:	e745      	b.n	8115678 <atan+0xc8>
 81157ec:	4622      	mov	r2, r4
 81157ee:	462b      	mov	r3, r5
 81157f0:	4938      	ldr	r1, [pc, #224]	@ (81158d4 <atan+0x324>)
 81157f2:	2000      	movs	r0, #0
 81157f4:	f7eb f8c2 	bl	810097c <__aeabi_ddiv>
 81157f8:	f04f 0a03 	mov.w	sl, #3
 81157fc:	4604      	mov	r4, r0
 81157fe:	460d      	mov	r5, r1
 8115800:	e73a      	b.n	8115678 <atan+0xc8>
 8115802:	4b35      	ldr	r3, [pc, #212]	@ (81158d8 <atan+0x328>)
 8115804:	4e35      	ldr	r6, [pc, #212]	@ (81158dc <atan+0x32c>)
 8115806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 811580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811580e:	f7ea fdd3 	bl	81003b8 <__aeabi_dsub>
 8115812:	4622      	mov	r2, r4
 8115814:	462b      	mov	r3, r5
 8115816:	f7ea fdcf 	bl	81003b8 <__aeabi_dsub>
 811581a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 811581e:	4602      	mov	r2, r0
 8115820:	460b      	mov	r3, r1
 8115822:	e9d6 0100 	ldrd	r0, r1, [r6]
 8115826:	f7ea fdc7 	bl	81003b8 <__aeabi_dsub>
 811582a:	f1bb 0f00 	cmp.w	fp, #0
 811582e:	4604      	mov	r4, r0
 8115830:	460d      	mov	r5, r1
 8115832:	f6bf aedc 	bge.w	81155ee <atan+0x3e>
 8115836:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 811583a:	461d      	mov	r5, r3
 811583c:	e6d7      	b.n	81155ee <atan+0x3e>
 811583e:	a51c      	add	r5, pc, #112	@ (adr r5, 81158b0 <atan+0x300>)
 8115840:	e9d5 4500 	ldrd	r4, r5, [r5]
 8115844:	e6d3      	b.n	81155ee <atan+0x3e>
 8115846:	bf00      	nop
 8115848:	54442d18 	.word	0x54442d18
 811584c:	3ff921fb 	.word	0x3ff921fb
 8115850:	8800759c 	.word	0x8800759c
 8115854:	7e37e43c 	.word	0x7e37e43c
 8115858:	e322da11 	.word	0xe322da11
 811585c:	3f90ad3a 	.word	0x3f90ad3a
 8115860:	24760deb 	.word	0x24760deb
 8115864:	3fa97b4b 	.word	0x3fa97b4b
 8115868:	a0d03d51 	.word	0xa0d03d51
 811586c:	3fb10d66 	.word	0x3fb10d66
 8115870:	c54c206e 	.word	0xc54c206e
 8115874:	3fb745cd 	.word	0x3fb745cd
 8115878:	920083ff 	.word	0x920083ff
 811587c:	3fc24924 	.word	0x3fc24924
 8115880:	5555550d 	.word	0x5555550d
 8115884:	3fd55555 	.word	0x3fd55555
 8115888:	2c6a6c2f 	.word	0x2c6a6c2f
 811588c:	bfa2b444 	.word	0xbfa2b444
 8115890:	52defd9a 	.word	0x52defd9a
 8115894:	3fadde2d 	.word	0x3fadde2d
 8115898:	af749a6d 	.word	0xaf749a6d
 811589c:	3fb3b0f2 	.word	0x3fb3b0f2
 81158a0:	fe231671 	.word	0xfe231671
 81158a4:	3fbc71c6 	.word	0x3fbc71c6
 81158a8:	9998ebc4 	.word	0x9998ebc4
 81158ac:	3fc99999 	.word	0x3fc99999
 81158b0:	54442d18 	.word	0x54442d18
 81158b4:	bff921fb 	.word	0xbff921fb
 81158b8:	440fffff 	.word	0x440fffff
 81158bc:	7ff00000 	.word	0x7ff00000
 81158c0:	3fdbffff 	.word	0x3fdbffff
 81158c4:	3ff00000 	.word	0x3ff00000
 81158c8:	3ff2ffff 	.word	0x3ff2ffff
 81158cc:	40038000 	.word	0x40038000
 81158d0:	3ff80000 	.word	0x3ff80000
 81158d4:	bff00000 	.word	0xbff00000
 81158d8:	0811f218 	.word	0x0811f218
 81158dc:	0811f238 	.word	0x0811f238

081158e0 <fabs>:
 81158e0:	ec51 0b10 	vmov	r0, r1, d0
 81158e4:	4602      	mov	r2, r0
 81158e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 81158ea:	ec43 2b10 	vmov	d0, r2, r3
 81158ee:	4770      	bx	lr

081158f0 <__ieee754_atan2f>:
 81158f0:	ee10 2a90 	vmov	r2, s1
 81158f4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 81158f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 81158fc:	b510      	push	{r4, lr}
 81158fe:	eef0 7a40 	vmov.f32	s15, s0
 8115902:	d806      	bhi.n	8115912 <__ieee754_atan2f+0x22>
 8115904:	ee10 0a10 	vmov	r0, s0
 8115908:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 811590c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8115910:	d904      	bls.n	811591c <__ieee754_atan2f+0x2c>
 8115912:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8115916:	eeb0 0a67 	vmov.f32	s0, s15
 811591a:	bd10      	pop	{r4, pc}
 811591c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8115920:	d103      	bne.n	811592a <__ieee754_atan2f+0x3a>
 8115922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8115926:	f000 b883 	b.w	8115a30 <atanf>
 811592a:	1794      	asrs	r4, r2, #30
 811592c:	f004 0402 	and.w	r4, r4, #2
 8115930:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8115934:	b943      	cbnz	r3, 8115948 <__ieee754_atan2f+0x58>
 8115936:	2c02      	cmp	r4, #2
 8115938:	d05e      	beq.n	81159f8 <__ieee754_atan2f+0x108>
 811593a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8115a0c <__ieee754_atan2f+0x11c>
 811593e:	2c03      	cmp	r4, #3
 8115940:	bf08      	it	eq
 8115942:	eef0 7a47 	vmoveq.f32	s15, s14
 8115946:	e7e6      	b.n	8115916 <__ieee754_atan2f+0x26>
 8115948:	b941      	cbnz	r1, 811595c <__ieee754_atan2f+0x6c>
 811594a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8115a10 <__ieee754_atan2f+0x120>
 811594e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8115a14 <__ieee754_atan2f+0x124>
 8115952:	2800      	cmp	r0, #0
 8115954:	bfa8      	it	ge
 8115956:	eef0 7a47 	vmovge.f32	s15, s14
 811595a:	e7dc      	b.n	8115916 <__ieee754_atan2f+0x26>
 811595c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8115960:	d110      	bne.n	8115984 <__ieee754_atan2f+0x94>
 8115962:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8115966:	f104 34ff 	add.w	r4, r4, #4294967295
 811596a:	d107      	bne.n	811597c <__ieee754_atan2f+0x8c>
 811596c:	2c02      	cmp	r4, #2
 811596e:	d846      	bhi.n	81159fe <__ieee754_atan2f+0x10e>
 8115970:	4b29      	ldr	r3, [pc, #164]	@ (8115a18 <__ieee754_atan2f+0x128>)
 8115972:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8115976:	edd3 7a00 	vldr	s15, [r3]
 811597a:	e7cc      	b.n	8115916 <__ieee754_atan2f+0x26>
 811597c:	2c02      	cmp	r4, #2
 811597e:	d841      	bhi.n	8115a04 <__ieee754_atan2f+0x114>
 8115980:	4b26      	ldr	r3, [pc, #152]	@ (8115a1c <__ieee754_atan2f+0x12c>)
 8115982:	e7f6      	b.n	8115972 <__ieee754_atan2f+0x82>
 8115984:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8115988:	d0df      	beq.n	811594a <__ieee754_atan2f+0x5a>
 811598a:	1a5b      	subs	r3, r3, r1
 811598c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8115990:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8115994:	da1a      	bge.n	81159cc <__ieee754_atan2f+0xdc>
 8115996:	2a00      	cmp	r2, #0
 8115998:	da01      	bge.n	811599e <__ieee754_atan2f+0xae>
 811599a:	313c      	adds	r1, #60	@ 0x3c
 811599c:	db19      	blt.n	81159d2 <__ieee754_atan2f+0xe2>
 811599e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 81159a2:	f000 f919 	bl	8115bd8 <fabsf>
 81159a6:	f000 f843 	bl	8115a30 <atanf>
 81159aa:	eef0 7a40 	vmov.f32	s15, s0
 81159ae:	2c01      	cmp	r4, #1
 81159b0:	d012      	beq.n	81159d8 <__ieee754_atan2f+0xe8>
 81159b2:	2c02      	cmp	r4, #2
 81159b4:	d017      	beq.n	81159e6 <__ieee754_atan2f+0xf6>
 81159b6:	2c00      	cmp	r4, #0
 81159b8:	d0ad      	beq.n	8115916 <__ieee754_atan2f+0x26>
 81159ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8115a20 <__ieee754_atan2f+0x130>
 81159be:	ee77 7a87 	vadd.f32	s15, s15, s14
 81159c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8115a24 <__ieee754_atan2f+0x134>
 81159c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81159ca:	e7a4      	b.n	8115916 <__ieee754_atan2f+0x26>
 81159cc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8115a14 <__ieee754_atan2f+0x124>
 81159d0:	e7ed      	b.n	81159ae <__ieee754_atan2f+0xbe>
 81159d2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8115a28 <__ieee754_atan2f+0x138>
 81159d6:	e7ea      	b.n	81159ae <__ieee754_atan2f+0xbe>
 81159d8:	ee17 3a90 	vmov	r3, s15
 81159dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 81159e0:	ee07 3a90 	vmov	s15, r3
 81159e4:	e797      	b.n	8115916 <__ieee754_atan2f+0x26>
 81159e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8115a20 <__ieee754_atan2f+0x130>
 81159ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 81159ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8115a24 <__ieee754_atan2f+0x134>
 81159f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 81159f6:	e78e      	b.n	8115916 <__ieee754_atan2f+0x26>
 81159f8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8115a24 <__ieee754_atan2f+0x134>
 81159fc:	e78b      	b.n	8115916 <__ieee754_atan2f+0x26>
 81159fe:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8115a2c <__ieee754_atan2f+0x13c>
 8115a02:	e788      	b.n	8115916 <__ieee754_atan2f+0x26>
 8115a04:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8115a28 <__ieee754_atan2f+0x138>
 8115a08:	e785      	b.n	8115916 <__ieee754_atan2f+0x26>
 8115a0a:	bf00      	nop
 8115a0c:	c0490fdb 	.word	0xc0490fdb
 8115a10:	bfc90fdb 	.word	0xbfc90fdb
 8115a14:	3fc90fdb 	.word	0x3fc90fdb
 8115a18:	0811f264 	.word	0x0811f264
 8115a1c:	0811f258 	.word	0x0811f258
 8115a20:	33bbbd2e 	.word	0x33bbbd2e
 8115a24:	40490fdb 	.word	0x40490fdb
 8115a28:	00000000 	.word	0x00000000
 8115a2c:	3f490fdb 	.word	0x3f490fdb

08115a30 <atanf>:
 8115a30:	b538      	push	{r3, r4, r5, lr}
 8115a32:	ee10 5a10 	vmov	r5, s0
 8115a36:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8115a3a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8115a3e:	eef0 7a40 	vmov.f32	s15, s0
 8115a42:	d310      	bcc.n	8115a66 <atanf+0x36>
 8115a44:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8115a48:	d904      	bls.n	8115a54 <atanf+0x24>
 8115a4a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8115a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8115a52:	bd38      	pop	{r3, r4, r5, pc}
 8115a54:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8115b8c <atanf+0x15c>
 8115a58:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8115b90 <atanf+0x160>
 8115a5c:	2d00      	cmp	r5, #0
 8115a5e:	bfc8      	it	gt
 8115a60:	eef0 7a47 	vmovgt.f32	s15, s14
 8115a64:	e7f3      	b.n	8115a4e <atanf+0x1e>
 8115a66:	4b4b      	ldr	r3, [pc, #300]	@ (8115b94 <atanf+0x164>)
 8115a68:	429c      	cmp	r4, r3
 8115a6a:	d810      	bhi.n	8115a8e <atanf+0x5e>
 8115a6c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8115a70:	d20a      	bcs.n	8115a88 <atanf+0x58>
 8115a72:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8115b98 <atanf+0x168>
 8115a76:	ee30 7a07 	vadd.f32	s14, s0, s14
 8115a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8115a7e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8115a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8115a86:	dce2      	bgt.n	8115a4e <atanf+0x1e>
 8115a88:	f04f 33ff 	mov.w	r3, #4294967295
 8115a8c:	e013      	b.n	8115ab6 <atanf+0x86>
 8115a8e:	f000 f8a3 	bl	8115bd8 <fabsf>
 8115a92:	4b42      	ldr	r3, [pc, #264]	@ (8115b9c <atanf+0x16c>)
 8115a94:	429c      	cmp	r4, r3
 8115a96:	d84f      	bhi.n	8115b38 <atanf+0x108>
 8115a98:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8115a9c:	429c      	cmp	r4, r3
 8115a9e:	d841      	bhi.n	8115b24 <atanf+0xf4>
 8115aa0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8115aa4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8115aa8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8115aac:	2300      	movs	r3, #0
 8115aae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8115ab2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8115ab6:	1c5a      	adds	r2, r3, #1
 8115ab8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8115abc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8115ba0 <atanf+0x170>
 8115ac0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8115ba4 <atanf+0x174>
 8115ac4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8115ba8 <atanf+0x178>
 8115ac8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8115acc:	eee6 5a87 	vfma.f32	s11, s13, s14
 8115ad0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8115bac <atanf+0x17c>
 8115ad4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8115ad8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8115bb0 <atanf+0x180>
 8115adc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8115ae0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8115bb4 <atanf+0x184>
 8115ae4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8115ae8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8115bb8 <atanf+0x188>
 8115aec:	eee7 5a26 	vfma.f32	s11, s14, s13
 8115af0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8115bbc <atanf+0x18c>
 8115af4:	eea6 5a87 	vfma.f32	s10, s13, s14
 8115af8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8115bc0 <atanf+0x190>
 8115afc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8115b00:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8115bc4 <atanf+0x194>
 8115b04:	eea7 5a26 	vfma.f32	s10, s14, s13
 8115b08:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8115bc8 <atanf+0x198>
 8115b0c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8115b10:	ee27 7a26 	vmul.f32	s14, s14, s13
 8115b14:	eea5 7a86 	vfma.f32	s14, s11, s12
 8115b18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8115b1c:	d121      	bne.n	8115b62 <atanf+0x132>
 8115b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8115b22:	e794      	b.n	8115a4e <atanf+0x1e>
 8115b24:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8115b28:	ee30 7a67 	vsub.f32	s14, s0, s15
 8115b2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8115b30:	2301      	movs	r3, #1
 8115b32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8115b36:	e7be      	b.n	8115ab6 <atanf+0x86>
 8115b38:	4b24      	ldr	r3, [pc, #144]	@ (8115bcc <atanf+0x19c>)
 8115b3a:	429c      	cmp	r4, r3
 8115b3c:	d80b      	bhi.n	8115b56 <atanf+0x126>
 8115b3e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8115b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8115b46:	eea0 7a27 	vfma.f32	s14, s0, s15
 8115b4a:	2302      	movs	r3, #2
 8115b4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8115b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8115b54:	e7af      	b.n	8115ab6 <atanf+0x86>
 8115b56:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8115b5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8115b5e:	2303      	movs	r3, #3
 8115b60:	e7a9      	b.n	8115ab6 <atanf+0x86>
 8115b62:	4a1b      	ldr	r2, [pc, #108]	@ (8115bd0 <atanf+0x1a0>)
 8115b64:	491b      	ldr	r1, [pc, #108]	@ (8115bd4 <atanf+0x1a4>)
 8115b66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8115b6a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8115b6e:	edd3 6a00 	vldr	s13, [r3]
 8115b72:	ee37 7a66 	vsub.f32	s14, s14, s13
 8115b76:	2d00      	cmp	r5, #0
 8115b78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8115b7c:	edd2 7a00 	vldr	s15, [r2]
 8115b80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8115b84:	bfb8      	it	lt
 8115b86:	eef1 7a67 	vneglt.f32	s15, s15
 8115b8a:	e760      	b.n	8115a4e <atanf+0x1e>
 8115b8c:	bfc90fdb 	.word	0xbfc90fdb
 8115b90:	3fc90fdb 	.word	0x3fc90fdb
 8115b94:	3edfffff 	.word	0x3edfffff
 8115b98:	7149f2ca 	.word	0x7149f2ca
 8115b9c:	3f97ffff 	.word	0x3f97ffff
 8115ba0:	3c8569d7 	.word	0x3c8569d7
 8115ba4:	3d4bda59 	.word	0x3d4bda59
 8115ba8:	bd6ef16b 	.word	0xbd6ef16b
 8115bac:	3d886b35 	.word	0x3d886b35
 8115bb0:	3dba2e6e 	.word	0x3dba2e6e
 8115bb4:	3e124925 	.word	0x3e124925
 8115bb8:	3eaaaaab 	.word	0x3eaaaaab
 8115bbc:	bd15a221 	.word	0xbd15a221
 8115bc0:	bd9d8795 	.word	0xbd9d8795
 8115bc4:	bde38e38 	.word	0xbde38e38
 8115bc8:	be4ccccd 	.word	0xbe4ccccd
 8115bcc:	401bffff 	.word	0x401bffff
 8115bd0:	0811f280 	.word	0x0811f280
 8115bd4:	0811f270 	.word	0x0811f270

08115bd8 <fabsf>:
 8115bd8:	ee10 3a10 	vmov	r3, s0
 8115bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8115be0:	ee00 3a10 	vmov	s0, r3
 8115be4:	4770      	bx	lr
	...

08115be8 <__kernel_rem_pio2>:
 8115be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115bec:	ed2d 8b02 	vpush	{d8}
 8115bf0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8115bf4:	f112 0f14 	cmn.w	r2, #20
 8115bf8:	9306      	str	r3, [sp, #24]
 8115bfa:	9104      	str	r1, [sp, #16]
 8115bfc:	4bc2      	ldr	r3, [pc, #776]	@ (8115f08 <__kernel_rem_pio2+0x320>)
 8115bfe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8115c00:	9008      	str	r0, [sp, #32]
 8115c02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8115c06:	9300      	str	r3, [sp, #0]
 8115c08:	9b06      	ldr	r3, [sp, #24]
 8115c0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8115c0e:	bfa8      	it	ge
 8115c10:	1ed4      	subge	r4, r2, #3
 8115c12:	9305      	str	r3, [sp, #20]
 8115c14:	bfb2      	itee	lt
 8115c16:	2400      	movlt	r4, #0
 8115c18:	2318      	movge	r3, #24
 8115c1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8115c1e:	f06f 0317 	mvn.w	r3, #23
 8115c22:	fb04 3303 	mla	r3, r4, r3, r3
 8115c26:	eb03 0b02 	add.w	fp, r3, r2
 8115c2a:	9b00      	ldr	r3, [sp, #0]
 8115c2c:	9a05      	ldr	r2, [sp, #20]
 8115c2e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8115ef8 <__kernel_rem_pio2+0x310>
 8115c32:	eb03 0802 	add.w	r8, r3, r2
 8115c36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8115c38:	1aa7      	subs	r7, r4, r2
 8115c3a:	ae20      	add	r6, sp, #128	@ 0x80
 8115c3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8115c40:	2500      	movs	r5, #0
 8115c42:	4545      	cmp	r5, r8
 8115c44:	dd12      	ble.n	8115c6c <__kernel_rem_pio2+0x84>
 8115c46:	9b06      	ldr	r3, [sp, #24]
 8115c48:	aa20      	add	r2, sp, #128	@ 0x80
 8115c4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8115c4e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8115c52:	2700      	movs	r7, #0
 8115c54:	9b00      	ldr	r3, [sp, #0]
 8115c56:	429f      	cmp	r7, r3
 8115c58:	dc2e      	bgt.n	8115cb8 <__kernel_rem_pio2+0xd0>
 8115c5a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8115ef8 <__kernel_rem_pio2+0x310>
 8115c5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8115c62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8115c66:	46a8      	mov	r8, r5
 8115c68:	2600      	movs	r6, #0
 8115c6a:	e01b      	b.n	8115ca4 <__kernel_rem_pio2+0xbc>
 8115c6c:	42ef      	cmn	r7, r5
 8115c6e:	d407      	bmi.n	8115c80 <__kernel_rem_pio2+0x98>
 8115c70:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8115c74:	f7ea fcee 	bl	8100654 <__aeabi_i2d>
 8115c78:	e8e6 0102 	strd	r0, r1, [r6], #8
 8115c7c:	3501      	adds	r5, #1
 8115c7e:	e7e0      	b.n	8115c42 <__kernel_rem_pio2+0x5a>
 8115c80:	ec51 0b18 	vmov	r0, r1, d8
 8115c84:	e7f8      	b.n	8115c78 <__kernel_rem_pio2+0x90>
 8115c86:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8115c8a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8115c8e:	f7ea fd4b 	bl	8100728 <__aeabi_dmul>
 8115c92:	4602      	mov	r2, r0
 8115c94:	460b      	mov	r3, r1
 8115c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115c9a:	f7ea fb8f 	bl	81003bc <__adddf3>
 8115c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8115ca2:	3601      	adds	r6, #1
 8115ca4:	9b05      	ldr	r3, [sp, #20]
 8115ca6:	429e      	cmp	r6, r3
 8115ca8:	dded      	ble.n	8115c86 <__kernel_rem_pio2+0x9e>
 8115caa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8115cae:	3701      	adds	r7, #1
 8115cb0:	ecaa 7b02 	vstmia	sl!, {d7}
 8115cb4:	3508      	adds	r5, #8
 8115cb6:	e7cd      	b.n	8115c54 <__kernel_rem_pio2+0x6c>
 8115cb8:	9b00      	ldr	r3, [sp, #0]
 8115cba:	f8dd 8000 	ldr.w	r8, [sp]
 8115cbe:	aa0c      	add	r2, sp, #48	@ 0x30
 8115cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8115cc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8115cc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8115cc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8115ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8115cce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8115cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8115cd4:	ab98      	add	r3, sp, #608	@ 0x260
 8115cd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8115cda:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8115cde:	ed8d 7b02 	vstr	d7, [sp, #8]
 8115ce2:	ac0c      	add	r4, sp, #48	@ 0x30
 8115ce4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8115ce6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8115cea:	46a1      	mov	r9, r4
 8115cec:	46c2      	mov	sl, r8
 8115cee:	f1ba 0f00 	cmp.w	sl, #0
 8115cf2:	dc77      	bgt.n	8115de4 <__kernel_rem_pio2+0x1fc>
 8115cf4:	4658      	mov	r0, fp
 8115cf6:	ed9d 0b02 	vldr	d0, [sp, #8]
 8115cfa:	f000 fac5 	bl	8116288 <scalbn>
 8115cfe:	ec57 6b10 	vmov	r6, r7, d0
 8115d02:	2200      	movs	r2, #0
 8115d04:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8115d08:	4630      	mov	r0, r6
 8115d0a:	4639      	mov	r1, r7
 8115d0c:	f7ea fd0c 	bl	8100728 <__aeabi_dmul>
 8115d10:	ec41 0b10 	vmov	d0, r0, r1
 8115d14:	f000 fb34 	bl	8116380 <floor>
 8115d18:	4b7c      	ldr	r3, [pc, #496]	@ (8115f0c <__kernel_rem_pio2+0x324>)
 8115d1a:	ec51 0b10 	vmov	r0, r1, d0
 8115d1e:	2200      	movs	r2, #0
 8115d20:	f7ea fd02 	bl	8100728 <__aeabi_dmul>
 8115d24:	4602      	mov	r2, r0
 8115d26:	460b      	mov	r3, r1
 8115d28:	4630      	mov	r0, r6
 8115d2a:	4639      	mov	r1, r7
 8115d2c:	f7ea fb44 	bl	81003b8 <__aeabi_dsub>
 8115d30:	460f      	mov	r7, r1
 8115d32:	4606      	mov	r6, r0
 8115d34:	f7ea ffa8 	bl	8100c88 <__aeabi_d2iz>
 8115d38:	9002      	str	r0, [sp, #8]
 8115d3a:	f7ea fc8b 	bl	8100654 <__aeabi_i2d>
 8115d3e:	4602      	mov	r2, r0
 8115d40:	460b      	mov	r3, r1
 8115d42:	4630      	mov	r0, r6
 8115d44:	4639      	mov	r1, r7
 8115d46:	f7ea fb37 	bl	81003b8 <__aeabi_dsub>
 8115d4a:	f1bb 0f00 	cmp.w	fp, #0
 8115d4e:	4606      	mov	r6, r0
 8115d50:	460f      	mov	r7, r1
 8115d52:	dd6c      	ble.n	8115e2e <__kernel_rem_pio2+0x246>
 8115d54:	f108 31ff 	add.w	r1, r8, #4294967295
 8115d58:	ab0c      	add	r3, sp, #48	@ 0x30
 8115d5a:	9d02      	ldr	r5, [sp, #8]
 8115d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8115d60:	f1cb 0018 	rsb	r0, fp, #24
 8115d64:	fa43 f200 	asr.w	r2, r3, r0
 8115d68:	4415      	add	r5, r2
 8115d6a:	4082      	lsls	r2, r0
 8115d6c:	1a9b      	subs	r3, r3, r2
 8115d6e:	aa0c      	add	r2, sp, #48	@ 0x30
 8115d70:	9502      	str	r5, [sp, #8]
 8115d72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8115d76:	f1cb 0217 	rsb	r2, fp, #23
 8115d7a:	fa43 f902 	asr.w	r9, r3, r2
 8115d7e:	f1b9 0f00 	cmp.w	r9, #0
 8115d82:	dd64      	ble.n	8115e4e <__kernel_rem_pio2+0x266>
 8115d84:	9b02      	ldr	r3, [sp, #8]
 8115d86:	2200      	movs	r2, #0
 8115d88:	3301      	adds	r3, #1
 8115d8a:	9302      	str	r3, [sp, #8]
 8115d8c:	4615      	mov	r5, r2
 8115d8e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8115d92:	4590      	cmp	r8, r2
 8115d94:	f300 80a1 	bgt.w	8115eda <__kernel_rem_pio2+0x2f2>
 8115d98:	f1bb 0f00 	cmp.w	fp, #0
 8115d9c:	dd07      	ble.n	8115dae <__kernel_rem_pio2+0x1c6>
 8115d9e:	f1bb 0f01 	cmp.w	fp, #1
 8115da2:	f000 80c1 	beq.w	8115f28 <__kernel_rem_pio2+0x340>
 8115da6:	f1bb 0f02 	cmp.w	fp, #2
 8115daa:	f000 80c8 	beq.w	8115f3e <__kernel_rem_pio2+0x356>
 8115dae:	f1b9 0f02 	cmp.w	r9, #2
 8115db2:	d14c      	bne.n	8115e4e <__kernel_rem_pio2+0x266>
 8115db4:	4632      	mov	r2, r6
 8115db6:	463b      	mov	r3, r7
 8115db8:	4955      	ldr	r1, [pc, #340]	@ (8115f10 <__kernel_rem_pio2+0x328>)
 8115dba:	2000      	movs	r0, #0
 8115dbc:	f7ea fafc 	bl	81003b8 <__aeabi_dsub>
 8115dc0:	4606      	mov	r6, r0
 8115dc2:	460f      	mov	r7, r1
 8115dc4:	2d00      	cmp	r5, #0
 8115dc6:	d042      	beq.n	8115e4e <__kernel_rem_pio2+0x266>
 8115dc8:	4658      	mov	r0, fp
 8115dca:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8115f00 <__kernel_rem_pio2+0x318>
 8115dce:	f000 fa5b 	bl	8116288 <scalbn>
 8115dd2:	4630      	mov	r0, r6
 8115dd4:	4639      	mov	r1, r7
 8115dd6:	ec53 2b10 	vmov	r2, r3, d0
 8115dda:	f7ea faed 	bl	81003b8 <__aeabi_dsub>
 8115dde:	4606      	mov	r6, r0
 8115de0:	460f      	mov	r7, r1
 8115de2:	e034      	b.n	8115e4e <__kernel_rem_pio2+0x266>
 8115de4:	4b4b      	ldr	r3, [pc, #300]	@ (8115f14 <__kernel_rem_pio2+0x32c>)
 8115de6:	2200      	movs	r2, #0
 8115de8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115dec:	f7ea fc9c 	bl	8100728 <__aeabi_dmul>
 8115df0:	f7ea ff4a 	bl	8100c88 <__aeabi_d2iz>
 8115df4:	f7ea fc2e 	bl	8100654 <__aeabi_i2d>
 8115df8:	4b47      	ldr	r3, [pc, #284]	@ (8115f18 <__kernel_rem_pio2+0x330>)
 8115dfa:	2200      	movs	r2, #0
 8115dfc:	4606      	mov	r6, r0
 8115dfe:	460f      	mov	r7, r1
 8115e00:	f7ea fc92 	bl	8100728 <__aeabi_dmul>
 8115e04:	4602      	mov	r2, r0
 8115e06:	460b      	mov	r3, r1
 8115e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115e0c:	f7ea fad4 	bl	81003b8 <__aeabi_dsub>
 8115e10:	f7ea ff3a 	bl	8100c88 <__aeabi_d2iz>
 8115e14:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8115e18:	f849 0b04 	str.w	r0, [r9], #4
 8115e1c:	4639      	mov	r1, r7
 8115e1e:	4630      	mov	r0, r6
 8115e20:	f7ea facc 	bl	81003bc <__adddf3>
 8115e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8115e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8115e2c:	e75f      	b.n	8115cee <__kernel_rem_pio2+0x106>
 8115e2e:	d107      	bne.n	8115e40 <__kernel_rem_pio2+0x258>
 8115e30:	f108 33ff 	add.w	r3, r8, #4294967295
 8115e34:	aa0c      	add	r2, sp, #48	@ 0x30
 8115e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8115e3a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8115e3e:	e79e      	b.n	8115d7e <__kernel_rem_pio2+0x196>
 8115e40:	4b36      	ldr	r3, [pc, #216]	@ (8115f1c <__kernel_rem_pio2+0x334>)
 8115e42:	2200      	movs	r2, #0
 8115e44:	f7ea fef6 	bl	8100c34 <__aeabi_dcmpge>
 8115e48:	2800      	cmp	r0, #0
 8115e4a:	d143      	bne.n	8115ed4 <__kernel_rem_pio2+0x2ec>
 8115e4c:	4681      	mov	r9, r0
 8115e4e:	2200      	movs	r2, #0
 8115e50:	2300      	movs	r3, #0
 8115e52:	4630      	mov	r0, r6
 8115e54:	4639      	mov	r1, r7
 8115e56:	f7ea fecf 	bl	8100bf8 <__aeabi_dcmpeq>
 8115e5a:	2800      	cmp	r0, #0
 8115e5c:	f000 80c1 	beq.w	8115fe2 <__kernel_rem_pio2+0x3fa>
 8115e60:	f108 33ff 	add.w	r3, r8, #4294967295
 8115e64:	2200      	movs	r2, #0
 8115e66:	9900      	ldr	r1, [sp, #0]
 8115e68:	428b      	cmp	r3, r1
 8115e6a:	da70      	bge.n	8115f4e <__kernel_rem_pio2+0x366>
 8115e6c:	2a00      	cmp	r2, #0
 8115e6e:	f000 808b 	beq.w	8115f88 <__kernel_rem_pio2+0x3a0>
 8115e72:	f108 38ff 	add.w	r8, r8, #4294967295
 8115e76:	ab0c      	add	r3, sp, #48	@ 0x30
 8115e78:	f1ab 0b18 	sub.w	fp, fp, #24
 8115e7c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8115e80:	2b00      	cmp	r3, #0
 8115e82:	d0f6      	beq.n	8115e72 <__kernel_rem_pio2+0x28a>
 8115e84:	4658      	mov	r0, fp
 8115e86:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8115f00 <__kernel_rem_pio2+0x318>
 8115e8a:	f000 f9fd 	bl	8116288 <scalbn>
 8115e8e:	f108 0301 	add.w	r3, r8, #1
 8115e92:	00da      	lsls	r2, r3, #3
 8115e94:	9205      	str	r2, [sp, #20]
 8115e96:	ec55 4b10 	vmov	r4, r5, d0
 8115e9a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8115e9c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8115f14 <__kernel_rem_pio2+0x32c>
 8115ea0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8115ea4:	4646      	mov	r6, r8
 8115ea6:	f04f 0a00 	mov.w	sl, #0
 8115eaa:	2e00      	cmp	r6, #0
 8115eac:	f280 80d1 	bge.w	8116052 <__kernel_rem_pio2+0x46a>
 8115eb0:	4644      	mov	r4, r8
 8115eb2:	2c00      	cmp	r4, #0
 8115eb4:	f2c0 80ff 	blt.w	81160b6 <__kernel_rem_pio2+0x4ce>
 8115eb8:	4b19      	ldr	r3, [pc, #100]	@ (8115f20 <__kernel_rem_pio2+0x338>)
 8115eba:	461f      	mov	r7, r3
 8115ebc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8115ebe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8115ec2:	9306      	str	r3, [sp, #24]
 8115ec4:	f04f 0a00 	mov.w	sl, #0
 8115ec8:	f04f 0b00 	mov.w	fp, #0
 8115ecc:	2600      	movs	r6, #0
 8115ece:	eba8 0504 	sub.w	r5, r8, r4
 8115ed2:	e0e4      	b.n	811609e <__kernel_rem_pio2+0x4b6>
 8115ed4:	f04f 0902 	mov.w	r9, #2
 8115ed8:	e754      	b.n	8115d84 <__kernel_rem_pio2+0x19c>
 8115eda:	f854 3b04 	ldr.w	r3, [r4], #4
 8115ede:	bb0d      	cbnz	r5, 8115f24 <__kernel_rem_pio2+0x33c>
 8115ee0:	b123      	cbz	r3, 8115eec <__kernel_rem_pio2+0x304>
 8115ee2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8115ee6:	f844 3c04 	str.w	r3, [r4, #-4]
 8115eea:	2301      	movs	r3, #1
 8115eec:	3201      	adds	r2, #1
 8115eee:	461d      	mov	r5, r3
 8115ef0:	e74f      	b.n	8115d92 <__kernel_rem_pio2+0x1aa>
 8115ef2:	bf00      	nop
 8115ef4:	f3af 8000 	nop.w
	...
 8115f04:	3ff00000 	.word	0x3ff00000
 8115f08:	0811f2d0 	.word	0x0811f2d0
 8115f0c:	40200000 	.word	0x40200000
 8115f10:	3ff00000 	.word	0x3ff00000
 8115f14:	3e700000 	.word	0x3e700000
 8115f18:	41700000 	.word	0x41700000
 8115f1c:	3fe00000 	.word	0x3fe00000
 8115f20:	0811f290 	.word	0x0811f290
 8115f24:	1acb      	subs	r3, r1, r3
 8115f26:	e7de      	b.n	8115ee6 <__kernel_rem_pio2+0x2fe>
 8115f28:	f108 32ff 	add.w	r2, r8, #4294967295
 8115f2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8115f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8115f32:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8115f36:	a90c      	add	r1, sp, #48	@ 0x30
 8115f38:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8115f3c:	e737      	b.n	8115dae <__kernel_rem_pio2+0x1c6>
 8115f3e:	f108 32ff 	add.w	r2, r8, #4294967295
 8115f42:	ab0c      	add	r3, sp, #48	@ 0x30
 8115f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8115f48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8115f4c:	e7f3      	b.n	8115f36 <__kernel_rem_pio2+0x34e>
 8115f4e:	a90c      	add	r1, sp, #48	@ 0x30
 8115f50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8115f54:	3b01      	subs	r3, #1
 8115f56:	430a      	orrs	r2, r1
 8115f58:	e785      	b.n	8115e66 <__kernel_rem_pio2+0x27e>
 8115f5a:	3401      	adds	r4, #1
 8115f5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8115f60:	2a00      	cmp	r2, #0
 8115f62:	d0fa      	beq.n	8115f5a <__kernel_rem_pio2+0x372>
 8115f64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8115f66:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8115f6a:	eb0d 0503 	add.w	r5, sp, r3
 8115f6e:	9b06      	ldr	r3, [sp, #24]
 8115f70:	aa20      	add	r2, sp, #128	@ 0x80
 8115f72:	4443      	add	r3, r8
 8115f74:	f108 0701 	add.w	r7, r8, #1
 8115f78:	3d98      	subs	r5, #152	@ 0x98
 8115f7a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8115f7e:	4444      	add	r4, r8
 8115f80:	42bc      	cmp	r4, r7
 8115f82:	da04      	bge.n	8115f8e <__kernel_rem_pio2+0x3a6>
 8115f84:	46a0      	mov	r8, r4
 8115f86:	e6a2      	b.n	8115cce <__kernel_rem_pio2+0xe6>
 8115f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8115f8a:	2401      	movs	r4, #1
 8115f8c:	e7e6      	b.n	8115f5c <__kernel_rem_pio2+0x374>
 8115f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8115f90:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8115f94:	f7ea fb5e 	bl	8100654 <__aeabi_i2d>
 8115f98:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8116258 <__kernel_rem_pio2+0x670>
 8115f9c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8115fa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8115fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8115fa8:	46b2      	mov	sl, r6
 8115faa:	f04f 0800 	mov.w	r8, #0
 8115fae:	9b05      	ldr	r3, [sp, #20]
 8115fb0:	4598      	cmp	r8, r3
 8115fb2:	dd05      	ble.n	8115fc0 <__kernel_rem_pio2+0x3d8>
 8115fb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8115fb8:	3701      	adds	r7, #1
 8115fba:	eca5 7b02 	vstmia	r5!, {d7}
 8115fbe:	e7df      	b.n	8115f80 <__kernel_rem_pio2+0x398>
 8115fc0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8115fc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8115fc8:	f7ea fbae 	bl	8100728 <__aeabi_dmul>
 8115fcc:	4602      	mov	r2, r0
 8115fce:	460b      	mov	r3, r1
 8115fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8115fd4:	f7ea f9f2 	bl	81003bc <__adddf3>
 8115fd8:	f108 0801 	add.w	r8, r8, #1
 8115fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8115fe0:	e7e5      	b.n	8115fae <__kernel_rem_pio2+0x3c6>
 8115fe2:	f1cb 0000 	rsb	r0, fp, #0
 8115fe6:	ec47 6b10 	vmov	d0, r6, r7
 8115fea:	f000 f94d 	bl	8116288 <scalbn>
 8115fee:	ec55 4b10 	vmov	r4, r5, d0
 8115ff2:	4b9b      	ldr	r3, [pc, #620]	@ (8116260 <__kernel_rem_pio2+0x678>)
 8115ff4:	2200      	movs	r2, #0
 8115ff6:	4620      	mov	r0, r4
 8115ff8:	4629      	mov	r1, r5
 8115ffa:	f7ea fe1b 	bl	8100c34 <__aeabi_dcmpge>
 8115ffe:	b300      	cbz	r0, 8116042 <__kernel_rem_pio2+0x45a>
 8116000:	4b98      	ldr	r3, [pc, #608]	@ (8116264 <__kernel_rem_pio2+0x67c>)
 8116002:	2200      	movs	r2, #0
 8116004:	4620      	mov	r0, r4
 8116006:	4629      	mov	r1, r5
 8116008:	f7ea fb8e 	bl	8100728 <__aeabi_dmul>
 811600c:	f7ea fe3c 	bl	8100c88 <__aeabi_d2iz>
 8116010:	4606      	mov	r6, r0
 8116012:	f7ea fb1f 	bl	8100654 <__aeabi_i2d>
 8116016:	4b92      	ldr	r3, [pc, #584]	@ (8116260 <__kernel_rem_pio2+0x678>)
 8116018:	2200      	movs	r2, #0
 811601a:	f7ea fb85 	bl	8100728 <__aeabi_dmul>
 811601e:	460b      	mov	r3, r1
 8116020:	4602      	mov	r2, r0
 8116022:	4629      	mov	r1, r5
 8116024:	4620      	mov	r0, r4
 8116026:	f7ea f9c7 	bl	81003b8 <__aeabi_dsub>
 811602a:	f7ea fe2d 	bl	8100c88 <__aeabi_d2iz>
 811602e:	ab0c      	add	r3, sp, #48	@ 0x30
 8116030:	f10b 0b18 	add.w	fp, fp, #24
 8116034:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8116038:	f108 0801 	add.w	r8, r8, #1
 811603c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8116040:	e720      	b.n	8115e84 <__kernel_rem_pio2+0x29c>
 8116042:	4620      	mov	r0, r4
 8116044:	4629      	mov	r1, r5
 8116046:	f7ea fe1f 	bl	8100c88 <__aeabi_d2iz>
 811604a:	ab0c      	add	r3, sp, #48	@ 0x30
 811604c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8116050:	e718      	b.n	8115e84 <__kernel_rem_pio2+0x29c>
 8116052:	ab0c      	add	r3, sp, #48	@ 0x30
 8116054:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8116058:	f7ea fafc 	bl	8100654 <__aeabi_i2d>
 811605c:	4622      	mov	r2, r4
 811605e:	462b      	mov	r3, r5
 8116060:	f7ea fb62 	bl	8100728 <__aeabi_dmul>
 8116064:	4652      	mov	r2, sl
 8116066:	e967 0102 	strd	r0, r1, [r7, #-8]!
 811606a:	465b      	mov	r3, fp
 811606c:	4620      	mov	r0, r4
 811606e:	4629      	mov	r1, r5
 8116070:	f7ea fb5a 	bl	8100728 <__aeabi_dmul>
 8116074:	3e01      	subs	r6, #1
 8116076:	4604      	mov	r4, r0
 8116078:	460d      	mov	r5, r1
 811607a:	e716      	b.n	8115eaa <__kernel_rem_pio2+0x2c2>
 811607c:	9906      	ldr	r1, [sp, #24]
 811607e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8116082:	9106      	str	r1, [sp, #24]
 8116084:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8116088:	f7ea fb4e 	bl	8100728 <__aeabi_dmul>
 811608c:	4602      	mov	r2, r0
 811608e:	460b      	mov	r3, r1
 8116090:	4650      	mov	r0, sl
 8116092:	4659      	mov	r1, fp
 8116094:	f7ea f992 	bl	81003bc <__adddf3>
 8116098:	3601      	adds	r6, #1
 811609a:	4682      	mov	sl, r0
 811609c:	468b      	mov	fp, r1
 811609e:	9b00      	ldr	r3, [sp, #0]
 81160a0:	429e      	cmp	r6, r3
 81160a2:	dc01      	bgt.n	81160a8 <__kernel_rem_pio2+0x4c0>
 81160a4:	42ae      	cmp	r6, r5
 81160a6:	dde9      	ble.n	811607c <__kernel_rem_pio2+0x494>
 81160a8:	ab48      	add	r3, sp, #288	@ 0x120
 81160aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 81160ae:	e9c5 ab00 	strd	sl, fp, [r5]
 81160b2:	3c01      	subs	r4, #1
 81160b4:	e6fd      	b.n	8115eb2 <__kernel_rem_pio2+0x2ca>
 81160b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 81160b8:	2b02      	cmp	r3, #2
 81160ba:	dc0b      	bgt.n	81160d4 <__kernel_rem_pio2+0x4ec>
 81160bc:	2b00      	cmp	r3, #0
 81160be:	dc35      	bgt.n	811612c <__kernel_rem_pio2+0x544>
 81160c0:	d059      	beq.n	8116176 <__kernel_rem_pio2+0x58e>
 81160c2:	9b02      	ldr	r3, [sp, #8]
 81160c4:	f003 0007 	and.w	r0, r3, #7
 81160c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 81160cc:	ecbd 8b02 	vpop	{d8}
 81160d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81160d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 81160d6:	2b03      	cmp	r3, #3
 81160d8:	d1f3      	bne.n	81160c2 <__kernel_rem_pio2+0x4da>
 81160da:	9b05      	ldr	r3, [sp, #20]
 81160dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 81160e0:	eb0d 0403 	add.w	r4, sp, r3
 81160e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 81160e8:	4625      	mov	r5, r4
 81160ea:	46c2      	mov	sl, r8
 81160ec:	f1ba 0f00 	cmp.w	sl, #0
 81160f0:	dc69      	bgt.n	81161c6 <__kernel_rem_pio2+0x5de>
 81160f2:	4645      	mov	r5, r8
 81160f4:	2d01      	cmp	r5, #1
 81160f6:	f300 8087 	bgt.w	8116208 <__kernel_rem_pio2+0x620>
 81160fa:	9c05      	ldr	r4, [sp, #20]
 81160fc:	ab48      	add	r3, sp, #288	@ 0x120
 81160fe:	441c      	add	r4, r3
 8116100:	2000      	movs	r0, #0
 8116102:	2100      	movs	r1, #0
 8116104:	f1b8 0f01 	cmp.w	r8, #1
 8116108:	f300 809c 	bgt.w	8116244 <__kernel_rem_pio2+0x65c>
 811610c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8116110:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8116114:	f1b9 0f00 	cmp.w	r9, #0
 8116118:	f040 80a6 	bne.w	8116268 <__kernel_rem_pio2+0x680>
 811611c:	9b04      	ldr	r3, [sp, #16]
 811611e:	e9c3 5600 	strd	r5, r6, [r3]
 8116122:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8116126:	e9c3 0104 	strd	r0, r1, [r3, #16]
 811612a:	e7ca      	b.n	81160c2 <__kernel_rem_pio2+0x4da>
 811612c:	9d05      	ldr	r5, [sp, #20]
 811612e:	ab48      	add	r3, sp, #288	@ 0x120
 8116130:	441d      	add	r5, r3
 8116132:	4644      	mov	r4, r8
 8116134:	2000      	movs	r0, #0
 8116136:	2100      	movs	r1, #0
 8116138:	2c00      	cmp	r4, #0
 811613a:	da35      	bge.n	81161a8 <__kernel_rem_pio2+0x5c0>
 811613c:	f1b9 0f00 	cmp.w	r9, #0
 8116140:	d038      	beq.n	81161b4 <__kernel_rem_pio2+0x5cc>
 8116142:	4602      	mov	r2, r0
 8116144:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116148:	9c04      	ldr	r4, [sp, #16]
 811614a:	e9c4 2300 	strd	r2, r3, [r4]
 811614e:	4602      	mov	r2, r0
 8116150:	460b      	mov	r3, r1
 8116152:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8116156:	f7ea f92f 	bl	81003b8 <__aeabi_dsub>
 811615a:	ad4a      	add	r5, sp, #296	@ 0x128
 811615c:	2401      	movs	r4, #1
 811615e:	45a0      	cmp	r8, r4
 8116160:	da2b      	bge.n	81161ba <__kernel_rem_pio2+0x5d2>
 8116162:	f1b9 0f00 	cmp.w	r9, #0
 8116166:	d002      	beq.n	811616e <__kernel_rem_pio2+0x586>
 8116168:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 811616c:	4619      	mov	r1, r3
 811616e:	9b04      	ldr	r3, [sp, #16]
 8116170:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8116174:	e7a5      	b.n	81160c2 <__kernel_rem_pio2+0x4da>
 8116176:	9c05      	ldr	r4, [sp, #20]
 8116178:	ab48      	add	r3, sp, #288	@ 0x120
 811617a:	441c      	add	r4, r3
 811617c:	2000      	movs	r0, #0
 811617e:	2100      	movs	r1, #0
 8116180:	f1b8 0f00 	cmp.w	r8, #0
 8116184:	da09      	bge.n	811619a <__kernel_rem_pio2+0x5b2>
 8116186:	f1b9 0f00 	cmp.w	r9, #0
 811618a:	d002      	beq.n	8116192 <__kernel_rem_pio2+0x5aa>
 811618c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116190:	4619      	mov	r1, r3
 8116192:	9b04      	ldr	r3, [sp, #16]
 8116194:	e9c3 0100 	strd	r0, r1, [r3]
 8116198:	e793      	b.n	81160c2 <__kernel_rem_pio2+0x4da>
 811619a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 811619e:	f7ea f90d 	bl	81003bc <__adddf3>
 81161a2:	f108 38ff 	add.w	r8, r8, #4294967295
 81161a6:	e7eb      	b.n	8116180 <__kernel_rem_pio2+0x598>
 81161a8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 81161ac:	f7ea f906 	bl	81003bc <__adddf3>
 81161b0:	3c01      	subs	r4, #1
 81161b2:	e7c1      	b.n	8116138 <__kernel_rem_pio2+0x550>
 81161b4:	4602      	mov	r2, r0
 81161b6:	460b      	mov	r3, r1
 81161b8:	e7c6      	b.n	8116148 <__kernel_rem_pio2+0x560>
 81161ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 81161be:	f7ea f8fd 	bl	81003bc <__adddf3>
 81161c2:	3401      	adds	r4, #1
 81161c4:	e7cb      	b.n	811615e <__kernel_rem_pio2+0x576>
 81161c6:	ed35 7b02 	vldmdb	r5!, {d7}
 81161ca:	ed8d 7b00 	vstr	d7, [sp]
 81161ce:	ed95 7b02 	vldr	d7, [r5, #8]
 81161d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 81161d6:	ec53 2b17 	vmov	r2, r3, d7
 81161da:	ed8d 7b06 	vstr	d7, [sp, #24]
 81161de:	f7ea f8ed 	bl	81003bc <__adddf3>
 81161e2:	4602      	mov	r2, r0
 81161e4:	460b      	mov	r3, r1
 81161e6:	4606      	mov	r6, r0
 81161e8:	460f      	mov	r7, r1
 81161ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 81161ee:	f7ea f8e3 	bl	81003b8 <__aeabi_dsub>
 81161f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 81161f6:	f7ea f8e1 	bl	81003bc <__adddf3>
 81161fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 81161fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8116202:	e9c5 6700 	strd	r6, r7, [r5]
 8116206:	e771      	b.n	81160ec <__kernel_rem_pio2+0x504>
 8116208:	ed34 7b02 	vldmdb	r4!, {d7}
 811620c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8116210:	ec51 0b17 	vmov	r0, r1, d7
 8116214:	4652      	mov	r2, sl
 8116216:	465b      	mov	r3, fp
 8116218:	ed8d 7b00 	vstr	d7, [sp]
 811621c:	f7ea f8ce 	bl	81003bc <__adddf3>
 8116220:	4602      	mov	r2, r0
 8116222:	460b      	mov	r3, r1
 8116224:	4606      	mov	r6, r0
 8116226:	460f      	mov	r7, r1
 8116228:	e9dd 0100 	ldrd	r0, r1, [sp]
 811622c:	f7ea f8c4 	bl	81003b8 <__aeabi_dsub>
 8116230:	4652      	mov	r2, sl
 8116232:	465b      	mov	r3, fp
 8116234:	f7ea f8c2 	bl	81003bc <__adddf3>
 8116238:	3d01      	subs	r5, #1
 811623a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 811623e:	e9c4 6700 	strd	r6, r7, [r4]
 8116242:	e757      	b.n	81160f4 <__kernel_rem_pio2+0x50c>
 8116244:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8116248:	f7ea f8b8 	bl	81003bc <__adddf3>
 811624c:	f108 38ff 	add.w	r8, r8, #4294967295
 8116250:	e758      	b.n	8116104 <__kernel_rem_pio2+0x51c>
 8116252:	bf00      	nop
 8116254:	f3af 8000 	nop.w
	...
 8116260:	41700000 	.word	0x41700000
 8116264:	3e700000 	.word	0x3e700000
 8116268:	9b04      	ldr	r3, [sp, #16]
 811626a:	9a04      	ldr	r2, [sp, #16]
 811626c:	601d      	str	r5, [r3, #0]
 811626e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8116272:	605c      	str	r4, [r3, #4]
 8116274:	609f      	str	r7, [r3, #8]
 8116276:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 811627a:	60d3      	str	r3, [r2, #12]
 811627c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8116280:	6110      	str	r0, [r2, #16]
 8116282:	6153      	str	r3, [r2, #20]
 8116284:	e71d      	b.n	81160c2 <__kernel_rem_pio2+0x4da>
 8116286:	bf00      	nop

08116288 <scalbn>:
 8116288:	b570      	push	{r4, r5, r6, lr}
 811628a:	ec55 4b10 	vmov	r4, r5, d0
 811628e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8116292:	4606      	mov	r6, r0
 8116294:	462b      	mov	r3, r5
 8116296:	b991      	cbnz	r1, 81162be <scalbn+0x36>
 8116298:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 811629c:	4323      	orrs	r3, r4
 811629e:	d03b      	beq.n	8116318 <scalbn+0x90>
 81162a0:	4b33      	ldr	r3, [pc, #204]	@ (8116370 <scalbn+0xe8>)
 81162a2:	4620      	mov	r0, r4
 81162a4:	4629      	mov	r1, r5
 81162a6:	2200      	movs	r2, #0
 81162a8:	f7ea fa3e 	bl	8100728 <__aeabi_dmul>
 81162ac:	4b31      	ldr	r3, [pc, #196]	@ (8116374 <scalbn+0xec>)
 81162ae:	429e      	cmp	r6, r3
 81162b0:	4604      	mov	r4, r0
 81162b2:	460d      	mov	r5, r1
 81162b4:	da0f      	bge.n	81162d6 <scalbn+0x4e>
 81162b6:	a326      	add	r3, pc, #152	@ (adr r3, 8116350 <scalbn+0xc8>)
 81162b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81162bc:	e01e      	b.n	81162fc <scalbn+0x74>
 81162be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 81162c2:	4291      	cmp	r1, r2
 81162c4:	d10b      	bne.n	81162de <scalbn+0x56>
 81162c6:	4622      	mov	r2, r4
 81162c8:	4620      	mov	r0, r4
 81162ca:	4629      	mov	r1, r5
 81162cc:	f7ea f876 	bl	81003bc <__adddf3>
 81162d0:	4604      	mov	r4, r0
 81162d2:	460d      	mov	r5, r1
 81162d4:	e020      	b.n	8116318 <scalbn+0x90>
 81162d6:	460b      	mov	r3, r1
 81162d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 81162dc:	3936      	subs	r1, #54	@ 0x36
 81162de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 81162e2:	4296      	cmp	r6, r2
 81162e4:	dd0d      	ble.n	8116302 <scalbn+0x7a>
 81162e6:	2d00      	cmp	r5, #0
 81162e8:	a11b      	add	r1, pc, #108	@ (adr r1, 8116358 <scalbn+0xd0>)
 81162ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 81162ee:	da02      	bge.n	81162f6 <scalbn+0x6e>
 81162f0:	a11b      	add	r1, pc, #108	@ (adr r1, 8116360 <scalbn+0xd8>)
 81162f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 81162f6:	a318      	add	r3, pc, #96	@ (adr r3, 8116358 <scalbn+0xd0>)
 81162f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81162fc:	f7ea fa14 	bl	8100728 <__aeabi_dmul>
 8116300:	e7e6      	b.n	81162d0 <scalbn+0x48>
 8116302:	1872      	adds	r2, r6, r1
 8116304:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8116308:	428a      	cmp	r2, r1
 811630a:	dcec      	bgt.n	81162e6 <scalbn+0x5e>
 811630c:	2a00      	cmp	r2, #0
 811630e:	dd06      	ble.n	811631e <scalbn+0x96>
 8116310:	f36f 531e 	bfc	r3, #20, #11
 8116314:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8116318:	ec45 4b10 	vmov	d0, r4, r5
 811631c:	bd70      	pop	{r4, r5, r6, pc}
 811631e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8116322:	da08      	bge.n	8116336 <scalbn+0xae>
 8116324:	2d00      	cmp	r5, #0
 8116326:	a10a      	add	r1, pc, #40	@ (adr r1, 8116350 <scalbn+0xc8>)
 8116328:	e9d1 0100 	ldrd	r0, r1, [r1]
 811632c:	dac3      	bge.n	81162b6 <scalbn+0x2e>
 811632e:	a10e      	add	r1, pc, #56	@ (adr r1, 8116368 <scalbn+0xe0>)
 8116330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8116334:	e7bf      	b.n	81162b6 <scalbn+0x2e>
 8116336:	3236      	adds	r2, #54	@ 0x36
 8116338:	f36f 531e 	bfc	r3, #20, #11
 811633c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8116340:	4620      	mov	r0, r4
 8116342:	4b0d      	ldr	r3, [pc, #52]	@ (8116378 <scalbn+0xf0>)
 8116344:	4629      	mov	r1, r5
 8116346:	2200      	movs	r2, #0
 8116348:	e7d8      	b.n	81162fc <scalbn+0x74>
 811634a:	bf00      	nop
 811634c:	f3af 8000 	nop.w
 8116350:	c2f8f359 	.word	0xc2f8f359
 8116354:	01a56e1f 	.word	0x01a56e1f
 8116358:	8800759c 	.word	0x8800759c
 811635c:	7e37e43c 	.word	0x7e37e43c
 8116360:	8800759c 	.word	0x8800759c
 8116364:	fe37e43c 	.word	0xfe37e43c
 8116368:	c2f8f359 	.word	0xc2f8f359
 811636c:	81a56e1f 	.word	0x81a56e1f
 8116370:	43500000 	.word	0x43500000
 8116374:	ffff3cb0 	.word	0xffff3cb0
 8116378:	3c900000 	.word	0x3c900000
 811637c:	00000000 	.word	0x00000000

08116380 <floor>:
 8116380:	ec51 0b10 	vmov	r0, r1, d0
 8116384:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8116388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811638c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8116390:	2e13      	cmp	r6, #19
 8116392:	460c      	mov	r4, r1
 8116394:	4605      	mov	r5, r0
 8116396:	4680      	mov	r8, r0
 8116398:	dc34      	bgt.n	8116404 <floor+0x84>
 811639a:	2e00      	cmp	r6, #0
 811639c:	da17      	bge.n	81163ce <floor+0x4e>
 811639e:	a332      	add	r3, pc, #200	@ (adr r3, 8116468 <floor+0xe8>)
 81163a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81163a4:	f7ea f80a 	bl	81003bc <__adddf3>
 81163a8:	2200      	movs	r2, #0
 81163aa:	2300      	movs	r3, #0
 81163ac:	f7ea fc4c 	bl	8100c48 <__aeabi_dcmpgt>
 81163b0:	b150      	cbz	r0, 81163c8 <floor+0x48>
 81163b2:	2c00      	cmp	r4, #0
 81163b4:	da55      	bge.n	8116462 <floor+0xe2>
 81163b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 81163ba:	432c      	orrs	r4, r5
 81163bc:	2500      	movs	r5, #0
 81163be:	42ac      	cmp	r4, r5
 81163c0:	4c2b      	ldr	r4, [pc, #172]	@ (8116470 <floor+0xf0>)
 81163c2:	bf08      	it	eq
 81163c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 81163c8:	4621      	mov	r1, r4
 81163ca:	4628      	mov	r0, r5
 81163cc:	e023      	b.n	8116416 <floor+0x96>
 81163ce:	4f29      	ldr	r7, [pc, #164]	@ (8116474 <floor+0xf4>)
 81163d0:	4137      	asrs	r7, r6
 81163d2:	ea01 0307 	and.w	r3, r1, r7
 81163d6:	4303      	orrs	r3, r0
 81163d8:	d01d      	beq.n	8116416 <floor+0x96>
 81163da:	a323      	add	r3, pc, #140	@ (adr r3, 8116468 <floor+0xe8>)
 81163dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81163e0:	f7e9 ffec 	bl	81003bc <__adddf3>
 81163e4:	2200      	movs	r2, #0
 81163e6:	2300      	movs	r3, #0
 81163e8:	f7ea fc2e 	bl	8100c48 <__aeabi_dcmpgt>
 81163ec:	2800      	cmp	r0, #0
 81163ee:	d0eb      	beq.n	81163c8 <floor+0x48>
 81163f0:	2c00      	cmp	r4, #0
 81163f2:	bfbe      	ittt	lt
 81163f4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 81163f8:	4133      	asrlt	r3, r6
 81163fa:	18e4      	addlt	r4, r4, r3
 81163fc:	ea24 0407 	bic.w	r4, r4, r7
 8116400:	2500      	movs	r5, #0
 8116402:	e7e1      	b.n	81163c8 <floor+0x48>
 8116404:	2e33      	cmp	r6, #51	@ 0x33
 8116406:	dd0a      	ble.n	811641e <floor+0x9e>
 8116408:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 811640c:	d103      	bne.n	8116416 <floor+0x96>
 811640e:	4602      	mov	r2, r0
 8116410:	460b      	mov	r3, r1
 8116412:	f7e9 ffd3 	bl	81003bc <__adddf3>
 8116416:	ec41 0b10 	vmov	d0, r0, r1
 811641a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811641e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8116422:	f04f 37ff 	mov.w	r7, #4294967295
 8116426:	40df      	lsrs	r7, r3
 8116428:	4207      	tst	r7, r0
 811642a:	d0f4      	beq.n	8116416 <floor+0x96>
 811642c:	a30e      	add	r3, pc, #56	@ (adr r3, 8116468 <floor+0xe8>)
 811642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8116432:	f7e9 ffc3 	bl	81003bc <__adddf3>
 8116436:	2200      	movs	r2, #0
 8116438:	2300      	movs	r3, #0
 811643a:	f7ea fc05 	bl	8100c48 <__aeabi_dcmpgt>
 811643e:	2800      	cmp	r0, #0
 8116440:	d0c2      	beq.n	81163c8 <floor+0x48>
 8116442:	2c00      	cmp	r4, #0
 8116444:	da0a      	bge.n	811645c <floor+0xdc>
 8116446:	2e14      	cmp	r6, #20
 8116448:	d101      	bne.n	811644e <floor+0xce>
 811644a:	3401      	adds	r4, #1
 811644c:	e006      	b.n	811645c <floor+0xdc>
 811644e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8116452:	2301      	movs	r3, #1
 8116454:	40b3      	lsls	r3, r6
 8116456:	441d      	add	r5, r3
 8116458:	4545      	cmp	r5, r8
 811645a:	d3f6      	bcc.n	811644a <floor+0xca>
 811645c:	ea25 0507 	bic.w	r5, r5, r7
 8116460:	e7b2      	b.n	81163c8 <floor+0x48>
 8116462:	2500      	movs	r5, #0
 8116464:	462c      	mov	r4, r5
 8116466:	e7af      	b.n	81163c8 <floor+0x48>
 8116468:	8800759c 	.word	0x8800759c
 811646c:	7e37e43c 	.word	0x7e37e43c
 8116470:	bff00000 	.word	0xbff00000
 8116474:	000fffff 	.word	0x000fffff

08116478 <rand>:
 8116478:	4b16      	ldr	r3, [pc, #88]	@ (81164d4 <rand+0x5c>)
 811647a:	b510      	push	{r4, lr}
 811647c:	681c      	ldr	r4, [r3, #0]
 811647e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8116480:	b9b3      	cbnz	r3, 81164b0 <rand+0x38>
 8116482:	2018      	movs	r0, #24
 8116484:	f002 f92e 	bl	81186e4 <malloc>
 8116488:	4602      	mov	r2, r0
 811648a:	6320      	str	r0, [r4, #48]	@ 0x30
 811648c:	b920      	cbnz	r0, 8116498 <rand+0x20>
 811648e:	4b12      	ldr	r3, [pc, #72]	@ (81164d8 <rand+0x60>)
 8116490:	4812      	ldr	r0, [pc, #72]	@ (81164dc <rand+0x64>)
 8116492:	2152      	movs	r1, #82	@ 0x52
 8116494:	f001 fa64 	bl	8117960 <__assert_func>
 8116498:	4911      	ldr	r1, [pc, #68]	@ (81164e0 <rand+0x68>)
 811649a:	4b12      	ldr	r3, [pc, #72]	@ (81164e4 <rand+0x6c>)
 811649c:	e9c0 1300 	strd	r1, r3, [r0]
 81164a0:	4b11      	ldr	r3, [pc, #68]	@ (81164e8 <rand+0x70>)
 81164a2:	6083      	str	r3, [r0, #8]
 81164a4:	230b      	movs	r3, #11
 81164a6:	8183      	strh	r3, [r0, #12]
 81164a8:	2100      	movs	r1, #0
 81164aa:	2001      	movs	r0, #1
 81164ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 81164b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 81164b2:	480e      	ldr	r0, [pc, #56]	@ (81164ec <rand+0x74>)
 81164b4:	690b      	ldr	r3, [r1, #16]
 81164b6:	694c      	ldr	r4, [r1, #20]
 81164b8:	4a0d      	ldr	r2, [pc, #52]	@ (81164f0 <rand+0x78>)
 81164ba:	4358      	muls	r0, r3
 81164bc:	fb02 0004 	mla	r0, r2, r4, r0
 81164c0:	fba3 3202 	umull	r3, r2, r3, r2
 81164c4:	3301      	adds	r3, #1
 81164c6:	eb40 0002 	adc.w	r0, r0, r2
 81164ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 81164ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 81164d2:	bd10      	pop	{r4, pc}
 81164d4:	100001d8 	.word	0x100001d8
 81164d8:	0811f2e0 	.word	0x0811f2e0
 81164dc:	0811f2f7 	.word	0x0811f2f7
 81164e0:	abcd330e 	.word	0xabcd330e
 81164e4:	e66d1234 	.word	0xe66d1234
 81164e8:	0005deec 	.word	0x0005deec
 81164ec:	5851f42d 	.word	0x5851f42d
 81164f0:	4c957f2d 	.word	0x4c957f2d

081164f4 <_strtol_l.isra.0>:
 81164f4:	2b24      	cmp	r3, #36	@ 0x24
 81164f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81164fa:	4686      	mov	lr, r0
 81164fc:	4690      	mov	r8, r2
 81164fe:	d801      	bhi.n	8116504 <_strtol_l.isra.0+0x10>
 8116500:	2b01      	cmp	r3, #1
 8116502:	d106      	bne.n	8116512 <_strtol_l.isra.0+0x1e>
 8116504:	f001 f9ea 	bl	81178dc <__errno>
 8116508:	2316      	movs	r3, #22
 811650a:	6003      	str	r3, [r0, #0]
 811650c:	2000      	movs	r0, #0
 811650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8116512:	4834      	ldr	r0, [pc, #208]	@ (81165e4 <_strtol_l.isra.0+0xf0>)
 8116514:	460d      	mov	r5, r1
 8116516:	462a      	mov	r2, r5
 8116518:	f815 4b01 	ldrb.w	r4, [r5], #1
 811651c:	5d06      	ldrb	r6, [r0, r4]
 811651e:	f016 0608 	ands.w	r6, r6, #8
 8116522:	d1f8      	bne.n	8116516 <_strtol_l.isra.0+0x22>
 8116524:	2c2d      	cmp	r4, #45	@ 0x2d
 8116526:	d110      	bne.n	811654a <_strtol_l.isra.0+0x56>
 8116528:	782c      	ldrb	r4, [r5, #0]
 811652a:	2601      	movs	r6, #1
 811652c:	1c95      	adds	r5, r2, #2
 811652e:	f033 0210 	bics.w	r2, r3, #16
 8116532:	d115      	bne.n	8116560 <_strtol_l.isra.0+0x6c>
 8116534:	2c30      	cmp	r4, #48	@ 0x30
 8116536:	d10d      	bne.n	8116554 <_strtol_l.isra.0+0x60>
 8116538:	782a      	ldrb	r2, [r5, #0]
 811653a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 811653e:	2a58      	cmp	r2, #88	@ 0x58
 8116540:	d108      	bne.n	8116554 <_strtol_l.isra.0+0x60>
 8116542:	786c      	ldrb	r4, [r5, #1]
 8116544:	3502      	adds	r5, #2
 8116546:	2310      	movs	r3, #16
 8116548:	e00a      	b.n	8116560 <_strtol_l.isra.0+0x6c>
 811654a:	2c2b      	cmp	r4, #43	@ 0x2b
 811654c:	bf04      	itt	eq
 811654e:	782c      	ldrbeq	r4, [r5, #0]
 8116550:	1c95      	addeq	r5, r2, #2
 8116552:	e7ec      	b.n	811652e <_strtol_l.isra.0+0x3a>
 8116554:	2b00      	cmp	r3, #0
 8116556:	d1f6      	bne.n	8116546 <_strtol_l.isra.0+0x52>
 8116558:	2c30      	cmp	r4, #48	@ 0x30
 811655a:	bf14      	ite	ne
 811655c:	230a      	movne	r3, #10
 811655e:	2308      	moveq	r3, #8
 8116560:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8116564:	f10c 3cff 	add.w	ip, ip, #4294967295
 8116568:	2200      	movs	r2, #0
 811656a:	fbbc f9f3 	udiv	r9, ip, r3
 811656e:	4610      	mov	r0, r2
 8116570:	fb03 ca19 	mls	sl, r3, r9, ip
 8116574:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8116578:	2f09      	cmp	r7, #9
 811657a:	d80f      	bhi.n	811659c <_strtol_l.isra.0+0xa8>
 811657c:	463c      	mov	r4, r7
 811657e:	42a3      	cmp	r3, r4
 8116580:	dd1b      	ble.n	81165ba <_strtol_l.isra.0+0xc6>
 8116582:	1c57      	adds	r7, r2, #1
 8116584:	d007      	beq.n	8116596 <_strtol_l.isra.0+0xa2>
 8116586:	4581      	cmp	r9, r0
 8116588:	d314      	bcc.n	81165b4 <_strtol_l.isra.0+0xc0>
 811658a:	d101      	bne.n	8116590 <_strtol_l.isra.0+0x9c>
 811658c:	45a2      	cmp	sl, r4
 811658e:	db11      	blt.n	81165b4 <_strtol_l.isra.0+0xc0>
 8116590:	fb00 4003 	mla	r0, r0, r3, r4
 8116594:	2201      	movs	r2, #1
 8116596:	f815 4b01 	ldrb.w	r4, [r5], #1
 811659a:	e7eb      	b.n	8116574 <_strtol_l.isra.0+0x80>
 811659c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 81165a0:	2f19      	cmp	r7, #25
 81165a2:	d801      	bhi.n	81165a8 <_strtol_l.isra.0+0xb4>
 81165a4:	3c37      	subs	r4, #55	@ 0x37
 81165a6:	e7ea      	b.n	811657e <_strtol_l.isra.0+0x8a>
 81165a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 81165ac:	2f19      	cmp	r7, #25
 81165ae:	d804      	bhi.n	81165ba <_strtol_l.isra.0+0xc6>
 81165b0:	3c57      	subs	r4, #87	@ 0x57
 81165b2:	e7e4      	b.n	811657e <_strtol_l.isra.0+0x8a>
 81165b4:	f04f 32ff 	mov.w	r2, #4294967295
 81165b8:	e7ed      	b.n	8116596 <_strtol_l.isra.0+0xa2>
 81165ba:	1c53      	adds	r3, r2, #1
 81165bc:	d108      	bne.n	81165d0 <_strtol_l.isra.0+0xdc>
 81165be:	2322      	movs	r3, #34	@ 0x22
 81165c0:	f8ce 3000 	str.w	r3, [lr]
 81165c4:	4660      	mov	r0, ip
 81165c6:	f1b8 0f00 	cmp.w	r8, #0
 81165ca:	d0a0      	beq.n	811650e <_strtol_l.isra.0+0x1a>
 81165cc:	1e69      	subs	r1, r5, #1
 81165ce:	e006      	b.n	81165de <_strtol_l.isra.0+0xea>
 81165d0:	b106      	cbz	r6, 81165d4 <_strtol_l.isra.0+0xe0>
 81165d2:	4240      	negs	r0, r0
 81165d4:	f1b8 0f00 	cmp.w	r8, #0
 81165d8:	d099      	beq.n	811650e <_strtol_l.isra.0+0x1a>
 81165da:	2a00      	cmp	r2, #0
 81165dc:	d1f6      	bne.n	81165cc <_strtol_l.isra.0+0xd8>
 81165de:	f8c8 1000 	str.w	r1, [r8]
 81165e2:	e794      	b.n	811650e <_strtol_l.isra.0+0x1a>
 81165e4:	0811f528 	.word	0x0811f528

081165e8 <_strtol_r>:
 81165e8:	f7ff bf84 	b.w	81164f4 <_strtol_l.isra.0>

081165ec <__cvt>:
 81165ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81165f0:	ec57 6b10 	vmov	r6, r7, d0
 81165f4:	2f00      	cmp	r7, #0
 81165f6:	460c      	mov	r4, r1
 81165f8:	4619      	mov	r1, r3
 81165fa:	463b      	mov	r3, r7
 81165fc:	bfbb      	ittet	lt
 81165fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8116602:	461f      	movlt	r7, r3
 8116604:	2300      	movge	r3, #0
 8116606:	232d      	movlt	r3, #45	@ 0x2d
 8116608:	700b      	strb	r3, [r1, #0]
 811660a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 811660c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8116610:	4691      	mov	r9, r2
 8116612:	f023 0820 	bic.w	r8, r3, #32
 8116616:	bfbc      	itt	lt
 8116618:	4632      	movlt	r2, r6
 811661a:	4616      	movlt	r6, r2
 811661c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8116620:	d005      	beq.n	811662e <__cvt+0x42>
 8116622:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8116626:	d100      	bne.n	811662a <__cvt+0x3e>
 8116628:	3401      	adds	r4, #1
 811662a:	2102      	movs	r1, #2
 811662c:	e000      	b.n	8116630 <__cvt+0x44>
 811662e:	2103      	movs	r1, #3
 8116630:	ab03      	add	r3, sp, #12
 8116632:	9301      	str	r3, [sp, #4]
 8116634:	ab02      	add	r3, sp, #8
 8116636:	9300      	str	r3, [sp, #0]
 8116638:	ec47 6b10 	vmov	d0, r6, r7
 811663c:	4653      	mov	r3, sl
 811663e:	4622      	mov	r2, r4
 8116640:	f001 fa36 	bl	8117ab0 <_dtoa_r>
 8116644:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8116648:	4605      	mov	r5, r0
 811664a:	d119      	bne.n	8116680 <__cvt+0x94>
 811664c:	f019 0f01 	tst.w	r9, #1
 8116650:	d00e      	beq.n	8116670 <__cvt+0x84>
 8116652:	eb00 0904 	add.w	r9, r0, r4
 8116656:	2200      	movs	r2, #0
 8116658:	2300      	movs	r3, #0
 811665a:	4630      	mov	r0, r6
 811665c:	4639      	mov	r1, r7
 811665e:	f7ea facb 	bl	8100bf8 <__aeabi_dcmpeq>
 8116662:	b108      	cbz	r0, 8116668 <__cvt+0x7c>
 8116664:	f8cd 900c 	str.w	r9, [sp, #12]
 8116668:	2230      	movs	r2, #48	@ 0x30
 811666a:	9b03      	ldr	r3, [sp, #12]
 811666c:	454b      	cmp	r3, r9
 811666e:	d31e      	bcc.n	81166ae <__cvt+0xc2>
 8116670:	9b03      	ldr	r3, [sp, #12]
 8116672:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8116674:	1b5b      	subs	r3, r3, r5
 8116676:	4628      	mov	r0, r5
 8116678:	6013      	str	r3, [r2, #0]
 811667a:	b004      	add	sp, #16
 811667c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8116680:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8116684:	eb00 0904 	add.w	r9, r0, r4
 8116688:	d1e5      	bne.n	8116656 <__cvt+0x6a>
 811668a:	7803      	ldrb	r3, [r0, #0]
 811668c:	2b30      	cmp	r3, #48	@ 0x30
 811668e:	d10a      	bne.n	81166a6 <__cvt+0xba>
 8116690:	2200      	movs	r2, #0
 8116692:	2300      	movs	r3, #0
 8116694:	4630      	mov	r0, r6
 8116696:	4639      	mov	r1, r7
 8116698:	f7ea faae 	bl	8100bf8 <__aeabi_dcmpeq>
 811669c:	b918      	cbnz	r0, 81166a6 <__cvt+0xba>
 811669e:	f1c4 0401 	rsb	r4, r4, #1
 81166a2:	f8ca 4000 	str.w	r4, [sl]
 81166a6:	f8da 3000 	ldr.w	r3, [sl]
 81166aa:	4499      	add	r9, r3
 81166ac:	e7d3      	b.n	8116656 <__cvt+0x6a>
 81166ae:	1c59      	adds	r1, r3, #1
 81166b0:	9103      	str	r1, [sp, #12]
 81166b2:	701a      	strb	r2, [r3, #0]
 81166b4:	e7d9      	b.n	811666a <__cvt+0x7e>

081166b6 <__exponent>:
 81166b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81166b8:	2900      	cmp	r1, #0
 81166ba:	bfba      	itte	lt
 81166bc:	4249      	neglt	r1, r1
 81166be:	232d      	movlt	r3, #45	@ 0x2d
 81166c0:	232b      	movge	r3, #43	@ 0x2b
 81166c2:	2909      	cmp	r1, #9
 81166c4:	7002      	strb	r2, [r0, #0]
 81166c6:	7043      	strb	r3, [r0, #1]
 81166c8:	dd29      	ble.n	811671e <__exponent+0x68>
 81166ca:	f10d 0307 	add.w	r3, sp, #7
 81166ce:	461d      	mov	r5, r3
 81166d0:	270a      	movs	r7, #10
 81166d2:	461a      	mov	r2, r3
 81166d4:	fbb1 f6f7 	udiv	r6, r1, r7
 81166d8:	fb07 1416 	mls	r4, r7, r6, r1
 81166dc:	3430      	adds	r4, #48	@ 0x30
 81166de:	f802 4c01 	strb.w	r4, [r2, #-1]
 81166e2:	460c      	mov	r4, r1
 81166e4:	2c63      	cmp	r4, #99	@ 0x63
 81166e6:	f103 33ff 	add.w	r3, r3, #4294967295
 81166ea:	4631      	mov	r1, r6
 81166ec:	dcf1      	bgt.n	81166d2 <__exponent+0x1c>
 81166ee:	3130      	adds	r1, #48	@ 0x30
 81166f0:	1e94      	subs	r4, r2, #2
 81166f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 81166f6:	1c41      	adds	r1, r0, #1
 81166f8:	4623      	mov	r3, r4
 81166fa:	42ab      	cmp	r3, r5
 81166fc:	d30a      	bcc.n	8116714 <__exponent+0x5e>
 81166fe:	f10d 0309 	add.w	r3, sp, #9
 8116702:	1a9b      	subs	r3, r3, r2
 8116704:	42ac      	cmp	r4, r5
 8116706:	bf88      	it	hi
 8116708:	2300      	movhi	r3, #0
 811670a:	3302      	adds	r3, #2
 811670c:	4403      	add	r3, r0
 811670e:	1a18      	subs	r0, r3, r0
 8116710:	b003      	add	sp, #12
 8116712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8116714:	f813 6b01 	ldrb.w	r6, [r3], #1
 8116718:	f801 6f01 	strb.w	r6, [r1, #1]!
 811671c:	e7ed      	b.n	81166fa <__exponent+0x44>
 811671e:	2330      	movs	r3, #48	@ 0x30
 8116720:	3130      	adds	r1, #48	@ 0x30
 8116722:	7083      	strb	r3, [r0, #2]
 8116724:	70c1      	strb	r1, [r0, #3]
 8116726:	1d03      	adds	r3, r0, #4
 8116728:	e7f1      	b.n	811670e <__exponent+0x58>
	...

0811672c <_printf_float>:
 811672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116730:	b08d      	sub	sp, #52	@ 0x34
 8116732:	460c      	mov	r4, r1
 8116734:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8116738:	4616      	mov	r6, r2
 811673a:	461f      	mov	r7, r3
 811673c:	4605      	mov	r5, r0
 811673e:	f001 f883 	bl	8117848 <_localeconv_r>
 8116742:	6803      	ldr	r3, [r0, #0]
 8116744:	9304      	str	r3, [sp, #16]
 8116746:	4618      	mov	r0, r3
 8116748:	f7e9 fe2a 	bl	81003a0 <strlen>
 811674c:	2300      	movs	r3, #0
 811674e:	930a      	str	r3, [sp, #40]	@ 0x28
 8116750:	f8d8 3000 	ldr.w	r3, [r8]
 8116754:	9005      	str	r0, [sp, #20]
 8116756:	3307      	adds	r3, #7
 8116758:	f023 0307 	bic.w	r3, r3, #7
 811675c:	f103 0208 	add.w	r2, r3, #8
 8116760:	f894 a018 	ldrb.w	sl, [r4, #24]
 8116764:	f8d4 b000 	ldr.w	fp, [r4]
 8116768:	f8c8 2000 	str.w	r2, [r8]
 811676c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8116770:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8116774:	9307      	str	r3, [sp, #28]
 8116776:	f8cd 8018 	str.w	r8, [sp, #24]
 811677a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 811677e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8116782:	4b9c      	ldr	r3, [pc, #624]	@ (81169f4 <_printf_float+0x2c8>)
 8116784:	f04f 32ff 	mov.w	r2, #4294967295
 8116788:	f7ea fa68 	bl	8100c5c <__aeabi_dcmpun>
 811678c:	bb70      	cbnz	r0, 81167ec <_printf_float+0xc0>
 811678e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8116792:	4b98      	ldr	r3, [pc, #608]	@ (81169f4 <_printf_float+0x2c8>)
 8116794:	f04f 32ff 	mov.w	r2, #4294967295
 8116798:	f7ea fa42 	bl	8100c20 <__aeabi_dcmple>
 811679c:	bb30      	cbnz	r0, 81167ec <_printf_float+0xc0>
 811679e:	2200      	movs	r2, #0
 81167a0:	2300      	movs	r3, #0
 81167a2:	4640      	mov	r0, r8
 81167a4:	4649      	mov	r1, r9
 81167a6:	f7ea fa31 	bl	8100c0c <__aeabi_dcmplt>
 81167aa:	b110      	cbz	r0, 81167b2 <_printf_float+0x86>
 81167ac:	232d      	movs	r3, #45	@ 0x2d
 81167ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81167b2:	4a91      	ldr	r2, [pc, #580]	@ (81169f8 <_printf_float+0x2cc>)
 81167b4:	4b91      	ldr	r3, [pc, #580]	@ (81169fc <_printf_float+0x2d0>)
 81167b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 81167ba:	bf8c      	ite	hi
 81167bc:	4690      	movhi	r8, r2
 81167be:	4698      	movls	r8, r3
 81167c0:	2303      	movs	r3, #3
 81167c2:	6123      	str	r3, [r4, #16]
 81167c4:	f02b 0304 	bic.w	r3, fp, #4
 81167c8:	6023      	str	r3, [r4, #0]
 81167ca:	f04f 0900 	mov.w	r9, #0
 81167ce:	9700      	str	r7, [sp, #0]
 81167d0:	4633      	mov	r3, r6
 81167d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 81167d4:	4621      	mov	r1, r4
 81167d6:	4628      	mov	r0, r5
 81167d8:	f000 f9d2 	bl	8116b80 <_printf_common>
 81167dc:	3001      	adds	r0, #1
 81167de:	f040 808d 	bne.w	81168fc <_printf_float+0x1d0>
 81167e2:	f04f 30ff 	mov.w	r0, #4294967295
 81167e6:	b00d      	add	sp, #52	@ 0x34
 81167e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81167ec:	4642      	mov	r2, r8
 81167ee:	464b      	mov	r3, r9
 81167f0:	4640      	mov	r0, r8
 81167f2:	4649      	mov	r1, r9
 81167f4:	f7ea fa32 	bl	8100c5c <__aeabi_dcmpun>
 81167f8:	b140      	cbz	r0, 811680c <_printf_float+0xe0>
 81167fa:	464b      	mov	r3, r9
 81167fc:	2b00      	cmp	r3, #0
 81167fe:	bfbc      	itt	lt
 8116800:	232d      	movlt	r3, #45	@ 0x2d
 8116802:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8116806:	4a7e      	ldr	r2, [pc, #504]	@ (8116a00 <_printf_float+0x2d4>)
 8116808:	4b7e      	ldr	r3, [pc, #504]	@ (8116a04 <_printf_float+0x2d8>)
 811680a:	e7d4      	b.n	81167b6 <_printf_float+0x8a>
 811680c:	6863      	ldr	r3, [r4, #4]
 811680e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8116812:	9206      	str	r2, [sp, #24]
 8116814:	1c5a      	adds	r2, r3, #1
 8116816:	d13b      	bne.n	8116890 <_printf_float+0x164>
 8116818:	2306      	movs	r3, #6
 811681a:	6063      	str	r3, [r4, #4]
 811681c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8116820:	2300      	movs	r3, #0
 8116822:	6022      	str	r2, [r4, #0]
 8116824:	9303      	str	r3, [sp, #12]
 8116826:	ab0a      	add	r3, sp, #40	@ 0x28
 8116828:	e9cd a301 	strd	sl, r3, [sp, #4]
 811682c:	ab09      	add	r3, sp, #36	@ 0x24
 811682e:	9300      	str	r3, [sp, #0]
 8116830:	6861      	ldr	r1, [r4, #4]
 8116832:	ec49 8b10 	vmov	d0, r8, r9
 8116836:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 811683a:	4628      	mov	r0, r5
 811683c:	f7ff fed6 	bl	81165ec <__cvt>
 8116840:	9b06      	ldr	r3, [sp, #24]
 8116842:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8116844:	2b47      	cmp	r3, #71	@ 0x47
 8116846:	4680      	mov	r8, r0
 8116848:	d129      	bne.n	811689e <_printf_float+0x172>
 811684a:	1cc8      	adds	r0, r1, #3
 811684c:	db02      	blt.n	8116854 <_printf_float+0x128>
 811684e:	6863      	ldr	r3, [r4, #4]
 8116850:	4299      	cmp	r1, r3
 8116852:	dd41      	ble.n	81168d8 <_printf_float+0x1ac>
 8116854:	f1aa 0a02 	sub.w	sl, sl, #2
 8116858:	fa5f fa8a 	uxtb.w	sl, sl
 811685c:	3901      	subs	r1, #1
 811685e:	4652      	mov	r2, sl
 8116860:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8116864:	9109      	str	r1, [sp, #36]	@ 0x24
 8116866:	f7ff ff26 	bl	81166b6 <__exponent>
 811686a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 811686c:	1813      	adds	r3, r2, r0
 811686e:	2a01      	cmp	r2, #1
 8116870:	4681      	mov	r9, r0
 8116872:	6123      	str	r3, [r4, #16]
 8116874:	dc02      	bgt.n	811687c <_printf_float+0x150>
 8116876:	6822      	ldr	r2, [r4, #0]
 8116878:	07d2      	lsls	r2, r2, #31
 811687a:	d501      	bpl.n	8116880 <_printf_float+0x154>
 811687c:	3301      	adds	r3, #1
 811687e:	6123      	str	r3, [r4, #16]
 8116880:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8116884:	2b00      	cmp	r3, #0
 8116886:	d0a2      	beq.n	81167ce <_printf_float+0xa2>
 8116888:	232d      	movs	r3, #45	@ 0x2d
 811688a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811688e:	e79e      	b.n	81167ce <_printf_float+0xa2>
 8116890:	9a06      	ldr	r2, [sp, #24]
 8116892:	2a47      	cmp	r2, #71	@ 0x47
 8116894:	d1c2      	bne.n	811681c <_printf_float+0xf0>
 8116896:	2b00      	cmp	r3, #0
 8116898:	d1c0      	bne.n	811681c <_printf_float+0xf0>
 811689a:	2301      	movs	r3, #1
 811689c:	e7bd      	b.n	811681a <_printf_float+0xee>
 811689e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81168a2:	d9db      	bls.n	811685c <_printf_float+0x130>
 81168a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 81168a8:	d118      	bne.n	81168dc <_printf_float+0x1b0>
 81168aa:	2900      	cmp	r1, #0
 81168ac:	6863      	ldr	r3, [r4, #4]
 81168ae:	dd0b      	ble.n	81168c8 <_printf_float+0x19c>
 81168b0:	6121      	str	r1, [r4, #16]
 81168b2:	b913      	cbnz	r3, 81168ba <_printf_float+0x18e>
 81168b4:	6822      	ldr	r2, [r4, #0]
 81168b6:	07d0      	lsls	r0, r2, #31
 81168b8:	d502      	bpl.n	81168c0 <_printf_float+0x194>
 81168ba:	3301      	adds	r3, #1
 81168bc:	440b      	add	r3, r1
 81168be:	6123      	str	r3, [r4, #16]
 81168c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 81168c2:	f04f 0900 	mov.w	r9, #0
 81168c6:	e7db      	b.n	8116880 <_printf_float+0x154>
 81168c8:	b913      	cbnz	r3, 81168d0 <_printf_float+0x1a4>
 81168ca:	6822      	ldr	r2, [r4, #0]
 81168cc:	07d2      	lsls	r2, r2, #31
 81168ce:	d501      	bpl.n	81168d4 <_printf_float+0x1a8>
 81168d0:	3302      	adds	r3, #2
 81168d2:	e7f4      	b.n	81168be <_printf_float+0x192>
 81168d4:	2301      	movs	r3, #1
 81168d6:	e7f2      	b.n	81168be <_printf_float+0x192>
 81168d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 81168dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81168de:	4299      	cmp	r1, r3
 81168e0:	db05      	blt.n	81168ee <_printf_float+0x1c2>
 81168e2:	6823      	ldr	r3, [r4, #0]
 81168e4:	6121      	str	r1, [r4, #16]
 81168e6:	07d8      	lsls	r0, r3, #31
 81168e8:	d5ea      	bpl.n	81168c0 <_printf_float+0x194>
 81168ea:	1c4b      	adds	r3, r1, #1
 81168ec:	e7e7      	b.n	81168be <_printf_float+0x192>
 81168ee:	2900      	cmp	r1, #0
 81168f0:	bfd4      	ite	le
 81168f2:	f1c1 0202 	rsble	r2, r1, #2
 81168f6:	2201      	movgt	r2, #1
 81168f8:	4413      	add	r3, r2
 81168fa:	e7e0      	b.n	81168be <_printf_float+0x192>
 81168fc:	6823      	ldr	r3, [r4, #0]
 81168fe:	055a      	lsls	r2, r3, #21
 8116900:	d407      	bmi.n	8116912 <_printf_float+0x1e6>
 8116902:	6923      	ldr	r3, [r4, #16]
 8116904:	4642      	mov	r2, r8
 8116906:	4631      	mov	r1, r6
 8116908:	4628      	mov	r0, r5
 811690a:	47b8      	blx	r7
 811690c:	3001      	adds	r0, #1
 811690e:	d12b      	bne.n	8116968 <_printf_float+0x23c>
 8116910:	e767      	b.n	81167e2 <_printf_float+0xb6>
 8116912:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8116916:	f240 80dd 	bls.w	8116ad4 <_printf_float+0x3a8>
 811691a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 811691e:	2200      	movs	r2, #0
 8116920:	2300      	movs	r3, #0
 8116922:	f7ea f969 	bl	8100bf8 <__aeabi_dcmpeq>
 8116926:	2800      	cmp	r0, #0
 8116928:	d033      	beq.n	8116992 <_printf_float+0x266>
 811692a:	4a37      	ldr	r2, [pc, #220]	@ (8116a08 <_printf_float+0x2dc>)
 811692c:	2301      	movs	r3, #1
 811692e:	4631      	mov	r1, r6
 8116930:	4628      	mov	r0, r5
 8116932:	47b8      	blx	r7
 8116934:	3001      	adds	r0, #1
 8116936:	f43f af54 	beq.w	81167e2 <_printf_float+0xb6>
 811693a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 811693e:	4543      	cmp	r3, r8
 8116940:	db02      	blt.n	8116948 <_printf_float+0x21c>
 8116942:	6823      	ldr	r3, [r4, #0]
 8116944:	07d8      	lsls	r0, r3, #31
 8116946:	d50f      	bpl.n	8116968 <_printf_float+0x23c>
 8116948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811694c:	4631      	mov	r1, r6
 811694e:	4628      	mov	r0, r5
 8116950:	47b8      	blx	r7
 8116952:	3001      	adds	r0, #1
 8116954:	f43f af45 	beq.w	81167e2 <_printf_float+0xb6>
 8116958:	f04f 0900 	mov.w	r9, #0
 811695c:	f108 38ff 	add.w	r8, r8, #4294967295
 8116960:	f104 0a1a 	add.w	sl, r4, #26
 8116964:	45c8      	cmp	r8, r9
 8116966:	dc09      	bgt.n	811697c <_printf_float+0x250>
 8116968:	6823      	ldr	r3, [r4, #0]
 811696a:	079b      	lsls	r3, r3, #30
 811696c:	f100 8103 	bmi.w	8116b76 <_printf_float+0x44a>
 8116970:	68e0      	ldr	r0, [r4, #12]
 8116972:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8116974:	4298      	cmp	r0, r3
 8116976:	bfb8      	it	lt
 8116978:	4618      	movlt	r0, r3
 811697a:	e734      	b.n	81167e6 <_printf_float+0xba>
 811697c:	2301      	movs	r3, #1
 811697e:	4652      	mov	r2, sl
 8116980:	4631      	mov	r1, r6
 8116982:	4628      	mov	r0, r5
 8116984:	47b8      	blx	r7
 8116986:	3001      	adds	r0, #1
 8116988:	f43f af2b 	beq.w	81167e2 <_printf_float+0xb6>
 811698c:	f109 0901 	add.w	r9, r9, #1
 8116990:	e7e8      	b.n	8116964 <_printf_float+0x238>
 8116992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8116994:	2b00      	cmp	r3, #0
 8116996:	dc39      	bgt.n	8116a0c <_printf_float+0x2e0>
 8116998:	4a1b      	ldr	r2, [pc, #108]	@ (8116a08 <_printf_float+0x2dc>)
 811699a:	2301      	movs	r3, #1
 811699c:	4631      	mov	r1, r6
 811699e:	4628      	mov	r0, r5
 81169a0:	47b8      	blx	r7
 81169a2:	3001      	adds	r0, #1
 81169a4:	f43f af1d 	beq.w	81167e2 <_printf_float+0xb6>
 81169a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 81169ac:	ea59 0303 	orrs.w	r3, r9, r3
 81169b0:	d102      	bne.n	81169b8 <_printf_float+0x28c>
 81169b2:	6823      	ldr	r3, [r4, #0]
 81169b4:	07d9      	lsls	r1, r3, #31
 81169b6:	d5d7      	bpl.n	8116968 <_printf_float+0x23c>
 81169b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81169bc:	4631      	mov	r1, r6
 81169be:	4628      	mov	r0, r5
 81169c0:	47b8      	blx	r7
 81169c2:	3001      	adds	r0, #1
 81169c4:	f43f af0d 	beq.w	81167e2 <_printf_float+0xb6>
 81169c8:	f04f 0a00 	mov.w	sl, #0
 81169cc:	f104 0b1a 	add.w	fp, r4, #26
 81169d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81169d2:	425b      	negs	r3, r3
 81169d4:	4553      	cmp	r3, sl
 81169d6:	dc01      	bgt.n	81169dc <_printf_float+0x2b0>
 81169d8:	464b      	mov	r3, r9
 81169da:	e793      	b.n	8116904 <_printf_float+0x1d8>
 81169dc:	2301      	movs	r3, #1
 81169de:	465a      	mov	r2, fp
 81169e0:	4631      	mov	r1, r6
 81169e2:	4628      	mov	r0, r5
 81169e4:	47b8      	blx	r7
 81169e6:	3001      	adds	r0, #1
 81169e8:	f43f aefb 	beq.w	81167e2 <_printf_float+0xb6>
 81169ec:	f10a 0a01 	add.w	sl, sl, #1
 81169f0:	e7ee      	b.n	81169d0 <_printf_float+0x2a4>
 81169f2:	bf00      	nop
 81169f4:	7fefffff 	.word	0x7fefffff
 81169f8:	0811f353 	.word	0x0811f353
 81169fc:	0811f34f 	.word	0x0811f34f
 8116a00:	0811f35b 	.word	0x0811f35b
 8116a04:	0811f357 	.word	0x0811f357
 8116a08:	0811f4ba 	.word	0x0811f4ba
 8116a0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8116a0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8116a12:	4553      	cmp	r3, sl
 8116a14:	bfa8      	it	ge
 8116a16:	4653      	movge	r3, sl
 8116a18:	2b00      	cmp	r3, #0
 8116a1a:	4699      	mov	r9, r3
 8116a1c:	dc36      	bgt.n	8116a8c <_printf_float+0x360>
 8116a1e:	f04f 0b00 	mov.w	fp, #0
 8116a22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8116a26:	f104 021a 	add.w	r2, r4, #26
 8116a2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8116a2c:	9306      	str	r3, [sp, #24]
 8116a2e:	eba3 0309 	sub.w	r3, r3, r9
 8116a32:	455b      	cmp	r3, fp
 8116a34:	dc31      	bgt.n	8116a9a <_printf_float+0x36e>
 8116a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8116a38:	459a      	cmp	sl, r3
 8116a3a:	dc3a      	bgt.n	8116ab2 <_printf_float+0x386>
 8116a3c:	6823      	ldr	r3, [r4, #0]
 8116a3e:	07da      	lsls	r2, r3, #31
 8116a40:	d437      	bmi.n	8116ab2 <_printf_float+0x386>
 8116a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8116a44:	ebaa 0903 	sub.w	r9, sl, r3
 8116a48:	9b06      	ldr	r3, [sp, #24]
 8116a4a:	ebaa 0303 	sub.w	r3, sl, r3
 8116a4e:	4599      	cmp	r9, r3
 8116a50:	bfa8      	it	ge
 8116a52:	4699      	movge	r9, r3
 8116a54:	f1b9 0f00 	cmp.w	r9, #0
 8116a58:	dc33      	bgt.n	8116ac2 <_printf_float+0x396>
 8116a5a:	f04f 0800 	mov.w	r8, #0
 8116a5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8116a62:	f104 0b1a 	add.w	fp, r4, #26
 8116a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8116a68:	ebaa 0303 	sub.w	r3, sl, r3
 8116a6c:	eba3 0309 	sub.w	r3, r3, r9
 8116a70:	4543      	cmp	r3, r8
 8116a72:	f77f af79 	ble.w	8116968 <_printf_float+0x23c>
 8116a76:	2301      	movs	r3, #1
 8116a78:	465a      	mov	r2, fp
 8116a7a:	4631      	mov	r1, r6
 8116a7c:	4628      	mov	r0, r5
 8116a7e:	47b8      	blx	r7
 8116a80:	3001      	adds	r0, #1
 8116a82:	f43f aeae 	beq.w	81167e2 <_printf_float+0xb6>
 8116a86:	f108 0801 	add.w	r8, r8, #1
 8116a8a:	e7ec      	b.n	8116a66 <_printf_float+0x33a>
 8116a8c:	4642      	mov	r2, r8
 8116a8e:	4631      	mov	r1, r6
 8116a90:	4628      	mov	r0, r5
 8116a92:	47b8      	blx	r7
 8116a94:	3001      	adds	r0, #1
 8116a96:	d1c2      	bne.n	8116a1e <_printf_float+0x2f2>
 8116a98:	e6a3      	b.n	81167e2 <_printf_float+0xb6>
 8116a9a:	2301      	movs	r3, #1
 8116a9c:	4631      	mov	r1, r6
 8116a9e:	4628      	mov	r0, r5
 8116aa0:	9206      	str	r2, [sp, #24]
 8116aa2:	47b8      	blx	r7
 8116aa4:	3001      	adds	r0, #1
 8116aa6:	f43f ae9c 	beq.w	81167e2 <_printf_float+0xb6>
 8116aaa:	9a06      	ldr	r2, [sp, #24]
 8116aac:	f10b 0b01 	add.w	fp, fp, #1
 8116ab0:	e7bb      	b.n	8116a2a <_printf_float+0x2fe>
 8116ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8116ab6:	4631      	mov	r1, r6
 8116ab8:	4628      	mov	r0, r5
 8116aba:	47b8      	blx	r7
 8116abc:	3001      	adds	r0, #1
 8116abe:	d1c0      	bne.n	8116a42 <_printf_float+0x316>
 8116ac0:	e68f      	b.n	81167e2 <_printf_float+0xb6>
 8116ac2:	9a06      	ldr	r2, [sp, #24]
 8116ac4:	464b      	mov	r3, r9
 8116ac6:	4442      	add	r2, r8
 8116ac8:	4631      	mov	r1, r6
 8116aca:	4628      	mov	r0, r5
 8116acc:	47b8      	blx	r7
 8116ace:	3001      	adds	r0, #1
 8116ad0:	d1c3      	bne.n	8116a5a <_printf_float+0x32e>
 8116ad2:	e686      	b.n	81167e2 <_printf_float+0xb6>
 8116ad4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8116ad8:	f1ba 0f01 	cmp.w	sl, #1
 8116adc:	dc01      	bgt.n	8116ae2 <_printf_float+0x3b6>
 8116ade:	07db      	lsls	r3, r3, #31
 8116ae0:	d536      	bpl.n	8116b50 <_printf_float+0x424>
 8116ae2:	2301      	movs	r3, #1
 8116ae4:	4642      	mov	r2, r8
 8116ae6:	4631      	mov	r1, r6
 8116ae8:	4628      	mov	r0, r5
 8116aea:	47b8      	blx	r7
 8116aec:	3001      	adds	r0, #1
 8116aee:	f43f ae78 	beq.w	81167e2 <_printf_float+0xb6>
 8116af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8116af6:	4631      	mov	r1, r6
 8116af8:	4628      	mov	r0, r5
 8116afa:	47b8      	blx	r7
 8116afc:	3001      	adds	r0, #1
 8116afe:	f43f ae70 	beq.w	81167e2 <_printf_float+0xb6>
 8116b02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8116b06:	2200      	movs	r2, #0
 8116b08:	2300      	movs	r3, #0
 8116b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8116b0e:	f7ea f873 	bl	8100bf8 <__aeabi_dcmpeq>
 8116b12:	b9c0      	cbnz	r0, 8116b46 <_printf_float+0x41a>
 8116b14:	4653      	mov	r3, sl
 8116b16:	f108 0201 	add.w	r2, r8, #1
 8116b1a:	4631      	mov	r1, r6
 8116b1c:	4628      	mov	r0, r5
 8116b1e:	47b8      	blx	r7
 8116b20:	3001      	adds	r0, #1
 8116b22:	d10c      	bne.n	8116b3e <_printf_float+0x412>
 8116b24:	e65d      	b.n	81167e2 <_printf_float+0xb6>
 8116b26:	2301      	movs	r3, #1
 8116b28:	465a      	mov	r2, fp
 8116b2a:	4631      	mov	r1, r6
 8116b2c:	4628      	mov	r0, r5
 8116b2e:	47b8      	blx	r7
 8116b30:	3001      	adds	r0, #1
 8116b32:	f43f ae56 	beq.w	81167e2 <_printf_float+0xb6>
 8116b36:	f108 0801 	add.w	r8, r8, #1
 8116b3a:	45d0      	cmp	r8, sl
 8116b3c:	dbf3      	blt.n	8116b26 <_printf_float+0x3fa>
 8116b3e:	464b      	mov	r3, r9
 8116b40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8116b44:	e6df      	b.n	8116906 <_printf_float+0x1da>
 8116b46:	f04f 0800 	mov.w	r8, #0
 8116b4a:	f104 0b1a 	add.w	fp, r4, #26
 8116b4e:	e7f4      	b.n	8116b3a <_printf_float+0x40e>
 8116b50:	2301      	movs	r3, #1
 8116b52:	4642      	mov	r2, r8
 8116b54:	e7e1      	b.n	8116b1a <_printf_float+0x3ee>
 8116b56:	2301      	movs	r3, #1
 8116b58:	464a      	mov	r2, r9
 8116b5a:	4631      	mov	r1, r6
 8116b5c:	4628      	mov	r0, r5
 8116b5e:	47b8      	blx	r7
 8116b60:	3001      	adds	r0, #1
 8116b62:	f43f ae3e 	beq.w	81167e2 <_printf_float+0xb6>
 8116b66:	f108 0801 	add.w	r8, r8, #1
 8116b6a:	68e3      	ldr	r3, [r4, #12]
 8116b6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8116b6e:	1a5b      	subs	r3, r3, r1
 8116b70:	4543      	cmp	r3, r8
 8116b72:	dcf0      	bgt.n	8116b56 <_printf_float+0x42a>
 8116b74:	e6fc      	b.n	8116970 <_printf_float+0x244>
 8116b76:	f04f 0800 	mov.w	r8, #0
 8116b7a:	f104 0919 	add.w	r9, r4, #25
 8116b7e:	e7f4      	b.n	8116b6a <_printf_float+0x43e>

08116b80 <_printf_common>:
 8116b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8116b84:	4616      	mov	r6, r2
 8116b86:	4698      	mov	r8, r3
 8116b88:	688a      	ldr	r2, [r1, #8]
 8116b8a:	690b      	ldr	r3, [r1, #16]
 8116b8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8116b90:	4293      	cmp	r3, r2
 8116b92:	bfb8      	it	lt
 8116b94:	4613      	movlt	r3, r2
 8116b96:	6033      	str	r3, [r6, #0]
 8116b98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8116b9c:	4607      	mov	r7, r0
 8116b9e:	460c      	mov	r4, r1
 8116ba0:	b10a      	cbz	r2, 8116ba6 <_printf_common+0x26>
 8116ba2:	3301      	adds	r3, #1
 8116ba4:	6033      	str	r3, [r6, #0]
 8116ba6:	6823      	ldr	r3, [r4, #0]
 8116ba8:	0699      	lsls	r1, r3, #26
 8116baa:	bf42      	ittt	mi
 8116bac:	6833      	ldrmi	r3, [r6, #0]
 8116bae:	3302      	addmi	r3, #2
 8116bb0:	6033      	strmi	r3, [r6, #0]
 8116bb2:	6825      	ldr	r5, [r4, #0]
 8116bb4:	f015 0506 	ands.w	r5, r5, #6
 8116bb8:	d106      	bne.n	8116bc8 <_printf_common+0x48>
 8116bba:	f104 0a19 	add.w	sl, r4, #25
 8116bbe:	68e3      	ldr	r3, [r4, #12]
 8116bc0:	6832      	ldr	r2, [r6, #0]
 8116bc2:	1a9b      	subs	r3, r3, r2
 8116bc4:	42ab      	cmp	r3, r5
 8116bc6:	dc26      	bgt.n	8116c16 <_printf_common+0x96>
 8116bc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8116bcc:	6822      	ldr	r2, [r4, #0]
 8116bce:	3b00      	subs	r3, #0
 8116bd0:	bf18      	it	ne
 8116bd2:	2301      	movne	r3, #1
 8116bd4:	0692      	lsls	r2, r2, #26
 8116bd6:	d42b      	bmi.n	8116c30 <_printf_common+0xb0>
 8116bd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8116bdc:	4641      	mov	r1, r8
 8116bde:	4638      	mov	r0, r7
 8116be0:	47c8      	blx	r9
 8116be2:	3001      	adds	r0, #1
 8116be4:	d01e      	beq.n	8116c24 <_printf_common+0xa4>
 8116be6:	6823      	ldr	r3, [r4, #0]
 8116be8:	6922      	ldr	r2, [r4, #16]
 8116bea:	f003 0306 	and.w	r3, r3, #6
 8116bee:	2b04      	cmp	r3, #4
 8116bf0:	bf02      	ittt	eq
 8116bf2:	68e5      	ldreq	r5, [r4, #12]
 8116bf4:	6833      	ldreq	r3, [r6, #0]
 8116bf6:	1aed      	subeq	r5, r5, r3
 8116bf8:	68a3      	ldr	r3, [r4, #8]
 8116bfa:	bf0c      	ite	eq
 8116bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8116c00:	2500      	movne	r5, #0
 8116c02:	4293      	cmp	r3, r2
 8116c04:	bfc4      	itt	gt
 8116c06:	1a9b      	subgt	r3, r3, r2
 8116c08:	18ed      	addgt	r5, r5, r3
 8116c0a:	2600      	movs	r6, #0
 8116c0c:	341a      	adds	r4, #26
 8116c0e:	42b5      	cmp	r5, r6
 8116c10:	d11a      	bne.n	8116c48 <_printf_common+0xc8>
 8116c12:	2000      	movs	r0, #0
 8116c14:	e008      	b.n	8116c28 <_printf_common+0xa8>
 8116c16:	2301      	movs	r3, #1
 8116c18:	4652      	mov	r2, sl
 8116c1a:	4641      	mov	r1, r8
 8116c1c:	4638      	mov	r0, r7
 8116c1e:	47c8      	blx	r9
 8116c20:	3001      	adds	r0, #1
 8116c22:	d103      	bne.n	8116c2c <_printf_common+0xac>
 8116c24:	f04f 30ff 	mov.w	r0, #4294967295
 8116c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8116c2c:	3501      	adds	r5, #1
 8116c2e:	e7c6      	b.n	8116bbe <_printf_common+0x3e>
 8116c30:	18e1      	adds	r1, r4, r3
 8116c32:	1c5a      	adds	r2, r3, #1
 8116c34:	2030      	movs	r0, #48	@ 0x30
 8116c36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8116c3a:	4422      	add	r2, r4
 8116c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8116c40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8116c44:	3302      	adds	r3, #2
 8116c46:	e7c7      	b.n	8116bd8 <_printf_common+0x58>
 8116c48:	2301      	movs	r3, #1
 8116c4a:	4622      	mov	r2, r4
 8116c4c:	4641      	mov	r1, r8
 8116c4e:	4638      	mov	r0, r7
 8116c50:	47c8      	blx	r9
 8116c52:	3001      	adds	r0, #1
 8116c54:	d0e6      	beq.n	8116c24 <_printf_common+0xa4>
 8116c56:	3601      	adds	r6, #1
 8116c58:	e7d9      	b.n	8116c0e <_printf_common+0x8e>
	...

08116c5c <_printf_i>:
 8116c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8116c60:	7e0f      	ldrb	r7, [r1, #24]
 8116c62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8116c64:	2f78      	cmp	r7, #120	@ 0x78
 8116c66:	4691      	mov	r9, r2
 8116c68:	4680      	mov	r8, r0
 8116c6a:	460c      	mov	r4, r1
 8116c6c:	469a      	mov	sl, r3
 8116c6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8116c72:	d807      	bhi.n	8116c84 <_printf_i+0x28>
 8116c74:	2f62      	cmp	r7, #98	@ 0x62
 8116c76:	d80a      	bhi.n	8116c8e <_printf_i+0x32>
 8116c78:	2f00      	cmp	r7, #0
 8116c7a:	f000 80d1 	beq.w	8116e20 <_printf_i+0x1c4>
 8116c7e:	2f58      	cmp	r7, #88	@ 0x58
 8116c80:	f000 80b8 	beq.w	8116df4 <_printf_i+0x198>
 8116c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8116c88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8116c8c:	e03a      	b.n	8116d04 <_printf_i+0xa8>
 8116c8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8116c92:	2b15      	cmp	r3, #21
 8116c94:	d8f6      	bhi.n	8116c84 <_printf_i+0x28>
 8116c96:	a101      	add	r1, pc, #4	@ (adr r1, 8116c9c <_printf_i+0x40>)
 8116c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8116c9c:	08116cf5 	.word	0x08116cf5
 8116ca0:	08116d09 	.word	0x08116d09
 8116ca4:	08116c85 	.word	0x08116c85
 8116ca8:	08116c85 	.word	0x08116c85
 8116cac:	08116c85 	.word	0x08116c85
 8116cb0:	08116c85 	.word	0x08116c85
 8116cb4:	08116d09 	.word	0x08116d09
 8116cb8:	08116c85 	.word	0x08116c85
 8116cbc:	08116c85 	.word	0x08116c85
 8116cc0:	08116c85 	.word	0x08116c85
 8116cc4:	08116c85 	.word	0x08116c85
 8116cc8:	08116e07 	.word	0x08116e07
 8116ccc:	08116d33 	.word	0x08116d33
 8116cd0:	08116dc1 	.word	0x08116dc1
 8116cd4:	08116c85 	.word	0x08116c85
 8116cd8:	08116c85 	.word	0x08116c85
 8116cdc:	08116e29 	.word	0x08116e29
 8116ce0:	08116c85 	.word	0x08116c85
 8116ce4:	08116d33 	.word	0x08116d33
 8116ce8:	08116c85 	.word	0x08116c85
 8116cec:	08116c85 	.word	0x08116c85
 8116cf0:	08116dc9 	.word	0x08116dc9
 8116cf4:	6833      	ldr	r3, [r6, #0]
 8116cf6:	1d1a      	adds	r2, r3, #4
 8116cf8:	681b      	ldr	r3, [r3, #0]
 8116cfa:	6032      	str	r2, [r6, #0]
 8116cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8116d00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8116d04:	2301      	movs	r3, #1
 8116d06:	e09c      	b.n	8116e42 <_printf_i+0x1e6>
 8116d08:	6833      	ldr	r3, [r6, #0]
 8116d0a:	6820      	ldr	r0, [r4, #0]
 8116d0c:	1d19      	adds	r1, r3, #4
 8116d0e:	6031      	str	r1, [r6, #0]
 8116d10:	0606      	lsls	r6, r0, #24
 8116d12:	d501      	bpl.n	8116d18 <_printf_i+0xbc>
 8116d14:	681d      	ldr	r5, [r3, #0]
 8116d16:	e003      	b.n	8116d20 <_printf_i+0xc4>
 8116d18:	0645      	lsls	r5, r0, #25
 8116d1a:	d5fb      	bpl.n	8116d14 <_printf_i+0xb8>
 8116d1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8116d20:	2d00      	cmp	r5, #0
 8116d22:	da03      	bge.n	8116d2c <_printf_i+0xd0>
 8116d24:	232d      	movs	r3, #45	@ 0x2d
 8116d26:	426d      	negs	r5, r5
 8116d28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8116d2c:	4858      	ldr	r0, [pc, #352]	@ (8116e90 <_printf_i+0x234>)
 8116d2e:	230a      	movs	r3, #10
 8116d30:	e011      	b.n	8116d56 <_printf_i+0xfa>
 8116d32:	6821      	ldr	r1, [r4, #0]
 8116d34:	6833      	ldr	r3, [r6, #0]
 8116d36:	0608      	lsls	r0, r1, #24
 8116d38:	f853 5b04 	ldr.w	r5, [r3], #4
 8116d3c:	d402      	bmi.n	8116d44 <_printf_i+0xe8>
 8116d3e:	0649      	lsls	r1, r1, #25
 8116d40:	bf48      	it	mi
 8116d42:	b2ad      	uxthmi	r5, r5
 8116d44:	2f6f      	cmp	r7, #111	@ 0x6f
 8116d46:	4852      	ldr	r0, [pc, #328]	@ (8116e90 <_printf_i+0x234>)
 8116d48:	6033      	str	r3, [r6, #0]
 8116d4a:	bf14      	ite	ne
 8116d4c:	230a      	movne	r3, #10
 8116d4e:	2308      	moveq	r3, #8
 8116d50:	2100      	movs	r1, #0
 8116d52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8116d56:	6866      	ldr	r6, [r4, #4]
 8116d58:	60a6      	str	r6, [r4, #8]
 8116d5a:	2e00      	cmp	r6, #0
 8116d5c:	db05      	blt.n	8116d6a <_printf_i+0x10e>
 8116d5e:	6821      	ldr	r1, [r4, #0]
 8116d60:	432e      	orrs	r6, r5
 8116d62:	f021 0104 	bic.w	r1, r1, #4
 8116d66:	6021      	str	r1, [r4, #0]
 8116d68:	d04b      	beq.n	8116e02 <_printf_i+0x1a6>
 8116d6a:	4616      	mov	r6, r2
 8116d6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8116d70:	fb03 5711 	mls	r7, r3, r1, r5
 8116d74:	5dc7      	ldrb	r7, [r0, r7]
 8116d76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8116d7a:	462f      	mov	r7, r5
 8116d7c:	42bb      	cmp	r3, r7
 8116d7e:	460d      	mov	r5, r1
 8116d80:	d9f4      	bls.n	8116d6c <_printf_i+0x110>
 8116d82:	2b08      	cmp	r3, #8
 8116d84:	d10b      	bne.n	8116d9e <_printf_i+0x142>
 8116d86:	6823      	ldr	r3, [r4, #0]
 8116d88:	07df      	lsls	r7, r3, #31
 8116d8a:	d508      	bpl.n	8116d9e <_printf_i+0x142>
 8116d8c:	6923      	ldr	r3, [r4, #16]
 8116d8e:	6861      	ldr	r1, [r4, #4]
 8116d90:	4299      	cmp	r1, r3
 8116d92:	bfde      	ittt	le
 8116d94:	2330      	movle	r3, #48	@ 0x30
 8116d96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8116d9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8116d9e:	1b92      	subs	r2, r2, r6
 8116da0:	6122      	str	r2, [r4, #16]
 8116da2:	f8cd a000 	str.w	sl, [sp]
 8116da6:	464b      	mov	r3, r9
 8116da8:	aa03      	add	r2, sp, #12
 8116daa:	4621      	mov	r1, r4
 8116dac:	4640      	mov	r0, r8
 8116dae:	f7ff fee7 	bl	8116b80 <_printf_common>
 8116db2:	3001      	adds	r0, #1
 8116db4:	d14a      	bne.n	8116e4c <_printf_i+0x1f0>
 8116db6:	f04f 30ff 	mov.w	r0, #4294967295
 8116dba:	b004      	add	sp, #16
 8116dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8116dc0:	6823      	ldr	r3, [r4, #0]
 8116dc2:	f043 0320 	orr.w	r3, r3, #32
 8116dc6:	6023      	str	r3, [r4, #0]
 8116dc8:	4832      	ldr	r0, [pc, #200]	@ (8116e94 <_printf_i+0x238>)
 8116dca:	2778      	movs	r7, #120	@ 0x78
 8116dcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8116dd0:	6823      	ldr	r3, [r4, #0]
 8116dd2:	6831      	ldr	r1, [r6, #0]
 8116dd4:	061f      	lsls	r7, r3, #24
 8116dd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8116dda:	d402      	bmi.n	8116de2 <_printf_i+0x186>
 8116ddc:	065f      	lsls	r7, r3, #25
 8116dde:	bf48      	it	mi
 8116de0:	b2ad      	uxthmi	r5, r5
 8116de2:	6031      	str	r1, [r6, #0]
 8116de4:	07d9      	lsls	r1, r3, #31
 8116de6:	bf44      	itt	mi
 8116de8:	f043 0320 	orrmi.w	r3, r3, #32
 8116dec:	6023      	strmi	r3, [r4, #0]
 8116dee:	b11d      	cbz	r5, 8116df8 <_printf_i+0x19c>
 8116df0:	2310      	movs	r3, #16
 8116df2:	e7ad      	b.n	8116d50 <_printf_i+0xf4>
 8116df4:	4826      	ldr	r0, [pc, #152]	@ (8116e90 <_printf_i+0x234>)
 8116df6:	e7e9      	b.n	8116dcc <_printf_i+0x170>
 8116df8:	6823      	ldr	r3, [r4, #0]
 8116dfa:	f023 0320 	bic.w	r3, r3, #32
 8116dfe:	6023      	str	r3, [r4, #0]
 8116e00:	e7f6      	b.n	8116df0 <_printf_i+0x194>
 8116e02:	4616      	mov	r6, r2
 8116e04:	e7bd      	b.n	8116d82 <_printf_i+0x126>
 8116e06:	6833      	ldr	r3, [r6, #0]
 8116e08:	6825      	ldr	r5, [r4, #0]
 8116e0a:	6961      	ldr	r1, [r4, #20]
 8116e0c:	1d18      	adds	r0, r3, #4
 8116e0e:	6030      	str	r0, [r6, #0]
 8116e10:	062e      	lsls	r6, r5, #24
 8116e12:	681b      	ldr	r3, [r3, #0]
 8116e14:	d501      	bpl.n	8116e1a <_printf_i+0x1be>
 8116e16:	6019      	str	r1, [r3, #0]
 8116e18:	e002      	b.n	8116e20 <_printf_i+0x1c4>
 8116e1a:	0668      	lsls	r0, r5, #25
 8116e1c:	d5fb      	bpl.n	8116e16 <_printf_i+0x1ba>
 8116e1e:	8019      	strh	r1, [r3, #0]
 8116e20:	2300      	movs	r3, #0
 8116e22:	6123      	str	r3, [r4, #16]
 8116e24:	4616      	mov	r6, r2
 8116e26:	e7bc      	b.n	8116da2 <_printf_i+0x146>
 8116e28:	6833      	ldr	r3, [r6, #0]
 8116e2a:	1d1a      	adds	r2, r3, #4
 8116e2c:	6032      	str	r2, [r6, #0]
 8116e2e:	681e      	ldr	r6, [r3, #0]
 8116e30:	6862      	ldr	r2, [r4, #4]
 8116e32:	2100      	movs	r1, #0
 8116e34:	4630      	mov	r0, r6
 8116e36:	f7e9 fa63 	bl	8100300 <memchr>
 8116e3a:	b108      	cbz	r0, 8116e40 <_printf_i+0x1e4>
 8116e3c:	1b80      	subs	r0, r0, r6
 8116e3e:	6060      	str	r0, [r4, #4]
 8116e40:	6863      	ldr	r3, [r4, #4]
 8116e42:	6123      	str	r3, [r4, #16]
 8116e44:	2300      	movs	r3, #0
 8116e46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8116e4a:	e7aa      	b.n	8116da2 <_printf_i+0x146>
 8116e4c:	6923      	ldr	r3, [r4, #16]
 8116e4e:	4632      	mov	r2, r6
 8116e50:	4649      	mov	r1, r9
 8116e52:	4640      	mov	r0, r8
 8116e54:	47d0      	blx	sl
 8116e56:	3001      	adds	r0, #1
 8116e58:	d0ad      	beq.n	8116db6 <_printf_i+0x15a>
 8116e5a:	6823      	ldr	r3, [r4, #0]
 8116e5c:	079b      	lsls	r3, r3, #30
 8116e5e:	d413      	bmi.n	8116e88 <_printf_i+0x22c>
 8116e60:	68e0      	ldr	r0, [r4, #12]
 8116e62:	9b03      	ldr	r3, [sp, #12]
 8116e64:	4298      	cmp	r0, r3
 8116e66:	bfb8      	it	lt
 8116e68:	4618      	movlt	r0, r3
 8116e6a:	e7a6      	b.n	8116dba <_printf_i+0x15e>
 8116e6c:	2301      	movs	r3, #1
 8116e6e:	4632      	mov	r2, r6
 8116e70:	4649      	mov	r1, r9
 8116e72:	4640      	mov	r0, r8
 8116e74:	47d0      	blx	sl
 8116e76:	3001      	adds	r0, #1
 8116e78:	d09d      	beq.n	8116db6 <_printf_i+0x15a>
 8116e7a:	3501      	adds	r5, #1
 8116e7c:	68e3      	ldr	r3, [r4, #12]
 8116e7e:	9903      	ldr	r1, [sp, #12]
 8116e80:	1a5b      	subs	r3, r3, r1
 8116e82:	42ab      	cmp	r3, r5
 8116e84:	dcf2      	bgt.n	8116e6c <_printf_i+0x210>
 8116e86:	e7eb      	b.n	8116e60 <_printf_i+0x204>
 8116e88:	2500      	movs	r5, #0
 8116e8a:	f104 0619 	add.w	r6, r4, #25
 8116e8e:	e7f5      	b.n	8116e7c <_printf_i+0x220>
 8116e90:	0811f35f 	.word	0x0811f35f
 8116e94:	0811f370 	.word	0x0811f370

08116e98 <_scanf_float>:
 8116e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116e9c:	b087      	sub	sp, #28
 8116e9e:	4691      	mov	r9, r2
 8116ea0:	9303      	str	r3, [sp, #12]
 8116ea2:	688b      	ldr	r3, [r1, #8]
 8116ea4:	1e5a      	subs	r2, r3, #1
 8116ea6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8116eaa:	bf81      	itttt	hi
 8116eac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8116eb0:	eb03 0b05 	addhi.w	fp, r3, r5
 8116eb4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8116eb8:	608b      	strhi	r3, [r1, #8]
 8116eba:	680b      	ldr	r3, [r1, #0]
 8116ebc:	460a      	mov	r2, r1
 8116ebe:	f04f 0500 	mov.w	r5, #0
 8116ec2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8116ec6:	f842 3b1c 	str.w	r3, [r2], #28
 8116eca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8116ece:	4680      	mov	r8, r0
 8116ed0:	460c      	mov	r4, r1
 8116ed2:	bf98      	it	ls
 8116ed4:	f04f 0b00 	movls.w	fp, #0
 8116ed8:	9201      	str	r2, [sp, #4]
 8116eda:	4616      	mov	r6, r2
 8116edc:	46aa      	mov	sl, r5
 8116ede:	462f      	mov	r7, r5
 8116ee0:	9502      	str	r5, [sp, #8]
 8116ee2:	68a2      	ldr	r2, [r4, #8]
 8116ee4:	b15a      	cbz	r2, 8116efe <_scanf_float+0x66>
 8116ee6:	f8d9 3000 	ldr.w	r3, [r9]
 8116eea:	781b      	ldrb	r3, [r3, #0]
 8116eec:	2b4e      	cmp	r3, #78	@ 0x4e
 8116eee:	d863      	bhi.n	8116fb8 <_scanf_float+0x120>
 8116ef0:	2b40      	cmp	r3, #64	@ 0x40
 8116ef2:	d83b      	bhi.n	8116f6c <_scanf_float+0xd4>
 8116ef4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8116ef8:	b2c8      	uxtb	r0, r1
 8116efa:	280e      	cmp	r0, #14
 8116efc:	d939      	bls.n	8116f72 <_scanf_float+0xda>
 8116efe:	b11f      	cbz	r7, 8116f08 <_scanf_float+0x70>
 8116f00:	6823      	ldr	r3, [r4, #0]
 8116f02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8116f06:	6023      	str	r3, [r4, #0]
 8116f08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8116f0c:	f1ba 0f01 	cmp.w	sl, #1
 8116f10:	f200 8114 	bhi.w	811713c <_scanf_float+0x2a4>
 8116f14:	9b01      	ldr	r3, [sp, #4]
 8116f16:	429e      	cmp	r6, r3
 8116f18:	f200 8105 	bhi.w	8117126 <_scanf_float+0x28e>
 8116f1c:	2001      	movs	r0, #1
 8116f1e:	b007      	add	sp, #28
 8116f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8116f24:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8116f28:	2a0d      	cmp	r2, #13
 8116f2a:	d8e8      	bhi.n	8116efe <_scanf_float+0x66>
 8116f2c:	a101      	add	r1, pc, #4	@ (adr r1, 8116f34 <_scanf_float+0x9c>)
 8116f2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8116f32:	bf00      	nop
 8116f34:	0811707d 	.word	0x0811707d
 8116f38:	08116eff 	.word	0x08116eff
 8116f3c:	08116eff 	.word	0x08116eff
 8116f40:	08116eff 	.word	0x08116eff
 8116f44:	081170d9 	.word	0x081170d9
 8116f48:	081170b3 	.word	0x081170b3
 8116f4c:	08116eff 	.word	0x08116eff
 8116f50:	08116eff 	.word	0x08116eff
 8116f54:	0811708b 	.word	0x0811708b
 8116f58:	08116eff 	.word	0x08116eff
 8116f5c:	08116eff 	.word	0x08116eff
 8116f60:	08116eff 	.word	0x08116eff
 8116f64:	08116eff 	.word	0x08116eff
 8116f68:	08117047 	.word	0x08117047
 8116f6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8116f70:	e7da      	b.n	8116f28 <_scanf_float+0x90>
 8116f72:	290e      	cmp	r1, #14
 8116f74:	d8c3      	bhi.n	8116efe <_scanf_float+0x66>
 8116f76:	a001      	add	r0, pc, #4	@ (adr r0, 8116f7c <_scanf_float+0xe4>)
 8116f78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8116f7c:	08117037 	.word	0x08117037
 8116f80:	08116eff 	.word	0x08116eff
 8116f84:	08117037 	.word	0x08117037
 8116f88:	081170c7 	.word	0x081170c7
 8116f8c:	08116eff 	.word	0x08116eff
 8116f90:	08116fd9 	.word	0x08116fd9
 8116f94:	0811701d 	.word	0x0811701d
 8116f98:	0811701d 	.word	0x0811701d
 8116f9c:	0811701d 	.word	0x0811701d
 8116fa0:	0811701d 	.word	0x0811701d
 8116fa4:	0811701d 	.word	0x0811701d
 8116fa8:	0811701d 	.word	0x0811701d
 8116fac:	0811701d 	.word	0x0811701d
 8116fb0:	0811701d 	.word	0x0811701d
 8116fb4:	0811701d 	.word	0x0811701d
 8116fb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8116fba:	d809      	bhi.n	8116fd0 <_scanf_float+0x138>
 8116fbc:	2b60      	cmp	r3, #96	@ 0x60
 8116fbe:	d8b1      	bhi.n	8116f24 <_scanf_float+0x8c>
 8116fc0:	2b54      	cmp	r3, #84	@ 0x54
 8116fc2:	d07b      	beq.n	81170bc <_scanf_float+0x224>
 8116fc4:	2b59      	cmp	r3, #89	@ 0x59
 8116fc6:	d19a      	bne.n	8116efe <_scanf_float+0x66>
 8116fc8:	2d07      	cmp	r5, #7
 8116fca:	d198      	bne.n	8116efe <_scanf_float+0x66>
 8116fcc:	2508      	movs	r5, #8
 8116fce:	e02f      	b.n	8117030 <_scanf_float+0x198>
 8116fd0:	2b74      	cmp	r3, #116	@ 0x74
 8116fd2:	d073      	beq.n	81170bc <_scanf_float+0x224>
 8116fd4:	2b79      	cmp	r3, #121	@ 0x79
 8116fd6:	e7f6      	b.n	8116fc6 <_scanf_float+0x12e>
 8116fd8:	6821      	ldr	r1, [r4, #0]
 8116fda:	05c8      	lsls	r0, r1, #23
 8116fdc:	d51e      	bpl.n	811701c <_scanf_float+0x184>
 8116fde:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8116fe2:	6021      	str	r1, [r4, #0]
 8116fe4:	3701      	adds	r7, #1
 8116fe6:	f1bb 0f00 	cmp.w	fp, #0
 8116fea:	d003      	beq.n	8116ff4 <_scanf_float+0x15c>
 8116fec:	3201      	adds	r2, #1
 8116fee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8116ff2:	60a2      	str	r2, [r4, #8]
 8116ff4:	68a3      	ldr	r3, [r4, #8]
 8116ff6:	3b01      	subs	r3, #1
 8116ff8:	60a3      	str	r3, [r4, #8]
 8116ffa:	6923      	ldr	r3, [r4, #16]
 8116ffc:	3301      	adds	r3, #1
 8116ffe:	6123      	str	r3, [r4, #16]
 8117000:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8117004:	3b01      	subs	r3, #1
 8117006:	2b00      	cmp	r3, #0
 8117008:	f8c9 3004 	str.w	r3, [r9, #4]
 811700c:	f340 8082 	ble.w	8117114 <_scanf_float+0x27c>
 8117010:	f8d9 3000 	ldr.w	r3, [r9]
 8117014:	3301      	adds	r3, #1
 8117016:	f8c9 3000 	str.w	r3, [r9]
 811701a:	e762      	b.n	8116ee2 <_scanf_float+0x4a>
 811701c:	eb1a 0105 	adds.w	r1, sl, r5
 8117020:	f47f af6d 	bne.w	8116efe <_scanf_float+0x66>
 8117024:	6822      	ldr	r2, [r4, #0]
 8117026:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 811702a:	6022      	str	r2, [r4, #0]
 811702c:	460d      	mov	r5, r1
 811702e:	468a      	mov	sl, r1
 8117030:	f806 3b01 	strb.w	r3, [r6], #1
 8117034:	e7de      	b.n	8116ff4 <_scanf_float+0x15c>
 8117036:	6822      	ldr	r2, [r4, #0]
 8117038:	0610      	lsls	r0, r2, #24
 811703a:	f57f af60 	bpl.w	8116efe <_scanf_float+0x66>
 811703e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8117042:	6022      	str	r2, [r4, #0]
 8117044:	e7f4      	b.n	8117030 <_scanf_float+0x198>
 8117046:	f1ba 0f00 	cmp.w	sl, #0
 811704a:	d10c      	bne.n	8117066 <_scanf_float+0x1ce>
 811704c:	b977      	cbnz	r7, 811706c <_scanf_float+0x1d4>
 811704e:	6822      	ldr	r2, [r4, #0]
 8117050:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8117054:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8117058:	d108      	bne.n	811706c <_scanf_float+0x1d4>
 811705a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 811705e:	6022      	str	r2, [r4, #0]
 8117060:	f04f 0a01 	mov.w	sl, #1
 8117064:	e7e4      	b.n	8117030 <_scanf_float+0x198>
 8117066:	f1ba 0f02 	cmp.w	sl, #2
 811706a:	d050      	beq.n	811710e <_scanf_float+0x276>
 811706c:	2d01      	cmp	r5, #1
 811706e:	d002      	beq.n	8117076 <_scanf_float+0x1de>
 8117070:	2d04      	cmp	r5, #4
 8117072:	f47f af44 	bne.w	8116efe <_scanf_float+0x66>
 8117076:	3501      	adds	r5, #1
 8117078:	b2ed      	uxtb	r5, r5
 811707a:	e7d9      	b.n	8117030 <_scanf_float+0x198>
 811707c:	f1ba 0f01 	cmp.w	sl, #1
 8117080:	f47f af3d 	bne.w	8116efe <_scanf_float+0x66>
 8117084:	f04f 0a02 	mov.w	sl, #2
 8117088:	e7d2      	b.n	8117030 <_scanf_float+0x198>
 811708a:	b975      	cbnz	r5, 81170aa <_scanf_float+0x212>
 811708c:	2f00      	cmp	r7, #0
 811708e:	f47f af37 	bne.w	8116f00 <_scanf_float+0x68>
 8117092:	6822      	ldr	r2, [r4, #0]
 8117094:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8117098:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 811709c:	f040 8103 	bne.w	81172a6 <_scanf_float+0x40e>
 81170a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 81170a4:	6022      	str	r2, [r4, #0]
 81170a6:	2501      	movs	r5, #1
 81170a8:	e7c2      	b.n	8117030 <_scanf_float+0x198>
 81170aa:	2d03      	cmp	r5, #3
 81170ac:	d0e3      	beq.n	8117076 <_scanf_float+0x1de>
 81170ae:	2d05      	cmp	r5, #5
 81170b0:	e7df      	b.n	8117072 <_scanf_float+0x1da>
 81170b2:	2d02      	cmp	r5, #2
 81170b4:	f47f af23 	bne.w	8116efe <_scanf_float+0x66>
 81170b8:	2503      	movs	r5, #3
 81170ba:	e7b9      	b.n	8117030 <_scanf_float+0x198>
 81170bc:	2d06      	cmp	r5, #6
 81170be:	f47f af1e 	bne.w	8116efe <_scanf_float+0x66>
 81170c2:	2507      	movs	r5, #7
 81170c4:	e7b4      	b.n	8117030 <_scanf_float+0x198>
 81170c6:	6822      	ldr	r2, [r4, #0]
 81170c8:	0591      	lsls	r1, r2, #22
 81170ca:	f57f af18 	bpl.w	8116efe <_scanf_float+0x66>
 81170ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 81170d2:	6022      	str	r2, [r4, #0]
 81170d4:	9702      	str	r7, [sp, #8]
 81170d6:	e7ab      	b.n	8117030 <_scanf_float+0x198>
 81170d8:	6822      	ldr	r2, [r4, #0]
 81170da:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 81170de:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 81170e2:	d005      	beq.n	81170f0 <_scanf_float+0x258>
 81170e4:	0550      	lsls	r0, r2, #21
 81170e6:	f57f af0a 	bpl.w	8116efe <_scanf_float+0x66>
 81170ea:	2f00      	cmp	r7, #0
 81170ec:	f000 80db 	beq.w	81172a6 <_scanf_float+0x40e>
 81170f0:	0591      	lsls	r1, r2, #22
 81170f2:	bf58      	it	pl
 81170f4:	9902      	ldrpl	r1, [sp, #8]
 81170f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 81170fa:	bf58      	it	pl
 81170fc:	1a79      	subpl	r1, r7, r1
 81170fe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8117102:	bf58      	it	pl
 8117104:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8117108:	6022      	str	r2, [r4, #0]
 811710a:	2700      	movs	r7, #0
 811710c:	e790      	b.n	8117030 <_scanf_float+0x198>
 811710e:	f04f 0a03 	mov.w	sl, #3
 8117112:	e78d      	b.n	8117030 <_scanf_float+0x198>
 8117114:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8117118:	4649      	mov	r1, r9
 811711a:	4640      	mov	r0, r8
 811711c:	4798      	blx	r3
 811711e:	2800      	cmp	r0, #0
 8117120:	f43f aedf 	beq.w	8116ee2 <_scanf_float+0x4a>
 8117124:	e6eb      	b.n	8116efe <_scanf_float+0x66>
 8117126:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811712a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 811712e:	464a      	mov	r2, r9
 8117130:	4640      	mov	r0, r8
 8117132:	4798      	blx	r3
 8117134:	6923      	ldr	r3, [r4, #16]
 8117136:	3b01      	subs	r3, #1
 8117138:	6123      	str	r3, [r4, #16]
 811713a:	e6eb      	b.n	8116f14 <_scanf_float+0x7c>
 811713c:	1e6b      	subs	r3, r5, #1
 811713e:	2b06      	cmp	r3, #6
 8117140:	d824      	bhi.n	811718c <_scanf_float+0x2f4>
 8117142:	2d02      	cmp	r5, #2
 8117144:	d836      	bhi.n	81171b4 <_scanf_float+0x31c>
 8117146:	9b01      	ldr	r3, [sp, #4]
 8117148:	429e      	cmp	r6, r3
 811714a:	f67f aee7 	bls.w	8116f1c <_scanf_float+0x84>
 811714e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8117152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8117156:	464a      	mov	r2, r9
 8117158:	4640      	mov	r0, r8
 811715a:	4798      	blx	r3
 811715c:	6923      	ldr	r3, [r4, #16]
 811715e:	3b01      	subs	r3, #1
 8117160:	6123      	str	r3, [r4, #16]
 8117162:	e7f0      	b.n	8117146 <_scanf_float+0x2ae>
 8117164:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8117168:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 811716c:	464a      	mov	r2, r9
 811716e:	4640      	mov	r0, r8
 8117170:	4798      	blx	r3
 8117172:	6923      	ldr	r3, [r4, #16]
 8117174:	3b01      	subs	r3, #1
 8117176:	6123      	str	r3, [r4, #16]
 8117178:	f10a 3aff 	add.w	sl, sl, #4294967295
 811717c:	fa5f fa8a 	uxtb.w	sl, sl
 8117180:	f1ba 0f02 	cmp.w	sl, #2
 8117184:	d1ee      	bne.n	8117164 <_scanf_float+0x2cc>
 8117186:	3d03      	subs	r5, #3
 8117188:	b2ed      	uxtb	r5, r5
 811718a:	1b76      	subs	r6, r6, r5
 811718c:	6823      	ldr	r3, [r4, #0]
 811718e:	05da      	lsls	r2, r3, #23
 8117190:	d530      	bpl.n	81171f4 <_scanf_float+0x35c>
 8117192:	055b      	lsls	r3, r3, #21
 8117194:	d511      	bpl.n	81171ba <_scanf_float+0x322>
 8117196:	9b01      	ldr	r3, [sp, #4]
 8117198:	429e      	cmp	r6, r3
 811719a:	f67f aebf 	bls.w	8116f1c <_scanf_float+0x84>
 811719e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81171a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81171a6:	464a      	mov	r2, r9
 81171a8:	4640      	mov	r0, r8
 81171aa:	4798      	blx	r3
 81171ac:	6923      	ldr	r3, [r4, #16]
 81171ae:	3b01      	subs	r3, #1
 81171b0:	6123      	str	r3, [r4, #16]
 81171b2:	e7f0      	b.n	8117196 <_scanf_float+0x2fe>
 81171b4:	46aa      	mov	sl, r5
 81171b6:	46b3      	mov	fp, r6
 81171b8:	e7de      	b.n	8117178 <_scanf_float+0x2e0>
 81171ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81171be:	6923      	ldr	r3, [r4, #16]
 81171c0:	2965      	cmp	r1, #101	@ 0x65
 81171c2:	f103 33ff 	add.w	r3, r3, #4294967295
 81171c6:	f106 35ff 	add.w	r5, r6, #4294967295
 81171ca:	6123      	str	r3, [r4, #16]
 81171cc:	d00c      	beq.n	81171e8 <_scanf_float+0x350>
 81171ce:	2945      	cmp	r1, #69	@ 0x45
 81171d0:	d00a      	beq.n	81171e8 <_scanf_float+0x350>
 81171d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81171d6:	464a      	mov	r2, r9
 81171d8:	4640      	mov	r0, r8
 81171da:	4798      	blx	r3
 81171dc:	6923      	ldr	r3, [r4, #16]
 81171de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81171e2:	3b01      	subs	r3, #1
 81171e4:	1eb5      	subs	r5, r6, #2
 81171e6:	6123      	str	r3, [r4, #16]
 81171e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81171ec:	464a      	mov	r2, r9
 81171ee:	4640      	mov	r0, r8
 81171f0:	4798      	blx	r3
 81171f2:	462e      	mov	r6, r5
 81171f4:	6822      	ldr	r2, [r4, #0]
 81171f6:	f012 0210 	ands.w	r2, r2, #16
 81171fa:	d001      	beq.n	8117200 <_scanf_float+0x368>
 81171fc:	2000      	movs	r0, #0
 81171fe:	e68e      	b.n	8116f1e <_scanf_float+0x86>
 8117200:	7032      	strb	r2, [r6, #0]
 8117202:	6823      	ldr	r3, [r4, #0]
 8117204:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8117208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 811720c:	d125      	bne.n	811725a <_scanf_float+0x3c2>
 811720e:	9b02      	ldr	r3, [sp, #8]
 8117210:	429f      	cmp	r7, r3
 8117212:	d00a      	beq.n	811722a <_scanf_float+0x392>
 8117214:	1bda      	subs	r2, r3, r7
 8117216:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 811721a:	429e      	cmp	r6, r3
 811721c:	bf28      	it	cs
 811721e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8117222:	4922      	ldr	r1, [pc, #136]	@ (81172ac <_scanf_float+0x414>)
 8117224:	4630      	mov	r0, r6
 8117226:	f000 f97f 	bl	8117528 <siprintf>
 811722a:	9901      	ldr	r1, [sp, #4]
 811722c:	2200      	movs	r2, #0
 811722e:	4640      	mov	r0, r8
 8117230:	f002 fdba 	bl	8119da8 <_strtod_r>
 8117234:	9b03      	ldr	r3, [sp, #12]
 8117236:	6821      	ldr	r1, [r4, #0]
 8117238:	681b      	ldr	r3, [r3, #0]
 811723a:	f011 0f02 	tst.w	r1, #2
 811723e:	ec57 6b10 	vmov	r6, r7, d0
 8117242:	f103 0204 	add.w	r2, r3, #4
 8117246:	d015      	beq.n	8117274 <_scanf_float+0x3dc>
 8117248:	9903      	ldr	r1, [sp, #12]
 811724a:	600a      	str	r2, [r1, #0]
 811724c:	681b      	ldr	r3, [r3, #0]
 811724e:	e9c3 6700 	strd	r6, r7, [r3]
 8117252:	68e3      	ldr	r3, [r4, #12]
 8117254:	3301      	adds	r3, #1
 8117256:	60e3      	str	r3, [r4, #12]
 8117258:	e7d0      	b.n	81171fc <_scanf_float+0x364>
 811725a:	9b04      	ldr	r3, [sp, #16]
 811725c:	2b00      	cmp	r3, #0
 811725e:	d0e4      	beq.n	811722a <_scanf_float+0x392>
 8117260:	9905      	ldr	r1, [sp, #20]
 8117262:	230a      	movs	r3, #10
 8117264:	3101      	adds	r1, #1
 8117266:	4640      	mov	r0, r8
 8117268:	f7ff f9be 	bl	81165e8 <_strtol_r>
 811726c:	9b04      	ldr	r3, [sp, #16]
 811726e:	9e05      	ldr	r6, [sp, #20]
 8117270:	1ac2      	subs	r2, r0, r3
 8117272:	e7d0      	b.n	8117216 <_scanf_float+0x37e>
 8117274:	f011 0f04 	tst.w	r1, #4
 8117278:	9903      	ldr	r1, [sp, #12]
 811727a:	600a      	str	r2, [r1, #0]
 811727c:	d1e6      	bne.n	811724c <_scanf_float+0x3b4>
 811727e:	681d      	ldr	r5, [r3, #0]
 8117280:	4632      	mov	r2, r6
 8117282:	463b      	mov	r3, r7
 8117284:	4630      	mov	r0, r6
 8117286:	4639      	mov	r1, r7
 8117288:	f7e9 fce8 	bl	8100c5c <__aeabi_dcmpun>
 811728c:	b128      	cbz	r0, 811729a <_scanf_float+0x402>
 811728e:	4808      	ldr	r0, [pc, #32]	@ (81172b0 <_scanf_float+0x418>)
 8117290:	f000 fb60 	bl	8117954 <nanf>
 8117294:	ed85 0a00 	vstr	s0, [r5]
 8117298:	e7db      	b.n	8117252 <_scanf_float+0x3ba>
 811729a:	4630      	mov	r0, r6
 811729c:	4639      	mov	r1, r7
 811729e:	f7e9 fd3b 	bl	8100d18 <__aeabi_d2f>
 81172a2:	6028      	str	r0, [r5, #0]
 81172a4:	e7d5      	b.n	8117252 <_scanf_float+0x3ba>
 81172a6:	2700      	movs	r7, #0
 81172a8:	e62e      	b.n	8116f08 <_scanf_float+0x70>
 81172aa:	bf00      	nop
 81172ac:	0811f381 	.word	0x0811f381
 81172b0:	0811f3c1 	.word	0x0811f3c1

081172b4 <std>:
 81172b4:	2300      	movs	r3, #0
 81172b6:	b510      	push	{r4, lr}
 81172b8:	4604      	mov	r4, r0
 81172ba:	e9c0 3300 	strd	r3, r3, [r0]
 81172be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81172c2:	6083      	str	r3, [r0, #8]
 81172c4:	8181      	strh	r1, [r0, #12]
 81172c6:	6643      	str	r3, [r0, #100]	@ 0x64
 81172c8:	81c2      	strh	r2, [r0, #14]
 81172ca:	6183      	str	r3, [r0, #24]
 81172cc:	4619      	mov	r1, r3
 81172ce:	2208      	movs	r2, #8
 81172d0:	305c      	adds	r0, #92	@ 0x5c
 81172d2:	f000 fa7b 	bl	81177cc <memset>
 81172d6:	4b0d      	ldr	r3, [pc, #52]	@ (811730c <std+0x58>)
 81172d8:	6263      	str	r3, [r4, #36]	@ 0x24
 81172da:	4b0d      	ldr	r3, [pc, #52]	@ (8117310 <std+0x5c>)
 81172dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 81172de:	4b0d      	ldr	r3, [pc, #52]	@ (8117314 <std+0x60>)
 81172e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 81172e2:	4b0d      	ldr	r3, [pc, #52]	@ (8117318 <std+0x64>)
 81172e4:	6323      	str	r3, [r4, #48]	@ 0x30
 81172e6:	4b0d      	ldr	r3, [pc, #52]	@ (811731c <std+0x68>)
 81172e8:	6224      	str	r4, [r4, #32]
 81172ea:	429c      	cmp	r4, r3
 81172ec:	d006      	beq.n	81172fc <std+0x48>
 81172ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 81172f2:	4294      	cmp	r4, r2
 81172f4:	d002      	beq.n	81172fc <std+0x48>
 81172f6:	33d0      	adds	r3, #208	@ 0xd0
 81172f8:	429c      	cmp	r4, r3
 81172fa:	d105      	bne.n	8117308 <std+0x54>
 81172fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8117300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8117304:	f000 bb14 	b.w	8117930 <__retarget_lock_init_recursive>
 8117308:	bd10      	pop	{r4, pc}
 811730a:	bf00      	nop
 811730c:	081175c5 	.word	0x081175c5
 8117310:	081175eb 	.word	0x081175eb
 8117314:	08117623 	.word	0x08117623
 8117318:	08117647 	.word	0x08117647
 811731c:	10017758 	.word	0x10017758

08117320 <stdio_exit_handler>:
 8117320:	4a02      	ldr	r2, [pc, #8]	@ (811732c <stdio_exit_handler+0xc>)
 8117322:	4903      	ldr	r1, [pc, #12]	@ (8117330 <stdio_exit_handler+0x10>)
 8117324:	4803      	ldr	r0, [pc, #12]	@ (8117334 <stdio_exit_handler+0x14>)
 8117326:	f000 b869 	b.w	81173fc <_fwalk_sglue>
 811732a:	bf00      	nop
 811732c:	100001cc 	.word	0x100001cc
 8117330:	0811aa2d 	.word	0x0811aa2d
 8117334:	100001dc 	.word	0x100001dc

08117338 <cleanup_stdio>:
 8117338:	6841      	ldr	r1, [r0, #4]
 811733a:	4b0c      	ldr	r3, [pc, #48]	@ (811736c <cleanup_stdio+0x34>)
 811733c:	4299      	cmp	r1, r3
 811733e:	b510      	push	{r4, lr}
 8117340:	4604      	mov	r4, r0
 8117342:	d001      	beq.n	8117348 <cleanup_stdio+0x10>
 8117344:	f003 fb72 	bl	811aa2c <_fflush_r>
 8117348:	68a1      	ldr	r1, [r4, #8]
 811734a:	4b09      	ldr	r3, [pc, #36]	@ (8117370 <cleanup_stdio+0x38>)
 811734c:	4299      	cmp	r1, r3
 811734e:	d002      	beq.n	8117356 <cleanup_stdio+0x1e>
 8117350:	4620      	mov	r0, r4
 8117352:	f003 fb6b 	bl	811aa2c <_fflush_r>
 8117356:	68e1      	ldr	r1, [r4, #12]
 8117358:	4b06      	ldr	r3, [pc, #24]	@ (8117374 <cleanup_stdio+0x3c>)
 811735a:	4299      	cmp	r1, r3
 811735c:	d004      	beq.n	8117368 <cleanup_stdio+0x30>
 811735e:	4620      	mov	r0, r4
 8117360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8117364:	f003 bb62 	b.w	811aa2c <_fflush_r>
 8117368:	bd10      	pop	{r4, pc}
 811736a:	bf00      	nop
 811736c:	10017758 	.word	0x10017758
 8117370:	100177c0 	.word	0x100177c0
 8117374:	10017828 	.word	0x10017828

08117378 <global_stdio_init.part.0>:
 8117378:	b510      	push	{r4, lr}
 811737a:	4b0b      	ldr	r3, [pc, #44]	@ (81173a8 <global_stdio_init.part.0+0x30>)
 811737c:	4c0b      	ldr	r4, [pc, #44]	@ (81173ac <global_stdio_init.part.0+0x34>)
 811737e:	4a0c      	ldr	r2, [pc, #48]	@ (81173b0 <global_stdio_init.part.0+0x38>)
 8117380:	601a      	str	r2, [r3, #0]
 8117382:	4620      	mov	r0, r4
 8117384:	2200      	movs	r2, #0
 8117386:	2104      	movs	r1, #4
 8117388:	f7ff ff94 	bl	81172b4 <std>
 811738c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8117390:	2201      	movs	r2, #1
 8117392:	2109      	movs	r1, #9
 8117394:	f7ff ff8e 	bl	81172b4 <std>
 8117398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 811739c:	2202      	movs	r2, #2
 811739e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81173a2:	2112      	movs	r1, #18
 81173a4:	f7ff bf86 	b.w	81172b4 <std>
 81173a8:	10017890 	.word	0x10017890
 81173ac:	10017758 	.word	0x10017758
 81173b0:	08117321 	.word	0x08117321

081173b4 <__sfp_lock_acquire>:
 81173b4:	4801      	ldr	r0, [pc, #4]	@ (81173bc <__sfp_lock_acquire+0x8>)
 81173b6:	f000 babc 	b.w	8117932 <__retarget_lock_acquire_recursive>
 81173ba:	bf00      	nop
 81173bc:	10017899 	.word	0x10017899

081173c0 <__sfp_lock_release>:
 81173c0:	4801      	ldr	r0, [pc, #4]	@ (81173c8 <__sfp_lock_release+0x8>)
 81173c2:	f000 bab7 	b.w	8117934 <__retarget_lock_release_recursive>
 81173c6:	bf00      	nop
 81173c8:	10017899 	.word	0x10017899

081173cc <__sinit>:
 81173cc:	b510      	push	{r4, lr}
 81173ce:	4604      	mov	r4, r0
 81173d0:	f7ff fff0 	bl	81173b4 <__sfp_lock_acquire>
 81173d4:	6a23      	ldr	r3, [r4, #32]
 81173d6:	b11b      	cbz	r3, 81173e0 <__sinit+0x14>
 81173d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81173dc:	f7ff bff0 	b.w	81173c0 <__sfp_lock_release>
 81173e0:	4b04      	ldr	r3, [pc, #16]	@ (81173f4 <__sinit+0x28>)
 81173e2:	6223      	str	r3, [r4, #32]
 81173e4:	4b04      	ldr	r3, [pc, #16]	@ (81173f8 <__sinit+0x2c>)
 81173e6:	681b      	ldr	r3, [r3, #0]
 81173e8:	2b00      	cmp	r3, #0
 81173ea:	d1f5      	bne.n	81173d8 <__sinit+0xc>
 81173ec:	f7ff ffc4 	bl	8117378 <global_stdio_init.part.0>
 81173f0:	e7f2      	b.n	81173d8 <__sinit+0xc>
 81173f2:	bf00      	nop
 81173f4:	08117339 	.word	0x08117339
 81173f8:	10017890 	.word	0x10017890

081173fc <_fwalk_sglue>:
 81173fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8117400:	4607      	mov	r7, r0
 8117402:	4688      	mov	r8, r1
 8117404:	4614      	mov	r4, r2
 8117406:	2600      	movs	r6, #0
 8117408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 811740c:	f1b9 0901 	subs.w	r9, r9, #1
 8117410:	d505      	bpl.n	811741e <_fwalk_sglue+0x22>
 8117412:	6824      	ldr	r4, [r4, #0]
 8117414:	2c00      	cmp	r4, #0
 8117416:	d1f7      	bne.n	8117408 <_fwalk_sglue+0xc>
 8117418:	4630      	mov	r0, r6
 811741a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811741e:	89ab      	ldrh	r3, [r5, #12]
 8117420:	2b01      	cmp	r3, #1
 8117422:	d907      	bls.n	8117434 <_fwalk_sglue+0x38>
 8117424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8117428:	3301      	adds	r3, #1
 811742a:	d003      	beq.n	8117434 <_fwalk_sglue+0x38>
 811742c:	4629      	mov	r1, r5
 811742e:	4638      	mov	r0, r7
 8117430:	47c0      	blx	r8
 8117432:	4306      	orrs	r6, r0
 8117434:	3568      	adds	r5, #104	@ 0x68
 8117436:	e7e9      	b.n	811740c <_fwalk_sglue+0x10>

08117438 <iprintf>:
 8117438:	b40f      	push	{r0, r1, r2, r3}
 811743a:	b507      	push	{r0, r1, r2, lr}
 811743c:	4906      	ldr	r1, [pc, #24]	@ (8117458 <iprintf+0x20>)
 811743e:	ab04      	add	r3, sp, #16
 8117440:	6808      	ldr	r0, [r1, #0]
 8117442:	f853 2b04 	ldr.w	r2, [r3], #4
 8117446:	6881      	ldr	r1, [r0, #8]
 8117448:	9301      	str	r3, [sp, #4]
 811744a:	f003 f805 	bl	811a458 <_vfiprintf_r>
 811744e:	b003      	add	sp, #12
 8117450:	f85d eb04 	ldr.w	lr, [sp], #4
 8117454:	b004      	add	sp, #16
 8117456:	4770      	bx	lr
 8117458:	100001d8 	.word	0x100001d8

0811745c <putchar>:
 811745c:	4b02      	ldr	r3, [pc, #8]	@ (8117468 <putchar+0xc>)
 811745e:	4601      	mov	r1, r0
 8117460:	6818      	ldr	r0, [r3, #0]
 8117462:	6882      	ldr	r2, [r0, #8]
 8117464:	f003 bb7e 	b.w	811ab64 <_putc_r>
 8117468:	100001d8 	.word	0x100001d8

0811746c <_puts_r>:
 811746c:	6a03      	ldr	r3, [r0, #32]
 811746e:	b570      	push	{r4, r5, r6, lr}
 8117470:	6884      	ldr	r4, [r0, #8]
 8117472:	4605      	mov	r5, r0
 8117474:	460e      	mov	r6, r1
 8117476:	b90b      	cbnz	r3, 811747c <_puts_r+0x10>
 8117478:	f7ff ffa8 	bl	81173cc <__sinit>
 811747c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811747e:	07db      	lsls	r3, r3, #31
 8117480:	d405      	bmi.n	811748e <_puts_r+0x22>
 8117482:	89a3      	ldrh	r3, [r4, #12]
 8117484:	0598      	lsls	r0, r3, #22
 8117486:	d402      	bmi.n	811748e <_puts_r+0x22>
 8117488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811748a:	f000 fa52 	bl	8117932 <__retarget_lock_acquire_recursive>
 811748e:	89a3      	ldrh	r3, [r4, #12]
 8117490:	0719      	lsls	r1, r3, #28
 8117492:	d502      	bpl.n	811749a <_puts_r+0x2e>
 8117494:	6923      	ldr	r3, [r4, #16]
 8117496:	2b00      	cmp	r3, #0
 8117498:	d135      	bne.n	8117506 <_puts_r+0x9a>
 811749a:	4621      	mov	r1, r4
 811749c:	4628      	mov	r0, r5
 811749e:	f000 f915 	bl	81176cc <__swsetup_r>
 81174a2:	b380      	cbz	r0, 8117506 <_puts_r+0x9a>
 81174a4:	f04f 35ff 	mov.w	r5, #4294967295
 81174a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81174aa:	07da      	lsls	r2, r3, #31
 81174ac:	d405      	bmi.n	81174ba <_puts_r+0x4e>
 81174ae:	89a3      	ldrh	r3, [r4, #12]
 81174b0:	059b      	lsls	r3, r3, #22
 81174b2:	d402      	bmi.n	81174ba <_puts_r+0x4e>
 81174b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81174b6:	f000 fa3d 	bl	8117934 <__retarget_lock_release_recursive>
 81174ba:	4628      	mov	r0, r5
 81174bc:	bd70      	pop	{r4, r5, r6, pc}
 81174be:	2b00      	cmp	r3, #0
 81174c0:	da04      	bge.n	81174cc <_puts_r+0x60>
 81174c2:	69a2      	ldr	r2, [r4, #24]
 81174c4:	429a      	cmp	r2, r3
 81174c6:	dc17      	bgt.n	81174f8 <_puts_r+0x8c>
 81174c8:	290a      	cmp	r1, #10
 81174ca:	d015      	beq.n	81174f8 <_puts_r+0x8c>
 81174cc:	6823      	ldr	r3, [r4, #0]
 81174ce:	1c5a      	adds	r2, r3, #1
 81174d0:	6022      	str	r2, [r4, #0]
 81174d2:	7019      	strb	r1, [r3, #0]
 81174d4:	68a3      	ldr	r3, [r4, #8]
 81174d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 81174da:	3b01      	subs	r3, #1
 81174dc:	60a3      	str	r3, [r4, #8]
 81174de:	2900      	cmp	r1, #0
 81174e0:	d1ed      	bne.n	81174be <_puts_r+0x52>
 81174e2:	2b00      	cmp	r3, #0
 81174e4:	da11      	bge.n	811750a <_puts_r+0x9e>
 81174e6:	4622      	mov	r2, r4
 81174e8:	210a      	movs	r1, #10
 81174ea:	4628      	mov	r0, r5
 81174ec:	f000 f8af 	bl	811764e <__swbuf_r>
 81174f0:	3001      	adds	r0, #1
 81174f2:	d0d7      	beq.n	81174a4 <_puts_r+0x38>
 81174f4:	250a      	movs	r5, #10
 81174f6:	e7d7      	b.n	81174a8 <_puts_r+0x3c>
 81174f8:	4622      	mov	r2, r4
 81174fa:	4628      	mov	r0, r5
 81174fc:	f000 f8a7 	bl	811764e <__swbuf_r>
 8117500:	3001      	adds	r0, #1
 8117502:	d1e7      	bne.n	81174d4 <_puts_r+0x68>
 8117504:	e7ce      	b.n	81174a4 <_puts_r+0x38>
 8117506:	3e01      	subs	r6, #1
 8117508:	e7e4      	b.n	81174d4 <_puts_r+0x68>
 811750a:	6823      	ldr	r3, [r4, #0]
 811750c:	1c5a      	adds	r2, r3, #1
 811750e:	6022      	str	r2, [r4, #0]
 8117510:	220a      	movs	r2, #10
 8117512:	701a      	strb	r2, [r3, #0]
 8117514:	e7ee      	b.n	81174f4 <_puts_r+0x88>
	...

08117518 <puts>:
 8117518:	4b02      	ldr	r3, [pc, #8]	@ (8117524 <puts+0xc>)
 811751a:	4601      	mov	r1, r0
 811751c:	6818      	ldr	r0, [r3, #0]
 811751e:	f7ff bfa5 	b.w	811746c <_puts_r>
 8117522:	bf00      	nop
 8117524:	100001d8 	.word	0x100001d8

08117528 <siprintf>:
 8117528:	b40e      	push	{r1, r2, r3}
 811752a:	b510      	push	{r4, lr}
 811752c:	b09d      	sub	sp, #116	@ 0x74
 811752e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8117530:	9002      	str	r0, [sp, #8]
 8117532:	9006      	str	r0, [sp, #24]
 8117534:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8117538:	480a      	ldr	r0, [pc, #40]	@ (8117564 <siprintf+0x3c>)
 811753a:	9107      	str	r1, [sp, #28]
 811753c:	9104      	str	r1, [sp, #16]
 811753e:	490a      	ldr	r1, [pc, #40]	@ (8117568 <siprintf+0x40>)
 8117540:	f853 2b04 	ldr.w	r2, [r3], #4
 8117544:	9105      	str	r1, [sp, #20]
 8117546:	2400      	movs	r4, #0
 8117548:	a902      	add	r1, sp, #8
 811754a:	6800      	ldr	r0, [r0, #0]
 811754c:	9301      	str	r3, [sp, #4]
 811754e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8117550:	f002 fc8c 	bl	8119e6c <_svfiprintf_r>
 8117554:	9b02      	ldr	r3, [sp, #8]
 8117556:	701c      	strb	r4, [r3, #0]
 8117558:	b01d      	add	sp, #116	@ 0x74
 811755a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811755e:	b003      	add	sp, #12
 8117560:	4770      	bx	lr
 8117562:	bf00      	nop
 8117564:	100001d8 	.word	0x100001d8
 8117568:	ffff0208 	.word	0xffff0208

0811756c <siscanf>:
 811756c:	b40e      	push	{r1, r2, r3}
 811756e:	b570      	push	{r4, r5, r6, lr}
 8117570:	b09d      	sub	sp, #116	@ 0x74
 8117572:	ac21      	add	r4, sp, #132	@ 0x84
 8117574:	2500      	movs	r5, #0
 8117576:	f44f 7201 	mov.w	r2, #516	@ 0x204
 811757a:	f854 6b04 	ldr.w	r6, [r4], #4
 811757e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8117582:	951b      	str	r5, [sp, #108]	@ 0x6c
 8117584:	9002      	str	r0, [sp, #8]
 8117586:	9006      	str	r0, [sp, #24]
 8117588:	f7e8 ff0a 	bl	81003a0 <strlen>
 811758c:	4b0b      	ldr	r3, [pc, #44]	@ (81175bc <siscanf+0x50>)
 811758e:	9003      	str	r0, [sp, #12]
 8117590:	9007      	str	r0, [sp, #28]
 8117592:	480b      	ldr	r0, [pc, #44]	@ (81175c0 <siscanf+0x54>)
 8117594:	930b      	str	r3, [sp, #44]	@ 0x2c
 8117596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 811759a:	f8ad 3016 	strh.w	r3, [sp, #22]
 811759e:	4632      	mov	r2, r6
 81175a0:	4623      	mov	r3, r4
 81175a2:	a902      	add	r1, sp, #8
 81175a4:	6800      	ldr	r0, [r0, #0]
 81175a6:	950f      	str	r5, [sp, #60]	@ 0x3c
 81175a8:	9514      	str	r5, [sp, #80]	@ 0x50
 81175aa:	9401      	str	r4, [sp, #4]
 81175ac:	f002 fdb4 	bl	811a118 <__ssvfiscanf_r>
 81175b0:	b01d      	add	sp, #116	@ 0x74
 81175b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 81175b6:	b003      	add	sp, #12
 81175b8:	4770      	bx	lr
 81175ba:	bf00      	nop
 81175bc:	081175e7 	.word	0x081175e7
 81175c0:	100001d8 	.word	0x100001d8

081175c4 <__sread>:
 81175c4:	b510      	push	{r4, lr}
 81175c6:	460c      	mov	r4, r1
 81175c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81175cc:	f000 f962 	bl	8117894 <_read_r>
 81175d0:	2800      	cmp	r0, #0
 81175d2:	bfab      	itete	ge
 81175d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 81175d6:	89a3      	ldrhlt	r3, [r4, #12]
 81175d8:	181b      	addge	r3, r3, r0
 81175da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 81175de:	bfac      	ite	ge
 81175e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 81175e2:	81a3      	strhlt	r3, [r4, #12]
 81175e4:	bd10      	pop	{r4, pc}

081175e6 <__seofread>:
 81175e6:	2000      	movs	r0, #0
 81175e8:	4770      	bx	lr

081175ea <__swrite>:
 81175ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81175ee:	461f      	mov	r7, r3
 81175f0:	898b      	ldrh	r3, [r1, #12]
 81175f2:	05db      	lsls	r3, r3, #23
 81175f4:	4605      	mov	r5, r0
 81175f6:	460c      	mov	r4, r1
 81175f8:	4616      	mov	r6, r2
 81175fa:	d505      	bpl.n	8117608 <__swrite+0x1e>
 81175fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8117600:	2302      	movs	r3, #2
 8117602:	2200      	movs	r2, #0
 8117604:	f000 f934 	bl	8117870 <_lseek_r>
 8117608:	89a3      	ldrh	r3, [r4, #12]
 811760a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811760e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8117612:	81a3      	strh	r3, [r4, #12]
 8117614:	4632      	mov	r2, r6
 8117616:	463b      	mov	r3, r7
 8117618:	4628      	mov	r0, r5
 811761a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811761e:	f000 b94b 	b.w	81178b8 <_write_r>

08117622 <__sseek>:
 8117622:	b510      	push	{r4, lr}
 8117624:	460c      	mov	r4, r1
 8117626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811762a:	f000 f921 	bl	8117870 <_lseek_r>
 811762e:	1c43      	adds	r3, r0, #1
 8117630:	89a3      	ldrh	r3, [r4, #12]
 8117632:	bf15      	itete	ne
 8117634:	6560      	strne	r0, [r4, #84]	@ 0x54
 8117636:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 811763a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 811763e:	81a3      	strheq	r3, [r4, #12]
 8117640:	bf18      	it	ne
 8117642:	81a3      	strhne	r3, [r4, #12]
 8117644:	bd10      	pop	{r4, pc}

08117646 <__sclose>:
 8117646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811764a:	f000 b901 	b.w	8117850 <_close_r>

0811764e <__swbuf_r>:
 811764e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117650:	460e      	mov	r6, r1
 8117652:	4614      	mov	r4, r2
 8117654:	4605      	mov	r5, r0
 8117656:	b118      	cbz	r0, 8117660 <__swbuf_r+0x12>
 8117658:	6a03      	ldr	r3, [r0, #32]
 811765a:	b90b      	cbnz	r3, 8117660 <__swbuf_r+0x12>
 811765c:	f7ff feb6 	bl	81173cc <__sinit>
 8117660:	69a3      	ldr	r3, [r4, #24]
 8117662:	60a3      	str	r3, [r4, #8]
 8117664:	89a3      	ldrh	r3, [r4, #12]
 8117666:	071a      	lsls	r2, r3, #28
 8117668:	d501      	bpl.n	811766e <__swbuf_r+0x20>
 811766a:	6923      	ldr	r3, [r4, #16]
 811766c:	b943      	cbnz	r3, 8117680 <__swbuf_r+0x32>
 811766e:	4621      	mov	r1, r4
 8117670:	4628      	mov	r0, r5
 8117672:	f000 f82b 	bl	81176cc <__swsetup_r>
 8117676:	b118      	cbz	r0, 8117680 <__swbuf_r+0x32>
 8117678:	f04f 37ff 	mov.w	r7, #4294967295
 811767c:	4638      	mov	r0, r7
 811767e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8117680:	6823      	ldr	r3, [r4, #0]
 8117682:	6922      	ldr	r2, [r4, #16]
 8117684:	1a98      	subs	r0, r3, r2
 8117686:	6963      	ldr	r3, [r4, #20]
 8117688:	b2f6      	uxtb	r6, r6
 811768a:	4283      	cmp	r3, r0
 811768c:	4637      	mov	r7, r6
 811768e:	dc05      	bgt.n	811769c <__swbuf_r+0x4e>
 8117690:	4621      	mov	r1, r4
 8117692:	4628      	mov	r0, r5
 8117694:	f003 f9ca 	bl	811aa2c <_fflush_r>
 8117698:	2800      	cmp	r0, #0
 811769a:	d1ed      	bne.n	8117678 <__swbuf_r+0x2a>
 811769c:	68a3      	ldr	r3, [r4, #8]
 811769e:	3b01      	subs	r3, #1
 81176a0:	60a3      	str	r3, [r4, #8]
 81176a2:	6823      	ldr	r3, [r4, #0]
 81176a4:	1c5a      	adds	r2, r3, #1
 81176a6:	6022      	str	r2, [r4, #0]
 81176a8:	701e      	strb	r6, [r3, #0]
 81176aa:	6962      	ldr	r2, [r4, #20]
 81176ac:	1c43      	adds	r3, r0, #1
 81176ae:	429a      	cmp	r2, r3
 81176b0:	d004      	beq.n	81176bc <__swbuf_r+0x6e>
 81176b2:	89a3      	ldrh	r3, [r4, #12]
 81176b4:	07db      	lsls	r3, r3, #31
 81176b6:	d5e1      	bpl.n	811767c <__swbuf_r+0x2e>
 81176b8:	2e0a      	cmp	r6, #10
 81176ba:	d1df      	bne.n	811767c <__swbuf_r+0x2e>
 81176bc:	4621      	mov	r1, r4
 81176be:	4628      	mov	r0, r5
 81176c0:	f003 f9b4 	bl	811aa2c <_fflush_r>
 81176c4:	2800      	cmp	r0, #0
 81176c6:	d0d9      	beq.n	811767c <__swbuf_r+0x2e>
 81176c8:	e7d6      	b.n	8117678 <__swbuf_r+0x2a>
	...

081176cc <__swsetup_r>:
 81176cc:	b538      	push	{r3, r4, r5, lr}
 81176ce:	4b29      	ldr	r3, [pc, #164]	@ (8117774 <__swsetup_r+0xa8>)
 81176d0:	4605      	mov	r5, r0
 81176d2:	6818      	ldr	r0, [r3, #0]
 81176d4:	460c      	mov	r4, r1
 81176d6:	b118      	cbz	r0, 81176e0 <__swsetup_r+0x14>
 81176d8:	6a03      	ldr	r3, [r0, #32]
 81176da:	b90b      	cbnz	r3, 81176e0 <__swsetup_r+0x14>
 81176dc:	f7ff fe76 	bl	81173cc <__sinit>
 81176e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81176e4:	0719      	lsls	r1, r3, #28
 81176e6:	d422      	bmi.n	811772e <__swsetup_r+0x62>
 81176e8:	06da      	lsls	r2, r3, #27
 81176ea:	d407      	bmi.n	81176fc <__swsetup_r+0x30>
 81176ec:	2209      	movs	r2, #9
 81176ee:	602a      	str	r2, [r5, #0]
 81176f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81176f4:	81a3      	strh	r3, [r4, #12]
 81176f6:	f04f 30ff 	mov.w	r0, #4294967295
 81176fa:	e033      	b.n	8117764 <__swsetup_r+0x98>
 81176fc:	0758      	lsls	r0, r3, #29
 81176fe:	d512      	bpl.n	8117726 <__swsetup_r+0x5a>
 8117700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8117702:	b141      	cbz	r1, 8117716 <__swsetup_r+0x4a>
 8117704:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8117708:	4299      	cmp	r1, r3
 811770a:	d002      	beq.n	8117712 <__swsetup_r+0x46>
 811770c:	4628      	mov	r0, r5
 811770e:	f000 ff9f 	bl	8118650 <_free_r>
 8117712:	2300      	movs	r3, #0
 8117714:	6363      	str	r3, [r4, #52]	@ 0x34
 8117716:	89a3      	ldrh	r3, [r4, #12]
 8117718:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 811771c:	81a3      	strh	r3, [r4, #12]
 811771e:	2300      	movs	r3, #0
 8117720:	6063      	str	r3, [r4, #4]
 8117722:	6923      	ldr	r3, [r4, #16]
 8117724:	6023      	str	r3, [r4, #0]
 8117726:	89a3      	ldrh	r3, [r4, #12]
 8117728:	f043 0308 	orr.w	r3, r3, #8
 811772c:	81a3      	strh	r3, [r4, #12]
 811772e:	6923      	ldr	r3, [r4, #16]
 8117730:	b94b      	cbnz	r3, 8117746 <__swsetup_r+0x7a>
 8117732:	89a3      	ldrh	r3, [r4, #12]
 8117734:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8117738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811773c:	d003      	beq.n	8117746 <__swsetup_r+0x7a>
 811773e:	4621      	mov	r1, r4
 8117740:	4628      	mov	r0, r5
 8117742:	f003 f9d3 	bl	811aaec <__smakebuf_r>
 8117746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811774a:	f013 0201 	ands.w	r2, r3, #1
 811774e:	d00a      	beq.n	8117766 <__swsetup_r+0x9a>
 8117750:	2200      	movs	r2, #0
 8117752:	60a2      	str	r2, [r4, #8]
 8117754:	6962      	ldr	r2, [r4, #20]
 8117756:	4252      	negs	r2, r2
 8117758:	61a2      	str	r2, [r4, #24]
 811775a:	6922      	ldr	r2, [r4, #16]
 811775c:	b942      	cbnz	r2, 8117770 <__swsetup_r+0xa4>
 811775e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8117762:	d1c5      	bne.n	81176f0 <__swsetup_r+0x24>
 8117764:	bd38      	pop	{r3, r4, r5, pc}
 8117766:	0799      	lsls	r1, r3, #30
 8117768:	bf58      	it	pl
 811776a:	6962      	ldrpl	r2, [r4, #20]
 811776c:	60a2      	str	r2, [r4, #8]
 811776e:	e7f4      	b.n	811775a <__swsetup_r+0x8e>
 8117770:	2000      	movs	r0, #0
 8117772:	e7f7      	b.n	8117764 <__swsetup_r+0x98>
 8117774:	100001d8 	.word	0x100001d8

08117778 <memcmp>:
 8117778:	b510      	push	{r4, lr}
 811777a:	3901      	subs	r1, #1
 811777c:	4402      	add	r2, r0
 811777e:	4290      	cmp	r0, r2
 8117780:	d101      	bne.n	8117786 <memcmp+0xe>
 8117782:	2000      	movs	r0, #0
 8117784:	e005      	b.n	8117792 <memcmp+0x1a>
 8117786:	7803      	ldrb	r3, [r0, #0]
 8117788:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811778c:	42a3      	cmp	r3, r4
 811778e:	d001      	beq.n	8117794 <memcmp+0x1c>
 8117790:	1b18      	subs	r0, r3, r4
 8117792:	bd10      	pop	{r4, pc}
 8117794:	3001      	adds	r0, #1
 8117796:	e7f2      	b.n	811777e <memcmp+0x6>

08117798 <memmove>:
 8117798:	4288      	cmp	r0, r1
 811779a:	b510      	push	{r4, lr}
 811779c:	eb01 0402 	add.w	r4, r1, r2
 81177a0:	d902      	bls.n	81177a8 <memmove+0x10>
 81177a2:	4284      	cmp	r4, r0
 81177a4:	4623      	mov	r3, r4
 81177a6:	d807      	bhi.n	81177b8 <memmove+0x20>
 81177a8:	1e43      	subs	r3, r0, #1
 81177aa:	42a1      	cmp	r1, r4
 81177ac:	d008      	beq.n	81177c0 <memmove+0x28>
 81177ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 81177b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 81177b6:	e7f8      	b.n	81177aa <memmove+0x12>
 81177b8:	4402      	add	r2, r0
 81177ba:	4601      	mov	r1, r0
 81177bc:	428a      	cmp	r2, r1
 81177be:	d100      	bne.n	81177c2 <memmove+0x2a>
 81177c0:	bd10      	pop	{r4, pc}
 81177c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81177c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81177ca:	e7f7      	b.n	81177bc <memmove+0x24>

081177cc <memset>:
 81177cc:	4402      	add	r2, r0
 81177ce:	4603      	mov	r3, r0
 81177d0:	4293      	cmp	r3, r2
 81177d2:	d100      	bne.n	81177d6 <memset+0xa>
 81177d4:	4770      	bx	lr
 81177d6:	f803 1b01 	strb.w	r1, [r3], #1
 81177da:	e7f9      	b.n	81177d0 <memset+0x4>

081177dc <strchr>:
 81177dc:	b2c9      	uxtb	r1, r1
 81177de:	4603      	mov	r3, r0
 81177e0:	4618      	mov	r0, r3
 81177e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81177e6:	b112      	cbz	r2, 81177ee <strchr+0x12>
 81177e8:	428a      	cmp	r2, r1
 81177ea:	d1f9      	bne.n	81177e0 <strchr+0x4>
 81177ec:	4770      	bx	lr
 81177ee:	2900      	cmp	r1, #0
 81177f0:	bf18      	it	ne
 81177f2:	2000      	movne	r0, #0
 81177f4:	4770      	bx	lr

081177f6 <strncmp>:
 81177f6:	b510      	push	{r4, lr}
 81177f8:	b16a      	cbz	r2, 8117816 <strncmp+0x20>
 81177fa:	3901      	subs	r1, #1
 81177fc:	1884      	adds	r4, r0, r2
 81177fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8117802:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8117806:	429a      	cmp	r2, r3
 8117808:	d103      	bne.n	8117812 <strncmp+0x1c>
 811780a:	42a0      	cmp	r0, r4
 811780c:	d001      	beq.n	8117812 <strncmp+0x1c>
 811780e:	2a00      	cmp	r2, #0
 8117810:	d1f5      	bne.n	81177fe <strncmp+0x8>
 8117812:	1ad0      	subs	r0, r2, r3
 8117814:	bd10      	pop	{r4, pc}
 8117816:	4610      	mov	r0, r2
 8117818:	e7fc      	b.n	8117814 <strncmp+0x1e>

0811781a <strstr>:
 811781a:	780a      	ldrb	r2, [r1, #0]
 811781c:	b570      	push	{r4, r5, r6, lr}
 811781e:	b96a      	cbnz	r2, 811783c <strstr+0x22>
 8117820:	bd70      	pop	{r4, r5, r6, pc}
 8117822:	429a      	cmp	r2, r3
 8117824:	d109      	bne.n	811783a <strstr+0x20>
 8117826:	460c      	mov	r4, r1
 8117828:	4605      	mov	r5, r0
 811782a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 811782e:	2b00      	cmp	r3, #0
 8117830:	d0f6      	beq.n	8117820 <strstr+0x6>
 8117832:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8117836:	429e      	cmp	r6, r3
 8117838:	d0f7      	beq.n	811782a <strstr+0x10>
 811783a:	3001      	adds	r0, #1
 811783c:	7803      	ldrb	r3, [r0, #0]
 811783e:	2b00      	cmp	r3, #0
 8117840:	d1ef      	bne.n	8117822 <strstr+0x8>
 8117842:	4618      	mov	r0, r3
 8117844:	e7ec      	b.n	8117820 <strstr+0x6>
	...

08117848 <_localeconv_r>:
 8117848:	4800      	ldr	r0, [pc, #0]	@ (811784c <_localeconv_r+0x4>)
 811784a:	4770      	bx	lr
 811784c:	10000318 	.word	0x10000318

08117850 <_close_r>:
 8117850:	b538      	push	{r3, r4, r5, lr}
 8117852:	4d06      	ldr	r5, [pc, #24]	@ (811786c <_close_r+0x1c>)
 8117854:	2300      	movs	r3, #0
 8117856:	4604      	mov	r4, r0
 8117858:	4608      	mov	r0, r1
 811785a:	602b      	str	r3, [r5, #0]
 811785c:	f7ec fb06 	bl	8103e6c <_close>
 8117860:	1c43      	adds	r3, r0, #1
 8117862:	d102      	bne.n	811786a <_close_r+0x1a>
 8117864:	682b      	ldr	r3, [r5, #0]
 8117866:	b103      	cbz	r3, 811786a <_close_r+0x1a>
 8117868:	6023      	str	r3, [r4, #0]
 811786a:	bd38      	pop	{r3, r4, r5, pc}
 811786c:	10017894 	.word	0x10017894

08117870 <_lseek_r>:
 8117870:	b538      	push	{r3, r4, r5, lr}
 8117872:	4d07      	ldr	r5, [pc, #28]	@ (8117890 <_lseek_r+0x20>)
 8117874:	4604      	mov	r4, r0
 8117876:	4608      	mov	r0, r1
 8117878:	4611      	mov	r1, r2
 811787a:	2200      	movs	r2, #0
 811787c:	602a      	str	r2, [r5, #0]
 811787e:	461a      	mov	r2, r3
 8117880:	f7ec fb1b 	bl	8103eba <_lseek>
 8117884:	1c43      	adds	r3, r0, #1
 8117886:	d102      	bne.n	811788e <_lseek_r+0x1e>
 8117888:	682b      	ldr	r3, [r5, #0]
 811788a:	b103      	cbz	r3, 811788e <_lseek_r+0x1e>
 811788c:	6023      	str	r3, [r4, #0]
 811788e:	bd38      	pop	{r3, r4, r5, pc}
 8117890:	10017894 	.word	0x10017894

08117894 <_read_r>:
 8117894:	b538      	push	{r3, r4, r5, lr}
 8117896:	4d07      	ldr	r5, [pc, #28]	@ (81178b4 <_read_r+0x20>)
 8117898:	4604      	mov	r4, r0
 811789a:	4608      	mov	r0, r1
 811789c:	4611      	mov	r1, r2
 811789e:	2200      	movs	r2, #0
 81178a0:	602a      	str	r2, [r5, #0]
 81178a2:	461a      	mov	r2, r3
 81178a4:	f7ec faa9 	bl	8103dfa <_read>
 81178a8:	1c43      	adds	r3, r0, #1
 81178aa:	d102      	bne.n	81178b2 <_read_r+0x1e>
 81178ac:	682b      	ldr	r3, [r5, #0]
 81178ae:	b103      	cbz	r3, 81178b2 <_read_r+0x1e>
 81178b0:	6023      	str	r3, [r4, #0]
 81178b2:	bd38      	pop	{r3, r4, r5, pc}
 81178b4:	10017894 	.word	0x10017894

081178b8 <_write_r>:
 81178b8:	b538      	push	{r3, r4, r5, lr}
 81178ba:	4d07      	ldr	r5, [pc, #28]	@ (81178d8 <_write_r+0x20>)
 81178bc:	4604      	mov	r4, r0
 81178be:	4608      	mov	r0, r1
 81178c0:	4611      	mov	r1, r2
 81178c2:	2200      	movs	r2, #0
 81178c4:	602a      	str	r2, [r5, #0]
 81178c6:	461a      	mov	r2, r3
 81178c8:	f7ec fab4 	bl	8103e34 <_write>
 81178cc:	1c43      	adds	r3, r0, #1
 81178ce:	d102      	bne.n	81178d6 <_write_r+0x1e>
 81178d0:	682b      	ldr	r3, [r5, #0]
 81178d2:	b103      	cbz	r3, 81178d6 <_write_r+0x1e>
 81178d4:	6023      	str	r3, [r4, #0]
 81178d6:	bd38      	pop	{r3, r4, r5, pc}
 81178d8:	10017894 	.word	0x10017894

081178dc <__errno>:
 81178dc:	4b01      	ldr	r3, [pc, #4]	@ (81178e4 <__errno+0x8>)
 81178de:	6818      	ldr	r0, [r3, #0]
 81178e0:	4770      	bx	lr
 81178e2:	bf00      	nop
 81178e4:	100001d8 	.word	0x100001d8

081178e8 <__libc_init_array>:
 81178e8:	b570      	push	{r4, r5, r6, lr}
 81178ea:	4d0d      	ldr	r5, [pc, #52]	@ (8117920 <__libc_init_array+0x38>)
 81178ec:	4c0d      	ldr	r4, [pc, #52]	@ (8117924 <__libc_init_array+0x3c>)
 81178ee:	1b64      	subs	r4, r4, r5
 81178f0:	10a4      	asrs	r4, r4, #2
 81178f2:	2600      	movs	r6, #0
 81178f4:	42a6      	cmp	r6, r4
 81178f6:	d109      	bne.n	811790c <__libc_init_array+0x24>
 81178f8:	4d0b      	ldr	r5, [pc, #44]	@ (8117928 <__libc_init_array+0x40>)
 81178fa:	4c0c      	ldr	r4, [pc, #48]	@ (811792c <__libc_init_array+0x44>)
 81178fc:	f003 fe72 	bl	811b5e4 <_init>
 8117900:	1b64      	subs	r4, r4, r5
 8117902:	10a4      	asrs	r4, r4, #2
 8117904:	2600      	movs	r6, #0
 8117906:	42a6      	cmp	r6, r4
 8117908:	d105      	bne.n	8117916 <__libc_init_array+0x2e>
 811790a:	bd70      	pop	{r4, r5, r6, pc}
 811790c:	f855 3b04 	ldr.w	r3, [r5], #4
 8117910:	4798      	blx	r3
 8117912:	3601      	adds	r6, #1
 8117914:	e7ee      	b.n	81178f4 <__libc_init_array+0xc>
 8117916:	f855 3b04 	ldr.w	r3, [r5], #4
 811791a:	4798      	blx	r3
 811791c:	3601      	adds	r6, #1
 811791e:	e7f2      	b.n	8117906 <__libc_init_array+0x1e>
 8117920:	0811f780 	.word	0x0811f780
 8117924:	0811f780 	.word	0x0811f780
 8117928:	0811f780 	.word	0x0811f780
 811792c:	0811f784 	.word	0x0811f784

08117930 <__retarget_lock_init_recursive>:
 8117930:	4770      	bx	lr

08117932 <__retarget_lock_acquire_recursive>:
 8117932:	4770      	bx	lr

08117934 <__retarget_lock_release_recursive>:
 8117934:	4770      	bx	lr

08117936 <memcpy>:
 8117936:	440a      	add	r2, r1
 8117938:	4291      	cmp	r1, r2
 811793a:	f100 33ff 	add.w	r3, r0, #4294967295
 811793e:	d100      	bne.n	8117942 <memcpy+0xc>
 8117940:	4770      	bx	lr
 8117942:	b510      	push	{r4, lr}
 8117944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8117948:	f803 4f01 	strb.w	r4, [r3, #1]!
 811794c:	4291      	cmp	r1, r2
 811794e:	d1f9      	bne.n	8117944 <memcpy+0xe>
 8117950:	bd10      	pop	{r4, pc}
	...

08117954 <nanf>:
 8117954:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 811795c <nanf+0x8>
 8117958:	4770      	bx	lr
 811795a:	bf00      	nop
 811795c:	7fc00000 	.word	0x7fc00000

08117960 <__assert_func>:
 8117960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8117962:	4614      	mov	r4, r2
 8117964:	461a      	mov	r2, r3
 8117966:	4b09      	ldr	r3, [pc, #36]	@ (811798c <__assert_func+0x2c>)
 8117968:	681b      	ldr	r3, [r3, #0]
 811796a:	4605      	mov	r5, r0
 811796c:	68d8      	ldr	r0, [r3, #12]
 811796e:	b14c      	cbz	r4, 8117984 <__assert_func+0x24>
 8117970:	4b07      	ldr	r3, [pc, #28]	@ (8117990 <__assert_func+0x30>)
 8117972:	9100      	str	r1, [sp, #0]
 8117974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8117978:	4906      	ldr	r1, [pc, #24]	@ (8117994 <__assert_func+0x34>)
 811797a:	462b      	mov	r3, r5
 811797c:	f003 f87e 	bl	811aa7c <fiprintf>
 8117980:	f003 f9d2 	bl	811ad28 <abort>
 8117984:	4b04      	ldr	r3, [pc, #16]	@ (8117998 <__assert_func+0x38>)
 8117986:	461c      	mov	r4, r3
 8117988:	e7f3      	b.n	8117972 <__assert_func+0x12>
 811798a:	bf00      	nop
 811798c:	100001d8 	.word	0x100001d8
 8117990:	0811f386 	.word	0x0811f386
 8117994:	0811f393 	.word	0x0811f393
 8117998:	0811f3c1 	.word	0x0811f3c1

0811799c <quorem>:
 811799c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81179a0:	6903      	ldr	r3, [r0, #16]
 81179a2:	690c      	ldr	r4, [r1, #16]
 81179a4:	42a3      	cmp	r3, r4
 81179a6:	4607      	mov	r7, r0
 81179a8:	db7e      	blt.n	8117aa8 <quorem+0x10c>
 81179aa:	3c01      	subs	r4, #1
 81179ac:	f101 0814 	add.w	r8, r1, #20
 81179b0:	00a3      	lsls	r3, r4, #2
 81179b2:	f100 0514 	add.w	r5, r0, #20
 81179b6:	9300      	str	r3, [sp, #0]
 81179b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81179bc:	9301      	str	r3, [sp, #4]
 81179be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81179c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81179c6:	3301      	adds	r3, #1
 81179c8:	429a      	cmp	r2, r3
 81179ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81179ce:	fbb2 f6f3 	udiv	r6, r2, r3
 81179d2:	d32e      	bcc.n	8117a32 <quorem+0x96>
 81179d4:	f04f 0a00 	mov.w	sl, #0
 81179d8:	46c4      	mov	ip, r8
 81179da:	46ae      	mov	lr, r5
 81179dc:	46d3      	mov	fp, sl
 81179de:	f85c 3b04 	ldr.w	r3, [ip], #4
 81179e2:	b298      	uxth	r0, r3
 81179e4:	fb06 a000 	mla	r0, r6, r0, sl
 81179e8:	0c02      	lsrs	r2, r0, #16
 81179ea:	0c1b      	lsrs	r3, r3, #16
 81179ec:	fb06 2303 	mla	r3, r6, r3, r2
 81179f0:	f8de 2000 	ldr.w	r2, [lr]
 81179f4:	b280      	uxth	r0, r0
 81179f6:	b292      	uxth	r2, r2
 81179f8:	1a12      	subs	r2, r2, r0
 81179fa:	445a      	add	r2, fp
 81179fc:	f8de 0000 	ldr.w	r0, [lr]
 8117a00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8117a04:	b29b      	uxth	r3, r3
 8117a06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8117a0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8117a0e:	b292      	uxth	r2, r2
 8117a10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8117a14:	45e1      	cmp	r9, ip
 8117a16:	f84e 2b04 	str.w	r2, [lr], #4
 8117a1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8117a1e:	d2de      	bcs.n	81179de <quorem+0x42>
 8117a20:	9b00      	ldr	r3, [sp, #0]
 8117a22:	58eb      	ldr	r3, [r5, r3]
 8117a24:	b92b      	cbnz	r3, 8117a32 <quorem+0x96>
 8117a26:	9b01      	ldr	r3, [sp, #4]
 8117a28:	3b04      	subs	r3, #4
 8117a2a:	429d      	cmp	r5, r3
 8117a2c:	461a      	mov	r2, r3
 8117a2e:	d32f      	bcc.n	8117a90 <quorem+0xf4>
 8117a30:	613c      	str	r4, [r7, #16]
 8117a32:	4638      	mov	r0, r7
 8117a34:	f001 f9c8 	bl	8118dc8 <__mcmp>
 8117a38:	2800      	cmp	r0, #0
 8117a3a:	db25      	blt.n	8117a88 <quorem+0xec>
 8117a3c:	4629      	mov	r1, r5
 8117a3e:	2000      	movs	r0, #0
 8117a40:	f858 2b04 	ldr.w	r2, [r8], #4
 8117a44:	f8d1 c000 	ldr.w	ip, [r1]
 8117a48:	fa1f fe82 	uxth.w	lr, r2
 8117a4c:	fa1f f38c 	uxth.w	r3, ip
 8117a50:	eba3 030e 	sub.w	r3, r3, lr
 8117a54:	4403      	add	r3, r0
 8117a56:	0c12      	lsrs	r2, r2, #16
 8117a58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8117a5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8117a60:	b29b      	uxth	r3, r3
 8117a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8117a66:	45c1      	cmp	r9, r8
 8117a68:	f841 3b04 	str.w	r3, [r1], #4
 8117a6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8117a70:	d2e6      	bcs.n	8117a40 <quorem+0xa4>
 8117a72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8117a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8117a7a:	b922      	cbnz	r2, 8117a86 <quorem+0xea>
 8117a7c:	3b04      	subs	r3, #4
 8117a7e:	429d      	cmp	r5, r3
 8117a80:	461a      	mov	r2, r3
 8117a82:	d30b      	bcc.n	8117a9c <quorem+0x100>
 8117a84:	613c      	str	r4, [r7, #16]
 8117a86:	3601      	adds	r6, #1
 8117a88:	4630      	mov	r0, r6
 8117a8a:	b003      	add	sp, #12
 8117a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8117a90:	6812      	ldr	r2, [r2, #0]
 8117a92:	3b04      	subs	r3, #4
 8117a94:	2a00      	cmp	r2, #0
 8117a96:	d1cb      	bne.n	8117a30 <quorem+0x94>
 8117a98:	3c01      	subs	r4, #1
 8117a9a:	e7c6      	b.n	8117a2a <quorem+0x8e>
 8117a9c:	6812      	ldr	r2, [r2, #0]
 8117a9e:	3b04      	subs	r3, #4
 8117aa0:	2a00      	cmp	r2, #0
 8117aa2:	d1ef      	bne.n	8117a84 <quorem+0xe8>
 8117aa4:	3c01      	subs	r4, #1
 8117aa6:	e7ea      	b.n	8117a7e <quorem+0xe2>
 8117aa8:	2000      	movs	r0, #0
 8117aaa:	e7ee      	b.n	8117a8a <quorem+0xee>
 8117aac:	0000      	movs	r0, r0
	...

08117ab0 <_dtoa_r>:
 8117ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8117ab4:	69c7      	ldr	r7, [r0, #28]
 8117ab6:	b097      	sub	sp, #92	@ 0x5c
 8117ab8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8117abc:	ec55 4b10 	vmov	r4, r5, d0
 8117ac0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8117ac2:	9107      	str	r1, [sp, #28]
 8117ac4:	4681      	mov	r9, r0
 8117ac6:	920c      	str	r2, [sp, #48]	@ 0x30
 8117ac8:	9311      	str	r3, [sp, #68]	@ 0x44
 8117aca:	b97f      	cbnz	r7, 8117aec <_dtoa_r+0x3c>
 8117acc:	2010      	movs	r0, #16
 8117ace:	f000 fe09 	bl	81186e4 <malloc>
 8117ad2:	4602      	mov	r2, r0
 8117ad4:	f8c9 001c 	str.w	r0, [r9, #28]
 8117ad8:	b920      	cbnz	r0, 8117ae4 <_dtoa_r+0x34>
 8117ada:	4ba9      	ldr	r3, [pc, #676]	@ (8117d80 <_dtoa_r+0x2d0>)
 8117adc:	21ef      	movs	r1, #239	@ 0xef
 8117ade:	48a9      	ldr	r0, [pc, #676]	@ (8117d84 <_dtoa_r+0x2d4>)
 8117ae0:	f7ff ff3e 	bl	8117960 <__assert_func>
 8117ae4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8117ae8:	6007      	str	r7, [r0, #0]
 8117aea:	60c7      	str	r7, [r0, #12]
 8117aec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8117af0:	6819      	ldr	r1, [r3, #0]
 8117af2:	b159      	cbz	r1, 8117b0c <_dtoa_r+0x5c>
 8117af4:	685a      	ldr	r2, [r3, #4]
 8117af6:	604a      	str	r2, [r1, #4]
 8117af8:	2301      	movs	r3, #1
 8117afa:	4093      	lsls	r3, r2
 8117afc:	608b      	str	r3, [r1, #8]
 8117afe:	4648      	mov	r0, r9
 8117b00:	f000 fee6 	bl	81188d0 <_Bfree>
 8117b04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8117b08:	2200      	movs	r2, #0
 8117b0a:	601a      	str	r2, [r3, #0]
 8117b0c:	1e2b      	subs	r3, r5, #0
 8117b0e:	bfb9      	ittee	lt
 8117b10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8117b14:	9305      	strlt	r3, [sp, #20]
 8117b16:	2300      	movge	r3, #0
 8117b18:	6033      	strge	r3, [r6, #0]
 8117b1a:	9f05      	ldr	r7, [sp, #20]
 8117b1c:	4b9a      	ldr	r3, [pc, #616]	@ (8117d88 <_dtoa_r+0x2d8>)
 8117b1e:	bfbc      	itt	lt
 8117b20:	2201      	movlt	r2, #1
 8117b22:	6032      	strlt	r2, [r6, #0]
 8117b24:	43bb      	bics	r3, r7
 8117b26:	d112      	bne.n	8117b4e <_dtoa_r+0x9e>
 8117b28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8117b2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8117b2e:	6013      	str	r3, [r2, #0]
 8117b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8117b34:	4323      	orrs	r3, r4
 8117b36:	f000 855a 	beq.w	81185ee <_dtoa_r+0xb3e>
 8117b3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8117b3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8117d9c <_dtoa_r+0x2ec>
 8117b40:	2b00      	cmp	r3, #0
 8117b42:	f000 855c 	beq.w	81185fe <_dtoa_r+0xb4e>
 8117b46:	f10a 0303 	add.w	r3, sl, #3
 8117b4a:	f000 bd56 	b.w	81185fa <_dtoa_r+0xb4a>
 8117b4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8117b52:	2200      	movs	r2, #0
 8117b54:	ec51 0b17 	vmov	r0, r1, d7
 8117b58:	2300      	movs	r3, #0
 8117b5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8117b5e:	f7e9 f84b 	bl	8100bf8 <__aeabi_dcmpeq>
 8117b62:	4680      	mov	r8, r0
 8117b64:	b158      	cbz	r0, 8117b7e <_dtoa_r+0xce>
 8117b66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8117b68:	2301      	movs	r3, #1
 8117b6a:	6013      	str	r3, [r2, #0]
 8117b6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8117b6e:	b113      	cbz	r3, 8117b76 <_dtoa_r+0xc6>
 8117b70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8117b72:	4b86      	ldr	r3, [pc, #536]	@ (8117d8c <_dtoa_r+0x2dc>)
 8117b74:	6013      	str	r3, [r2, #0]
 8117b76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8117da0 <_dtoa_r+0x2f0>
 8117b7a:	f000 bd40 	b.w	81185fe <_dtoa_r+0xb4e>
 8117b7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8117b82:	aa14      	add	r2, sp, #80	@ 0x50
 8117b84:	a915      	add	r1, sp, #84	@ 0x54
 8117b86:	4648      	mov	r0, r9
 8117b88:	f001 fa3e 	bl	8119008 <__d2b>
 8117b8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8117b90:	9002      	str	r0, [sp, #8]
 8117b92:	2e00      	cmp	r6, #0
 8117b94:	d078      	beq.n	8117c88 <_dtoa_r+0x1d8>
 8117b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8117b98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8117b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8117ba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8117ba4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8117ba8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8117bac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8117bb0:	4619      	mov	r1, r3
 8117bb2:	2200      	movs	r2, #0
 8117bb4:	4b76      	ldr	r3, [pc, #472]	@ (8117d90 <_dtoa_r+0x2e0>)
 8117bb6:	f7e8 fbff 	bl	81003b8 <__aeabi_dsub>
 8117bba:	a36b      	add	r3, pc, #428	@ (adr r3, 8117d68 <_dtoa_r+0x2b8>)
 8117bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117bc0:	f7e8 fdb2 	bl	8100728 <__aeabi_dmul>
 8117bc4:	a36a      	add	r3, pc, #424	@ (adr r3, 8117d70 <_dtoa_r+0x2c0>)
 8117bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117bca:	f7e8 fbf7 	bl	81003bc <__adddf3>
 8117bce:	4604      	mov	r4, r0
 8117bd0:	4630      	mov	r0, r6
 8117bd2:	460d      	mov	r5, r1
 8117bd4:	f7e8 fd3e 	bl	8100654 <__aeabi_i2d>
 8117bd8:	a367      	add	r3, pc, #412	@ (adr r3, 8117d78 <_dtoa_r+0x2c8>)
 8117bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117bde:	f7e8 fda3 	bl	8100728 <__aeabi_dmul>
 8117be2:	4602      	mov	r2, r0
 8117be4:	460b      	mov	r3, r1
 8117be6:	4620      	mov	r0, r4
 8117be8:	4629      	mov	r1, r5
 8117bea:	f7e8 fbe7 	bl	81003bc <__adddf3>
 8117bee:	4604      	mov	r4, r0
 8117bf0:	460d      	mov	r5, r1
 8117bf2:	f7e9 f849 	bl	8100c88 <__aeabi_d2iz>
 8117bf6:	2200      	movs	r2, #0
 8117bf8:	4607      	mov	r7, r0
 8117bfa:	2300      	movs	r3, #0
 8117bfc:	4620      	mov	r0, r4
 8117bfe:	4629      	mov	r1, r5
 8117c00:	f7e9 f804 	bl	8100c0c <__aeabi_dcmplt>
 8117c04:	b140      	cbz	r0, 8117c18 <_dtoa_r+0x168>
 8117c06:	4638      	mov	r0, r7
 8117c08:	f7e8 fd24 	bl	8100654 <__aeabi_i2d>
 8117c0c:	4622      	mov	r2, r4
 8117c0e:	462b      	mov	r3, r5
 8117c10:	f7e8 fff2 	bl	8100bf8 <__aeabi_dcmpeq>
 8117c14:	b900      	cbnz	r0, 8117c18 <_dtoa_r+0x168>
 8117c16:	3f01      	subs	r7, #1
 8117c18:	2f16      	cmp	r7, #22
 8117c1a:	d852      	bhi.n	8117cc2 <_dtoa_r+0x212>
 8117c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8117d94 <_dtoa_r+0x2e4>)
 8117c1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8117c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8117c2a:	f7e8 ffef 	bl	8100c0c <__aeabi_dcmplt>
 8117c2e:	2800      	cmp	r0, #0
 8117c30:	d049      	beq.n	8117cc6 <_dtoa_r+0x216>
 8117c32:	3f01      	subs	r7, #1
 8117c34:	2300      	movs	r3, #0
 8117c36:	9310      	str	r3, [sp, #64]	@ 0x40
 8117c38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8117c3a:	1b9b      	subs	r3, r3, r6
 8117c3c:	1e5a      	subs	r2, r3, #1
 8117c3e:	bf45      	ittet	mi
 8117c40:	f1c3 0301 	rsbmi	r3, r3, #1
 8117c44:	9300      	strmi	r3, [sp, #0]
 8117c46:	2300      	movpl	r3, #0
 8117c48:	2300      	movmi	r3, #0
 8117c4a:	9206      	str	r2, [sp, #24]
 8117c4c:	bf54      	ite	pl
 8117c4e:	9300      	strpl	r3, [sp, #0]
 8117c50:	9306      	strmi	r3, [sp, #24]
 8117c52:	2f00      	cmp	r7, #0
 8117c54:	db39      	blt.n	8117cca <_dtoa_r+0x21a>
 8117c56:	9b06      	ldr	r3, [sp, #24]
 8117c58:	970d      	str	r7, [sp, #52]	@ 0x34
 8117c5a:	443b      	add	r3, r7
 8117c5c:	9306      	str	r3, [sp, #24]
 8117c5e:	2300      	movs	r3, #0
 8117c60:	9308      	str	r3, [sp, #32]
 8117c62:	9b07      	ldr	r3, [sp, #28]
 8117c64:	2b09      	cmp	r3, #9
 8117c66:	d863      	bhi.n	8117d30 <_dtoa_r+0x280>
 8117c68:	2b05      	cmp	r3, #5
 8117c6a:	bfc4      	itt	gt
 8117c6c:	3b04      	subgt	r3, #4
 8117c6e:	9307      	strgt	r3, [sp, #28]
 8117c70:	9b07      	ldr	r3, [sp, #28]
 8117c72:	f1a3 0302 	sub.w	r3, r3, #2
 8117c76:	bfcc      	ite	gt
 8117c78:	2400      	movgt	r4, #0
 8117c7a:	2401      	movle	r4, #1
 8117c7c:	2b03      	cmp	r3, #3
 8117c7e:	d863      	bhi.n	8117d48 <_dtoa_r+0x298>
 8117c80:	e8df f003 	tbb	[pc, r3]
 8117c84:	2b375452 	.word	0x2b375452
 8117c88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8117c8c:	441e      	add	r6, r3
 8117c8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8117c92:	2b20      	cmp	r3, #32
 8117c94:	bfc1      	itttt	gt
 8117c96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8117c9a:	409f      	lslgt	r7, r3
 8117c9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8117ca0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8117ca4:	bfd6      	itet	le
 8117ca6:	f1c3 0320 	rsble	r3, r3, #32
 8117caa:	ea47 0003 	orrgt.w	r0, r7, r3
 8117cae:	fa04 f003 	lslle.w	r0, r4, r3
 8117cb2:	f7e8 fcbf 	bl	8100634 <__aeabi_ui2d>
 8117cb6:	2201      	movs	r2, #1
 8117cb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8117cbc:	3e01      	subs	r6, #1
 8117cbe:	9212      	str	r2, [sp, #72]	@ 0x48
 8117cc0:	e776      	b.n	8117bb0 <_dtoa_r+0x100>
 8117cc2:	2301      	movs	r3, #1
 8117cc4:	e7b7      	b.n	8117c36 <_dtoa_r+0x186>
 8117cc6:	9010      	str	r0, [sp, #64]	@ 0x40
 8117cc8:	e7b6      	b.n	8117c38 <_dtoa_r+0x188>
 8117cca:	9b00      	ldr	r3, [sp, #0]
 8117ccc:	1bdb      	subs	r3, r3, r7
 8117cce:	9300      	str	r3, [sp, #0]
 8117cd0:	427b      	negs	r3, r7
 8117cd2:	9308      	str	r3, [sp, #32]
 8117cd4:	2300      	movs	r3, #0
 8117cd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8117cd8:	e7c3      	b.n	8117c62 <_dtoa_r+0x1b2>
 8117cda:	2301      	movs	r3, #1
 8117cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8117cde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8117ce0:	eb07 0b03 	add.w	fp, r7, r3
 8117ce4:	f10b 0301 	add.w	r3, fp, #1
 8117ce8:	2b01      	cmp	r3, #1
 8117cea:	9303      	str	r3, [sp, #12]
 8117cec:	bfb8      	it	lt
 8117cee:	2301      	movlt	r3, #1
 8117cf0:	e006      	b.n	8117d00 <_dtoa_r+0x250>
 8117cf2:	2301      	movs	r3, #1
 8117cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8117cf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8117cf8:	2b00      	cmp	r3, #0
 8117cfa:	dd28      	ble.n	8117d4e <_dtoa_r+0x29e>
 8117cfc:	469b      	mov	fp, r3
 8117cfe:	9303      	str	r3, [sp, #12]
 8117d00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8117d04:	2100      	movs	r1, #0
 8117d06:	2204      	movs	r2, #4
 8117d08:	f102 0514 	add.w	r5, r2, #20
 8117d0c:	429d      	cmp	r5, r3
 8117d0e:	d926      	bls.n	8117d5e <_dtoa_r+0x2ae>
 8117d10:	6041      	str	r1, [r0, #4]
 8117d12:	4648      	mov	r0, r9
 8117d14:	f000 fd9c 	bl	8118850 <_Balloc>
 8117d18:	4682      	mov	sl, r0
 8117d1a:	2800      	cmp	r0, #0
 8117d1c:	d142      	bne.n	8117da4 <_dtoa_r+0x2f4>
 8117d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8117d98 <_dtoa_r+0x2e8>)
 8117d20:	4602      	mov	r2, r0
 8117d22:	f240 11af 	movw	r1, #431	@ 0x1af
 8117d26:	e6da      	b.n	8117ade <_dtoa_r+0x2e>
 8117d28:	2300      	movs	r3, #0
 8117d2a:	e7e3      	b.n	8117cf4 <_dtoa_r+0x244>
 8117d2c:	2300      	movs	r3, #0
 8117d2e:	e7d5      	b.n	8117cdc <_dtoa_r+0x22c>
 8117d30:	2401      	movs	r4, #1
 8117d32:	2300      	movs	r3, #0
 8117d34:	9307      	str	r3, [sp, #28]
 8117d36:	9409      	str	r4, [sp, #36]	@ 0x24
 8117d38:	f04f 3bff 	mov.w	fp, #4294967295
 8117d3c:	2200      	movs	r2, #0
 8117d3e:	f8cd b00c 	str.w	fp, [sp, #12]
 8117d42:	2312      	movs	r3, #18
 8117d44:	920c      	str	r2, [sp, #48]	@ 0x30
 8117d46:	e7db      	b.n	8117d00 <_dtoa_r+0x250>
 8117d48:	2301      	movs	r3, #1
 8117d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8117d4c:	e7f4      	b.n	8117d38 <_dtoa_r+0x288>
 8117d4e:	f04f 0b01 	mov.w	fp, #1
 8117d52:	f8cd b00c 	str.w	fp, [sp, #12]
 8117d56:	465b      	mov	r3, fp
 8117d58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8117d5c:	e7d0      	b.n	8117d00 <_dtoa_r+0x250>
 8117d5e:	3101      	adds	r1, #1
 8117d60:	0052      	lsls	r2, r2, #1
 8117d62:	e7d1      	b.n	8117d08 <_dtoa_r+0x258>
 8117d64:	f3af 8000 	nop.w
 8117d68:	636f4361 	.word	0x636f4361
 8117d6c:	3fd287a7 	.word	0x3fd287a7
 8117d70:	8b60c8b3 	.word	0x8b60c8b3
 8117d74:	3fc68a28 	.word	0x3fc68a28
 8117d78:	509f79fb 	.word	0x509f79fb
 8117d7c:	3fd34413 	.word	0x3fd34413
 8117d80:	0811f2e0 	.word	0x0811f2e0
 8117d84:	0811f3cf 	.word	0x0811f3cf
 8117d88:	7ff00000 	.word	0x7ff00000
 8117d8c:	0811f4bb 	.word	0x0811f4bb
 8117d90:	3ff80000 	.word	0x3ff80000
 8117d94:	0811f660 	.word	0x0811f660
 8117d98:	0811f427 	.word	0x0811f427
 8117d9c:	0811f3cb 	.word	0x0811f3cb
 8117da0:	0811f4ba 	.word	0x0811f4ba
 8117da4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8117da8:	6018      	str	r0, [r3, #0]
 8117daa:	9b03      	ldr	r3, [sp, #12]
 8117dac:	2b0e      	cmp	r3, #14
 8117dae:	f200 80a1 	bhi.w	8117ef4 <_dtoa_r+0x444>
 8117db2:	2c00      	cmp	r4, #0
 8117db4:	f000 809e 	beq.w	8117ef4 <_dtoa_r+0x444>
 8117db8:	2f00      	cmp	r7, #0
 8117dba:	dd33      	ble.n	8117e24 <_dtoa_r+0x374>
 8117dbc:	4b9c      	ldr	r3, [pc, #624]	@ (8118030 <_dtoa_r+0x580>)
 8117dbe:	f007 020f 	and.w	r2, r7, #15
 8117dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8117dc6:	ed93 7b00 	vldr	d7, [r3]
 8117dca:	05f8      	lsls	r0, r7, #23
 8117dcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8117dd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8117dd4:	d516      	bpl.n	8117e04 <_dtoa_r+0x354>
 8117dd6:	4b97      	ldr	r3, [pc, #604]	@ (8118034 <_dtoa_r+0x584>)
 8117dd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8117ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8117de0:	f7e8 fdcc 	bl	810097c <__aeabi_ddiv>
 8117de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8117de8:	f004 040f 	and.w	r4, r4, #15
 8117dec:	2603      	movs	r6, #3
 8117dee:	4d91      	ldr	r5, [pc, #580]	@ (8118034 <_dtoa_r+0x584>)
 8117df0:	b954      	cbnz	r4, 8117e08 <_dtoa_r+0x358>
 8117df2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8117df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8117dfa:	f7e8 fdbf 	bl	810097c <__aeabi_ddiv>
 8117dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8117e02:	e028      	b.n	8117e56 <_dtoa_r+0x3a6>
 8117e04:	2602      	movs	r6, #2
 8117e06:	e7f2      	b.n	8117dee <_dtoa_r+0x33e>
 8117e08:	07e1      	lsls	r1, r4, #31
 8117e0a:	d508      	bpl.n	8117e1e <_dtoa_r+0x36e>
 8117e0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8117e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8117e14:	f7e8 fc88 	bl	8100728 <__aeabi_dmul>
 8117e18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8117e1c:	3601      	adds	r6, #1
 8117e1e:	1064      	asrs	r4, r4, #1
 8117e20:	3508      	adds	r5, #8
 8117e22:	e7e5      	b.n	8117df0 <_dtoa_r+0x340>
 8117e24:	f000 80af 	beq.w	8117f86 <_dtoa_r+0x4d6>
 8117e28:	427c      	negs	r4, r7
 8117e2a:	4b81      	ldr	r3, [pc, #516]	@ (8118030 <_dtoa_r+0x580>)
 8117e2c:	4d81      	ldr	r5, [pc, #516]	@ (8118034 <_dtoa_r+0x584>)
 8117e2e:	f004 020f 	and.w	r2, r4, #15
 8117e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8117e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117e3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8117e3e:	f7e8 fc73 	bl	8100728 <__aeabi_dmul>
 8117e42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8117e46:	1124      	asrs	r4, r4, #4
 8117e48:	2300      	movs	r3, #0
 8117e4a:	2602      	movs	r6, #2
 8117e4c:	2c00      	cmp	r4, #0
 8117e4e:	f040 808f 	bne.w	8117f70 <_dtoa_r+0x4c0>
 8117e52:	2b00      	cmp	r3, #0
 8117e54:	d1d3      	bne.n	8117dfe <_dtoa_r+0x34e>
 8117e56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8117e58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8117e5c:	2b00      	cmp	r3, #0
 8117e5e:	f000 8094 	beq.w	8117f8a <_dtoa_r+0x4da>
 8117e62:	4b75      	ldr	r3, [pc, #468]	@ (8118038 <_dtoa_r+0x588>)
 8117e64:	2200      	movs	r2, #0
 8117e66:	4620      	mov	r0, r4
 8117e68:	4629      	mov	r1, r5
 8117e6a:	f7e8 fecf 	bl	8100c0c <__aeabi_dcmplt>
 8117e6e:	2800      	cmp	r0, #0
 8117e70:	f000 808b 	beq.w	8117f8a <_dtoa_r+0x4da>
 8117e74:	9b03      	ldr	r3, [sp, #12]
 8117e76:	2b00      	cmp	r3, #0
 8117e78:	f000 8087 	beq.w	8117f8a <_dtoa_r+0x4da>
 8117e7c:	f1bb 0f00 	cmp.w	fp, #0
 8117e80:	dd34      	ble.n	8117eec <_dtoa_r+0x43c>
 8117e82:	4620      	mov	r0, r4
 8117e84:	4b6d      	ldr	r3, [pc, #436]	@ (811803c <_dtoa_r+0x58c>)
 8117e86:	2200      	movs	r2, #0
 8117e88:	4629      	mov	r1, r5
 8117e8a:	f7e8 fc4d 	bl	8100728 <__aeabi_dmul>
 8117e8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8117e92:	f107 38ff 	add.w	r8, r7, #4294967295
 8117e96:	3601      	adds	r6, #1
 8117e98:	465c      	mov	r4, fp
 8117e9a:	4630      	mov	r0, r6
 8117e9c:	f7e8 fbda 	bl	8100654 <__aeabi_i2d>
 8117ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8117ea4:	f7e8 fc40 	bl	8100728 <__aeabi_dmul>
 8117ea8:	4b65      	ldr	r3, [pc, #404]	@ (8118040 <_dtoa_r+0x590>)
 8117eaa:	2200      	movs	r2, #0
 8117eac:	f7e8 fa86 	bl	81003bc <__adddf3>
 8117eb0:	4605      	mov	r5, r0
 8117eb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8117eb6:	2c00      	cmp	r4, #0
 8117eb8:	d16a      	bne.n	8117f90 <_dtoa_r+0x4e0>
 8117eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8117ebe:	4b61      	ldr	r3, [pc, #388]	@ (8118044 <_dtoa_r+0x594>)
 8117ec0:	2200      	movs	r2, #0
 8117ec2:	f7e8 fa79 	bl	81003b8 <__aeabi_dsub>
 8117ec6:	4602      	mov	r2, r0
 8117ec8:	460b      	mov	r3, r1
 8117eca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8117ece:	462a      	mov	r2, r5
 8117ed0:	4633      	mov	r3, r6
 8117ed2:	f7e8 feb9 	bl	8100c48 <__aeabi_dcmpgt>
 8117ed6:	2800      	cmp	r0, #0
 8117ed8:	f040 8298 	bne.w	811840c <_dtoa_r+0x95c>
 8117edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8117ee0:	462a      	mov	r2, r5
 8117ee2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8117ee6:	f7e8 fe91 	bl	8100c0c <__aeabi_dcmplt>
 8117eea:	bb38      	cbnz	r0, 8117f3c <_dtoa_r+0x48c>
 8117eec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8117ef0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8117ef4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8117ef6:	2b00      	cmp	r3, #0
 8117ef8:	f2c0 8157 	blt.w	81181aa <_dtoa_r+0x6fa>
 8117efc:	2f0e      	cmp	r7, #14
 8117efe:	f300 8154 	bgt.w	81181aa <_dtoa_r+0x6fa>
 8117f02:	4b4b      	ldr	r3, [pc, #300]	@ (8118030 <_dtoa_r+0x580>)
 8117f04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8117f08:	ed93 7b00 	vldr	d7, [r3]
 8117f0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8117f0e:	2b00      	cmp	r3, #0
 8117f10:	ed8d 7b00 	vstr	d7, [sp]
 8117f14:	f280 80e5 	bge.w	81180e2 <_dtoa_r+0x632>
 8117f18:	9b03      	ldr	r3, [sp, #12]
 8117f1a:	2b00      	cmp	r3, #0
 8117f1c:	f300 80e1 	bgt.w	81180e2 <_dtoa_r+0x632>
 8117f20:	d10c      	bne.n	8117f3c <_dtoa_r+0x48c>
 8117f22:	4b48      	ldr	r3, [pc, #288]	@ (8118044 <_dtoa_r+0x594>)
 8117f24:	2200      	movs	r2, #0
 8117f26:	ec51 0b17 	vmov	r0, r1, d7
 8117f2a:	f7e8 fbfd 	bl	8100728 <__aeabi_dmul>
 8117f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8117f32:	f7e8 fe7f 	bl	8100c34 <__aeabi_dcmpge>
 8117f36:	2800      	cmp	r0, #0
 8117f38:	f000 8266 	beq.w	8118408 <_dtoa_r+0x958>
 8117f3c:	2400      	movs	r4, #0
 8117f3e:	4625      	mov	r5, r4
 8117f40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8117f42:	4656      	mov	r6, sl
 8117f44:	ea6f 0803 	mvn.w	r8, r3
 8117f48:	2700      	movs	r7, #0
 8117f4a:	4621      	mov	r1, r4
 8117f4c:	4648      	mov	r0, r9
 8117f4e:	f000 fcbf 	bl	81188d0 <_Bfree>
 8117f52:	2d00      	cmp	r5, #0
 8117f54:	f000 80bd 	beq.w	81180d2 <_dtoa_r+0x622>
 8117f58:	b12f      	cbz	r7, 8117f66 <_dtoa_r+0x4b6>
 8117f5a:	42af      	cmp	r7, r5
 8117f5c:	d003      	beq.n	8117f66 <_dtoa_r+0x4b6>
 8117f5e:	4639      	mov	r1, r7
 8117f60:	4648      	mov	r0, r9
 8117f62:	f000 fcb5 	bl	81188d0 <_Bfree>
 8117f66:	4629      	mov	r1, r5
 8117f68:	4648      	mov	r0, r9
 8117f6a:	f000 fcb1 	bl	81188d0 <_Bfree>
 8117f6e:	e0b0      	b.n	81180d2 <_dtoa_r+0x622>
 8117f70:	07e2      	lsls	r2, r4, #31
 8117f72:	d505      	bpl.n	8117f80 <_dtoa_r+0x4d0>
 8117f74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8117f78:	f7e8 fbd6 	bl	8100728 <__aeabi_dmul>
 8117f7c:	3601      	adds	r6, #1
 8117f7e:	2301      	movs	r3, #1
 8117f80:	1064      	asrs	r4, r4, #1
 8117f82:	3508      	adds	r5, #8
 8117f84:	e762      	b.n	8117e4c <_dtoa_r+0x39c>
 8117f86:	2602      	movs	r6, #2
 8117f88:	e765      	b.n	8117e56 <_dtoa_r+0x3a6>
 8117f8a:	9c03      	ldr	r4, [sp, #12]
 8117f8c:	46b8      	mov	r8, r7
 8117f8e:	e784      	b.n	8117e9a <_dtoa_r+0x3ea>
 8117f90:	4b27      	ldr	r3, [pc, #156]	@ (8118030 <_dtoa_r+0x580>)
 8117f92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8117f94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8117f98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8117f9c:	4454      	add	r4, sl
 8117f9e:	2900      	cmp	r1, #0
 8117fa0:	d054      	beq.n	811804c <_dtoa_r+0x59c>
 8117fa2:	4929      	ldr	r1, [pc, #164]	@ (8118048 <_dtoa_r+0x598>)
 8117fa4:	2000      	movs	r0, #0
 8117fa6:	f7e8 fce9 	bl	810097c <__aeabi_ddiv>
 8117faa:	4633      	mov	r3, r6
 8117fac:	462a      	mov	r2, r5
 8117fae:	f7e8 fa03 	bl	81003b8 <__aeabi_dsub>
 8117fb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8117fb6:	4656      	mov	r6, sl
 8117fb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8117fbc:	f7e8 fe64 	bl	8100c88 <__aeabi_d2iz>
 8117fc0:	4605      	mov	r5, r0
 8117fc2:	f7e8 fb47 	bl	8100654 <__aeabi_i2d>
 8117fc6:	4602      	mov	r2, r0
 8117fc8:	460b      	mov	r3, r1
 8117fca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8117fce:	f7e8 f9f3 	bl	81003b8 <__aeabi_dsub>
 8117fd2:	3530      	adds	r5, #48	@ 0x30
 8117fd4:	4602      	mov	r2, r0
 8117fd6:	460b      	mov	r3, r1
 8117fd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8117fdc:	f806 5b01 	strb.w	r5, [r6], #1
 8117fe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8117fe4:	f7e8 fe12 	bl	8100c0c <__aeabi_dcmplt>
 8117fe8:	2800      	cmp	r0, #0
 8117fea:	d172      	bne.n	81180d2 <_dtoa_r+0x622>
 8117fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8117ff0:	4911      	ldr	r1, [pc, #68]	@ (8118038 <_dtoa_r+0x588>)
 8117ff2:	2000      	movs	r0, #0
 8117ff4:	f7e8 f9e0 	bl	81003b8 <__aeabi_dsub>
 8117ff8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8117ffc:	f7e8 fe06 	bl	8100c0c <__aeabi_dcmplt>
 8118000:	2800      	cmp	r0, #0
 8118002:	f040 80b4 	bne.w	811816e <_dtoa_r+0x6be>
 8118006:	42a6      	cmp	r6, r4
 8118008:	f43f af70 	beq.w	8117eec <_dtoa_r+0x43c>
 811800c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8118010:	4b0a      	ldr	r3, [pc, #40]	@ (811803c <_dtoa_r+0x58c>)
 8118012:	2200      	movs	r2, #0
 8118014:	f7e8 fb88 	bl	8100728 <__aeabi_dmul>
 8118018:	4b08      	ldr	r3, [pc, #32]	@ (811803c <_dtoa_r+0x58c>)
 811801a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 811801e:	2200      	movs	r2, #0
 8118020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8118024:	f7e8 fb80 	bl	8100728 <__aeabi_dmul>
 8118028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 811802c:	e7c4      	b.n	8117fb8 <_dtoa_r+0x508>
 811802e:	bf00      	nop
 8118030:	0811f660 	.word	0x0811f660
 8118034:	0811f638 	.word	0x0811f638
 8118038:	3ff00000 	.word	0x3ff00000
 811803c:	40240000 	.word	0x40240000
 8118040:	401c0000 	.word	0x401c0000
 8118044:	40140000 	.word	0x40140000
 8118048:	3fe00000 	.word	0x3fe00000
 811804c:	4631      	mov	r1, r6
 811804e:	4628      	mov	r0, r5
 8118050:	f7e8 fb6a 	bl	8100728 <__aeabi_dmul>
 8118054:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8118058:	9413      	str	r4, [sp, #76]	@ 0x4c
 811805a:	4656      	mov	r6, sl
 811805c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8118060:	f7e8 fe12 	bl	8100c88 <__aeabi_d2iz>
 8118064:	4605      	mov	r5, r0
 8118066:	f7e8 faf5 	bl	8100654 <__aeabi_i2d>
 811806a:	4602      	mov	r2, r0
 811806c:	460b      	mov	r3, r1
 811806e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8118072:	f7e8 f9a1 	bl	81003b8 <__aeabi_dsub>
 8118076:	3530      	adds	r5, #48	@ 0x30
 8118078:	f806 5b01 	strb.w	r5, [r6], #1
 811807c:	4602      	mov	r2, r0
 811807e:	460b      	mov	r3, r1
 8118080:	42a6      	cmp	r6, r4
 8118082:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8118086:	f04f 0200 	mov.w	r2, #0
 811808a:	d124      	bne.n	81180d6 <_dtoa_r+0x626>
 811808c:	4baf      	ldr	r3, [pc, #700]	@ (811834c <_dtoa_r+0x89c>)
 811808e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8118092:	f7e8 f993 	bl	81003bc <__adddf3>
 8118096:	4602      	mov	r2, r0
 8118098:	460b      	mov	r3, r1
 811809a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 811809e:	f7e8 fdd3 	bl	8100c48 <__aeabi_dcmpgt>
 81180a2:	2800      	cmp	r0, #0
 81180a4:	d163      	bne.n	811816e <_dtoa_r+0x6be>
 81180a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 81180aa:	49a8      	ldr	r1, [pc, #672]	@ (811834c <_dtoa_r+0x89c>)
 81180ac:	2000      	movs	r0, #0
 81180ae:	f7e8 f983 	bl	81003b8 <__aeabi_dsub>
 81180b2:	4602      	mov	r2, r0
 81180b4:	460b      	mov	r3, r1
 81180b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 81180ba:	f7e8 fda7 	bl	8100c0c <__aeabi_dcmplt>
 81180be:	2800      	cmp	r0, #0
 81180c0:	f43f af14 	beq.w	8117eec <_dtoa_r+0x43c>
 81180c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 81180c6:	1e73      	subs	r3, r6, #1
 81180c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 81180ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 81180ce:	2b30      	cmp	r3, #48	@ 0x30
 81180d0:	d0f8      	beq.n	81180c4 <_dtoa_r+0x614>
 81180d2:	4647      	mov	r7, r8
 81180d4:	e03b      	b.n	811814e <_dtoa_r+0x69e>
 81180d6:	4b9e      	ldr	r3, [pc, #632]	@ (8118350 <_dtoa_r+0x8a0>)
 81180d8:	f7e8 fb26 	bl	8100728 <__aeabi_dmul>
 81180dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81180e0:	e7bc      	b.n	811805c <_dtoa_r+0x5ac>
 81180e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 81180e6:	4656      	mov	r6, sl
 81180e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81180ec:	4620      	mov	r0, r4
 81180ee:	4629      	mov	r1, r5
 81180f0:	f7e8 fc44 	bl	810097c <__aeabi_ddiv>
 81180f4:	f7e8 fdc8 	bl	8100c88 <__aeabi_d2iz>
 81180f8:	4680      	mov	r8, r0
 81180fa:	f7e8 faab 	bl	8100654 <__aeabi_i2d>
 81180fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8118102:	f7e8 fb11 	bl	8100728 <__aeabi_dmul>
 8118106:	4602      	mov	r2, r0
 8118108:	460b      	mov	r3, r1
 811810a:	4620      	mov	r0, r4
 811810c:	4629      	mov	r1, r5
 811810e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8118112:	f7e8 f951 	bl	81003b8 <__aeabi_dsub>
 8118116:	f806 4b01 	strb.w	r4, [r6], #1
 811811a:	9d03      	ldr	r5, [sp, #12]
 811811c:	eba6 040a 	sub.w	r4, r6, sl
 8118120:	42a5      	cmp	r5, r4
 8118122:	4602      	mov	r2, r0
 8118124:	460b      	mov	r3, r1
 8118126:	d133      	bne.n	8118190 <_dtoa_r+0x6e0>
 8118128:	f7e8 f948 	bl	81003bc <__adddf3>
 811812c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8118130:	4604      	mov	r4, r0
 8118132:	460d      	mov	r5, r1
 8118134:	f7e8 fd88 	bl	8100c48 <__aeabi_dcmpgt>
 8118138:	b9c0      	cbnz	r0, 811816c <_dtoa_r+0x6bc>
 811813a:	e9dd 2300 	ldrd	r2, r3, [sp]
 811813e:	4620      	mov	r0, r4
 8118140:	4629      	mov	r1, r5
 8118142:	f7e8 fd59 	bl	8100bf8 <__aeabi_dcmpeq>
 8118146:	b110      	cbz	r0, 811814e <_dtoa_r+0x69e>
 8118148:	f018 0f01 	tst.w	r8, #1
 811814c:	d10e      	bne.n	811816c <_dtoa_r+0x6bc>
 811814e:	9902      	ldr	r1, [sp, #8]
 8118150:	4648      	mov	r0, r9
 8118152:	f000 fbbd 	bl	81188d0 <_Bfree>
 8118156:	2300      	movs	r3, #0
 8118158:	7033      	strb	r3, [r6, #0]
 811815a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 811815c:	3701      	adds	r7, #1
 811815e:	601f      	str	r7, [r3, #0]
 8118160:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8118162:	2b00      	cmp	r3, #0
 8118164:	f000 824b 	beq.w	81185fe <_dtoa_r+0xb4e>
 8118168:	601e      	str	r6, [r3, #0]
 811816a:	e248      	b.n	81185fe <_dtoa_r+0xb4e>
 811816c:	46b8      	mov	r8, r7
 811816e:	4633      	mov	r3, r6
 8118170:	461e      	mov	r6, r3
 8118172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8118176:	2a39      	cmp	r2, #57	@ 0x39
 8118178:	d106      	bne.n	8118188 <_dtoa_r+0x6d8>
 811817a:	459a      	cmp	sl, r3
 811817c:	d1f8      	bne.n	8118170 <_dtoa_r+0x6c0>
 811817e:	2230      	movs	r2, #48	@ 0x30
 8118180:	f108 0801 	add.w	r8, r8, #1
 8118184:	f88a 2000 	strb.w	r2, [sl]
 8118188:	781a      	ldrb	r2, [r3, #0]
 811818a:	3201      	adds	r2, #1
 811818c:	701a      	strb	r2, [r3, #0]
 811818e:	e7a0      	b.n	81180d2 <_dtoa_r+0x622>
 8118190:	4b6f      	ldr	r3, [pc, #444]	@ (8118350 <_dtoa_r+0x8a0>)
 8118192:	2200      	movs	r2, #0
 8118194:	f7e8 fac8 	bl	8100728 <__aeabi_dmul>
 8118198:	2200      	movs	r2, #0
 811819a:	2300      	movs	r3, #0
 811819c:	4604      	mov	r4, r0
 811819e:	460d      	mov	r5, r1
 81181a0:	f7e8 fd2a 	bl	8100bf8 <__aeabi_dcmpeq>
 81181a4:	2800      	cmp	r0, #0
 81181a6:	d09f      	beq.n	81180e8 <_dtoa_r+0x638>
 81181a8:	e7d1      	b.n	811814e <_dtoa_r+0x69e>
 81181aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81181ac:	2a00      	cmp	r2, #0
 81181ae:	f000 80ea 	beq.w	8118386 <_dtoa_r+0x8d6>
 81181b2:	9a07      	ldr	r2, [sp, #28]
 81181b4:	2a01      	cmp	r2, #1
 81181b6:	f300 80cd 	bgt.w	8118354 <_dtoa_r+0x8a4>
 81181ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 81181bc:	2a00      	cmp	r2, #0
 81181be:	f000 80c1 	beq.w	8118344 <_dtoa_r+0x894>
 81181c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 81181c6:	9c08      	ldr	r4, [sp, #32]
 81181c8:	9e00      	ldr	r6, [sp, #0]
 81181ca:	9a00      	ldr	r2, [sp, #0]
 81181cc:	441a      	add	r2, r3
 81181ce:	9200      	str	r2, [sp, #0]
 81181d0:	9a06      	ldr	r2, [sp, #24]
 81181d2:	2101      	movs	r1, #1
 81181d4:	441a      	add	r2, r3
 81181d6:	4648      	mov	r0, r9
 81181d8:	9206      	str	r2, [sp, #24]
 81181da:	f000 fc77 	bl	8118acc <__i2b>
 81181de:	4605      	mov	r5, r0
 81181e0:	b166      	cbz	r6, 81181fc <_dtoa_r+0x74c>
 81181e2:	9b06      	ldr	r3, [sp, #24]
 81181e4:	2b00      	cmp	r3, #0
 81181e6:	dd09      	ble.n	81181fc <_dtoa_r+0x74c>
 81181e8:	42b3      	cmp	r3, r6
 81181ea:	9a00      	ldr	r2, [sp, #0]
 81181ec:	bfa8      	it	ge
 81181ee:	4633      	movge	r3, r6
 81181f0:	1ad2      	subs	r2, r2, r3
 81181f2:	9200      	str	r2, [sp, #0]
 81181f4:	9a06      	ldr	r2, [sp, #24]
 81181f6:	1af6      	subs	r6, r6, r3
 81181f8:	1ad3      	subs	r3, r2, r3
 81181fa:	9306      	str	r3, [sp, #24]
 81181fc:	9b08      	ldr	r3, [sp, #32]
 81181fe:	b30b      	cbz	r3, 8118244 <_dtoa_r+0x794>
 8118200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8118202:	2b00      	cmp	r3, #0
 8118204:	f000 80c6 	beq.w	8118394 <_dtoa_r+0x8e4>
 8118208:	2c00      	cmp	r4, #0
 811820a:	f000 80c0 	beq.w	811838e <_dtoa_r+0x8de>
 811820e:	4629      	mov	r1, r5
 8118210:	4622      	mov	r2, r4
 8118212:	4648      	mov	r0, r9
 8118214:	f000 fd12 	bl	8118c3c <__pow5mult>
 8118218:	9a02      	ldr	r2, [sp, #8]
 811821a:	4601      	mov	r1, r0
 811821c:	4605      	mov	r5, r0
 811821e:	4648      	mov	r0, r9
 8118220:	f000 fc6a 	bl	8118af8 <__multiply>
 8118224:	9902      	ldr	r1, [sp, #8]
 8118226:	4680      	mov	r8, r0
 8118228:	4648      	mov	r0, r9
 811822a:	f000 fb51 	bl	81188d0 <_Bfree>
 811822e:	9b08      	ldr	r3, [sp, #32]
 8118230:	1b1b      	subs	r3, r3, r4
 8118232:	9308      	str	r3, [sp, #32]
 8118234:	f000 80b1 	beq.w	811839a <_dtoa_r+0x8ea>
 8118238:	9a08      	ldr	r2, [sp, #32]
 811823a:	4641      	mov	r1, r8
 811823c:	4648      	mov	r0, r9
 811823e:	f000 fcfd 	bl	8118c3c <__pow5mult>
 8118242:	9002      	str	r0, [sp, #8]
 8118244:	2101      	movs	r1, #1
 8118246:	4648      	mov	r0, r9
 8118248:	f000 fc40 	bl	8118acc <__i2b>
 811824c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 811824e:	4604      	mov	r4, r0
 8118250:	2b00      	cmp	r3, #0
 8118252:	f000 81d8 	beq.w	8118606 <_dtoa_r+0xb56>
 8118256:	461a      	mov	r2, r3
 8118258:	4601      	mov	r1, r0
 811825a:	4648      	mov	r0, r9
 811825c:	f000 fcee 	bl	8118c3c <__pow5mult>
 8118260:	9b07      	ldr	r3, [sp, #28]
 8118262:	2b01      	cmp	r3, #1
 8118264:	4604      	mov	r4, r0
 8118266:	f300 809f 	bgt.w	81183a8 <_dtoa_r+0x8f8>
 811826a:	9b04      	ldr	r3, [sp, #16]
 811826c:	2b00      	cmp	r3, #0
 811826e:	f040 8097 	bne.w	81183a0 <_dtoa_r+0x8f0>
 8118272:	9b05      	ldr	r3, [sp, #20]
 8118274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8118278:	2b00      	cmp	r3, #0
 811827a:	f040 8093 	bne.w	81183a4 <_dtoa_r+0x8f4>
 811827e:	9b05      	ldr	r3, [sp, #20]
 8118280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8118284:	0d1b      	lsrs	r3, r3, #20
 8118286:	051b      	lsls	r3, r3, #20
 8118288:	b133      	cbz	r3, 8118298 <_dtoa_r+0x7e8>
 811828a:	9b00      	ldr	r3, [sp, #0]
 811828c:	3301      	adds	r3, #1
 811828e:	9300      	str	r3, [sp, #0]
 8118290:	9b06      	ldr	r3, [sp, #24]
 8118292:	3301      	adds	r3, #1
 8118294:	9306      	str	r3, [sp, #24]
 8118296:	2301      	movs	r3, #1
 8118298:	9308      	str	r3, [sp, #32]
 811829a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 811829c:	2b00      	cmp	r3, #0
 811829e:	f000 81b8 	beq.w	8118612 <_dtoa_r+0xb62>
 81182a2:	6923      	ldr	r3, [r4, #16]
 81182a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81182a8:	6918      	ldr	r0, [r3, #16]
 81182aa:	f000 fbc3 	bl	8118a34 <__hi0bits>
 81182ae:	f1c0 0020 	rsb	r0, r0, #32
 81182b2:	9b06      	ldr	r3, [sp, #24]
 81182b4:	4418      	add	r0, r3
 81182b6:	f010 001f 	ands.w	r0, r0, #31
 81182ba:	f000 8082 	beq.w	81183c2 <_dtoa_r+0x912>
 81182be:	f1c0 0320 	rsb	r3, r0, #32
 81182c2:	2b04      	cmp	r3, #4
 81182c4:	dd73      	ble.n	81183ae <_dtoa_r+0x8fe>
 81182c6:	9b00      	ldr	r3, [sp, #0]
 81182c8:	f1c0 001c 	rsb	r0, r0, #28
 81182cc:	4403      	add	r3, r0
 81182ce:	9300      	str	r3, [sp, #0]
 81182d0:	9b06      	ldr	r3, [sp, #24]
 81182d2:	4403      	add	r3, r0
 81182d4:	4406      	add	r6, r0
 81182d6:	9306      	str	r3, [sp, #24]
 81182d8:	9b00      	ldr	r3, [sp, #0]
 81182da:	2b00      	cmp	r3, #0
 81182dc:	dd05      	ble.n	81182ea <_dtoa_r+0x83a>
 81182de:	9902      	ldr	r1, [sp, #8]
 81182e0:	461a      	mov	r2, r3
 81182e2:	4648      	mov	r0, r9
 81182e4:	f000 fd04 	bl	8118cf0 <__lshift>
 81182e8:	9002      	str	r0, [sp, #8]
 81182ea:	9b06      	ldr	r3, [sp, #24]
 81182ec:	2b00      	cmp	r3, #0
 81182ee:	dd05      	ble.n	81182fc <_dtoa_r+0x84c>
 81182f0:	4621      	mov	r1, r4
 81182f2:	461a      	mov	r2, r3
 81182f4:	4648      	mov	r0, r9
 81182f6:	f000 fcfb 	bl	8118cf0 <__lshift>
 81182fa:	4604      	mov	r4, r0
 81182fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 81182fe:	2b00      	cmp	r3, #0
 8118300:	d061      	beq.n	81183c6 <_dtoa_r+0x916>
 8118302:	9802      	ldr	r0, [sp, #8]
 8118304:	4621      	mov	r1, r4
 8118306:	f000 fd5f 	bl	8118dc8 <__mcmp>
 811830a:	2800      	cmp	r0, #0
 811830c:	da5b      	bge.n	81183c6 <_dtoa_r+0x916>
 811830e:	2300      	movs	r3, #0
 8118310:	9902      	ldr	r1, [sp, #8]
 8118312:	220a      	movs	r2, #10
 8118314:	4648      	mov	r0, r9
 8118316:	f000 fafd 	bl	8118914 <__multadd>
 811831a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811831c:	9002      	str	r0, [sp, #8]
 811831e:	f107 38ff 	add.w	r8, r7, #4294967295
 8118322:	2b00      	cmp	r3, #0
 8118324:	f000 8177 	beq.w	8118616 <_dtoa_r+0xb66>
 8118328:	4629      	mov	r1, r5
 811832a:	2300      	movs	r3, #0
 811832c:	220a      	movs	r2, #10
 811832e:	4648      	mov	r0, r9
 8118330:	f000 faf0 	bl	8118914 <__multadd>
 8118334:	f1bb 0f00 	cmp.w	fp, #0
 8118338:	4605      	mov	r5, r0
 811833a:	dc6f      	bgt.n	811841c <_dtoa_r+0x96c>
 811833c:	9b07      	ldr	r3, [sp, #28]
 811833e:	2b02      	cmp	r3, #2
 8118340:	dc49      	bgt.n	81183d6 <_dtoa_r+0x926>
 8118342:	e06b      	b.n	811841c <_dtoa_r+0x96c>
 8118344:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8118346:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 811834a:	e73c      	b.n	81181c6 <_dtoa_r+0x716>
 811834c:	3fe00000 	.word	0x3fe00000
 8118350:	40240000 	.word	0x40240000
 8118354:	9b03      	ldr	r3, [sp, #12]
 8118356:	1e5c      	subs	r4, r3, #1
 8118358:	9b08      	ldr	r3, [sp, #32]
 811835a:	42a3      	cmp	r3, r4
 811835c:	db09      	blt.n	8118372 <_dtoa_r+0x8c2>
 811835e:	1b1c      	subs	r4, r3, r4
 8118360:	9b03      	ldr	r3, [sp, #12]
 8118362:	2b00      	cmp	r3, #0
 8118364:	f6bf af30 	bge.w	81181c8 <_dtoa_r+0x718>
 8118368:	9b00      	ldr	r3, [sp, #0]
 811836a:	9a03      	ldr	r2, [sp, #12]
 811836c:	1a9e      	subs	r6, r3, r2
 811836e:	2300      	movs	r3, #0
 8118370:	e72b      	b.n	81181ca <_dtoa_r+0x71a>
 8118372:	9b08      	ldr	r3, [sp, #32]
 8118374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8118376:	9408      	str	r4, [sp, #32]
 8118378:	1ae3      	subs	r3, r4, r3
 811837a:	441a      	add	r2, r3
 811837c:	9e00      	ldr	r6, [sp, #0]
 811837e:	9b03      	ldr	r3, [sp, #12]
 8118380:	920d      	str	r2, [sp, #52]	@ 0x34
 8118382:	2400      	movs	r4, #0
 8118384:	e721      	b.n	81181ca <_dtoa_r+0x71a>
 8118386:	9c08      	ldr	r4, [sp, #32]
 8118388:	9e00      	ldr	r6, [sp, #0]
 811838a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 811838c:	e728      	b.n	81181e0 <_dtoa_r+0x730>
 811838e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8118392:	e751      	b.n	8118238 <_dtoa_r+0x788>
 8118394:	9a08      	ldr	r2, [sp, #32]
 8118396:	9902      	ldr	r1, [sp, #8]
 8118398:	e750      	b.n	811823c <_dtoa_r+0x78c>
 811839a:	f8cd 8008 	str.w	r8, [sp, #8]
 811839e:	e751      	b.n	8118244 <_dtoa_r+0x794>
 81183a0:	2300      	movs	r3, #0
 81183a2:	e779      	b.n	8118298 <_dtoa_r+0x7e8>
 81183a4:	9b04      	ldr	r3, [sp, #16]
 81183a6:	e777      	b.n	8118298 <_dtoa_r+0x7e8>
 81183a8:	2300      	movs	r3, #0
 81183aa:	9308      	str	r3, [sp, #32]
 81183ac:	e779      	b.n	81182a2 <_dtoa_r+0x7f2>
 81183ae:	d093      	beq.n	81182d8 <_dtoa_r+0x828>
 81183b0:	9a00      	ldr	r2, [sp, #0]
 81183b2:	331c      	adds	r3, #28
 81183b4:	441a      	add	r2, r3
 81183b6:	9200      	str	r2, [sp, #0]
 81183b8:	9a06      	ldr	r2, [sp, #24]
 81183ba:	441a      	add	r2, r3
 81183bc:	441e      	add	r6, r3
 81183be:	9206      	str	r2, [sp, #24]
 81183c0:	e78a      	b.n	81182d8 <_dtoa_r+0x828>
 81183c2:	4603      	mov	r3, r0
 81183c4:	e7f4      	b.n	81183b0 <_dtoa_r+0x900>
 81183c6:	9b03      	ldr	r3, [sp, #12]
 81183c8:	2b00      	cmp	r3, #0
 81183ca:	46b8      	mov	r8, r7
 81183cc:	dc20      	bgt.n	8118410 <_dtoa_r+0x960>
 81183ce:	469b      	mov	fp, r3
 81183d0:	9b07      	ldr	r3, [sp, #28]
 81183d2:	2b02      	cmp	r3, #2
 81183d4:	dd1e      	ble.n	8118414 <_dtoa_r+0x964>
 81183d6:	f1bb 0f00 	cmp.w	fp, #0
 81183da:	f47f adb1 	bne.w	8117f40 <_dtoa_r+0x490>
 81183de:	4621      	mov	r1, r4
 81183e0:	465b      	mov	r3, fp
 81183e2:	2205      	movs	r2, #5
 81183e4:	4648      	mov	r0, r9
 81183e6:	f000 fa95 	bl	8118914 <__multadd>
 81183ea:	4601      	mov	r1, r0
 81183ec:	4604      	mov	r4, r0
 81183ee:	9802      	ldr	r0, [sp, #8]
 81183f0:	f000 fcea 	bl	8118dc8 <__mcmp>
 81183f4:	2800      	cmp	r0, #0
 81183f6:	f77f ada3 	ble.w	8117f40 <_dtoa_r+0x490>
 81183fa:	4656      	mov	r6, sl
 81183fc:	2331      	movs	r3, #49	@ 0x31
 81183fe:	f806 3b01 	strb.w	r3, [r6], #1
 8118402:	f108 0801 	add.w	r8, r8, #1
 8118406:	e59f      	b.n	8117f48 <_dtoa_r+0x498>
 8118408:	9c03      	ldr	r4, [sp, #12]
 811840a:	46b8      	mov	r8, r7
 811840c:	4625      	mov	r5, r4
 811840e:	e7f4      	b.n	81183fa <_dtoa_r+0x94a>
 8118410:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8118414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8118416:	2b00      	cmp	r3, #0
 8118418:	f000 8101 	beq.w	811861e <_dtoa_r+0xb6e>
 811841c:	2e00      	cmp	r6, #0
 811841e:	dd05      	ble.n	811842c <_dtoa_r+0x97c>
 8118420:	4629      	mov	r1, r5
 8118422:	4632      	mov	r2, r6
 8118424:	4648      	mov	r0, r9
 8118426:	f000 fc63 	bl	8118cf0 <__lshift>
 811842a:	4605      	mov	r5, r0
 811842c:	9b08      	ldr	r3, [sp, #32]
 811842e:	2b00      	cmp	r3, #0
 8118430:	d05c      	beq.n	81184ec <_dtoa_r+0xa3c>
 8118432:	6869      	ldr	r1, [r5, #4]
 8118434:	4648      	mov	r0, r9
 8118436:	f000 fa0b 	bl	8118850 <_Balloc>
 811843a:	4606      	mov	r6, r0
 811843c:	b928      	cbnz	r0, 811844a <_dtoa_r+0x99a>
 811843e:	4b82      	ldr	r3, [pc, #520]	@ (8118648 <_dtoa_r+0xb98>)
 8118440:	4602      	mov	r2, r0
 8118442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8118446:	f7ff bb4a 	b.w	8117ade <_dtoa_r+0x2e>
 811844a:	692a      	ldr	r2, [r5, #16]
 811844c:	3202      	adds	r2, #2
 811844e:	0092      	lsls	r2, r2, #2
 8118450:	f105 010c 	add.w	r1, r5, #12
 8118454:	300c      	adds	r0, #12
 8118456:	f7ff fa6e 	bl	8117936 <memcpy>
 811845a:	2201      	movs	r2, #1
 811845c:	4631      	mov	r1, r6
 811845e:	4648      	mov	r0, r9
 8118460:	f000 fc46 	bl	8118cf0 <__lshift>
 8118464:	f10a 0301 	add.w	r3, sl, #1
 8118468:	9300      	str	r3, [sp, #0]
 811846a:	eb0a 030b 	add.w	r3, sl, fp
 811846e:	9308      	str	r3, [sp, #32]
 8118470:	9b04      	ldr	r3, [sp, #16]
 8118472:	f003 0301 	and.w	r3, r3, #1
 8118476:	462f      	mov	r7, r5
 8118478:	9306      	str	r3, [sp, #24]
 811847a:	4605      	mov	r5, r0
 811847c:	9b00      	ldr	r3, [sp, #0]
 811847e:	9802      	ldr	r0, [sp, #8]
 8118480:	4621      	mov	r1, r4
 8118482:	f103 3bff 	add.w	fp, r3, #4294967295
 8118486:	f7ff fa89 	bl	811799c <quorem>
 811848a:	4603      	mov	r3, r0
 811848c:	3330      	adds	r3, #48	@ 0x30
 811848e:	9003      	str	r0, [sp, #12]
 8118490:	4639      	mov	r1, r7
 8118492:	9802      	ldr	r0, [sp, #8]
 8118494:	9309      	str	r3, [sp, #36]	@ 0x24
 8118496:	f000 fc97 	bl	8118dc8 <__mcmp>
 811849a:	462a      	mov	r2, r5
 811849c:	9004      	str	r0, [sp, #16]
 811849e:	4621      	mov	r1, r4
 81184a0:	4648      	mov	r0, r9
 81184a2:	f000 fcad 	bl	8118e00 <__mdiff>
 81184a6:	68c2      	ldr	r2, [r0, #12]
 81184a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81184aa:	4606      	mov	r6, r0
 81184ac:	bb02      	cbnz	r2, 81184f0 <_dtoa_r+0xa40>
 81184ae:	4601      	mov	r1, r0
 81184b0:	9802      	ldr	r0, [sp, #8]
 81184b2:	f000 fc89 	bl	8118dc8 <__mcmp>
 81184b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81184b8:	4602      	mov	r2, r0
 81184ba:	4631      	mov	r1, r6
 81184bc:	4648      	mov	r0, r9
 81184be:	920c      	str	r2, [sp, #48]	@ 0x30
 81184c0:	9309      	str	r3, [sp, #36]	@ 0x24
 81184c2:	f000 fa05 	bl	81188d0 <_Bfree>
 81184c6:	9b07      	ldr	r3, [sp, #28]
 81184c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 81184ca:	9e00      	ldr	r6, [sp, #0]
 81184cc:	ea42 0103 	orr.w	r1, r2, r3
 81184d0:	9b06      	ldr	r3, [sp, #24]
 81184d2:	4319      	orrs	r1, r3
 81184d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81184d6:	d10d      	bne.n	81184f4 <_dtoa_r+0xa44>
 81184d8:	2b39      	cmp	r3, #57	@ 0x39
 81184da:	d027      	beq.n	811852c <_dtoa_r+0xa7c>
 81184dc:	9a04      	ldr	r2, [sp, #16]
 81184de:	2a00      	cmp	r2, #0
 81184e0:	dd01      	ble.n	81184e6 <_dtoa_r+0xa36>
 81184e2:	9b03      	ldr	r3, [sp, #12]
 81184e4:	3331      	adds	r3, #49	@ 0x31
 81184e6:	f88b 3000 	strb.w	r3, [fp]
 81184ea:	e52e      	b.n	8117f4a <_dtoa_r+0x49a>
 81184ec:	4628      	mov	r0, r5
 81184ee:	e7b9      	b.n	8118464 <_dtoa_r+0x9b4>
 81184f0:	2201      	movs	r2, #1
 81184f2:	e7e2      	b.n	81184ba <_dtoa_r+0xa0a>
 81184f4:	9904      	ldr	r1, [sp, #16]
 81184f6:	2900      	cmp	r1, #0
 81184f8:	db04      	blt.n	8118504 <_dtoa_r+0xa54>
 81184fa:	9807      	ldr	r0, [sp, #28]
 81184fc:	4301      	orrs	r1, r0
 81184fe:	9806      	ldr	r0, [sp, #24]
 8118500:	4301      	orrs	r1, r0
 8118502:	d120      	bne.n	8118546 <_dtoa_r+0xa96>
 8118504:	2a00      	cmp	r2, #0
 8118506:	ddee      	ble.n	81184e6 <_dtoa_r+0xa36>
 8118508:	9902      	ldr	r1, [sp, #8]
 811850a:	9300      	str	r3, [sp, #0]
 811850c:	2201      	movs	r2, #1
 811850e:	4648      	mov	r0, r9
 8118510:	f000 fbee 	bl	8118cf0 <__lshift>
 8118514:	4621      	mov	r1, r4
 8118516:	9002      	str	r0, [sp, #8]
 8118518:	f000 fc56 	bl	8118dc8 <__mcmp>
 811851c:	2800      	cmp	r0, #0
 811851e:	9b00      	ldr	r3, [sp, #0]
 8118520:	dc02      	bgt.n	8118528 <_dtoa_r+0xa78>
 8118522:	d1e0      	bne.n	81184e6 <_dtoa_r+0xa36>
 8118524:	07da      	lsls	r2, r3, #31
 8118526:	d5de      	bpl.n	81184e6 <_dtoa_r+0xa36>
 8118528:	2b39      	cmp	r3, #57	@ 0x39
 811852a:	d1da      	bne.n	81184e2 <_dtoa_r+0xa32>
 811852c:	2339      	movs	r3, #57	@ 0x39
 811852e:	f88b 3000 	strb.w	r3, [fp]
 8118532:	4633      	mov	r3, r6
 8118534:	461e      	mov	r6, r3
 8118536:	3b01      	subs	r3, #1
 8118538:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 811853c:	2a39      	cmp	r2, #57	@ 0x39
 811853e:	d04e      	beq.n	81185de <_dtoa_r+0xb2e>
 8118540:	3201      	adds	r2, #1
 8118542:	701a      	strb	r2, [r3, #0]
 8118544:	e501      	b.n	8117f4a <_dtoa_r+0x49a>
 8118546:	2a00      	cmp	r2, #0
 8118548:	dd03      	ble.n	8118552 <_dtoa_r+0xaa2>
 811854a:	2b39      	cmp	r3, #57	@ 0x39
 811854c:	d0ee      	beq.n	811852c <_dtoa_r+0xa7c>
 811854e:	3301      	adds	r3, #1
 8118550:	e7c9      	b.n	81184e6 <_dtoa_r+0xa36>
 8118552:	9a00      	ldr	r2, [sp, #0]
 8118554:	9908      	ldr	r1, [sp, #32]
 8118556:	f802 3c01 	strb.w	r3, [r2, #-1]
 811855a:	428a      	cmp	r2, r1
 811855c:	d028      	beq.n	81185b0 <_dtoa_r+0xb00>
 811855e:	9902      	ldr	r1, [sp, #8]
 8118560:	2300      	movs	r3, #0
 8118562:	220a      	movs	r2, #10
 8118564:	4648      	mov	r0, r9
 8118566:	f000 f9d5 	bl	8118914 <__multadd>
 811856a:	42af      	cmp	r7, r5
 811856c:	9002      	str	r0, [sp, #8]
 811856e:	f04f 0300 	mov.w	r3, #0
 8118572:	f04f 020a 	mov.w	r2, #10
 8118576:	4639      	mov	r1, r7
 8118578:	4648      	mov	r0, r9
 811857a:	d107      	bne.n	811858c <_dtoa_r+0xadc>
 811857c:	f000 f9ca 	bl	8118914 <__multadd>
 8118580:	4607      	mov	r7, r0
 8118582:	4605      	mov	r5, r0
 8118584:	9b00      	ldr	r3, [sp, #0]
 8118586:	3301      	adds	r3, #1
 8118588:	9300      	str	r3, [sp, #0]
 811858a:	e777      	b.n	811847c <_dtoa_r+0x9cc>
 811858c:	f000 f9c2 	bl	8118914 <__multadd>
 8118590:	4629      	mov	r1, r5
 8118592:	4607      	mov	r7, r0
 8118594:	2300      	movs	r3, #0
 8118596:	220a      	movs	r2, #10
 8118598:	4648      	mov	r0, r9
 811859a:	f000 f9bb 	bl	8118914 <__multadd>
 811859e:	4605      	mov	r5, r0
 81185a0:	e7f0      	b.n	8118584 <_dtoa_r+0xad4>
 81185a2:	f1bb 0f00 	cmp.w	fp, #0
 81185a6:	bfcc      	ite	gt
 81185a8:	465e      	movgt	r6, fp
 81185aa:	2601      	movle	r6, #1
 81185ac:	4456      	add	r6, sl
 81185ae:	2700      	movs	r7, #0
 81185b0:	9902      	ldr	r1, [sp, #8]
 81185b2:	9300      	str	r3, [sp, #0]
 81185b4:	2201      	movs	r2, #1
 81185b6:	4648      	mov	r0, r9
 81185b8:	f000 fb9a 	bl	8118cf0 <__lshift>
 81185bc:	4621      	mov	r1, r4
 81185be:	9002      	str	r0, [sp, #8]
 81185c0:	f000 fc02 	bl	8118dc8 <__mcmp>
 81185c4:	2800      	cmp	r0, #0
 81185c6:	dcb4      	bgt.n	8118532 <_dtoa_r+0xa82>
 81185c8:	d102      	bne.n	81185d0 <_dtoa_r+0xb20>
 81185ca:	9b00      	ldr	r3, [sp, #0]
 81185cc:	07db      	lsls	r3, r3, #31
 81185ce:	d4b0      	bmi.n	8118532 <_dtoa_r+0xa82>
 81185d0:	4633      	mov	r3, r6
 81185d2:	461e      	mov	r6, r3
 81185d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81185d8:	2a30      	cmp	r2, #48	@ 0x30
 81185da:	d0fa      	beq.n	81185d2 <_dtoa_r+0xb22>
 81185dc:	e4b5      	b.n	8117f4a <_dtoa_r+0x49a>
 81185de:	459a      	cmp	sl, r3
 81185e0:	d1a8      	bne.n	8118534 <_dtoa_r+0xa84>
 81185e2:	2331      	movs	r3, #49	@ 0x31
 81185e4:	f108 0801 	add.w	r8, r8, #1
 81185e8:	f88a 3000 	strb.w	r3, [sl]
 81185ec:	e4ad      	b.n	8117f4a <_dtoa_r+0x49a>
 81185ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 81185f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 811864c <_dtoa_r+0xb9c>
 81185f4:	b11b      	cbz	r3, 81185fe <_dtoa_r+0xb4e>
 81185f6:	f10a 0308 	add.w	r3, sl, #8
 81185fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 81185fc:	6013      	str	r3, [r2, #0]
 81185fe:	4650      	mov	r0, sl
 8118600:	b017      	add	sp, #92	@ 0x5c
 8118602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8118606:	9b07      	ldr	r3, [sp, #28]
 8118608:	2b01      	cmp	r3, #1
 811860a:	f77f ae2e 	ble.w	811826a <_dtoa_r+0x7ba>
 811860e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8118610:	9308      	str	r3, [sp, #32]
 8118612:	2001      	movs	r0, #1
 8118614:	e64d      	b.n	81182b2 <_dtoa_r+0x802>
 8118616:	f1bb 0f00 	cmp.w	fp, #0
 811861a:	f77f aed9 	ble.w	81183d0 <_dtoa_r+0x920>
 811861e:	4656      	mov	r6, sl
 8118620:	9802      	ldr	r0, [sp, #8]
 8118622:	4621      	mov	r1, r4
 8118624:	f7ff f9ba 	bl	811799c <quorem>
 8118628:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 811862c:	f806 3b01 	strb.w	r3, [r6], #1
 8118630:	eba6 020a 	sub.w	r2, r6, sl
 8118634:	4593      	cmp	fp, r2
 8118636:	ddb4      	ble.n	81185a2 <_dtoa_r+0xaf2>
 8118638:	9902      	ldr	r1, [sp, #8]
 811863a:	2300      	movs	r3, #0
 811863c:	220a      	movs	r2, #10
 811863e:	4648      	mov	r0, r9
 8118640:	f000 f968 	bl	8118914 <__multadd>
 8118644:	9002      	str	r0, [sp, #8]
 8118646:	e7eb      	b.n	8118620 <_dtoa_r+0xb70>
 8118648:	0811f427 	.word	0x0811f427
 811864c:	0811f3c2 	.word	0x0811f3c2

08118650 <_free_r>:
 8118650:	b538      	push	{r3, r4, r5, lr}
 8118652:	4605      	mov	r5, r0
 8118654:	2900      	cmp	r1, #0
 8118656:	d041      	beq.n	81186dc <_free_r+0x8c>
 8118658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811865c:	1f0c      	subs	r4, r1, #4
 811865e:	2b00      	cmp	r3, #0
 8118660:	bfb8      	it	lt
 8118662:	18e4      	addlt	r4, r4, r3
 8118664:	f000 f8e8 	bl	8118838 <__malloc_lock>
 8118668:	4a1d      	ldr	r2, [pc, #116]	@ (81186e0 <_free_r+0x90>)
 811866a:	6813      	ldr	r3, [r2, #0]
 811866c:	b933      	cbnz	r3, 811867c <_free_r+0x2c>
 811866e:	6063      	str	r3, [r4, #4]
 8118670:	6014      	str	r4, [r2, #0]
 8118672:	4628      	mov	r0, r5
 8118674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8118678:	f000 b8e4 	b.w	8118844 <__malloc_unlock>
 811867c:	42a3      	cmp	r3, r4
 811867e:	d908      	bls.n	8118692 <_free_r+0x42>
 8118680:	6820      	ldr	r0, [r4, #0]
 8118682:	1821      	adds	r1, r4, r0
 8118684:	428b      	cmp	r3, r1
 8118686:	bf01      	itttt	eq
 8118688:	6819      	ldreq	r1, [r3, #0]
 811868a:	685b      	ldreq	r3, [r3, #4]
 811868c:	1809      	addeq	r1, r1, r0
 811868e:	6021      	streq	r1, [r4, #0]
 8118690:	e7ed      	b.n	811866e <_free_r+0x1e>
 8118692:	461a      	mov	r2, r3
 8118694:	685b      	ldr	r3, [r3, #4]
 8118696:	b10b      	cbz	r3, 811869c <_free_r+0x4c>
 8118698:	42a3      	cmp	r3, r4
 811869a:	d9fa      	bls.n	8118692 <_free_r+0x42>
 811869c:	6811      	ldr	r1, [r2, #0]
 811869e:	1850      	adds	r0, r2, r1
 81186a0:	42a0      	cmp	r0, r4
 81186a2:	d10b      	bne.n	81186bc <_free_r+0x6c>
 81186a4:	6820      	ldr	r0, [r4, #0]
 81186a6:	4401      	add	r1, r0
 81186a8:	1850      	adds	r0, r2, r1
 81186aa:	4283      	cmp	r3, r0
 81186ac:	6011      	str	r1, [r2, #0]
 81186ae:	d1e0      	bne.n	8118672 <_free_r+0x22>
 81186b0:	6818      	ldr	r0, [r3, #0]
 81186b2:	685b      	ldr	r3, [r3, #4]
 81186b4:	6053      	str	r3, [r2, #4]
 81186b6:	4408      	add	r0, r1
 81186b8:	6010      	str	r0, [r2, #0]
 81186ba:	e7da      	b.n	8118672 <_free_r+0x22>
 81186bc:	d902      	bls.n	81186c4 <_free_r+0x74>
 81186be:	230c      	movs	r3, #12
 81186c0:	602b      	str	r3, [r5, #0]
 81186c2:	e7d6      	b.n	8118672 <_free_r+0x22>
 81186c4:	6820      	ldr	r0, [r4, #0]
 81186c6:	1821      	adds	r1, r4, r0
 81186c8:	428b      	cmp	r3, r1
 81186ca:	bf04      	itt	eq
 81186cc:	6819      	ldreq	r1, [r3, #0]
 81186ce:	685b      	ldreq	r3, [r3, #4]
 81186d0:	6063      	str	r3, [r4, #4]
 81186d2:	bf04      	itt	eq
 81186d4:	1809      	addeq	r1, r1, r0
 81186d6:	6021      	streq	r1, [r4, #0]
 81186d8:	6054      	str	r4, [r2, #4]
 81186da:	e7ca      	b.n	8118672 <_free_r+0x22>
 81186dc:	bd38      	pop	{r3, r4, r5, pc}
 81186de:	bf00      	nop
 81186e0:	100178a0 	.word	0x100178a0

081186e4 <malloc>:
 81186e4:	4b02      	ldr	r3, [pc, #8]	@ (81186f0 <malloc+0xc>)
 81186e6:	4601      	mov	r1, r0
 81186e8:	6818      	ldr	r0, [r3, #0]
 81186ea:	f000 b825 	b.w	8118738 <_malloc_r>
 81186ee:	bf00      	nop
 81186f0:	100001d8 	.word	0x100001d8

081186f4 <sbrk_aligned>:
 81186f4:	b570      	push	{r4, r5, r6, lr}
 81186f6:	4e0f      	ldr	r6, [pc, #60]	@ (8118734 <sbrk_aligned+0x40>)
 81186f8:	460c      	mov	r4, r1
 81186fa:	6831      	ldr	r1, [r6, #0]
 81186fc:	4605      	mov	r5, r0
 81186fe:	b911      	cbnz	r1, 8118706 <sbrk_aligned+0x12>
 8118700:	f002 fafa 	bl	811acf8 <_sbrk_r>
 8118704:	6030      	str	r0, [r6, #0]
 8118706:	4621      	mov	r1, r4
 8118708:	4628      	mov	r0, r5
 811870a:	f002 faf5 	bl	811acf8 <_sbrk_r>
 811870e:	1c43      	adds	r3, r0, #1
 8118710:	d103      	bne.n	811871a <sbrk_aligned+0x26>
 8118712:	f04f 34ff 	mov.w	r4, #4294967295
 8118716:	4620      	mov	r0, r4
 8118718:	bd70      	pop	{r4, r5, r6, pc}
 811871a:	1cc4      	adds	r4, r0, #3
 811871c:	f024 0403 	bic.w	r4, r4, #3
 8118720:	42a0      	cmp	r0, r4
 8118722:	d0f8      	beq.n	8118716 <sbrk_aligned+0x22>
 8118724:	1a21      	subs	r1, r4, r0
 8118726:	4628      	mov	r0, r5
 8118728:	f002 fae6 	bl	811acf8 <_sbrk_r>
 811872c:	3001      	adds	r0, #1
 811872e:	d1f2      	bne.n	8118716 <sbrk_aligned+0x22>
 8118730:	e7ef      	b.n	8118712 <sbrk_aligned+0x1e>
 8118732:	bf00      	nop
 8118734:	1001789c 	.word	0x1001789c

08118738 <_malloc_r>:
 8118738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811873c:	1ccd      	adds	r5, r1, #3
 811873e:	f025 0503 	bic.w	r5, r5, #3
 8118742:	3508      	adds	r5, #8
 8118744:	2d0c      	cmp	r5, #12
 8118746:	bf38      	it	cc
 8118748:	250c      	movcc	r5, #12
 811874a:	2d00      	cmp	r5, #0
 811874c:	4606      	mov	r6, r0
 811874e:	db01      	blt.n	8118754 <_malloc_r+0x1c>
 8118750:	42a9      	cmp	r1, r5
 8118752:	d904      	bls.n	811875e <_malloc_r+0x26>
 8118754:	230c      	movs	r3, #12
 8118756:	6033      	str	r3, [r6, #0]
 8118758:	2000      	movs	r0, #0
 811875a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811875e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8118834 <_malloc_r+0xfc>
 8118762:	f000 f869 	bl	8118838 <__malloc_lock>
 8118766:	f8d8 3000 	ldr.w	r3, [r8]
 811876a:	461c      	mov	r4, r3
 811876c:	bb44      	cbnz	r4, 81187c0 <_malloc_r+0x88>
 811876e:	4629      	mov	r1, r5
 8118770:	4630      	mov	r0, r6
 8118772:	f7ff ffbf 	bl	81186f4 <sbrk_aligned>
 8118776:	1c43      	adds	r3, r0, #1
 8118778:	4604      	mov	r4, r0
 811877a:	d158      	bne.n	811882e <_malloc_r+0xf6>
 811877c:	f8d8 4000 	ldr.w	r4, [r8]
 8118780:	4627      	mov	r7, r4
 8118782:	2f00      	cmp	r7, #0
 8118784:	d143      	bne.n	811880e <_malloc_r+0xd6>
 8118786:	2c00      	cmp	r4, #0
 8118788:	d04b      	beq.n	8118822 <_malloc_r+0xea>
 811878a:	6823      	ldr	r3, [r4, #0]
 811878c:	4639      	mov	r1, r7
 811878e:	4630      	mov	r0, r6
 8118790:	eb04 0903 	add.w	r9, r4, r3
 8118794:	f002 fab0 	bl	811acf8 <_sbrk_r>
 8118798:	4581      	cmp	r9, r0
 811879a:	d142      	bne.n	8118822 <_malloc_r+0xea>
 811879c:	6821      	ldr	r1, [r4, #0]
 811879e:	1a6d      	subs	r5, r5, r1
 81187a0:	4629      	mov	r1, r5
 81187a2:	4630      	mov	r0, r6
 81187a4:	f7ff ffa6 	bl	81186f4 <sbrk_aligned>
 81187a8:	3001      	adds	r0, #1
 81187aa:	d03a      	beq.n	8118822 <_malloc_r+0xea>
 81187ac:	6823      	ldr	r3, [r4, #0]
 81187ae:	442b      	add	r3, r5
 81187b0:	6023      	str	r3, [r4, #0]
 81187b2:	f8d8 3000 	ldr.w	r3, [r8]
 81187b6:	685a      	ldr	r2, [r3, #4]
 81187b8:	bb62      	cbnz	r2, 8118814 <_malloc_r+0xdc>
 81187ba:	f8c8 7000 	str.w	r7, [r8]
 81187be:	e00f      	b.n	81187e0 <_malloc_r+0xa8>
 81187c0:	6822      	ldr	r2, [r4, #0]
 81187c2:	1b52      	subs	r2, r2, r5
 81187c4:	d420      	bmi.n	8118808 <_malloc_r+0xd0>
 81187c6:	2a0b      	cmp	r2, #11
 81187c8:	d917      	bls.n	81187fa <_malloc_r+0xc2>
 81187ca:	1961      	adds	r1, r4, r5
 81187cc:	42a3      	cmp	r3, r4
 81187ce:	6025      	str	r5, [r4, #0]
 81187d0:	bf18      	it	ne
 81187d2:	6059      	strne	r1, [r3, #4]
 81187d4:	6863      	ldr	r3, [r4, #4]
 81187d6:	bf08      	it	eq
 81187d8:	f8c8 1000 	streq.w	r1, [r8]
 81187dc:	5162      	str	r2, [r4, r5]
 81187de:	604b      	str	r3, [r1, #4]
 81187e0:	4630      	mov	r0, r6
 81187e2:	f000 f82f 	bl	8118844 <__malloc_unlock>
 81187e6:	f104 000b 	add.w	r0, r4, #11
 81187ea:	1d23      	adds	r3, r4, #4
 81187ec:	f020 0007 	bic.w	r0, r0, #7
 81187f0:	1ac2      	subs	r2, r0, r3
 81187f2:	bf1c      	itt	ne
 81187f4:	1a1b      	subne	r3, r3, r0
 81187f6:	50a3      	strne	r3, [r4, r2]
 81187f8:	e7af      	b.n	811875a <_malloc_r+0x22>
 81187fa:	6862      	ldr	r2, [r4, #4]
 81187fc:	42a3      	cmp	r3, r4
 81187fe:	bf0c      	ite	eq
 8118800:	f8c8 2000 	streq.w	r2, [r8]
 8118804:	605a      	strne	r2, [r3, #4]
 8118806:	e7eb      	b.n	81187e0 <_malloc_r+0xa8>
 8118808:	4623      	mov	r3, r4
 811880a:	6864      	ldr	r4, [r4, #4]
 811880c:	e7ae      	b.n	811876c <_malloc_r+0x34>
 811880e:	463c      	mov	r4, r7
 8118810:	687f      	ldr	r7, [r7, #4]
 8118812:	e7b6      	b.n	8118782 <_malloc_r+0x4a>
 8118814:	461a      	mov	r2, r3
 8118816:	685b      	ldr	r3, [r3, #4]
 8118818:	42a3      	cmp	r3, r4
 811881a:	d1fb      	bne.n	8118814 <_malloc_r+0xdc>
 811881c:	2300      	movs	r3, #0
 811881e:	6053      	str	r3, [r2, #4]
 8118820:	e7de      	b.n	81187e0 <_malloc_r+0xa8>
 8118822:	230c      	movs	r3, #12
 8118824:	6033      	str	r3, [r6, #0]
 8118826:	4630      	mov	r0, r6
 8118828:	f000 f80c 	bl	8118844 <__malloc_unlock>
 811882c:	e794      	b.n	8118758 <_malloc_r+0x20>
 811882e:	6005      	str	r5, [r0, #0]
 8118830:	e7d6      	b.n	81187e0 <_malloc_r+0xa8>
 8118832:	bf00      	nop
 8118834:	100178a0 	.word	0x100178a0

08118838 <__malloc_lock>:
 8118838:	4801      	ldr	r0, [pc, #4]	@ (8118840 <__malloc_lock+0x8>)
 811883a:	f7ff b87a 	b.w	8117932 <__retarget_lock_acquire_recursive>
 811883e:	bf00      	nop
 8118840:	10017898 	.word	0x10017898

08118844 <__malloc_unlock>:
 8118844:	4801      	ldr	r0, [pc, #4]	@ (811884c <__malloc_unlock+0x8>)
 8118846:	f7ff b875 	b.w	8117934 <__retarget_lock_release_recursive>
 811884a:	bf00      	nop
 811884c:	10017898 	.word	0x10017898

08118850 <_Balloc>:
 8118850:	b570      	push	{r4, r5, r6, lr}
 8118852:	69c6      	ldr	r6, [r0, #28]
 8118854:	4604      	mov	r4, r0
 8118856:	460d      	mov	r5, r1
 8118858:	b976      	cbnz	r6, 8118878 <_Balloc+0x28>
 811885a:	2010      	movs	r0, #16
 811885c:	f7ff ff42 	bl	81186e4 <malloc>
 8118860:	4602      	mov	r2, r0
 8118862:	61e0      	str	r0, [r4, #28]
 8118864:	b920      	cbnz	r0, 8118870 <_Balloc+0x20>
 8118866:	4b18      	ldr	r3, [pc, #96]	@ (81188c8 <_Balloc+0x78>)
 8118868:	4818      	ldr	r0, [pc, #96]	@ (81188cc <_Balloc+0x7c>)
 811886a:	216b      	movs	r1, #107	@ 0x6b
 811886c:	f7ff f878 	bl	8117960 <__assert_func>
 8118870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8118874:	6006      	str	r6, [r0, #0]
 8118876:	60c6      	str	r6, [r0, #12]
 8118878:	69e6      	ldr	r6, [r4, #28]
 811887a:	68f3      	ldr	r3, [r6, #12]
 811887c:	b183      	cbz	r3, 81188a0 <_Balloc+0x50>
 811887e:	69e3      	ldr	r3, [r4, #28]
 8118880:	68db      	ldr	r3, [r3, #12]
 8118882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8118886:	b9b8      	cbnz	r0, 81188b8 <_Balloc+0x68>
 8118888:	2101      	movs	r1, #1
 811888a:	fa01 f605 	lsl.w	r6, r1, r5
 811888e:	1d72      	adds	r2, r6, #5
 8118890:	0092      	lsls	r2, r2, #2
 8118892:	4620      	mov	r0, r4
 8118894:	f002 fa4f 	bl	811ad36 <_calloc_r>
 8118898:	b160      	cbz	r0, 81188b4 <_Balloc+0x64>
 811889a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 811889e:	e00e      	b.n	81188be <_Balloc+0x6e>
 81188a0:	2221      	movs	r2, #33	@ 0x21
 81188a2:	2104      	movs	r1, #4
 81188a4:	4620      	mov	r0, r4
 81188a6:	f002 fa46 	bl	811ad36 <_calloc_r>
 81188aa:	69e3      	ldr	r3, [r4, #28]
 81188ac:	60f0      	str	r0, [r6, #12]
 81188ae:	68db      	ldr	r3, [r3, #12]
 81188b0:	2b00      	cmp	r3, #0
 81188b2:	d1e4      	bne.n	811887e <_Balloc+0x2e>
 81188b4:	2000      	movs	r0, #0
 81188b6:	bd70      	pop	{r4, r5, r6, pc}
 81188b8:	6802      	ldr	r2, [r0, #0]
 81188ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81188be:	2300      	movs	r3, #0
 81188c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81188c4:	e7f7      	b.n	81188b6 <_Balloc+0x66>
 81188c6:	bf00      	nop
 81188c8:	0811f2e0 	.word	0x0811f2e0
 81188cc:	0811f438 	.word	0x0811f438

081188d0 <_Bfree>:
 81188d0:	b570      	push	{r4, r5, r6, lr}
 81188d2:	69c6      	ldr	r6, [r0, #28]
 81188d4:	4605      	mov	r5, r0
 81188d6:	460c      	mov	r4, r1
 81188d8:	b976      	cbnz	r6, 81188f8 <_Bfree+0x28>
 81188da:	2010      	movs	r0, #16
 81188dc:	f7ff ff02 	bl	81186e4 <malloc>
 81188e0:	4602      	mov	r2, r0
 81188e2:	61e8      	str	r0, [r5, #28]
 81188e4:	b920      	cbnz	r0, 81188f0 <_Bfree+0x20>
 81188e6:	4b09      	ldr	r3, [pc, #36]	@ (811890c <_Bfree+0x3c>)
 81188e8:	4809      	ldr	r0, [pc, #36]	@ (8118910 <_Bfree+0x40>)
 81188ea:	218f      	movs	r1, #143	@ 0x8f
 81188ec:	f7ff f838 	bl	8117960 <__assert_func>
 81188f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81188f4:	6006      	str	r6, [r0, #0]
 81188f6:	60c6      	str	r6, [r0, #12]
 81188f8:	b13c      	cbz	r4, 811890a <_Bfree+0x3a>
 81188fa:	69eb      	ldr	r3, [r5, #28]
 81188fc:	6862      	ldr	r2, [r4, #4]
 81188fe:	68db      	ldr	r3, [r3, #12]
 8118900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8118904:	6021      	str	r1, [r4, #0]
 8118906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 811890a:	bd70      	pop	{r4, r5, r6, pc}
 811890c:	0811f2e0 	.word	0x0811f2e0
 8118910:	0811f438 	.word	0x0811f438

08118914 <__multadd>:
 8118914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8118918:	690d      	ldr	r5, [r1, #16]
 811891a:	4607      	mov	r7, r0
 811891c:	460c      	mov	r4, r1
 811891e:	461e      	mov	r6, r3
 8118920:	f101 0c14 	add.w	ip, r1, #20
 8118924:	2000      	movs	r0, #0
 8118926:	f8dc 3000 	ldr.w	r3, [ip]
 811892a:	b299      	uxth	r1, r3
 811892c:	fb02 6101 	mla	r1, r2, r1, r6
 8118930:	0c1e      	lsrs	r6, r3, #16
 8118932:	0c0b      	lsrs	r3, r1, #16
 8118934:	fb02 3306 	mla	r3, r2, r6, r3
 8118938:	b289      	uxth	r1, r1
 811893a:	3001      	adds	r0, #1
 811893c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8118940:	4285      	cmp	r5, r0
 8118942:	f84c 1b04 	str.w	r1, [ip], #4
 8118946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 811894a:	dcec      	bgt.n	8118926 <__multadd+0x12>
 811894c:	b30e      	cbz	r6, 8118992 <__multadd+0x7e>
 811894e:	68a3      	ldr	r3, [r4, #8]
 8118950:	42ab      	cmp	r3, r5
 8118952:	dc19      	bgt.n	8118988 <__multadd+0x74>
 8118954:	6861      	ldr	r1, [r4, #4]
 8118956:	4638      	mov	r0, r7
 8118958:	3101      	adds	r1, #1
 811895a:	f7ff ff79 	bl	8118850 <_Balloc>
 811895e:	4680      	mov	r8, r0
 8118960:	b928      	cbnz	r0, 811896e <__multadd+0x5a>
 8118962:	4602      	mov	r2, r0
 8118964:	4b0c      	ldr	r3, [pc, #48]	@ (8118998 <__multadd+0x84>)
 8118966:	480d      	ldr	r0, [pc, #52]	@ (811899c <__multadd+0x88>)
 8118968:	21ba      	movs	r1, #186	@ 0xba
 811896a:	f7fe fff9 	bl	8117960 <__assert_func>
 811896e:	6922      	ldr	r2, [r4, #16]
 8118970:	3202      	adds	r2, #2
 8118972:	f104 010c 	add.w	r1, r4, #12
 8118976:	0092      	lsls	r2, r2, #2
 8118978:	300c      	adds	r0, #12
 811897a:	f7fe ffdc 	bl	8117936 <memcpy>
 811897e:	4621      	mov	r1, r4
 8118980:	4638      	mov	r0, r7
 8118982:	f7ff ffa5 	bl	81188d0 <_Bfree>
 8118986:	4644      	mov	r4, r8
 8118988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 811898c:	3501      	adds	r5, #1
 811898e:	615e      	str	r6, [r3, #20]
 8118990:	6125      	str	r5, [r4, #16]
 8118992:	4620      	mov	r0, r4
 8118994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8118998:	0811f427 	.word	0x0811f427
 811899c:	0811f438 	.word	0x0811f438

081189a0 <__s2b>:
 81189a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81189a4:	460c      	mov	r4, r1
 81189a6:	4615      	mov	r5, r2
 81189a8:	461f      	mov	r7, r3
 81189aa:	2209      	movs	r2, #9
 81189ac:	3308      	adds	r3, #8
 81189ae:	4606      	mov	r6, r0
 81189b0:	fb93 f3f2 	sdiv	r3, r3, r2
 81189b4:	2100      	movs	r1, #0
 81189b6:	2201      	movs	r2, #1
 81189b8:	429a      	cmp	r2, r3
 81189ba:	db09      	blt.n	81189d0 <__s2b+0x30>
 81189bc:	4630      	mov	r0, r6
 81189be:	f7ff ff47 	bl	8118850 <_Balloc>
 81189c2:	b940      	cbnz	r0, 81189d6 <__s2b+0x36>
 81189c4:	4602      	mov	r2, r0
 81189c6:	4b19      	ldr	r3, [pc, #100]	@ (8118a2c <__s2b+0x8c>)
 81189c8:	4819      	ldr	r0, [pc, #100]	@ (8118a30 <__s2b+0x90>)
 81189ca:	21d3      	movs	r1, #211	@ 0xd3
 81189cc:	f7fe ffc8 	bl	8117960 <__assert_func>
 81189d0:	0052      	lsls	r2, r2, #1
 81189d2:	3101      	adds	r1, #1
 81189d4:	e7f0      	b.n	81189b8 <__s2b+0x18>
 81189d6:	9b08      	ldr	r3, [sp, #32]
 81189d8:	6143      	str	r3, [r0, #20]
 81189da:	2d09      	cmp	r5, #9
 81189dc:	f04f 0301 	mov.w	r3, #1
 81189e0:	6103      	str	r3, [r0, #16]
 81189e2:	dd16      	ble.n	8118a12 <__s2b+0x72>
 81189e4:	f104 0909 	add.w	r9, r4, #9
 81189e8:	46c8      	mov	r8, r9
 81189ea:	442c      	add	r4, r5
 81189ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 81189f0:	4601      	mov	r1, r0
 81189f2:	3b30      	subs	r3, #48	@ 0x30
 81189f4:	220a      	movs	r2, #10
 81189f6:	4630      	mov	r0, r6
 81189f8:	f7ff ff8c 	bl	8118914 <__multadd>
 81189fc:	45a0      	cmp	r8, r4
 81189fe:	d1f5      	bne.n	81189ec <__s2b+0x4c>
 8118a00:	f1a5 0408 	sub.w	r4, r5, #8
 8118a04:	444c      	add	r4, r9
 8118a06:	1b2d      	subs	r5, r5, r4
 8118a08:	1963      	adds	r3, r4, r5
 8118a0a:	42bb      	cmp	r3, r7
 8118a0c:	db04      	blt.n	8118a18 <__s2b+0x78>
 8118a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8118a12:	340a      	adds	r4, #10
 8118a14:	2509      	movs	r5, #9
 8118a16:	e7f6      	b.n	8118a06 <__s2b+0x66>
 8118a18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8118a1c:	4601      	mov	r1, r0
 8118a1e:	3b30      	subs	r3, #48	@ 0x30
 8118a20:	220a      	movs	r2, #10
 8118a22:	4630      	mov	r0, r6
 8118a24:	f7ff ff76 	bl	8118914 <__multadd>
 8118a28:	e7ee      	b.n	8118a08 <__s2b+0x68>
 8118a2a:	bf00      	nop
 8118a2c:	0811f427 	.word	0x0811f427
 8118a30:	0811f438 	.word	0x0811f438

08118a34 <__hi0bits>:
 8118a34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8118a38:	4603      	mov	r3, r0
 8118a3a:	bf36      	itet	cc
 8118a3c:	0403      	lslcc	r3, r0, #16
 8118a3e:	2000      	movcs	r0, #0
 8118a40:	2010      	movcc	r0, #16
 8118a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8118a46:	bf3c      	itt	cc
 8118a48:	021b      	lslcc	r3, r3, #8
 8118a4a:	3008      	addcc	r0, #8
 8118a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8118a50:	bf3c      	itt	cc
 8118a52:	011b      	lslcc	r3, r3, #4
 8118a54:	3004      	addcc	r0, #4
 8118a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8118a5a:	bf3c      	itt	cc
 8118a5c:	009b      	lslcc	r3, r3, #2
 8118a5e:	3002      	addcc	r0, #2
 8118a60:	2b00      	cmp	r3, #0
 8118a62:	db05      	blt.n	8118a70 <__hi0bits+0x3c>
 8118a64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8118a68:	f100 0001 	add.w	r0, r0, #1
 8118a6c:	bf08      	it	eq
 8118a6e:	2020      	moveq	r0, #32
 8118a70:	4770      	bx	lr

08118a72 <__lo0bits>:
 8118a72:	6803      	ldr	r3, [r0, #0]
 8118a74:	4602      	mov	r2, r0
 8118a76:	f013 0007 	ands.w	r0, r3, #7
 8118a7a:	d00b      	beq.n	8118a94 <__lo0bits+0x22>
 8118a7c:	07d9      	lsls	r1, r3, #31
 8118a7e:	d421      	bmi.n	8118ac4 <__lo0bits+0x52>
 8118a80:	0798      	lsls	r0, r3, #30
 8118a82:	bf49      	itett	mi
 8118a84:	085b      	lsrmi	r3, r3, #1
 8118a86:	089b      	lsrpl	r3, r3, #2
 8118a88:	2001      	movmi	r0, #1
 8118a8a:	6013      	strmi	r3, [r2, #0]
 8118a8c:	bf5c      	itt	pl
 8118a8e:	6013      	strpl	r3, [r2, #0]
 8118a90:	2002      	movpl	r0, #2
 8118a92:	4770      	bx	lr
 8118a94:	b299      	uxth	r1, r3
 8118a96:	b909      	cbnz	r1, 8118a9c <__lo0bits+0x2a>
 8118a98:	0c1b      	lsrs	r3, r3, #16
 8118a9a:	2010      	movs	r0, #16
 8118a9c:	b2d9      	uxtb	r1, r3
 8118a9e:	b909      	cbnz	r1, 8118aa4 <__lo0bits+0x32>
 8118aa0:	3008      	adds	r0, #8
 8118aa2:	0a1b      	lsrs	r3, r3, #8
 8118aa4:	0719      	lsls	r1, r3, #28
 8118aa6:	bf04      	itt	eq
 8118aa8:	091b      	lsreq	r3, r3, #4
 8118aaa:	3004      	addeq	r0, #4
 8118aac:	0799      	lsls	r1, r3, #30
 8118aae:	bf04      	itt	eq
 8118ab0:	089b      	lsreq	r3, r3, #2
 8118ab2:	3002      	addeq	r0, #2
 8118ab4:	07d9      	lsls	r1, r3, #31
 8118ab6:	d403      	bmi.n	8118ac0 <__lo0bits+0x4e>
 8118ab8:	085b      	lsrs	r3, r3, #1
 8118aba:	f100 0001 	add.w	r0, r0, #1
 8118abe:	d003      	beq.n	8118ac8 <__lo0bits+0x56>
 8118ac0:	6013      	str	r3, [r2, #0]
 8118ac2:	4770      	bx	lr
 8118ac4:	2000      	movs	r0, #0
 8118ac6:	4770      	bx	lr
 8118ac8:	2020      	movs	r0, #32
 8118aca:	4770      	bx	lr

08118acc <__i2b>:
 8118acc:	b510      	push	{r4, lr}
 8118ace:	460c      	mov	r4, r1
 8118ad0:	2101      	movs	r1, #1
 8118ad2:	f7ff febd 	bl	8118850 <_Balloc>
 8118ad6:	4602      	mov	r2, r0
 8118ad8:	b928      	cbnz	r0, 8118ae6 <__i2b+0x1a>
 8118ada:	4b05      	ldr	r3, [pc, #20]	@ (8118af0 <__i2b+0x24>)
 8118adc:	4805      	ldr	r0, [pc, #20]	@ (8118af4 <__i2b+0x28>)
 8118ade:	f240 1145 	movw	r1, #325	@ 0x145
 8118ae2:	f7fe ff3d 	bl	8117960 <__assert_func>
 8118ae6:	2301      	movs	r3, #1
 8118ae8:	6144      	str	r4, [r0, #20]
 8118aea:	6103      	str	r3, [r0, #16]
 8118aec:	bd10      	pop	{r4, pc}
 8118aee:	bf00      	nop
 8118af0:	0811f427 	.word	0x0811f427
 8118af4:	0811f438 	.word	0x0811f438

08118af8 <__multiply>:
 8118af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8118afc:	4617      	mov	r7, r2
 8118afe:	690a      	ldr	r2, [r1, #16]
 8118b00:	693b      	ldr	r3, [r7, #16]
 8118b02:	429a      	cmp	r2, r3
 8118b04:	bfa8      	it	ge
 8118b06:	463b      	movge	r3, r7
 8118b08:	4689      	mov	r9, r1
 8118b0a:	bfa4      	itt	ge
 8118b0c:	460f      	movge	r7, r1
 8118b0e:	4699      	movge	r9, r3
 8118b10:	693d      	ldr	r5, [r7, #16]
 8118b12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8118b16:	68bb      	ldr	r3, [r7, #8]
 8118b18:	6879      	ldr	r1, [r7, #4]
 8118b1a:	eb05 060a 	add.w	r6, r5, sl
 8118b1e:	42b3      	cmp	r3, r6
 8118b20:	b085      	sub	sp, #20
 8118b22:	bfb8      	it	lt
 8118b24:	3101      	addlt	r1, #1
 8118b26:	f7ff fe93 	bl	8118850 <_Balloc>
 8118b2a:	b930      	cbnz	r0, 8118b3a <__multiply+0x42>
 8118b2c:	4602      	mov	r2, r0
 8118b2e:	4b41      	ldr	r3, [pc, #260]	@ (8118c34 <__multiply+0x13c>)
 8118b30:	4841      	ldr	r0, [pc, #260]	@ (8118c38 <__multiply+0x140>)
 8118b32:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8118b36:	f7fe ff13 	bl	8117960 <__assert_func>
 8118b3a:	f100 0414 	add.w	r4, r0, #20
 8118b3e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8118b42:	4623      	mov	r3, r4
 8118b44:	2200      	movs	r2, #0
 8118b46:	4573      	cmp	r3, lr
 8118b48:	d320      	bcc.n	8118b8c <__multiply+0x94>
 8118b4a:	f107 0814 	add.w	r8, r7, #20
 8118b4e:	f109 0114 	add.w	r1, r9, #20
 8118b52:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8118b56:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8118b5a:	9302      	str	r3, [sp, #8]
 8118b5c:	1beb      	subs	r3, r5, r7
 8118b5e:	3b15      	subs	r3, #21
 8118b60:	f023 0303 	bic.w	r3, r3, #3
 8118b64:	3304      	adds	r3, #4
 8118b66:	3715      	adds	r7, #21
 8118b68:	42bd      	cmp	r5, r7
 8118b6a:	bf38      	it	cc
 8118b6c:	2304      	movcc	r3, #4
 8118b6e:	9301      	str	r3, [sp, #4]
 8118b70:	9b02      	ldr	r3, [sp, #8]
 8118b72:	9103      	str	r1, [sp, #12]
 8118b74:	428b      	cmp	r3, r1
 8118b76:	d80c      	bhi.n	8118b92 <__multiply+0x9a>
 8118b78:	2e00      	cmp	r6, #0
 8118b7a:	dd03      	ble.n	8118b84 <__multiply+0x8c>
 8118b7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8118b80:	2b00      	cmp	r3, #0
 8118b82:	d055      	beq.n	8118c30 <__multiply+0x138>
 8118b84:	6106      	str	r6, [r0, #16]
 8118b86:	b005      	add	sp, #20
 8118b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8118b8c:	f843 2b04 	str.w	r2, [r3], #4
 8118b90:	e7d9      	b.n	8118b46 <__multiply+0x4e>
 8118b92:	f8b1 a000 	ldrh.w	sl, [r1]
 8118b96:	f1ba 0f00 	cmp.w	sl, #0
 8118b9a:	d01f      	beq.n	8118bdc <__multiply+0xe4>
 8118b9c:	46c4      	mov	ip, r8
 8118b9e:	46a1      	mov	r9, r4
 8118ba0:	2700      	movs	r7, #0
 8118ba2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8118ba6:	f8d9 3000 	ldr.w	r3, [r9]
 8118baa:	fa1f fb82 	uxth.w	fp, r2
 8118bae:	b29b      	uxth	r3, r3
 8118bb0:	fb0a 330b 	mla	r3, sl, fp, r3
 8118bb4:	443b      	add	r3, r7
 8118bb6:	f8d9 7000 	ldr.w	r7, [r9]
 8118bba:	0c12      	lsrs	r2, r2, #16
 8118bbc:	0c3f      	lsrs	r7, r7, #16
 8118bbe:	fb0a 7202 	mla	r2, sl, r2, r7
 8118bc2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8118bc6:	b29b      	uxth	r3, r3
 8118bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8118bcc:	4565      	cmp	r5, ip
 8118bce:	f849 3b04 	str.w	r3, [r9], #4
 8118bd2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8118bd6:	d8e4      	bhi.n	8118ba2 <__multiply+0xaa>
 8118bd8:	9b01      	ldr	r3, [sp, #4]
 8118bda:	50e7      	str	r7, [r4, r3]
 8118bdc:	9b03      	ldr	r3, [sp, #12]
 8118bde:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8118be2:	3104      	adds	r1, #4
 8118be4:	f1b9 0f00 	cmp.w	r9, #0
 8118be8:	d020      	beq.n	8118c2c <__multiply+0x134>
 8118bea:	6823      	ldr	r3, [r4, #0]
 8118bec:	4647      	mov	r7, r8
 8118bee:	46a4      	mov	ip, r4
 8118bf0:	f04f 0a00 	mov.w	sl, #0
 8118bf4:	f8b7 b000 	ldrh.w	fp, [r7]
 8118bf8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8118bfc:	fb09 220b 	mla	r2, r9, fp, r2
 8118c00:	4452      	add	r2, sl
 8118c02:	b29b      	uxth	r3, r3
 8118c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8118c08:	f84c 3b04 	str.w	r3, [ip], #4
 8118c0c:	f857 3b04 	ldr.w	r3, [r7], #4
 8118c10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8118c14:	f8bc 3000 	ldrh.w	r3, [ip]
 8118c18:	fb09 330a 	mla	r3, r9, sl, r3
 8118c1c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8118c20:	42bd      	cmp	r5, r7
 8118c22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8118c26:	d8e5      	bhi.n	8118bf4 <__multiply+0xfc>
 8118c28:	9a01      	ldr	r2, [sp, #4]
 8118c2a:	50a3      	str	r3, [r4, r2]
 8118c2c:	3404      	adds	r4, #4
 8118c2e:	e79f      	b.n	8118b70 <__multiply+0x78>
 8118c30:	3e01      	subs	r6, #1
 8118c32:	e7a1      	b.n	8118b78 <__multiply+0x80>
 8118c34:	0811f427 	.word	0x0811f427
 8118c38:	0811f438 	.word	0x0811f438

08118c3c <__pow5mult>:
 8118c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8118c40:	4615      	mov	r5, r2
 8118c42:	f012 0203 	ands.w	r2, r2, #3
 8118c46:	4607      	mov	r7, r0
 8118c48:	460e      	mov	r6, r1
 8118c4a:	d007      	beq.n	8118c5c <__pow5mult+0x20>
 8118c4c:	4c25      	ldr	r4, [pc, #148]	@ (8118ce4 <__pow5mult+0xa8>)
 8118c4e:	3a01      	subs	r2, #1
 8118c50:	2300      	movs	r3, #0
 8118c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8118c56:	f7ff fe5d 	bl	8118914 <__multadd>
 8118c5a:	4606      	mov	r6, r0
 8118c5c:	10ad      	asrs	r5, r5, #2
 8118c5e:	d03d      	beq.n	8118cdc <__pow5mult+0xa0>
 8118c60:	69fc      	ldr	r4, [r7, #28]
 8118c62:	b97c      	cbnz	r4, 8118c84 <__pow5mult+0x48>
 8118c64:	2010      	movs	r0, #16
 8118c66:	f7ff fd3d 	bl	81186e4 <malloc>
 8118c6a:	4602      	mov	r2, r0
 8118c6c:	61f8      	str	r0, [r7, #28]
 8118c6e:	b928      	cbnz	r0, 8118c7c <__pow5mult+0x40>
 8118c70:	4b1d      	ldr	r3, [pc, #116]	@ (8118ce8 <__pow5mult+0xac>)
 8118c72:	481e      	ldr	r0, [pc, #120]	@ (8118cec <__pow5mult+0xb0>)
 8118c74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8118c78:	f7fe fe72 	bl	8117960 <__assert_func>
 8118c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8118c80:	6004      	str	r4, [r0, #0]
 8118c82:	60c4      	str	r4, [r0, #12]
 8118c84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8118c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8118c8c:	b94c      	cbnz	r4, 8118ca2 <__pow5mult+0x66>
 8118c8e:	f240 2171 	movw	r1, #625	@ 0x271
 8118c92:	4638      	mov	r0, r7
 8118c94:	f7ff ff1a 	bl	8118acc <__i2b>
 8118c98:	2300      	movs	r3, #0
 8118c9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8118c9e:	4604      	mov	r4, r0
 8118ca0:	6003      	str	r3, [r0, #0]
 8118ca2:	f04f 0900 	mov.w	r9, #0
 8118ca6:	07eb      	lsls	r3, r5, #31
 8118ca8:	d50a      	bpl.n	8118cc0 <__pow5mult+0x84>
 8118caa:	4631      	mov	r1, r6
 8118cac:	4622      	mov	r2, r4
 8118cae:	4638      	mov	r0, r7
 8118cb0:	f7ff ff22 	bl	8118af8 <__multiply>
 8118cb4:	4631      	mov	r1, r6
 8118cb6:	4680      	mov	r8, r0
 8118cb8:	4638      	mov	r0, r7
 8118cba:	f7ff fe09 	bl	81188d0 <_Bfree>
 8118cbe:	4646      	mov	r6, r8
 8118cc0:	106d      	asrs	r5, r5, #1
 8118cc2:	d00b      	beq.n	8118cdc <__pow5mult+0xa0>
 8118cc4:	6820      	ldr	r0, [r4, #0]
 8118cc6:	b938      	cbnz	r0, 8118cd8 <__pow5mult+0x9c>
 8118cc8:	4622      	mov	r2, r4
 8118cca:	4621      	mov	r1, r4
 8118ccc:	4638      	mov	r0, r7
 8118cce:	f7ff ff13 	bl	8118af8 <__multiply>
 8118cd2:	6020      	str	r0, [r4, #0]
 8118cd4:	f8c0 9000 	str.w	r9, [r0]
 8118cd8:	4604      	mov	r4, r0
 8118cda:	e7e4      	b.n	8118ca6 <__pow5mult+0x6a>
 8118cdc:	4630      	mov	r0, r6
 8118cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8118ce2:	bf00      	nop
 8118ce4:	0811f628 	.word	0x0811f628
 8118ce8:	0811f2e0 	.word	0x0811f2e0
 8118cec:	0811f438 	.word	0x0811f438

08118cf0 <__lshift>:
 8118cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8118cf4:	460c      	mov	r4, r1
 8118cf6:	6849      	ldr	r1, [r1, #4]
 8118cf8:	6923      	ldr	r3, [r4, #16]
 8118cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8118cfe:	68a3      	ldr	r3, [r4, #8]
 8118d00:	4607      	mov	r7, r0
 8118d02:	4691      	mov	r9, r2
 8118d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8118d08:	f108 0601 	add.w	r6, r8, #1
 8118d0c:	42b3      	cmp	r3, r6
 8118d0e:	db0b      	blt.n	8118d28 <__lshift+0x38>
 8118d10:	4638      	mov	r0, r7
 8118d12:	f7ff fd9d 	bl	8118850 <_Balloc>
 8118d16:	4605      	mov	r5, r0
 8118d18:	b948      	cbnz	r0, 8118d2e <__lshift+0x3e>
 8118d1a:	4602      	mov	r2, r0
 8118d1c:	4b28      	ldr	r3, [pc, #160]	@ (8118dc0 <__lshift+0xd0>)
 8118d1e:	4829      	ldr	r0, [pc, #164]	@ (8118dc4 <__lshift+0xd4>)
 8118d20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8118d24:	f7fe fe1c 	bl	8117960 <__assert_func>
 8118d28:	3101      	adds	r1, #1
 8118d2a:	005b      	lsls	r3, r3, #1
 8118d2c:	e7ee      	b.n	8118d0c <__lshift+0x1c>
 8118d2e:	2300      	movs	r3, #0
 8118d30:	f100 0114 	add.w	r1, r0, #20
 8118d34:	f100 0210 	add.w	r2, r0, #16
 8118d38:	4618      	mov	r0, r3
 8118d3a:	4553      	cmp	r3, sl
 8118d3c:	db33      	blt.n	8118da6 <__lshift+0xb6>
 8118d3e:	6920      	ldr	r0, [r4, #16]
 8118d40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8118d44:	f104 0314 	add.w	r3, r4, #20
 8118d48:	f019 091f 	ands.w	r9, r9, #31
 8118d4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8118d50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8118d54:	d02b      	beq.n	8118dae <__lshift+0xbe>
 8118d56:	f1c9 0e20 	rsb	lr, r9, #32
 8118d5a:	468a      	mov	sl, r1
 8118d5c:	2200      	movs	r2, #0
 8118d5e:	6818      	ldr	r0, [r3, #0]
 8118d60:	fa00 f009 	lsl.w	r0, r0, r9
 8118d64:	4310      	orrs	r0, r2
 8118d66:	f84a 0b04 	str.w	r0, [sl], #4
 8118d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8118d6e:	459c      	cmp	ip, r3
 8118d70:	fa22 f20e 	lsr.w	r2, r2, lr
 8118d74:	d8f3      	bhi.n	8118d5e <__lshift+0x6e>
 8118d76:	ebac 0304 	sub.w	r3, ip, r4
 8118d7a:	3b15      	subs	r3, #21
 8118d7c:	f023 0303 	bic.w	r3, r3, #3
 8118d80:	3304      	adds	r3, #4
 8118d82:	f104 0015 	add.w	r0, r4, #21
 8118d86:	4560      	cmp	r0, ip
 8118d88:	bf88      	it	hi
 8118d8a:	2304      	movhi	r3, #4
 8118d8c:	50ca      	str	r2, [r1, r3]
 8118d8e:	b10a      	cbz	r2, 8118d94 <__lshift+0xa4>
 8118d90:	f108 0602 	add.w	r6, r8, #2
 8118d94:	3e01      	subs	r6, #1
 8118d96:	4638      	mov	r0, r7
 8118d98:	612e      	str	r6, [r5, #16]
 8118d9a:	4621      	mov	r1, r4
 8118d9c:	f7ff fd98 	bl	81188d0 <_Bfree>
 8118da0:	4628      	mov	r0, r5
 8118da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8118da6:	f842 0f04 	str.w	r0, [r2, #4]!
 8118daa:	3301      	adds	r3, #1
 8118dac:	e7c5      	b.n	8118d3a <__lshift+0x4a>
 8118dae:	3904      	subs	r1, #4
 8118db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8118db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8118db8:	459c      	cmp	ip, r3
 8118dba:	d8f9      	bhi.n	8118db0 <__lshift+0xc0>
 8118dbc:	e7ea      	b.n	8118d94 <__lshift+0xa4>
 8118dbe:	bf00      	nop
 8118dc0:	0811f427 	.word	0x0811f427
 8118dc4:	0811f438 	.word	0x0811f438

08118dc8 <__mcmp>:
 8118dc8:	690a      	ldr	r2, [r1, #16]
 8118dca:	4603      	mov	r3, r0
 8118dcc:	6900      	ldr	r0, [r0, #16]
 8118dce:	1a80      	subs	r0, r0, r2
 8118dd0:	b530      	push	{r4, r5, lr}
 8118dd2:	d10e      	bne.n	8118df2 <__mcmp+0x2a>
 8118dd4:	3314      	adds	r3, #20
 8118dd6:	3114      	adds	r1, #20
 8118dd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8118ddc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8118de0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8118de4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8118de8:	4295      	cmp	r5, r2
 8118dea:	d003      	beq.n	8118df4 <__mcmp+0x2c>
 8118dec:	d205      	bcs.n	8118dfa <__mcmp+0x32>
 8118dee:	f04f 30ff 	mov.w	r0, #4294967295
 8118df2:	bd30      	pop	{r4, r5, pc}
 8118df4:	42a3      	cmp	r3, r4
 8118df6:	d3f3      	bcc.n	8118de0 <__mcmp+0x18>
 8118df8:	e7fb      	b.n	8118df2 <__mcmp+0x2a>
 8118dfa:	2001      	movs	r0, #1
 8118dfc:	e7f9      	b.n	8118df2 <__mcmp+0x2a>
	...

08118e00 <__mdiff>:
 8118e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8118e04:	4689      	mov	r9, r1
 8118e06:	4606      	mov	r6, r0
 8118e08:	4611      	mov	r1, r2
 8118e0a:	4648      	mov	r0, r9
 8118e0c:	4614      	mov	r4, r2
 8118e0e:	f7ff ffdb 	bl	8118dc8 <__mcmp>
 8118e12:	1e05      	subs	r5, r0, #0
 8118e14:	d112      	bne.n	8118e3c <__mdiff+0x3c>
 8118e16:	4629      	mov	r1, r5
 8118e18:	4630      	mov	r0, r6
 8118e1a:	f7ff fd19 	bl	8118850 <_Balloc>
 8118e1e:	4602      	mov	r2, r0
 8118e20:	b928      	cbnz	r0, 8118e2e <__mdiff+0x2e>
 8118e22:	4b3f      	ldr	r3, [pc, #252]	@ (8118f20 <__mdiff+0x120>)
 8118e24:	f240 2137 	movw	r1, #567	@ 0x237
 8118e28:	483e      	ldr	r0, [pc, #248]	@ (8118f24 <__mdiff+0x124>)
 8118e2a:	f7fe fd99 	bl	8117960 <__assert_func>
 8118e2e:	2301      	movs	r3, #1
 8118e30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8118e34:	4610      	mov	r0, r2
 8118e36:	b003      	add	sp, #12
 8118e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8118e3c:	bfbc      	itt	lt
 8118e3e:	464b      	movlt	r3, r9
 8118e40:	46a1      	movlt	r9, r4
 8118e42:	4630      	mov	r0, r6
 8118e44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8118e48:	bfba      	itte	lt
 8118e4a:	461c      	movlt	r4, r3
 8118e4c:	2501      	movlt	r5, #1
 8118e4e:	2500      	movge	r5, #0
 8118e50:	f7ff fcfe 	bl	8118850 <_Balloc>
 8118e54:	4602      	mov	r2, r0
 8118e56:	b918      	cbnz	r0, 8118e60 <__mdiff+0x60>
 8118e58:	4b31      	ldr	r3, [pc, #196]	@ (8118f20 <__mdiff+0x120>)
 8118e5a:	f240 2145 	movw	r1, #581	@ 0x245
 8118e5e:	e7e3      	b.n	8118e28 <__mdiff+0x28>
 8118e60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8118e64:	6926      	ldr	r6, [r4, #16]
 8118e66:	60c5      	str	r5, [r0, #12]
 8118e68:	f109 0310 	add.w	r3, r9, #16
 8118e6c:	f109 0514 	add.w	r5, r9, #20
 8118e70:	f104 0e14 	add.w	lr, r4, #20
 8118e74:	f100 0b14 	add.w	fp, r0, #20
 8118e78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8118e7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8118e80:	9301      	str	r3, [sp, #4]
 8118e82:	46d9      	mov	r9, fp
 8118e84:	f04f 0c00 	mov.w	ip, #0
 8118e88:	9b01      	ldr	r3, [sp, #4]
 8118e8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8118e8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8118e92:	9301      	str	r3, [sp, #4]
 8118e94:	fa1f f38a 	uxth.w	r3, sl
 8118e98:	4619      	mov	r1, r3
 8118e9a:	b283      	uxth	r3, r0
 8118e9c:	1acb      	subs	r3, r1, r3
 8118e9e:	0c00      	lsrs	r0, r0, #16
 8118ea0:	4463      	add	r3, ip
 8118ea2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8118ea6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8118eaa:	b29b      	uxth	r3, r3
 8118eac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8118eb0:	4576      	cmp	r6, lr
 8118eb2:	f849 3b04 	str.w	r3, [r9], #4
 8118eb6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8118eba:	d8e5      	bhi.n	8118e88 <__mdiff+0x88>
 8118ebc:	1b33      	subs	r3, r6, r4
 8118ebe:	3b15      	subs	r3, #21
 8118ec0:	f023 0303 	bic.w	r3, r3, #3
 8118ec4:	3415      	adds	r4, #21
 8118ec6:	3304      	adds	r3, #4
 8118ec8:	42a6      	cmp	r6, r4
 8118eca:	bf38      	it	cc
 8118ecc:	2304      	movcc	r3, #4
 8118ece:	441d      	add	r5, r3
 8118ed0:	445b      	add	r3, fp
 8118ed2:	461e      	mov	r6, r3
 8118ed4:	462c      	mov	r4, r5
 8118ed6:	4544      	cmp	r4, r8
 8118ed8:	d30e      	bcc.n	8118ef8 <__mdiff+0xf8>
 8118eda:	f108 0103 	add.w	r1, r8, #3
 8118ede:	1b49      	subs	r1, r1, r5
 8118ee0:	f021 0103 	bic.w	r1, r1, #3
 8118ee4:	3d03      	subs	r5, #3
 8118ee6:	45a8      	cmp	r8, r5
 8118ee8:	bf38      	it	cc
 8118eea:	2100      	movcc	r1, #0
 8118eec:	440b      	add	r3, r1
 8118eee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8118ef2:	b191      	cbz	r1, 8118f1a <__mdiff+0x11a>
 8118ef4:	6117      	str	r7, [r2, #16]
 8118ef6:	e79d      	b.n	8118e34 <__mdiff+0x34>
 8118ef8:	f854 1b04 	ldr.w	r1, [r4], #4
 8118efc:	46e6      	mov	lr, ip
 8118efe:	0c08      	lsrs	r0, r1, #16
 8118f00:	fa1c fc81 	uxtah	ip, ip, r1
 8118f04:	4471      	add	r1, lr
 8118f06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8118f0a:	b289      	uxth	r1, r1
 8118f0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8118f10:	f846 1b04 	str.w	r1, [r6], #4
 8118f14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8118f18:	e7dd      	b.n	8118ed6 <__mdiff+0xd6>
 8118f1a:	3f01      	subs	r7, #1
 8118f1c:	e7e7      	b.n	8118eee <__mdiff+0xee>
 8118f1e:	bf00      	nop
 8118f20:	0811f427 	.word	0x0811f427
 8118f24:	0811f438 	.word	0x0811f438

08118f28 <__ulp>:
 8118f28:	b082      	sub	sp, #8
 8118f2a:	ed8d 0b00 	vstr	d0, [sp]
 8118f2e:	9a01      	ldr	r2, [sp, #4]
 8118f30:	4b0f      	ldr	r3, [pc, #60]	@ (8118f70 <__ulp+0x48>)
 8118f32:	4013      	ands	r3, r2
 8118f34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8118f38:	2b00      	cmp	r3, #0
 8118f3a:	dc08      	bgt.n	8118f4e <__ulp+0x26>
 8118f3c:	425b      	negs	r3, r3
 8118f3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8118f42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8118f46:	da04      	bge.n	8118f52 <__ulp+0x2a>
 8118f48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8118f4c:	4113      	asrs	r3, r2
 8118f4e:	2200      	movs	r2, #0
 8118f50:	e008      	b.n	8118f64 <__ulp+0x3c>
 8118f52:	f1a2 0314 	sub.w	r3, r2, #20
 8118f56:	2b1e      	cmp	r3, #30
 8118f58:	bfda      	itte	le
 8118f5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8118f5e:	40da      	lsrle	r2, r3
 8118f60:	2201      	movgt	r2, #1
 8118f62:	2300      	movs	r3, #0
 8118f64:	4619      	mov	r1, r3
 8118f66:	4610      	mov	r0, r2
 8118f68:	ec41 0b10 	vmov	d0, r0, r1
 8118f6c:	b002      	add	sp, #8
 8118f6e:	4770      	bx	lr
 8118f70:	7ff00000 	.word	0x7ff00000

08118f74 <__b2d>:
 8118f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8118f78:	6906      	ldr	r6, [r0, #16]
 8118f7a:	f100 0814 	add.w	r8, r0, #20
 8118f7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8118f82:	1f37      	subs	r7, r6, #4
 8118f84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8118f88:	4610      	mov	r0, r2
 8118f8a:	f7ff fd53 	bl	8118a34 <__hi0bits>
 8118f8e:	f1c0 0320 	rsb	r3, r0, #32
 8118f92:	280a      	cmp	r0, #10
 8118f94:	600b      	str	r3, [r1, #0]
 8118f96:	491b      	ldr	r1, [pc, #108]	@ (8119004 <__b2d+0x90>)
 8118f98:	dc15      	bgt.n	8118fc6 <__b2d+0x52>
 8118f9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8118f9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8118fa2:	45b8      	cmp	r8, r7
 8118fa4:	ea43 0501 	orr.w	r5, r3, r1
 8118fa8:	bf34      	ite	cc
 8118faa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8118fae:	2300      	movcs	r3, #0
 8118fb0:	3015      	adds	r0, #21
 8118fb2:	fa02 f000 	lsl.w	r0, r2, r0
 8118fb6:	fa23 f30c 	lsr.w	r3, r3, ip
 8118fba:	4303      	orrs	r3, r0
 8118fbc:	461c      	mov	r4, r3
 8118fbe:	ec45 4b10 	vmov	d0, r4, r5
 8118fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8118fc6:	45b8      	cmp	r8, r7
 8118fc8:	bf3a      	itte	cc
 8118fca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8118fce:	f1a6 0708 	subcc.w	r7, r6, #8
 8118fd2:	2300      	movcs	r3, #0
 8118fd4:	380b      	subs	r0, #11
 8118fd6:	d012      	beq.n	8118ffe <__b2d+0x8a>
 8118fd8:	f1c0 0120 	rsb	r1, r0, #32
 8118fdc:	fa23 f401 	lsr.w	r4, r3, r1
 8118fe0:	4082      	lsls	r2, r0
 8118fe2:	4322      	orrs	r2, r4
 8118fe4:	4547      	cmp	r7, r8
 8118fe6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8118fea:	bf8c      	ite	hi
 8118fec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8118ff0:	2200      	movls	r2, #0
 8118ff2:	4083      	lsls	r3, r0
 8118ff4:	40ca      	lsrs	r2, r1
 8118ff6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8118ffa:	4313      	orrs	r3, r2
 8118ffc:	e7de      	b.n	8118fbc <__b2d+0x48>
 8118ffe:	ea42 0501 	orr.w	r5, r2, r1
 8119002:	e7db      	b.n	8118fbc <__b2d+0x48>
 8119004:	3ff00000 	.word	0x3ff00000

08119008 <__d2b>:
 8119008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 811900c:	460f      	mov	r7, r1
 811900e:	2101      	movs	r1, #1
 8119010:	ec59 8b10 	vmov	r8, r9, d0
 8119014:	4616      	mov	r6, r2
 8119016:	f7ff fc1b 	bl	8118850 <_Balloc>
 811901a:	4604      	mov	r4, r0
 811901c:	b930      	cbnz	r0, 811902c <__d2b+0x24>
 811901e:	4602      	mov	r2, r0
 8119020:	4b23      	ldr	r3, [pc, #140]	@ (81190b0 <__d2b+0xa8>)
 8119022:	4824      	ldr	r0, [pc, #144]	@ (81190b4 <__d2b+0xac>)
 8119024:	f240 310f 	movw	r1, #783	@ 0x30f
 8119028:	f7fe fc9a 	bl	8117960 <__assert_func>
 811902c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8119030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8119034:	b10d      	cbz	r5, 811903a <__d2b+0x32>
 8119036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 811903a:	9301      	str	r3, [sp, #4]
 811903c:	f1b8 0300 	subs.w	r3, r8, #0
 8119040:	d023      	beq.n	811908a <__d2b+0x82>
 8119042:	4668      	mov	r0, sp
 8119044:	9300      	str	r3, [sp, #0]
 8119046:	f7ff fd14 	bl	8118a72 <__lo0bits>
 811904a:	e9dd 1200 	ldrd	r1, r2, [sp]
 811904e:	b1d0      	cbz	r0, 8119086 <__d2b+0x7e>
 8119050:	f1c0 0320 	rsb	r3, r0, #32
 8119054:	fa02 f303 	lsl.w	r3, r2, r3
 8119058:	430b      	orrs	r3, r1
 811905a:	40c2      	lsrs	r2, r0
 811905c:	6163      	str	r3, [r4, #20]
 811905e:	9201      	str	r2, [sp, #4]
 8119060:	9b01      	ldr	r3, [sp, #4]
 8119062:	61a3      	str	r3, [r4, #24]
 8119064:	2b00      	cmp	r3, #0
 8119066:	bf0c      	ite	eq
 8119068:	2201      	moveq	r2, #1
 811906a:	2202      	movne	r2, #2
 811906c:	6122      	str	r2, [r4, #16]
 811906e:	b1a5      	cbz	r5, 811909a <__d2b+0x92>
 8119070:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8119074:	4405      	add	r5, r0
 8119076:	603d      	str	r5, [r7, #0]
 8119078:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 811907c:	6030      	str	r0, [r6, #0]
 811907e:	4620      	mov	r0, r4
 8119080:	b003      	add	sp, #12
 8119082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8119086:	6161      	str	r1, [r4, #20]
 8119088:	e7ea      	b.n	8119060 <__d2b+0x58>
 811908a:	a801      	add	r0, sp, #4
 811908c:	f7ff fcf1 	bl	8118a72 <__lo0bits>
 8119090:	9b01      	ldr	r3, [sp, #4]
 8119092:	6163      	str	r3, [r4, #20]
 8119094:	3020      	adds	r0, #32
 8119096:	2201      	movs	r2, #1
 8119098:	e7e8      	b.n	811906c <__d2b+0x64>
 811909a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 811909e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 81190a2:	6038      	str	r0, [r7, #0]
 81190a4:	6918      	ldr	r0, [r3, #16]
 81190a6:	f7ff fcc5 	bl	8118a34 <__hi0bits>
 81190aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 81190ae:	e7e5      	b.n	811907c <__d2b+0x74>
 81190b0:	0811f427 	.word	0x0811f427
 81190b4:	0811f438 	.word	0x0811f438

081190b8 <__ratio>:
 81190b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81190bc:	b085      	sub	sp, #20
 81190be:	e9cd 1000 	strd	r1, r0, [sp]
 81190c2:	a902      	add	r1, sp, #8
 81190c4:	f7ff ff56 	bl	8118f74 <__b2d>
 81190c8:	9800      	ldr	r0, [sp, #0]
 81190ca:	a903      	add	r1, sp, #12
 81190cc:	ec55 4b10 	vmov	r4, r5, d0
 81190d0:	f7ff ff50 	bl	8118f74 <__b2d>
 81190d4:	9b01      	ldr	r3, [sp, #4]
 81190d6:	6919      	ldr	r1, [r3, #16]
 81190d8:	9b00      	ldr	r3, [sp, #0]
 81190da:	691b      	ldr	r3, [r3, #16]
 81190dc:	1ac9      	subs	r1, r1, r3
 81190de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 81190e2:	1a9b      	subs	r3, r3, r2
 81190e4:	ec5b ab10 	vmov	sl, fp, d0
 81190e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 81190ec:	2b00      	cmp	r3, #0
 81190ee:	bfce      	itee	gt
 81190f0:	462a      	movgt	r2, r5
 81190f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 81190f6:	465a      	movle	r2, fp
 81190f8:	462f      	mov	r7, r5
 81190fa:	46d9      	mov	r9, fp
 81190fc:	bfcc      	ite	gt
 81190fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8119102:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8119106:	464b      	mov	r3, r9
 8119108:	4652      	mov	r2, sl
 811910a:	4620      	mov	r0, r4
 811910c:	4639      	mov	r1, r7
 811910e:	f7e7 fc35 	bl	810097c <__aeabi_ddiv>
 8119112:	ec41 0b10 	vmov	d0, r0, r1
 8119116:	b005      	add	sp, #20
 8119118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0811911c <__copybits>:
 811911c:	3901      	subs	r1, #1
 811911e:	b570      	push	{r4, r5, r6, lr}
 8119120:	1149      	asrs	r1, r1, #5
 8119122:	6914      	ldr	r4, [r2, #16]
 8119124:	3101      	adds	r1, #1
 8119126:	f102 0314 	add.w	r3, r2, #20
 811912a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 811912e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8119132:	1f05      	subs	r5, r0, #4
 8119134:	42a3      	cmp	r3, r4
 8119136:	d30c      	bcc.n	8119152 <__copybits+0x36>
 8119138:	1aa3      	subs	r3, r4, r2
 811913a:	3b11      	subs	r3, #17
 811913c:	f023 0303 	bic.w	r3, r3, #3
 8119140:	3211      	adds	r2, #17
 8119142:	42a2      	cmp	r2, r4
 8119144:	bf88      	it	hi
 8119146:	2300      	movhi	r3, #0
 8119148:	4418      	add	r0, r3
 811914a:	2300      	movs	r3, #0
 811914c:	4288      	cmp	r0, r1
 811914e:	d305      	bcc.n	811915c <__copybits+0x40>
 8119150:	bd70      	pop	{r4, r5, r6, pc}
 8119152:	f853 6b04 	ldr.w	r6, [r3], #4
 8119156:	f845 6f04 	str.w	r6, [r5, #4]!
 811915a:	e7eb      	b.n	8119134 <__copybits+0x18>
 811915c:	f840 3b04 	str.w	r3, [r0], #4
 8119160:	e7f4      	b.n	811914c <__copybits+0x30>

08119162 <__any_on>:
 8119162:	f100 0214 	add.w	r2, r0, #20
 8119166:	6900      	ldr	r0, [r0, #16]
 8119168:	114b      	asrs	r3, r1, #5
 811916a:	4298      	cmp	r0, r3
 811916c:	b510      	push	{r4, lr}
 811916e:	db11      	blt.n	8119194 <__any_on+0x32>
 8119170:	dd0a      	ble.n	8119188 <__any_on+0x26>
 8119172:	f011 011f 	ands.w	r1, r1, #31
 8119176:	d007      	beq.n	8119188 <__any_on+0x26>
 8119178:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 811917c:	fa24 f001 	lsr.w	r0, r4, r1
 8119180:	fa00 f101 	lsl.w	r1, r0, r1
 8119184:	428c      	cmp	r4, r1
 8119186:	d10b      	bne.n	81191a0 <__any_on+0x3e>
 8119188:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 811918c:	4293      	cmp	r3, r2
 811918e:	d803      	bhi.n	8119198 <__any_on+0x36>
 8119190:	2000      	movs	r0, #0
 8119192:	bd10      	pop	{r4, pc}
 8119194:	4603      	mov	r3, r0
 8119196:	e7f7      	b.n	8119188 <__any_on+0x26>
 8119198:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 811919c:	2900      	cmp	r1, #0
 811919e:	d0f5      	beq.n	811918c <__any_on+0x2a>
 81191a0:	2001      	movs	r0, #1
 81191a2:	e7f6      	b.n	8119192 <__any_on+0x30>

081191a4 <sulp>:
 81191a4:	b570      	push	{r4, r5, r6, lr}
 81191a6:	4604      	mov	r4, r0
 81191a8:	460d      	mov	r5, r1
 81191aa:	ec45 4b10 	vmov	d0, r4, r5
 81191ae:	4616      	mov	r6, r2
 81191b0:	f7ff feba 	bl	8118f28 <__ulp>
 81191b4:	ec51 0b10 	vmov	r0, r1, d0
 81191b8:	b17e      	cbz	r6, 81191da <sulp+0x36>
 81191ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 81191be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 81191c2:	2b00      	cmp	r3, #0
 81191c4:	dd09      	ble.n	81191da <sulp+0x36>
 81191c6:	051b      	lsls	r3, r3, #20
 81191c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 81191cc:	2400      	movs	r4, #0
 81191ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 81191d2:	4622      	mov	r2, r4
 81191d4:	462b      	mov	r3, r5
 81191d6:	f7e7 faa7 	bl	8100728 <__aeabi_dmul>
 81191da:	ec41 0b10 	vmov	d0, r0, r1
 81191de:	bd70      	pop	{r4, r5, r6, pc}

081191e0 <_strtod_l>:
 81191e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81191e4:	b09f      	sub	sp, #124	@ 0x7c
 81191e6:	460c      	mov	r4, r1
 81191e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 81191ea:	2200      	movs	r2, #0
 81191ec:	921a      	str	r2, [sp, #104]	@ 0x68
 81191ee:	9005      	str	r0, [sp, #20]
 81191f0:	f04f 0a00 	mov.w	sl, #0
 81191f4:	f04f 0b00 	mov.w	fp, #0
 81191f8:	460a      	mov	r2, r1
 81191fa:	9219      	str	r2, [sp, #100]	@ 0x64
 81191fc:	7811      	ldrb	r1, [r2, #0]
 81191fe:	292b      	cmp	r1, #43	@ 0x2b
 8119200:	d04a      	beq.n	8119298 <_strtod_l+0xb8>
 8119202:	d838      	bhi.n	8119276 <_strtod_l+0x96>
 8119204:	290d      	cmp	r1, #13
 8119206:	d832      	bhi.n	811926e <_strtod_l+0x8e>
 8119208:	2908      	cmp	r1, #8
 811920a:	d832      	bhi.n	8119272 <_strtod_l+0x92>
 811920c:	2900      	cmp	r1, #0
 811920e:	d03b      	beq.n	8119288 <_strtod_l+0xa8>
 8119210:	2200      	movs	r2, #0
 8119212:	920e      	str	r2, [sp, #56]	@ 0x38
 8119214:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8119216:	782a      	ldrb	r2, [r5, #0]
 8119218:	2a30      	cmp	r2, #48	@ 0x30
 811921a:	f040 80b2 	bne.w	8119382 <_strtod_l+0x1a2>
 811921e:	786a      	ldrb	r2, [r5, #1]
 8119220:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8119224:	2a58      	cmp	r2, #88	@ 0x58
 8119226:	d16e      	bne.n	8119306 <_strtod_l+0x126>
 8119228:	9302      	str	r3, [sp, #8]
 811922a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811922c:	9301      	str	r3, [sp, #4]
 811922e:	ab1a      	add	r3, sp, #104	@ 0x68
 8119230:	9300      	str	r3, [sp, #0]
 8119232:	4a8f      	ldr	r2, [pc, #572]	@ (8119470 <_strtod_l+0x290>)
 8119234:	9805      	ldr	r0, [sp, #20]
 8119236:	ab1b      	add	r3, sp, #108	@ 0x6c
 8119238:	a919      	add	r1, sp, #100	@ 0x64
 811923a:	f001 fdf7 	bl	811ae2c <__gethex>
 811923e:	f010 060f 	ands.w	r6, r0, #15
 8119242:	4604      	mov	r4, r0
 8119244:	d005      	beq.n	8119252 <_strtod_l+0x72>
 8119246:	2e06      	cmp	r6, #6
 8119248:	d128      	bne.n	811929c <_strtod_l+0xbc>
 811924a:	3501      	adds	r5, #1
 811924c:	2300      	movs	r3, #0
 811924e:	9519      	str	r5, [sp, #100]	@ 0x64
 8119250:	930e      	str	r3, [sp, #56]	@ 0x38
 8119252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8119254:	2b00      	cmp	r3, #0
 8119256:	f040 858e 	bne.w	8119d76 <_strtod_l+0xb96>
 811925a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811925c:	b1cb      	cbz	r3, 8119292 <_strtod_l+0xb2>
 811925e:	4652      	mov	r2, sl
 8119260:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8119264:	ec43 2b10 	vmov	d0, r2, r3
 8119268:	b01f      	add	sp, #124	@ 0x7c
 811926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811926e:	2920      	cmp	r1, #32
 8119270:	d1ce      	bne.n	8119210 <_strtod_l+0x30>
 8119272:	3201      	adds	r2, #1
 8119274:	e7c1      	b.n	81191fa <_strtod_l+0x1a>
 8119276:	292d      	cmp	r1, #45	@ 0x2d
 8119278:	d1ca      	bne.n	8119210 <_strtod_l+0x30>
 811927a:	2101      	movs	r1, #1
 811927c:	910e      	str	r1, [sp, #56]	@ 0x38
 811927e:	1c51      	adds	r1, r2, #1
 8119280:	9119      	str	r1, [sp, #100]	@ 0x64
 8119282:	7852      	ldrb	r2, [r2, #1]
 8119284:	2a00      	cmp	r2, #0
 8119286:	d1c5      	bne.n	8119214 <_strtod_l+0x34>
 8119288:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 811928a:	9419      	str	r4, [sp, #100]	@ 0x64
 811928c:	2b00      	cmp	r3, #0
 811928e:	f040 8570 	bne.w	8119d72 <_strtod_l+0xb92>
 8119292:	4652      	mov	r2, sl
 8119294:	465b      	mov	r3, fp
 8119296:	e7e5      	b.n	8119264 <_strtod_l+0x84>
 8119298:	2100      	movs	r1, #0
 811929a:	e7ef      	b.n	811927c <_strtod_l+0x9c>
 811929c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 811929e:	b13a      	cbz	r2, 81192b0 <_strtod_l+0xd0>
 81192a0:	2135      	movs	r1, #53	@ 0x35
 81192a2:	a81c      	add	r0, sp, #112	@ 0x70
 81192a4:	f7ff ff3a 	bl	811911c <__copybits>
 81192a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81192aa:	9805      	ldr	r0, [sp, #20]
 81192ac:	f7ff fb10 	bl	81188d0 <_Bfree>
 81192b0:	3e01      	subs	r6, #1
 81192b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 81192b4:	2e04      	cmp	r6, #4
 81192b6:	d806      	bhi.n	81192c6 <_strtod_l+0xe6>
 81192b8:	e8df f006 	tbb	[pc, r6]
 81192bc:	201d0314 	.word	0x201d0314
 81192c0:	14          	.byte	0x14
 81192c1:	00          	.byte	0x00
 81192c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 81192c6:	05e1      	lsls	r1, r4, #23
 81192c8:	bf48      	it	mi
 81192ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 81192ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81192d2:	0d1b      	lsrs	r3, r3, #20
 81192d4:	051b      	lsls	r3, r3, #20
 81192d6:	2b00      	cmp	r3, #0
 81192d8:	d1bb      	bne.n	8119252 <_strtod_l+0x72>
 81192da:	f7fe faff 	bl	81178dc <__errno>
 81192de:	2322      	movs	r3, #34	@ 0x22
 81192e0:	6003      	str	r3, [r0, #0]
 81192e2:	e7b6      	b.n	8119252 <_strtod_l+0x72>
 81192e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 81192e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 81192ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 81192f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 81192f4:	e7e7      	b.n	81192c6 <_strtod_l+0xe6>
 81192f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8119478 <_strtod_l+0x298>
 81192fa:	e7e4      	b.n	81192c6 <_strtod_l+0xe6>
 81192fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8119300:	f04f 3aff 	mov.w	sl, #4294967295
 8119304:	e7df      	b.n	81192c6 <_strtod_l+0xe6>
 8119306:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8119308:	1c5a      	adds	r2, r3, #1
 811930a:	9219      	str	r2, [sp, #100]	@ 0x64
 811930c:	785b      	ldrb	r3, [r3, #1]
 811930e:	2b30      	cmp	r3, #48	@ 0x30
 8119310:	d0f9      	beq.n	8119306 <_strtod_l+0x126>
 8119312:	2b00      	cmp	r3, #0
 8119314:	d09d      	beq.n	8119252 <_strtod_l+0x72>
 8119316:	2301      	movs	r3, #1
 8119318:	2700      	movs	r7, #0
 811931a:	9308      	str	r3, [sp, #32]
 811931c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811931e:	930c      	str	r3, [sp, #48]	@ 0x30
 8119320:	970b      	str	r7, [sp, #44]	@ 0x2c
 8119322:	46b9      	mov	r9, r7
 8119324:	220a      	movs	r2, #10
 8119326:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8119328:	7805      	ldrb	r5, [r0, #0]
 811932a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 811932e:	b2d9      	uxtb	r1, r3
 8119330:	2909      	cmp	r1, #9
 8119332:	d928      	bls.n	8119386 <_strtod_l+0x1a6>
 8119334:	494f      	ldr	r1, [pc, #316]	@ (8119474 <_strtod_l+0x294>)
 8119336:	2201      	movs	r2, #1
 8119338:	f7fe fa5d 	bl	81177f6 <strncmp>
 811933c:	2800      	cmp	r0, #0
 811933e:	d032      	beq.n	81193a6 <_strtod_l+0x1c6>
 8119340:	2000      	movs	r0, #0
 8119342:	462a      	mov	r2, r5
 8119344:	900a      	str	r0, [sp, #40]	@ 0x28
 8119346:	464d      	mov	r5, r9
 8119348:	4603      	mov	r3, r0
 811934a:	2a65      	cmp	r2, #101	@ 0x65
 811934c:	d001      	beq.n	8119352 <_strtod_l+0x172>
 811934e:	2a45      	cmp	r2, #69	@ 0x45
 8119350:	d114      	bne.n	811937c <_strtod_l+0x19c>
 8119352:	b91d      	cbnz	r5, 811935c <_strtod_l+0x17c>
 8119354:	9a08      	ldr	r2, [sp, #32]
 8119356:	4302      	orrs	r2, r0
 8119358:	d096      	beq.n	8119288 <_strtod_l+0xa8>
 811935a:	2500      	movs	r5, #0
 811935c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 811935e:	1c62      	adds	r2, r4, #1
 8119360:	9219      	str	r2, [sp, #100]	@ 0x64
 8119362:	7862      	ldrb	r2, [r4, #1]
 8119364:	2a2b      	cmp	r2, #43	@ 0x2b
 8119366:	d07a      	beq.n	811945e <_strtod_l+0x27e>
 8119368:	2a2d      	cmp	r2, #45	@ 0x2d
 811936a:	d07e      	beq.n	811946a <_strtod_l+0x28a>
 811936c:	f04f 0c00 	mov.w	ip, #0
 8119370:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8119374:	2909      	cmp	r1, #9
 8119376:	f240 8085 	bls.w	8119484 <_strtod_l+0x2a4>
 811937a:	9419      	str	r4, [sp, #100]	@ 0x64
 811937c:	f04f 0800 	mov.w	r8, #0
 8119380:	e0a5      	b.n	81194ce <_strtod_l+0x2ee>
 8119382:	2300      	movs	r3, #0
 8119384:	e7c8      	b.n	8119318 <_strtod_l+0x138>
 8119386:	f1b9 0f08 	cmp.w	r9, #8
 811938a:	bfd8      	it	le
 811938c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 811938e:	f100 0001 	add.w	r0, r0, #1
 8119392:	bfda      	itte	le
 8119394:	fb02 3301 	mlale	r3, r2, r1, r3
 8119398:	930b      	strle	r3, [sp, #44]	@ 0x2c
 811939a:	fb02 3707 	mlagt	r7, r2, r7, r3
 811939e:	f109 0901 	add.w	r9, r9, #1
 81193a2:	9019      	str	r0, [sp, #100]	@ 0x64
 81193a4:	e7bf      	b.n	8119326 <_strtod_l+0x146>
 81193a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81193a8:	1c5a      	adds	r2, r3, #1
 81193aa:	9219      	str	r2, [sp, #100]	@ 0x64
 81193ac:	785a      	ldrb	r2, [r3, #1]
 81193ae:	f1b9 0f00 	cmp.w	r9, #0
 81193b2:	d03b      	beq.n	811942c <_strtod_l+0x24c>
 81193b4:	900a      	str	r0, [sp, #40]	@ 0x28
 81193b6:	464d      	mov	r5, r9
 81193b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 81193bc:	2b09      	cmp	r3, #9
 81193be:	d912      	bls.n	81193e6 <_strtod_l+0x206>
 81193c0:	2301      	movs	r3, #1
 81193c2:	e7c2      	b.n	811934a <_strtod_l+0x16a>
 81193c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81193c6:	1c5a      	adds	r2, r3, #1
 81193c8:	9219      	str	r2, [sp, #100]	@ 0x64
 81193ca:	785a      	ldrb	r2, [r3, #1]
 81193cc:	3001      	adds	r0, #1
 81193ce:	2a30      	cmp	r2, #48	@ 0x30
 81193d0:	d0f8      	beq.n	81193c4 <_strtod_l+0x1e4>
 81193d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 81193d6:	2b08      	cmp	r3, #8
 81193d8:	f200 84d2 	bhi.w	8119d80 <_strtod_l+0xba0>
 81193dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81193de:	900a      	str	r0, [sp, #40]	@ 0x28
 81193e0:	2000      	movs	r0, #0
 81193e2:	930c      	str	r3, [sp, #48]	@ 0x30
 81193e4:	4605      	mov	r5, r0
 81193e6:	3a30      	subs	r2, #48	@ 0x30
 81193e8:	f100 0301 	add.w	r3, r0, #1
 81193ec:	d018      	beq.n	8119420 <_strtod_l+0x240>
 81193ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 81193f0:	4419      	add	r1, r3
 81193f2:	910a      	str	r1, [sp, #40]	@ 0x28
 81193f4:	462e      	mov	r6, r5
 81193f6:	f04f 0e0a 	mov.w	lr, #10
 81193fa:	1c71      	adds	r1, r6, #1
 81193fc:	eba1 0c05 	sub.w	ip, r1, r5
 8119400:	4563      	cmp	r3, ip
 8119402:	dc15      	bgt.n	8119430 <_strtod_l+0x250>
 8119404:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8119408:	182b      	adds	r3, r5, r0
 811940a:	2b08      	cmp	r3, #8
 811940c:	f105 0501 	add.w	r5, r5, #1
 8119410:	4405      	add	r5, r0
 8119412:	dc1a      	bgt.n	811944a <_strtod_l+0x26a>
 8119414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8119416:	230a      	movs	r3, #10
 8119418:	fb03 2301 	mla	r3, r3, r1, r2
 811941c:	930b      	str	r3, [sp, #44]	@ 0x2c
 811941e:	2300      	movs	r3, #0
 8119420:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8119422:	1c51      	adds	r1, r2, #1
 8119424:	9119      	str	r1, [sp, #100]	@ 0x64
 8119426:	7852      	ldrb	r2, [r2, #1]
 8119428:	4618      	mov	r0, r3
 811942a:	e7c5      	b.n	81193b8 <_strtod_l+0x1d8>
 811942c:	4648      	mov	r0, r9
 811942e:	e7ce      	b.n	81193ce <_strtod_l+0x1ee>
 8119430:	2e08      	cmp	r6, #8
 8119432:	dc05      	bgt.n	8119440 <_strtod_l+0x260>
 8119434:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8119436:	fb0e f606 	mul.w	r6, lr, r6
 811943a:	960b      	str	r6, [sp, #44]	@ 0x2c
 811943c:	460e      	mov	r6, r1
 811943e:	e7dc      	b.n	81193fa <_strtod_l+0x21a>
 8119440:	2910      	cmp	r1, #16
 8119442:	bfd8      	it	le
 8119444:	fb0e f707 	mulle.w	r7, lr, r7
 8119448:	e7f8      	b.n	811943c <_strtod_l+0x25c>
 811944a:	2b0f      	cmp	r3, #15
 811944c:	bfdc      	itt	le
 811944e:	230a      	movle	r3, #10
 8119450:	fb03 2707 	mlale	r7, r3, r7, r2
 8119454:	e7e3      	b.n	811941e <_strtod_l+0x23e>
 8119456:	2300      	movs	r3, #0
 8119458:	930a      	str	r3, [sp, #40]	@ 0x28
 811945a:	2301      	movs	r3, #1
 811945c:	e77a      	b.n	8119354 <_strtod_l+0x174>
 811945e:	f04f 0c00 	mov.w	ip, #0
 8119462:	1ca2      	adds	r2, r4, #2
 8119464:	9219      	str	r2, [sp, #100]	@ 0x64
 8119466:	78a2      	ldrb	r2, [r4, #2]
 8119468:	e782      	b.n	8119370 <_strtod_l+0x190>
 811946a:	f04f 0c01 	mov.w	ip, #1
 811946e:	e7f8      	b.n	8119462 <_strtod_l+0x282>
 8119470:	0811f73c 	.word	0x0811f73c
 8119474:	0811f491 	.word	0x0811f491
 8119478:	7ff00000 	.word	0x7ff00000
 811947c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 811947e:	1c51      	adds	r1, r2, #1
 8119480:	9119      	str	r1, [sp, #100]	@ 0x64
 8119482:	7852      	ldrb	r2, [r2, #1]
 8119484:	2a30      	cmp	r2, #48	@ 0x30
 8119486:	d0f9      	beq.n	811947c <_strtod_l+0x29c>
 8119488:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 811948c:	2908      	cmp	r1, #8
 811948e:	f63f af75 	bhi.w	811937c <_strtod_l+0x19c>
 8119492:	3a30      	subs	r2, #48	@ 0x30
 8119494:	9209      	str	r2, [sp, #36]	@ 0x24
 8119496:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8119498:	920f      	str	r2, [sp, #60]	@ 0x3c
 811949a:	f04f 080a 	mov.w	r8, #10
 811949e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81194a0:	1c56      	adds	r6, r2, #1
 81194a2:	9619      	str	r6, [sp, #100]	@ 0x64
 81194a4:	7852      	ldrb	r2, [r2, #1]
 81194a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 81194aa:	f1be 0f09 	cmp.w	lr, #9
 81194ae:	d939      	bls.n	8119524 <_strtod_l+0x344>
 81194b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 81194b2:	1a76      	subs	r6, r6, r1
 81194b4:	2e08      	cmp	r6, #8
 81194b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 81194ba:	dc03      	bgt.n	81194c4 <_strtod_l+0x2e4>
 81194bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81194be:	4588      	cmp	r8, r1
 81194c0:	bfa8      	it	ge
 81194c2:	4688      	movge	r8, r1
 81194c4:	f1bc 0f00 	cmp.w	ip, #0
 81194c8:	d001      	beq.n	81194ce <_strtod_l+0x2ee>
 81194ca:	f1c8 0800 	rsb	r8, r8, #0
 81194ce:	2d00      	cmp	r5, #0
 81194d0:	d14e      	bne.n	8119570 <_strtod_l+0x390>
 81194d2:	9908      	ldr	r1, [sp, #32]
 81194d4:	4308      	orrs	r0, r1
 81194d6:	f47f aebc 	bne.w	8119252 <_strtod_l+0x72>
 81194da:	2b00      	cmp	r3, #0
 81194dc:	f47f aed4 	bne.w	8119288 <_strtod_l+0xa8>
 81194e0:	2a69      	cmp	r2, #105	@ 0x69
 81194e2:	d028      	beq.n	8119536 <_strtod_l+0x356>
 81194e4:	dc25      	bgt.n	8119532 <_strtod_l+0x352>
 81194e6:	2a49      	cmp	r2, #73	@ 0x49
 81194e8:	d025      	beq.n	8119536 <_strtod_l+0x356>
 81194ea:	2a4e      	cmp	r2, #78	@ 0x4e
 81194ec:	f47f aecc 	bne.w	8119288 <_strtod_l+0xa8>
 81194f0:	499a      	ldr	r1, [pc, #616]	@ (811975c <_strtod_l+0x57c>)
 81194f2:	a819      	add	r0, sp, #100	@ 0x64
 81194f4:	f001 febc 	bl	811b270 <__match>
 81194f8:	2800      	cmp	r0, #0
 81194fa:	f43f aec5 	beq.w	8119288 <_strtod_l+0xa8>
 81194fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8119500:	781b      	ldrb	r3, [r3, #0]
 8119502:	2b28      	cmp	r3, #40	@ 0x28
 8119504:	d12e      	bne.n	8119564 <_strtod_l+0x384>
 8119506:	4996      	ldr	r1, [pc, #600]	@ (8119760 <_strtod_l+0x580>)
 8119508:	aa1c      	add	r2, sp, #112	@ 0x70
 811950a:	a819      	add	r0, sp, #100	@ 0x64
 811950c:	f001 fec4 	bl	811b298 <__hexnan>
 8119510:	2805      	cmp	r0, #5
 8119512:	d127      	bne.n	8119564 <_strtod_l+0x384>
 8119514:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8119516:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 811951a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 811951e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8119522:	e696      	b.n	8119252 <_strtod_l+0x72>
 8119524:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8119526:	fb08 2101 	mla	r1, r8, r1, r2
 811952a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 811952e:	9209      	str	r2, [sp, #36]	@ 0x24
 8119530:	e7b5      	b.n	811949e <_strtod_l+0x2be>
 8119532:	2a6e      	cmp	r2, #110	@ 0x6e
 8119534:	e7da      	b.n	81194ec <_strtod_l+0x30c>
 8119536:	498b      	ldr	r1, [pc, #556]	@ (8119764 <_strtod_l+0x584>)
 8119538:	a819      	add	r0, sp, #100	@ 0x64
 811953a:	f001 fe99 	bl	811b270 <__match>
 811953e:	2800      	cmp	r0, #0
 8119540:	f43f aea2 	beq.w	8119288 <_strtod_l+0xa8>
 8119544:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8119546:	4988      	ldr	r1, [pc, #544]	@ (8119768 <_strtod_l+0x588>)
 8119548:	3b01      	subs	r3, #1
 811954a:	a819      	add	r0, sp, #100	@ 0x64
 811954c:	9319      	str	r3, [sp, #100]	@ 0x64
 811954e:	f001 fe8f 	bl	811b270 <__match>
 8119552:	b910      	cbnz	r0, 811955a <_strtod_l+0x37a>
 8119554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8119556:	3301      	adds	r3, #1
 8119558:	9319      	str	r3, [sp, #100]	@ 0x64
 811955a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8119778 <_strtod_l+0x598>
 811955e:	f04f 0a00 	mov.w	sl, #0
 8119562:	e676      	b.n	8119252 <_strtod_l+0x72>
 8119564:	4881      	ldr	r0, [pc, #516]	@ (811976c <_strtod_l+0x58c>)
 8119566:	f001 fbd7 	bl	811ad18 <nan>
 811956a:	ec5b ab10 	vmov	sl, fp, d0
 811956e:	e670      	b.n	8119252 <_strtod_l+0x72>
 8119570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8119572:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8119574:	eba8 0303 	sub.w	r3, r8, r3
 8119578:	f1b9 0f00 	cmp.w	r9, #0
 811957c:	bf08      	it	eq
 811957e:	46a9      	moveq	r9, r5
 8119580:	2d10      	cmp	r5, #16
 8119582:	9309      	str	r3, [sp, #36]	@ 0x24
 8119584:	462c      	mov	r4, r5
 8119586:	bfa8      	it	ge
 8119588:	2410      	movge	r4, #16
 811958a:	f7e7 f853 	bl	8100634 <__aeabi_ui2d>
 811958e:	2d09      	cmp	r5, #9
 8119590:	4682      	mov	sl, r0
 8119592:	468b      	mov	fp, r1
 8119594:	dc13      	bgt.n	81195be <_strtod_l+0x3de>
 8119596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8119598:	2b00      	cmp	r3, #0
 811959a:	f43f ae5a 	beq.w	8119252 <_strtod_l+0x72>
 811959e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81195a0:	dd78      	ble.n	8119694 <_strtod_l+0x4b4>
 81195a2:	2b16      	cmp	r3, #22
 81195a4:	dc5f      	bgt.n	8119666 <_strtod_l+0x486>
 81195a6:	4972      	ldr	r1, [pc, #456]	@ (8119770 <_strtod_l+0x590>)
 81195a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81195ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 81195b0:	4652      	mov	r2, sl
 81195b2:	465b      	mov	r3, fp
 81195b4:	f7e7 f8b8 	bl	8100728 <__aeabi_dmul>
 81195b8:	4682      	mov	sl, r0
 81195ba:	468b      	mov	fp, r1
 81195bc:	e649      	b.n	8119252 <_strtod_l+0x72>
 81195be:	4b6c      	ldr	r3, [pc, #432]	@ (8119770 <_strtod_l+0x590>)
 81195c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81195c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 81195c8:	f7e7 f8ae 	bl	8100728 <__aeabi_dmul>
 81195cc:	4682      	mov	sl, r0
 81195ce:	4638      	mov	r0, r7
 81195d0:	468b      	mov	fp, r1
 81195d2:	f7e7 f82f 	bl	8100634 <__aeabi_ui2d>
 81195d6:	4602      	mov	r2, r0
 81195d8:	460b      	mov	r3, r1
 81195da:	4650      	mov	r0, sl
 81195dc:	4659      	mov	r1, fp
 81195de:	f7e6 feed 	bl	81003bc <__adddf3>
 81195e2:	2d0f      	cmp	r5, #15
 81195e4:	4682      	mov	sl, r0
 81195e6:	468b      	mov	fp, r1
 81195e8:	ddd5      	ble.n	8119596 <_strtod_l+0x3b6>
 81195ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81195ec:	1b2c      	subs	r4, r5, r4
 81195ee:	441c      	add	r4, r3
 81195f0:	2c00      	cmp	r4, #0
 81195f2:	f340 8093 	ble.w	811971c <_strtod_l+0x53c>
 81195f6:	f014 030f 	ands.w	r3, r4, #15
 81195fa:	d00a      	beq.n	8119612 <_strtod_l+0x432>
 81195fc:	495c      	ldr	r1, [pc, #368]	@ (8119770 <_strtod_l+0x590>)
 81195fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8119602:	4652      	mov	r2, sl
 8119604:	465b      	mov	r3, fp
 8119606:	e9d1 0100 	ldrd	r0, r1, [r1]
 811960a:	f7e7 f88d 	bl	8100728 <__aeabi_dmul>
 811960e:	4682      	mov	sl, r0
 8119610:	468b      	mov	fp, r1
 8119612:	f034 040f 	bics.w	r4, r4, #15
 8119616:	d073      	beq.n	8119700 <_strtod_l+0x520>
 8119618:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 811961c:	dd49      	ble.n	81196b2 <_strtod_l+0x4d2>
 811961e:	2400      	movs	r4, #0
 8119620:	46a0      	mov	r8, r4
 8119622:	940b      	str	r4, [sp, #44]	@ 0x2c
 8119624:	46a1      	mov	r9, r4
 8119626:	9a05      	ldr	r2, [sp, #20]
 8119628:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8119778 <_strtod_l+0x598>
 811962c:	2322      	movs	r3, #34	@ 0x22
 811962e:	6013      	str	r3, [r2, #0]
 8119630:	f04f 0a00 	mov.w	sl, #0
 8119634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8119636:	2b00      	cmp	r3, #0
 8119638:	f43f ae0b 	beq.w	8119252 <_strtod_l+0x72>
 811963c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811963e:	9805      	ldr	r0, [sp, #20]
 8119640:	f7ff f946 	bl	81188d0 <_Bfree>
 8119644:	9805      	ldr	r0, [sp, #20]
 8119646:	4649      	mov	r1, r9
 8119648:	f7ff f942 	bl	81188d0 <_Bfree>
 811964c:	9805      	ldr	r0, [sp, #20]
 811964e:	4641      	mov	r1, r8
 8119650:	f7ff f93e 	bl	81188d0 <_Bfree>
 8119654:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8119656:	9805      	ldr	r0, [sp, #20]
 8119658:	f7ff f93a 	bl	81188d0 <_Bfree>
 811965c:	9805      	ldr	r0, [sp, #20]
 811965e:	4621      	mov	r1, r4
 8119660:	f7ff f936 	bl	81188d0 <_Bfree>
 8119664:	e5f5      	b.n	8119252 <_strtod_l+0x72>
 8119666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8119668:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 811966c:	4293      	cmp	r3, r2
 811966e:	dbbc      	blt.n	81195ea <_strtod_l+0x40a>
 8119670:	4c3f      	ldr	r4, [pc, #252]	@ (8119770 <_strtod_l+0x590>)
 8119672:	f1c5 050f 	rsb	r5, r5, #15
 8119676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 811967a:	4652      	mov	r2, sl
 811967c:	465b      	mov	r3, fp
 811967e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8119682:	f7e7 f851 	bl	8100728 <__aeabi_dmul>
 8119686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8119688:	1b5d      	subs	r5, r3, r5
 811968a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 811968e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8119692:	e78f      	b.n	81195b4 <_strtod_l+0x3d4>
 8119694:	3316      	adds	r3, #22
 8119696:	dba8      	blt.n	81195ea <_strtod_l+0x40a>
 8119698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811969a:	eba3 0808 	sub.w	r8, r3, r8
 811969e:	4b34      	ldr	r3, [pc, #208]	@ (8119770 <_strtod_l+0x590>)
 81196a0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 81196a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 81196a8:	4650      	mov	r0, sl
 81196aa:	4659      	mov	r1, fp
 81196ac:	f7e7 f966 	bl	810097c <__aeabi_ddiv>
 81196b0:	e782      	b.n	81195b8 <_strtod_l+0x3d8>
 81196b2:	2300      	movs	r3, #0
 81196b4:	4f2f      	ldr	r7, [pc, #188]	@ (8119774 <_strtod_l+0x594>)
 81196b6:	1124      	asrs	r4, r4, #4
 81196b8:	4650      	mov	r0, sl
 81196ba:	4659      	mov	r1, fp
 81196bc:	461e      	mov	r6, r3
 81196be:	2c01      	cmp	r4, #1
 81196c0:	dc21      	bgt.n	8119706 <_strtod_l+0x526>
 81196c2:	b10b      	cbz	r3, 81196c8 <_strtod_l+0x4e8>
 81196c4:	4682      	mov	sl, r0
 81196c6:	468b      	mov	fp, r1
 81196c8:	492a      	ldr	r1, [pc, #168]	@ (8119774 <_strtod_l+0x594>)
 81196ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 81196ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 81196d2:	4652      	mov	r2, sl
 81196d4:	465b      	mov	r3, fp
 81196d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 81196da:	f7e7 f825 	bl	8100728 <__aeabi_dmul>
 81196de:	4b26      	ldr	r3, [pc, #152]	@ (8119778 <_strtod_l+0x598>)
 81196e0:	460a      	mov	r2, r1
 81196e2:	400b      	ands	r3, r1
 81196e4:	4925      	ldr	r1, [pc, #148]	@ (811977c <_strtod_l+0x59c>)
 81196e6:	428b      	cmp	r3, r1
 81196e8:	4682      	mov	sl, r0
 81196ea:	d898      	bhi.n	811961e <_strtod_l+0x43e>
 81196ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 81196f0:	428b      	cmp	r3, r1
 81196f2:	bf86      	itte	hi
 81196f4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8119780 <_strtod_l+0x5a0>
 81196f8:	f04f 3aff 	movhi.w	sl, #4294967295
 81196fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8119700:	2300      	movs	r3, #0
 8119702:	9308      	str	r3, [sp, #32]
 8119704:	e076      	b.n	81197f4 <_strtod_l+0x614>
 8119706:	07e2      	lsls	r2, r4, #31
 8119708:	d504      	bpl.n	8119714 <_strtod_l+0x534>
 811970a:	e9d7 2300 	ldrd	r2, r3, [r7]
 811970e:	f7e7 f80b 	bl	8100728 <__aeabi_dmul>
 8119712:	2301      	movs	r3, #1
 8119714:	3601      	adds	r6, #1
 8119716:	1064      	asrs	r4, r4, #1
 8119718:	3708      	adds	r7, #8
 811971a:	e7d0      	b.n	81196be <_strtod_l+0x4de>
 811971c:	d0f0      	beq.n	8119700 <_strtod_l+0x520>
 811971e:	4264      	negs	r4, r4
 8119720:	f014 020f 	ands.w	r2, r4, #15
 8119724:	d00a      	beq.n	811973c <_strtod_l+0x55c>
 8119726:	4b12      	ldr	r3, [pc, #72]	@ (8119770 <_strtod_l+0x590>)
 8119728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 811972c:	4650      	mov	r0, sl
 811972e:	4659      	mov	r1, fp
 8119730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119734:	f7e7 f922 	bl	810097c <__aeabi_ddiv>
 8119738:	4682      	mov	sl, r0
 811973a:	468b      	mov	fp, r1
 811973c:	1124      	asrs	r4, r4, #4
 811973e:	d0df      	beq.n	8119700 <_strtod_l+0x520>
 8119740:	2c1f      	cmp	r4, #31
 8119742:	dd1f      	ble.n	8119784 <_strtod_l+0x5a4>
 8119744:	2400      	movs	r4, #0
 8119746:	46a0      	mov	r8, r4
 8119748:	940b      	str	r4, [sp, #44]	@ 0x2c
 811974a:	46a1      	mov	r9, r4
 811974c:	9a05      	ldr	r2, [sp, #20]
 811974e:	2322      	movs	r3, #34	@ 0x22
 8119750:	f04f 0a00 	mov.w	sl, #0
 8119754:	f04f 0b00 	mov.w	fp, #0
 8119758:	6013      	str	r3, [r2, #0]
 811975a:	e76b      	b.n	8119634 <_strtod_l+0x454>
 811975c:	0811f35c 	.word	0x0811f35c
 8119760:	0811f728 	.word	0x0811f728
 8119764:	0811f354 	.word	0x0811f354
 8119768:	0811f3c5 	.word	0x0811f3c5
 811976c:	0811f3c1 	.word	0x0811f3c1
 8119770:	0811f660 	.word	0x0811f660
 8119774:	0811f638 	.word	0x0811f638
 8119778:	7ff00000 	.word	0x7ff00000
 811977c:	7ca00000 	.word	0x7ca00000
 8119780:	7fefffff 	.word	0x7fefffff
 8119784:	f014 0310 	ands.w	r3, r4, #16
 8119788:	bf18      	it	ne
 811978a:	236a      	movne	r3, #106	@ 0x6a
 811978c:	4ea9      	ldr	r6, [pc, #676]	@ (8119a34 <_strtod_l+0x854>)
 811978e:	9308      	str	r3, [sp, #32]
 8119790:	4650      	mov	r0, sl
 8119792:	4659      	mov	r1, fp
 8119794:	2300      	movs	r3, #0
 8119796:	07e7      	lsls	r7, r4, #31
 8119798:	d504      	bpl.n	81197a4 <_strtod_l+0x5c4>
 811979a:	e9d6 2300 	ldrd	r2, r3, [r6]
 811979e:	f7e6 ffc3 	bl	8100728 <__aeabi_dmul>
 81197a2:	2301      	movs	r3, #1
 81197a4:	1064      	asrs	r4, r4, #1
 81197a6:	f106 0608 	add.w	r6, r6, #8
 81197aa:	d1f4      	bne.n	8119796 <_strtod_l+0x5b6>
 81197ac:	b10b      	cbz	r3, 81197b2 <_strtod_l+0x5d2>
 81197ae:	4682      	mov	sl, r0
 81197b0:	468b      	mov	fp, r1
 81197b2:	9b08      	ldr	r3, [sp, #32]
 81197b4:	b1b3      	cbz	r3, 81197e4 <_strtod_l+0x604>
 81197b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 81197ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 81197be:	2b00      	cmp	r3, #0
 81197c0:	4659      	mov	r1, fp
 81197c2:	dd0f      	ble.n	81197e4 <_strtod_l+0x604>
 81197c4:	2b1f      	cmp	r3, #31
 81197c6:	dd56      	ble.n	8119876 <_strtod_l+0x696>
 81197c8:	2b34      	cmp	r3, #52	@ 0x34
 81197ca:	bfde      	ittt	le
 81197cc:	f04f 33ff 	movle.w	r3, #4294967295
 81197d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 81197d4:	4093      	lslle	r3, r2
 81197d6:	f04f 0a00 	mov.w	sl, #0
 81197da:	bfcc      	ite	gt
 81197dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 81197e0:	ea03 0b01 	andle.w	fp, r3, r1
 81197e4:	2200      	movs	r2, #0
 81197e6:	2300      	movs	r3, #0
 81197e8:	4650      	mov	r0, sl
 81197ea:	4659      	mov	r1, fp
 81197ec:	f7e7 fa04 	bl	8100bf8 <__aeabi_dcmpeq>
 81197f0:	2800      	cmp	r0, #0
 81197f2:	d1a7      	bne.n	8119744 <_strtod_l+0x564>
 81197f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81197f6:	9300      	str	r3, [sp, #0]
 81197f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 81197fa:	9805      	ldr	r0, [sp, #20]
 81197fc:	462b      	mov	r3, r5
 81197fe:	464a      	mov	r2, r9
 8119800:	f7ff f8ce 	bl	81189a0 <__s2b>
 8119804:	900b      	str	r0, [sp, #44]	@ 0x2c
 8119806:	2800      	cmp	r0, #0
 8119808:	f43f af09 	beq.w	811961e <_strtod_l+0x43e>
 811980c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811980e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8119810:	2a00      	cmp	r2, #0
 8119812:	eba3 0308 	sub.w	r3, r3, r8
 8119816:	bfa8      	it	ge
 8119818:	2300      	movge	r3, #0
 811981a:	9312      	str	r3, [sp, #72]	@ 0x48
 811981c:	2400      	movs	r4, #0
 811981e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8119822:	9316      	str	r3, [sp, #88]	@ 0x58
 8119824:	46a0      	mov	r8, r4
 8119826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8119828:	9805      	ldr	r0, [sp, #20]
 811982a:	6859      	ldr	r1, [r3, #4]
 811982c:	f7ff f810 	bl	8118850 <_Balloc>
 8119830:	4681      	mov	r9, r0
 8119832:	2800      	cmp	r0, #0
 8119834:	f43f aef7 	beq.w	8119626 <_strtod_l+0x446>
 8119838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 811983a:	691a      	ldr	r2, [r3, #16]
 811983c:	3202      	adds	r2, #2
 811983e:	f103 010c 	add.w	r1, r3, #12
 8119842:	0092      	lsls	r2, r2, #2
 8119844:	300c      	adds	r0, #12
 8119846:	f7fe f876 	bl	8117936 <memcpy>
 811984a:	ec4b ab10 	vmov	d0, sl, fp
 811984e:	9805      	ldr	r0, [sp, #20]
 8119850:	aa1c      	add	r2, sp, #112	@ 0x70
 8119852:	a91b      	add	r1, sp, #108	@ 0x6c
 8119854:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8119858:	f7ff fbd6 	bl	8119008 <__d2b>
 811985c:	901a      	str	r0, [sp, #104]	@ 0x68
 811985e:	2800      	cmp	r0, #0
 8119860:	f43f aee1 	beq.w	8119626 <_strtod_l+0x446>
 8119864:	9805      	ldr	r0, [sp, #20]
 8119866:	2101      	movs	r1, #1
 8119868:	f7ff f930 	bl	8118acc <__i2b>
 811986c:	4680      	mov	r8, r0
 811986e:	b948      	cbnz	r0, 8119884 <_strtod_l+0x6a4>
 8119870:	f04f 0800 	mov.w	r8, #0
 8119874:	e6d7      	b.n	8119626 <_strtod_l+0x446>
 8119876:	f04f 32ff 	mov.w	r2, #4294967295
 811987a:	fa02 f303 	lsl.w	r3, r2, r3
 811987e:	ea03 0a0a 	and.w	sl, r3, sl
 8119882:	e7af      	b.n	81197e4 <_strtod_l+0x604>
 8119884:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8119886:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8119888:	2d00      	cmp	r5, #0
 811988a:	bfab      	itete	ge
 811988c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 811988e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8119890:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8119892:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8119894:	bfac      	ite	ge
 8119896:	18ef      	addge	r7, r5, r3
 8119898:	1b5e      	sublt	r6, r3, r5
 811989a:	9b08      	ldr	r3, [sp, #32]
 811989c:	1aed      	subs	r5, r5, r3
 811989e:	4415      	add	r5, r2
 81198a0:	4b65      	ldr	r3, [pc, #404]	@ (8119a38 <_strtod_l+0x858>)
 81198a2:	3d01      	subs	r5, #1
 81198a4:	429d      	cmp	r5, r3
 81198a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 81198aa:	da50      	bge.n	811994e <_strtod_l+0x76e>
 81198ac:	1b5b      	subs	r3, r3, r5
 81198ae:	2b1f      	cmp	r3, #31
 81198b0:	eba2 0203 	sub.w	r2, r2, r3
 81198b4:	f04f 0101 	mov.w	r1, #1
 81198b8:	dc3d      	bgt.n	8119936 <_strtod_l+0x756>
 81198ba:	fa01 f303 	lsl.w	r3, r1, r3
 81198be:	9313      	str	r3, [sp, #76]	@ 0x4c
 81198c0:	2300      	movs	r3, #0
 81198c2:	9310      	str	r3, [sp, #64]	@ 0x40
 81198c4:	18bd      	adds	r5, r7, r2
 81198c6:	9b08      	ldr	r3, [sp, #32]
 81198c8:	42af      	cmp	r7, r5
 81198ca:	4416      	add	r6, r2
 81198cc:	441e      	add	r6, r3
 81198ce:	463b      	mov	r3, r7
 81198d0:	bfa8      	it	ge
 81198d2:	462b      	movge	r3, r5
 81198d4:	42b3      	cmp	r3, r6
 81198d6:	bfa8      	it	ge
 81198d8:	4633      	movge	r3, r6
 81198da:	2b00      	cmp	r3, #0
 81198dc:	bfc2      	ittt	gt
 81198de:	1aed      	subgt	r5, r5, r3
 81198e0:	1af6      	subgt	r6, r6, r3
 81198e2:	1aff      	subgt	r7, r7, r3
 81198e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81198e6:	2b00      	cmp	r3, #0
 81198e8:	dd16      	ble.n	8119918 <_strtod_l+0x738>
 81198ea:	4641      	mov	r1, r8
 81198ec:	9805      	ldr	r0, [sp, #20]
 81198ee:	461a      	mov	r2, r3
 81198f0:	f7ff f9a4 	bl	8118c3c <__pow5mult>
 81198f4:	4680      	mov	r8, r0
 81198f6:	2800      	cmp	r0, #0
 81198f8:	d0ba      	beq.n	8119870 <_strtod_l+0x690>
 81198fa:	4601      	mov	r1, r0
 81198fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 81198fe:	9805      	ldr	r0, [sp, #20]
 8119900:	f7ff f8fa 	bl	8118af8 <__multiply>
 8119904:	900a      	str	r0, [sp, #40]	@ 0x28
 8119906:	2800      	cmp	r0, #0
 8119908:	f43f ae8d 	beq.w	8119626 <_strtod_l+0x446>
 811990c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811990e:	9805      	ldr	r0, [sp, #20]
 8119910:	f7fe ffde 	bl	81188d0 <_Bfree>
 8119914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8119916:	931a      	str	r3, [sp, #104]	@ 0x68
 8119918:	2d00      	cmp	r5, #0
 811991a:	dc1d      	bgt.n	8119958 <_strtod_l+0x778>
 811991c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811991e:	2b00      	cmp	r3, #0
 8119920:	dd23      	ble.n	811996a <_strtod_l+0x78a>
 8119922:	4649      	mov	r1, r9
 8119924:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8119926:	9805      	ldr	r0, [sp, #20]
 8119928:	f7ff f988 	bl	8118c3c <__pow5mult>
 811992c:	4681      	mov	r9, r0
 811992e:	b9e0      	cbnz	r0, 811996a <_strtod_l+0x78a>
 8119930:	f04f 0900 	mov.w	r9, #0
 8119934:	e677      	b.n	8119626 <_strtod_l+0x446>
 8119936:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 811993a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 811993e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8119942:	35e2      	adds	r5, #226	@ 0xe2
 8119944:	fa01 f305 	lsl.w	r3, r1, r5
 8119948:	9310      	str	r3, [sp, #64]	@ 0x40
 811994a:	9113      	str	r1, [sp, #76]	@ 0x4c
 811994c:	e7ba      	b.n	81198c4 <_strtod_l+0x6e4>
 811994e:	2300      	movs	r3, #0
 8119950:	9310      	str	r3, [sp, #64]	@ 0x40
 8119952:	2301      	movs	r3, #1
 8119954:	9313      	str	r3, [sp, #76]	@ 0x4c
 8119956:	e7b5      	b.n	81198c4 <_strtod_l+0x6e4>
 8119958:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811995a:	9805      	ldr	r0, [sp, #20]
 811995c:	462a      	mov	r2, r5
 811995e:	f7ff f9c7 	bl	8118cf0 <__lshift>
 8119962:	901a      	str	r0, [sp, #104]	@ 0x68
 8119964:	2800      	cmp	r0, #0
 8119966:	d1d9      	bne.n	811991c <_strtod_l+0x73c>
 8119968:	e65d      	b.n	8119626 <_strtod_l+0x446>
 811996a:	2e00      	cmp	r6, #0
 811996c:	dd07      	ble.n	811997e <_strtod_l+0x79e>
 811996e:	4649      	mov	r1, r9
 8119970:	9805      	ldr	r0, [sp, #20]
 8119972:	4632      	mov	r2, r6
 8119974:	f7ff f9bc 	bl	8118cf0 <__lshift>
 8119978:	4681      	mov	r9, r0
 811997a:	2800      	cmp	r0, #0
 811997c:	d0d8      	beq.n	8119930 <_strtod_l+0x750>
 811997e:	2f00      	cmp	r7, #0
 8119980:	dd08      	ble.n	8119994 <_strtod_l+0x7b4>
 8119982:	4641      	mov	r1, r8
 8119984:	9805      	ldr	r0, [sp, #20]
 8119986:	463a      	mov	r2, r7
 8119988:	f7ff f9b2 	bl	8118cf0 <__lshift>
 811998c:	4680      	mov	r8, r0
 811998e:	2800      	cmp	r0, #0
 8119990:	f43f ae49 	beq.w	8119626 <_strtod_l+0x446>
 8119994:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8119996:	9805      	ldr	r0, [sp, #20]
 8119998:	464a      	mov	r2, r9
 811999a:	f7ff fa31 	bl	8118e00 <__mdiff>
 811999e:	4604      	mov	r4, r0
 81199a0:	2800      	cmp	r0, #0
 81199a2:	f43f ae40 	beq.w	8119626 <_strtod_l+0x446>
 81199a6:	68c3      	ldr	r3, [r0, #12]
 81199a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 81199aa:	2300      	movs	r3, #0
 81199ac:	60c3      	str	r3, [r0, #12]
 81199ae:	4641      	mov	r1, r8
 81199b0:	f7ff fa0a 	bl	8118dc8 <__mcmp>
 81199b4:	2800      	cmp	r0, #0
 81199b6:	da45      	bge.n	8119a44 <_strtod_l+0x864>
 81199b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81199ba:	ea53 030a 	orrs.w	r3, r3, sl
 81199be:	d16b      	bne.n	8119a98 <_strtod_l+0x8b8>
 81199c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81199c4:	2b00      	cmp	r3, #0
 81199c6:	d167      	bne.n	8119a98 <_strtod_l+0x8b8>
 81199c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81199cc:	0d1b      	lsrs	r3, r3, #20
 81199ce:	051b      	lsls	r3, r3, #20
 81199d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81199d4:	d960      	bls.n	8119a98 <_strtod_l+0x8b8>
 81199d6:	6963      	ldr	r3, [r4, #20]
 81199d8:	b913      	cbnz	r3, 81199e0 <_strtod_l+0x800>
 81199da:	6923      	ldr	r3, [r4, #16]
 81199dc:	2b01      	cmp	r3, #1
 81199de:	dd5b      	ble.n	8119a98 <_strtod_l+0x8b8>
 81199e0:	4621      	mov	r1, r4
 81199e2:	2201      	movs	r2, #1
 81199e4:	9805      	ldr	r0, [sp, #20]
 81199e6:	f7ff f983 	bl	8118cf0 <__lshift>
 81199ea:	4641      	mov	r1, r8
 81199ec:	4604      	mov	r4, r0
 81199ee:	f7ff f9eb 	bl	8118dc8 <__mcmp>
 81199f2:	2800      	cmp	r0, #0
 81199f4:	dd50      	ble.n	8119a98 <_strtod_l+0x8b8>
 81199f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81199fa:	9a08      	ldr	r2, [sp, #32]
 81199fc:	0d1b      	lsrs	r3, r3, #20
 81199fe:	051b      	lsls	r3, r3, #20
 8119a00:	2a00      	cmp	r2, #0
 8119a02:	d06a      	beq.n	8119ada <_strtod_l+0x8fa>
 8119a04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8119a08:	d867      	bhi.n	8119ada <_strtod_l+0x8fa>
 8119a0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8119a0e:	f67f ae9d 	bls.w	811974c <_strtod_l+0x56c>
 8119a12:	4b0a      	ldr	r3, [pc, #40]	@ (8119a3c <_strtod_l+0x85c>)
 8119a14:	4650      	mov	r0, sl
 8119a16:	4659      	mov	r1, fp
 8119a18:	2200      	movs	r2, #0
 8119a1a:	f7e6 fe85 	bl	8100728 <__aeabi_dmul>
 8119a1e:	4b08      	ldr	r3, [pc, #32]	@ (8119a40 <_strtod_l+0x860>)
 8119a20:	400b      	ands	r3, r1
 8119a22:	4682      	mov	sl, r0
 8119a24:	468b      	mov	fp, r1
 8119a26:	2b00      	cmp	r3, #0
 8119a28:	f47f ae08 	bne.w	811963c <_strtod_l+0x45c>
 8119a2c:	9a05      	ldr	r2, [sp, #20]
 8119a2e:	2322      	movs	r3, #34	@ 0x22
 8119a30:	6013      	str	r3, [r2, #0]
 8119a32:	e603      	b.n	811963c <_strtod_l+0x45c>
 8119a34:	0811f750 	.word	0x0811f750
 8119a38:	fffffc02 	.word	0xfffffc02
 8119a3c:	39500000 	.word	0x39500000
 8119a40:	7ff00000 	.word	0x7ff00000
 8119a44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8119a48:	d165      	bne.n	8119b16 <_strtod_l+0x936>
 8119a4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8119a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8119a50:	b35a      	cbz	r2, 8119aaa <_strtod_l+0x8ca>
 8119a52:	4a9f      	ldr	r2, [pc, #636]	@ (8119cd0 <_strtod_l+0xaf0>)
 8119a54:	4293      	cmp	r3, r2
 8119a56:	d12b      	bne.n	8119ab0 <_strtod_l+0x8d0>
 8119a58:	9b08      	ldr	r3, [sp, #32]
 8119a5a:	4651      	mov	r1, sl
 8119a5c:	b303      	cbz	r3, 8119aa0 <_strtod_l+0x8c0>
 8119a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8119cd4 <_strtod_l+0xaf4>)
 8119a60:	465a      	mov	r2, fp
 8119a62:	4013      	ands	r3, r2
 8119a64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8119a68:	f04f 32ff 	mov.w	r2, #4294967295
 8119a6c:	d81b      	bhi.n	8119aa6 <_strtod_l+0x8c6>
 8119a6e:	0d1b      	lsrs	r3, r3, #20
 8119a70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8119a74:	fa02 f303 	lsl.w	r3, r2, r3
 8119a78:	4299      	cmp	r1, r3
 8119a7a:	d119      	bne.n	8119ab0 <_strtod_l+0x8d0>
 8119a7c:	4b96      	ldr	r3, [pc, #600]	@ (8119cd8 <_strtod_l+0xaf8>)
 8119a7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8119a80:	429a      	cmp	r2, r3
 8119a82:	d102      	bne.n	8119a8a <_strtod_l+0x8aa>
 8119a84:	3101      	adds	r1, #1
 8119a86:	f43f adce 	beq.w	8119626 <_strtod_l+0x446>
 8119a8a:	4b92      	ldr	r3, [pc, #584]	@ (8119cd4 <_strtod_l+0xaf4>)
 8119a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8119a8e:	401a      	ands	r2, r3
 8119a90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8119a94:	f04f 0a00 	mov.w	sl, #0
 8119a98:	9b08      	ldr	r3, [sp, #32]
 8119a9a:	2b00      	cmp	r3, #0
 8119a9c:	d1b9      	bne.n	8119a12 <_strtod_l+0x832>
 8119a9e:	e5cd      	b.n	811963c <_strtod_l+0x45c>
 8119aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8119aa4:	e7e8      	b.n	8119a78 <_strtod_l+0x898>
 8119aa6:	4613      	mov	r3, r2
 8119aa8:	e7e6      	b.n	8119a78 <_strtod_l+0x898>
 8119aaa:	ea53 030a 	orrs.w	r3, r3, sl
 8119aae:	d0a2      	beq.n	81199f6 <_strtod_l+0x816>
 8119ab0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8119ab2:	b1db      	cbz	r3, 8119aec <_strtod_l+0x90c>
 8119ab4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8119ab6:	4213      	tst	r3, r2
 8119ab8:	d0ee      	beq.n	8119a98 <_strtod_l+0x8b8>
 8119aba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8119abc:	9a08      	ldr	r2, [sp, #32]
 8119abe:	4650      	mov	r0, sl
 8119ac0:	4659      	mov	r1, fp
 8119ac2:	b1bb      	cbz	r3, 8119af4 <_strtod_l+0x914>
 8119ac4:	f7ff fb6e 	bl	81191a4 <sulp>
 8119ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8119acc:	ec53 2b10 	vmov	r2, r3, d0
 8119ad0:	f7e6 fc74 	bl	81003bc <__adddf3>
 8119ad4:	4682      	mov	sl, r0
 8119ad6:	468b      	mov	fp, r1
 8119ad8:	e7de      	b.n	8119a98 <_strtod_l+0x8b8>
 8119ada:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8119ade:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8119ae2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8119ae6:	f04f 3aff 	mov.w	sl, #4294967295
 8119aea:	e7d5      	b.n	8119a98 <_strtod_l+0x8b8>
 8119aec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8119aee:	ea13 0f0a 	tst.w	r3, sl
 8119af2:	e7e1      	b.n	8119ab8 <_strtod_l+0x8d8>
 8119af4:	f7ff fb56 	bl	81191a4 <sulp>
 8119af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8119afc:	ec53 2b10 	vmov	r2, r3, d0
 8119b00:	f7e6 fc5a 	bl	81003b8 <__aeabi_dsub>
 8119b04:	2200      	movs	r2, #0
 8119b06:	2300      	movs	r3, #0
 8119b08:	4682      	mov	sl, r0
 8119b0a:	468b      	mov	fp, r1
 8119b0c:	f7e7 f874 	bl	8100bf8 <__aeabi_dcmpeq>
 8119b10:	2800      	cmp	r0, #0
 8119b12:	d0c1      	beq.n	8119a98 <_strtod_l+0x8b8>
 8119b14:	e61a      	b.n	811974c <_strtod_l+0x56c>
 8119b16:	4641      	mov	r1, r8
 8119b18:	4620      	mov	r0, r4
 8119b1a:	f7ff facd 	bl	81190b8 <__ratio>
 8119b1e:	ec57 6b10 	vmov	r6, r7, d0
 8119b22:	2200      	movs	r2, #0
 8119b24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8119b28:	4630      	mov	r0, r6
 8119b2a:	4639      	mov	r1, r7
 8119b2c:	f7e7 f878 	bl	8100c20 <__aeabi_dcmple>
 8119b30:	2800      	cmp	r0, #0
 8119b32:	d06f      	beq.n	8119c14 <_strtod_l+0xa34>
 8119b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8119b36:	2b00      	cmp	r3, #0
 8119b38:	d17a      	bne.n	8119c30 <_strtod_l+0xa50>
 8119b3a:	f1ba 0f00 	cmp.w	sl, #0
 8119b3e:	d158      	bne.n	8119bf2 <_strtod_l+0xa12>
 8119b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8119b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8119b46:	2b00      	cmp	r3, #0
 8119b48:	d15a      	bne.n	8119c00 <_strtod_l+0xa20>
 8119b4a:	4b64      	ldr	r3, [pc, #400]	@ (8119cdc <_strtod_l+0xafc>)
 8119b4c:	2200      	movs	r2, #0
 8119b4e:	4630      	mov	r0, r6
 8119b50:	4639      	mov	r1, r7
 8119b52:	f7e7 f85b 	bl	8100c0c <__aeabi_dcmplt>
 8119b56:	2800      	cmp	r0, #0
 8119b58:	d159      	bne.n	8119c0e <_strtod_l+0xa2e>
 8119b5a:	4630      	mov	r0, r6
 8119b5c:	4639      	mov	r1, r7
 8119b5e:	4b60      	ldr	r3, [pc, #384]	@ (8119ce0 <_strtod_l+0xb00>)
 8119b60:	2200      	movs	r2, #0
 8119b62:	f7e6 fde1 	bl	8100728 <__aeabi_dmul>
 8119b66:	4606      	mov	r6, r0
 8119b68:	460f      	mov	r7, r1
 8119b6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8119b6e:	9606      	str	r6, [sp, #24]
 8119b70:	9307      	str	r3, [sp, #28]
 8119b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8119b76:	4d57      	ldr	r5, [pc, #348]	@ (8119cd4 <_strtod_l+0xaf4>)
 8119b78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8119b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8119b7e:	401d      	ands	r5, r3
 8119b80:	4b58      	ldr	r3, [pc, #352]	@ (8119ce4 <_strtod_l+0xb04>)
 8119b82:	429d      	cmp	r5, r3
 8119b84:	f040 80b2 	bne.w	8119cec <_strtod_l+0xb0c>
 8119b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8119b8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8119b8e:	ec4b ab10 	vmov	d0, sl, fp
 8119b92:	f7ff f9c9 	bl	8118f28 <__ulp>
 8119b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8119b9a:	ec51 0b10 	vmov	r0, r1, d0
 8119b9e:	f7e6 fdc3 	bl	8100728 <__aeabi_dmul>
 8119ba2:	4652      	mov	r2, sl
 8119ba4:	465b      	mov	r3, fp
 8119ba6:	f7e6 fc09 	bl	81003bc <__adddf3>
 8119baa:	460b      	mov	r3, r1
 8119bac:	4949      	ldr	r1, [pc, #292]	@ (8119cd4 <_strtod_l+0xaf4>)
 8119bae:	4a4e      	ldr	r2, [pc, #312]	@ (8119ce8 <_strtod_l+0xb08>)
 8119bb0:	4019      	ands	r1, r3
 8119bb2:	4291      	cmp	r1, r2
 8119bb4:	4682      	mov	sl, r0
 8119bb6:	d942      	bls.n	8119c3e <_strtod_l+0xa5e>
 8119bb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8119bba:	4b47      	ldr	r3, [pc, #284]	@ (8119cd8 <_strtod_l+0xaf8>)
 8119bbc:	429a      	cmp	r2, r3
 8119bbe:	d103      	bne.n	8119bc8 <_strtod_l+0x9e8>
 8119bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8119bc2:	3301      	adds	r3, #1
 8119bc4:	f43f ad2f 	beq.w	8119626 <_strtod_l+0x446>
 8119bc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8119cd8 <_strtod_l+0xaf8>
 8119bcc:	f04f 3aff 	mov.w	sl, #4294967295
 8119bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8119bd2:	9805      	ldr	r0, [sp, #20]
 8119bd4:	f7fe fe7c 	bl	81188d0 <_Bfree>
 8119bd8:	9805      	ldr	r0, [sp, #20]
 8119bda:	4649      	mov	r1, r9
 8119bdc:	f7fe fe78 	bl	81188d0 <_Bfree>
 8119be0:	9805      	ldr	r0, [sp, #20]
 8119be2:	4641      	mov	r1, r8
 8119be4:	f7fe fe74 	bl	81188d0 <_Bfree>
 8119be8:	9805      	ldr	r0, [sp, #20]
 8119bea:	4621      	mov	r1, r4
 8119bec:	f7fe fe70 	bl	81188d0 <_Bfree>
 8119bf0:	e619      	b.n	8119826 <_strtod_l+0x646>
 8119bf2:	f1ba 0f01 	cmp.w	sl, #1
 8119bf6:	d103      	bne.n	8119c00 <_strtod_l+0xa20>
 8119bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8119bfa:	2b00      	cmp	r3, #0
 8119bfc:	f43f ada6 	beq.w	811974c <_strtod_l+0x56c>
 8119c00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8119cb0 <_strtod_l+0xad0>
 8119c04:	4f35      	ldr	r7, [pc, #212]	@ (8119cdc <_strtod_l+0xafc>)
 8119c06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8119c0a:	2600      	movs	r6, #0
 8119c0c:	e7b1      	b.n	8119b72 <_strtod_l+0x992>
 8119c0e:	4f34      	ldr	r7, [pc, #208]	@ (8119ce0 <_strtod_l+0xb00>)
 8119c10:	2600      	movs	r6, #0
 8119c12:	e7aa      	b.n	8119b6a <_strtod_l+0x98a>
 8119c14:	4b32      	ldr	r3, [pc, #200]	@ (8119ce0 <_strtod_l+0xb00>)
 8119c16:	4630      	mov	r0, r6
 8119c18:	4639      	mov	r1, r7
 8119c1a:	2200      	movs	r2, #0
 8119c1c:	f7e6 fd84 	bl	8100728 <__aeabi_dmul>
 8119c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8119c22:	4606      	mov	r6, r0
 8119c24:	460f      	mov	r7, r1
 8119c26:	2b00      	cmp	r3, #0
 8119c28:	d09f      	beq.n	8119b6a <_strtod_l+0x98a>
 8119c2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8119c2e:	e7a0      	b.n	8119b72 <_strtod_l+0x992>
 8119c30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8119cb8 <_strtod_l+0xad8>
 8119c34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8119c38:	ec57 6b17 	vmov	r6, r7, d7
 8119c3c:	e799      	b.n	8119b72 <_strtod_l+0x992>
 8119c3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8119c42:	9b08      	ldr	r3, [sp, #32]
 8119c44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8119c48:	2b00      	cmp	r3, #0
 8119c4a:	d1c1      	bne.n	8119bd0 <_strtod_l+0x9f0>
 8119c4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8119c50:	0d1b      	lsrs	r3, r3, #20
 8119c52:	051b      	lsls	r3, r3, #20
 8119c54:	429d      	cmp	r5, r3
 8119c56:	d1bb      	bne.n	8119bd0 <_strtod_l+0x9f0>
 8119c58:	4630      	mov	r0, r6
 8119c5a:	4639      	mov	r1, r7
 8119c5c:	f7e7 f8c4 	bl	8100de8 <__aeabi_d2lz>
 8119c60:	f7e6 fd34 	bl	81006cc <__aeabi_l2d>
 8119c64:	4602      	mov	r2, r0
 8119c66:	460b      	mov	r3, r1
 8119c68:	4630      	mov	r0, r6
 8119c6a:	4639      	mov	r1, r7
 8119c6c:	f7e6 fba4 	bl	81003b8 <__aeabi_dsub>
 8119c70:	460b      	mov	r3, r1
 8119c72:	4602      	mov	r2, r0
 8119c74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8119c78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8119c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8119c7e:	ea46 060a 	orr.w	r6, r6, sl
 8119c82:	431e      	orrs	r6, r3
 8119c84:	d06f      	beq.n	8119d66 <_strtod_l+0xb86>
 8119c86:	a30e      	add	r3, pc, #56	@ (adr r3, 8119cc0 <_strtod_l+0xae0>)
 8119c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119c8c:	f7e6 ffbe 	bl	8100c0c <__aeabi_dcmplt>
 8119c90:	2800      	cmp	r0, #0
 8119c92:	f47f acd3 	bne.w	811963c <_strtod_l+0x45c>
 8119c96:	a30c      	add	r3, pc, #48	@ (adr r3, 8119cc8 <_strtod_l+0xae8>)
 8119c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119c9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8119ca0:	f7e6 ffd2 	bl	8100c48 <__aeabi_dcmpgt>
 8119ca4:	2800      	cmp	r0, #0
 8119ca6:	d093      	beq.n	8119bd0 <_strtod_l+0x9f0>
 8119ca8:	e4c8      	b.n	811963c <_strtod_l+0x45c>
 8119caa:	bf00      	nop
 8119cac:	f3af 8000 	nop.w
 8119cb0:	00000000 	.word	0x00000000
 8119cb4:	bff00000 	.word	0xbff00000
 8119cb8:	00000000 	.word	0x00000000
 8119cbc:	3ff00000 	.word	0x3ff00000
 8119cc0:	94a03595 	.word	0x94a03595
 8119cc4:	3fdfffff 	.word	0x3fdfffff
 8119cc8:	35afe535 	.word	0x35afe535
 8119ccc:	3fe00000 	.word	0x3fe00000
 8119cd0:	000fffff 	.word	0x000fffff
 8119cd4:	7ff00000 	.word	0x7ff00000
 8119cd8:	7fefffff 	.word	0x7fefffff
 8119cdc:	3ff00000 	.word	0x3ff00000
 8119ce0:	3fe00000 	.word	0x3fe00000
 8119ce4:	7fe00000 	.word	0x7fe00000
 8119ce8:	7c9fffff 	.word	0x7c9fffff
 8119cec:	9b08      	ldr	r3, [sp, #32]
 8119cee:	b323      	cbz	r3, 8119d3a <_strtod_l+0xb5a>
 8119cf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8119cf4:	d821      	bhi.n	8119d3a <_strtod_l+0xb5a>
 8119cf6:	a328      	add	r3, pc, #160	@ (adr r3, 8119d98 <_strtod_l+0xbb8>)
 8119cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119cfc:	4630      	mov	r0, r6
 8119cfe:	4639      	mov	r1, r7
 8119d00:	f7e6 ff8e 	bl	8100c20 <__aeabi_dcmple>
 8119d04:	b1a0      	cbz	r0, 8119d30 <_strtod_l+0xb50>
 8119d06:	4639      	mov	r1, r7
 8119d08:	4630      	mov	r0, r6
 8119d0a:	f7e6 ffe5 	bl	8100cd8 <__aeabi_d2uiz>
 8119d0e:	2801      	cmp	r0, #1
 8119d10:	bf38      	it	cc
 8119d12:	2001      	movcc	r0, #1
 8119d14:	f7e6 fc8e 	bl	8100634 <__aeabi_ui2d>
 8119d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8119d1a:	4606      	mov	r6, r0
 8119d1c:	460f      	mov	r7, r1
 8119d1e:	b9fb      	cbnz	r3, 8119d60 <_strtod_l+0xb80>
 8119d20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8119d24:	9014      	str	r0, [sp, #80]	@ 0x50
 8119d26:	9315      	str	r3, [sp, #84]	@ 0x54
 8119d28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8119d2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8119d30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8119d32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8119d36:	1b5b      	subs	r3, r3, r5
 8119d38:	9311      	str	r3, [sp, #68]	@ 0x44
 8119d3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8119d3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8119d42:	f7ff f8f1 	bl	8118f28 <__ulp>
 8119d46:	4650      	mov	r0, sl
 8119d48:	ec53 2b10 	vmov	r2, r3, d0
 8119d4c:	4659      	mov	r1, fp
 8119d4e:	f7e6 fceb 	bl	8100728 <__aeabi_dmul>
 8119d52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8119d56:	f7e6 fb31 	bl	81003bc <__adddf3>
 8119d5a:	4682      	mov	sl, r0
 8119d5c:	468b      	mov	fp, r1
 8119d5e:	e770      	b.n	8119c42 <_strtod_l+0xa62>
 8119d60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8119d64:	e7e0      	b.n	8119d28 <_strtod_l+0xb48>
 8119d66:	a30e      	add	r3, pc, #56	@ (adr r3, 8119da0 <_strtod_l+0xbc0>)
 8119d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119d6c:	f7e6 ff4e 	bl	8100c0c <__aeabi_dcmplt>
 8119d70:	e798      	b.n	8119ca4 <_strtod_l+0xac4>
 8119d72:	2300      	movs	r3, #0
 8119d74:	930e      	str	r3, [sp, #56]	@ 0x38
 8119d76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8119d78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8119d7a:	6013      	str	r3, [r2, #0]
 8119d7c:	f7ff ba6d 	b.w	811925a <_strtod_l+0x7a>
 8119d80:	2a65      	cmp	r2, #101	@ 0x65
 8119d82:	f43f ab68 	beq.w	8119456 <_strtod_l+0x276>
 8119d86:	2a45      	cmp	r2, #69	@ 0x45
 8119d88:	f43f ab65 	beq.w	8119456 <_strtod_l+0x276>
 8119d8c:	2301      	movs	r3, #1
 8119d8e:	f7ff bba0 	b.w	81194d2 <_strtod_l+0x2f2>
 8119d92:	bf00      	nop
 8119d94:	f3af 8000 	nop.w
 8119d98:	ffc00000 	.word	0xffc00000
 8119d9c:	41dfffff 	.word	0x41dfffff
 8119da0:	94a03595 	.word	0x94a03595
 8119da4:	3fcfffff 	.word	0x3fcfffff

08119da8 <_strtod_r>:
 8119da8:	4b01      	ldr	r3, [pc, #4]	@ (8119db0 <_strtod_r+0x8>)
 8119daa:	f7ff ba19 	b.w	81191e0 <_strtod_l>
 8119dae:	bf00      	nop
 8119db0:	10000228 	.word	0x10000228

08119db4 <__ssputs_r>:
 8119db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8119db8:	688e      	ldr	r6, [r1, #8]
 8119dba:	461f      	mov	r7, r3
 8119dbc:	42be      	cmp	r6, r7
 8119dbe:	680b      	ldr	r3, [r1, #0]
 8119dc0:	4682      	mov	sl, r0
 8119dc2:	460c      	mov	r4, r1
 8119dc4:	4690      	mov	r8, r2
 8119dc6:	d82d      	bhi.n	8119e24 <__ssputs_r+0x70>
 8119dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8119dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8119dd0:	d026      	beq.n	8119e20 <__ssputs_r+0x6c>
 8119dd2:	6965      	ldr	r5, [r4, #20]
 8119dd4:	6909      	ldr	r1, [r1, #16]
 8119dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8119dda:	eba3 0901 	sub.w	r9, r3, r1
 8119dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8119de2:	1c7b      	adds	r3, r7, #1
 8119de4:	444b      	add	r3, r9
 8119de6:	106d      	asrs	r5, r5, #1
 8119de8:	429d      	cmp	r5, r3
 8119dea:	bf38      	it	cc
 8119dec:	461d      	movcc	r5, r3
 8119dee:	0553      	lsls	r3, r2, #21
 8119df0:	d527      	bpl.n	8119e42 <__ssputs_r+0x8e>
 8119df2:	4629      	mov	r1, r5
 8119df4:	f7fe fca0 	bl	8118738 <_malloc_r>
 8119df8:	4606      	mov	r6, r0
 8119dfa:	b360      	cbz	r0, 8119e56 <__ssputs_r+0xa2>
 8119dfc:	6921      	ldr	r1, [r4, #16]
 8119dfe:	464a      	mov	r2, r9
 8119e00:	f7fd fd99 	bl	8117936 <memcpy>
 8119e04:	89a3      	ldrh	r3, [r4, #12]
 8119e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8119e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8119e0e:	81a3      	strh	r3, [r4, #12]
 8119e10:	6126      	str	r6, [r4, #16]
 8119e12:	6165      	str	r5, [r4, #20]
 8119e14:	444e      	add	r6, r9
 8119e16:	eba5 0509 	sub.w	r5, r5, r9
 8119e1a:	6026      	str	r6, [r4, #0]
 8119e1c:	60a5      	str	r5, [r4, #8]
 8119e1e:	463e      	mov	r6, r7
 8119e20:	42be      	cmp	r6, r7
 8119e22:	d900      	bls.n	8119e26 <__ssputs_r+0x72>
 8119e24:	463e      	mov	r6, r7
 8119e26:	6820      	ldr	r0, [r4, #0]
 8119e28:	4632      	mov	r2, r6
 8119e2a:	4641      	mov	r1, r8
 8119e2c:	f7fd fcb4 	bl	8117798 <memmove>
 8119e30:	68a3      	ldr	r3, [r4, #8]
 8119e32:	1b9b      	subs	r3, r3, r6
 8119e34:	60a3      	str	r3, [r4, #8]
 8119e36:	6823      	ldr	r3, [r4, #0]
 8119e38:	4433      	add	r3, r6
 8119e3a:	6023      	str	r3, [r4, #0]
 8119e3c:	2000      	movs	r0, #0
 8119e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8119e42:	462a      	mov	r2, r5
 8119e44:	f001 fad5 	bl	811b3f2 <_realloc_r>
 8119e48:	4606      	mov	r6, r0
 8119e4a:	2800      	cmp	r0, #0
 8119e4c:	d1e0      	bne.n	8119e10 <__ssputs_r+0x5c>
 8119e4e:	6921      	ldr	r1, [r4, #16]
 8119e50:	4650      	mov	r0, sl
 8119e52:	f7fe fbfd 	bl	8118650 <_free_r>
 8119e56:	230c      	movs	r3, #12
 8119e58:	f8ca 3000 	str.w	r3, [sl]
 8119e5c:	89a3      	ldrh	r3, [r4, #12]
 8119e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8119e62:	81a3      	strh	r3, [r4, #12]
 8119e64:	f04f 30ff 	mov.w	r0, #4294967295
 8119e68:	e7e9      	b.n	8119e3e <__ssputs_r+0x8a>
	...

08119e6c <_svfiprintf_r>:
 8119e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8119e70:	4698      	mov	r8, r3
 8119e72:	898b      	ldrh	r3, [r1, #12]
 8119e74:	061b      	lsls	r3, r3, #24
 8119e76:	b09d      	sub	sp, #116	@ 0x74
 8119e78:	4607      	mov	r7, r0
 8119e7a:	460d      	mov	r5, r1
 8119e7c:	4614      	mov	r4, r2
 8119e7e:	d510      	bpl.n	8119ea2 <_svfiprintf_r+0x36>
 8119e80:	690b      	ldr	r3, [r1, #16]
 8119e82:	b973      	cbnz	r3, 8119ea2 <_svfiprintf_r+0x36>
 8119e84:	2140      	movs	r1, #64	@ 0x40
 8119e86:	f7fe fc57 	bl	8118738 <_malloc_r>
 8119e8a:	6028      	str	r0, [r5, #0]
 8119e8c:	6128      	str	r0, [r5, #16]
 8119e8e:	b930      	cbnz	r0, 8119e9e <_svfiprintf_r+0x32>
 8119e90:	230c      	movs	r3, #12
 8119e92:	603b      	str	r3, [r7, #0]
 8119e94:	f04f 30ff 	mov.w	r0, #4294967295
 8119e98:	b01d      	add	sp, #116	@ 0x74
 8119e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8119e9e:	2340      	movs	r3, #64	@ 0x40
 8119ea0:	616b      	str	r3, [r5, #20]
 8119ea2:	2300      	movs	r3, #0
 8119ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8119ea6:	2320      	movs	r3, #32
 8119ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8119eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8119eb0:	2330      	movs	r3, #48	@ 0x30
 8119eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 811a050 <_svfiprintf_r+0x1e4>
 8119eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8119eba:	f04f 0901 	mov.w	r9, #1
 8119ebe:	4623      	mov	r3, r4
 8119ec0:	469a      	mov	sl, r3
 8119ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8119ec6:	b10a      	cbz	r2, 8119ecc <_svfiprintf_r+0x60>
 8119ec8:	2a25      	cmp	r2, #37	@ 0x25
 8119eca:	d1f9      	bne.n	8119ec0 <_svfiprintf_r+0x54>
 8119ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8119ed0:	d00b      	beq.n	8119eea <_svfiprintf_r+0x7e>
 8119ed2:	465b      	mov	r3, fp
 8119ed4:	4622      	mov	r2, r4
 8119ed6:	4629      	mov	r1, r5
 8119ed8:	4638      	mov	r0, r7
 8119eda:	f7ff ff6b 	bl	8119db4 <__ssputs_r>
 8119ede:	3001      	adds	r0, #1
 8119ee0:	f000 80a7 	beq.w	811a032 <_svfiprintf_r+0x1c6>
 8119ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8119ee6:	445a      	add	r2, fp
 8119ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8119eea:	f89a 3000 	ldrb.w	r3, [sl]
 8119eee:	2b00      	cmp	r3, #0
 8119ef0:	f000 809f 	beq.w	811a032 <_svfiprintf_r+0x1c6>
 8119ef4:	2300      	movs	r3, #0
 8119ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8119efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8119efe:	f10a 0a01 	add.w	sl, sl, #1
 8119f02:	9304      	str	r3, [sp, #16]
 8119f04:	9307      	str	r3, [sp, #28]
 8119f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8119f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8119f0c:	4654      	mov	r4, sl
 8119f0e:	2205      	movs	r2, #5
 8119f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8119f14:	484e      	ldr	r0, [pc, #312]	@ (811a050 <_svfiprintf_r+0x1e4>)
 8119f16:	f7e6 f9f3 	bl	8100300 <memchr>
 8119f1a:	9a04      	ldr	r2, [sp, #16]
 8119f1c:	b9d8      	cbnz	r0, 8119f56 <_svfiprintf_r+0xea>
 8119f1e:	06d0      	lsls	r0, r2, #27
 8119f20:	bf44      	itt	mi
 8119f22:	2320      	movmi	r3, #32
 8119f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8119f28:	0711      	lsls	r1, r2, #28
 8119f2a:	bf44      	itt	mi
 8119f2c:	232b      	movmi	r3, #43	@ 0x2b
 8119f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8119f32:	f89a 3000 	ldrb.w	r3, [sl]
 8119f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8119f38:	d015      	beq.n	8119f66 <_svfiprintf_r+0xfa>
 8119f3a:	9a07      	ldr	r2, [sp, #28]
 8119f3c:	4654      	mov	r4, sl
 8119f3e:	2000      	movs	r0, #0
 8119f40:	f04f 0c0a 	mov.w	ip, #10
 8119f44:	4621      	mov	r1, r4
 8119f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8119f4a:	3b30      	subs	r3, #48	@ 0x30
 8119f4c:	2b09      	cmp	r3, #9
 8119f4e:	d94b      	bls.n	8119fe8 <_svfiprintf_r+0x17c>
 8119f50:	b1b0      	cbz	r0, 8119f80 <_svfiprintf_r+0x114>
 8119f52:	9207      	str	r2, [sp, #28]
 8119f54:	e014      	b.n	8119f80 <_svfiprintf_r+0x114>
 8119f56:	eba0 0308 	sub.w	r3, r0, r8
 8119f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8119f5e:	4313      	orrs	r3, r2
 8119f60:	9304      	str	r3, [sp, #16]
 8119f62:	46a2      	mov	sl, r4
 8119f64:	e7d2      	b.n	8119f0c <_svfiprintf_r+0xa0>
 8119f66:	9b03      	ldr	r3, [sp, #12]
 8119f68:	1d19      	adds	r1, r3, #4
 8119f6a:	681b      	ldr	r3, [r3, #0]
 8119f6c:	9103      	str	r1, [sp, #12]
 8119f6e:	2b00      	cmp	r3, #0
 8119f70:	bfbb      	ittet	lt
 8119f72:	425b      	neglt	r3, r3
 8119f74:	f042 0202 	orrlt.w	r2, r2, #2
 8119f78:	9307      	strge	r3, [sp, #28]
 8119f7a:	9307      	strlt	r3, [sp, #28]
 8119f7c:	bfb8      	it	lt
 8119f7e:	9204      	strlt	r2, [sp, #16]
 8119f80:	7823      	ldrb	r3, [r4, #0]
 8119f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8119f84:	d10a      	bne.n	8119f9c <_svfiprintf_r+0x130>
 8119f86:	7863      	ldrb	r3, [r4, #1]
 8119f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8119f8a:	d132      	bne.n	8119ff2 <_svfiprintf_r+0x186>
 8119f8c:	9b03      	ldr	r3, [sp, #12]
 8119f8e:	1d1a      	adds	r2, r3, #4
 8119f90:	681b      	ldr	r3, [r3, #0]
 8119f92:	9203      	str	r2, [sp, #12]
 8119f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8119f98:	3402      	adds	r4, #2
 8119f9a:	9305      	str	r3, [sp, #20]
 8119f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 811a060 <_svfiprintf_r+0x1f4>
 8119fa0:	7821      	ldrb	r1, [r4, #0]
 8119fa2:	2203      	movs	r2, #3
 8119fa4:	4650      	mov	r0, sl
 8119fa6:	f7e6 f9ab 	bl	8100300 <memchr>
 8119faa:	b138      	cbz	r0, 8119fbc <_svfiprintf_r+0x150>
 8119fac:	9b04      	ldr	r3, [sp, #16]
 8119fae:	eba0 000a 	sub.w	r0, r0, sl
 8119fb2:	2240      	movs	r2, #64	@ 0x40
 8119fb4:	4082      	lsls	r2, r0
 8119fb6:	4313      	orrs	r3, r2
 8119fb8:	3401      	adds	r4, #1
 8119fba:	9304      	str	r3, [sp, #16]
 8119fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8119fc0:	4824      	ldr	r0, [pc, #144]	@ (811a054 <_svfiprintf_r+0x1e8>)
 8119fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8119fc6:	2206      	movs	r2, #6
 8119fc8:	f7e6 f99a 	bl	8100300 <memchr>
 8119fcc:	2800      	cmp	r0, #0
 8119fce:	d036      	beq.n	811a03e <_svfiprintf_r+0x1d2>
 8119fd0:	4b21      	ldr	r3, [pc, #132]	@ (811a058 <_svfiprintf_r+0x1ec>)
 8119fd2:	bb1b      	cbnz	r3, 811a01c <_svfiprintf_r+0x1b0>
 8119fd4:	9b03      	ldr	r3, [sp, #12]
 8119fd6:	3307      	adds	r3, #7
 8119fd8:	f023 0307 	bic.w	r3, r3, #7
 8119fdc:	3308      	adds	r3, #8
 8119fde:	9303      	str	r3, [sp, #12]
 8119fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8119fe2:	4433      	add	r3, r6
 8119fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8119fe6:	e76a      	b.n	8119ebe <_svfiprintf_r+0x52>
 8119fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8119fec:	460c      	mov	r4, r1
 8119fee:	2001      	movs	r0, #1
 8119ff0:	e7a8      	b.n	8119f44 <_svfiprintf_r+0xd8>
 8119ff2:	2300      	movs	r3, #0
 8119ff4:	3401      	adds	r4, #1
 8119ff6:	9305      	str	r3, [sp, #20]
 8119ff8:	4619      	mov	r1, r3
 8119ffa:	f04f 0c0a 	mov.w	ip, #10
 8119ffe:	4620      	mov	r0, r4
 811a000:	f810 2b01 	ldrb.w	r2, [r0], #1
 811a004:	3a30      	subs	r2, #48	@ 0x30
 811a006:	2a09      	cmp	r2, #9
 811a008:	d903      	bls.n	811a012 <_svfiprintf_r+0x1a6>
 811a00a:	2b00      	cmp	r3, #0
 811a00c:	d0c6      	beq.n	8119f9c <_svfiprintf_r+0x130>
 811a00e:	9105      	str	r1, [sp, #20]
 811a010:	e7c4      	b.n	8119f9c <_svfiprintf_r+0x130>
 811a012:	fb0c 2101 	mla	r1, ip, r1, r2
 811a016:	4604      	mov	r4, r0
 811a018:	2301      	movs	r3, #1
 811a01a:	e7f0      	b.n	8119ffe <_svfiprintf_r+0x192>
 811a01c:	ab03      	add	r3, sp, #12
 811a01e:	9300      	str	r3, [sp, #0]
 811a020:	462a      	mov	r2, r5
 811a022:	4b0e      	ldr	r3, [pc, #56]	@ (811a05c <_svfiprintf_r+0x1f0>)
 811a024:	a904      	add	r1, sp, #16
 811a026:	4638      	mov	r0, r7
 811a028:	f7fc fb80 	bl	811672c <_printf_float>
 811a02c:	1c42      	adds	r2, r0, #1
 811a02e:	4606      	mov	r6, r0
 811a030:	d1d6      	bne.n	8119fe0 <_svfiprintf_r+0x174>
 811a032:	89ab      	ldrh	r3, [r5, #12]
 811a034:	065b      	lsls	r3, r3, #25
 811a036:	f53f af2d 	bmi.w	8119e94 <_svfiprintf_r+0x28>
 811a03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 811a03c:	e72c      	b.n	8119e98 <_svfiprintf_r+0x2c>
 811a03e:	ab03      	add	r3, sp, #12
 811a040:	9300      	str	r3, [sp, #0]
 811a042:	462a      	mov	r2, r5
 811a044:	4b05      	ldr	r3, [pc, #20]	@ (811a05c <_svfiprintf_r+0x1f0>)
 811a046:	a904      	add	r1, sp, #16
 811a048:	4638      	mov	r0, r7
 811a04a:	f7fc fe07 	bl	8116c5c <_printf_i>
 811a04e:	e7ed      	b.n	811a02c <_svfiprintf_r+0x1c0>
 811a050:	0811f493 	.word	0x0811f493
 811a054:	0811f49d 	.word	0x0811f49d
 811a058:	0811672d 	.word	0x0811672d
 811a05c:	08119db5 	.word	0x08119db5
 811a060:	0811f499 	.word	0x0811f499

0811a064 <_sungetc_r>:
 811a064:	b538      	push	{r3, r4, r5, lr}
 811a066:	1c4b      	adds	r3, r1, #1
 811a068:	4614      	mov	r4, r2
 811a06a:	d103      	bne.n	811a074 <_sungetc_r+0x10>
 811a06c:	f04f 35ff 	mov.w	r5, #4294967295
 811a070:	4628      	mov	r0, r5
 811a072:	bd38      	pop	{r3, r4, r5, pc}
 811a074:	8993      	ldrh	r3, [r2, #12]
 811a076:	f023 0320 	bic.w	r3, r3, #32
 811a07a:	8193      	strh	r3, [r2, #12]
 811a07c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 811a07e:	6852      	ldr	r2, [r2, #4]
 811a080:	b2cd      	uxtb	r5, r1
 811a082:	b18b      	cbz	r3, 811a0a8 <_sungetc_r+0x44>
 811a084:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 811a086:	4293      	cmp	r3, r2
 811a088:	dd08      	ble.n	811a09c <_sungetc_r+0x38>
 811a08a:	6823      	ldr	r3, [r4, #0]
 811a08c:	1e5a      	subs	r2, r3, #1
 811a08e:	6022      	str	r2, [r4, #0]
 811a090:	f803 5c01 	strb.w	r5, [r3, #-1]
 811a094:	6863      	ldr	r3, [r4, #4]
 811a096:	3301      	adds	r3, #1
 811a098:	6063      	str	r3, [r4, #4]
 811a09a:	e7e9      	b.n	811a070 <_sungetc_r+0xc>
 811a09c:	4621      	mov	r1, r4
 811a09e:	f000 fdce 	bl	811ac3e <__submore>
 811a0a2:	2800      	cmp	r0, #0
 811a0a4:	d0f1      	beq.n	811a08a <_sungetc_r+0x26>
 811a0a6:	e7e1      	b.n	811a06c <_sungetc_r+0x8>
 811a0a8:	6921      	ldr	r1, [r4, #16]
 811a0aa:	6823      	ldr	r3, [r4, #0]
 811a0ac:	b151      	cbz	r1, 811a0c4 <_sungetc_r+0x60>
 811a0ae:	4299      	cmp	r1, r3
 811a0b0:	d208      	bcs.n	811a0c4 <_sungetc_r+0x60>
 811a0b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 811a0b6:	42a9      	cmp	r1, r5
 811a0b8:	d104      	bne.n	811a0c4 <_sungetc_r+0x60>
 811a0ba:	3b01      	subs	r3, #1
 811a0bc:	3201      	adds	r2, #1
 811a0be:	6023      	str	r3, [r4, #0]
 811a0c0:	6062      	str	r2, [r4, #4]
 811a0c2:	e7d5      	b.n	811a070 <_sungetc_r+0xc>
 811a0c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 811a0c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811a0cc:	6363      	str	r3, [r4, #52]	@ 0x34
 811a0ce:	2303      	movs	r3, #3
 811a0d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 811a0d2:	4623      	mov	r3, r4
 811a0d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 811a0d8:	6023      	str	r3, [r4, #0]
 811a0da:	2301      	movs	r3, #1
 811a0dc:	e7dc      	b.n	811a098 <_sungetc_r+0x34>

0811a0de <__ssrefill_r>:
 811a0de:	b510      	push	{r4, lr}
 811a0e0:	460c      	mov	r4, r1
 811a0e2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 811a0e4:	b169      	cbz	r1, 811a102 <__ssrefill_r+0x24>
 811a0e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811a0ea:	4299      	cmp	r1, r3
 811a0ec:	d001      	beq.n	811a0f2 <__ssrefill_r+0x14>
 811a0ee:	f7fe faaf 	bl	8118650 <_free_r>
 811a0f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811a0f4:	6063      	str	r3, [r4, #4]
 811a0f6:	2000      	movs	r0, #0
 811a0f8:	6360      	str	r0, [r4, #52]	@ 0x34
 811a0fa:	b113      	cbz	r3, 811a102 <__ssrefill_r+0x24>
 811a0fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 811a0fe:	6023      	str	r3, [r4, #0]
 811a100:	bd10      	pop	{r4, pc}
 811a102:	6923      	ldr	r3, [r4, #16]
 811a104:	6023      	str	r3, [r4, #0]
 811a106:	2300      	movs	r3, #0
 811a108:	6063      	str	r3, [r4, #4]
 811a10a:	89a3      	ldrh	r3, [r4, #12]
 811a10c:	f043 0320 	orr.w	r3, r3, #32
 811a110:	81a3      	strh	r3, [r4, #12]
 811a112:	f04f 30ff 	mov.w	r0, #4294967295
 811a116:	e7f3      	b.n	811a100 <__ssrefill_r+0x22>

0811a118 <__ssvfiscanf_r>:
 811a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811a11c:	460c      	mov	r4, r1
 811a11e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 811a122:	2100      	movs	r1, #0
 811a124:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 811a128:	49a6      	ldr	r1, [pc, #664]	@ (811a3c4 <__ssvfiscanf_r+0x2ac>)
 811a12a:	91a0      	str	r1, [sp, #640]	@ 0x280
 811a12c:	f10d 0804 	add.w	r8, sp, #4
 811a130:	49a5      	ldr	r1, [pc, #660]	@ (811a3c8 <__ssvfiscanf_r+0x2b0>)
 811a132:	4fa6      	ldr	r7, [pc, #664]	@ (811a3cc <__ssvfiscanf_r+0x2b4>)
 811a134:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 811a138:	4606      	mov	r6, r0
 811a13a:	91a1      	str	r1, [sp, #644]	@ 0x284
 811a13c:	9300      	str	r3, [sp, #0]
 811a13e:	f892 9000 	ldrb.w	r9, [r2]
 811a142:	f1b9 0f00 	cmp.w	r9, #0
 811a146:	f000 8158 	beq.w	811a3fa <__ssvfiscanf_r+0x2e2>
 811a14a:	f817 3009 	ldrb.w	r3, [r7, r9]
 811a14e:	f013 0308 	ands.w	r3, r3, #8
 811a152:	f102 0501 	add.w	r5, r2, #1
 811a156:	d019      	beq.n	811a18c <__ssvfiscanf_r+0x74>
 811a158:	6863      	ldr	r3, [r4, #4]
 811a15a:	2b00      	cmp	r3, #0
 811a15c:	dd0f      	ble.n	811a17e <__ssvfiscanf_r+0x66>
 811a15e:	6823      	ldr	r3, [r4, #0]
 811a160:	781a      	ldrb	r2, [r3, #0]
 811a162:	5cba      	ldrb	r2, [r7, r2]
 811a164:	0712      	lsls	r2, r2, #28
 811a166:	d401      	bmi.n	811a16c <__ssvfiscanf_r+0x54>
 811a168:	462a      	mov	r2, r5
 811a16a:	e7e8      	b.n	811a13e <__ssvfiscanf_r+0x26>
 811a16c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 811a16e:	3201      	adds	r2, #1
 811a170:	9245      	str	r2, [sp, #276]	@ 0x114
 811a172:	6862      	ldr	r2, [r4, #4]
 811a174:	3301      	adds	r3, #1
 811a176:	3a01      	subs	r2, #1
 811a178:	6062      	str	r2, [r4, #4]
 811a17a:	6023      	str	r3, [r4, #0]
 811a17c:	e7ec      	b.n	811a158 <__ssvfiscanf_r+0x40>
 811a17e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 811a180:	4621      	mov	r1, r4
 811a182:	4630      	mov	r0, r6
 811a184:	4798      	blx	r3
 811a186:	2800      	cmp	r0, #0
 811a188:	d0e9      	beq.n	811a15e <__ssvfiscanf_r+0x46>
 811a18a:	e7ed      	b.n	811a168 <__ssvfiscanf_r+0x50>
 811a18c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 811a190:	f040 8085 	bne.w	811a29e <__ssvfiscanf_r+0x186>
 811a194:	9341      	str	r3, [sp, #260]	@ 0x104
 811a196:	9343      	str	r3, [sp, #268]	@ 0x10c
 811a198:	7853      	ldrb	r3, [r2, #1]
 811a19a:	2b2a      	cmp	r3, #42	@ 0x2a
 811a19c:	bf02      	ittt	eq
 811a19e:	2310      	moveq	r3, #16
 811a1a0:	1c95      	addeq	r5, r2, #2
 811a1a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 811a1a4:	220a      	movs	r2, #10
 811a1a6:	46aa      	mov	sl, r5
 811a1a8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 811a1ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 811a1b0:	2b09      	cmp	r3, #9
 811a1b2:	d91e      	bls.n	811a1f2 <__ssvfiscanf_r+0xda>
 811a1b4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 811a3d0 <__ssvfiscanf_r+0x2b8>
 811a1b8:	2203      	movs	r2, #3
 811a1ba:	4658      	mov	r0, fp
 811a1bc:	f7e6 f8a0 	bl	8100300 <memchr>
 811a1c0:	b138      	cbz	r0, 811a1d2 <__ssvfiscanf_r+0xba>
 811a1c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 811a1c4:	eba0 000b 	sub.w	r0, r0, fp
 811a1c8:	2301      	movs	r3, #1
 811a1ca:	4083      	lsls	r3, r0
 811a1cc:	4313      	orrs	r3, r2
 811a1ce:	9341      	str	r3, [sp, #260]	@ 0x104
 811a1d0:	4655      	mov	r5, sl
 811a1d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 811a1d6:	2b78      	cmp	r3, #120	@ 0x78
 811a1d8:	d806      	bhi.n	811a1e8 <__ssvfiscanf_r+0xd0>
 811a1da:	2b57      	cmp	r3, #87	@ 0x57
 811a1dc:	d810      	bhi.n	811a200 <__ssvfiscanf_r+0xe8>
 811a1de:	2b25      	cmp	r3, #37	@ 0x25
 811a1e0:	d05d      	beq.n	811a29e <__ssvfiscanf_r+0x186>
 811a1e2:	d857      	bhi.n	811a294 <__ssvfiscanf_r+0x17c>
 811a1e4:	2b00      	cmp	r3, #0
 811a1e6:	d075      	beq.n	811a2d4 <__ssvfiscanf_r+0x1bc>
 811a1e8:	2303      	movs	r3, #3
 811a1ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 811a1ec:	230a      	movs	r3, #10
 811a1ee:	9342      	str	r3, [sp, #264]	@ 0x108
 811a1f0:	e088      	b.n	811a304 <__ssvfiscanf_r+0x1ec>
 811a1f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 811a1f4:	fb02 1103 	mla	r1, r2, r3, r1
 811a1f8:	3930      	subs	r1, #48	@ 0x30
 811a1fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 811a1fc:	4655      	mov	r5, sl
 811a1fe:	e7d2      	b.n	811a1a6 <__ssvfiscanf_r+0x8e>
 811a200:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 811a204:	2a20      	cmp	r2, #32
 811a206:	d8ef      	bhi.n	811a1e8 <__ssvfiscanf_r+0xd0>
 811a208:	a101      	add	r1, pc, #4	@ (adr r1, 811a210 <__ssvfiscanf_r+0xf8>)
 811a20a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 811a20e:	bf00      	nop
 811a210:	0811a2e3 	.word	0x0811a2e3
 811a214:	0811a1e9 	.word	0x0811a1e9
 811a218:	0811a1e9 	.word	0x0811a1e9
 811a21c:	0811a33d 	.word	0x0811a33d
 811a220:	0811a1e9 	.word	0x0811a1e9
 811a224:	0811a1e9 	.word	0x0811a1e9
 811a228:	0811a1e9 	.word	0x0811a1e9
 811a22c:	0811a1e9 	.word	0x0811a1e9
 811a230:	0811a1e9 	.word	0x0811a1e9
 811a234:	0811a1e9 	.word	0x0811a1e9
 811a238:	0811a1e9 	.word	0x0811a1e9
 811a23c:	0811a353 	.word	0x0811a353
 811a240:	0811a339 	.word	0x0811a339
 811a244:	0811a29b 	.word	0x0811a29b
 811a248:	0811a29b 	.word	0x0811a29b
 811a24c:	0811a29b 	.word	0x0811a29b
 811a250:	0811a1e9 	.word	0x0811a1e9
 811a254:	0811a2f5 	.word	0x0811a2f5
 811a258:	0811a1e9 	.word	0x0811a1e9
 811a25c:	0811a1e9 	.word	0x0811a1e9
 811a260:	0811a1e9 	.word	0x0811a1e9
 811a264:	0811a1e9 	.word	0x0811a1e9
 811a268:	0811a363 	.word	0x0811a363
 811a26c:	0811a2fd 	.word	0x0811a2fd
 811a270:	0811a2db 	.word	0x0811a2db
 811a274:	0811a1e9 	.word	0x0811a1e9
 811a278:	0811a1e9 	.word	0x0811a1e9
 811a27c:	0811a35f 	.word	0x0811a35f
 811a280:	0811a1e9 	.word	0x0811a1e9
 811a284:	0811a339 	.word	0x0811a339
 811a288:	0811a1e9 	.word	0x0811a1e9
 811a28c:	0811a1e9 	.word	0x0811a1e9
 811a290:	0811a2e3 	.word	0x0811a2e3
 811a294:	3b45      	subs	r3, #69	@ 0x45
 811a296:	2b02      	cmp	r3, #2
 811a298:	d8a6      	bhi.n	811a1e8 <__ssvfiscanf_r+0xd0>
 811a29a:	2305      	movs	r3, #5
 811a29c:	e031      	b.n	811a302 <__ssvfiscanf_r+0x1ea>
 811a29e:	6863      	ldr	r3, [r4, #4]
 811a2a0:	2b00      	cmp	r3, #0
 811a2a2:	dd0d      	ble.n	811a2c0 <__ssvfiscanf_r+0x1a8>
 811a2a4:	6823      	ldr	r3, [r4, #0]
 811a2a6:	781a      	ldrb	r2, [r3, #0]
 811a2a8:	454a      	cmp	r2, r9
 811a2aa:	f040 80a6 	bne.w	811a3fa <__ssvfiscanf_r+0x2e2>
 811a2ae:	3301      	adds	r3, #1
 811a2b0:	6862      	ldr	r2, [r4, #4]
 811a2b2:	6023      	str	r3, [r4, #0]
 811a2b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 811a2b6:	3a01      	subs	r2, #1
 811a2b8:	3301      	adds	r3, #1
 811a2ba:	6062      	str	r2, [r4, #4]
 811a2bc:	9345      	str	r3, [sp, #276]	@ 0x114
 811a2be:	e753      	b.n	811a168 <__ssvfiscanf_r+0x50>
 811a2c0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 811a2c2:	4621      	mov	r1, r4
 811a2c4:	4630      	mov	r0, r6
 811a2c6:	4798      	blx	r3
 811a2c8:	2800      	cmp	r0, #0
 811a2ca:	d0eb      	beq.n	811a2a4 <__ssvfiscanf_r+0x18c>
 811a2cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 811a2ce:	2800      	cmp	r0, #0
 811a2d0:	f040 808b 	bne.w	811a3ea <__ssvfiscanf_r+0x2d2>
 811a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 811a2d8:	e08b      	b.n	811a3f2 <__ssvfiscanf_r+0x2da>
 811a2da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 811a2dc:	f042 0220 	orr.w	r2, r2, #32
 811a2e0:	9241      	str	r2, [sp, #260]	@ 0x104
 811a2e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 811a2e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 811a2e8:	9241      	str	r2, [sp, #260]	@ 0x104
 811a2ea:	2210      	movs	r2, #16
 811a2ec:	2b6e      	cmp	r3, #110	@ 0x6e
 811a2ee:	9242      	str	r2, [sp, #264]	@ 0x108
 811a2f0:	d902      	bls.n	811a2f8 <__ssvfiscanf_r+0x1e0>
 811a2f2:	e005      	b.n	811a300 <__ssvfiscanf_r+0x1e8>
 811a2f4:	2300      	movs	r3, #0
 811a2f6:	9342      	str	r3, [sp, #264]	@ 0x108
 811a2f8:	2303      	movs	r3, #3
 811a2fa:	e002      	b.n	811a302 <__ssvfiscanf_r+0x1ea>
 811a2fc:	2308      	movs	r3, #8
 811a2fe:	9342      	str	r3, [sp, #264]	@ 0x108
 811a300:	2304      	movs	r3, #4
 811a302:	9347      	str	r3, [sp, #284]	@ 0x11c
 811a304:	6863      	ldr	r3, [r4, #4]
 811a306:	2b00      	cmp	r3, #0
 811a308:	dd39      	ble.n	811a37e <__ssvfiscanf_r+0x266>
 811a30a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 811a30c:	0659      	lsls	r1, r3, #25
 811a30e:	d404      	bmi.n	811a31a <__ssvfiscanf_r+0x202>
 811a310:	6823      	ldr	r3, [r4, #0]
 811a312:	781a      	ldrb	r2, [r3, #0]
 811a314:	5cba      	ldrb	r2, [r7, r2]
 811a316:	0712      	lsls	r2, r2, #28
 811a318:	d438      	bmi.n	811a38c <__ssvfiscanf_r+0x274>
 811a31a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 811a31c:	2b02      	cmp	r3, #2
 811a31e:	dc47      	bgt.n	811a3b0 <__ssvfiscanf_r+0x298>
 811a320:	466b      	mov	r3, sp
 811a322:	4622      	mov	r2, r4
 811a324:	a941      	add	r1, sp, #260	@ 0x104
 811a326:	4630      	mov	r0, r6
 811a328:	f000 f9ae 	bl	811a688 <_scanf_chars>
 811a32c:	2801      	cmp	r0, #1
 811a32e:	d064      	beq.n	811a3fa <__ssvfiscanf_r+0x2e2>
 811a330:	2802      	cmp	r0, #2
 811a332:	f47f af19 	bne.w	811a168 <__ssvfiscanf_r+0x50>
 811a336:	e7c9      	b.n	811a2cc <__ssvfiscanf_r+0x1b4>
 811a338:	220a      	movs	r2, #10
 811a33a:	e7d7      	b.n	811a2ec <__ssvfiscanf_r+0x1d4>
 811a33c:	4629      	mov	r1, r5
 811a33e:	4640      	mov	r0, r8
 811a340:	f000 fc44 	bl	811abcc <__sccl>
 811a344:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 811a346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811a34a:	9341      	str	r3, [sp, #260]	@ 0x104
 811a34c:	4605      	mov	r5, r0
 811a34e:	2301      	movs	r3, #1
 811a350:	e7d7      	b.n	811a302 <__ssvfiscanf_r+0x1ea>
 811a352:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 811a354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811a358:	9341      	str	r3, [sp, #260]	@ 0x104
 811a35a:	2300      	movs	r3, #0
 811a35c:	e7d1      	b.n	811a302 <__ssvfiscanf_r+0x1ea>
 811a35e:	2302      	movs	r3, #2
 811a360:	e7cf      	b.n	811a302 <__ssvfiscanf_r+0x1ea>
 811a362:	9841      	ldr	r0, [sp, #260]	@ 0x104
 811a364:	06c3      	lsls	r3, r0, #27
 811a366:	f53f aeff 	bmi.w	811a168 <__ssvfiscanf_r+0x50>
 811a36a:	9b00      	ldr	r3, [sp, #0]
 811a36c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 811a36e:	1d19      	adds	r1, r3, #4
 811a370:	9100      	str	r1, [sp, #0]
 811a372:	681b      	ldr	r3, [r3, #0]
 811a374:	07c0      	lsls	r0, r0, #31
 811a376:	bf4c      	ite	mi
 811a378:	801a      	strhmi	r2, [r3, #0]
 811a37a:	601a      	strpl	r2, [r3, #0]
 811a37c:	e6f4      	b.n	811a168 <__ssvfiscanf_r+0x50>
 811a37e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 811a380:	4621      	mov	r1, r4
 811a382:	4630      	mov	r0, r6
 811a384:	4798      	blx	r3
 811a386:	2800      	cmp	r0, #0
 811a388:	d0bf      	beq.n	811a30a <__ssvfiscanf_r+0x1f2>
 811a38a:	e79f      	b.n	811a2cc <__ssvfiscanf_r+0x1b4>
 811a38c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 811a38e:	3201      	adds	r2, #1
 811a390:	9245      	str	r2, [sp, #276]	@ 0x114
 811a392:	6862      	ldr	r2, [r4, #4]
 811a394:	3a01      	subs	r2, #1
 811a396:	2a00      	cmp	r2, #0
 811a398:	6062      	str	r2, [r4, #4]
 811a39a:	dd02      	ble.n	811a3a2 <__ssvfiscanf_r+0x28a>
 811a39c:	3301      	adds	r3, #1
 811a39e:	6023      	str	r3, [r4, #0]
 811a3a0:	e7b6      	b.n	811a310 <__ssvfiscanf_r+0x1f8>
 811a3a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 811a3a4:	4621      	mov	r1, r4
 811a3a6:	4630      	mov	r0, r6
 811a3a8:	4798      	blx	r3
 811a3aa:	2800      	cmp	r0, #0
 811a3ac:	d0b0      	beq.n	811a310 <__ssvfiscanf_r+0x1f8>
 811a3ae:	e78d      	b.n	811a2cc <__ssvfiscanf_r+0x1b4>
 811a3b0:	2b04      	cmp	r3, #4
 811a3b2:	dc0f      	bgt.n	811a3d4 <__ssvfiscanf_r+0x2bc>
 811a3b4:	466b      	mov	r3, sp
 811a3b6:	4622      	mov	r2, r4
 811a3b8:	a941      	add	r1, sp, #260	@ 0x104
 811a3ba:	4630      	mov	r0, r6
 811a3bc:	f000 f9be 	bl	811a73c <_scanf_i>
 811a3c0:	e7b4      	b.n	811a32c <__ssvfiscanf_r+0x214>
 811a3c2:	bf00      	nop
 811a3c4:	0811a065 	.word	0x0811a065
 811a3c8:	0811a0df 	.word	0x0811a0df
 811a3cc:	0811f528 	.word	0x0811f528
 811a3d0:	0811f499 	.word	0x0811f499
 811a3d4:	4b0a      	ldr	r3, [pc, #40]	@ (811a400 <__ssvfiscanf_r+0x2e8>)
 811a3d6:	2b00      	cmp	r3, #0
 811a3d8:	f43f aec6 	beq.w	811a168 <__ssvfiscanf_r+0x50>
 811a3dc:	466b      	mov	r3, sp
 811a3de:	4622      	mov	r2, r4
 811a3e0:	a941      	add	r1, sp, #260	@ 0x104
 811a3e2:	4630      	mov	r0, r6
 811a3e4:	f7fc fd58 	bl	8116e98 <_scanf_float>
 811a3e8:	e7a0      	b.n	811a32c <__ssvfiscanf_r+0x214>
 811a3ea:	89a3      	ldrh	r3, [r4, #12]
 811a3ec:	065b      	lsls	r3, r3, #25
 811a3ee:	f53f af71 	bmi.w	811a2d4 <__ssvfiscanf_r+0x1bc>
 811a3f2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 811a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811a3fa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 811a3fc:	e7f9      	b.n	811a3f2 <__ssvfiscanf_r+0x2da>
 811a3fe:	bf00      	nop
 811a400:	08116e99 	.word	0x08116e99

0811a404 <__sfputc_r>:
 811a404:	6893      	ldr	r3, [r2, #8]
 811a406:	3b01      	subs	r3, #1
 811a408:	2b00      	cmp	r3, #0
 811a40a:	b410      	push	{r4}
 811a40c:	6093      	str	r3, [r2, #8]
 811a40e:	da08      	bge.n	811a422 <__sfputc_r+0x1e>
 811a410:	6994      	ldr	r4, [r2, #24]
 811a412:	42a3      	cmp	r3, r4
 811a414:	db01      	blt.n	811a41a <__sfputc_r+0x16>
 811a416:	290a      	cmp	r1, #10
 811a418:	d103      	bne.n	811a422 <__sfputc_r+0x1e>
 811a41a:	f85d 4b04 	ldr.w	r4, [sp], #4
 811a41e:	f7fd b916 	b.w	811764e <__swbuf_r>
 811a422:	6813      	ldr	r3, [r2, #0]
 811a424:	1c58      	adds	r0, r3, #1
 811a426:	6010      	str	r0, [r2, #0]
 811a428:	7019      	strb	r1, [r3, #0]
 811a42a:	4608      	mov	r0, r1
 811a42c:	f85d 4b04 	ldr.w	r4, [sp], #4
 811a430:	4770      	bx	lr

0811a432 <__sfputs_r>:
 811a432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811a434:	4606      	mov	r6, r0
 811a436:	460f      	mov	r7, r1
 811a438:	4614      	mov	r4, r2
 811a43a:	18d5      	adds	r5, r2, r3
 811a43c:	42ac      	cmp	r4, r5
 811a43e:	d101      	bne.n	811a444 <__sfputs_r+0x12>
 811a440:	2000      	movs	r0, #0
 811a442:	e007      	b.n	811a454 <__sfputs_r+0x22>
 811a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 811a448:	463a      	mov	r2, r7
 811a44a:	4630      	mov	r0, r6
 811a44c:	f7ff ffda 	bl	811a404 <__sfputc_r>
 811a450:	1c43      	adds	r3, r0, #1
 811a452:	d1f3      	bne.n	811a43c <__sfputs_r+0xa>
 811a454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0811a458 <_vfiprintf_r>:
 811a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811a45c:	460d      	mov	r5, r1
 811a45e:	b09d      	sub	sp, #116	@ 0x74
 811a460:	4614      	mov	r4, r2
 811a462:	4698      	mov	r8, r3
 811a464:	4606      	mov	r6, r0
 811a466:	b118      	cbz	r0, 811a470 <_vfiprintf_r+0x18>
 811a468:	6a03      	ldr	r3, [r0, #32]
 811a46a:	b90b      	cbnz	r3, 811a470 <_vfiprintf_r+0x18>
 811a46c:	f7fc ffae 	bl	81173cc <__sinit>
 811a470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811a472:	07d9      	lsls	r1, r3, #31
 811a474:	d405      	bmi.n	811a482 <_vfiprintf_r+0x2a>
 811a476:	89ab      	ldrh	r3, [r5, #12]
 811a478:	059a      	lsls	r2, r3, #22
 811a47a:	d402      	bmi.n	811a482 <_vfiprintf_r+0x2a>
 811a47c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811a47e:	f7fd fa58 	bl	8117932 <__retarget_lock_acquire_recursive>
 811a482:	89ab      	ldrh	r3, [r5, #12]
 811a484:	071b      	lsls	r3, r3, #28
 811a486:	d501      	bpl.n	811a48c <_vfiprintf_r+0x34>
 811a488:	692b      	ldr	r3, [r5, #16]
 811a48a:	b99b      	cbnz	r3, 811a4b4 <_vfiprintf_r+0x5c>
 811a48c:	4629      	mov	r1, r5
 811a48e:	4630      	mov	r0, r6
 811a490:	f7fd f91c 	bl	81176cc <__swsetup_r>
 811a494:	b170      	cbz	r0, 811a4b4 <_vfiprintf_r+0x5c>
 811a496:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811a498:	07dc      	lsls	r4, r3, #31
 811a49a:	d504      	bpl.n	811a4a6 <_vfiprintf_r+0x4e>
 811a49c:	f04f 30ff 	mov.w	r0, #4294967295
 811a4a0:	b01d      	add	sp, #116	@ 0x74
 811a4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811a4a6:	89ab      	ldrh	r3, [r5, #12]
 811a4a8:	0598      	lsls	r0, r3, #22
 811a4aa:	d4f7      	bmi.n	811a49c <_vfiprintf_r+0x44>
 811a4ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811a4ae:	f7fd fa41 	bl	8117934 <__retarget_lock_release_recursive>
 811a4b2:	e7f3      	b.n	811a49c <_vfiprintf_r+0x44>
 811a4b4:	2300      	movs	r3, #0
 811a4b6:	9309      	str	r3, [sp, #36]	@ 0x24
 811a4b8:	2320      	movs	r3, #32
 811a4ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811a4be:	f8cd 800c 	str.w	r8, [sp, #12]
 811a4c2:	2330      	movs	r3, #48	@ 0x30
 811a4c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 811a674 <_vfiprintf_r+0x21c>
 811a4c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 811a4cc:	f04f 0901 	mov.w	r9, #1
 811a4d0:	4623      	mov	r3, r4
 811a4d2:	469a      	mov	sl, r3
 811a4d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 811a4d8:	b10a      	cbz	r2, 811a4de <_vfiprintf_r+0x86>
 811a4da:	2a25      	cmp	r2, #37	@ 0x25
 811a4dc:	d1f9      	bne.n	811a4d2 <_vfiprintf_r+0x7a>
 811a4de:	ebba 0b04 	subs.w	fp, sl, r4
 811a4e2:	d00b      	beq.n	811a4fc <_vfiprintf_r+0xa4>
 811a4e4:	465b      	mov	r3, fp
 811a4e6:	4622      	mov	r2, r4
 811a4e8:	4629      	mov	r1, r5
 811a4ea:	4630      	mov	r0, r6
 811a4ec:	f7ff ffa1 	bl	811a432 <__sfputs_r>
 811a4f0:	3001      	adds	r0, #1
 811a4f2:	f000 80a7 	beq.w	811a644 <_vfiprintf_r+0x1ec>
 811a4f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811a4f8:	445a      	add	r2, fp
 811a4fa:	9209      	str	r2, [sp, #36]	@ 0x24
 811a4fc:	f89a 3000 	ldrb.w	r3, [sl]
 811a500:	2b00      	cmp	r3, #0
 811a502:	f000 809f 	beq.w	811a644 <_vfiprintf_r+0x1ec>
 811a506:	2300      	movs	r3, #0
 811a508:	f04f 32ff 	mov.w	r2, #4294967295
 811a50c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811a510:	f10a 0a01 	add.w	sl, sl, #1
 811a514:	9304      	str	r3, [sp, #16]
 811a516:	9307      	str	r3, [sp, #28]
 811a518:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 811a51c:	931a      	str	r3, [sp, #104]	@ 0x68
 811a51e:	4654      	mov	r4, sl
 811a520:	2205      	movs	r2, #5
 811a522:	f814 1b01 	ldrb.w	r1, [r4], #1
 811a526:	4853      	ldr	r0, [pc, #332]	@ (811a674 <_vfiprintf_r+0x21c>)
 811a528:	f7e5 feea 	bl	8100300 <memchr>
 811a52c:	9a04      	ldr	r2, [sp, #16]
 811a52e:	b9d8      	cbnz	r0, 811a568 <_vfiprintf_r+0x110>
 811a530:	06d1      	lsls	r1, r2, #27
 811a532:	bf44      	itt	mi
 811a534:	2320      	movmi	r3, #32
 811a536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811a53a:	0713      	lsls	r3, r2, #28
 811a53c:	bf44      	itt	mi
 811a53e:	232b      	movmi	r3, #43	@ 0x2b
 811a540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811a544:	f89a 3000 	ldrb.w	r3, [sl]
 811a548:	2b2a      	cmp	r3, #42	@ 0x2a
 811a54a:	d015      	beq.n	811a578 <_vfiprintf_r+0x120>
 811a54c:	9a07      	ldr	r2, [sp, #28]
 811a54e:	4654      	mov	r4, sl
 811a550:	2000      	movs	r0, #0
 811a552:	f04f 0c0a 	mov.w	ip, #10
 811a556:	4621      	mov	r1, r4
 811a558:	f811 3b01 	ldrb.w	r3, [r1], #1
 811a55c:	3b30      	subs	r3, #48	@ 0x30
 811a55e:	2b09      	cmp	r3, #9
 811a560:	d94b      	bls.n	811a5fa <_vfiprintf_r+0x1a2>
 811a562:	b1b0      	cbz	r0, 811a592 <_vfiprintf_r+0x13a>
 811a564:	9207      	str	r2, [sp, #28]
 811a566:	e014      	b.n	811a592 <_vfiprintf_r+0x13a>
 811a568:	eba0 0308 	sub.w	r3, r0, r8
 811a56c:	fa09 f303 	lsl.w	r3, r9, r3
 811a570:	4313      	orrs	r3, r2
 811a572:	9304      	str	r3, [sp, #16]
 811a574:	46a2      	mov	sl, r4
 811a576:	e7d2      	b.n	811a51e <_vfiprintf_r+0xc6>
 811a578:	9b03      	ldr	r3, [sp, #12]
 811a57a:	1d19      	adds	r1, r3, #4
 811a57c:	681b      	ldr	r3, [r3, #0]
 811a57e:	9103      	str	r1, [sp, #12]
 811a580:	2b00      	cmp	r3, #0
 811a582:	bfbb      	ittet	lt
 811a584:	425b      	neglt	r3, r3
 811a586:	f042 0202 	orrlt.w	r2, r2, #2
 811a58a:	9307      	strge	r3, [sp, #28]
 811a58c:	9307      	strlt	r3, [sp, #28]
 811a58e:	bfb8      	it	lt
 811a590:	9204      	strlt	r2, [sp, #16]
 811a592:	7823      	ldrb	r3, [r4, #0]
 811a594:	2b2e      	cmp	r3, #46	@ 0x2e
 811a596:	d10a      	bne.n	811a5ae <_vfiprintf_r+0x156>
 811a598:	7863      	ldrb	r3, [r4, #1]
 811a59a:	2b2a      	cmp	r3, #42	@ 0x2a
 811a59c:	d132      	bne.n	811a604 <_vfiprintf_r+0x1ac>
 811a59e:	9b03      	ldr	r3, [sp, #12]
 811a5a0:	1d1a      	adds	r2, r3, #4
 811a5a2:	681b      	ldr	r3, [r3, #0]
 811a5a4:	9203      	str	r2, [sp, #12]
 811a5a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811a5aa:	3402      	adds	r4, #2
 811a5ac:	9305      	str	r3, [sp, #20]
 811a5ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 811a684 <_vfiprintf_r+0x22c>
 811a5b2:	7821      	ldrb	r1, [r4, #0]
 811a5b4:	2203      	movs	r2, #3
 811a5b6:	4650      	mov	r0, sl
 811a5b8:	f7e5 fea2 	bl	8100300 <memchr>
 811a5bc:	b138      	cbz	r0, 811a5ce <_vfiprintf_r+0x176>
 811a5be:	9b04      	ldr	r3, [sp, #16]
 811a5c0:	eba0 000a 	sub.w	r0, r0, sl
 811a5c4:	2240      	movs	r2, #64	@ 0x40
 811a5c6:	4082      	lsls	r2, r0
 811a5c8:	4313      	orrs	r3, r2
 811a5ca:	3401      	adds	r4, #1
 811a5cc:	9304      	str	r3, [sp, #16]
 811a5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 811a5d2:	4829      	ldr	r0, [pc, #164]	@ (811a678 <_vfiprintf_r+0x220>)
 811a5d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 811a5d8:	2206      	movs	r2, #6
 811a5da:	f7e5 fe91 	bl	8100300 <memchr>
 811a5de:	2800      	cmp	r0, #0
 811a5e0:	d03f      	beq.n	811a662 <_vfiprintf_r+0x20a>
 811a5e2:	4b26      	ldr	r3, [pc, #152]	@ (811a67c <_vfiprintf_r+0x224>)
 811a5e4:	bb1b      	cbnz	r3, 811a62e <_vfiprintf_r+0x1d6>
 811a5e6:	9b03      	ldr	r3, [sp, #12]
 811a5e8:	3307      	adds	r3, #7
 811a5ea:	f023 0307 	bic.w	r3, r3, #7
 811a5ee:	3308      	adds	r3, #8
 811a5f0:	9303      	str	r3, [sp, #12]
 811a5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811a5f4:	443b      	add	r3, r7
 811a5f6:	9309      	str	r3, [sp, #36]	@ 0x24
 811a5f8:	e76a      	b.n	811a4d0 <_vfiprintf_r+0x78>
 811a5fa:	fb0c 3202 	mla	r2, ip, r2, r3
 811a5fe:	460c      	mov	r4, r1
 811a600:	2001      	movs	r0, #1
 811a602:	e7a8      	b.n	811a556 <_vfiprintf_r+0xfe>
 811a604:	2300      	movs	r3, #0
 811a606:	3401      	adds	r4, #1
 811a608:	9305      	str	r3, [sp, #20]
 811a60a:	4619      	mov	r1, r3
 811a60c:	f04f 0c0a 	mov.w	ip, #10
 811a610:	4620      	mov	r0, r4
 811a612:	f810 2b01 	ldrb.w	r2, [r0], #1
 811a616:	3a30      	subs	r2, #48	@ 0x30
 811a618:	2a09      	cmp	r2, #9
 811a61a:	d903      	bls.n	811a624 <_vfiprintf_r+0x1cc>
 811a61c:	2b00      	cmp	r3, #0
 811a61e:	d0c6      	beq.n	811a5ae <_vfiprintf_r+0x156>
 811a620:	9105      	str	r1, [sp, #20]
 811a622:	e7c4      	b.n	811a5ae <_vfiprintf_r+0x156>
 811a624:	fb0c 2101 	mla	r1, ip, r1, r2
 811a628:	4604      	mov	r4, r0
 811a62a:	2301      	movs	r3, #1
 811a62c:	e7f0      	b.n	811a610 <_vfiprintf_r+0x1b8>
 811a62e:	ab03      	add	r3, sp, #12
 811a630:	9300      	str	r3, [sp, #0]
 811a632:	462a      	mov	r2, r5
 811a634:	4b12      	ldr	r3, [pc, #72]	@ (811a680 <_vfiprintf_r+0x228>)
 811a636:	a904      	add	r1, sp, #16
 811a638:	4630      	mov	r0, r6
 811a63a:	f7fc f877 	bl	811672c <_printf_float>
 811a63e:	4607      	mov	r7, r0
 811a640:	1c78      	adds	r0, r7, #1
 811a642:	d1d6      	bne.n	811a5f2 <_vfiprintf_r+0x19a>
 811a644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811a646:	07d9      	lsls	r1, r3, #31
 811a648:	d405      	bmi.n	811a656 <_vfiprintf_r+0x1fe>
 811a64a:	89ab      	ldrh	r3, [r5, #12]
 811a64c:	059a      	lsls	r2, r3, #22
 811a64e:	d402      	bmi.n	811a656 <_vfiprintf_r+0x1fe>
 811a650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811a652:	f7fd f96f 	bl	8117934 <__retarget_lock_release_recursive>
 811a656:	89ab      	ldrh	r3, [r5, #12]
 811a658:	065b      	lsls	r3, r3, #25
 811a65a:	f53f af1f 	bmi.w	811a49c <_vfiprintf_r+0x44>
 811a65e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 811a660:	e71e      	b.n	811a4a0 <_vfiprintf_r+0x48>
 811a662:	ab03      	add	r3, sp, #12
 811a664:	9300      	str	r3, [sp, #0]
 811a666:	462a      	mov	r2, r5
 811a668:	4b05      	ldr	r3, [pc, #20]	@ (811a680 <_vfiprintf_r+0x228>)
 811a66a:	a904      	add	r1, sp, #16
 811a66c:	4630      	mov	r0, r6
 811a66e:	f7fc faf5 	bl	8116c5c <_printf_i>
 811a672:	e7e4      	b.n	811a63e <_vfiprintf_r+0x1e6>
 811a674:	0811f493 	.word	0x0811f493
 811a678:	0811f49d 	.word	0x0811f49d
 811a67c:	0811672d 	.word	0x0811672d
 811a680:	0811a433 	.word	0x0811a433
 811a684:	0811f499 	.word	0x0811f499

0811a688 <_scanf_chars>:
 811a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811a68c:	4615      	mov	r5, r2
 811a68e:	688a      	ldr	r2, [r1, #8]
 811a690:	4680      	mov	r8, r0
 811a692:	460c      	mov	r4, r1
 811a694:	b932      	cbnz	r2, 811a6a4 <_scanf_chars+0x1c>
 811a696:	698a      	ldr	r2, [r1, #24]
 811a698:	2a00      	cmp	r2, #0
 811a69a:	bf14      	ite	ne
 811a69c:	f04f 32ff 	movne.w	r2, #4294967295
 811a6a0:	2201      	moveq	r2, #1
 811a6a2:	608a      	str	r2, [r1, #8]
 811a6a4:	6822      	ldr	r2, [r4, #0]
 811a6a6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 811a738 <_scanf_chars+0xb0>
 811a6aa:	06d1      	lsls	r1, r2, #27
 811a6ac:	bf5f      	itttt	pl
 811a6ae:	681a      	ldrpl	r2, [r3, #0]
 811a6b0:	1d11      	addpl	r1, r2, #4
 811a6b2:	6019      	strpl	r1, [r3, #0]
 811a6b4:	6816      	ldrpl	r6, [r2, #0]
 811a6b6:	2700      	movs	r7, #0
 811a6b8:	69a0      	ldr	r0, [r4, #24]
 811a6ba:	b188      	cbz	r0, 811a6e0 <_scanf_chars+0x58>
 811a6bc:	2801      	cmp	r0, #1
 811a6be:	d107      	bne.n	811a6d0 <_scanf_chars+0x48>
 811a6c0:	682b      	ldr	r3, [r5, #0]
 811a6c2:	781a      	ldrb	r2, [r3, #0]
 811a6c4:	6963      	ldr	r3, [r4, #20]
 811a6c6:	5c9b      	ldrb	r3, [r3, r2]
 811a6c8:	b953      	cbnz	r3, 811a6e0 <_scanf_chars+0x58>
 811a6ca:	2f00      	cmp	r7, #0
 811a6cc:	d031      	beq.n	811a732 <_scanf_chars+0xaa>
 811a6ce:	e022      	b.n	811a716 <_scanf_chars+0x8e>
 811a6d0:	2802      	cmp	r0, #2
 811a6d2:	d120      	bne.n	811a716 <_scanf_chars+0x8e>
 811a6d4:	682b      	ldr	r3, [r5, #0]
 811a6d6:	781b      	ldrb	r3, [r3, #0]
 811a6d8:	f819 3003 	ldrb.w	r3, [r9, r3]
 811a6dc:	071b      	lsls	r3, r3, #28
 811a6de:	d41a      	bmi.n	811a716 <_scanf_chars+0x8e>
 811a6e0:	6823      	ldr	r3, [r4, #0]
 811a6e2:	06da      	lsls	r2, r3, #27
 811a6e4:	bf5e      	ittt	pl
 811a6e6:	682b      	ldrpl	r3, [r5, #0]
 811a6e8:	781b      	ldrbpl	r3, [r3, #0]
 811a6ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 811a6ee:	682a      	ldr	r2, [r5, #0]
 811a6f0:	686b      	ldr	r3, [r5, #4]
 811a6f2:	3201      	adds	r2, #1
 811a6f4:	602a      	str	r2, [r5, #0]
 811a6f6:	68a2      	ldr	r2, [r4, #8]
 811a6f8:	3b01      	subs	r3, #1
 811a6fa:	3a01      	subs	r2, #1
 811a6fc:	606b      	str	r3, [r5, #4]
 811a6fe:	3701      	adds	r7, #1
 811a700:	60a2      	str	r2, [r4, #8]
 811a702:	b142      	cbz	r2, 811a716 <_scanf_chars+0x8e>
 811a704:	2b00      	cmp	r3, #0
 811a706:	dcd7      	bgt.n	811a6b8 <_scanf_chars+0x30>
 811a708:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 811a70c:	4629      	mov	r1, r5
 811a70e:	4640      	mov	r0, r8
 811a710:	4798      	blx	r3
 811a712:	2800      	cmp	r0, #0
 811a714:	d0d0      	beq.n	811a6b8 <_scanf_chars+0x30>
 811a716:	6823      	ldr	r3, [r4, #0]
 811a718:	f013 0310 	ands.w	r3, r3, #16
 811a71c:	d105      	bne.n	811a72a <_scanf_chars+0xa2>
 811a71e:	68e2      	ldr	r2, [r4, #12]
 811a720:	3201      	adds	r2, #1
 811a722:	60e2      	str	r2, [r4, #12]
 811a724:	69a2      	ldr	r2, [r4, #24]
 811a726:	b102      	cbz	r2, 811a72a <_scanf_chars+0xa2>
 811a728:	7033      	strb	r3, [r6, #0]
 811a72a:	6923      	ldr	r3, [r4, #16]
 811a72c:	443b      	add	r3, r7
 811a72e:	6123      	str	r3, [r4, #16]
 811a730:	2000      	movs	r0, #0
 811a732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811a736:	bf00      	nop
 811a738:	0811f528 	.word	0x0811f528

0811a73c <_scanf_i>:
 811a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811a740:	4698      	mov	r8, r3
 811a742:	4b74      	ldr	r3, [pc, #464]	@ (811a914 <_scanf_i+0x1d8>)
 811a744:	460c      	mov	r4, r1
 811a746:	4682      	mov	sl, r0
 811a748:	4616      	mov	r6, r2
 811a74a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 811a74e:	b087      	sub	sp, #28
 811a750:	ab03      	add	r3, sp, #12
 811a752:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 811a756:	4b70      	ldr	r3, [pc, #448]	@ (811a918 <_scanf_i+0x1dc>)
 811a758:	69a1      	ldr	r1, [r4, #24]
 811a75a:	4a70      	ldr	r2, [pc, #448]	@ (811a91c <_scanf_i+0x1e0>)
 811a75c:	2903      	cmp	r1, #3
 811a75e:	bf08      	it	eq
 811a760:	461a      	moveq	r2, r3
 811a762:	68a3      	ldr	r3, [r4, #8]
 811a764:	9201      	str	r2, [sp, #4]
 811a766:	1e5a      	subs	r2, r3, #1
 811a768:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 811a76c:	bf88      	it	hi
 811a76e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 811a772:	4627      	mov	r7, r4
 811a774:	bf82      	ittt	hi
 811a776:	eb03 0905 	addhi.w	r9, r3, r5
 811a77a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 811a77e:	60a3      	strhi	r3, [r4, #8]
 811a780:	f857 3b1c 	ldr.w	r3, [r7], #28
 811a784:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 811a788:	bf98      	it	ls
 811a78a:	f04f 0900 	movls.w	r9, #0
 811a78e:	6023      	str	r3, [r4, #0]
 811a790:	463d      	mov	r5, r7
 811a792:	f04f 0b00 	mov.w	fp, #0
 811a796:	6831      	ldr	r1, [r6, #0]
 811a798:	ab03      	add	r3, sp, #12
 811a79a:	7809      	ldrb	r1, [r1, #0]
 811a79c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 811a7a0:	2202      	movs	r2, #2
 811a7a2:	f7e5 fdad 	bl	8100300 <memchr>
 811a7a6:	b328      	cbz	r0, 811a7f4 <_scanf_i+0xb8>
 811a7a8:	f1bb 0f01 	cmp.w	fp, #1
 811a7ac:	d159      	bne.n	811a862 <_scanf_i+0x126>
 811a7ae:	6862      	ldr	r2, [r4, #4]
 811a7b0:	b92a      	cbnz	r2, 811a7be <_scanf_i+0x82>
 811a7b2:	6822      	ldr	r2, [r4, #0]
 811a7b4:	2108      	movs	r1, #8
 811a7b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 811a7ba:	6061      	str	r1, [r4, #4]
 811a7bc:	6022      	str	r2, [r4, #0]
 811a7be:	6822      	ldr	r2, [r4, #0]
 811a7c0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 811a7c4:	6022      	str	r2, [r4, #0]
 811a7c6:	68a2      	ldr	r2, [r4, #8]
 811a7c8:	1e51      	subs	r1, r2, #1
 811a7ca:	60a1      	str	r1, [r4, #8]
 811a7cc:	b192      	cbz	r2, 811a7f4 <_scanf_i+0xb8>
 811a7ce:	6832      	ldr	r2, [r6, #0]
 811a7d0:	1c51      	adds	r1, r2, #1
 811a7d2:	6031      	str	r1, [r6, #0]
 811a7d4:	7812      	ldrb	r2, [r2, #0]
 811a7d6:	f805 2b01 	strb.w	r2, [r5], #1
 811a7da:	6872      	ldr	r2, [r6, #4]
 811a7dc:	3a01      	subs	r2, #1
 811a7de:	2a00      	cmp	r2, #0
 811a7e0:	6072      	str	r2, [r6, #4]
 811a7e2:	dc07      	bgt.n	811a7f4 <_scanf_i+0xb8>
 811a7e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 811a7e8:	4631      	mov	r1, r6
 811a7ea:	4650      	mov	r0, sl
 811a7ec:	4790      	blx	r2
 811a7ee:	2800      	cmp	r0, #0
 811a7f0:	f040 8085 	bne.w	811a8fe <_scanf_i+0x1c2>
 811a7f4:	f10b 0b01 	add.w	fp, fp, #1
 811a7f8:	f1bb 0f03 	cmp.w	fp, #3
 811a7fc:	d1cb      	bne.n	811a796 <_scanf_i+0x5a>
 811a7fe:	6863      	ldr	r3, [r4, #4]
 811a800:	b90b      	cbnz	r3, 811a806 <_scanf_i+0xca>
 811a802:	230a      	movs	r3, #10
 811a804:	6063      	str	r3, [r4, #4]
 811a806:	6863      	ldr	r3, [r4, #4]
 811a808:	4945      	ldr	r1, [pc, #276]	@ (811a920 <_scanf_i+0x1e4>)
 811a80a:	6960      	ldr	r0, [r4, #20]
 811a80c:	1ac9      	subs	r1, r1, r3
 811a80e:	f000 f9dd 	bl	811abcc <__sccl>
 811a812:	f04f 0b00 	mov.w	fp, #0
 811a816:	68a3      	ldr	r3, [r4, #8]
 811a818:	6822      	ldr	r2, [r4, #0]
 811a81a:	2b00      	cmp	r3, #0
 811a81c:	d03d      	beq.n	811a89a <_scanf_i+0x15e>
 811a81e:	6831      	ldr	r1, [r6, #0]
 811a820:	6960      	ldr	r0, [r4, #20]
 811a822:	f891 c000 	ldrb.w	ip, [r1]
 811a826:	f810 000c 	ldrb.w	r0, [r0, ip]
 811a82a:	2800      	cmp	r0, #0
 811a82c:	d035      	beq.n	811a89a <_scanf_i+0x15e>
 811a82e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 811a832:	d124      	bne.n	811a87e <_scanf_i+0x142>
 811a834:	0510      	lsls	r0, r2, #20
 811a836:	d522      	bpl.n	811a87e <_scanf_i+0x142>
 811a838:	f10b 0b01 	add.w	fp, fp, #1
 811a83c:	f1b9 0f00 	cmp.w	r9, #0
 811a840:	d003      	beq.n	811a84a <_scanf_i+0x10e>
 811a842:	3301      	adds	r3, #1
 811a844:	f109 39ff 	add.w	r9, r9, #4294967295
 811a848:	60a3      	str	r3, [r4, #8]
 811a84a:	6873      	ldr	r3, [r6, #4]
 811a84c:	3b01      	subs	r3, #1
 811a84e:	2b00      	cmp	r3, #0
 811a850:	6073      	str	r3, [r6, #4]
 811a852:	dd1b      	ble.n	811a88c <_scanf_i+0x150>
 811a854:	6833      	ldr	r3, [r6, #0]
 811a856:	3301      	adds	r3, #1
 811a858:	6033      	str	r3, [r6, #0]
 811a85a:	68a3      	ldr	r3, [r4, #8]
 811a85c:	3b01      	subs	r3, #1
 811a85e:	60a3      	str	r3, [r4, #8]
 811a860:	e7d9      	b.n	811a816 <_scanf_i+0xda>
 811a862:	f1bb 0f02 	cmp.w	fp, #2
 811a866:	d1ae      	bne.n	811a7c6 <_scanf_i+0x8a>
 811a868:	6822      	ldr	r2, [r4, #0]
 811a86a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 811a86e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 811a872:	d1c4      	bne.n	811a7fe <_scanf_i+0xc2>
 811a874:	2110      	movs	r1, #16
 811a876:	6061      	str	r1, [r4, #4]
 811a878:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 811a87c:	e7a2      	b.n	811a7c4 <_scanf_i+0x88>
 811a87e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 811a882:	6022      	str	r2, [r4, #0]
 811a884:	780b      	ldrb	r3, [r1, #0]
 811a886:	f805 3b01 	strb.w	r3, [r5], #1
 811a88a:	e7de      	b.n	811a84a <_scanf_i+0x10e>
 811a88c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 811a890:	4631      	mov	r1, r6
 811a892:	4650      	mov	r0, sl
 811a894:	4798      	blx	r3
 811a896:	2800      	cmp	r0, #0
 811a898:	d0df      	beq.n	811a85a <_scanf_i+0x11e>
 811a89a:	6823      	ldr	r3, [r4, #0]
 811a89c:	05d9      	lsls	r1, r3, #23
 811a89e:	d50d      	bpl.n	811a8bc <_scanf_i+0x180>
 811a8a0:	42bd      	cmp	r5, r7
 811a8a2:	d909      	bls.n	811a8b8 <_scanf_i+0x17c>
 811a8a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 811a8a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811a8ac:	4632      	mov	r2, r6
 811a8ae:	4650      	mov	r0, sl
 811a8b0:	4798      	blx	r3
 811a8b2:	f105 39ff 	add.w	r9, r5, #4294967295
 811a8b6:	464d      	mov	r5, r9
 811a8b8:	42bd      	cmp	r5, r7
 811a8ba:	d028      	beq.n	811a90e <_scanf_i+0x1d2>
 811a8bc:	6822      	ldr	r2, [r4, #0]
 811a8be:	f012 0210 	ands.w	r2, r2, #16
 811a8c2:	d113      	bne.n	811a8ec <_scanf_i+0x1b0>
 811a8c4:	702a      	strb	r2, [r5, #0]
 811a8c6:	6863      	ldr	r3, [r4, #4]
 811a8c8:	9e01      	ldr	r6, [sp, #4]
 811a8ca:	4639      	mov	r1, r7
 811a8cc:	4650      	mov	r0, sl
 811a8ce:	47b0      	blx	r6
 811a8d0:	f8d8 3000 	ldr.w	r3, [r8]
 811a8d4:	6821      	ldr	r1, [r4, #0]
 811a8d6:	1d1a      	adds	r2, r3, #4
 811a8d8:	f8c8 2000 	str.w	r2, [r8]
 811a8dc:	f011 0f20 	tst.w	r1, #32
 811a8e0:	681b      	ldr	r3, [r3, #0]
 811a8e2:	d00f      	beq.n	811a904 <_scanf_i+0x1c8>
 811a8e4:	6018      	str	r0, [r3, #0]
 811a8e6:	68e3      	ldr	r3, [r4, #12]
 811a8e8:	3301      	adds	r3, #1
 811a8ea:	60e3      	str	r3, [r4, #12]
 811a8ec:	6923      	ldr	r3, [r4, #16]
 811a8ee:	1bed      	subs	r5, r5, r7
 811a8f0:	445d      	add	r5, fp
 811a8f2:	442b      	add	r3, r5
 811a8f4:	6123      	str	r3, [r4, #16]
 811a8f6:	2000      	movs	r0, #0
 811a8f8:	b007      	add	sp, #28
 811a8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811a8fe:	f04f 0b00 	mov.w	fp, #0
 811a902:	e7ca      	b.n	811a89a <_scanf_i+0x15e>
 811a904:	07ca      	lsls	r2, r1, #31
 811a906:	bf4c      	ite	mi
 811a908:	8018      	strhmi	r0, [r3, #0]
 811a90a:	6018      	strpl	r0, [r3, #0]
 811a90c:	e7eb      	b.n	811a8e6 <_scanf_i+0x1aa>
 811a90e:	2001      	movs	r0, #1
 811a910:	e7f2      	b.n	811a8f8 <_scanf_i+0x1bc>
 811a912:	bf00      	nop
 811a914:	0811ef18 	.word	0x0811ef18
 811a918:	081165e9 	.word	0x081165e9
 811a91c:	0811b52d 	.word	0x0811b52d
 811a920:	0811f4b4 	.word	0x0811f4b4

0811a924 <__sflush_r>:
 811a924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811a92c:	0716      	lsls	r6, r2, #28
 811a92e:	4605      	mov	r5, r0
 811a930:	460c      	mov	r4, r1
 811a932:	d454      	bmi.n	811a9de <__sflush_r+0xba>
 811a934:	684b      	ldr	r3, [r1, #4]
 811a936:	2b00      	cmp	r3, #0
 811a938:	dc02      	bgt.n	811a940 <__sflush_r+0x1c>
 811a93a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 811a93c:	2b00      	cmp	r3, #0
 811a93e:	dd48      	ble.n	811a9d2 <__sflush_r+0xae>
 811a940:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811a942:	2e00      	cmp	r6, #0
 811a944:	d045      	beq.n	811a9d2 <__sflush_r+0xae>
 811a946:	2300      	movs	r3, #0
 811a948:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 811a94c:	682f      	ldr	r7, [r5, #0]
 811a94e:	6a21      	ldr	r1, [r4, #32]
 811a950:	602b      	str	r3, [r5, #0]
 811a952:	d030      	beq.n	811a9b6 <__sflush_r+0x92>
 811a954:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811a956:	89a3      	ldrh	r3, [r4, #12]
 811a958:	0759      	lsls	r1, r3, #29
 811a95a:	d505      	bpl.n	811a968 <__sflush_r+0x44>
 811a95c:	6863      	ldr	r3, [r4, #4]
 811a95e:	1ad2      	subs	r2, r2, r3
 811a960:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 811a962:	b10b      	cbz	r3, 811a968 <__sflush_r+0x44>
 811a964:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811a966:	1ad2      	subs	r2, r2, r3
 811a968:	2300      	movs	r3, #0
 811a96a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811a96c:	6a21      	ldr	r1, [r4, #32]
 811a96e:	4628      	mov	r0, r5
 811a970:	47b0      	blx	r6
 811a972:	1c43      	adds	r3, r0, #1
 811a974:	89a3      	ldrh	r3, [r4, #12]
 811a976:	d106      	bne.n	811a986 <__sflush_r+0x62>
 811a978:	6829      	ldr	r1, [r5, #0]
 811a97a:	291d      	cmp	r1, #29
 811a97c:	d82b      	bhi.n	811a9d6 <__sflush_r+0xb2>
 811a97e:	4a2a      	ldr	r2, [pc, #168]	@ (811aa28 <__sflush_r+0x104>)
 811a980:	40ca      	lsrs	r2, r1
 811a982:	07d6      	lsls	r6, r2, #31
 811a984:	d527      	bpl.n	811a9d6 <__sflush_r+0xb2>
 811a986:	2200      	movs	r2, #0
 811a988:	6062      	str	r2, [r4, #4]
 811a98a:	04d9      	lsls	r1, r3, #19
 811a98c:	6922      	ldr	r2, [r4, #16]
 811a98e:	6022      	str	r2, [r4, #0]
 811a990:	d504      	bpl.n	811a99c <__sflush_r+0x78>
 811a992:	1c42      	adds	r2, r0, #1
 811a994:	d101      	bne.n	811a99a <__sflush_r+0x76>
 811a996:	682b      	ldr	r3, [r5, #0]
 811a998:	b903      	cbnz	r3, 811a99c <__sflush_r+0x78>
 811a99a:	6560      	str	r0, [r4, #84]	@ 0x54
 811a99c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811a99e:	602f      	str	r7, [r5, #0]
 811a9a0:	b1b9      	cbz	r1, 811a9d2 <__sflush_r+0xae>
 811a9a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811a9a6:	4299      	cmp	r1, r3
 811a9a8:	d002      	beq.n	811a9b0 <__sflush_r+0x8c>
 811a9aa:	4628      	mov	r0, r5
 811a9ac:	f7fd fe50 	bl	8118650 <_free_r>
 811a9b0:	2300      	movs	r3, #0
 811a9b2:	6363      	str	r3, [r4, #52]	@ 0x34
 811a9b4:	e00d      	b.n	811a9d2 <__sflush_r+0xae>
 811a9b6:	2301      	movs	r3, #1
 811a9b8:	4628      	mov	r0, r5
 811a9ba:	47b0      	blx	r6
 811a9bc:	4602      	mov	r2, r0
 811a9be:	1c50      	adds	r0, r2, #1
 811a9c0:	d1c9      	bne.n	811a956 <__sflush_r+0x32>
 811a9c2:	682b      	ldr	r3, [r5, #0]
 811a9c4:	2b00      	cmp	r3, #0
 811a9c6:	d0c6      	beq.n	811a956 <__sflush_r+0x32>
 811a9c8:	2b1d      	cmp	r3, #29
 811a9ca:	d001      	beq.n	811a9d0 <__sflush_r+0xac>
 811a9cc:	2b16      	cmp	r3, #22
 811a9ce:	d11e      	bne.n	811aa0e <__sflush_r+0xea>
 811a9d0:	602f      	str	r7, [r5, #0]
 811a9d2:	2000      	movs	r0, #0
 811a9d4:	e022      	b.n	811aa1c <__sflush_r+0xf8>
 811a9d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811a9da:	b21b      	sxth	r3, r3
 811a9dc:	e01b      	b.n	811aa16 <__sflush_r+0xf2>
 811a9de:	690f      	ldr	r7, [r1, #16]
 811a9e0:	2f00      	cmp	r7, #0
 811a9e2:	d0f6      	beq.n	811a9d2 <__sflush_r+0xae>
 811a9e4:	0793      	lsls	r3, r2, #30
 811a9e6:	680e      	ldr	r6, [r1, #0]
 811a9e8:	bf08      	it	eq
 811a9ea:	694b      	ldreq	r3, [r1, #20]
 811a9ec:	600f      	str	r7, [r1, #0]
 811a9ee:	bf18      	it	ne
 811a9f0:	2300      	movne	r3, #0
 811a9f2:	eba6 0807 	sub.w	r8, r6, r7
 811a9f6:	608b      	str	r3, [r1, #8]
 811a9f8:	f1b8 0f00 	cmp.w	r8, #0
 811a9fc:	dde9      	ble.n	811a9d2 <__sflush_r+0xae>
 811a9fe:	6a21      	ldr	r1, [r4, #32]
 811aa00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 811aa02:	4643      	mov	r3, r8
 811aa04:	463a      	mov	r2, r7
 811aa06:	4628      	mov	r0, r5
 811aa08:	47b0      	blx	r6
 811aa0a:	2800      	cmp	r0, #0
 811aa0c:	dc08      	bgt.n	811aa20 <__sflush_r+0xfc>
 811aa0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811aa12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811aa16:	81a3      	strh	r3, [r4, #12]
 811aa18:	f04f 30ff 	mov.w	r0, #4294967295
 811aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811aa20:	4407      	add	r7, r0
 811aa22:	eba8 0800 	sub.w	r8, r8, r0
 811aa26:	e7e7      	b.n	811a9f8 <__sflush_r+0xd4>
 811aa28:	20400001 	.word	0x20400001

0811aa2c <_fflush_r>:
 811aa2c:	b538      	push	{r3, r4, r5, lr}
 811aa2e:	690b      	ldr	r3, [r1, #16]
 811aa30:	4605      	mov	r5, r0
 811aa32:	460c      	mov	r4, r1
 811aa34:	b913      	cbnz	r3, 811aa3c <_fflush_r+0x10>
 811aa36:	2500      	movs	r5, #0
 811aa38:	4628      	mov	r0, r5
 811aa3a:	bd38      	pop	{r3, r4, r5, pc}
 811aa3c:	b118      	cbz	r0, 811aa46 <_fflush_r+0x1a>
 811aa3e:	6a03      	ldr	r3, [r0, #32]
 811aa40:	b90b      	cbnz	r3, 811aa46 <_fflush_r+0x1a>
 811aa42:	f7fc fcc3 	bl	81173cc <__sinit>
 811aa46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811aa4a:	2b00      	cmp	r3, #0
 811aa4c:	d0f3      	beq.n	811aa36 <_fflush_r+0xa>
 811aa4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 811aa50:	07d0      	lsls	r0, r2, #31
 811aa52:	d404      	bmi.n	811aa5e <_fflush_r+0x32>
 811aa54:	0599      	lsls	r1, r3, #22
 811aa56:	d402      	bmi.n	811aa5e <_fflush_r+0x32>
 811aa58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811aa5a:	f7fc ff6a 	bl	8117932 <__retarget_lock_acquire_recursive>
 811aa5e:	4628      	mov	r0, r5
 811aa60:	4621      	mov	r1, r4
 811aa62:	f7ff ff5f 	bl	811a924 <__sflush_r>
 811aa66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811aa68:	07da      	lsls	r2, r3, #31
 811aa6a:	4605      	mov	r5, r0
 811aa6c:	d4e4      	bmi.n	811aa38 <_fflush_r+0xc>
 811aa6e:	89a3      	ldrh	r3, [r4, #12]
 811aa70:	059b      	lsls	r3, r3, #22
 811aa72:	d4e1      	bmi.n	811aa38 <_fflush_r+0xc>
 811aa74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811aa76:	f7fc ff5d 	bl	8117934 <__retarget_lock_release_recursive>
 811aa7a:	e7dd      	b.n	811aa38 <_fflush_r+0xc>

0811aa7c <fiprintf>:
 811aa7c:	b40e      	push	{r1, r2, r3}
 811aa7e:	b503      	push	{r0, r1, lr}
 811aa80:	4601      	mov	r1, r0
 811aa82:	ab03      	add	r3, sp, #12
 811aa84:	4805      	ldr	r0, [pc, #20]	@ (811aa9c <fiprintf+0x20>)
 811aa86:	f853 2b04 	ldr.w	r2, [r3], #4
 811aa8a:	6800      	ldr	r0, [r0, #0]
 811aa8c:	9301      	str	r3, [sp, #4]
 811aa8e:	f7ff fce3 	bl	811a458 <_vfiprintf_r>
 811aa92:	b002      	add	sp, #8
 811aa94:	f85d eb04 	ldr.w	lr, [sp], #4
 811aa98:	b003      	add	sp, #12
 811aa9a:	4770      	bx	lr
 811aa9c:	100001d8 	.word	0x100001d8

0811aaa0 <__swhatbuf_r>:
 811aaa0:	b570      	push	{r4, r5, r6, lr}
 811aaa2:	460c      	mov	r4, r1
 811aaa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811aaa8:	2900      	cmp	r1, #0
 811aaaa:	b096      	sub	sp, #88	@ 0x58
 811aaac:	4615      	mov	r5, r2
 811aaae:	461e      	mov	r6, r3
 811aab0:	da0d      	bge.n	811aace <__swhatbuf_r+0x2e>
 811aab2:	89a3      	ldrh	r3, [r4, #12]
 811aab4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 811aab8:	f04f 0100 	mov.w	r1, #0
 811aabc:	bf14      	ite	ne
 811aabe:	2340      	movne	r3, #64	@ 0x40
 811aac0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 811aac4:	2000      	movs	r0, #0
 811aac6:	6031      	str	r1, [r6, #0]
 811aac8:	602b      	str	r3, [r5, #0]
 811aaca:	b016      	add	sp, #88	@ 0x58
 811aacc:	bd70      	pop	{r4, r5, r6, pc}
 811aace:	466a      	mov	r2, sp
 811aad0:	f000 f8f0 	bl	811acb4 <_fstat_r>
 811aad4:	2800      	cmp	r0, #0
 811aad6:	dbec      	blt.n	811aab2 <__swhatbuf_r+0x12>
 811aad8:	9901      	ldr	r1, [sp, #4]
 811aada:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 811aade:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 811aae2:	4259      	negs	r1, r3
 811aae4:	4159      	adcs	r1, r3
 811aae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811aaea:	e7eb      	b.n	811aac4 <__swhatbuf_r+0x24>

0811aaec <__smakebuf_r>:
 811aaec:	898b      	ldrh	r3, [r1, #12]
 811aaee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811aaf0:	079d      	lsls	r5, r3, #30
 811aaf2:	4606      	mov	r6, r0
 811aaf4:	460c      	mov	r4, r1
 811aaf6:	d507      	bpl.n	811ab08 <__smakebuf_r+0x1c>
 811aaf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 811aafc:	6023      	str	r3, [r4, #0]
 811aafe:	6123      	str	r3, [r4, #16]
 811ab00:	2301      	movs	r3, #1
 811ab02:	6163      	str	r3, [r4, #20]
 811ab04:	b003      	add	sp, #12
 811ab06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811ab08:	ab01      	add	r3, sp, #4
 811ab0a:	466a      	mov	r2, sp
 811ab0c:	f7ff ffc8 	bl	811aaa0 <__swhatbuf_r>
 811ab10:	9f00      	ldr	r7, [sp, #0]
 811ab12:	4605      	mov	r5, r0
 811ab14:	4639      	mov	r1, r7
 811ab16:	4630      	mov	r0, r6
 811ab18:	f7fd fe0e 	bl	8118738 <_malloc_r>
 811ab1c:	b948      	cbnz	r0, 811ab32 <__smakebuf_r+0x46>
 811ab1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811ab22:	059a      	lsls	r2, r3, #22
 811ab24:	d4ee      	bmi.n	811ab04 <__smakebuf_r+0x18>
 811ab26:	f023 0303 	bic.w	r3, r3, #3
 811ab2a:	f043 0302 	orr.w	r3, r3, #2
 811ab2e:	81a3      	strh	r3, [r4, #12]
 811ab30:	e7e2      	b.n	811aaf8 <__smakebuf_r+0xc>
 811ab32:	89a3      	ldrh	r3, [r4, #12]
 811ab34:	6020      	str	r0, [r4, #0]
 811ab36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811ab3a:	81a3      	strh	r3, [r4, #12]
 811ab3c:	9b01      	ldr	r3, [sp, #4]
 811ab3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811ab42:	b15b      	cbz	r3, 811ab5c <__smakebuf_r+0x70>
 811ab44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811ab48:	4630      	mov	r0, r6
 811ab4a:	f000 f8c5 	bl	811acd8 <_isatty_r>
 811ab4e:	b128      	cbz	r0, 811ab5c <__smakebuf_r+0x70>
 811ab50:	89a3      	ldrh	r3, [r4, #12]
 811ab52:	f023 0303 	bic.w	r3, r3, #3
 811ab56:	f043 0301 	orr.w	r3, r3, #1
 811ab5a:	81a3      	strh	r3, [r4, #12]
 811ab5c:	89a3      	ldrh	r3, [r4, #12]
 811ab5e:	431d      	orrs	r5, r3
 811ab60:	81a5      	strh	r5, [r4, #12]
 811ab62:	e7cf      	b.n	811ab04 <__smakebuf_r+0x18>

0811ab64 <_putc_r>:
 811ab64:	b570      	push	{r4, r5, r6, lr}
 811ab66:	460d      	mov	r5, r1
 811ab68:	4614      	mov	r4, r2
 811ab6a:	4606      	mov	r6, r0
 811ab6c:	b118      	cbz	r0, 811ab76 <_putc_r+0x12>
 811ab6e:	6a03      	ldr	r3, [r0, #32]
 811ab70:	b90b      	cbnz	r3, 811ab76 <_putc_r+0x12>
 811ab72:	f7fc fc2b 	bl	81173cc <__sinit>
 811ab76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811ab78:	07d8      	lsls	r0, r3, #31
 811ab7a:	d405      	bmi.n	811ab88 <_putc_r+0x24>
 811ab7c:	89a3      	ldrh	r3, [r4, #12]
 811ab7e:	0599      	lsls	r1, r3, #22
 811ab80:	d402      	bmi.n	811ab88 <_putc_r+0x24>
 811ab82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811ab84:	f7fc fed5 	bl	8117932 <__retarget_lock_acquire_recursive>
 811ab88:	68a3      	ldr	r3, [r4, #8]
 811ab8a:	3b01      	subs	r3, #1
 811ab8c:	2b00      	cmp	r3, #0
 811ab8e:	60a3      	str	r3, [r4, #8]
 811ab90:	da05      	bge.n	811ab9e <_putc_r+0x3a>
 811ab92:	69a2      	ldr	r2, [r4, #24]
 811ab94:	4293      	cmp	r3, r2
 811ab96:	db12      	blt.n	811abbe <_putc_r+0x5a>
 811ab98:	b2eb      	uxtb	r3, r5
 811ab9a:	2b0a      	cmp	r3, #10
 811ab9c:	d00f      	beq.n	811abbe <_putc_r+0x5a>
 811ab9e:	6823      	ldr	r3, [r4, #0]
 811aba0:	1c5a      	adds	r2, r3, #1
 811aba2:	6022      	str	r2, [r4, #0]
 811aba4:	701d      	strb	r5, [r3, #0]
 811aba6:	b2ed      	uxtb	r5, r5
 811aba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811abaa:	07da      	lsls	r2, r3, #31
 811abac:	d405      	bmi.n	811abba <_putc_r+0x56>
 811abae:	89a3      	ldrh	r3, [r4, #12]
 811abb0:	059b      	lsls	r3, r3, #22
 811abb2:	d402      	bmi.n	811abba <_putc_r+0x56>
 811abb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811abb6:	f7fc febd 	bl	8117934 <__retarget_lock_release_recursive>
 811abba:	4628      	mov	r0, r5
 811abbc:	bd70      	pop	{r4, r5, r6, pc}
 811abbe:	4629      	mov	r1, r5
 811abc0:	4622      	mov	r2, r4
 811abc2:	4630      	mov	r0, r6
 811abc4:	f7fc fd43 	bl	811764e <__swbuf_r>
 811abc8:	4605      	mov	r5, r0
 811abca:	e7ed      	b.n	811aba8 <_putc_r+0x44>

0811abcc <__sccl>:
 811abcc:	b570      	push	{r4, r5, r6, lr}
 811abce:	780b      	ldrb	r3, [r1, #0]
 811abd0:	4604      	mov	r4, r0
 811abd2:	2b5e      	cmp	r3, #94	@ 0x5e
 811abd4:	bf0b      	itete	eq
 811abd6:	784b      	ldrbeq	r3, [r1, #1]
 811abd8:	1c4a      	addne	r2, r1, #1
 811abda:	1c8a      	addeq	r2, r1, #2
 811abdc:	2100      	movne	r1, #0
 811abde:	bf08      	it	eq
 811abe0:	2101      	moveq	r1, #1
 811abe2:	3801      	subs	r0, #1
 811abe4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 811abe8:	f800 1f01 	strb.w	r1, [r0, #1]!
 811abec:	42a8      	cmp	r0, r5
 811abee:	d1fb      	bne.n	811abe8 <__sccl+0x1c>
 811abf0:	b90b      	cbnz	r3, 811abf6 <__sccl+0x2a>
 811abf2:	1e50      	subs	r0, r2, #1
 811abf4:	bd70      	pop	{r4, r5, r6, pc}
 811abf6:	f081 0101 	eor.w	r1, r1, #1
 811abfa:	54e1      	strb	r1, [r4, r3]
 811abfc:	4610      	mov	r0, r2
 811abfe:	4602      	mov	r2, r0
 811ac00:	f812 5b01 	ldrb.w	r5, [r2], #1
 811ac04:	2d2d      	cmp	r5, #45	@ 0x2d
 811ac06:	d005      	beq.n	811ac14 <__sccl+0x48>
 811ac08:	2d5d      	cmp	r5, #93	@ 0x5d
 811ac0a:	d016      	beq.n	811ac3a <__sccl+0x6e>
 811ac0c:	2d00      	cmp	r5, #0
 811ac0e:	d0f1      	beq.n	811abf4 <__sccl+0x28>
 811ac10:	462b      	mov	r3, r5
 811ac12:	e7f2      	b.n	811abfa <__sccl+0x2e>
 811ac14:	7846      	ldrb	r6, [r0, #1]
 811ac16:	2e5d      	cmp	r6, #93	@ 0x5d
 811ac18:	d0fa      	beq.n	811ac10 <__sccl+0x44>
 811ac1a:	42b3      	cmp	r3, r6
 811ac1c:	dcf8      	bgt.n	811ac10 <__sccl+0x44>
 811ac1e:	3002      	adds	r0, #2
 811ac20:	461a      	mov	r2, r3
 811ac22:	3201      	adds	r2, #1
 811ac24:	4296      	cmp	r6, r2
 811ac26:	54a1      	strb	r1, [r4, r2]
 811ac28:	dcfb      	bgt.n	811ac22 <__sccl+0x56>
 811ac2a:	1af2      	subs	r2, r6, r3
 811ac2c:	3a01      	subs	r2, #1
 811ac2e:	1c5d      	adds	r5, r3, #1
 811ac30:	42b3      	cmp	r3, r6
 811ac32:	bfa8      	it	ge
 811ac34:	2200      	movge	r2, #0
 811ac36:	18ab      	adds	r3, r5, r2
 811ac38:	e7e1      	b.n	811abfe <__sccl+0x32>
 811ac3a:	4610      	mov	r0, r2
 811ac3c:	e7da      	b.n	811abf4 <__sccl+0x28>

0811ac3e <__submore>:
 811ac3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811ac42:	460c      	mov	r4, r1
 811ac44:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 811ac46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811ac4a:	4299      	cmp	r1, r3
 811ac4c:	d11d      	bne.n	811ac8a <__submore+0x4c>
 811ac4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 811ac52:	f7fd fd71 	bl	8118738 <_malloc_r>
 811ac56:	b918      	cbnz	r0, 811ac60 <__submore+0x22>
 811ac58:	f04f 30ff 	mov.w	r0, #4294967295
 811ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811ac60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811ac64:	63a3      	str	r3, [r4, #56]	@ 0x38
 811ac66:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 811ac6a:	6360      	str	r0, [r4, #52]	@ 0x34
 811ac6c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 811ac70:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 811ac74:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 811ac78:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 811ac7c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 811ac80:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 811ac84:	6020      	str	r0, [r4, #0]
 811ac86:	2000      	movs	r0, #0
 811ac88:	e7e8      	b.n	811ac5c <__submore+0x1e>
 811ac8a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 811ac8c:	0077      	lsls	r7, r6, #1
 811ac8e:	463a      	mov	r2, r7
 811ac90:	f000 fbaf 	bl	811b3f2 <_realloc_r>
 811ac94:	4605      	mov	r5, r0
 811ac96:	2800      	cmp	r0, #0
 811ac98:	d0de      	beq.n	811ac58 <__submore+0x1a>
 811ac9a:	eb00 0806 	add.w	r8, r0, r6
 811ac9e:	4601      	mov	r1, r0
 811aca0:	4632      	mov	r2, r6
 811aca2:	4640      	mov	r0, r8
 811aca4:	f7fc fe47 	bl	8117936 <memcpy>
 811aca8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 811acac:	f8c4 8000 	str.w	r8, [r4]
 811acb0:	e7e9      	b.n	811ac86 <__submore+0x48>
	...

0811acb4 <_fstat_r>:
 811acb4:	b538      	push	{r3, r4, r5, lr}
 811acb6:	4d07      	ldr	r5, [pc, #28]	@ (811acd4 <_fstat_r+0x20>)
 811acb8:	2300      	movs	r3, #0
 811acba:	4604      	mov	r4, r0
 811acbc:	4608      	mov	r0, r1
 811acbe:	4611      	mov	r1, r2
 811acc0:	602b      	str	r3, [r5, #0]
 811acc2:	f7e9 f8df 	bl	8103e84 <_fstat>
 811acc6:	1c43      	adds	r3, r0, #1
 811acc8:	d102      	bne.n	811acd0 <_fstat_r+0x1c>
 811acca:	682b      	ldr	r3, [r5, #0]
 811accc:	b103      	cbz	r3, 811acd0 <_fstat_r+0x1c>
 811acce:	6023      	str	r3, [r4, #0]
 811acd0:	bd38      	pop	{r3, r4, r5, pc}
 811acd2:	bf00      	nop
 811acd4:	10017894 	.word	0x10017894

0811acd8 <_isatty_r>:
 811acd8:	b538      	push	{r3, r4, r5, lr}
 811acda:	4d06      	ldr	r5, [pc, #24]	@ (811acf4 <_isatty_r+0x1c>)
 811acdc:	2300      	movs	r3, #0
 811acde:	4604      	mov	r4, r0
 811ace0:	4608      	mov	r0, r1
 811ace2:	602b      	str	r3, [r5, #0]
 811ace4:	f7e9 f8de 	bl	8103ea4 <_isatty>
 811ace8:	1c43      	adds	r3, r0, #1
 811acea:	d102      	bne.n	811acf2 <_isatty_r+0x1a>
 811acec:	682b      	ldr	r3, [r5, #0]
 811acee:	b103      	cbz	r3, 811acf2 <_isatty_r+0x1a>
 811acf0:	6023      	str	r3, [r4, #0]
 811acf2:	bd38      	pop	{r3, r4, r5, pc}
 811acf4:	10017894 	.word	0x10017894

0811acf8 <_sbrk_r>:
 811acf8:	b538      	push	{r3, r4, r5, lr}
 811acfa:	4d06      	ldr	r5, [pc, #24]	@ (811ad14 <_sbrk_r+0x1c>)
 811acfc:	2300      	movs	r3, #0
 811acfe:	4604      	mov	r4, r0
 811ad00:	4608      	mov	r0, r1
 811ad02:	602b      	str	r3, [r5, #0]
 811ad04:	f7e9 f8e6 	bl	8103ed4 <_sbrk>
 811ad08:	1c43      	adds	r3, r0, #1
 811ad0a:	d102      	bne.n	811ad12 <_sbrk_r+0x1a>
 811ad0c:	682b      	ldr	r3, [r5, #0]
 811ad0e:	b103      	cbz	r3, 811ad12 <_sbrk_r+0x1a>
 811ad10:	6023      	str	r3, [r4, #0]
 811ad12:	bd38      	pop	{r3, r4, r5, pc}
 811ad14:	10017894 	.word	0x10017894

0811ad18 <nan>:
 811ad18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 811ad20 <nan+0x8>
 811ad1c:	4770      	bx	lr
 811ad1e:	bf00      	nop
 811ad20:	00000000 	.word	0x00000000
 811ad24:	7ff80000 	.word	0x7ff80000

0811ad28 <abort>:
 811ad28:	b508      	push	{r3, lr}
 811ad2a:	2006      	movs	r0, #6
 811ad2c:	f000 fc36 	bl	811b59c <raise>
 811ad30:	2001      	movs	r0, #1
 811ad32:	f7e9 f857 	bl	8103de4 <_exit>

0811ad36 <_calloc_r>:
 811ad36:	b570      	push	{r4, r5, r6, lr}
 811ad38:	fba1 5402 	umull	r5, r4, r1, r2
 811ad3c:	b934      	cbnz	r4, 811ad4c <_calloc_r+0x16>
 811ad3e:	4629      	mov	r1, r5
 811ad40:	f7fd fcfa 	bl	8118738 <_malloc_r>
 811ad44:	4606      	mov	r6, r0
 811ad46:	b928      	cbnz	r0, 811ad54 <_calloc_r+0x1e>
 811ad48:	4630      	mov	r0, r6
 811ad4a:	bd70      	pop	{r4, r5, r6, pc}
 811ad4c:	220c      	movs	r2, #12
 811ad4e:	6002      	str	r2, [r0, #0]
 811ad50:	2600      	movs	r6, #0
 811ad52:	e7f9      	b.n	811ad48 <_calloc_r+0x12>
 811ad54:	462a      	mov	r2, r5
 811ad56:	4621      	mov	r1, r4
 811ad58:	f7fc fd38 	bl	81177cc <memset>
 811ad5c:	e7f4      	b.n	811ad48 <_calloc_r+0x12>

0811ad5e <rshift>:
 811ad5e:	6903      	ldr	r3, [r0, #16]
 811ad60:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 811ad64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 811ad68:	ea4f 1261 	mov.w	r2, r1, asr #5
 811ad6c:	f100 0414 	add.w	r4, r0, #20
 811ad70:	dd45      	ble.n	811adfe <rshift+0xa0>
 811ad72:	f011 011f 	ands.w	r1, r1, #31
 811ad76:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 811ad7a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 811ad7e:	d10c      	bne.n	811ad9a <rshift+0x3c>
 811ad80:	f100 0710 	add.w	r7, r0, #16
 811ad84:	4629      	mov	r1, r5
 811ad86:	42b1      	cmp	r1, r6
 811ad88:	d334      	bcc.n	811adf4 <rshift+0x96>
 811ad8a:	1a9b      	subs	r3, r3, r2
 811ad8c:	009b      	lsls	r3, r3, #2
 811ad8e:	1eea      	subs	r2, r5, #3
 811ad90:	4296      	cmp	r6, r2
 811ad92:	bf38      	it	cc
 811ad94:	2300      	movcc	r3, #0
 811ad96:	4423      	add	r3, r4
 811ad98:	e015      	b.n	811adc6 <rshift+0x68>
 811ad9a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 811ad9e:	f1c1 0820 	rsb	r8, r1, #32
 811ada2:	40cf      	lsrs	r7, r1
 811ada4:	f105 0e04 	add.w	lr, r5, #4
 811ada8:	46a1      	mov	r9, r4
 811adaa:	4576      	cmp	r6, lr
 811adac:	46f4      	mov	ip, lr
 811adae:	d815      	bhi.n	811addc <rshift+0x7e>
 811adb0:	1a9a      	subs	r2, r3, r2
 811adb2:	0092      	lsls	r2, r2, #2
 811adb4:	3a04      	subs	r2, #4
 811adb6:	3501      	adds	r5, #1
 811adb8:	42ae      	cmp	r6, r5
 811adba:	bf38      	it	cc
 811adbc:	2200      	movcc	r2, #0
 811adbe:	18a3      	adds	r3, r4, r2
 811adc0:	50a7      	str	r7, [r4, r2]
 811adc2:	b107      	cbz	r7, 811adc6 <rshift+0x68>
 811adc4:	3304      	adds	r3, #4
 811adc6:	1b1a      	subs	r2, r3, r4
 811adc8:	42a3      	cmp	r3, r4
 811adca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 811adce:	bf08      	it	eq
 811add0:	2300      	moveq	r3, #0
 811add2:	6102      	str	r2, [r0, #16]
 811add4:	bf08      	it	eq
 811add6:	6143      	streq	r3, [r0, #20]
 811add8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 811addc:	f8dc c000 	ldr.w	ip, [ip]
 811ade0:	fa0c fc08 	lsl.w	ip, ip, r8
 811ade4:	ea4c 0707 	orr.w	r7, ip, r7
 811ade8:	f849 7b04 	str.w	r7, [r9], #4
 811adec:	f85e 7b04 	ldr.w	r7, [lr], #4
 811adf0:	40cf      	lsrs	r7, r1
 811adf2:	e7da      	b.n	811adaa <rshift+0x4c>
 811adf4:	f851 cb04 	ldr.w	ip, [r1], #4
 811adf8:	f847 cf04 	str.w	ip, [r7, #4]!
 811adfc:	e7c3      	b.n	811ad86 <rshift+0x28>
 811adfe:	4623      	mov	r3, r4
 811ae00:	e7e1      	b.n	811adc6 <rshift+0x68>

0811ae02 <__hexdig_fun>:
 811ae02:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 811ae06:	2b09      	cmp	r3, #9
 811ae08:	d802      	bhi.n	811ae10 <__hexdig_fun+0xe>
 811ae0a:	3820      	subs	r0, #32
 811ae0c:	b2c0      	uxtb	r0, r0
 811ae0e:	4770      	bx	lr
 811ae10:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 811ae14:	2b05      	cmp	r3, #5
 811ae16:	d801      	bhi.n	811ae1c <__hexdig_fun+0x1a>
 811ae18:	3847      	subs	r0, #71	@ 0x47
 811ae1a:	e7f7      	b.n	811ae0c <__hexdig_fun+0xa>
 811ae1c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 811ae20:	2b05      	cmp	r3, #5
 811ae22:	d801      	bhi.n	811ae28 <__hexdig_fun+0x26>
 811ae24:	3827      	subs	r0, #39	@ 0x27
 811ae26:	e7f1      	b.n	811ae0c <__hexdig_fun+0xa>
 811ae28:	2000      	movs	r0, #0
 811ae2a:	4770      	bx	lr

0811ae2c <__gethex>:
 811ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811ae30:	b085      	sub	sp, #20
 811ae32:	468a      	mov	sl, r1
 811ae34:	9302      	str	r3, [sp, #8]
 811ae36:	680b      	ldr	r3, [r1, #0]
 811ae38:	9001      	str	r0, [sp, #4]
 811ae3a:	4690      	mov	r8, r2
 811ae3c:	1c9c      	adds	r4, r3, #2
 811ae3e:	46a1      	mov	r9, r4
 811ae40:	f814 0b01 	ldrb.w	r0, [r4], #1
 811ae44:	2830      	cmp	r0, #48	@ 0x30
 811ae46:	d0fa      	beq.n	811ae3e <__gethex+0x12>
 811ae48:	eba9 0303 	sub.w	r3, r9, r3
 811ae4c:	f1a3 0b02 	sub.w	fp, r3, #2
 811ae50:	f7ff ffd7 	bl	811ae02 <__hexdig_fun>
 811ae54:	4605      	mov	r5, r0
 811ae56:	2800      	cmp	r0, #0
 811ae58:	d168      	bne.n	811af2c <__gethex+0x100>
 811ae5a:	49a0      	ldr	r1, [pc, #640]	@ (811b0dc <__gethex+0x2b0>)
 811ae5c:	2201      	movs	r2, #1
 811ae5e:	4648      	mov	r0, r9
 811ae60:	f7fc fcc9 	bl	81177f6 <strncmp>
 811ae64:	4607      	mov	r7, r0
 811ae66:	2800      	cmp	r0, #0
 811ae68:	d167      	bne.n	811af3a <__gethex+0x10e>
 811ae6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 811ae6e:	4626      	mov	r6, r4
 811ae70:	f7ff ffc7 	bl	811ae02 <__hexdig_fun>
 811ae74:	2800      	cmp	r0, #0
 811ae76:	d062      	beq.n	811af3e <__gethex+0x112>
 811ae78:	4623      	mov	r3, r4
 811ae7a:	7818      	ldrb	r0, [r3, #0]
 811ae7c:	2830      	cmp	r0, #48	@ 0x30
 811ae7e:	4699      	mov	r9, r3
 811ae80:	f103 0301 	add.w	r3, r3, #1
 811ae84:	d0f9      	beq.n	811ae7a <__gethex+0x4e>
 811ae86:	f7ff ffbc 	bl	811ae02 <__hexdig_fun>
 811ae8a:	fab0 f580 	clz	r5, r0
 811ae8e:	096d      	lsrs	r5, r5, #5
 811ae90:	f04f 0b01 	mov.w	fp, #1
 811ae94:	464a      	mov	r2, r9
 811ae96:	4616      	mov	r6, r2
 811ae98:	3201      	adds	r2, #1
 811ae9a:	7830      	ldrb	r0, [r6, #0]
 811ae9c:	f7ff ffb1 	bl	811ae02 <__hexdig_fun>
 811aea0:	2800      	cmp	r0, #0
 811aea2:	d1f8      	bne.n	811ae96 <__gethex+0x6a>
 811aea4:	498d      	ldr	r1, [pc, #564]	@ (811b0dc <__gethex+0x2b0>)
 811aea6:	2201      	movs	r2, #1
 811aea8:	4630      	mov	r0, r6
 811aeaa:	f7fc fca4 	bl	81177f6 <strncmp>
 811aeae:	2800      	cmp	r0, #0
 811aeb0:	d13f      	bne.n	811af32 <__gethex+0x106>
 811aeb2:	b944      	cbnz	r4, 811aec6 <__gethex+0x9a>
 811aeb4:	1c74      	adds	r4, r6, #1
 811aeb6:	4622      	mov	r2, r4
 811aeb8:	4616      	mov	r6, r2
 811aeba:	3201      	adds	r2, #1
 811aebc:	7830      	ldrb	r0, [r6, #0]
 811aebe:	f7ff ffa0 	bl	811ae02 <__hexdig_fun>
 811aec2:	2800      	cmp	r0, #0
 811aec4:	d1f8      	bne.n	811aeb8 <__gethex+0x8c>
 811aec6:	1ba4      	subs	r4, r4, r6
 811aec8:	00a7      	lsls	r7, r4, #2
 811aeca:	7833      	ldrb	r3, [r6, #0]
 811aecc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 811aed0:	2b50      	cmp	r3, #80	@ 0x50
 811aed2:	d13e      	bne.n	811af52 <__gethex+0x126>
 811aed4:	7873      	ldrb	r3, [r6, #1]
 811aed6:	2b2b      	cmp	r3, #43	@ 0x2b
 811aed8:	d033      	beq.n	811af42 <__gethex+0x116>
 811aeda:	2b2d      	cmp	r3, #45	@ 0x2d
 811aedc:	d034      	beq.n	811af48 <__gethex+0x11c>
 811aede:	1c71      	adds	r1, r6, #1
 811aee0:	2400      	movs	r4, #0
 811aee2:	7808      	ldrb	r0, [r1, #0]
 811aee4:	f7ff ff8d 	bl	811ae02 <__hexdig_fun>
 811aee8:	1e43      	subs	r3, r0, #1
 811aeea:	b2db      	uxtb	r3, r3
 811aeec:	2b18      	cmp	r3, #24
 811aeee:	d830      	bhi.n	811af52 <__gethex+0x126>
 811aef0:	f1a0 0210 	sub.w	r2, r0, #16
 811aef4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 811aef8:	f7ff ff83 	bl	811ae02 <__hexdig_fun>
 811aefc:	f100 3cff 	add.w	ip, r0, #4294967295
 811af00:	fa5f fc8c 	uxtb.w	ip, ip
 811af04:	f1bc 0f18 	cmp.w	ip, #24
 811af08:	f04f 030a 	mov.w	r3, #10
 811af0c:	d91e      	bls.n	811af4c <__gethex+0x120>
 811af0e:	b104      	cbz	r4, 811af12 <__gethex+0xe6>
 811af10:	4252      	negs	r2, r2
 811af12:	4417      	add	r7, r2
 811af14:	f8ca 1000 	str.w	r1, [sl]
 811af18:	b1ed      	cbz	r5, 811af56 <__gethex+0x12a>
 811af1a:	f1bb 0f00 	cmp.w	fp, #0
 811af1e:	bf0c      	ite	eq
 811af20:	2506      	moveq	r5, #6
 811af22:	2500      	movne	r5, #0
 811af24:	4628      	mov	r0, r5
 811af26:	b005      	add	sp, #20
 811af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811af2c:	2500      	movs	r5, #0
 811af2e:	462c      	mov	r4, r5
 811af30:	e7b0      	b.n	811ae94 <__gethex+0x68>
 811af32:	2c00      	cmp	r4, #0
 811af34:	d1c7      	bne.n	811aec6 <__gethex+0x9a>
 811af36:	4627      	mov	r7, r4
 811af38:	e7c7      	b.n	811aeca <__gethex+0x9e>
 811af3a:	464e      	mov	r6, r9
 811af3c:	462f      	mov	r7, r5
 811af3e:	2501      	movs	r5, #1
 811af40:	e7c3      	b.n	811aeca <__gethex+0x9e>
 811af42:	2400      	movs	r4, #0
 811af44:	1cb1      	adds	r1, r6, #2
 811af46:	e7cc      	b.n	811aee2 <__gethex+0xb6>
 811af48:	2401      	movs	r4, #1
 811af4a:	e7fb      	b.n	811af44 <__gethex+0x118>
 811af4c:	fb03 0002 	mla	r0, r3, r2, r0
 811af50:	e7ce      	b.n	811aef0 <__gethex+0xc4>
 811af52:	4631      	mov	r1, r6
 811af54:	e7de      	b.n	811af14 <__gethex+0xe8>
 811af56:	eba6 0309 	sub.w	r3, r6, r9
 811af5a:	3b01      	subs	r3, #1
 811af5c:	4629      	mov	r1, r5
 811af5e:	2b07      	cmp	r3, #7
 811af60:	dc0a      	bgt.n	811af78 <__gethex+0x14c>
 811af62:	9801      	ldr	r0, [sp, #4]
 811af64:	f7fd fc74 	bl	8118850 <_Balloc>
 811af68:	4604      	mov	r4, r0
 811af6a:	b940      	cbnz	r0, 811af7e <__gethex+0x152>
 811af6c:	4b5c      	ldr	r3, [pc, #368]	@ (811b0e0 <__gethex+0x2b4>)
 811af6e:	4602      	mov	r2, r0
 811af70:	21e4      	movs	r1, #228	@ 0xe4
 811af72:	485c      	ldr	r0, [pc, #368]	@ (811b0e4 <__gethex+0x2b8>)
 811af74:	f7fc fcf4 	bl	8117960 <__assert_func>
 811af78:	3101      	adds	r1, #1
 811af7a:	105b      	asrs	r3, r3, #1
 811af7c:	e7ef      	b.n	811af5e <__gethex+0x132>
 811af7e:	f100 0a14 	add.w	sl, r0, #20
 811af82:	2300      	movs	r3, #0
 811af84:	4655      	mov	r5, sl
 811af86:	469b      	mov	fp, r3
 811af88:	45b1      	cmp	r9, r6
 811af8a:	d337      	bcc.n	811affc <__gethex+0x1d0>
 811af8c:	f845 bb04 	str.w	fp, [r5], #4
 811af90:	eba5 050a 	sub.w	r5, r5, sl
 811af94:	10ad      	asrs	r5, r5, #2
 811af96:	6125      	str	r5, [r4, #16]
 811af98:	4658      	mov	r0, fp
 811af9a:	f7fd fd4b 	bl	8118a34 <__hi0bits>
 811af9e:	016d      	lsls	r5, r5, #5
 811afa0:	f8d8 6000 	ldr.w	r6, [r8]
 811afa4:	1a2d      	subs	r5, r5, r0
 811afa6:	42b5      	cmp	r5, r6
 811afa8:	dd54      	ble.n	811b054 <__gethex+0x228>
 811afaa:	1bad      	subs	r5, r5, r6
 811afac:	4629      	mov	r1, r5
 811afae:	4620      	mov	r0, r4
 811afb0:	f7fe f8d7 	bl	8119162 <__any_on>
 811afb4:	4681      	mov	r9, r0
 811afb6:	b178      	cbz	r0, 811afd8 <__gethex+0x1ac>
 811afb8:	1e6b      	subs	r3, r5, #1
 811afba:	1159      	asrs	r1, r3, #5
 811afbc:	f003 021f 	and.w	r2, r3, #31
 811afc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 811afc4:	f04f 0901 	mov.w	r9, #1
 811afc8:	fa09 f202 	lsl.w	r2, r9, r2
 811afcc:	420a      	tst	r2, r1
 811afce:	d003      	beq.n	811afd8 <__gethex+0x1ac>
 811afd0:	454b      	cmp	r3, r9
 811afd2:	dc36      	bgt.n	811b042 <__gethex+0x216>
 811afd4:	f04f 0902 	mov.w	r9, #2
 811afd8:	4629      	mov	r1, r5
 811afda:	4620      	mov	r0, r4
 811afdc:	f7ff febf 	bl	811ad5e <rshift>
 811afe0:	442f      	add	r7, r5
 811afe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811afe6:	42bb      	cmp	r3, r7
 811afe8:	da42      	bge.n	811b070 <__gethex+0x244>
 811afea:	9801      	ldr	r0, [sp, #4]
 811afec:	4621      	mov	r1, r4
 811afee:	f7fd fc6f 	bl	81188d0 <_Bfree>
 811aff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811aff4:	2300      	movs	r3, #0
 811aff6:	6013      	str	r3, [r2, #0]
 811aff8:	25a3      	movs	r5, #163	@ 0xa3
 811affa:	e793      	b.n	811af24 <__gethex+0xf8>
 811affc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 811b000:	2a2e      	cmp	r2, #46	@ 0x2e
 811b002:	d012      	beq.n	811b02a <__gethex+0x1fe>
 811b004:	2b20      	cmp	r3, #32
 811b006:	d104      	bne.n	811b012 <__gethex+0x1e6>
 811b008:	f845 bb04 	str.w	fp, [r5], #4
 811b00c:	f04f 0b00 	mov.w	fp, #0
 811b010:	465b      	mov	r3, fp
 811b012:	7830      	ldrb	r0, [r6, #0]
 811b014:	9303      	str	r3, [sp, #12]
 811b016:	f7ff fef4 	bl	811ae02 <__hexdig_fun>
 811b01a:	9b03      	ldr	r3, [sp, #12]
 811b01c:	f000 000f 	and.w	r0, r0, #15
 811b020:	4098      	lsls	r0, r3
 811b022:	ea4b 0b00 	orr.w	fp, fp, r0
 811b026:	3304      	adds	r3, #4
 811b028:	e7ae      	b.n	811af88 <__gethex+0x15c>
 811b02a:	45b1      	cmp	r9, r6
 811b02c:	d8ea      	bhi.n	811b004 <__gethex+0x1d8>
 811b02e:	492b      	ldr	r1, [pc, #172]	@ (811b0dc <__gethex+0x2b0>)
 811b030:	9303      	str	r3, [sp, #12]
 811b032:	2201      	movs	r2, #1
 811b034:	4630      	mov	r0, r6
 811b036:	f7fc fbde 	bl	81177f6 <strncmp>
 811b03a:	9b03      	ldr	r3, [sp, #12]
 811b03c:	2800      	cmp	r0, #0
 811b03e:	d1e1      	bne.n	811b004 <__gethex+0x1d8>
 811b040:	e7a2      	b.n	811af88 <__gethex+0x15c>
 811b042:	1ea9      	subs	r1, r5, #2
 811b044:	4620      	mov	r0, r4
 811b046:	f7fe f88c 	bl	8119162 <__any_on>
 811b04a:	2800      	cmp	r0, #0
 811b04c:	d0c2      	beq.n	811afd4 <__gethex+0x1a8>
 811b04e:	f04f 0903 	mov.w	r9, #3
 811b052:	e7c1      	b.n	811afd8 <__gethex+0x1ac>
 811b054:	da09      	bge.n	811b06a <__gethex+0x23e>
 811b056:	1b75      	subs	r5, r6, r5
 811b058:	4621      	mov	r1, r4
 811b05a:	9801      	ldr	r0, [sp, #4]
 811b05c:	462a      	mov	r2, r5
 811b05e:	f7fd fe47 	bl	8118cf0 <__lshift>
 811b062:	1b7f      	subs	r7, r7, r5
 811b064:	4604      	mov	r4, r0
 811b066:	f100 0a14 	add.w	sl, r0, #20
 811b06a:	f04f 0900 	mov.w	r9, #0
 811b06e:	e7b8      	b.n	811afe2 <__gethex+0x1b6>
 811b070:	f8d8 5004 	ldr.w	r5, [r8, #4]
 811b074:	42bd      	cmp	r5, r7
 811b076:	dd6f      	ble.n	811b158 <__gethex+0x32c>
 811b078:	1bed      	subs	r5, r5, r7
 811b07a:	42ae      	cmp	r6, r5
 811b07c:	dc34      	bgt.n	811b0e8 <__gethex+0x2bc>
 811b07e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811b082:	2b02      	cmp	r3, #2
 811b084:	d022      	beq.n	811b0cc <__gethex+0x2a0>
 811b086:	2b03      	cmp	r3, #3
 811b088:	d024      	beq.n	811b0d4 <__gethex+0x2a8>
 811b08a:	2b01      	cmp	r3, #1
 811b08c:	d115      	bne.n	811b0ba <__gethex+0x28e>
 811b08e:	42ae      	cmp	r6, r5
 811b090:	d113      	bne.n	811b0ba <__gethex+0x28e>
 811b092:	2e01      	cmp	r6, #1
 811b094:	d10b      	bne.n	811b0ae <__gethex+0x282>
 811b096:	9a02      	ldr	r2, [sp, #8]
 811b098:	f8d8 3004 	ldr.w	r3, [r8, #4]
 811b09c:	6013      	str	r3, [r2, #0]
 811b09e:	2301      	movs	r3, #1
 811b0a0:	6123      	str	r3, [r4, #16]
 811b0a2:	f8ca 3000 	str.w	r3, [sl]
 811b0a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811b0a8:	2562      	movs	r5, #98	@ 0x62
 811b0aa:	601c      	str	r4, [r3, #0]
 811b0ac:	e73a      	b.n	811af24 <__gethex+0xf8>
 811b0ae:	1e71      	subs	r1, r6, #1
 811b0b0:	4620      	mov	r0, r4
 811b0b2:	f7fe f856 	bl	8119162 <__any_on>
 811b0b6:	2800      	cmp	r0, #0
 811b0b8:	d1ed      	bne.n	811b096 <__gethex+0x26a>
 811b0ba:	9801      	ldr	r0, [sp, #4]
 811b0bc:	4621      	mov	r1, r4
 811b0be:	f7fd fc07 	bl	81188d0 <_Bfree>
 811b0c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811b0c4:	2300      	movs	r3, #0
 811b0c6:	6013      	str	r3, [r2, #0]
 811b0c8:	2550      	movs	r5, #80	@ 0x50
 811b0ca:	e72b      	b.n	811af24 <__gethex+0xf8>
 811b0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811b0ce:	2b00      	cmp	r3, #0
 811b0d0:	d1f3      	bne.n	811b0ba <__gethex+0x28e>
 811b0d2:	e7e0      	b.n	811b096 <__gethex+0x26a>
 811b0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811b0d6:	2b00      	cmp	r3, #0
 811b0d8:	d1dd      	bne.n	811b096 <__gethex+0x26a>
 811b0da:	e7ee      	b.n	811b0ba <__gethex+0x28e>
 811b0dc:	0811f491 	.word	0x0811f491
 811b0e0:	0811f427 	.word	0x0811f427
 811b0e4:	0811f4c7 	.word	0x0811f4c7
 811b0e8:	1e6f      	subs	r7, r5, #1
 811b0ea:	f1b9 0f00 	cmp.w	r9, #0
 811b0ee:	d130      	bne.n	811b152 <__gethex+0x326>
 811b0f0:	b127      	cbz	r7, 811b0fc <__gethex+0x2d0>
 811b0f2:	4639      	mov	r1, r7
 811b0f4:	4620      	mov	r0, r4
 811b0f6:	f7fe f834 	bl	8119162 <__any_on>
 811b0fa:	4681      	mov	r9, r0
 811b0fc:	117a      	asrs	r2, r7, #5
 811b0fe:	2301      	movs	r3, #1
 811b100:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 811b104:	f007 071f 	and.w	r7, r7, #31
 811b108:	40bb      	lsls	r3, r7
 811b10a:	4213      	tst	r3, r2
 811b10c:	4629      	mov	r1, r5
 811b10e:	4620      	mov	r0, r4
 811b110:	bf18      	it	ne
 811b112:	f049 0902 	orrne.w	r9, r9, #2
 811b116:	f7ff fe22 	bl	811ad5e <rshift>
 811b11a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 811b11e:	1b76      	subs	r6, r6, r5
 811b120:	2502      	movs	r5, #2
 811b122:	f1b9 0f00 	cmp.w	r9, #0
 811b126:	d047      	beq.n	811b1b8 <__gethex+0x38c>
 811b128:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811b12c:	2b02      	cmp	r3, #2
 811b12e:	d015      	beq.n	811b15c <__gethex+0x330>
 811b130:	2b03      	cmp	r3, #3
 811b132:	d017      	beq.n	811b164 <__gethex+0x338>
 811b134:	2b01      	cmp	r3, #1
 811b136:	d109      	bne.n	811b14c <__gethex+0x320>
 811b138:	f019 0f02 	tst.w	r9, #2
 811b13c:	d006      	beq.n	811b14c <__gethex+0x320>
 811b13e:	f8da 3000 	ldr.w	r3, [sl]
 811b142:	ea49 0903 	orr.w	r9, r9, r3
 811b146:	f019 0f01 	tst.w	r9, #1
 811b14a:	d10e      	bne.n	811b16a <__gethex+0x33e>
 811b14c:	f045 0510 	orr.w	r5, r5, #16
 811b150:	e032      	b.n	811b1b8 <__gethex+0x38c>
 811b152:	f04f 0901 	mov.w	r9, #1
 811b156:	e7d1      	b.n	811b0fc <__gethex+0x2d0>
 811b158:	2501      	movs	r5, #1
 811b15a:	e7e2      	b.n	811b122 <__gethex+0x2f6>
 811b15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811b15e:	f1c3 0301 	rsb	r3, r3, #1
 811b162:	930f      	str	r3, [sp, #60]	@ 0x3c
 811b164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811b166:	2b00      	cmp	r3, #0
 811b168:	d0f0      	beq.n	811b14c <__gethex+0x320>
 811b16a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 811b16e:	f104 0314 	add.w	r3, r4, #20
 811b172:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 811b176:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 811b17a:	f04f 0c00 	mov.w	ip, #0
 811b17e:	4618      	mov	r0, r3
 811b180:	f853 2b04 	ldr.w	r2, [r3], #4
 811b184:	f1b2 3fff 	cmp.w	r2, #4294967295
 811b188:	d01b      	beq.n	811b1c2 <__gethex+0x396>
 811b18a:	3201      	adds	r2, #1
 811b18c:	6002      	str	r2, [r0, #0]
 811b18e:	2d02      	cmp	r5, #2
 811b190:	f104 0314 	add.w	r3, r4, #20
 811b194:	d13c      	bne.n	811b210 <__gethex+0x3e4>
 811b196:	f8d8 2000 	ldr.w	r2, [r8]
 811b19a:	3a01      	subs	r2, #1
 811b19c:	42b2      	cmp	r2, r6
 811b19e:	d109      	bne.n	811b1b4 <__gethex+0x388>
 811b1a0:	1171      	asrs	r1, r6, #5
 811b1a2:	2201      	movs	r2, #1
 811b1a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 811b1a8:	f006 061f 	and.w	r6, r6, #31
 811b1ac:	fa02 f606 	lsl.w	r6, r2, r6
 811b1b0:	421e      	tst	r6, r3
 811b1b2:	d13a      	bne.n	811b22a <__gethex+0x3fe>
 811b1b4:	f045 0520 	orr.w	r5, r5, #32
 811b1b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811b1ba:	601c      	str	r4, [r3, #0]
 811b1bc:	9b02      	ldr	r3, [sp, #8]
 811b1be:	601f      	str	r7, [r3, #0]
 811b1c0:	e6b0      	b.n	811af24 <__gethex+0xf8>
 811b1c2:	4299      	cmp	r1, r3
 811b1c4:	f843 cc04 	str.w	ip, [r3, #-4]
 811b1c8:	d8d9      	bhi.n	811b17e <__gethex+0x352>
 811b1ca:	68a3      	ldr	r3, [r4, #8]
 811b1cc:	459b      	cmp	fp, r3
 811b1ce:	db17      	blt.n	811b200 <__gethex+0x3d4>
 811b1d0:	6861      	ldr	r1, [r4, #4]
 811b1d2:	9801      	ldr	r0, [sp, #4]
 811b1d4:	3101      	adds	r1, #1
 811b1d6:	f7fd fb3b 	bl	8118850 <_Balloc>
 811b1da:	4681      	mov	r9, r0
 811b1dc:	b918      	cbnz	r0, 811b1e6 <__gethex+0x3ba>
 811b1de:	4b1a      	ldr	r3, [pc, #104]	@ (811b248 <__gethex+0x41c>)
 811b1e0:	4602      	mov	r2, r0
 811b1e2:	2184      	movs	r1, #132	@ 0x84
 811b1e4:	e6c5      	b.n	811af72 <__gethex+0x146>
 811b1e6:	6922      	ldr	r2, [r4, #16]
 811b1e8:	3202      	adds	r2, #2
 811b1ea:	f104 010c 	add.w	r1, r4, #12
 811b1ee:	0092      	lsls	r2, r2, #2
 811b1f0:	300c      	adds	r0, #12
 811b1f2:	f7fc fba0 	bl	8117936 <memcpy>
 811b1f6:	4621      	mov	r1, r4
 811b1f8:	9801      	ldr	r0, [sp, #4]
 811b1fa:	f7fd fb69 	bl	81188d0 <_Bfree>
 811b1fe:	464c      	mov	r4, r9
 811b200:	6923      	ldr	r3, [r4, #16]
 811b202:	1c5a      	adds	r2, r3, #1
 811b204:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 811b208:	6122      	str	r2, [r4, #16]
 811b20a:	2201      	movs	r2, #1
 811b20c:	615a      	str	r2, [r3, #20]
 811b20e:	e7be      	b.n	811b18e <__gethex+0x362>
 811b210:	6922      	ldr	r2, [r4, #16]
 811b212:	455a      	cmp	r2, fp
 811b214:	dd0b      	ble.n	811b22e <__gethex+0x402>
 811b216:	2101      	movs	r1, #1
 811b218:	4620      	mov	r0, r4
 811b21a:	f7ff fda0 	bl	811ad5e <rshift>
 811b21e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811b222:	3701      	adds	r7, #1
 811b224:	42bb      	cmp	r3, r7
 811b226:	f6ff aee0 	blt.w	811afea <__gethex+0x1be>
 811b22a:	2501      	movs	r5, #1
 811b22c:	e7c2      	b.n	811b1b4 <__gethex+0x388>
 811b22e:	f016 061f 	ands.w	r6, r6, #31
 811b232:	d0fa      	beq.n	811b22a <__gethex+0x3fe>
 811b234:	4453      	add	r3, sl
 811b236:	f1c6 0620 	rsb	r6, r6, #32
 811b23a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 811b23e:	f7fd fbf9 	bl	8118a34 <__hi0bits>
 811b242:	42b0      	cmp	r0, r6
 811b244:	dbe7      	blt.n	811b216 <__gethex+0x3ea>
 811b246:	e7f0      	b.n	811b22a <__gethex+0x3fe>
 811b248:	0811f427 	.word	0x0811f427

0811b24c <L_shift>:
 811b24c:	f1c2 0208 	rsb	r2, r2, #8
 811b250:	0092      	lsls	r2, r2, #2
 811b252:	b570      	push	{r4, r5, r6, lr}
 811b254:	f1c2 0620 	rsb	r6, r2, #32
 811b258:	6843      	ldr	r3, [r0, #4]
 811b25a:	6804      	ldr	r4, [r0, #0]
 811b25c:	fa03 f506 	lsl.w	r5, r3, r6
 811b260:	432c      	orrs	r4, r5
 811b262:	40d3      	lsrs	r3, r2
 811b264:	6004      	str	r4, [r0, #0]
 811b266:	f840 3f04 	str.w	r3, [r0, #4]!
 811b26a:	4288      	cmp	r0, r1
 811b26c:	d3f4      	bcc.n	811b258 <L_shift+0xc>
 811b26e:	bd70      	pop	{r4, r5, r6, pc}

0811b270 <__match>:
 811b270:	b530      	push	{r4, r5, lr}
 811b272:	6803      	ldr	r3, [r0, #0]
 811b274:	3301      	adds	r3, #1
 811b276:	f811 4b01 	ldrb.w	r4, [r1], #1
 811b27a:	b914      	cbnz	r4, 811b282 <__match+0x12>
 811b27c:	6003      	str	r3, [r0, #0]
 811b27e:	2001      	movs	r0, #1
 811b280:	bd30      	pop	{r4, r5, pc}
 811b282:	f813 2b01 	ldrb.w	r2, [r3], #1
 811b286:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 811b28a:	2d19      	cmp	r5, #25
 811b28c:	bf98      	it	ls
 811b28e:	3220      	addls	r2, #32
 811b290:	42a2      	cmp	r2, r4
 811b292:	d0f0      	beq.n	811b276 <__match+0x6>
 811b294:	2000      	movs	r0, #0
 811b296:	e7f3      	b.n	811b280 <__match+0x10>

0811b298 <__hexnan>:
 811b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811b29c:	680b      	ldr	r3, [r1, #0]
 811b29e:	6801      	ldr	r1, [r0, #0]
 811b2a0:	115e      	asrs	r6, r3, #5
 811b2a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 811b2a6:	f013 031f 	ands.w	r3, r3, #31
 811b2aa:	b087      	sub	sp, #28
 811b2ac:	bf18      	it	ne
 811b2ae:	3604      	addne	r6, #4
 811b2b0:	2500      	movs	r5, #0
 811b2b2:	1f37      	subs	r7, r6, #4
 811b2b4:	4682      	mov	sl, r0
 811b2b6:	4690      	mov	r8, r2
 811b2b8:	9301      	str	r3, [sp, #4]
 811b2ba:	f846 5c04 	str.w	r5, [r6, #-4]
 811b2be:	46b9      	mov	r9, r7
 811b2c0:	463c      	mov	r4, r7
 811b2c2:	9502      	str	r5, [sp, #8]
 811b2c4:	46ab      	mov	fp, r5
 811b2c6:	784a      	ldrb	r2, [r1, #1]
 811b2c8:	1c4b      	adds	r3, r1, #1
 811b2ca:	9303      	str	r3, [sp, #12]
 811b2cc:	b342      	cbz	r2, 811b320 <__hexnan+0x88>
 811b2ce:	4610      	mov	r0, r2
 811b2d0:	9105      	str	r1, [sp, #20]
 811b2d2:	9204      	str	r2, [sp, #16]
 811b2d4:	f7ff fd95 	bl	811ae02 <__hexdig_fun>
 811b2d8:	2800      	cmp	r0, #0
 811b2da:	d151      	bne.n	811b380 <__hexnan+0xe8>
 811b2dc:	9a04      	ldr	r2, [sp, #16]
 811b2de:	9905      	ldr	r1, [sp, #20]
 811b2e0:	2a20      	cmp	r2, #32
 811b2e2:	d818      	bhi.n	811b316 <__hexnan+0x7e>
 811b2e4:	9b02      	ldr	r3, [sp, #8]
 811b2e6:	459b      	cmp	fp, r3
 811b2e8:	dd13      	ble.n	811b312 <__hexnan+0x7a>
 811b2ea:	454c      	cmp	r4, r9
 811b2ec:	d206      	bcs.n	811b2fc <__hexnan+0x64>
 811b2ee:	2d07      	cmp	r5, #7
 811b2f0:	dc04      	bgt.n	811b2fc <__hexnan+0x64>
 811b2f2:	462a      	mov	r2, r5
 811b2f4:	4649      	mov	r1, r9
 811b2f6:	4620      	mov	r0, r4
 811b2f8:	f7ff ffa8 	bl	811b24c <L_shift>
 811b2fc:	4544      	cmp	r4, r8
 811b2fe:	d952      	bls.n	811b3a6 <__hexnan+0x10e>
 811b300:	2300      	movs	r3, #0
 811b302:	f1a4 0904 	sub.w	r9, r4, #4
 811b306:	f844 3c04 	str.w	r3, [r4, #-4]
 811b30a:	f8cd b008 	str.w	fp, [sp, #8]
 811b30e:	464c      	mov	r4, r9
 811b310:	461d      	mov	r5, r3
 811b312:	9903      	ldr	r1, [sp, #12]
 811b314:	e7d7      	b.n	811b2c6 <__hexnan+0x2e>
 811b316:	2a29      	cmp	r2, #41	@ 0x29
 811b318:	d157      	bne.n	811b3ca <__hexnan+0x132>
 811b31a:	3102      	adds	r1, #2
 811b31c:	f8ca 1000 	str.w	r1, [sl]
 811b320:	f1bb 0f00 	cmp.w	fp, #0
 811b324:	d051      	beq.n	811b3ca <__hexnan+0x132>
 811b326:	454c      	cmp	r4, r9
 811b328:	d206      	bcs.n	811b338 <__hexnan+0xa0>
 811b32a:	2d07      	cmp	r5, #7
 811b32c:	dc04      	bgt.n	811b338 <__hexnan+0xa0>
 811b32e:	462a      	mov	r2, r5
 811b330:	4649      	mov	r1, r9
 811b332:	4620      	mov	r0, r4
 811b334:	f7ff ff8a 	bl	811b24c <L_shift>
 811b338:	4544      	cmp	r4, r8
 811b33a:	d936      	bls.n	811b3aa <__hexnan+0x112>
 811b33c:	f1a8 0204 	sub.w	r2, r8, #4
 811b340:	4623      	mov	r3, r4
 811b342:	f853 1b04 	ldr.w	r1, [r3], #4
 811b346:	f842 1f04 	str.w	r1, [r2, #4]!
 811b34a:	429f      	cmp	r7, r3
 811b34c:	d2f9      	bcs.n	811b342 <__hexnan+0xaa>
 811b34e:	1b3b      	subs	r3, r7, r4
 811b350:	f023 0303 	bic.w	r3, r3, #3
 811b354:	3304      	adds	r3, #4
 811b356:	3401      	adds	r4, #1
 811b358:	3e03      	subs	r6, #3
 811b35a:	42b4      	cmp	r4, r6
 811b35c:	bf88      	it	hi
 811b35e:	2304      	movhi	r3, #4
 811b360:	4443      	add	r3, r8
 811b362:	2200      	movs	r2, #0
 811b364:	f843 2b04 	str.w	r2, [r3], #4
 811b368:	429f      	cmp	r7, r3
 811b36a:	d2fb      	bcs.n	811b364 <__hexnan+0xcc>
 811b36c:	683b      	ldr	r3, [r7, #0]
 811b36e:	b91b      	cbnz	r3, 811b378 <__hexnan+0xe0>
 811b370:	4547      	cmp	r7, r8
 811b372:	d128      	bne.n	811b3c6 <__hexnan+0x12e>
 811b374:	2301      	movs	r3, #1
 811b376:	603b      	str	r3, [r7, #0]
 811b378:	2005      	movs	r0, #5
 811b37a:	b007      	add	sp, #28
 811b37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811b380:	3501      	adds	r5, #1
 811b382:	2d08      	cmp	r5, #8
 811b384:	f10b 0b01 	add.w	fp, fp, #1
 811b388:	dd06      	ble.n	811b398 <__hexnan+0x100>
 811b38a:	4544      	cmp	r4, r8
 811b38c:	d9c1      	bls.n	811b312 <__hexnan+0x7a>
 811b38e:	2300      	movs	r3, #0
 811b390:	f844 3c04 	str.w	r3, [r4, #-4]
 811b394:	2501      	movs	r5, #1
 811b396:	3c04      	subs	r4, #4
 811b398:	6822      	ldr	r2, [r4, #0]
 811b39a:	f000 000f 	and.w	r0, r0, #15
 811b39e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 811b3a2:	6020      	str	r0, [r4, #0]
 811b3a4:	e7b5      	b.n	811b312 <__hexnan+0x7a>
 811b3a6:	2508      	movs	r5, #8
 811b3a8:	e7b3      	b.n	811b312 <__hexnan+0x7a>
 811b3aa:	9b01      	ldr	r3, [sp, #4]
 811b3ac:	2b00      	cmp	r3, #0
 811b3ae:	d0dd      	beq.n	811b36c <__hexnan+0xd4>
 811b3b0:	f1c3 0320 	rsb	r3, r3, #32
 811b3b4:	f04f 32ff 	mov.w	r2, #4294967295
 811b3b8:	40da      	lsrs	r2, r3
 811b3ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 811b3be:	4013      	ands	r3, r2
 811b3c0:	f846 3c04 	str.w	r3, [r6, #-4]
 811b3c4:	e7d2      	b.n	811b36c <__hexnan+0xd4>
 811b3c6:	3f04      	subs	r7, #4
 811b3c8:	e7d0      	b.n	811b36c <__hexnan+0xd4>
 811b3ca:	2004      	movs	r0, #4
 811b3cc:	e7d5      	b.n	811b37a <__hexnan+0xe2>

0811b3ce <__ascii_mbtowc>:
 811b3ce:	b082      	sub	sp, #8
 811b3d0:	b901      	cbnz	r1, 811b3d4 <__ascii_mbtowc+0x6>
 811b3d2:	a901      	add	r1, sp, #4
 811b3d4:	b142      	cbz	r2, 811b3e8 <__ascii_mbtowc+0x1a>
 811b3d6:	b14b      	cbz	r3, 811b3ec <__ascii_mbtowc+0x1e>
 811b3d8:	7813      	ldrb	r3, [r2, #0]
 811b3da:	600b      	str	r3, [r1, #0]
 811b3dc:	7812      	ldrb	r2, [r2, #0]
 811b3de:	1e10      	subs	r0, r2, #0
 811b3e0:	bf18      	it	ne
 811b3e2:	2001      	movne	r0, #1
 811b3e4:	b002      	add	sp, #8
 811b3e6:	4770      	bx	lr
 811b3e8:	4610      	mov	r0, r2
 811b3ea:	e7fb      	b.n	811b3e4 <__ascii_mbtowc+0x16>
 811b3ec:	f06f 0001 	mvn.w	r0, #1
 811b3f0:	e7f8      	b.n	811b3e4 <__ascii_mbtowc+0x16>

0811b3f2 <_realloc_r>:
 811b3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811b3f6:	4607      	mov	r7, r0
 811b3f8:	4614      	mov	r4, r2
 811b3fa:	460d      	mov	r5, r1
 811b3fc:	b921      	cbnz	r1, 811b408 <_realloc_r+0x16>
 811b3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811b402:	4611      	mov	r1, r2
 811b404:	f7fd b998 	b.w	8118738 <_malloc_r>
 811b408:	b92a      	cbnz	r2, 811b416 <_realloc_r+0x24>
 811b40a:	f7fd f921 	bl	8118650 <_free_r>
 811b40e:	4625      	mov	r5, r4
 811b410:	4628      	mov	r0, r5
 811b412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811b416:	f000 f8dd 	bl	811b5d4 <_malloc_usable_size_r>
 811b41a:	4284      	cmp	r4, r0
 811b41c:	4606      	mov	r6, r0
 811b41e:	d802      	bhi.n	811b426 <_realloc_r+0x34>
 811b420:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 811b424:	d8f4      	bhi.n	811b410 <_realloc_r+0x1e>
 811b426:	4621      	mov	r1, r4
 811b428:	4638      	mov	r0, r7
 811b42a:	f7fd f985 	bl	8118738 <_malloc_r>
 811b42e:	4680      	mov	r8, r0
 811b430:	b908      	cbnz	r0, 811b436 <_realloc_r+0x44>
 811b432:	4645      	mov	r5, r8
 811b434:	e7ec      	b.n	811b410 <_realloc_r+0x1e>
 811b436:	42b4      	cmp	r4, r6
 811b438:	4622      	mov	r2, r4
 811b43a:	4629      	mov	r1, r5
 811b43c:	bf28      	it	cs
 811b43e:	4632      	movcs	r2, r6
 811b440:	f7fc fa79 	bl	8117936 <memcpy>
 811b444:	4629      	mov	r1, r5
 811b446:	4638      	mov	r0, r7
 811b448:	f7fd f902 	bl	8118650 <_free_r>
 811b44c:	e7f1      	b.n	811b432 <_realloc_r+0x40>
	...

0811b450 <_strtoul_l.isra.0>:
 811b450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 811b454:	4e34      	ldr	r6, [pc, #208]	@ (811b528 <_strtoul_l.isra.0+0xd8>)
 811b456:	4686      	mov	lr, r0
 811b458:	460d      	mov	r5, r1
 811b45a:	4628      	mov	r0, r5
 811b45c:	f815 4b01 	ldrb.w	r4, [r5], #1
 811b460:	5d37      	ldrb	r7, [r6, r4]
 811b462:	f017 0708 	ands.w	r7, r7, #8
 811b466:	d1f8      	bne.n	811b45a <_strtoul_l.isra.0+0xa>
 811b468:	2c2d      	cmp	r4, #45	@ 0x2d
 811b46a:	d110      	bne.n	811b48e <_strtoul_l.isra.0+0x3e>
 811b46c:	782c      	ldrb	r4, [r5, #0]
 811b46e:	2701      	movs	r7, #1
 811b470:	1c85      	adds	r5, r0, #2
 811b472:	f033 0010 	bics.w	r0, r3, #16
 811b476:	d115      	bne.n	811b4a4 <_strtoul_l.isra.0+0x54>
 811b478:	2c30      	cmp	r4, #48	@ 0x30
 811b47a:	d10d      	bne.n	811b498 <_strtoul_l.isra.0+0x48>
 811b47c:	7828      	ldrb	r0, [r5, #0]
 811b47e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 811b482:	2858      	cmp	r0, #88	@ 0x58
 811b484:	d108      	bne.n	811b498 <_strtoul_l.isra.0+0x48>
 811b486:	786c      	ldrb	r4, [r5, #1]
 811b488:	3502      	adds	r5, #2
 811b48a:	2310      	movs	r3, #16
 811b48c:	e00a      	b.n	811b4a4 <_strtoul_l.isra.0+0x54>
 811b48e:	2c2b      	cmp	r4, #43	@ 0x2b
 811b490:	bf04      	itt	eq
 811b492:	782c      	ldrbeq	r4, [r5, #0]
 811b494:	1c85      	addeq	r5, r0, #2
 811b496:	e7ec      	b.n	811b472 <_strtoul_l.isra.0+0x22>
 811b498:	2b00      	cmp	r3, #0
 811b49a:	d1f6      	bne.n	811b48a <_strtoul_l.isra.0+0x3a>
 811b49c:	2c30      	cmp	r4, #48	@ 0x30
 811b49e:	bf14      	ite	ne
 811b4a0:	230a      	movne	r3, #10
 811b4a2:	2308      	moveq	r3, #8
 811b4a4:	f04f 38ff 	mov.w	r8, #4294967295
 811b4a8:	2600      	movs	r6, #0
 811b4aa:	fbb8 f8f3 	udiv	r8, r8, r3
 811b4ae:	fb03 f908 	mul.w	r9, r3, r8
 811b4b2:	ea6f 0909 	mvn.w	r9, r9
 811b4b6:	4630      	mov	r0, r6
 811b4b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 811b4bc:	f1bc 0f09 	cmp.w	ip, #9
 811b4c0:	d810      	bhi.n	811b4e4 <_strtoul_l.isra.0+0x94>
 811b4c2:	4664      	mov	r4, ip
 811b4c4:	42a3      	cmp	r3, r4
 811b4c6:	dd1e      	ble.n	811b506 <_strtoul_l.isra.0+0xb6>
 811b4c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 811b4cc:	d007      	beq.n	811b4de <_strtoul_l.isra.0+0x8e>
 811b4ce:	4580      	cmp	r8, r0
 811b4d0:	d316      	bcc.n	811b500 <_strtoul_l.isra.0+0xb0>
 811b4d2:	d101      	bne.n	811b4d8 <_strtoul_l.isra.0+0x88>
 811b4d4:	45a1      	cmp	r9, r4
 811b4d6:	db13      	blt.n	811b500 <_strtoul_l.isra.0+0xb0>
 811b4d8:	fb00 4003 	mla	r0, r0, r3, r4
 811b4dc:	2601      	movs	r6, #1
 811b4de:	f815 4b01 	ldrb.w	r4, [r5], #1
 811b4e2:	e7e9      	b.n	811b4b8 <_strtoul_l.isra.0+0x68>
 811b4e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 811b4e8:	f1bc 0f19 	cmp.w	ip, #25
 811b4ec:	d801      	bhi.n	811b4f2 <_strtoul_l.isra.0+0xa2>
 811b4ee:	3c37      	subs	r4, #55	@ 0x37
 811b4f0:	e7e8      	b.n	811b4c4 <_strtoul_l.isra.0+0x74>
 811b4f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 811b4f6:	f1bc 0f19 	cmp.w	ip, #25
 811b4fa:	d804      	bhi.n	811b506 <_strtoul_l.isra.0+0xb6>
 811b4fc:	3c57      	subs	r4, #87	@ 0x57
 811b4fe:	e7e1      	b.n	811b4c4 <_strtoul_l.isra.0+0x74>
 811b500:	f04f 36ff 	mov.w	r6, #4294967295
 811b504:	e7eb      	b.n	811b4de <_strtoul_l.isra.0+0x8e>
 811b506:	1c73      	adds	r3, r6, #1
 811b508:	d106      	bne.n	811b518 <_strtoul_l.isra.0+0xc8>
 811b50a:	2322      	movs	r3, #34	@ 0x22
 811b50c:	f8ce 3000 	str.w	r3, [lr]
 811b510:	4630      	mov	r0, r6
 811b512:	b932      	cbnz	r2, 811b522 <_strtoul_l.isra.0+0xd2>
 811b514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 811b518:	b107      	cbz	r7, 811b51c <_strtoul_l.isra.0+0xcc>
 811b51a:	4240      	negs	r0, r0
 811b51c:	2a00      	cmp	r2, #0
 811b51e:	d0f9      	beq.n	811b514 <_strtoul_l.isra.0+0xc4>
 811b520:	b106      	cbz	r6, 811b524 <_strtoul_l.isra.0+0xd4>
 811b522:	1e69      	subs	r1, r5, #1
 811b524:	6011      	str	r1, [r2, #0]
 811b526:	e7f5      	b.n	811b514 <_strtoul_l.isra.0+0xc4>
 811b528:	0811f528 	.word	0x0811f528

0811b52c <_strtoul_r>:
 811b52c:	f7ff bf90 	b.w	811b450 <_strtoul_l.isra.0>

0811b530 <__ascii_wctomb>:
 811b530:	4603      	mov	r3, r0
 811b532:	4608      	mov	r0, r1
 811b534:	b141      	cbz	r1, 811b548 <__ascii_wctomb+0x18>
 811b536:	2aff      	cmp	r2, #255	@ 0xff
 811b538:	d904      	bls.n	811b544 <__ascii_wctomb+0x14>
 811b53a:	228a      	movs	r2, #138	@ 0x8a
 811b53c:	601a      	str	r2, [r3, #0]
 811b53e:	f04f 30ff 	mov.w	r0, #4294967295
 811b542:	4770      	bx	lr
 811b544:	700a      	strb	r2, [r1, #0]
 811b546:	2001      	movs	r0, #1
 811b548:	4770      	bx	lr

0811b54a <_raise_r>:
 811b54a:	291f      	cmp	r1, #31
 811b54c:	b538      	push	{r3, r4, r5, lr}
 811b54e:	4605      	mov	r5, r0
 811b550:	460c      	mov	r4, r1
 811b552:	d904      	bls.n	811b55e <_raise_r+0x14>
 811b554:	2316      	movs	r3, #22
 811b556:	6003      	str	r3, [r0, #0]
 811b558:	f04f 30ff 	mov.w	r0, #4294967295
 811b55c:	bd38      	pop	{r3, r4, r5, pc}
 811b55e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 811b560:	b112      	cbz	r2, 811b568 <_raise_r+0x1e>
 811b562:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811b566:	b94b      	cbnz	r3, 811b57c <_raise_r+0x32>
 811b568:	4628      	mov	r0, r5
 811b56a:	f000 f831 	bl	811b5d0 <_getpid_r>
 811b56e:	4622      	mov	r2, r4
 811b570:	4601      	mov	r1, r0
 811b572:	4628      	mov	r0, r5
 811b574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811b578:	f000 b818 	b.w	811b5ac <_kill_r>
 811b57c:	2b01      	cmp	r3, #1
 811b57e:	d00a      	beq.n	811b596 <_raise_r+0x4c>
 811b580:	1c59      	adds	r1, r3, #1
 811b582:	d103      	bne.n	811b58c <_raise_r+0x42>
 811b584:	2316      	movs	r3, #22
 811b586:	6003      	str	r3, [r0, #0]
 811b588:	2001      	movs	r0, #1
 811b58a:	e7e7      	b.n	811b55c <_raise_r+0x12>
 811b58c:	2100      	movs	r1, #0
 811b58e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 811b592:	4620      	mov	r0, r4
 811b594:	4798      	blx	r3
 811b596:	2000      	movs	r0, #0
 811b598:	e7e0      	b.n	811b55c <_raise_r+0x12>
	...

0811b59c <raise>:
 811b59c:	4b02      	ldr	r3, [pc, #8]	@ (811b5a8 <raise+0xc>)
 811b59e:	4601      	mov	r1, r0
 811b5a0:	6818      	ldr	r0, [r3, #0]
 811b5a2:	f7ff bfd2 	b.w	811b54a <_raise_r>
 811b5a6:	bf00      	nop
 811b5a8:	100001d8 	.word	0x100001d8

0811b5ac <_kill_r>:
 811b5ac:	b538      	push	{r3, r4, r5, lr}
 811b5ae:	4d07      	ldr	r5, [pc, #28]	@ (811b5cc <_kill_r+0x20>)
 811b5b0:	2300      	movs	r3, #0
 811b5b2:	4604      	mov	r4, r0
 811b5b4:	4608      	mov	r0, r1
 811b5b6:	4611      	mov	r1, r2
 811b5b8:	602b      	str	r3, [r5, #0]
 811b5ba:	f7e8 fc01 	bl	8103dc0 <_kill>
 811b5be:	1c43      	adds	r3, r0, #1
 811b5c0:	d102      	bne.n	811b5c8 <_kill_r+0x1c>
 811b5c2:	682b      	ldr	r3, [r5, #0]
 811b5c4:	b103      	cbz	r3, 811b5c8 <_kill_r+0x1c>
 811b5c6:	6023      	str	r3, [r4, #0]
 811b5c8:	bd38      	pop	{r3, r4, r5, pc}
 811b5ca:	bf00      	nop
 811b5cc:	10017894 	.word	0x10017894

0811b5d0 <_getpid_r>:
 811b5d0:	f7e8 bbed 	b.w	8103dae <_getpid>

0811b5d4 <_malloc_usable_size_r>:
 811b5d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811b5d8:	1f18      	subs	r0, r3, #4
 811b5da:	2b00      	cmp	r3, #0
 811b5dc:	bfbc      	itt	lt
 811b5de:	580b      	ldrlt	r3, [r1, r0]
 811b5e0:	18c0      	addlt	r0, r0, r3
 811b5e2:	4770      	bx	lr

0811b5e4 <_init>:
 811b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b5e6:	bf00      	nop
 811b5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811b5ea:	bc08      	pop	{r3}
 811b5ec:	469e      	mov	lr, r3
 811b5ee:	4770      	bx	lr

0811b5f0 <_fini>:
 811b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b5f2:	bf00      	nop
 811b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811b5f6:	bc08      	pop	{r3}
 811b5f8:	469e      	mov	lr, r3
 811b5fa:	4770      	bx	lr
