
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a3ac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004364  0802a650  0802a650  0002b650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003ed2  0802e9b4  0802e9b4  0002f9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000004c  08032888  08032888  00033888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00b626e0  90000000  90000000  00035000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000482  90b626e0  90b626e0  00b976e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080328d4  080328d4  00b97b62  2**0
                  CONTENTS
  8 .ARM          00000008  080328d4  080328d4  000338d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080328dc  080328dc  00b97b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000020  080328dc  080328dc  000338dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   0000000c  080328fc  080328fc  000338fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08032908  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  08032a44  00034140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  08032b44  00034240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00062b98  24000340  08032c44  00034340  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  24062ed8  08032c44  00034ed8  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  00b97b62  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00b98000  2**2
                  ALLOC
 19 .debug_info   0018ec6c  00000000  00000000  00b97b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00025776  00000000  00000000  00d267fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004948  00000000  00000000  00d4bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00003f1f  00000000  00000000  00d508c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0005bb47  00000000  00000000  00d547df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00097f04  00000000  00000000  00db0326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001f2854  00000000  00000000  00e4822a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0103aa7e  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000c808  00000000  00000000  0103ab40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 000307fa  00000000  00000000  01047348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 000000a3  00000000  00000000  01077b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a634 	.word	0x0802a634

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	0802a634 	.word	0x0802a634

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80006f8:	b508      	push	{r3, lr}
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006fa:	4902      	ldr	r1, [pc, #8]	@ (8000704 <vApplicationIdleHook+0xc>)
 80006fc:	2000      	movs	r0, #0
 80006fe:	f013 f87b 	bl	80137f8 <vTaskSetApplicationTaskTag>
}
 8000702:	bd08      	pop	{r3, pc}
 8000704:	0800233d 	.word	0x0800233d

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b500      	push	{lr}
 800070a:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070c:	224c      	movs	r2, #76	@ 0x4c
 800070e:	2100      	movs	r1, #0
 8000710:	a809      	add	r0, sp, #36	@ 0x24
 8000712:	f029 f9f9 	bl	8029b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	a801      	add	r0, sp, #4
 800071c:	f029 f9f4 	bl	8029b08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000720:	2004      	movs	r0, #4
 8000722:	f00e fe4b 	bl	800f3bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000726:	2300      	movs	r3, #0
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <SystemClock_Config+0xcc>)
 800072c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072e:	f022 0201 	bic.w	r2, r2, #1
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <SystemClock_Config+0xd0>)
 800073e:	699a      	ldr	r2, [r3, #24]
 8000740:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000744:	619a      	str	r2, [r3, #24]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000752:	6993      	ldr	r3, [r2, #24]
 8000754:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000758:	d0fb      	beq.n	8000752 <SystemClock_Config+0x4a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800075a:	2303      	movs	r3, #3
 800075c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000762:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000764:	2301      	movs	r3, #1
 8000766:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2340      	movs	r3, #64	@ 0x40
 800076a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000770:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000772:	2205      	movs	r2, #5
 8000774:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000776:	22a0      	movs	r2, #160	@ 0xa0
 8000778:	9215      	str	r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077a:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800077c:	2208      	movs	r2, #8
 800077e:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000780:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000782:	9219      	str	r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000784:	2300      	movs	r3, #0
 8000786:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000788:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	a809      	add	r0, sp, #36	@ 0x24
 800078c:	f00f f990 	bl	800fab0 <HAL_RCC_OscConfig>
 8000790:	b9e0      	cbnz	r0, 80007cc <SystemClock_Config+0xc4>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	233f      	movs	r3, #63	@ 0x3f
 8000794:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079e:	2308      	movs	r3, #8
 80007a0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007a2:	2340      	movs	r3, #64	@ 0x40
 80007a4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007ac:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007ae:	9308      	str	r3, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	2102      	movs	r1, #2
 80007b2:	a801      	add	r0, sp, #4
 80007b4:	f00f fe22 	bl	80103fc <HAL_RCC_ClockConfig>
 80007b8:	b950      	cbnz	r0, 80007d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007be:	2100      	movs	r1, #0
 80007c0:	4608      	mov	r0, r1
 80007c2:	f00f fccf 	bl	8010164 <HAL_RCC_MCOConfig>
}
 80007c6:	b01d      	add	sp, #116	@ 0x74
 80007c8:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ce:	e7fe      	b.n	80007ce <SystemClock_Config+0xc6>
 80007d0:	b672      	cpsid	i
 80007d2:	e7fe      	b.n	80007d2 <SystemClock_Config+0xca>
 80007d4:	58000400 	.word	0x58000400
 80007d8:	58024800 	.word	0x58024800

080007dc <main>:
{
 80007dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e0:	b0bb      	sub	sp, #236	@ 0xec
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e2:	2400      	movs	r4, #0
 80007e4:	942d      	str	r4, [sp, #180]	@ 0xb4
 80007e6:	942e      	str	r4, [sp, #184]	@ 0xb8
 80007e8:	942f      	str	r4, [sp, #188]	@ 0xbc
 80007ea:	9430      	str	r4, [sp, #192]	@ 0xc0
  HAL_MPU_Disable();
 80007ec:	f00b f900 	bl	800b9f0 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007f0:	2501      	movs	r5, #1
 80007f2:	f88d 50b4 	strb.w	r5, [sp, #180]	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007f6:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x90000000;
 80007fa:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80007fe:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000800:	231b      	movs	r3, #27
 8000802:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000806:	f88d 40bd 	strb.w	r4, [sp, #189]	@ 0xbd
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800080a:	f88d 40be 	strb.w	r4, [sp, #190]	@ 0xbe
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800080e:	2603      	movs	r6, #3
 8000810:	f88d 60bf 	strb.w	r6, [sp, #191]	@ 0xbf
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000814:	f88d 50c0 	strb.w	r5, [sp, #192]	@ 0xc0
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000818:	f88d 40c1 	strb.w	r4, [sp, #193]	@ 0xc1
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800081c:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000820:	f88d 40c3 	strb.w	r4, [sp, #195]	@ 0xc3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
 8000826:	f00b f901 	bl	800ba2c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800082a:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800082e:	231a      	movs	r3, #26
 8000830:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000834:	a82d      	add	r0, sp, #180	@ 0xb4
 8000836:	f00b f8f9 	bl	800ba2c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800083a:	2302      	movs	r3, #2
 800083c:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000840:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000844:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000846:	2318      	movs	r3, #24
 8000848:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800084c:	f88d 50c2 	strb.w	r5, [sp, #194]	@ 0xc2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000850:	a82d      	add	r0, sp, #180	@ 0xb4
 8000852:	f00b f8eb 	bl	800ba2c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000856:	f88d 60b5 	strb.w	r6, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800085a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800085e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000860:	2312      	movs	r3, #18
 8000862:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000866:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086a:	a82d      	add	r0, sp, #180	@ 0xb4
 800086c:	f00b f8de 	bl	800ba2c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000870:	2404      	movs	r4, #4
 8000872:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000876:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800087a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800087c:	2311      	movs	r3, #17
 800087e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000882:	a82d      	add	r0, sp, #180	@ 0xb4
 8000884:	f00b f8d2 	bl	800ba2c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000888:	2305      	movs	r3, #5
 800088a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 800088e:	4b44      	ldr	r3, [pc, #272]	@ (80009a0 <main+0x1c4>)
 8000890:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000892:	230e      	movs	r3, #14
 8000894:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000898:	f88d 50c0 	strb.w	r5, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800089c:	a82d      	add	r0, sp, #180	@ 0xb4
 800089e:	f00b f8c5 	bl	800ba2c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008a2:	4620      	mov	r0, r4
 80008a4:	f00b f8b2 	bl	800ba0c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008a8:	4b3e      	ldr	r3, [pc, #248]	@ (80009a4 <main+0x1c8>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80008b0:	d113      	bne.n	80008da <main+0xfe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008ba:	4b3a      	ldr	r3, [pc, #232]	@ (80009a4 <main+0x1c8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008c6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008d0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008da:	4b32      	ldr	r3, [pc, #200]	@ (80009a4 <main+0x1c8>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80008e2:	d129      	bne.n	8000938 <main+0x15c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008e4:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <main+0x1c8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008ec:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008f4:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008f8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008fc:	015c      	lsls	r4, r3, #5
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008fe:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
 8000902:	4828      	ldr	r0, [pc, #160]	@ (80009a4 <main+0x1c8>)
 8000904:	ea04 0105 	and.w	r1, r4, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000908:	4633      	mov	r3, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800090a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
 800090e:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d1f7      	bne.n	800090a <main+0x12e>
    } while(sets-- != 0U);
 800091a:	3c20      	subs	r4, #32
 800091c:	f114 0f20 	cmn.w	r4, #32
 8000920:	d1f0      	bne.n	8000904 <main+0x128>
 8000922:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000926:	4a1f      	ldr	r2, [pc, #124]	@ (80009a4 <main+0x1c8>)
 8000928:	6953      	ldr	r3, [r2, #20]
 800092a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800092e:	6153      	str	r3, [r2, #20]
 8000930:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000934:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000938:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800093c:	491a      	ldr	r1, [pc, #104]	@ (80009a8 <main+0x1cc>)
 800093e:	680a      	ldr	r2, [r1, #0]
 8000940:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8000944:	d005      	beq.n	8000952 <main+0x176>
 8000946:	3b01      	subs	r3, #1
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094c:	d1f7      	bne.n	800093e <main+0x162>
  __ASM volatile ("cpsid i" : : : "memory");
 800094e:	b672      	cpsid	i
  while (1)
 8000950:	e7fe      	b.n	8000950 <main+0x174>
  if ( timeout < 0 )
 8000952:	2b00      	cmp	r3, #0
 8000954:	dbfb      	blt.n	800094e <main+0x172>
  HAL_Init();
 8000956:	f00a ff79 	bl	800b84c <HAL_Init>
  SystemClock_Config();
 800095a:	f7ff fed5 	bl	8000708 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <main+0x1cc>)
 8000960:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000964:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000968:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000978:	2000      	movs	r0, #0
 800097a:	f00c fc53 	bl	800d224 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800097e:	2100      	movs	r1, #0
 8000980:	4608      	mov	r0, r1
 8000982:	f00c fc5d 	bl	800d240 <HAL_HSEM_Release>
timeout = 0xFFFF;
 8000986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800098a:	4907      	ldr	r1, [pc, #28]	@ (80009a8 <main+0x1cc>)
 800098c:	680a      	ldr	r2, [r1, #0]
 800098e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8000992:	d10b      	bne.n	80009ac <main+0x1d0>
 8000994:	3b01      	subs	r3, #1
 8000996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099a:	d1f7      	bne.n	800098c <main+0x1b0>
 800099c:	b672      	cpsid	i
  while (1)
 800099e:	e7fe      	b.n	800099e <main+0x1c2>
 80009a0:	10040000 	.word	0x10040000
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	58024400 	.word	0x58024400
if ( timeout < 0 )
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dbf5      	blt.n	800099c <main+0x1c0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	2500      	movs	r5, #0
 80009b2:	952d      	str	r5, [sp, #180]	@ 0xb4
 80009b4:	952e      	str	r5, [sp, #184]	@ 0xb8
 80009b6:	952f      	str	r5, [sp, #188]	@ 0xbc
 80009b8:	9530      	str	r5, [sp, #192]	@ 0xc0
 80009ba:	9531      	str	r5, [sp, #196]	@ 0xc4
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009bc:	4cc2      	ldr	r4, [pc, #776]	@ (8000cc8 <main+0x4ec>)
 80009be:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80009c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c6:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80009ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80009ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009d2:	9304      	str	r3, [sp, #16]
 80009d4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80009da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009de:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80009e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80009e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ea:	9305      	str	r3, [sp, #20]
 80009ec:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80009fa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	9306      	str	r3, [sp, #24]
 8000a04:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a0e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000a12:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1a:	9307      	str	r3, [sp, #28]
 8000a1c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000a2a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	9308      	str	r3, [sp, #32]
 8000a34:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000a42:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a4e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a56:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000a5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a62:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000a72:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000a8a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	930c      	str	r3, [sp, #48]	@ 0x30
 8000a94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a96:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a9a:	f043 0320 	orr.w	r3, r3, #32
 8000a9e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000aa2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	930d      	str	r3, [sp, #52]	@ 0x34
 8000aac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000aae:	4f87      	ldr	r7, [pc, #540]	@ (8000ccc <main+0x4f0>)
 8000ab0:	462a      	mov	r2, r5
 8000ab2:	f241 3108 	movw	r1, #4872	@ 0x1308
 8000ab6:	4638      	mov	r0, r7
 8000ab8:	f00c fba4 	bl	800d204 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000abc:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8000cfc <main+0x520>
 8000ac0:	462a      	mov	r2, r5
 8000ac2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac6:	4658      	mov	r0, fp
 8000ac8:	f00c fb9c 	bl	800d204 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000acc:	462a      	mov	r2, r5
 8000ace:	2108      	movs	r1, #8
 8000ad0:	487f      	ldr	r0, [pc, #508]	@ (8000cd0 <main+0x4f4>)
 8000ad2:	f00c fb97 	bl	800d204 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000ad6:	462a      	mov	r2, r5
 8000ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000adc:	487d      	ldr	r0, [pc, #500]	@ (8000cd4 <main+0x4f8>)
 8000ade:	f00c fb91 	bl	800d204 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8000ae2:	f241 3308 	movw	r3, #4872	@ 0x1308
 8000ae6:	932d      	str	r3, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2601      	movs	r6, #1
 8000aea:	962e      	str	r6, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	952f      	str	r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	f04f 0803 	mov.w	r8, #3
 8000af2:	f8cd 80c0 	str.w	r8, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000af6:	a92d      	add	r1, sp, #180	@ 0xb4
 8000af8:	4638      	mov	r0, r7
 8000afa:	f00c f9c7 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000afe:	f44f 7a80 	mov.w	sl, #256	@ 0x100
 8000b02:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2702      	movs	r7, #2
 8000b08:	972e      	str	r7, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	952f      	str	r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	9530      	str	r5, [sp, #192]	@ 0xc0
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b0e:	9531      	str	r5, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	a92d      	add	r1, sp, #180	@ 0xb4
 8000b12:	4871      	ldr	r0, [pc, #452]	@ (8000cd8 <main+0x4fc>)
 8000b14:	f00c f9ba 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b18:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
 8000b1c:	f8cd 90b4 	str.w	r9, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	962e      	str	r6, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	952f      	str	r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	9530      	str	r5, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000b28:	4658      	mov	r0, fp
 8000b2a:	f00c f9af 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	932d      	str	r3, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	962e      	str	r6, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	962f      	str	r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	f8cd 80c0 	str.w	r8, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	a92d      	add	r1, sp, #180	@ 0xb4
 8000b3c:	4864      	ldr	r0, [pc, #400]	@ (8000cd0 <main+0x4f4>)
 8000b3e:	f00c f9a5 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000b42:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	962e      	str	r6, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	952f      	str	r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	f8cd 80c0 	str.w	r8, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	a92d      	add	r1, sp, #180	@ 0xb4
 8000b50:	4860      	ldr	r0, [pc, #384]	@ (8000cd4 <main+0x4f8>)
 8000b52:	f00c f99b 	bl	800ce8c <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000b56:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8000b5a:	4333      	orrs	r3, r6
 8000b5c:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000b60:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8000b64:	4033      	ands	r3, r6
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000b6a:	462a      	mov	r2, r5
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	207a      	movs	r0, #122	@ 0x7a
 8000b70:	f00a fed8 	bl	800b924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000b74:	207a      	movs	r0, #122	@ 0x7a
 8000b76:	f00a ff09 	bl	800b98c <HAL_NVIC_EnableIRQ>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b7a:	952d      	str	r5, [sp, #180]	@ 0xb4
 8000b7c:	952e      	str	r5, [sp, #184]	@ 0xb8
 8000b7e:	952f      	str	r5, [sp, #188]	@ 0xbc
 8000b80:	9530      	str	r5, [sp, #192]	@ 0xc0
 8000b82:	9531      	str	r5, [sp, #196]	@ 0xc4
 8000b84:	9532      	str	r5, [sp, #200]	@ 0xc8
 8000b86:	9533      	str	r5, [sp, #204]	@ 0xcc
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000b88:	4a54      	ldr	r2, [pc, #336]	@ (8000cdc <main+0x500>)
 8000b8a:	6813      	ldr	r3, [r2, #0]
 8000b8c:	f023 0301 	bic.w	r3, r3, #1
 8000b90:	6013      	str	r3, [r2, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b92:	4853      	ldr	r0, [pc, #332]	@ (8000ce0 <main+0x504>)
 8000b94:	4b53      	ldr	r3, [pc, #332]	@ (8000ce4 <main+0x508>)
 8000b96:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b98:	6046      	str	r6, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000b9a:	6086      	str	r6, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ba4:	2340      	movs	r3, #64	@ 0x40
 8000ba6:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ba8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bac:	6183      	str	r3, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bae:	61c5      	str	r5, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bb4:	6203      	str	r3, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000bb6:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000bba:	6285      	str	r5, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000bbc:	972d      	str	r7, [sp, #180]	@ 0xb4
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	932e      	str	r3, [sp, #184]	@ 0xb8
  SdramTiming.SelfRefreshTime = 4;
 8000bc2:	922f      	str	r2, [sp, #188]	@ 0xbc
  SdramTiming.RowCycleDelay = 7;
 8000bc4:	9330      	str	r3, [sp, #192]	@ 0xc0
  SdramTiming.WriteRecoveryTime = 3;
 8000bc6:	f8cd 80c4 	str.w	r8, [sp, #196]	@ 0xc4
  SdramTiming.RPDelay = 2;
 8000bca:	9732      	str	r7, [sp, #200]	@ 0xc8
  SdramTiming.RCDDelay = 2;
 8000bcc:	9733      	str	r7, [sp, #204]	@ 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bce:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bd0:	f010 fc48 	bl	8011464 <HAL_SDRAM_Init>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	f040 8230 	bne.w	800103a <main+0x85e>
  BSP_SDRAM_DeInit(0);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f00a fb64 	bl	800b2a8 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000be0:	2000      	movs	r0, #0
 8000be2:	f00a fbad 	bl	800b340 <BSP_SDRAM_Init>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	f040 8229 	bne.w	800103e <main+0x862>
  hqspi.Instance = QUADSPI;
 8000bec:	483e      	ldr	r0, [pc, #248]	@ (8000ce8 <main+0x50c>)
 8000bee:	4b3f      	ldr	r3, [pc, #252]	@ (8000cec <main+0x510>)
 8000bf0:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 3;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8000bfe:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c00:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c02:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c04:	2340      	movs	r3, #64	@ 0x40
 8000c06:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c08:	f00e fd32 	bl	800f670 <HAL_QSPI_Init>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	f040 8218 	bne.w	8001042 <main+0x866>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c12:	2303      	movs	r3, #3
 8000c14:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000c1e:	2340      	movs	r3, #64	@ 0x40
 8000c20:	f88d 30b6 	strb.w	r3, [sp, #182]	@ 0xb6
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c24:	a92d      	add	r1, sp, #180	@ 0xb4
 8000c26:	2000      	movs	r0, #0
 8000c28:	f00a f968 	bl	800aefc <BSP_QSPI_Init>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	f040 820a 	bne.w	8001046 <main+0x86a>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f00a f8fe 	bl	800ae34 <BSP_QSPI_EnableMemoryMappedMode>
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	f040 8206 	bne.w	800104a <main+0x86e>
  hdma2d.Instance = DMA2D;
 8000c3e:	482c      	ldr	r0, [pc, #176]	@ (8000cf0 <main+0x514>)
 8000c40:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf4 <main+0x518>)
 8000c42:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c44:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000c48:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c52:	f00a ffcb 	bl	800bbec <HAL_DMA2D_Init>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	f040 81f9 	bne.w	800104e <main+0x872>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000c5c:	4c1c      	ldr	r4, [pc, #112]	@ (8000cd0 <main+0x4f4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2108      	movs	r1, #8
 8000c62:	4620      	mov	r0, r4
 8000c64:	f00c face 	bl	800d204 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000c68:	2014      	movs	r0, #20
 8000c6a:	f00a fe2f 	bl	800b8cc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2108      	movs	r1, #8
 8000c72:	4620      	mov	r0, r4
 8000c74:	f00c fac6 	bl	800d204 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f00a fe27 	bl	800b8cc <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c7e:	2224      	movs	r2, #36	@ 0x24
 8000c80:	2100      	movs	r1, #0
 8000c82:	a817      	add	r0, sp, #92	@ 0x5c
 8000c84:	f028 ff40 	bl	8029b08 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c88:	2400      	movs	r4, #0
 8000c8a:	9411      	str	r4, [sp, #68]	@ 0x44
 8000c8c:	9412      	str	r4, [sp, #72]	@ 0x48
 8000c8e:	9413      	str	r4, [sp, #76]	@ 0x4c
 8000c90:	9414      	str	r4, [sp, #80]	@ 0x50
 8000c92:	9415      	str	r4, [sp, #84]	@ 0x54
 8000c94:	9416      	str	r4, [sp, #88]	@ 0x58
  DSI_LPCmdTypeDef LPCmd = {0};
 8000c96:	2234      	movs	r2, #52	@ 0x34
 8000c98:	4621      	mov	r1, r4
 8000c9a:	a82d      	add	r0, sp, #180	@ 0xb4
 8000c9c:	f028 ff34 	bl	8029b08 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000ca0:	222c      	movs	r2, #44	@ 0x2c
 8000ca2:	4621      	mov	r1, r4
 8000ca4:	a820      	add	r0, sp, #128	@ 0x80
 8000ca6:	f028 ff2f 	bl	8029b08 <memset>
  hdsi.Instance = DSI;
 8000caa:	4813      	ldr	r0, [pc, #76]	@ (8000cf8 <main+0x51c>)
 8000cac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000cb0:	6003      	str	r3, [r0, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000cb2:	6044      	str	r4, [r0, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	6083      	str	r3, [r0, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	60c3      	str	r3, [r0, #12]
  PLLInit.PLLNDIV = 119;
 8000cbc:	2277      	movs	r2, #119	@ 0x77
 8000cbe:	920e      	str	r2, [sp, #56]	@ 0x38
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	920f      	str	r2, [sp, #60]	@ 0x3c
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000cc4:	9310      	str	r3, [sp, #64]	@ 0x40
 8000cc6:	e01b      	b.n	8000d00 <main+0x524>
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58022400 	.word	0x58022400
 8000cd0:	58021800 	.word	0x58021800
 8000cd4:	58021400 	.word	0x58021400
 8000cd8:	58020000 	.word	0x58020000
 8000cdc:	52004000 	.word	0x52004000
 8000ce0:	240003a4 	.word	0x240003a4
 8000ce4:	52004140 	.word	0x52004140
 8000ce8:	240003d8 	.word	0x240003d8
 8000cec:	52005000 	.word	0x52005000
 8000cf0:	240006b8 	.word	0x240006b8
 8000cf4:	52001000 	.word	0x52001000
 8000cf8:	2400069c 	.word	0x2400069c
 8000cfc:	58022000 	.word	0x58022000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d00:	a90e      	add	r1, sp, #56	@ 0x38
 8000d02:	f00b f94f 	bl	800bfa4 <HAL_DSI_Init>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	f040 81a3 	bne.w	8001052 <main+0x876>
  HostTimeouts.TimeoutCkdiv = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9317      	str	r3, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	9318      	str	r3, [sp, #96]	@ 0x60
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000d14:	9319      	str	r3, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d16:	931a      	str	r3, [sp, #104]	@ 0x68
  HostTimeouts.LowPowerReadTimeout = 0;
 8000d18:	931b      	str	r3, [sp, #108]	@ 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000d1a:	931c      	str	r3, [sp, #112]	@ 0x70
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000d1c:	931d      	str	r3, [sp, #116]	@ 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000d1e:	931e      	str	r3, [sp, #120]	@ 0x78
  HostTimeouts.BTATimeout = 0;
 8000d20:	931f      	str	r3, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d22:	a917      	add	r1, sp, #92	@ 0x5c
 8000d24:	48af      	ldr	r0, [pc, #700]	@ (8000fe4 <main+0x808>)
 8000d26:	f00b fbfd 	bl	800c524 <HAL_DSI_ConfigHostTimeouts>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	f040 8193 	bne.w	8001056 <main+0x87a>
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000d30:	231c      	movs	r3, #28
 8000d32:	9311      	str	r3, [sp, #68]	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d34:	2321      	movs	r3, #33	@ 0x21
 8000d36:	9312      	str	r3, [sp, #72]	@ 0x48
  PhyTimings.DataLaneHS2LPTime = 15;
 8000d38:	230f      	movs	r3, #15
 8000d3a:	9313      	str	r3, [sp, #76]	@ 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d3c:	2319      	movs	r3, #25
 8000d3e:	9314      	str	r3, [sp, #80]	@ 0x50
  PhyTimings.DataLaneMaxReadTime = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	9315      	str	r3, [sp, #84]	@ 0x54
  PhyTimings.StopWaitTime = 0;
 8000d44:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d46:	a911      	add	r1, sp, #68	@ 0x44
 8000d48:	48a6      	ldr	r0, [pc, #664]	@ (8000fe4 <main+0x808>)
 8000d4a:	f00b fba7 	bl	800c49c <HAL_DSI_ConfigPhyTimer>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	f040 8183 	bne.w	800105a <main+0x87e>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d54:	2104      	movs	r1, #4
 8000d56:	48a3      	ldr	r0, [pc, #652]	@ (8000fe4 <main+0x808>)
 8000d58:	f00b fb8c 	bl	800c474 <HAL_DSI_ConfigFlowControl>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	f040 817e 	bne.w	800105e <main+0x882>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000d62:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d66:	489f      	ldr	r0, [pc, #636]	@ (8000fe4 <main+0x808>)
 8000d68:	f00b fdad 	bl	800c8c6 <HAL_DSI_SetLowPowerRXFilter>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	f040 8178 	bne.w	8001062 <main+0x886>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d72:	2100      	movs	r1, #0
 8000d74:	489b      	ldr	r0, [pc, #620]	@ (8000fe4 <main+0x808>)
 8000d76:	f00b f83c 	bl	800bdf2 <HAL_DSI_ConfigErrorMonitor>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	f040 8173 	bne.w	8001066 <main+0x88a>
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d84:	932d      	str	r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8a:	932e      	str	r3, [sp, #184]	@ 0xb8
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d90:	932f      	str	r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d96:	9330      	str	r3, [sp, #192]	@ 0xc0
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9c:	9331      	str	r3, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da2:	9332      	str	r3, [sp, #200]	@ 0xc8
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000da4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000da8:	9333      	str	r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000daa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dae:	9334      	str	r3, [sp, #208]	@ 0xd0
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000db0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000db4:	9335      	str	r3, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000db6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000dba:	9336      	str	r3, [sp, #216]	@ 0xd8
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000dbc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000dc0:	9337      	str	r3, [sp, #220]	@ 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000dc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dc6:	9338      	str	r3, [sp, #224]	@ 0xe0
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	9339      	str	r3, [sp, #228]	@ 0xe4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000dcc:	a92d      	add	r1, sp, #180	@ 0xb4
 8000dce:	4885      	ldr	r0, [pc, #532]	@ (8000fe4 <main+0x808>)
 8000dd0:	f00b fb16 	bl	800c400 <HAL_DSI_ConfigCommand>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	f040 8148 	bne.w	800106a <main+0x88e>
  CmdCfg.VirtualChannelID = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9320      	str	r3, [sp, #128]	@ 0x80
  CmdCfg.ColorCoding = DSI_RGB888;
 8000dde:	2205      	movs	r2, #5
 8000de0:	9221      	str	r2, [sp, #132]	@ 0x84
  CmdCfg.CommandSize = 400;
 8000de2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000de6:	9222      	str	r2, [sp, #136]	@ 0x88
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000de8:	2210      	movs	r2, #16
 8000dea:	9223      	str	r2, [sp, #140]	@ 0x8c
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000dec:	9324      	str	r3, [sp, #144]	@ 0x90
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000dee:	9325      	str	r3, [sp, #148]	@ 0x94
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000df0:	9326      	str	r3, [sp, #152]	@ 0x98
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000df2:	9327      	str	r3, [sp, #156]	@ 0x9c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	9228      	str	r2, [sp, #160]	@ 0xa0
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000df8:	9329      	str	r3, [sp, #164]	@ 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	932a      	str	r3, [sp, #168]	@ 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000dfe:	eb0d 0102 	add.w	r1, sp, r2
 8000e02:	4878      	ldr	r0, [pc, #480]	@ (8000fe4 <main+0x808>)
 8000e04:	f00b fa72 	bl	800c2ec <HAL_DSI_ConfigAdaptedCommandMode>
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	f040 8130 	bne.w	800106e <main+0x892>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4874      	ldr	r0, [pc, #464]	@ (8000fe4 <main+0x808>)
 8000e12:	f00b fa57 	bl	800c2c4 <HAL_DSI_SetGenericVCID>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	f040 812b 	bne.w	8001072 <main+0x896>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e1c:	2234      	movs	r2, #52	@ 0x34
 8000e1e:	2100      	movs	r1, #0
 8000e20:	a820      	add	r0, sp, #128	@ 0x80
 8000e22:	f028 fe71 	bl	8029b08 <memset>
  hltdc.Instance = LTDC;
 8000e26:	4870      	ldr	r0, [pc, #448]	@ (8000fe8 <main+0x80c>)
 8000e28:	4b70      	ldr	r3, [pc, #448]	@ (8000fec <main+0x810>)
 8000e2a:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e30:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000e32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e36:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e3c:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 0;
 8000e3e:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 0;
 8000e40:	6183      	str	r3, [r0, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000e42:	2202      	movs	r2, #2
 8000e44:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000e46:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 402;
 8000e48:	f44f 72c9 	mov.w	r2, #402	@ 0x192
 8000e4c:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8000e4e:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000e52:	6282      	str	r2, [r0, #40]	@ 0x28
  hltdc.Init.TotalWidth = 403;
 8000e54:	f240 1293 	movw	r2, #403	@ 0x193
 8000e58:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 483;
 8000e5a:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8000e5e:	6302      	str	r2, [r0, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e60:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e64:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e68:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e6c:	f00d fefc 	bl	800ec68 <HAL_LTDC_Init>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	f040 8100 	bne.w	8001076 <main+0x89a>
  pLayerCfg.WindowX0 = 0;
 8000e76:	2200      	movs	r2, #0
 8000e78:	9220      	str	r2, [sp, #128]	@ 0x80
  pLayerCfg.WindowX1 = 400;
 8000e7a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000e7e:	9121      	str	r1, [sp, #132]	@ 0x84
  pLayerCfg.WindowY0 = 0;
 8000e80:	9222      	str	r2, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000e82:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000e86:	9323      	str	r3, [sp, #140]	@ 0x8c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000e88:	2001      	movs	r0, #1
 8000e8a:	9024      	str	r0, [sp, #144]	@ 0x90
  pLayerCfg.Alpha = 255;
 8000e8c:	20ff      	movs	r0, #255	@ 0xff
 8000e8e:	9025      	str	r0, [sp, #148]	@ 0x94
  pLayerCfg.Alpha0 = 0;
 8000e90:	9226      	str	r2, [sp, #152]	@ 0x98
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e92:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000e96:	9027      	str	r0, [sp, #156]	@ 0x9c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e98:	2007      	movs	r0, #7
 8000e9a:	9028      	str	r0, [sp, #160]	@ 0xa0
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e9c:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
 8000ea0:	9029      	str	r0, [sp, #164]	@ 0xa4
  pLayerCfg.ImageWidth = 400;
 8000ea2:	912a      	str	r1, [sp, #168]	@ 0xa8
  pLayerCfg.ImageHeight = 480;
 8000ea4:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Backcolor.Blue = 0;
 8000ea6:	f88d 20b0 	strb.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Green = 0;
 8000eaa:	f88d 20b1 	strb.w	r2, [sp, #177]	@ 0xb1
  pLayerCfg.Backcolor.Red = 0;
 8000eae:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000eb2:	a920      	add	r1, sp, #128	@ 0x80
 8000eb4:	484c      	ldr	r0, [pc, #304]	@ (8000fe8 <main+0x80c>)
 8000eb6:	f00d ffa5 	bl	800ee04 <HAL_LTDC_ConfigLayer>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	f040 80dd 	bne.w	800107a <main+0x89e>
  __HAL_LTDC_DISABLE(&hltdc);
 8000ec0:	4d49      	ldr	r5, [pc, #292]	@ (8000fe8 <main+0x80c>)
 8000ec2:	682a      	ldr	r2, [r5, #0]
 8000ec4:	6993      	ldr	r3, [r2, #24]
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000ecc:	4e45      	ldr	r6, [pc, #276]	@ (8000fe4 <main+0x808>)
 8000ece:	4630      	mov	r0, r6
 8000ed0:	f00b fba2 	bl	800c618 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000ed4:	4946      	ldr	r1, [pc, #280]	@ (8000ff0 <main+0x814>)
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	800c      	strh	r4, [r1, #0]
  IOCtx.GetTick     = BSP_GetTick;
 8000eda:	4b46      	ldr	r3, [pc, #280]	@ (8000ff4 <main+0x818>)
 8000edc:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000ede:	4b46      	ldr	r3, [pc, #280]	@ (8000ff8 <main+0x81c>)
 8000ee0:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000ee2:	4b46      	ldr	r3, [pc, #280]	@ (8000ffc <main+0x820>)
 8000ee4:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000ee6:	4f46      	ldr	r7, [pc, #280]	@ (8001000 <main+0x824>)
 8000ee8:	4638      	mov	r0, r7
 8000eea:	f009 fd49 	bl	800a980 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	f009 f9dc 	bl	800a2b0 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000ef8:	9400      	str	r4, [sp, #0]
 8000efa:	2328      	movs	r3, #40	@ 0x28
 8000efc:	2215      	movs	r2, #21
 8000efe:	4621      	mov	r1, r4
 8000f00:	4630      	mov	r0, r6
 8000f02:	f00b fbc2 	bl	800c68a <HAL_DSI_ShortWrite>
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000f06:	942d      	str	r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000f08:	942e      	str	r4, [sp, #184]	@ 0xb8
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000f0a:	942f      	str	r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000f0c:	9430      	str	r4, [sp, #192]	@ 0xc0
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000f0e:	9431      	str	r4, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000f10:	9432      	str	r4, [sp, #200]	@ 0xc8
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000f12:	9433      	str	r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000f14:	9434      	str	r4, [sp, #208]	@ 0xd0
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000f16:	9435      	str	r4, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000f18:	9436      	str	r4, [sp, #216]	@ 0xd8
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000f1a:	9437      	str	r4, [sp, #220]	@ 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f1c:	a92d      	add	r1, sp, #180	@ 0xb4
 8000f1e:	4630      	mov	r0, r6
 8000f20:	f00b fa6e 	bl	800c400 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000f24:	4622      	mov	r2, r4
 8000f26:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	f00d ff9e 	bl	800ee6c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000f30:	682a      	ldr	r2, [r5, #0]
 8000f32:	6993      	ldr	r3, [r2, #24]
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000f3a:	4832      	ldr	r0, [pc, #200]	@ (8001004 <main+0x828>)
 8000f3c:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <main+0x82c>)
 8000f3e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f40:	7104      	strb	r4, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f42:	7144      	strb	r4, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f44:	6144      	str	r4, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f46:	6184      	str	r4, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f4c:	f00a fd9a 	bl	800ba84 <HAL_CRC_Init>
 8000f50:	2800      	cmp	r0, #0
 8000f52:	f040 8094 	bne.w	800107e <main+0x8a2>
  hjpeg.Instance = JPEG;
 8000f56:	482d      	ldr	r0, [pc, #180]	@ (800100c <main+0x830>)
 8000f58:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <main+0x834>)
 8000f5a:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000f5c:	f00c ff94 	bl	800de88 <HAL_JPEG_Init>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	f040 808e 	bne.w	8001082 <main+0x8a6>
  hfdcan1.Instance = FDCAN1;
 8000f66:	482b      	ldr	r0, [pc, #172]	@ (8001014 <main+0x838>)
 8000f68:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <main+0x83c>)
 8000f6a:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f70:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f72:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f74:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f76:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000f78:	220a      	movs	r2, #10
 8000f7a:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8000f80:	2107      	movs	r1, #7
 8000f82:	61c1      	str	r1, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f84:	2102      	movs	r1, #2
 8000f86:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f88:	6242      	str	r2, [r0, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f8a:	6282      	str	r2, [r0, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f8c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f8e:	6302      	str	r2, [r0, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f90:	6343      	str	r3, [r0, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f92:	6383      	str	r3, [r0, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f94:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000f96:	6403      	str	r3, [r0, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f98:	2104      	movs	r1, #4
 8000f9a:	6441      	str	r1, [r0, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f9c:	6483      	str	r3, [r0, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f9e:	64c1      	str	r1, [r0, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000fa0:	6503      	str	r3, [r0, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fa2:	6541      	str	r1, [r0, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000fa4:	6583      	str	r3, [r0, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000fa6:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000fa8:	6602      	str	r2, [r0, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000faa:	6643      	str	r3, [r0, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fac:	6681      	str	r1, [r0, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fae:	f00b fced 	bl	800c98c <HAL_FDCAN_Init>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d167      	bne.n	8001086 <main+0x8aa>
  MX_TouchGFX_Init();
 8000fb6:	f000 fcfd 	bl	80019b4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000fba:	f000 fcfa 	bl	80019b2 <MX_TouchGFX_PreOSInit>
  HAL_FDCAN_Start(&hfdcan1);
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <main+0x838>)
 8000fc0:	f00b ff0e 	bl	800cde0 <HAL_FDCAN_Start>
  osKernelInitialize();
 8000fc4:	f010 fd94 	bl	8011af0 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fc8:	4a14      	ldr	r2, [pc, #80]	@ (800101c <main+0x840>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4814      	ldr	r0, [pc, #80]	@ (8001020 <main+0x844>)
 8000fce:	f010 fdbd 	bl	8011b4c <osThreadNew>
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <main+0x848>)
 8000fd4:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fd6:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <main+0x84c>)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4814      	ldr	r0, [pc, #80]	@ (800102c <main+0x850>)
 8000fdc:	f010 fdb6 	bl	8011b4c <osThreadNew>
 8000fe0:	e026      	b.n	8001030 <main+0x854>
 8000fe2:	bf00      	nop
 8000fe4:	2400069c 	.word	0x2400069c
 8000fe8:	24000424 	.word	0x24000424
 8000fec:	50001000 	.word	0x50001000
 8000ff0:	2400036c 	.word	0x2400036c
 8000ff4:	0800adfd 	.word	0x0800adfd
 8000ff8:	0800201d 	.word	0x0800201d
 8000ffc:	08002065 	.word	0x08002065
 8001000:	2400037c 	.word	0x2400037c
 8001004:	24000720 	.word	0x24000720
 8001008:	58024c00 	.word	0x58024c00
 800100c:	240005a4 	.word	0x240005a4
 8001010:	52003000 	.word	0x52003000
 8001014:	240005fc 	.word	0x240005fc
 8001018:	4000a000 	.word	0x4000a000
 800101c:	0802a71c 	.word	0x0802a71c
 8001020:	080019c1 	.word	0x080019c1
 8001024:	240003a0 	.word	0x240003a0
 8001028:	0802a6f8 	.word	0x0802a6f8
 800102c:	08004251 	.word	0x08004251
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <main+0x8b0>)
 8001032:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001034:	f010 fd6e 	bl	8011b14 <osKernelStart>
  while (1)
 8001038:	e7fe      	b.n	8001038 <main+0x85c>
 800103a:	b672      	cpsid	i
  while (1)
 800103c:	e7fe      	b.n	800103c <main+0x860>
 800103e:	b672      	cpsid	i
 8001040:	e7fe      	b.n	8001040 <main+0x864>
 8001042:	b672      	cpsid	i
 8001044:	e7fe      	b.n	8001044 <main+0x868>
 8001046:	b672      	cpsid	i
 8001048:	e7fe      	b.n	8001048 <main+0x86c>
 800104a:	b672      	cpsid	i
 800104c:	e7fe      	b.n	800104c <main+0x870>
 800104e:	b672      	cpsid	i
 8001050:	e7fe      	b.n	8001050 <main+0x874>
 8001052:	b672      	cpsid	i
 8001054:	e7fe      	b.n	8001054 <main+0x878>
 8001056:	b672      	cpsid	i
 8001058:	e7fe      	b.n	8001058 <main+0x87c>
 800105a:	b672      	cpsid	i
 800105c:	e7fe      	b.n	800105c <main+0x880>
 800105e:	b672      	cpsid	i
 8001060:	e7fe      	b.n	8001060 <main+0x884>
 8001062:	b672      	cpsid	i
 8001064:	e7fe      	b.n	8001064 <main+0x888>
 8001066:	b672      	cpsid	i
 8001068:	e7fe      	b.n	8001068 <main+0x88c>
 800106a:	b672      	cpsid	i
 800106c:	e7fe      	b.n	800106c <main+0x890>
 800106e:	b672      	cpsid	i
 8001070:	e7fe      	b.n	8001070 <main+0x894>
 8001072:	b672      	cpsid	i
 8001074:	e7fe      	b.n	8001074 <main+0x898>
 8001076:	b672      	cpsid	i
 8001078:	e7fe      	b.n	8001078 <main+0x89c>
 800107a:	b672      	cpsid	i
 800107c:	e7fe      	b.n	800107c <main+0x8a0>
 800107e:	b672      	cpsid	i
 8001080:	e7fe      	b.n	8001080 <main+0x8a4>
 8001082:	b672      	cpsid	i
 8001084:	e7fe      	b.n	8001084 <main+0x8a8>
 8001086:	b672      	cpsid	i
 8001088:	e7fe      	b.n	8001088 <main+0x8ac>
 800108a:	bf00      	nop
 800108c:	2400039c 	.word	0x2400039c

08001090 <HAL_TIM_PeriodElapsedCallback>:
{
 8001090:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 8001092:	6802      	ldr	r2, [r0, #0]
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001096:	429a      	cmp	r2, r3
 8001098:	d000      	beq.n	800109c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800109a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800109c:	f00a fc04 	bl	800b8a8 <HAL_IncTick>
}
 80010a0:	e7fb      	b.n	800109a <HAL_TIM_PeriodElapsedCallback+0xa>
 80010a2:	bf00      	nop
 80010a4:	40001000 	.word	0x40001000

080010a8 <Error_Handler>:
 80010a8:	b672      	cpsid	i
  while (1)
 80010aa:	e7fe      	b.n	80010aa <Error_Handler+0x2>

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b500      	push	{lr}
 80010ae:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_MspInit+0x30>)
 80010b2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80010b6:	f042 0202 	orr.w	r2, r2, #2
 80010ba:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80010be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	210f      	movs	r1, #15
 80010ce:	f06f 0001 	mvn.w	r0, #1
 80010d2:	f00a fc27 	bl	800b924 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	b003      	add	sp, #12
 80010d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80010dc:	58024400 	.word	0x58024400

080010e0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_CRC_MspInit+0x2c>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d000      	beq.n	80010ea <HAL_CRC_MspInit+0xa>
 80010e8:	4770      	bx	lr
{
 80010ea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010ec:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80010f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010f4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80010f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001108:	b002      	add	sp, #8
 800110a:	4770      	bx	lr
 800110c:	58024c00 	.word	0x58024c00

08001110 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001110:	6802      	ldr	r2, [r0, #0]
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_DMA2D_MspInit+0x40>)
 8001114:	429a      	cmp	r2, r3
 8001116:	d000      	beq.n	800111a <HAL_DMA2D_MspInit+0xa>
 8001118:	4770      	bx	lr
{
 800111a:	b500      	push	{lr}
 800111c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_DMA2D_MspInit+0x44>)
 8001120:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001124:	f042 0210 	orr.w	r2, r2, #16
 8001128:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800112c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2107      	movs	r1, #7
 800113c:	205a      	movs	r0, #90	@ 0x5a
 800113e:	f00a fbf1 	bl	800b924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001142:	205a      	movs	r0, #90	@ 0x5a
 8001144:	f00a fc22 	bl	800b98c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001148:	b003      	add	sp, #12
 800114a:	f85d fb04 	ldr.w	pc, [sp], #4
 800114e:	bf00      	nop
 8001150:	52001000 	.word	0x52001000
 8001154:	58024400 	.word	0x58024400

08001158 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001158:	b510      	push	{r4, lr}
 800115a:	b0ba      	sub	sp, #232	@ 0xe8
 800115c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	2100      	movs	r1, #0
 8001160:	9135      	str	r1, [sp, #212]	@ 0xd4
 8001162:	9136      	str	r1, [sp, #216]	@ 0xd8
 8001164:	9137      	str	r1, [sp, #220]	@ 0xdc
 8001166:	9138      	str	r1, [sp, #224]	@ 0xe0
 8001168:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116a:	22c8      	movs	r2, #200	@ 0xc8
 800116c:	a802      	add	r0, sp, #8
 800116e:	f028 fccb 	bl	8029b08 <memset>
  if(hdsi->Instance==DSI)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001178:	d001      	beq.n	800117e <HAL_DSI_MspInit+0x26>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 800117a:	b03a      	add	sp, #232	@ 0xe8
 800117c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800117e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001182:	2300      	movs	r3, #0
 8001184:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001188:	a802      	add	r0, sp, #8
 800118a:	f00f fc03 	bl	8010994 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	bb70      	cbnz	r0, 80011ee <HAL_DSI_MspInit+0x96>
    __HAL_RCC_DSI_CLK_ENABLE();
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_DSI_MspInit+0x9c>)
 8001192:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001196:	f042 0210 	orr.w	r2, r2, #16
 800119a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800119e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011a2:	f002 0210 	and.w	r2, r2, #16
 80011a6:	9200      	str	r2, [sp, #0]
 80011a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80011ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011b2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c2:	2304      	movs	r3, #4
 80011c4:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2400      	movs	r4, #0
 80011cc:	9437      	str	r4, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80011d0:	230d      	movs	r3, #13
 80011d2:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011d4:	a935      	add	r1, sp, #212	@ 0xd4
 80011d6:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <HAL_DSI_MspInit+0xa0>)
 80011d8:	f00b fe58 	bl	800ce8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 80011dc:	4622      	mov	r2, r4
 80011de:	2107      	movs	r1, #7
 80011e0:	207b      	movs	r0, #123	@ 0x7b
 80011e2:	f00a fb9f 	bl	800b924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80011e6:	207b      	movs	r0, #123	@ 0x7b
 80011e8:	f00a fbd0 	bl	800b98c <HAL_NVIC_EnableIRQ>
}
 80011ec:	e7c5      	b.n	800117a <HAL_DSI_MspInit+0x22>
      Error_Handler();
 80011ee:	f7ff ff5b 	bl	80010a8 <Error_Handler>
 80011f2:	e7cd      	b.n	8001190 <HAL_DSI_MspInit+0x38>
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58022400 	.word	0x58022400

080011fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011fc:	b510      	push	{r4, lr}
 80011fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001200:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	2100      	movs	r1, #0
 8001204:	9135      	str	r1, [sp, #212]	@ 0xd4
 8001206:	9136      	str	r1, [sp, #216]	@ 0xd8
 8001208:	9137      	str	r1, [sp, #220]	@ 0xdc
 800120a:	9138      	str	r1, [sp, #224]	@ 0xe0
 800120c:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120e:	22c8      	movs	r2, #200	@ 0xc8
 8001210:	a802      	add	r0, sp, #8
 8001212:	f028 fc79 	bl	8029b08 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001216:	6822      	ldr	r2, [r4, #0]
 8001218:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HAL_FDCAN_MspInit+0x94>)
 800121a:	429a      	cmp	r2, r3
 800121c:	d001      	beq.n	8001222 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800121e:	b03a      	add	sp, #232	@ 0xe8
 8001220:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001222:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001226:	2300      	movs	r3, #0
 8001228:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800122c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001230:	931f      	str	r3, [sp, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	a802      	add	r0, sp, #8
 8001234:	f00f fbae 	bl	8010994 <HAL_RCCEx_PeriphCLKConfig>
 8001238:	bb38      	cbnz	r0, 800128a <HAL_FDCAN_MspInit+0x8e>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <HAL_FDCAN_MspInit+0x98>)
 800123c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8001240:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001244:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8001248:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800124c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001258:	f042 0202 	orr.w	r2, r2, #2
 800125c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800126c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001270:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	9338      	str	r3, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800127c:	2309      	movs	r3, #9
 800127e:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	a935      	add	r1, sp, #212	@ 0xd4
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <HAL_FDCAN_MspInit+0x9c>)
 8001284:	f00b fe02 	bl	800ce8c <HAL_GPIO_Init>
}
 8001288:	e7c9      	b.n	800121e <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 800128a:	f7ff ff0d 	bl	80010a8 <Error_Handler>
 800128e:	e7d4      	b.n	800123a <HAL_FDCAN_MspInit+0x3e>
 8001290:	4000a000 	.word	0x4000a000
 8001294:	58024400 	.word	0x58024400
 8001298:	58020400 	.word	0x58020400

0800129c <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
 800129c:	6802      	ldr	r2, [r0, #0]
 800129e:	4b3e      	ldr	r3, [pc, #248]	@ (8001398 <HAL_JPEG_MspInit+0xfc>)
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d000      	beq.n	80012a6 <HAL_JPEG_MspInit+0xa>
 80012a4:	4770      	bx	lr
{
 80012a6:	b510      	push	{r4, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80012ac:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <HAL_JPEG_MspInit+0x100>)
 80012ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80012b2:	f042 0220 	orr.w	r2, r2, #32
 80012b6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80012ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	9b01      	ldr	r3, [sp, #4]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80012c6:	4836      	ldr	r0, [pc, #216]	@ (80013a0 <HAL_JPEG_MspInit+0x104>)
 80012c8:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <HAL_JPEG_MspInit+0x108>)
 80012ca:	6003      	str	r3, [r0, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80012cc:	2311      	movs	r3, #17
 80012ce:	6043      	str	r3, [r0, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80012d0:	2300      	movs	r3, #0
 80012d2:	6083      	str	r3, [r0, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80012d4:	2280      	movs	r2, #128	@ 0x80
 80012d6:	60c2      	str	r2, [r0, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80012d8:	6103      	str	r3, [r0, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80012da:	2102      	movs	r1, #2
 80012dc:	6141      	str	r1, [r0, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80012de:	6183      	str	r3, [r0, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80012e0:	61c3      	str	r3, [r0, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80012e2:	6202      	str	r2, [r0, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80012e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012e8:	6242      	str	r2, [r0, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80012ea:	2220      	movs	r2, #32
 80012ec:	6282      	str	r2, [r0, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 80012ee:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80012f2:	62c2      	str	r2, [r0, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80012f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012f8:	6302      	str	r2, [r0, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80012fa:	6343      	str	r3, [r0, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80012fc:	6383      	str	r3, [r0, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80012fe:	f00d fe39 	bl	800ef74 <HAL_MDMA_Init>
 8001302:	2800      	cmp	r0, #0
 8001304:	d13b      	bne.n	800137e <HAL_JPEG_MspInit+0xe2>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001306:	2200      	movs	r2, #0
 8001308:	4611      	mov	r1, r2
 800130a:	4825      	ldr	r0, [pc, #148]	@ (80013a0 <HAL_JPEG_MspInit+0x104>)
 800130c:	f00d fee4 	bl	800f0d8 <HAL_MDMA_ConfigPostRequestMask>
 8001310:	2800      	cmp	r0, #0
 8001312:	d137      	bne.n	8001384 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <HAL_JPEG_MspInit+0x104>)
 8001316:	6323      	str	r3, [r4, #48]	@ 0x30
 8001318:	641c      	str	r4, [r3, #64]	@ 0x40

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800131a:	4823      	ldr	r0, [pc, #140]	@ (80013a8 <HAL_JPEG_MspInit+0x10c>)
 800131c:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_JPEG_MspInit+0x110>)
 800131e:	6003      	str	r3, [r0, #0]
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001320:	2313      	movs	r3, #19
 8001322:	6043      	str	r3, [r0, #4]
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001324:	2300      	movs	r3, #0
 8001326:	6083      	str	r3, [r0, #8]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001328:	22c0      	movs	r2, #192	@ 0xc0
 800132a:	60c2      	str	r2, [r0, #12]
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800132c:	6103      	str	r3, [r0, #16]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 800132e:	6143      	str	r3, [r0, #20]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001330:	2208      	movs	r2, #8
 8001332:	6182      	str	r2, [r0, #24]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001334:	2220      	movs	r2, #32
 8001336:	61c2      	str	r2, [r0, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001338:	6203      	str	r3, [r0, #32]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800133a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800133e:	6241      	str	r1, [r0, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001340:	6282      	str	r2, [r0, #40]	@ 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 8001342:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8001346:	62c2      	str	r2, [r0, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001348:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800134c:	6302      	str	r2, [r0, #48]	@ 0x30
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 800134e:	6343      	str	r3, [r0, #52]	@ 0x34
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001350:	6383      	str	r3, [r0, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001352:	f00d fe0f 	bl	800ef74 <HAL_MDMA_Init>
 8001356:	b9c0      	cbnz	r0, 800138a <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001358:	2200      	movs	r2, #0
 800135a:	4611      	mov	r1, r2
 800135c:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <HAL_JPEG_MspInit+0x10c>)
 800135e:	f00d febb 	bl	800f0d8 <HAL_MDMA_ConfigPostRequestMask>
 8001362:	b9a8      	cbnz	r0, 8001390 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001364:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_JPEG_MspInit+0x10c>)
 8001366:	6363      	str	r3, [r4, #52]	@ 0x34
 8001368:	641c      	str	r4, [r3, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2105      	movs	r1, #5
 800136e:	2079      	movs	r0, #121	@ 0x79
 8001370:	f00a fad8 	bl	800b924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001374:	2079      	movs	r0, #121	@ 0x79
 8001376:	f00a fb09 	bl	800b98c <HAL_NVIC_EnableIRQ>

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 800137a:	b002      	add	sp, #8
 800137c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800137e:	f7ff fe93 	bl	80010a8 <Error_Handler>
 8001382:	e7c0      	b.n	8001306 <HAL_JPEG_MspInit+0x6a>
      Error_Handler();
 8001384:	f7ff fe90 	bl	80010a8 <Error_Handler>
 8001388:	e7c4      	b.n	8001314 <HAL_JPEG_MspInit+0x78>
      Error_Handler();
 800138a:	f7ff fe8d 	bl	80010a8 <Error_Handler>
 800138e:	e7e3      	b.n	8001358 <HAL_JPEG_MspInit+0xbc>
      Error_Handler();
 8001390:	f7ff fe8a 	bl	80010a8 <Error_Handler>
 8001394:	e7e6      	b.n	8001364 <HAL_JPEG_MspInit+0xc8>
 8001396:	bf00      	nop
 8001398:	52003000 	.word	0x52003000
 800139c:	58024400 	.word	0x58024400
 80013a0:	24000538 	.word	0x24000538
 80013a4:	52000200 	.word	0x52000200
 80013a8:	240004cc 	.word	0x240004cc
 80013ac:	520001c0 	.word	0x520001c0

080013b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80013b0:	b510      	push	{r4, lr}
 80013b2:	b0b4      	sub	sp, #208	@ 0xd0
 80013b4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b6:	22c8      	movs	r2, #200	@ 0xc8
 80013b8:	2100      	movs	r1, #0
 80013ba:	a802      	add	r0, sp, #8
 80013bc:	f028 fba4 	bl	8029b08 <memset>
  if(hltdc->Instance==LTDC)
 80013c0:	6822      	ldr	r2, [r4, #0]
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_LTDC_MspInit+0x78>)
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_LTDC_MspInit+0x1c>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80013c8:	b034      	add	sp, #208	@ 0xd0
 80013ca:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013cc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80013d0:	2300      	movs	r3, #0
 80013d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 80013d6:	2305      	movs	r3, #5
 80013d8:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80013da:	23a1      	movs	r3, #161	@ 0xa1
 80013dc:	930d      	str	r3, [sp, #52]	@ 0x34
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	930e      	str	r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80013e2:	930f      	str	r3, [sp, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 80013e4:	2315      	movs	r3, #21
 80013e6:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80013e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013ec:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	a802      	add	r0, sp, #8
 80013f0:	f00f fad0 	bl	8010994 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	b9a8      	cbnz	r0, 8001422 <HAL_LTDC_MspInit+0x72>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <HAL_LTDC_MspInit+0x7c>)
 80013f8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013fc:	f042 0208 	orr.w	r2, r2, #8
 8001400:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001404:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2107      	movs	r1, #7
 8001414:	2058      	movs	r0, #88	@ 0x58
 8001416:	f00a fa85 	bl	800b924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800141a:	2058      	movs	r0, #88	@ 0x58
 800141c:	f00a fab6 	bl	800b98c <HAL_NVIC_EnableIRQ>
}
 8001420:	e7d2      	b.n	80013c8 <HAL_LTDC_MspInit+0x18>
      Error_Handler();
 8001422:	f7ff fe41 	bl	80010a8 <Error_Handler>
 8001426:	e7e6      	b.n	80013f6 <HAL_LTDC_MspInit+0x46>
 8001428:	50001000 	.word	0x50001000
 800142c:	58024400 	.word	0x58024400

08001430 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001434:	b0be      	sub	sp, #248	@ 0xf8
 8001436:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	2100      	movs	r1, #0
 800143a:	9139      	str	r1, [sp, #228]	@ 0xe4
 800143c:	913a      	str	r1, [sp, #232]	@ 0xe8
 800143e:	913b      	str	r1, [sp, #236]	@ 0xec
 8001440:	913c      	str	r1, [sp, #240]	@ 0xf0
 8001442:	913d      	str	r1, [sp, #244]	@ 0xf4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	22c8      	movs	r2, #200	@ 0xc8
 8001446:	a806      	add	r0, sp, #24
 8001448:	f028 fb5e 	bl	8029b08 <memset>
  if(hqspi->Instance==QUADSPI)
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	4b58      	ldr	r3, [pc, #352]	@ (80015b0 <HAL_QSPI_MspInit+0x180>)
 8001450:	429a      	cmp	r2, r3
 8001452:	d002      	beq.n	800145a <HAL_QSPI_MspInit+0x2a>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001454:	b03e      	add	sp, #248	@ 0xf8
 8001456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800145a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800145e:	2300      	movs	r3, #0
 8001460:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001464:	a806      	add	r0, sp, #24
 8001466:	f00f fa95 	bl	8010994 <HAL_RCCEx_PeriphCLKConfig>
 800146a:	2800      	cmp	r0, #0
 800146c:	f040 809d 	bne.w	80015aa <HAL_QSPI_MspInit+0x17a>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001470:	4b50      	ldr	r3, [pc, #320]	@ (80015b4 <HAL_QSPI_MspInit+0x184>)
 8001472:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001476:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800147a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800147e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001482:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800148a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800148e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001492:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001496:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800149a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800149e:	9201      	str	r2, [sp, #4]
 80014a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014a6:	f042 0220 	orr.w	r2, r2, #32
 80014aa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80014ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014b2:	f002 0220 	and.w	r2, r2, #32
 80014b6:	9202      	str	r2, [sp, #8]
 80014b8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014c2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80014c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014ca:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80014ce:	9203      	str	r2, [sp, #12]
 80014d0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014d6:	f042 0202 	orr.w	r2, r2, #2
 80014da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80014de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014e2:	f002 0202 	and.w	r2, r2, #2
 80014e6:	9204      	str	r2, [sp, #16]
 80014e8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014ee:	f042 0208 	orr.w	r2, r2, #8
 80014f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	9305      	str	r3, [sp, #20]
 8001500:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001502:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001506:	9339      	str	r3, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2502      	movs	r5, #2
 800150a:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2400      	movs	r4, #0
 800150e:	943b      	str	r4, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	943c      	str	r4, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001512:	2609      	movs	r6, #9
 8001514:	963d      	str	r6, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001516:	4f28      	ldr	r7, [pc, #160]	@ (80015b8 <HAL_QSPI_MspInit+0x188>)
 8001518:	a939      	add	r1, sp, #228	@ 0xe4
 800151a:	4638      	mov	r0, r7
 800151c:	f00b fcb6 	bl	800ce8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001520:	2340      	movs	r3, #64	@ 0x40
 8001522:	9339      	str	r3, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	943b      	str	r4, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	943c      	str	r4, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800152a:	f04f 080a 	mov.w	r8, #10
 800152e:	f8cd 80f4 	str.w	r8, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001532:	a939      	add	r1, sp, #228	@ 0xe4
 8001534:	4638      	mov	r0, r7
 8001536:	f00b fca9 	bl	800ce8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800153a:	23c0      	movs	r3, #192	@ 0xc0
 800153c:	9339      	str	r3, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	943b      	str	r4, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	943c      	str	r4, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001544:	963d      	str	r6, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001546:	f5a7 6780 	sub.w	r7, r7, #1024	@ 0x400
 800154a:	a939      	add	r1, sp, #228	@ 0xe4
 800154c:	4638      	mov	r0, r7
 800154e:	f00b fc9d 	bl	800ce8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001556:	9339      	str	r3, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	943b      	str	r4, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	943c      	str	r4, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800155e:	f8cd 80f4 	str.w	r8, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001562:	a939      	add	r1, sp, #228	@ 0xe4
 8001564:	4638      	mov	r0, r7
 8001566:	f00b fc91 	bl	800ce8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800156a:	230c      	movs	r3, #12
 800156c:	9339      	str	r3, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	943b      	str	r4, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	943c      	str	r4, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001574:	963d      	str	r6, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001576:	a939      	add	r1, sp, #228	@ 0xe4
 8001578:	4810      	ldr	r0, [pc, #64]	@ (80015bc <HAL_QSPI_MspInit+0x18c>)
 800157a:	f00b fc87 	bl	800ce8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800157e:	2304      	movs	r3, #4
 8001580:	9339      	str	r3, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	943b      	str	r4, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	943c      	str	r4, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001588:	963d      	str	r6, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	a939      	add	r1, sp, #228	@ 0xe4
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <HAL_QSPI_MspInit+0x190>)
 800158e:	f00b fc7d 	bl	800ce8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001596:	9339      	str	r3, [sp, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	953a      	str	r5, [sp, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	943b      	str	r4, [sp, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	943c      	str	r4, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800159e:	963d      	str	r6, [sp, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	a939      	add	r1, sp, #228	@ 0xe4
 80015a2:	4808      	ldr	r0, [pc, #32]	@ (80015c4 <HAL_QSPI_MspInit+0x194>)
 80015a4:	f00b fc72 	bl	800ce8c <HAL_GPIO_Init>
}
 80015a8:	e754      	b.n	8001454 <HAL_QSPI_MspInit+0x24>
      Error_Handler();
 80015aa:	f7ff fd7d 	bl	80010a8 <Error_Handler>
 80015ae:	e75f      	b.n	8001470 <HAL_QSPI_MspInit+0x40>
 80015b0:	52005000 	.word	0x52005000
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58021800 	.word	0x58021800
 80015bc:	58021c00 	.word	0x58021c00
 80015c0:	58020400 	.word	0x58020400
 80015c4:	58020c00 	.word	0x58020c00

080015c8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015cc:	2300      	movs	r3, #0
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	9302      	str	r3, [sp, #8]
 80015d2:	9303      	str	r3, [sp, #12]
 80015d4:	9304      	str	r3, [sp, #16]
 80015d6:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 80015d8:	4b3b      	ldr	r3, [pc, #236]	@ (80016c8 <HAL_SDRAM_MspInit+0x100>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b10b      	cbz	r3, 80015e2 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015de:	b039      	add	sp, #228	@ 0xe4
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 80015e2:	4b39      	ldr	r3, [pc, #228]	@ (80016c8 <HAL_SDRAM_MspInit+0x100>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	22c0      	movs	r2, #192	@ 0xc0
 80015ea:	2100      	movs	r1, #0
 80015ec:	a808      	add	r0, sp, #32
 80015ee:	f028 fa8b 	bl	8029b08 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80015f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015f6:	2300      	movs	r3, #0
 80015f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fc:	a806      	add	r0, sp, #24
 80015fe:	f00f f9c9 	bl	8010994 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	2800      	cmp	r0, #0
 8001604:	d15d      	bne.n	80016c2 <HAL_SDRAM_MspInit+0xfa>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <HAL_SDRAM_MspInit+0x104>)
 8001608:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800160c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001610:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001614:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001620:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001624:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2702      	movs	r7, #2
 8001628:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2600      	movs	r6, #0
 800162c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2503      	movs	r5, #3
 8001630:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001632:	240c      	movs	r4, #12
 8001634:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001636:	a901      	add	r1, sp, #4
 8001638:	4825      	ldr	r0, [pc, #148]	@ (80016d0 <HAL_SDRAM_MspInit+0x108>)
 800163a:	f00b fc27 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800163e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001642:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800164a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	a901      	add	r1, sp, #4
 800164e:	4821      	ldr	r0, [pc, #132]	@ (80016d4 <HAL_SDRAM_MspInit+0x10c>)
 8001650:	f00b fc1c 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001654:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001658:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001660:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001662:	a901      	add	r1, sp, #4
 8001664:	481c      	ldr	r0, [pc, #112]	@ (80016d8 <HAL_SDRAM_MspInit+0x110>)
 8001666:	f00b fc11 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800166a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800166e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001676:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001678:	a901      	add	r1, sp, #4
 800167a:	4818      	ldr	r0, [pc, #96]	@ (80016dc <HAL_SDRAM_MspInit+0x114>)
 800167c:	f00b fc06 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001680:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001684:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800168c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168e:	a901      	add	r1, sp, #4
 8001690:	4813      	ldr	r0, [pc, #76]	@ (80016e0 <HAL_SDRAM_MspInit+0x118>)
 8001692:	f00b fbfb 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001696:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800169a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a4:	a901      	add	r1, sp, #4
 80016a6:	480f      	ldr	r0, [pc, #60]	@ (80016e4 <HAL_SDRAM_MspInit+0x11c>)
 80016a8:	f00b fbf0 	bl	800ce8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ac:	2301      	movs	r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	a901      	add	r1, sp, #4
 80016ba:	480b      	ldr	r0, [pc, #44]	@ (80016e8 <HAL_SDRAM_MspInit+0x120>)
 80016bc:	f00b fbe6 	bl	800ce8c <HAL_GPIO_Init>
}
 80016c0:	e78d      	b.n	80015de <HAL_SDRAM_MspInit+0x16>
      Error_Handler();
 80016c2:	f7ff fcf1 	bl	80010a8 <Error_Handler>
 80016c6:	e79e      	b.n	8001606 <HAL_SDRAM_MspInit+0x3e>
 80016c8:	24000748 	.word	0x24000748
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58022000 	.word	0x58022000
 80016d4:	58021000 	.word	0x58021000
 80016d8:	58021c00 	.word	0x58021c00
 80016dc:	58021800 	.word	0x58021800
 80016e0:	58020c00 	.word	0x58020c00
 80016e4:	58021400 	.word	0x58021400
 80016e8:	58020800 	.word	0x58020800

080016ec <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_SDRAM_MspDeInit+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b103      	cbz	r3, 80016f4 <HAL_SDRAM_MspDeInit+0x8>
 80016f2:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80016f4:	b510      	push	{r4, lr}
  FMC_DeInitialized = 1;
 80016f6:	2401      	movs	r4, #1
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_SDRAM_MspDeInit+0x64>)
 80016fa:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80016fc:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <HAL_SDRAM_MspDeInit+0x68>)
 80016fe:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001706:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 800170a:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 800170e:	4812      	ldr	r0, [pc, #72]	@ (8001758 <HAL_SDRAM_MspDeInit+0x6c>)
 8001710:	f00b fcbe 	bl	800d090 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001714:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001718:	4810      	ldr	r0, [pc, #64]	@ (800175c <HAL_SDRAM_MspDeInit+0x70>)
 800171a:	f00b fcb9 	bl	800d090 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800171e:	f64f 71c0 	movw	r1, #65472	@ 0xffc0
 8001722:	480f      	ldr	r0, [pc, #60]	@ (8001760 <HAL_SDRAM_MspDeInit+0x74>)
 8001724:	f00b fcb4 	bl	800d090 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001728:	f248 1133 	movw	r1, #33075	@ 0x8133
 800172c:	480d      	ldr	r0, [pc, #52]	@ (8001764 <HAL_SDRAM_MspDeInit+0x78>)
 800172e:	f00b fcaf 	bl	800d090 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001732:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001736:	480c      	ldr	r0, [pc, #48]	@ (8001768 <HAL_SDRAM_MspDeInit+0x7c>)
 8001738:	f00b fcaa 	bl	800d090 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800173c:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001740:	480a      	ldr	r0, [pc, #40]	@ (800176c <HAL_SDRAM_MspDeInit+0x80>)
 8001742:	f00b fca5 	bl	800d090 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001746:	4621      	mov	r1, r4
 8001748:	4809      	ldr	r0, [pc, #36]	@ (8001770 <HAL_SDRAM_MspDeInit+0x84>)
 800174a:	f00b fca1 	bl	800d090 <HAL_GPIO_DeInit>
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800174e:	bd10      	pop	{r4, pc}
 8001750:	24000744 	.word	0x24000744
 8001754:	58024400 	.word	0x58024400
 8001758:	58022000 	.word	0x58022000
 800175c:	58021000 	.word	0x58021000
 8001760:	58021c00 	.word	0x58021c00
 8001764:	58021800 	.word	0x58021800
 8001768:	58020c00 	.word	0x58020c00
 800176c:	58021400 	.word	0x58021400
 8001770:	58020800 	.word	0x58020800

08001774 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001774:	280f      	cmp	r0, #15
 8001776:	d901      	bls.n	800177c <HAL_InitTick+0x8>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001778:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800177a:	4770      	bx	lr
{
 800177c:	b510      	push	{r4, lr}
 800177e:	b08a      	sub	sp, #40	@ 0x28
 8001780:	4604      	mov	r4, r0
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001782:	2200      	movs	r2, #0
 8001784:	4601      	mov	r1, r0
 8001786:	2036      	movs	r0, #54	@ 0x36
 8001788:	f00a f8cc 	bl	800b924 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800178c:	2036      	movs	r0, #54	@ 0x36
 800178e:	f00a f8fd 	bl	800b98c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_InitTick+0x88>)
 8001794:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_InitTick+0x8c>)
 8001798:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800179c:	f042 0210 	orr.w	r2, r2, #16
 80017a0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80017a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b0:	a901      	add	r1, sp, #4
 80017b2:	a802      	add	r0, sp, #8
 80017b4:	f00e ffc0 	bl	8010738 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017b8:	9b07      	ldr	r3, [sp, #28]
 80017ba:	b9bb      	cbnz	r3, 80017ec <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017bc:	f00e ff98 	bl	80106f0 <HAL_RCC_GetPCLK1Freq>
 80017c0:	4603      	mov	r3, r0
  htim6.Instance = TIM6;
 80017c2:	4810      	ldr	r0, [pc, #64]	@ (8001804 <HAL_InitTick+0x90>)
 80017c4:	4a10      	ldr	r2, [pc, #64]	@ (8001808 <HAL_InitTick+0x94>)
 80017c6:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017cc:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ce:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <HAL_InitTick+0x98>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0c9b      	lsrs	r3, r3, #18
 80017d6:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80017d8:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017e0:	f010 f892 	bl	8011908 <HAL_TIM_Base_Init>
 80017e4:	b130      	cbz	r0, 80017f4 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80017e6:	2001      	movs	r0, #1
}
 80017e8:	b00a      	add	sp, #40	@ 0x28
 80017ea:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017ec:	f00e ff80 	bl	80106f0 <HAL_RCC_GetPCLK1Freq>
 80017f0:	0043      	lsls	r3, r0, #1
 80017f2:	e7e6      	b.n	80017c2 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80017f4:	4803      	ldr	r0, [pc, #12]	@ (8001804 <HAL_InitTick+0x90>)
 80017f6:	f00f fef5 	bl	80115e4 <HAL_TIM_Base_Start_IT>
 80017fa:	e7f5      	b.n	80017e8 <HAL_InitTick+0x74>
 80017fc:	24000074 	.word	0x24000074
 8001800:	58024400 	.word	0x58024400
 8001804:	2400074c 	.word	0x2400074c
 8001808:	40001000 	.word	0x40001000
 800180c:	431bde83 	.word	0x431bde83

08001810 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <NMI_Handler>

08001812 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler>

08001814 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler>

08001816 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler>

08001818 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler>

0800181a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	4770      	bx	lr

0800181c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800181c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800181e:	4802      	ldr	r0, [pc, #8]	@ (8001828 <TIM6_DAC_IRQHandler+0xc>)
 8001820:	f00f ff3c 	bl	801169c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001824:	bd08      	pop	{r3, pc}
 8001826:	bf00      	nop
 8001828:	2400074c 	.word	0x2400074c

0800182c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800182c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800182e:	4802      	ldr	r0, [pc, #8]	@ (8001838 <LTDC_IRQHandler+0xc>)
 8001830:	f00d fa7b 	bl	800ed2a <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001834:	bd08      	pop	{r3, pc}
 8001836:	bf00      	nop
 8001838:	24000424 	.word	0x24000424

0800183c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800183c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800183e:	4802      	ldr	r0, [pc, #8]	@ (8001848 <DMA2D_IRQHandler+0xc>)
 8001840:	f00a fa18 	bl	800bc74 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001844:	bd08      	pop	{r3, pc}
 8001846:	bf00      	nop
 8001848:	240006b8 	.word	0x240006b8

0800184c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 800184c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800184e:	4802      	ldr	r0, [pc, #8]	@ (8001858 <JPEG_IRQHandler+0xc>)
 8001850:	f00d f904 	bl	800ea5c <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001854:	bd08      	pop	{r3, pc}
 8001856:	bf00      	nop
 8001858:	240005a4 	.word	0x240005a4

0800185c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800185c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800185e:	4803      	ldr	r0, [pc, #12]	@ (800186c <MDMA_IRQHandler+0x10>)
 8001860:	f00d fcda 	bl	800f218 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <MDMA_IRQHandler+0x14>)
 8001866:	f00d fcd7 	bl	800f218 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800186a:	bd08      	pop	{r3, pc}
 800186c:	240004cc 	.word	0x240004cc
 8001870:	24000538 	.word	0x24000538

08001874 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global Interrupt.
  */
void DSI_IRQHandler(void)
{
 8001874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001876:	4802      	ldr	r0, [pc, #8]	@ (8001880 <DSI_IRQHandler+0xc>)
 8001878:	f00a fca5 	bl	800c1c6 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800187c:	bd08      	pop	{r3, pc}
 800187e:	bf00      	nop
 8001880:	2400069c 	.word	0x2400069c

08001884 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001884:	2001      	movs	r0, #1
 8001886:	4770      	bx	lr

08001888 <_kill>:

int _kill(int pid, int sig)
{
 8001888:	b508      	push	{r3, lr}
	errno = EINVAL;
 800188a:	f028 f9f1 	bl	8029c70 <__errno>
 800188e:	2316      	movs	r3, #22
 8001890:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001892:	f04f 30ff 	mov.w	r0, #4294967295
 8001896:	bd08      	pop	{r3, pc}

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b508      	push	{r3, lr}
	errno = EINVAL;
 800189a:	f028 f9e9 	bl	8029c70 <__errno>
 800189e:	2316      	movs	r3, #22
 80018a0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80018a2:	e7fe      	b.n	80018a2 <_exit+0xa>

080018a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	1e16      	subs	r6, r2, #0
 80018a8:	dd07      	ble.n	80018ba <_read+0x16>
 80018aa:	460c      	mov	r4, r1
 80018ac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80018ae:	f3af 8000 	nop.w
 80018b2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	42a5      	cmp	r5, r4
 80018b8:	d1f9      	bne.n	80018ae <_read+0xa>
	}

return len;
}
 80018ba:	4630      	mov	r0, r6
 80018bc:	bd70      	pop	{r4, r5, r6, pc}

080018be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018be:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	1e16      	subs	r6, r2, #0
 80018c2:	dd07      	ble.n	80018d4 <_write+0x16>
 80018c4:	460c      	mov	r4, r1
 80018c6:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80018c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	42a5      	cmp	r5, r4
 80018d2:	d1f9      	bne.n	80018c8 <_write+0xa>
	}
	return len;
}
 80018d4:	4630      	mov	r0, r6
 80018d6:	bd70      	pop	{r4, r5, r6, pc}

080018d8 <_close>:

int _close(int file)
{
	return -1;
}
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	4770      	bx	lr

080018de <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80018e4:	2000      	movs	r0, #0
 80018e6:	4770      	bx	lr

080018e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018e8:	2001      	movs	r0, #1
 80018ea:	4770      	bx	lr

080018ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018ec:	2000      	movs	r0, #0
 80018ee:	4770      	bx	lr

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b508      	push	{r3, lr}
 80018f2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001928 <_sbrk+0x38>)
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	b152      	cbz	r2, 8001910 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <_sbrk+0x38>)
 80018fc:	6810      	ldr	r0, [r2, #0]
 80018fe:	4403      	add	r3, r0
 8001900:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <_sbrk+0x3c>)
 8001902:	490b      	ldr	r1, [pc, #44]	@ (8001930 <_sbrk+0x40>)
 8001904:	1a52      	subs	r2, r2, r1
 8001906:	4293      	cmp	r3, r2
 8001908:	d806      	bhi.n	8001918 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800190a:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <_sbrk+0x38>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800190e:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001910:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <_sbrk+0x38>)
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <_sbrk+0x44>)
 8001914:	6011      	str	r1, [r2, #0]
 8001916:	e7f0      	b.n	80018fa <_sbrk+0xa>
    errno = ENOMEM;
 8001918:	f028 f9aa 	bl	8029c70 <__errno>
 800191c:	230c      	movs	r3, #12
 800191e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	e7f3      	b.n	800190e <_sbrk+0x1e>
 8001926:	bf00      	nop
 8001928:	24000798 	.word	0x24000798
 800192c:	24080000 	.word	0x24080000
 8001930:	00001000 	.word	0x00001000
 8001934:	24062ed8 	.word	0x24062ed8

08001938 <_Z9read_fifov>:
	}
}

int32_t read_fifo()
{
	if(index_ecriture - index_lecture != 0)
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <_Z9read_fifov+0x20>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <_Z9read_fifov+0x24>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4283      	cmp	r3, r0
 8001942:	d006      	beq.n	8001952 <_Z9read_fifov+0x1a>
	{
		index_lecture = index_lecture + 1;
 8001944:	3001      	adds	r0, #1

		if(index_lecture > FIFO_SIZE -1)
 8001946:	2820      	cmp	r0, #32
 8001948:	bfa8      	it	ge
 800194a:	2000      	movge	r0, #0
		index_lecture = index_lecture + 1;
 800194c:	4b02      	ldr	r3, [pc, #8]	@ (8001958 <_Z9read_fifov+0x20>)
 800194e:	6018      	str	r0, [r3, #0]
		{
			index_lecture = 0;
		}

		return index_lecture;
 8001950:	4770      	bx	lr
	}
	else
	{
		return -1;
 8001952:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
 8001956:	4770      	bx	lr
 8001958:	240014a0 	.word	0x240014a0
 800195c:	2400149c 	.word	0x2400149c

08001960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001998 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001964:	f009 fefc 	bl	800b760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001968:	480c      	ldr	r0, [pc, #48]	@ (800199c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196a:	490d      	ldr	r1, [pc, #52]	@ (80019a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800196c:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001980:	4c0a      	ldr	r4, [pc, #40]	@ (80019ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198e:	f028 f975 	bl	8029c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001992:	f7fe ff23 	bl	80007dc <main>
  bx  lr
 8001996:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001998:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800199c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019a0:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 80019a4:	08032908 	.word	0x08032908
  ldr r2, =_sbss
 80019a8:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 80019ac:	24062ed8 	.word	0x24062ed8

080019b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC3_IRQHandler>

080019b2 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80019b2:	4770      	bx	lr

080019b4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80019b4:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 80019b6:	f002 f84d 	bl	8003a54 <touchgfx_components_init>
    touchgfx_init();
 80019ba:	f001 ffd1 	bl	8003960 <touchgfx_init>
}
 80019be:	bd08      	pop	{r3, pc}

080019c0 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 80019c0:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 80019c2:	f002 f849 	bl	8003a58 <touchgfx_taskEntry>
}
 80019c6:	bd08      	pop	{r3, pc}

080019c8 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80019c8:	6840      	ldr	r0, [r0, #4]
    }
 80019ca:	4770      	bx	lr

080019cc <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80019cc:	6041      	str	r1, [r0, #4]
    }
 80019ce:	4770      	bx	lr

080019d0 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80019d0:	1a52      	subs	r2, r2, r1
 80019d2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80019d6:	fbb2 f0f3 	udiv	r0, r2, r3
 80019da:	4770      	bx	lr

080019dc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0x10>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	68c0      	ldr	r0, [r0, #12]
}
 80019e4:	fb03 f000 	mul.w	r0, r3, r0
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	240014a4 	.word	0x240014a4

080019f0 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 80019f0:	b538      	push	{r3, r4, r5, lr}
 80019f2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80019f4:	b141      	cbz	r1, 8001a08 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
    {
        uint32_t current_cc = cc_in;
 80019f6:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80019f8:	6803      	ldr	r3, [r0, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	4798      	blx	r3
 80019fe:	6863      	ldr	r3, [r4, #4]
 8001a00:	1b5b      	subs	r3, r3, r5
 8001a02:	4403      	add	r3, r0
 8001a04:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001a08:	6803      	ldr	r3, [r0, #0]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	4798      	blx	r3
 8001a0e:	60a0      	str	r0, [r4, #8]
}
 8001a10:	e7f9      	b.n	8001a06 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001a12 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001a12:	4770      	bx	lr

08001a14 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001a14:	b530      	push	{r4, r5, lr}
 8001a16:	b083      	sub	sp, #12
 8001a18:	4604      	mov	r4, r0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001a90 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
 8001a1c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a28:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001a36:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a3a:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	6099      	str	r1, [r3, #8]
    tim.Init.Period = 0xFFFFFFFF;
 8001a42:	f04f 30ff 	mov.w	r0, #4294967295
 8001a46:	60d8      	str	r0, [r3, #12]
    tim.Init.Prescaler = 0;
 8001a48:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001a4e:	69d3      	ldr	r3, [r2, #28]
 8001a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	2210      	movs	r2, #16
 8001a56:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001a60:	4a0d      	ldr	r2, [pc, #52]	@ (8001a98 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	b983      	cbnz	r3, 8001a88 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x74>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001a66:	f00e fe21 	bl	80106ac <HAL_RCC_GetHCLKFreq>
 8001a6a:	4605      	mov	r5, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001a6c:	f00e fbcc 	bl	8010208 <HAL_RCC_GetSysClockFreq>
 8001a70:	fbb0 f0f5 	udiv	r0, r0, r5
 8001a74:	60e0      	str	r0, [r4, #12]
    HAL_TIM_Base_Init(&tim);
 8001a76:	4c07      	ldr	r4, [pc, #28]	@ (8001a94 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f00f ff45 	bl	8011908 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f00f fd5e 	bl	8011540 <HAL_TIM_Base_Start>
}
 8001a84:	b003      	add	sp, #12
 8001a86:	bd30      	pop	{r4, r5, pc}
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001a88:	f00e fe32 	bl	80106f0 <HAL_RCC_GetPCLK1Freq>
 8001a8c:	0045      	lsls	r5, r0, #1
 8001a8e:	e7ed      	b.n	8001a6c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x58>
 8001a90:	58024400 	.word	0x58024400
 8001a94:	240014a4 	.word	0x240014a4
 8001a98:	0802daf4 	.word	0x0802daf4

08001a9c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	f027 fa1d 	bl	8028ee0 <_ZdlPvj>
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	bd10      	pop	{r4, pc}

08001aaa <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001aaa:	4770      	bx	lr

08001aac <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 8001aac:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <_ZN20STM32TouchController4initEv+0x40>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001ab6:	6011      	str	r1, [r2, #0]
    hTS->Height = 480;
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001abe:	604b      	str	r3, [r1, #4]
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	608b      	str	r3, [r1, #8]
    hTS->Accuracy = 0;
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	60c8      	str	r0, [r1, #12]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001ac8:	f009 fd3a 	bl	800b540 <BSP_TS_Init>
 8001acc:	b918      	cbnz	r0, 8001ad6 <_ZN20STM32TouchController4initEv+0x2a>
    {
        bsp_ts_initialized = true;
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <_ZN20STM32TouchController4initEv+0x44>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 8001ad4:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <_ZN20STM32TouchController4initEv+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1fa      	bne.n	8001ad4 <_ZN20STM32TouchController4initEv+0x28>
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <_ZN20STM32TouchController4initEv+0x48>)
 8001ae0:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <_ZN20STM32TouchController4initEv+0x4c>)
 8001ae2:	212e      	movs	r1, #46	@ 0x2e
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <_ZN20STM32TouchController4initEv+0x50>)
 8001ae6:	f027 fd73 	bl	80295d0 <__assert_func>
 8001aea:	bf00      	nop
 8001aec:	240014fc 	.word	0x240014fc
 8001af0:	24001500 	.word	0x24001500
 8001af4:	0802a768 	.word	0x0802a768
 8001af8:	0802a77c 	.word	0x0802a77c
 8001afc:	0802a7a8 	.word	0x0802a7a8

08001b00 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
 8001b04:	781c      	ldrb	r4, [r3, #0]
 8001b06:	b90c      	cbnz	r4, 8001b0c <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
}
 8001b08:	4620      	mov	r0, r4
 8001b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b0c:	460e      	mov	r6, r1
 8001b0e:	4615      	mov	r5, r2
        BSP_TS_GetState(0, &TS_State);
 8001b10:	4f07      	ldr	r7, [pc, #28]	@ (8001b30 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001b12:	4639      	mov	r1, r7
 8001b14:	2000      	movs	r0, #0
 8001b16:	f009 fdb5 	bl	800b684 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b90b      	cbnz	r3, 8001b22 <_ZN20STM32TouchController11sampleTouchERlS0_+0x22>
    return false;
 8001b1e:	2400      	movs	r4, #0
 8001b20:	e7f2      	b.n	8001b08 <_ZN20STM32TouchController11sampleTouchERlS0_+0x8>
            x = TS_State.TouchX;
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6032      	str	r2, [r6, #0]
            y = TS_State.TouchY;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	602b      	str	r3, [r5, #0]
            return true;
 8001b2a:	e7ed      	b.n	8001b08 <_ZN20STM32TouchController11sampleTouchERlS0_+0x8>
 8001b2c:	24001500 	.word	0x24001500
 8001b30:	240014f0 	.word	0x240014f0

08001b34 <_ZN20STM32TouchControllerD0Ev>:
 8001b34:	b510      	push	{r4, lr}
 8001b36:	4604      	mov	r4, r0
 8001b38:	2104      	movs	r1, #4
 8001b3a:	f027 f9d1 	bl	8028ee0 <_ZdlPvj>
 8001b3e:	4620      	mov	r0, r4
 8001b40:	bd10      	pop	{r4, pc}
	...

08001b44 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001b44:	b508      	push	{r3, lr}
    switch (id)
 8001b46:	2803      	cmp	r0, #3
 8001b48:	d80c      	bhi.n	8001b64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x20>
 8001b4a:	e8df f000 	tbb	[pc, r0]
 8001b4e:	0c02      	.short	0x0c02
 8001b50:	2217      	.short	0x2217
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	fab2 f282 	clz	r2, r2
 8001b5a:	0952      	lsrs	r2, r2, #5
 8001b5c:	2108      	movs	r1, #8
 8001b5e:	4813      	ldr	r0, [pc, #76]	@ (8001bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 8001b60:	f00b fb50 	bl	800d204 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001b64:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	fab2 f282 	clz	r2, r2
 8001b6e:	0952      	lsrs	r2, r2, #5
 8001b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 8001b76:	f00b fb45 	bl	800d204 <HAL_GPIO_WritePin>
        break;
 8001b7a:	e7f3      	b.n	8001b64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x20>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	0952      	lsrs	r2, r2, #5
 8001b86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b8a:	4808      	ldr	r0, [pc, #32]	@ (8001bac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 8001b8c:	f00b fb3a 	bl	800d204 <HAL_GPIO_WritePin>
        break;
 8001b90:	e7e8      	b.n	8001b64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x20>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	fab2 f282 	clz	r2, r2
 8001b9a:	0952      	lsrs	r2, r2, #5
 8001b9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba0:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 8001ba2:	f00b fb2f 	bl	800d204 <HAL_GPIO_WritePin>
}
 8001ba6:	e7dd      	b.n	8001b64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x20>
 8001ba8:	24001504 	.word	0x24001504
 8001bac:	58022400 	.word	0x58022400
 8001bb0:	58021400 	.word	0x58021400

08001bb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001bb4:	b508      	push	{r3, lr}
    switch (id)
 8001bb6:	2803      	cmp	r0, #3
 8001bb8:	d80c      	bhi.n	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x20>
 8001bba:	e8df f000 	tbb	[pc, r0]
 8001bbe:	0c02      	.short	0x0c02
 8001bc0:	2217      	.short	0x2217
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	3a00      	subs	r2, #0
 8001bc8:	bf18      	it	ne
 8001bca:	2201      	movne	r2, #1
 8001bcc:	2108      	movs	r1, #8
 8001bce:	4813      	ldr	r0, [pc, #76]	@ (8001c1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8001bd0:	f00b fb18 	bl	800d204 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8001bd4:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	3a00      	subs	r2, #0
 8001bdc:	bf18      	it	ne
 8001bde:	2201      	movne	r2, #1
 8001be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001be4:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8001be6:	f00b fb0d 	bl	800d204 <HAL_GPIO_WritePin>
        break;
 8001bea:	e7f3      	b.n	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x20>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	3a00      	subs	r2, #0
 8001bf2:	bf18      	it	ne
 8001bf4:	2201      	movne	r2, #1
 8001bf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bfa:	4808      	ldr	r0, [pc, #32]	@ (8001c1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8001bfc:	f00b fb02 	bl	800d204 <HAL_GPIO_WritePin>
        break;
 8001c00:	e7e8      	b.n	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x20>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	3a00      	subs	r2, #0
 8001c08:	bf18      	it	ne
 8001c0a:	2201      	movne	r2, #1
 8001c0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8001c12:	f00b faf7 	bl	800d204 <HAL_GPIO_WritePin>
}
 8001c16:	e7dd      	b.n	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x20>
 8001c18:	24001504 	.word	0x24001504
 8001c1c:	58022400 	.word	0x58022400
 8001c20:	58021400 	.word	0x58021400

08001c24 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001c24:	b508      	push	{r3, lr}
    switch (id)
 8001c26:	2803      	cmp	r0, #3
 8001c28:	d807      	bhi.n	8001c3a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
 8001c2a:	e8df f000 	tbb	[pc, r0]
 8001c2e:	0702      	.short	0x0702
 8001c30:	130d      	.short	0x130d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c32:	2108      	movs	r1, #8
 8001c34:	480a      	ldr	r0, [pc, #40]	@ (8001c60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x3c>)
 8001c36:	f00b faeb 	bl	800d210 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8001c3a:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c40:	4807      	ldr	r0, [pc, #28]	@ (8001c60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x3c>)
 8001c42:	f00b fae5 	bl	800d210 <HAL_GPIO_TogglePin>
        break;
 8001c46:	e7f8      	b.n	8001c3a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c4c:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x3c>)
 8001c4e:	f00b fadf 	bl	800d210 <HAL_GPIO_TogglePin>
        break;
 8001c52:	e7f2      	b.n	8001c3a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 8001c5a:	f00b fad9 	bl	800d210 <HAL_GPIO_TogglePin>
}
 8001c5e:	e7ec      	b.n	8001c3a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
 8001c60:	58022400 	.word	0x58022400
 8001c64:	58021400 	.word	0x58021400

08001c68 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001c68:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001c6a:	2803      	cmp	r0, #3
 8001c6c:	d81e      	bhi.n	8001cac <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x44>
 8001c6e:	e8df f000 	tbb	[pc, r0]
 8001c72:	0b02      	.short	0x0b02
 8001c74:	1711      	.short	0x1711
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c76:	2108      	movs	r1, #8
 8001c78:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x48>)
 8001c7a:	f00b fabd 	bl	800d1f8 <HAL_GPIO_ReadPin>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001c7e:	2801      	cmp	r0, #1
 8001c80:	bf14      	ite	ne
 8001c82:	2000      	movne	r0, #0
 8001c84:	2001      	moveq	r0, #1
 8001c86:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c8c:	4808      	ldr	r0, [pc, #32]	@ (8001cb0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x48>)
 8001c8e:	f00b fab3 	bl	800d1f8 <HAL_GPIO_ReadPin>
        break;
 8001c92:	e7f4      	b.n	8001c7e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x48>)
 8001c9a:	f00b faad 	bl	800d1f8 <HAL_GPIO_ReadPin>
        break;
 8001c9e:	e7ee      	b.n	8001c7e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ca0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ca4:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x4c>)
 8001ca6:	f00b faa7 	bl	800d1f8 <HAL_GPIO_ReadPin>
        break;
 8001caa:	e7e8      	b.n	8001c7e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
    switch (id)
 8001cac:	2000      	movs	r0, #0
 8001cae:	e7e6      	b.n	8001c7e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001cb0:	58022400 	.word	0x58022400
 8001cb4:	58021400 	.word	0x58021400

08001cb8 <_ZN8touchgfx4GPIO4initEv>:
{
 8001cb8:	b570      	push	{r4, r5, r6, lr}
    for (int id = 0; id <= 4; id++)
 8001cba:	4d09      	ldr	r5, [pc, #36]	@ (8001ce0 <_ZN8touchgfx4GPIO4initEv+0x28>)
 8001cbc:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001cbe:	2601      	movs	r6, #1
 8001cc0:	e003      	b.n	8001cca <_ZN8touchgfx4GPIO4initEv+0x12>
    for (int id = 0; id <= 4; id++)
 8001cc2:	3401      	adds	r4, #1
 8001cc4:	3504      	adds	r5, #4
 8001cc6:	2c05      	cmp	r4, #5
 8001cc8:	d009      	beq.n	8001cde <_ZN8touchgfx4GPIO4initEv+0x26>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001cca:	b2e0      	uxtb	r0, r4
 8001ccc:	f7ff ffcc 	bl	8001c68 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d0f6      	beq.n	8001cc2 <_ZN8touchgfx4GPIO4initEv+0xa>
            if (GPIO_InvertedLevels[id] != 1)
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001cd8:	bf18      	it	ne
 8001cda:	602e      	strne	r6, [r5, #0]
 8001cdc:	e7f1      	b.n	8001cc2 <_ZN8touchgfx4GPIO4initEv+0xa>
}
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
 8001ce0:	24001504 	.word	0x24001504

08001ce4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8001ce4:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001cee:	4770      	bx	lr

08001cf0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001cf0:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8001cf2:	f890 307a 	ldrb.w	r3, [r0, #122]	@ 0x7a
 8001cf6:	b123      	cbz	r3, 8001d02 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 8001cf8:	6840      	ldr	r0, [r0, #4]
 8001cfa:	6803      	ldr	r3, [r0, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8001d00:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8001d02:	2000      	movs	r0, #0
 8001d04:	e7fc      	b.n	8001d00 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

08001d06 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001d06:	2000      	movs	r0, #0
 8001d08:	4770      	bx	lr
	...

08001d0c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001d0c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001d0e:	3900      	subs	r1, #0
 8001d10:	bf18      	it	ne
 8001d12:	2101      	movne	r1, #1
 8001d14:	4b01      	ldr	r3, [pc, #4]	@ (8001d1c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001d16:	7019      	strb	r1, [r3, #0]
    }
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	240621b7 	.word	0x240621b7

08001d20 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001d20:	2000      	movs	r0, #0
 8001d22:	4770      	bx	lr

08001d24 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001d24:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 8001d26:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001d28:	b10b      	cbz	r3, 8001d2e <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 8001d2a:	4608      	mov	r0, r1
 8001d2c:	4798      	blx	r3
        }
    }
 8001d2e:	bd08      	pop	{r3, pc}

08001d30 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001d30:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d34:	4770      	bx	lr

08001d36 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001d36:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 8001d38:	6840      	ldr	r0, [r0, #4]
 8001d3a:	6803      	ldr	r3, [r0, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4798      	blx	r3
    }
 8001d40:	bd08      	pop	{r3, pc}
	...

08001d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d44:	f890 2078 	ldrb.w	r2, [r0, #120]	@ 0x78
 8001d48:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d00c      	beq.n	8001d6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b9ab      	cbnz	r3, 8001d82 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8001d58:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8001d5c:	8818      	ldrh	r0, [r3, #0]
 8001d5e:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001d60:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b143      	cbz	r3, 8001d82 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d70:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8001d72:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8001d76:	8818      	ldrh	r0, [r3, #0]
 8001d78:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 8001d7a:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8001d7c:	4b01      	ldr	r3, [pc, #4]	@ (8001d84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d82:	4770      	bx	lr
 8001d84:	240621b0 	.word	0x240621b0
 8001d88:	240621ae 	.word	0x240621ae
 8001d8c:	240621ac 	.word	0x240621ac

08001d90 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001d90:	4b01      	ldr	r3, [pc, #4]	@ (8001d98 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	24001528 	.word	0x24001528

08001d9c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d9c:	4770      	bx	lr

08001d9e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001d9e:	b508      	push	{r3, lr}
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001da0:	f002 f934 	bl	800400c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    /* USER CODE END flushFrameBuffer step 1 */
}
 8001da4:	bd08      	pop	{r3, pc}

08001da6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001da6:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001da8:	f001 fefa 	bl	8003ba0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    /* USER CODE END configureInterrupts */
}
 8001dac:	bd08      	pop	{r3, pc}

08001dae <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001dae:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001db0:	f001 fefe 	bl	8003bb0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    /* USER CODE END enableInterrupts */
}
 8001db4:	bd08      	pop	{r3, pc}

08001db6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001db6:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001db8:	f001 ff02 	bl	8003bc0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    /* USER CODE END disableInterrupts */
}
 8001dbc:	bd08      	pop	{r3, pc}
	...

08001dc0 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001dc0:	b510      	push	{r4, lr}
 8001dc2:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001dc4:	f002 f8e0 	bl	8003f88 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001dc8:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001dcc:	b113      	cbz	r3, 8001dd4 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001dce:	4b02      	ldr	r3, [pc, #8]	@ (8001dd8 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
    }
}
 8001dd4:	bd10      	pop	{r4, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2400000c 	.word	0x2400000c

08001ddc <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
{
 8001ddc:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001dde:	f001 fefb 	bl	8003bd8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001de2:	bd08      	pop	{r3, pc}

08001de4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001de4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d808      	bhi.n	8001e00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d804      	bhi.n	8001e00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001df8:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001dfc:	801a      	strh	r2, [r3, #0]
    }
 8001dfe:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001e02:	4a07      	ldr	r2, [pc, #28]	@ (8001e20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001e04:	219e      	movs	r1, #158	@ 0x9e
 8001e06:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001e08:	f027 fbe2 	bl	80295d0 <__assert_func>
 8001e0c:	240621ac 	.word	0x240621ac
 8001e10:	240621ae 	.word	0x240621ae
 8001e14:	240621b2 	.word	0x240621b2
 8001e18:	240621b4 	.word	0x240621b4
 8001e1c:	0802a848 	.word	0x0802a848
 8001e20:	0802a8ac 	.word	0x0802a8ac
 8001e24:	0802a8f0 	.word	0x0802a8f0

08001e28 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001e30:	601c      	str	r4, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001e32:	b15c      	cbz	r4, 8001e4c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x24>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001e34:	63c4      	str	r4, [r0, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001e36:	6402      	str	r2, [r0, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001e38:	3a00      	subs	r2, #0
 8001e3a:	bf18      	it	ne
 8001e3c:	2201      	movne	r2, #1
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001e40:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001e42:	6803      	ldr	r3, [r0, #0]
 8001e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e48:	4798      	blx	r3
}
 8001e4a:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001e4e:	4a06      	ldr	r2, [pc, #24]	@ (8001e68 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001e50:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001e56:	f027 fbbb 	bl	80295d0 <__assert_func>
 8001e5a:	bf00      	nop
 8001e5c:	24001528 	.word	0x24001528
 8001e60:	240621b6 	.word	0x240621b6
 8001e64:	0802a944 	.word	0x0802a944
 8001e68:	0802a97c 	.word	0x0802a97c
 8001e6c:	0802a8f0 	.word	0x0802a8f0

08001e70 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001e70:	b510      	push	{r4, lr}
 8001e72:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001e74:	f013 f9e0 	bl	8015238 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4798      	blx	r3
    }
 8001e82:	bd10      	pop	{r4, pc}

08001e84 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001e88:	f012 fd52 	bl	8014930 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001e8c:	6860      	ldr	r0, [r4, #4]
 8001e8e:	6803      	ldr	r3, [r0, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4798      	blx	r3
    }
 8001e94:	bd10      	pop	{r4, pc}

08001e96 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001e96:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8001e98:	f012 fc20 	bl	80146dc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 8001e9c:	bd08      	pop	{r3, pc}

08001e9e <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001e9e:	b510      	push	{r4, lr}
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	217c      	movs	r1, #124	@ 0x7c
 8001ea4:	f027 f81c 	bl	8028ee0 <_ZdlPvj>
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	bd10      	pop	{r4, pc}

08001eac <_ZN11TouchGFXHAL10beginFrameEv>:
{
 8001eac:	b508      	push	{r3, lr}
    refreshRequested = false;
 8001eae:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <_ZN11TouchGFXHAL10beginFrameEv+0x10>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001eb4:	f012 fc4e 	bl	8014754 <_ZN8touchgfx3HAL10beginFrameEv>
}
 8001eb8:	bd08      	pop	{r3, pc}
 8001eba:	bf00      	nop
 8001ebc:	2400000c 	.word	0x2400000c

08001ec0 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
 8001ec4:	f002 f838 	bl	8003f38 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
    mcuInstr.init();
 8001ece:	4d04      	ldr	r5, [pc, #16]	@ (8001ee0 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	f7ff fd9f 	bl	8001a14 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        mcuInstrumentation = mcuInstr;
 8001ed6:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
 8001ee0:	24001518 	.word	0x24001518

08001ee4 <_ZN11TouchGFXHAL9taskEntryEv>:
{
 8001ee4:	b500      	push	{lr}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001eea:	6803      	ldr	r3, [r0, #0]
 8001eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ef0:	4798      	blx	r3
    enableInterrupts();
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001efa:	f001 f8db 	bl	80030b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f02:	4620      	mov	r0, r4
 8001f04:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001f06:	2100      	movs	r1, #0
 8001f08:	9100      	str	r1, [sp, #0]
 8001f0a:	2329      	movs	r3, #41	@ 0x29
 8001f0c:	2215      	movs	r2, #21
 8001f0e:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <_ZN11TouchGFXHAL9taskEntryEv+0x40>)
 8001f10:	f00a fbbb 	bl	800c68a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001f14:	f001 f8ce 	bl	80030b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4798      	blx	r3
    for (;;)
 8001f20:	e7f8      	b.n	8001f14 <_ZN11TouchGFXHAL9taskEntryEv+0x30>
 8001f22:	bf00      	nop
 8001f24:	2400069c 	.word	0x2400069c

08001f28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001f28:	b510      	push	{r4, lr}
 8001f2a:	f8bd e00c 	ldrh.w	lr, [sp, #12]
                           height)
 8001f2e:	f8bd c008 	ldrh.w	ip, [sp, #8]
 8001f32:	f10c 0c20 	add.w	ip, ip, #32
 8001f36:	fa1f fc8c 	uxth.w	ip, ip
        : dma(dmaInterface),
 8001f3a:	6041      	str	r1, [r0, #4]
          lcdRef(display),
 8001f3c:	6082      	str	r2, [r0, #8]
          touchController(touchCtrl),
 8001f3e:	60c3      	str	r3, [r0, #12]
          mcuInstrumentation(0),
 8001f40:	2300      	movs	r3, #0
 8001f42:	6103      	str	r3, [r0, #16]
          buttonController(0),
 8001f44:	6143      	str	r3, [r0, #20]
          frameBufferAllocator(0),
 8001f46:	6183      	str	r3, [r0, #24]

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
            : startX(0),
 8001f48:	8383      	strh	r3, [r0, #28]
              startY(0),
 8001f4a:	83c3      	strh	r3, [r0, #30]
              downX(0),
 8001f4c:	8403      	strh	r3, [r0, #32]
              downY(0),
 8001f4e:	8443      	strh	r3, [r0, #34]	@ 0x22
              tickCount(0),
 8001f50:	8483      	strh	r3, [r0, #36]	@ 0x24
              velocityX(0),
 8001f52:	84c3      	strh	r3, [r0, #38]	@ 0x26
              velocityY(0),
 8001f54:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001f56:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001f5a:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001f5c:	8603      	strh	r3, [r0, #48]	@ 0x30
          taskDelayFunc(0),
 8001f5e:	6383      	str	r3, [r0, #56]	@ 0x38
          frameBuffer0(0),
 8001f60:	63c3      	str	r3, [r0, #60]	@ 0x3c
          frameBuffer1(0),
 8001f62:	6403      	str	r3, [r0, #64]	@ 0x40
          frameBuffer2(0),
 8001f64:	6443      	str	r3, [r0, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001f66:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
          fingerSize(1),
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
          lockDMAToPorch(false),
 8001f70:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8001f74:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
          auxiliaryLCD(0),
 8001f78:	64c3      	str	r3, [r0, #76]	@ 0x4c
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001f7a:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
 8001f7e:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
 8001f82:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
 8001f86:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
          useAuxiliaryLCD(false),
 8001f8a:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          listener(0),
 8001f8e:	65c3      	str	r3, [r0, #92]	@ 0x5c
          lastX(0),
 8001f90:	6603      	str	r3, [r0, #96]	@ 0x60
          lastY(0),
 8001f92:	6643      	str	r3, [r0, #100]	@ 0x64
          touchSampleRate(1),
 8001f94:	f880 2068 	strb.w	r2, [r0, #104]	@ 0x68
          mcuLoadPct(0),
 8001f98:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
          vSyncCnt(0),
 8001f9c:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a
          vSyncForFrame(1),
 8001fa0:	f880 206b 	strb.w	r2, [r0, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8001fa4:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
          clientDirty(false),
 8001fa8:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
          swapRequested(false),
 8001fac:	f880 306e 	strb.w	r3, [r0, #110]	@ 0x6e
          lastTouched(false),
 8001fb0:	f880 306f 	strb.w	r3, [r0, #111]	@ 0x6f
          updateMCULoad(0),
 8001fb4:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001fb8:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001fba:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8001fbe:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
          useDMAAcceleration(true),
 8001fc2:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8001fc6:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
        instance = this;
 8001fca:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xd8>)
 8001fcc:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001fce:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xdc>)
 8001fd0:	f8a2 c000 	strh.w	ip, [r2]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xe0>)
 8001fd6:	f8a2 c000 	strh.w	ip, [r2]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001fda:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xe4>)
 8001fdc:	f8a2 e000 	strh.w	lr, [r2]
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8002010 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xe8>)
 8001fe2:	f8a2 e000 	strh.w	lr, [r2]
        DISPLAY_ROTATION = rotate0;
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xec>)
 8001fe8:	7013      	strb	r3, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001fea:	45f4      	cmp	ip, lr
 8001fec:	bf2c      	ite	cs
 8001fee:	f04f 0c00 	movcs.w	ip, #0
 8001ff2:	f04f 0c01 	movcc.w	ip, #1
 8001ff6:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xf0>)
 8001ffc:	6003      	str	r3, [r0, #0]
}
 8001ffe:	bd10      	pop	{r4, pc}
 8002000:	240621b8 	.word	0x240621b8
 8002004:	240621ac 	.word	0x240621ac
 8002008:	240621b2 	.word	0x240621b2
 800200c:	240621ae 	.word	0x240621ae
 8002010:	240621b4 	.word	0x240621b4
 8002014:	240621b0 	.word	0x240621b0
 8002018:	0802a9d4 	.word	0x0802a9d4

0800201c <DSI_IO_Write>:
      * @param  pData pointer to a buffer of data to be write
      * @param  Size To precise command to be used (short or long)
      * @retval BSP status
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 800201c:	b500      	push	{lr}
 800201e:	b083      	sub	sp, #12
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002020:	2b01      	cmp	r3, #1
 8002022:	d90e      	bls.n	8002042 <DSI_IO_Write+0x26>
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }
        else
        {
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002024:	9201      	str	r2, [sp, #4]
 8002026:	9100      	str	r1, [sp, #0]
 8002028:	2239      	movs	r2, #57	@ 0x39
 800202a:	4601      	mov	r1, r0
 800202c:	480c      	ldr	r0, [pc, #48]	@ (8002060 <DSI_IO_Write+0x44>)
 800202e:	f00a fb3f 	bl	800c6b0 <HAL_DSI_LongWrite>
        int32_t ret = BSP_ERROR_NONE;
 8002032:	2800      	cmp	r0, #0
 8002034:	bf14      	ite	ne
 8002036:	f06f 0007 	mvnne.w	r0, #7
 800203a:	2000      	moveq	r0, #0
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 800203c:	b003      	add	sp, #12
 800203e:	f85d fb04 	ldr.w	pc, [sp], #4
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	460b      	mov	r3, r1
 8002048:	2215      	movs	r2, #21
 800204a:	4601      	mov	r1, r0
 800204c:	4804      	ldr	r0, [pc, #16]	@ (8002060 <DSI_IO_Write+0x44>)
 800204e:	f00a fb1c 	bl	800c68a <HAL_DSI_ShortWrite>
        int32_t ret = BSP_ERROR_NONE;
 8002052:	2800      	cmp	r0, #0
 8002054:	bf14      	ite	ne
 8002056:	f06f 0007 	mvnne.w	r0, #7
 800205a:	2000      	moveq	r0, #0
 800205c:	e7ee      	b.n	800203c <DSI_IO_Write+0x20>
 800205e:	bf00      	nop
 8002060:	2400069c 	.word	0x2400069c

08002064 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8002064:	b500      	push	{lr}
 8002066:	b085      	sub	sp, #20
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8002068:	9202      	str	r2, [sp, #8]
 800206a:	9101      	str	r1, [sp, #4]
 800206c:	2106      	movs	r1, #6
 800206e:	9100      	str	r1, [sp, #0]
 8002070:	4601      	mov	r1, r0
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <DSI_IO_Read+0x24>)
 8002074:	f00a fb8c 	bl	800c790 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8002078:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 800207a:	bf14      	ite	ne
 800207c:	f06f 0007 	mvnne.w	r0, #7
 8002080:	2000      	moveq	r0, #0
 8002082:	b005      	add	sp, #20
 8002084:	f85d fb04 	ldr.w	pc, [sp], #4
 8002088:	2400069c 	.word	0x2400069c

0800208c <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 800208c:	b510      	push	{r4, lr}
 800208e:	b084      	sub	sp, #16
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8002090:	2301      	movs	r3, #1
 8002092:	f88d 300c 	strb.w	r3, [sp, #12]
        ScanLineParams[1] = scanline & 0x00FF;
 8002096:	23f4      	movs	r3, #244	@ 0xf4
 8002098:	f88d 300d 	strb.w	r3, [sp, #13]

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 800209c:	4c09      	ldr	r4, [pc, #36]	@ (80020c4 <LCD_ReqTear+0x38>)
 800209e:	ab03      	add	r3, sp, #12
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2344      	movs	r3, #68	@ 0x44
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2302      	movs	r3, #2
 80020a8:	2239      	movs	r2, #57	@ 0x39
 80020aa:	2100      	movs	r1, #0
 80020ac:	4620      	mov	r0, r4
 80020ae:	f00a faff 	bl	800c6b0 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80020b2:	2100      	movs	r1, #0
 80020b4:	9100      	str	r1, [sp, #0]
 80020b6:	2335      	movs	r3, #53	@ 0x35
 80020b8:	2215      	movs	r2, #21
 80020ba:	4620      	mov	r0, r4
 80020bc:	f00a fae5 	bl	800c68a <HAL_DSI_ShortWrite>
    }
 80020c0:	b004      	add	sp, #16
 80020c2:	bd10      	pop	{r4, pc}
 80020c4:	2400069c 	.word	0x2400069c

080020c8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80020c8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 80020ca:	f7ff ffdf 	bl	800208c <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80020d8:	2201      	movs	r2, #1
 80020da:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80020de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80020ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80020ee:	f042 0202 	orr.w	r2, r2, #2
 80020f2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 80020f6:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 80020f8:	2203      	movs	r2, #3
 80020fa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	bf00      	nop
 8002100:	2400069c 	.word	0x2400069c
 8002104:	50001000 	.word	0x50001000

08002108 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <LCD_ReqEnable+0x28>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b103      	cbz	r3, 8002110 <LCD_ReqEnable+0x8>
 800210e:	4770      	bx	lr
    {
 8002110:	b500      	push	{lr}
 8002112:	b083      	sub	sp, #12
        {
            firstRefreshRequested = true;
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <LCD_ReqEnable+0x28>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 800211a:	2100      	movs	r1, #0
 800211c:	9100      	str	r1, [sp, #0]
 800211e:	2329      	movs	r3, #41	@ 0x29
 8002120:	2215      	movs	r2, #21
 8002122:	4804      	ldr	r0, [pc, #16]	@ (8002134 <LCD_ReqEnable+0x2c>)
 8002124:	f00a fab1 	bl	800c68a <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002128:	b003      	add	sp, #12
 800212a:	f85d fb04 	ldr.w	pc, [sp], #4
 800212e:	bf00      	nop
 8002130:	24001514 	.word	0x24001514
 8002134:	2400069c 	.word	0x2400069c

08002138 <LCD_SetUpdateRegionLeft>:
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
 8002138:	b500      	push	{lr}
 800213a:	b083      	sub	sp, #12
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <LCD_SetUpdateRegionLeft+0x20>)
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	232a      	movs	r3, #42	@ 0x2a
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2304      	movs	r3, #4
 8002146:	2239      	movs	r2, #57	@ 0x39
 8002148:	2100      	movs	r1, #0
 800214a:	4804      	ldr	r0, [pc, #16]	@ (800215c <LCD_SetUpdateRegionLeft+0x24>)
 800214c:	f00a fab0 	bl	800c6b0 <HAL_DSI_LongWrite>
    }
 8002150:	b003      	add	sp, #12
 8002152:	f85d fb04 	ldr.w	pc, [sp], #4
 8002156:	bf00      	nop
 8002158:	24000008 	.word	0x24000008
 800215c:	2400069c 	.word	0x2400069c

08002160 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
 8002160:	b500      	push	{lr}
 8002162:	b083      	sub	sp, #12
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <LCD_SetUpdateRegionRight+0x20>)
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	232a      	movs	r3, #42	@ 0x2a
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2304      	movs	r3, #4
 800216e:	2239      	movs	r2, #57	@ 0x39
 8002170:	2100      	movs	r1, #0
 8002172:	4804      	ldr	r0, [pc, #16]	@ (8002184 <LCD_SetUpdateRegionRight+0x24>)
 8002174:	f00a fa9c 	bl	800c6b0 <HAL_DSI_LongWrite>
    }
 8002178:	b003      	add	sp, #12
 800217a:	f85d fb04 	ldr.w	pc, [sp], #4
 800217e:	bf00      	nop
 8002180:	24000004 	.word	0x24000004
 8002184:	2400069c 	.word	0x2400069c

08002188 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800218c:	2000      	movs	r0, #0
 800218e:	f7ff fcd9 	bl	8001b44 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        return instance;
 8002192:	4d11      	ldr	r5, [pc, #68]	@ (80021d8 <HAL_DSI_TearingEffectCallback+0x50>)
 8002194:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8002196:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800219a:	3301      	adds	r3, #1
 800219c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80021a0:	f000 ff7a 	bl	8003098 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80021a4:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <HAL_DSI_TearingEffectCallback+0x54>)
 80021a6:	7819      	ldrb	r1, [r3, #0]
        lockDMAToPorch = enableLock;
 80021a8:	682a      	ldr	r2, [r5, #0]
 80021aa:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a

        if (refreshRequested && !displayRefreshing)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b113      	cbz	r3, 80021b8 <HAL_DSI_TearingEffectCallback+0x30>
 80021b2:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_DSI_TearingEffectCallback+0x58>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b11b      	cbz	r3, 80021c0 <HAL_DSI_TearingEffectCallback+0x38>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff fcfb 	bl	8001bb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        }
    }
 80021be:	bd38      	pop	{r3, r4, r5, pc}
            updateRegion = 0;
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <HAL_DSI_TearingEffectCallback+0x5c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80021c6:	f7ff ffb7 	bl	8002138 <LCD_SetUpdateRegionLeft>
            HAL_DSI_Refresh(hdsi);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f00a fa4b 	bl	800c666 <HAL_DSI_Refresh>
            displayRefreshing = true;
 80021d0:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <HAL_DSI_TearingEffectCallback+0x58>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e7f2      	b.n	80021be <HAL_DSI_TearingEffectCallback+0x36>
 80021d8:	240621b8 	.word	0x240621b8
 80021dc:	2400000c 	.word	0x2400000c
 80021e0:	24001530 	.word	0x24001530
 80021e4:	2400152c 	.word	0x2400152c

080021e8 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        if (displayRefreshing)
 80021e8:	4b49      	ldr	r3, [pc, #292]	@ (8002310 <HAL_DSI_EndOfRefreshCallback+0x128>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 808e 	beq.w	800230e <HAL_DSI_EndOfRefreshCallback+0x126>
    {
 80021f2:	b530      	push	{r4, r5, lr}
 80021f4:	b085      	sub	sp, #20
 80021f6:	4604      	mov	r4, r0
        {
            if (updateRegion == 0)
 80021f8:	4b46      	ldr	r3, [pc, #280]	@ (8002314 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d142      	bne.n	8002286 <HAL_DSI_EndOfRefreshCallback+0x9e>
            {
                HAL_Delay(1);
 8002200:	2001      	movs	r0, #1
 8002202:	f009 fb63 	bl	800b8cc <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002206:	2000      	movs	r0, #0
 8002208:	9000      	str	r0, [sp, #0]
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 8002210:	f023 0308 	bic.w	r3, r3, #8
 8002214:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	9b00      	ldr	r3, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002226:	4b3c      	ldr	r3, [pc, #240]	@ (8002318 <HAL_DSI_EndOfRefreshCallback+0x130>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	493c      	ldr	r1, [pc, #240]	@ (800231c <HAL_DSI_EndOfRefreshCallback+0x134>)
 800222c:	6809      	ldr	r1, [r1, #0]
 800222e:	f501 6196 	add.w	r1, r1, #1200	@ 0x4b0
 8002232:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002236:	493a      	ldr	r1, [pc, #232]	@ (8002320 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002238:	4d3a      	ldr	r5, [pc, #232]	@ (8002324 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 800223a:	610d      	str	r5, [r1, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 800223c:	4d3a      	ldr	r5, [pc, #232]	@ (8002328 <HAL_DSI_EndOfRefreshCallback+0x140>)
 800223e:	614d      	str	r5, [r1, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8002240:	493a      	ldr	r1, [pc, #232]	@ (800232c <HAL_DSI_EndOfRefreshCallback+0x144>)
 8002242:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002246:	493a      	ldr	r1, [pc, #232]	@ (8002330 <HAL_DSI_EndOfRefreshCallback+0x148>)
 8002248:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 800224c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002254:	9001      	str	r0, [sp, #4]
 8002256:	6822      	ldr	r2, [r4, #0]
 8002258:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8002272:	f7ff ff75 	bl	8002160 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8002276:	4b27      	ldr	r3, [pc, #156]	@ (8002314 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

                HAL_DSI_Refresh(hdsi);
 800227c:	4620      	mov	r0, r4
 800227e:	f00a f9f2 	bl	800c666 <HAL_DSI_Refresh>
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8002282:	b005      	add	sp, #20
 8002284:	bd30      	pop	{r4, r5, pc}
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002286:	2500      	movs	r5, #0
 8002288:	9502      	str	r5, [sp, #8]
 800228a:	6802      	ldr	r2, [r0, #0]
 800228c:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 8002290:	f023 0308 	bic.w	r3, r3, #8
 8002294:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
 8002298:	6803      	ldr	r3, [r0, #0]
 800229a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	9b02      	ldr	r3, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <HAL_DSI_EndOfRefreshCallback+0x130>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	491c      	ldr	r1, [pc, #112]	@ (800231c <HAL_DSI_EndOfRefreshCallback+0x134>)
 80022ac:	6809      	ldr	r1, [r1, #0]
 80022ae:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80022b2:	491b      	ldr	r1, [pc, #108]	@ (8002320 <HAL_DSI_EndOfRefreshCallback+0x138>)
 80022b4:	481f      	ldr	r0, [pc, #124]	@ (8002334 <HAL_DSI_EndOfRefreshCallback+0x14c>)
 80022b6:	6108      	str	r0, [r1, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80022b8:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 80022bc:	6148      	str	r0, [r1, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80022be:	491b      	ldr	r1, [pc, #108]	@ (800232c <HAL_DSI_EndOfRefreshCallback+0x144>)
 80022c0:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80022c4:	491a      	ldr	r1, [pc, #104]	@ (8002330 <HAL_DSI_EndOfRefreshCallback+0x148>)
 80022c6:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80022ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	625a      	str	r2, [r3, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80022d2:	9503      	str	r5, [sp, #12]
 80022d4:	6822      	ldr	r2, [r4, #0]
 80022d6:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	9303      	str	r3, [sp, #12]
 80022ee:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 80022f0:	4628      	mov	r0, r5
 80022f2:	f7ff fc5f 	bl	8001bb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 80022f6:	f7ff ff07 	bl	8002108 <LCD_ReqEnable>
                displayRefreshing = false;
 80022fa:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_DSI_EndOfRefreshCallback+0x128>)
 80022fc:	701d      	strb	r5, [r3, #0]
        return instance;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <HAL_DSI_EndOfRefreshCallback+0x150>)
 8002300:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8002302:	2800      	cmp	r0, #0
 8002304:	d0bd      	beq.n	8002282 <HAL_DSI_EndOfRefreshCallback+0x9a>
        allowDMATransfers();
 8002306:	6803      	ldr	r3, [r0, #0]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4798      	blx	r3
    }
 800230c:	e7b9      	b.n	8002282 <HAL_DSI_EndOfRefreshCallback+0x9a>
 800230e:	4770      	bx	lr
 8002310:	24001530 	.word	0x24001530
 8002314:	2400152c 	.word	0x2400152c
 8002318:	24000424 	.word	0x24000424
 800231c:	24001528 	.word	0x24001528
 8002320:	50001000 	.word	0x50001000
 8002324:	01b201e2 	.word	0x01b201e2
 8002328:	019201e3 	.word	0x019201e3
 800232c:	01920003 	.word	0x01920003
 8002330:	09c004b3 	.word	0x09c004b3
 8002334:	019201e2 	.word	0x019201e2
 8002338:	240621b8 	.word	0x240621b8

0800233c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800233c:	b508      	push	{r3, lr}
        if ((int)p) //idle task sched out
 800233e:	b130      	cbz	r0, 800234e <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8002340:	2101      	movs	r1, #1
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <IdleTaskHook+0x20>)
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	f012 ff91 	bl	801526c <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
 800234a:	2001      	movs	r0, #1
 800234c:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800234e:	2100      	movs	r1, #0
 8002350:	4b02      	ldr	r3, [pc, #8]	@ (800235c <IdleTaskHook+0x20>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	f012 ff8a 	bl	801526c <_ZN8touchgfx3HAL12setMCUActiveEb>
 8002358:	e7f7      	b.n	800234a <IdleTaskHook+0xe>
 800235a:	bf00      	nop
 800235c:	240621b8 	.word	0x240621b8

08002360 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8002362:	2200      	movs	r2, #0
 8002364:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	4a02      	ldr	r2, [pc, #8]	@ (8002374 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 800236a:	601a      	str	r2, [r3, #0]

}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	24001518 	.word	0x24001518
 8002374:	0802a748 	.word	0x0802a748

08002378 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002378:	6940      	ldr	r0, [r0, #20]
 800237a:	4770      	bx	lr

0800237c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 800237c:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002380:	4770      	bx	lr

08002382 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8002382:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002384:	b10b      	cbz	r3, 800238a <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
 8002386:	2001      	movs	r0, #1
}
 8002388:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
 800238a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800238c:	3800      	subs	r0, #0
 800238e:	bf18      	it	ne
 8002390:	2001      	movne	r0, #1
 8002392:	4770      	bx	lr

08002394 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002394:	6880      	ldr	r0, [r0, #8]
 8002396:	4770      	bx	lr

08002398 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002398:	4770      	bx	lr

0800239a <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 800239a:	468c      	mov	ip, r1
    *data = videoInfo;
 800239c:	3004      	adds	r0, #4
 800239e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80023a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 80023a4:	4770      	bx	lr

080023a6 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80023a6:	4770      	bx	lr

080023a8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80023a8:	b508      	push	{r3, lr}
    assert(0);
 80023aa:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80023ac:	4a03      	ldr	r2, [pc, #12]	@ (80023bc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80023ae:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80023b2:	4803      	ldr	r0, [pc, #12]	@ (80023c0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80023b4:	f027 f90c 	bl	80295d0 <__assert_func>
 80023b8:	0802aaa4 	.word	0x0802aaa4
 80023bc:	0802aaa8 	.word	0x0802aaa8
 80023c0:	0802ab04 	.word	0x0802ab04

080023c4 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80023c4:	b510      	push	{r4, lr}
 80023c6:	4604      	mov	r4, r0
 80023c8:	2148      	movs	r1, #72	@ 0x48
 80023ca:	f026 fd89 	bl	8028ee0 <_ZdlPvj>
 80023ce:	4620      	mov	r0, r4
 80023d0:	bd10      	pop	{r4, pc}
	...

080023d4 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
 80023da:	6003      	str	r3, [r0, #0]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80023dc:	2100      	movs	r1, #0
 80023de:	6141      	str	r1, [r0, #20]
 80023e0:	6181      	str	r1, [r0, #24]
 80023e2:	61c1      	str	r1, [r0, #28]
 80023e4:	6201      	str	r1, [r0, #32]
 80023e6:	6241      	str	r1, [r0, #36]	@ 0x24
 80023e8:	6281      	str	r1, [r0, #40]	@ 0x28
 80023ea:	62c1      	str	r1, [r0, #44]	@ 0x2c
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023ec:	6301      	str	r1, [r0, #48]	@ 0x30
 80023ee:	6341      	str	r1, [r0, #52]	@ 0x34
 80023f0:	6381      	str	r1, [r0, #56]	@ 0x38
 80023f2:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80023f4:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    videoInfo.frame_height = 0;
 80023f8:	6101      	str	r1, [r0, #16]
    videoInfo.frame_width = 0;
 80023fa:	60c1      	str	r1, [r0, #12]
    videoInfo.ms_between_frames = 0;
 80023fc:	6041      	str	r1, [r0, #4]
    videoInfo.number_of_frames = 0;
 80023fe:	6081      	str	r1, [r0, #8]
    semDecodingDone = SEM_CREATE();
 8002400:	460a      	mov	r2, r1
 8002402:	2001      	movs	r0, #1
 8002404:	f00f fc82 	bl	8011d0c <osSemaphoreNew>
 8002408:	4b02      	ldr	r3, [pc, #8]	@ (8002414 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 800240a:	6018      	str	r0, [r3, #0]
}
 800240c:	4620      	mov	r0, r4
 800240e:	bd10      	pop	{r4, pc}
 8002410:	0802ad90 	.word	0x0802ad90
 8002414:	24001550 	.word	0x24001550

08002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002418:	b508      	push	{r3, lr}
 800241a:	468c      	mov	ip, r1
 800241c:	4611      	mov	r1, r2
 800241e:	461a      	mov	r2, r3
    if (reader != 0)
 8002420:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002422:	b13b      	cbz	r3, 8002434 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002424:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002426:	ebac 0c03 	sub.w	ip, ip, r3
 800242a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800242c:	4460      	add	r0, ip
    return strncmp(src, str, num);
 800242e:	f027 fb73 	bl	8029b18 <strncmp>
}
 8002432:	bd08      	pop	{r3, pc}
        src = (const char*)movieData + offset;
 8002434:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002436:	4460      	add	r0, ip
 8002438:	e7f9      	b.n	800242e <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x16>
	...

0800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
    if (reader != 0)
 8002442:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002444:	b1e0      	cbz	r0, 8002480 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
 8002446:	4616      	mov	r6, r2
        if (length > aviBufferLength)
 8002448:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800244a:	4293      	cmp	r3, r2
 800244c:	d30f      	bcc.n	800246e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        reader->seek(offset);
 800244e:	6803      	ldr	r3, [r0, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002454:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002456:	6803      	ldr	r3, [r0, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4632      	mov	r2, r6
 800245c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800245e:	4798      	blx	r3
 8002460:	b910      	cbnz	r0, 8002468 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x2c>
            lastError = AVI_ERROR_EOF_REACHED;
 8002462:	230d      	movs	r3, #13
 8002464:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        aviBufferStartOffset = offset;
 8002468:	63e5      	str	r5, [r4, #60]	@ 0x3c
        return aviBuffer;
 800246a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 800246c:	bd70      	pop	{r4, r5, r6, pc}
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800246e:	2309      	movs	r3, #9
 8002470:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
 8002478:	219e      	movs	r1, #158	@ 0x9e
 800247a:	4805      	ldr	r0, [pc, #20]	@ (8002490 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 800247c:	f027 f8a8 	bl	80295d0 <__assert_func>
    return movieData + offset;
 8002480:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002482:	4408      	add	r0, r1
 8002484:	e7f2      	b.n	800246c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x30>
 8002486:	bf00      	nop
 8002488:	0802ab94 	.word	0x0802ab94
 800248c:	0802aba8 	.word	0x0802aba8
 8002490:	0802ab04 	.word	0x0802ab04

08002494 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002498:	6943      	ldr	r3, [r0, #20]
 800249a:	b1e3      	cbz	r3, 80024d6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x42>
 800249c:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 800249e:	2208      	movs	r2, #8
 80024a0:	6981      	ldr	r1, [r0, #24]
 80024a2:	f7ff ffcb 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80024a6:	69a3      	ldr	r3, [r4, #24]
 80024a8:	3304      	adds	r3, #4
    if (reader != 0)
 80024aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80024ac:	b1ca      	cbz	r2, 80024e2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4e>
        const uint32_t index = offset - aviBufferStartOffset;
 80024ae:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80024b0:	1a9b      	subs	r3, r3, r2
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80024b2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80024b4:	18c2      	adds	r2, r0, r3
 80024b6:	7855      	ldrb	r5, [r2, #1]
 80024b8:	7891      	ldrb	r1, [r2, #2]
 80024ba:	0409      	lsls	r1, r1, #16
 80024bc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80024c0:	5cc3      	ldrb	r3, [r0, r3]
 80024c2:	4319      	orrs	r1, r3
 80024c4:	78d3      	ldrb	r3, [r2, #3]
 80024c6:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        readData(currentMovieOffset, 8);
 80024ca:	2708      	movs	r7, #8
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80024cc:	f243 0630 	movw	r6, #12336	@ 0x3030
 80024d0:	f246 3564 	movw	r5, #25444	@ 0x6364
 80024d4:	e041      	b.n	800255a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80024d6:	4b3f      	ldr	r3, [pc, #252]	@ (80025d4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x140>)
 80024d8:	4a3f      	ldr	r2, [pc, #252]	@ (80025d8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x144>)
 80024da:	21e4      	movs	r1, #228	@ 0xe4
 80024dc:	483f      	ldr	r0, [pc, #252]	@ (80025dc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
 80024de:	f027 f877 	bl	80295d0 <__assert_func>
        volatile const uint8_t* const d = movieData + offset;
 80024e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80024e4:	18ca      	adds	r2, r1, r3
        val |= d[0];
 80024e6:	5cc9      	ldrb	r1, [r1, r3]
        val |= d[1] << 8;
 80024e8:	7850      	ldrb	r0, [r2, #1]
        val |= d[2] << 16;
 80024ea:	7893      	ldrb	r3, [r2, #2]
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80024f2:	4319      	orrs	r1, r3
        val |= d[3] << 24;
 80024f4:	78d3      	ldrb	r3, [r2, #3]
 80024f6:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        return val;
 80024fa:	e7e6      	b.n	80024ca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x36>
        const uint32_t index = offset - aviBufferStartOffset;
 80024fc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80024fe:	1a5a      	subs	r2, r3, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002500:	f8d4 c034 	ldr.w	ip, [r4, #52]	@ 0x34
 8002504:	eb0c 0002 	add.w	r0, ip, r2
 8002508:	f890 e001 	ldrb.w	lr, [r0, #1]
 800250c:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8002510:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002514:	1c9a      	adds	r2, r3, #2
        const uint32_t index = offset - aviBufferStartOffset;
 8002516:	1a52      	subs	r2, r2, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002518:	eb0c 0e02 	add.w	lr, ip, r2
 800251c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8002520:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8002524:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
        chunkSize = getU32(currentMovieOffset + 4);
 8002528:	3304      	adds	r3, #4
        const uint32_t index = offset - aviBufferStartOffset;
 800252a:	1a5b      	subs	r3, r3, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800252c:	eb0c 0e03 	add.w	lr, ip, r3
 8002530:	f89e 8001 	ldrb.w	r8, [lr, #1]
 8002534:	f89e 1002 	ldrb.w	r1, [lr, #2]
 8002538:	0409      	lsls	r1, r1, #16
 800253a:	ea41 2108 	orr.w	r1, r1, r8, lsl #8
 800253e:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8002542:	4319      	orrs	r1, r3
 8002544:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8002548:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800254c:	42b0      	cmp	r0, r6
 800254e:	bf08      	it	eq
 8002550:	42aa      	cmpeq	r2, r5
 8002552:	bf0c      	ite	eq
 8002554:	2001      	moveq	r0, #1
 8002556:	2000      	movne	r0, #0
 8002558:	d039      	beq.n	80025ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13a>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800255a:	69a3      	ldr	r3, [r4, #24]
 800255c:	4419      	add	r1, r3
 800255e:	f101 0208 	add.w	r2, r1, #8
 8002562:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002564:	429a      	cmp	r2, r3
 8002566:	d22d      	bcs.n	80025c4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x130>
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002568:	3109      	adds	r1, #9
 800256a:	f021 0101 	bic.w	r1, r1, #1
 800256e:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 8002570:	6963      	ldr	r3, [r4, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 8002576:	463a      	mov	r2, r7
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ff5f 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800257e:	69a3      	ldr	r3, [r4, #24]
    if (reader != 0)
 8002580:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002582:	2a00      	cmp	r2, #0
 8002584:	d1ba      	bne.n	80024fc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x68>
        volatile const uint8_t* const d = movieData + offset;
 8002586:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002588:	18ca      	adds	r2, r1, r3
        val |= d[0];
 800258a:	5cc8      	ldrb	r0, [r1, r3]
        val |= d[1] << 8;
 800258c:	7852      	ldrb	r2, [r2, #1]
 800258e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002592:	1c9a      	adds	r2, r3, #2
        volatile const uint8_t* const d = movieData + offset;
 8002594:	eb01 0c02 	add.w	ip, r1, r2
        val |= d[0];
 8002598:	5c8a      	ldrb	r2, [r1, r2]
        val |= d[1] << 8;
 800259a:	f89c c001 	ldrb.w	ip, [ip, #1]
 800259e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
        chunkSize = getU32(currentMovieOffset + 4);
 80025a2:	3304      	adds	r3, #4
        volatile const uint8_t* const d = movieData + offset;
 80025a4:	eb01 0c03 	add.w	ip, r1, r3
        val |= d[0];
 80025a8:	5cc9      	ldrb	r1, [r1, r3]
        val |= d[1] << 8;
 80025aa:	f89c e001 	ldrb.w	lr, [ip, #1]
        val |= d[2] << 16;
 80025ae:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80025b8:	4319      	orrs	r1, r3
        val |= d[3] << 24;
 80025ba:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80025be:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        return val;
 80025c2:	e7c3      	b.n	800254c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xb8>
    frameNumber = 1;
 80025c4:	2301      	movs	r3, #1
 80025c6:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80025c8:	6a23      	ldr	r3, [r4, #32]
 80025ca:	61a3      	str	r3, [r4, #24]
    return false;
 80025cc:	2000      	movs	r0, #0
}
 80025ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025d2:	bf00      	nop
 80025d4:	0802abec 	.word	0x0802abec
 80025d8:	0802ac38 	.word	0x0802ac38
 80025dc:	0802ab04 	.word	0x0802ab04

080025e0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	4604      	mov	r4, r0
    if (frameNumber == 0)
 80025e4:	2901      	cmp	r1, #1
 80025e6:	bf38      	it	cc
 80025e8:	2101      	movcc	r1, #1
 80025ea:	460e      	mov	r6, r1
    if (frameNumber > getNumberOfFrames())
 80025ec:	6803      	ldr	r3, [r0, #0]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	4798      	blx	r3
 80025f2:	42b0      	cmp	r0, r6
 80025f4:	d204      	bcs.n	8002600 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	4620      	mov	r0, r4
 80025fc:	4798      	blx	r3
 80025fe:	4606      	mov	r6, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002600:	1e73      	subs	r3, r6, #1
 8002602:	69e5      	ldr	r5, [r4, #28]
 8002604:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    readData(offset, 16);
 8002608:	2210      	movs	r2, #16
 800260a:	f105 0108 	add.w	r1, r5, #8
 800260e:	4620      	mov	r0, r4
 8002610:	f7ff ff14 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002614:	3510      	adds	r5, #16
    if (reader != 0)
 8002616:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002618:	b19b      	cbz	r3, 8002642 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x62>
        const uint32_t index = offset - aviBufferStartOffset;
 800261a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800261c:	1aed      	subs	r5, r5, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800261e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002620:	194a      	adds	r2, r1, r5
 8002622:	7850      	ldrb	r0, [r2, #1]
 8002624:	7893      	ldrb	r3, [r2, #2]
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800262c:	5d49      	ldrb	r1, [r1, r5]
 800262e:	430b      	orrs	r3, r1
 8002630:	78d2      	ldrb	r2, [r2, #3]
 8002632:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002636:	6a22      	ldr	r2, [r4, #32]
 8002638:	3a04      	subs	r2, #4
 800263a:	441a      	add	r2, r3
 800263c:	61a2      	str	r2, [r4, #24]
    this->frameNumber = frameNumber;
 800263e:	6166      	str	r6, [r4, #20]
}
 8002640:	bd70      	pop	{r4, r5, r6, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002642:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002644:	1959      	adds	r1, r3, r5
        val |= d[0];
 8002646:	5d5b      	ldrb	r3, [r3, r5]
        val |= d[1] << 8;
 8002648:	7848      	ldrb	r0, [r1, #1]
        val |= d[2] << 16;
 800264a:	788a      	ldrb	r2, [r1, #2]
 800264c:	0412      	lsls	r2, r2, #16
 800264e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002652:	4313      	orrs	r3, r2
        val |= d[3] << 24;
 8002654:	78ca      	ldrb	r2, [r1, #3]
 8002656:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        return val;
 800265a:	e7ec      	b.n	8002636 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x56>

0800265c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
 800265c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002660:	4605      	mov	r5, r0
    currentMovieOffset = 0;
 8002662:	2100      	movs	r1, #0
 8002664:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002666:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 800266a:	2248      	movs	r2, #72	@ 0x48
 800266c:	f7ff fee6 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002670:	69af      	ldr	r7, [r5, #24]
 8002672:	2304      	movs	r3, #4
 8002674:	4aba      	ldr	r2, [pc, #744]	@ (8002960 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x304>)
 8002676:	4639      	mov	r1, r7
 8002678:	4628      	mov	r0, r5
 800267a:	f7ff fecd 	bl	8002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800267e:	2800      	cmp	r0, #0
 8002680:	d141      	bne.n	8002706 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xaa>
    currentMovieOffset += 8;
 8002682:	f107 0108 	add.w	r1, r7, #8
 8002686:	61a9      	str	r1, [r5, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002688:	2304      	movs	r3, #4
 800268a:	4ab6      	ldr	r2, [pc, #728]	@ (8002964 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x308>)
 800268c:	4628      	mov	r0, r5
 800268e:	f7ff fec3 	bl	8002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002692:	2800      	cmp	r0, #0
 8002694:	d141      	bne.n	800271a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xbe>
    currentMovieOffset += 4;
 8002696:	f107 010c 	add.w	r1, r7, #12
 800269a:	61a9      	str	r1, [r5, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800269c:	2304      	movs	r3, #4
 800269e:	4ab2      	ldr	r2, [pc, #712]	@ (8002968 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x30c>)
 80026a0:	4628      	mov	r0, r5
 80026a2:	f7ff feb9 	bl	8002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d141      	bne.n	800272e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80026aa:	f107 0310 	add.w	r3, r7, #16
    if (reader != 0)
 80026ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	d046      	beq.n	8002742 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xe6>
        const uint32_t index = offset - aviBufferStartOffset;
 80026b4:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80026b6:	1a9b      	subs	r3, r3, r2
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80026b8:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80026ba:	18ca      	adds	r2, r1, r3
 80026bc:	7850      	ldrb	r0, [r2, #1]
 80026be:	7896      	ldrb	r6, [r2, #2]
 80026c0:	0436      	lsls	r6, r6, #16
 80026c2:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	431e      	orrs	r6, r3
 80026ca:	78d3      	ldrb	r3, [r2, #3]
 80026cc:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
    assert(aviListSize);
 80026d0:	2e00      	cmp	r6, #0
 80026d2:	d043      	beq.n	800275c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x100>
    uint32_t offset =  currentMovieOffset + 8;
 80026d4:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80026d8:	2304      	movs	r3, #4
 80026da:	4aa4      	ldr	r2, [pc, #656]	@ (800296c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x310>)
 80026dc:	4641      	mov	r1, r8
 80026de:	4628      	mov	r0, r5
 80026e0:	f7ff fe9a 	bl	8002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	f000 8172 	beq.w	80029ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x372>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80026ea:	2306      	movs	r3, #6
 80026ec:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80026f0:	2304      	movs	r3, #4
 80026f2:	4a9f      	ldr	r2, [pc, #636]	@ (8002970 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x314>)
 80026f4:	f107 0118 	add.w	r1, r7, #24
 80026f8:	4628      	mov	r0, r5
 80026fa:	f7ff fe8d 	bl	8002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026fe:	2800      	cmp	r0, #0
 8002700:	f000 8172 	beq.w	80029e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38c>
 8002704:	e16d      	b.n	80029e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x386>
        lastError = AVI_ERROR_NOT_RIFF;
 8002706:	2303      	movs	r3, #3
 8002708:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
        assert(!"RIFF header not found");
 800270c:	4b99      	ldr	r3, [pc, #612]	@ (8002974 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x318>)
 800270e:	4a9a      	ldr	r2, [pc, #616]	@ (8002978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x31c>)
 8002710:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002714:	4899      	ldr	r0, [pc, #612]	@ (800297c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x320>)
 8002716:	f026 ff5b 	bl	80295d0 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800271a:	2304      	movs	r3, #4
 800271c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
        assert(!"AVI header not found");
 8002720:	4b97      	ldr	r3, [pc, #604]	@ (8002980 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x324>)
 8002722:	4a95      	ldr	r2, [pc, #596]	@ (8002978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x31c>)
 8002724:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8002728:	4894      	ldr	r0, [pc, #592]	@ (800297c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x320>)
 800272a:	f026 ff51 	bl	80295d0 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800272e:	2305      	movs	r3, #5
 8002730:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002734:	4b93      	ldr	r3, [pc, #588]	@ (8002984 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x328>)
 8002736:	4a90      	ldr	r2, [pc, #576]	@ (8002978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x31c>)
 8002738:	f240 113b 	movw	r1, #315	@ 0x13b
 800273c:	488f      	ldr	r0, [pc, #572]	@ (800297c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x320>)
 800273e:	f026 ff47 	bl	80295d0 <__assert_func>
        volatile const uint8_t* const d = movieData + offset;
 8002742:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8002744:	18ca      	adds	r2, r1, r3
        val |= d[0];
 8002746:	5cce      	ldrb	r6, [r1, r3]
        val |= d[1] << 8;
 8002748:	7851      	ldrb	r1, [r2, #1]
        val |= d[2] << 16;
 800274a:	7893      	ldrb	r3, [r2, #2]
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002752:	431e      	orrs	r6, r3
        val |= d[3] << 24;
 8002754:	78d3      	ldrb	r3, [r2, #3]
 8002756:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
        return val;
 800275a:	e7b9      	b.n	80026d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x74>
    assert(aviListSize);
 800275c:	4b8a      	ldr	r3, [pc, #552]	@ (8002988 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32c>)
 800275e:	4a86      	ldr	r2, [pc, #536]	@ (8002978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x31c>)
 8002760:	f240 1141 	movw	r1, #321	@ 0x141
 8002764:	4885      	ldr	r0, [pc, #532]	@ (800297c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x320>)
 8002766:	f026 ff33 	bl	80295d0 <__assert_func>
        offset += 8; /* skip fourcc and cb in AVIMAINHEADER */
 800276a:	f107 0320 	add.w	r3, r7, #32
    if (reader != 0)
 800276e:	2c00      	cmp	r4, #0
 8002770:	d042      	beq.n	80027f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x19c>
        const uint32_t index = offset - aviBufferStartOffset;
 8002772:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8002774:	1a58      	subs	r0, r3, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002776:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002778:	1814      	adds	r4, r2, r0
 800277a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800277e:	78a3      	ldrb	r3, [r4, #2]
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002786:	5c10      	ldrb	r0, [r2, r0]
 8002788:	4303      	orrs	r3, r0
 800278a:	78e0      	ldrb	r0, [r4, #3]
 800278c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002790:	487e      	ldr	r0, [pc, #504]	@ (800298c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x330>)
 8002792:	fba0 0303 	umull	r0, r3, r0, r3
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	606b      	str	r3, [r5, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800279a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
        const uint32_t index = offset - aviBufferStartOffset;
 800279e:	1a40      	subs	r0, r0, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80027a0:	1814      	adds	r4, r2, r0
 80027a2:	f894 c001 	ldrb.w	ip, [r4, #1]
 80027a6:	78a3      	ldrb	r3, [r4, #2]
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80027ae:	5c10      	ldrb	r0, [r2, r0]
 80027b0:	4303      	orrs	r3, r0
 80027b2:	78e0      	ldrb	r0, [r4, #3]
 80027b4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
 80027b8:	60ab      	str	r3, [r5, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80027ba:	f107 0040 	add.w	r0, r7, #64	@ 0x40
        const uint32_t index = offset - aviBufferStartOffset;
 80027be:	1a40      	subs	r0, r0, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80027c0:	1814      	adds	r4, r2, r0
 80027c2:	f894 c001 	ldrb.w	ip, [r4, #1]
 80027c6:	78a3      	ldrb	r3, [r4, #2]
 80027c8:	041b      	lsls	r3, r3, #16
 80027ca:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80027ce:	5c10      	ldrb	r0, [r2, r0]
 80027d0:	4303      	orrs	r3, r0
 80027d2:	78e0      	ldrb	r0, [r4, #3]
 80027d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
        videoInfo.frame_width = getU32(offset + 32);
 80027d8:	60eb      	str	r3, [r5, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80027da:	3744      	adds	r7, #68	@ 0x44
        const uint32_t index = offset - aviBufferStartOffset;
 80027dc:	1a79      	subs	r1, r7, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80027de:	1850      	adds	r0, r2, r1
 80027e0:	7844      	ldrb	r4, [r0, #1]
 80027e2:	7883      	ldrb	r3, [r0, #2]
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80027ea:	5c52      	ldrb	r2, [r2, r1]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	78c2      	ldrb	r2, [r0, #3]
 80027f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
 80027f4:	612b      	str	r3, [r5, #16]
 80027f6:	e0f7      	b.n	80029e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38c>
        volatile const uint8_t* const d = movieData + offset;
 80027f8:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80027fa:	18d0      	adds	r0, r2, r3
        val |= d[0];
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
        val |= d[1] << 8;
 80027fe:	7844      	ldrb	r4, [r0, #1]
        val |= d[2] << 16;
 8002800:	7881      	ldrb	r1, [r0, #2]
 8002802:	0409      	lsls	r1, r1, #16
 8002804:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8002808:	430b      	orrs	r3, r1
        val |= d[3] << 24;
 800280a:	78c1      	ldrb	r1, [r0, #3]
 800280c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002810:	495e      	ldr	r1, [pc, #376]	@ (800298c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x330>)
 8002812:	fba1 1303 	umull	r1, r3, r1, r3
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	606b      	str	r3, [r5, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800281a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
        volatile const uint8_t* const d = movieData + offset;
 800281e:	18d0      	adds	r0, r2, r3
        val |= d[0];
 8002820:	5cd3      	ldrb	r3, [r2, r3]
        val |= d[1] << 8;
 8002822:	7844      	ldrb	r4, [r0, #1]
        val |= d[2] << 16;
 8002824:	7881      	ldrb	r1, [r0, #2]
 8002826:	0409      	lsls	r1, r1, #16
 8002828:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800282c:	430b      	orrs	r3, r1
        val |= d[3] << 24;
 800282e:	78c1      	ldrb	r1, [r0, #3]
 8002830:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
 8002834:	60ab      	str	r3, [r5, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002836:	f107 0340 	add.w	r3, r7, #64	@ 0x40
        volatile const uint8_t* const d = movieData + offset;
 800283a:	18d0      	adds	r0, r2, r3
        val |= d[0];
 800283c:	5cd3      	ldrb	r3, [r2, r3]
        val |= d[1] << 8;
 800283e:	7844      	ldrb	r4, [r0, #1]
        val |= d[2] << 16;
 8002840:	7881      	ldrb	r1, [r0, #2]
 8002842:	0409      	lsls	r1, r1, #16
 8002844:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8002848:	430b      	orrs	r3, r1
        val |= d[3] << 24;
 800284a:	78c1      	ldrb	r1, [r0, #3]
 800284c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        videoInfo.frame_width = getU32(offset + 32);
 8002850:	60eb      	str	r3, [r5, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002852:	3744      	adds	r7, #68	@ 0x44
        volatile const uint8_t* const d = movieData + offset;
 8002854:	19d1      	adds	r1, r2, r7
        val |= d[0];
 8002856:	5dd3      	ldrb	r3, [r2, r7]
        val |= d[1] << 8;
 8002858:	7848      	ldrb	r0, [r1, #1]
        val |= d[2] << 16;
 800285a:	788a      	ldrb	r2, [r1, #2]
 800285c:	0412      	lsls	r2, r2, #16
 800285e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002862:	4313      	orrs	r3, r2
        val |= d[3] << 24;
 8002864:	78ca      	ldrb	r2, [r1, #3]
 8002866:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        return val;
 800286a:	e7c3      	b.n	80027f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x198>
    if (lastError != AVI_NO_ERROR)
 800286c:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d03a      	beq.n	80028ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x28e>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002874:	230a      	movs	r3, #10
 8002876:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 800287a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        volatile const uint8_t* const d = movieData + offset;
 800287e:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8002880:	18ca      	adds	r2, r1, r3
        val |= d[0];
 8002882:	5ccc      	ldrb	r4, [r1, r3]
        val |= d[1] << 8;
 8002884:	7851      	ldrb	r1, [r2, #1]
        val |= d[2] << 16;
 8002886:	7893      	ldrb	r3, [r2, #2]
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800288e:	431c      	orrs	r4, r3
        val |= d[3] << 24;
 8002890:	78d3      	ldrb	r3, [r2, #3]
 8002892:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
        listOffset += listSize;
 8002896:	4434      	add	r4, r6
        readData(listOffset, 12);
 8002898:	464a      	mov	r2, r9
 800289a:	4621      	mov	r1, r4
 800289c:	4628      	mov	r0, r5
 800289e:	f7ff fdcd 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80028a2:	f104 0608 	add.w	r6, r4, #8
 80028a6:	463b      	mov	r3, r7
 80028a8:	4642      	mov	r2, r8
 80028aa:	4631      	mov	r1, r6
 80028ac:	4628      	mov	r0, r5
 80028ae:	f7ff fdb3 	bl	8002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d0da      	beq.n	800286c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x210>
 80028b6:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1da      	bne.n	8002874 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x218>
 80028be:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80028c0:	42a3      	cmp	r3, r4
 80028c2:	d912      	bls.n	80028ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x28e>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80028c4:	1d23      	adds	r3, r4, #4
    if (reader != 0)
 80028c6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80028c8:	2a00      	cmp	r2, #0
 80028ca:	d0d8      	beq.n	800287e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x222>
        const uint32_t index = offset - aviBufferStartOffset;
 80028cc:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80028ce:	1a9b      	subs	r3, r3, r2
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80028d0:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80028d2:	18ca      	adds	r2, r1, r3
 80028d4:	7850      	ldrb	r0, [r2, #1]
 80028d6:	7894      	ldrb	r4, [r2, #2]
 80028d8:	0424      	lsls	r4, r4, #16
 80028da:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	431c      	orrs	r4, r3
 80028e2:	78d3      	ldrb	r3, [r2, #3]
 80028e4:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 80028e8:	e7d5      	b.n	8002896 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x23a>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80028ea:	f104 030c 	add.w	r3, r4, #12
 80028ee:	61ab      	str	r3, [r5, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80028f0:	3404      	adds	r4, #4
    if (reader != 0)
 80028f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d04d      	beq.n	8002994 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x338>
        const uint32_t index = offset - aviBufferStartOffset;
 80028f8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80028fa:	1ae4      	subs	r4, r4, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80028fc:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80028fe:	1c67      	adds	r7, r4, #1
 8002900:	1ca0      	adds	r0, r4, #2
 8002902:	1ce1      	adds	r1, r4, #3
 8002904:	f812 c007 	ldrb.w	ip, [r2, r7]
 8002908:	5c13      	ldrb	r3, [r2, r0]
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002910:	f812 c004 	ldrb.w	ip, [r2, r4]
 8002914:	ea43 030c 	orr.w	r3, r3, ip
 8002918:	f812 c001 	ldrb.w	ip, [r2, r1]
 800291c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002920:	4433      	add	r3, r6
 8002922:	626b      	str	r3, [r5, #36]	@ 0x24
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002924:	5dd7      	ldrb	r7, [r2, r7]
 8002926:	5c13      	ldrb	r3, [r2, r0]
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800292e:	5d10      	ldrb	r0, [r2, r4]
 8002930:	4303      	orrs	r3, r0
 8002932:	5c52      	ldrb	r2, [r2, r1]
 8002934:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    listOffset += listSize;
 8002938:	441e      	add	r6, r3
    readData(listOffset, 4);
 800293a:	2204      	movs	r2, #4
 800293c:	4631      	mov	r1, r6
 800293e:	4628      	mov	r0, r5
 8002940:	f7ff fd7c 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002944:	2304      	movs	r3, #4
 8002946:	4a12      	ldr	r2, [pc, #72]	@ (8002990 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x334>)
 8002948:	4631      	mov	r1, r6
 800294a:	4628      	mov	r0, r5
 800294c:	f7ff fd64 	bl	8002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002950:	2800      	cmp	r0, #0
 8002952:	d138      	bne.n	80029c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36a>
        indexOffset = listOffset;
 8002954:	61ee      	str	r6, [r5, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002956:	2301      	movs	r3, #1
 8002958:	616b      	str	r3, [r5, #20]
    firstFrameOffset = currentMovieOffset;
 800295a:	69ab      	ldr	r3, [r5, #24]
 800295c:	622b      	str	r3, [r5, #32]
 800295e:	e78c      	b.n	800287a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x21e>
 8002960:	0802ac6c 	.word	0x0802ac6c
 8002964:	0802acc0 	.word	0x0802acc0
 8002968:	0802ace0 	.word	0x0802ace0
 800296c:	0802ad0c 	.word	0x0802ad0c
 8002970:	0802ad14 	.word	0x0802ad14
 8002974:	0802ac74 	.word	0x0802ac74
 8002978:	0802ac90 	.word	0x0802ac90
 800297c:	0802ab04 	.word	0x0802ab04
 8002980:	0802acc8 	.word	0x0802acc8
 8002984:	0802ace8 	.word	0x0802ace8
 8002988:	0802ad00 	.word	0x0802ad00
 800298c:	10624dd3 	.word	0x10624dd3
 8002990:	0802ad24 	.word	0x0802ad24
        volatile const uint8_t* const d = movieData + offset;
 8002994:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002996:	1902      	adds	r2, r0, r4
        val |= d[0];
 8002998:	5d03      	ldrb	r3, [r0, r4]
        val |= d[1] << 8;
 800299a:	7857      	ldrb	r7, [r2, #1]
        val |= d[2] << 16;
 800299c:	7891      	ldrb	r1, [r2, #2]
 800299e:	0409      	lsls	r1, r1, #16
 80029a0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80029a4:	430b      	orrs	r3, r1
        val |= d[3] << 24;
 80029a6:	78d1      	ldrb	r1, [r2, #3]
 80029a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80029ac:	4433      	add	r3, r6
 80029ae:	626b      	str	r3, [r5, #36]	@ 0x24
        val |= d[0];
 80029b0:	5d03      	ldrb	r3, [r0, r4]
        val |= d[1] << 8;
 80029b2:	7850      	ldrb	r0, [r2, #1]
        val |= d[2] << 16;
 80029b4:	7891      	ldrb	r1, [r2, #2]
 80029b6:	0409      	lsls	r1, r1, #16
 80029b8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80029bc:	430b      	orrs	r3, r1
        val |= d[3] << 24;
 80029be:	78d2      	ldrb	r2, [r2, #3]
 80029c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        return val;
 80029c4:	e7b8      	b.n	8002938 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80029c6:	230b      	movs	r3, #11
 80029c8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
        return;
 80029cc:	e755      	b.n	800287a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x21e>
    if (compare(offset, "avih", 4))
 80029ce:	2304      	movs	r3, #4
 80029d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a04 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a8>)
 80029d2:	f107 0118 	add.w	r1, r7, #24
 80029d6:	4628      	mov	r0, r5
 80029d8:	f7ff fd1e 	bl	8002418 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80029dc:	2800      	cmp	r0, #0
 80029de:	f43f aec4 	beq.w	800276a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x10e>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80029e2:	2307      	movs	r3, #7
 80029e4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80029e8:	eb08 0406 	add.w	r4, r8, r6
    readData(listOffset, 12);
 80029ec:	220c      	movs	r2, #12
 80029ee:	4621      	mov	r1, r4
 80029f0:	4628      	mov	r0, r5
 80029f2:	f7ff fd23 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80029f6:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 8002a08 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ac>
 80029fa:	2704      	movs	r7, #4
        readData(listOffset, 12);
 80029fc:	f04f 090c 	mov.w	r9, #12
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002a00:	e74f      	b.n	80028a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x246>
 8002a02:	bf00      	nop
 8002a04:	0802ad14 	.word	0x0802ad14
 8002a08:	0802ad1c 	.word	0x0802ad1c

08002a0c <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
 8002a0c:	b508      	push	{r3, lr}
    movieData = movie;
 8002a0e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    movieLength = length;
 8002a10:	6282      	str	r2, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002a12:	2200      	movs	r2, #0
 8002a14:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002a16:	f7ff fe21 	bl	800265c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8002a1a:	bd08      	pop	{r3, pc}

08002a1c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002a1c:	b510      	push	{r4, lr}
 8002a1e:	4604      	mov	r4, r0
 8002a20:	4608      	mov	r0, r1
    this->reader = &reader;
 8002a22:	6321      	str	r1, [r4, #48]	@ 0x30
    movieData = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002a28:	680b      	ldr	r3, [r1, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4798      	blx	r3
 8002a2e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7ff fe13 	bl	800265c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8002a36:	bd10      	pop	{r4, pc}

08002a38 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002a38:	b530      	push	{r4, r5, lr}
 8002a3a:	b083      	sub	sp, #12
        FrameBufferAddress = output;
 8002a3c:	4c14      	ldr	r4, [pc, #80]	@ (8002a90 <JPEG_Decode_DMA+0x58>)
 8002a3e:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8002a40:	2400      	movs	r4, #0
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <JPEG_Decode_DMA+0x5c>)
 8002a44:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8002a46:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <JPEG_Decode_DMA+0x60>)
 8002a48:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Write_BufferIndex = 0;
 8002a4a:	4d14      	ldr	r5, [pc, #80]	@ (8002a9c <JPEG_Decode_DMA+0x64>)
 8002a4c:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002a4e:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <JPEG_Decode_DMA+0x68>)
 8002a50:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002a52:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <JPEG_Decode_DMA+0x6c>)
 8002a54:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002a56:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <JPEG_Decode_DMA+0x70>)
 8002a58:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <JPEG_Decode_DMA+0x74>)
 8002a5c:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002a5e:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <JPEG_Decode_DMA+0x78>)
 8002a60:	701c      	strb	r4, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8002a62:	609c      	str	r4, [r3, #8]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002a64:	60dc      	str	r4, [r3, #12]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002a66:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8002a68:	619c      	str	r4, [r3, #24]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002a6a:	61dc      	str	r4, [r3, #28]
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a6c:	682a      	ldr	r2, [r5, #0]
 8002a6e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002a72:	4a10      	ldr	r2, [pc, #64]	@ (8002ab4 <JPEG_Decode_DMA+0x7c>)
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002a7a:	01d2      	lsls	r2, r2, #7
 8002a7c:	9200      	str	r2, [sp, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002a84:	f00b fbe8 	bl	800e258 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002a88:	4620      	mov	r0, r4
 8002a8a:	b003      	add	sp, #12
 8002a8c:	bd30      	pop	{r4, r5, pc}
 8002a8e:	bf00      	nop
 8002a90:	2400ab7c 	.word	0x2400ab7c
 8002a94:	2400ab68 	.word	0x2400ab68
 8002a98:	2400154c 	.word	0x2400154c
 8002a9c:	2400ab58 	.word	0x2400ab58
 8002aa0:	2400ab78 	.word	0x2400ab78
 8002aa4:	2400ab70 	.word	0x2400ab70
 8002aa8:	2400ab74 	.word	0x2400ab74
 8002aac:	24001554 	.word	0x24001554
 8002ab0:	24000010 	.word	0x24000010
 8002ab4:	24001534 	.word	0x24001534

08002ab8 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002ab8:	684b      	ldr	r3, [r1, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d013      	beq.n	8002ae6 <HAL_JPEG_InfoReadyCallback+0x2e>
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
            MCU_TotalNb = (hMCU * vMCU);
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d02a      	beq.n	8002b18 <HAL_JPEG_InfoReadyCallback+0x60>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
                }
            }

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002ac2:	b97b      	cbnz	r3, 8002ae4 <HAL_JPEG_InfoReadyCallback+0x2c>
            {
                if ((pInfo->ImageWidth % 8) != 0)
 8002ac4:	68cb      	ldr	r3, [r1, #12]
 8002ac6:	f013 0f07 	tst.w	r3, #7
 8002aca:	d003      	beq.n	8002ad4 <HAL_JPEG_InfoReadyCallback+0x1c>
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002acc:	f023 0307 	bic.w	r3, r3, #7
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002ad4:	688b      	ldr	r3, [r1, #8]
 8002ad6:	f013 0f07 	tst.w	r3, #7
 8002ada:	d003      	beq.n	8002ae4 <HAL_JPEG_InfoReadyCallback+0x2c>
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002adc:	f023 0307 	bic.w	r3, r3, #7
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	608b      	str	r3, [r1, #8]
                }
            }
        }
    }
 8002ae4:	4770      	bx	lr
            if ((pInfo->ImageWidth % 16) != 0)
 8002ae6:	68cb      	ldr	r3, [r1, #12]
 8002ae8:	f013 0f0f 	tst.w	r3, #15
 8002aec:	d003      	beq.n	8002af6 <HAL_JPEG_InfoReadyCallback+0x3e>
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002aee:	f023 030f 	bic.w	r3, r3, #15
 8002af2:	3310      	adds	r3, #16
 8002af4:	60cb      	str	r3, [r1, #12]
            if ((pInfo->ImageHeight % 16) != 0)
 8002af6:	688b      	ldr	r3, [r1, #8]
 8002af8:	f013 0f0f 	tst.w	r3, #15
 8002afc:	d003      	beq.n	8002b06 <HAL_JPEG_InfoReadyCallback+0x4e>
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002afe:	f023 030f 	bic.w	r3, r3, #15
 8002b02:	3310      	adds	r3, #16
 8002b04:	608b      	str	r3, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002b06:	68cb      	ldr	r3, [r1, #12]
 8002b08:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002b0a:	688a      	ldr	r2, [r1, #8]
 8002b0c:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	4a0a      	ldr	r2, [pc, #40]	@ (8002b3c <HAL_JPEG_InfoReadyCallback+0x84>)
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4770      	bx	lr
                if ((pInfo->ImageWidth % 16) != 0)
 8002b18:	68cb      	ldr	r3, [r1, #12]
 8002b1a:	f013 0f0f 	tst.w	r3, #15
 8002b1e:	d003      	beq.n	8002b28 <HAL_JPEG_InfoReadyCallback+0x70>
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002b20:	f023 030f 	bic.w	r3, r3, #15
 8002b24:	3310      	adds	r3, #16
 8002b26:	60cb      	str	r3, [r1, #12]
                if ((pInfo->ImageHeight % 8) != 0)
 8002b28:	688b      	ldr	r3, [r1, #8]
 8002b2a:	f013 0f07 	tst.w	r3, #7
 8002b2e:	d0d9      	beq.n	8002ae4 <HAL_JPEG_InfoReadyCallback+0x2c>
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002b30:	f023 0307 	bic.w	r3, r3, #7
 8002b34:	3308      	adds	r3, #8
 8002b36:	608b      	str	r3, [r1, #8]
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2400ab60 	.word	0x2400ab60

08002b40 <HAL_JPEG_GetDataCallback>:
     * @param hjpeg: JPEG handle pointer
     * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
 8002b40:	b538      	push	{r3, r4, r5, lr}
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002b42:	4a0b      	ldr	r2, [pc, #44]	@ (8002b70 <HAL_JPEG_GetDataCallback+0x30>)
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	440b      	add	r3, r1
 8002b48:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_JPEG_GetDataCallback+0x34>)
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d300      	bcc.n	8002b54 <HAL_JPEG_GetDataCallback+0x14>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
        }
    }
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b54:	4c08      	ldr	r4, [pc, #32]	@ (8002b78 <HAL_JPEG_GetDataCallback+0x38>)
 8002b56:	6825      	ldr	r5, [r4, #0]
 8002b58:	4429      	add	r1, r5
 8002b5a:	6021      	str	r1, [r4, #0]
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002b5c:	1ad2      	subs	r2, r2, r3
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002b5e:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
 8002b62:	bf28      	it	cs
 8002b64:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
 8002b68:	f00b fbe9 	bl	800e33e <HAL_JPEG_ConfigInputBuffer>
    }
 8002b6c:	e7f1      	b.n	8002b52 <HAL_JPEG_GetDataCallback+0x12>
 8002b6e:	bf00      	nop
 8002b70:	2400ab78 	.word	0x2400ab78
 8002b74:	2400ab74 	.word	0x2400ab74
 8002b78:	2400ab70 	.word	0x2400ab70

08002b7c <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4604      	mov	r4, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b80:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <HAL_JPEG_DataReadyCallback+0x90>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	4922      	ldr	r1, [pc, #136]	@ (8002c10 <HAL_JPEG_DataReadyCallback+0x94>)
 8002b86:	0100      	lsls	r0, r0, #4
 8002b88:	2501      	movs	r5, #1
 8002b8a:	540d      	strb	r5, [r1, r0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8002b92:	6082      	str	r2, [r0, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002b94:	4a1f      	ldr	r2, [pc, #124]	@ (8002c14 <HAL_JPEG_DataReadyCallback+0x98>)
 8002b96:	6810      	ldr	r0, [r2, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002b98:	681d      	ldr	r5, [r3, #0]
 8002b9a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8002b9e:	60c8      	str	r0, [r1, #12]

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002ba0:	6811      	ldr	r1, [r2, #0]
 8002ba2:	481d      	ldr	r0, [pc, #116]	@ (8002c18 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002ba4:	68c0      	ldr	r0, [r0, #12]
 8002ba6:	4401      	add	r1, r0
 8002ba8:	6011      	str	r1, [r2, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	3201      	adds	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d902      	bls.n	8002bbc <HAL_JPEG_DataReadyCallback+0x40>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <HAL_JPEG_DataReadyCallback+0x90>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_JPEG_DataReadyCallback+0x90>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <HAL_JPEG_DataReadyCallback+0x94>)
 8002bc4:	5cd3      	ldrb	r3, [r2, r3]
 8002bc6:	b9a3      	cbnz	r3, 8002bf2 <HAL_JPEG_DataReadyCallback+0x76>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
            JPEG_output_is_paused = 1;
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002bc8:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <HAL_JPEG_DataReadyCallback+0x90>)
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <HAL_JPEG_DataReadyCallback+0x94>)
 8002bd6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002bda:	01d2      	lsls	r2, r2, #7
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	4620      	mov	r0, r4
 8002be0:	f00b fbb0 	bl	800e344 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002be4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <HAL_JPEG_DataReadyCallback+0xa0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	7a1a      	ldrb	r2, [r3, #8]
 8002bea:	b90a      	cbnz	r2, 8002bf0 <HAL_JPEG_DataReadyCallback+0x74>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002bec:	7a9b      	ldrb	r3, [r3, #10]
 8002bee:	b143      	cbz	r3, 8002c02 <HAL_JPEG_DataReadyCallback+0x86>
        {
            SEM_POST(semDecodingDone);
        }
    }
 8002bf0:	bd38      	pop	{r3, r4, r5, pc}
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f00b fb70 	bl	800e2da <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <HAL_JPEG_DataReadyCallback+0xa4>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e7e2      	b.n	8002bc8 <HAL_JPEG_DataReadyCallback+0x4c>
            SEM_POST(semDecodingDone);
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <HAL_JPEG_DataReadyCallback+0xa8>)
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	f00f f908 	bl	8011e1a <osSemaphoreRelease>
    }
 8002c0a:	e7f1      	b.n	8002bf0 <HAL_JPEG_DataReadyCallback+0x74>
 8002c0c:	2400ab58 	.word	0x2400ab58
 8002c10:	24000010 	.word	0x24000010
 8002c14:	24001554 	.word	0x24001554
 8002c18:	24001534 	.word	0x24001534
 8002c1c:	2400ab5c 	.word	0x2400ab5c
 8002c20:	2400ab68 	.word	0x2400ab68
 8002c24:	24001550 	.word	0x24001550

08002c28 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002c28:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002c2a:	e7fe      	b.n	8002c2a <HAL_JPEG_ErrorCallback+0x2>

08002c2c <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002c2c:	4b01      	ldr	r3, [pc, #4]	@ (8002c34 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
    }
 8002c32:	4770      	bx	lr
 8002c34:	2400ab6c 	.word	0x2400ab6c

08002c38 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	4604      	mov	r4, r0
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <JPEG_OutputHandler+0x74>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b11b      	cbz	r3, 8002c4a <JPEG_OutputHandler+0x12>
 8002c42:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <JPEG_OutputHandler+0x78>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d12c      	bne.n	8002ca4 <JPEG_OutputHandler+0x6c>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <JPEG_OutputHandler+0x7c>)
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	7a03      	ldrb	r3, [r0, #8]
 8002c50:	b933      	cbnz	r3, 8002c60 <JPEG_OutputHandler+0x28>
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <JPEG_OutputHandler+0x80>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <JPEG_OutputHandler+0x84>)
 8002c5a:	5cd3      	ldrb	r3, [r2, r3]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d005      	beq.n	8002c6c <JPEG_OutputHandler+0x34>
    {
        DMA2D_reference->start();
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002c60:	4b17      	ldr	r3, [pc, #92]	@ (8002cc0 <JPEG_OutputHandler+0x88>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d009      	beq.n	8002c7c <JPEG_OutputHandler+0x44>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
    }

    return 2;
 8002c68:	2002      	movs	r0, #2
}
 8002c6a:	bd10      	pop	{r4, pc}
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002c6c:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <JPEG_OutputHandler+0x78>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f5      	bne.n	8002c60 <JPEG_OutputHandler+0x28>
        DMA2D_reference->start();
 8002c74:	6803      	ldr	r3, [r0, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4798      	blx	r3
 8002c7a:	e7f1      	b.n	8002c60 <JPEG_OutputHandler+0x28>
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <JPEG_OutputHandler+0x8c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4a0e      	ldr	r2, [pc, #56]	@ (8002cbc <JPEG_OutputHandler+0x84>)
 8002c84:	5cd3      	ldrb	r3, [r2, r3]
 8002c86:	b97b      	cbnz	r3, 8002ca8 <JPEG_OutputHandler+0x70>
 8002c88:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <JPEG_OutputHandler+0x74>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b10b      	cbz	r3, 8002c92 <JPEG_OutputHandler+0x5a>
    return 2;
 8002c8e:	2002      	movs	r0, #2
 8002c90:	e7eb      	b.n	8002c6a <JPEG_OutputHandler+0x32>
        JPEG_output_is_paused = 0;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <JPEG_OutputHandler+0x88>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f00b fdb5 	bl	800e80a <HAL_JPEG_Resume>
    return 2;
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	e7e2      	b.n	8002c6a <JPEG_OutputHandler+0x32>
        return 1;
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e7e0      	b.n	8002c6a <JPEG_OutputHandler+0x32>
    return 2;
 8002ca8:	2002      	movs	r0, #2
 8002caa:	e7de      	b.n	8002c6a <JPEG_OutputHandler+0x32>
 8002cac:	2400ab6c 	.word	0x2400ab6c
 8002cb0:	24001548 	.word	0x24001548
 8002cb4:	2400ab5c 	.word	0x2400ab5c
 8002cb8:	2400154c 	.word	0x2400154c
 8002cbc:	24000010 	.word	0x24000010
 8002cc0:	2400ab68 	.word	0x2400ab68
 8002cc4:	2400ab58 	.word	0x2400ab58

08002cc8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03e      	beq.n	8002d4a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x82>
{
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4604      	mov	r4, r0
 8002cd0:	469c      	mov	ip, r3
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d038      	beq.n	8002d48 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
 8002cd8:	2003      	movs	r0, #3
 8002cda:	6118      	str	r0, [r3, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002cdc:	68e0      	ldr	r0, [r4, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002cde:	f010 0f0f 	tst.w	r0, #15
 8002ce2:	d002      	beq.n	8002cea <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x22>
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002ce4:	f020 000f 	bic.w	r0, r0, #15
 8002ce8:	3010      	adds	r0, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002cea:	4d18      	ldr	r5, [pc, #96]	@ (8002d4c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
 8002cec:	6028      	str	r0, [r5, #0]
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002cee:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8002cf2:	606b      	str	r3, [r5, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002cf4:	0900      	lsrs	r0, r0, #4
 8002cf6:	60e8      	str	r0, [r5, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002cf8:	6920      	ldr	r0, [r4, #16]
 8002cfa:	f010 000f 	ands.w	r0, r0, #15
 8002cfe:	bf18      	it	ne
 8002d00:	f1c0 0010 	rsbne	r0, r0, #16
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
 8002d06:	6098      	str	r0, [r3, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002d08:	4663      	mov	r3, ip
 8002d0a:	4811      	ldr	r0, [pc, #68]	@ (8002d50 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002d0c:	f7ff fe94 	bl	8002a38 <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 8002d10:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002d14:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002d16:	4d0e      	ldr	r5, [pc, #56]	@ (8002d50 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002d18:	4c0f      	ldr	r4, [pc, #60]	@ (8002d58 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
                SEM_WAIT(semDecodingDone);
 8002d1a:	4e10      	ldr	r6, [pc, #64]	@ (8002d5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 8002d1c:	e002      	b.n	8002d24 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5c>
        } while (JpegProcessing_End != 1);
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d00c      	beq.n	8002d3e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x76>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002d24:	4628      	mov	r0, r5
 8002d26:	f7ff ff87 	bl	8002c38 <JPEG_OutputHandler>
 8002d2a:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d1f5      	bne.n	8002d1e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x56>
                SEM_WAIT(semDecodingDone);
 8002d32:	f04f 31ff 	mov.w	r1, #4294967295
 8002d36:	6830      	ldr	r0, [r6, #0]
 8002d38:	f00f f83b 	bl	8011db2 <osSemaphoreAcquire>
 8002d3c:	e7ef      	b.n	8002d1e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x56>
        Jpeg_HWDecodingEnd = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 8002d42:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002d44:	4a07      	ldr	r2, [pc, #28]	@ (8002d64 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x9c>)
 8002d46:	6013      	str	r3, [r2, #0]
}
 8002d48:	bd70      	pop	{r4, r5, r6, pc}
 8002d4a:	4770      	bx	lr
 8002d4c:	24001534 	.word	0x24001534
 8002d50:	240005a4 	.word	0x240005a4
 8002d54:	2400ab5c 	.word	0x2400ab5c
 8002d58:	2400ab64 	.word	0x2400ab64
 8002d5c:	24001550 	.word	0x24001550
 8002d60:	2400ab6c 	.word	0x2400ab6c
 8002d64:	24001548 	.word	0x24001548

08002d68 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	4698      	mov	r8, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002d70:	6943      	ldr	r3, [r0, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d044      	beq.n	8002e00 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x98>
 8002d76:	4604      	mov	r4, r0
 8002d78:	460e      	mov	r6, r1
 8002d7a:	4617      	mov	r7, r2
    readData(currentMovieOffset, 8);
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	6981      	ldr	r1, [r0, #24]
 8002d80:	f7ff fb5c 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002d84:	69a0      	ldr	r0, [r4, #24]
    if (reader != 0)
 8002d86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d03f      	beq.n	8002e0c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa4>
        const uint32_t index = offset - aviBufferStartOffset;
 8002d8c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002d8e:	1a42      	subs	r2, r0, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002d90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d92:	189d      	adds	r5, r3, r2
 8002d94:	786d      	ldrb	r5, [r5, #1]
 8002d96:	f813 e002 	ldrb.w	lr, [r3, r2]
 8002d9a:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d9e:	1c82      	adds	r2, r0, #2
        const uint32_t index = offset - aviBufferStartOffset;
 8002da0:	1a52      	subs	r2, r2, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002da2:	189d      	adds	r5, r3, r2
 8002da4:	786d      	ldrb	r5, [r5, #1]
 8002da6:	f813 c002 	ldrb.w	ip, [r3, r2]
 8002daa:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002dae:	1d02      	adds	r2, r0, #4
        const uint32_t index = offset - aviBufferStartOffset;
 8002db0:	1a52      	subs	r2, r2, r1
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002db2:	1899      	adds	r1, r3, r2
 8002db4:	f891 9001 	ldrb.w	r9, [r1, #1]
 8002db8:	788d      	ldrb	r5, [r1, #2]
 8002dba:	042d      	lsls	r5, r5, #16
 8002dbc:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8002dc0:	5c9b      	ldrb	r3, [r3, r2]
 8002dc2:	431d      	orrs	r5, r3
 8002dc4:	78cb      	ldrb	r3, [r1, #3]
 8002dc6:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002dca:	f100 0108 	add.w	r1, r0, #8
 8002dce:	186a      	adds	r2, r5, r1
 8002dd0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d250      	bcs.n	8002e78 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x110>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002dd6:	f243 0230 	movw	r2, #12336	@ 0x3030
 8002dda:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002dde:	4596      	cmp	lr, r2
 8002de0:	bf08      	it	eq
 8002de2:	459c      	cmpeq	ip, r3
 8002de4:	d100      	bne.n	8002de8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x80>
 8002de6:	bb65      	cbnz	r5, 8002e42 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
        currentMovieOffset += chunkSize;
 8002de8:	4428      	add	r0, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002dea:	b905      	cbnz	r5, 8002dee <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x86>
            currentMovieOffset += 8;
 8002dec:	3008      	adds	r0, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002dee:	3001      	adds	r0, #1
 8002df0:	f020 0001 	bic.w	r0, r0, #1
 8002df4:	61a0      	str	r0, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002df6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002df8:	4298      	cmp	r0, r3
 8002dfa:	d038      	beq.n	8002e6e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x106>
        isCurrentFrameLast = false;
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	e03f      	b.n	8002e80 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x118>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002e00:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>)
 8002e02:	4a23      	ldr	r2, [pc, #140]	@ (8002e90 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x128>)
 8002e04:	21b0      	movs	r1, #176	@ 0xb0
 8002e06:	4823      	ldr	r0, [pc, #140]	@ (8002e94 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x12c>)
 8002e08:	f026 fbe2 	bl	80295d0 <__assert_func>
        volatile const uint8_t* const d = movieData + offset;
 8002e0c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002e0e:	181a      	adds	r2, r3, r0
        val |= d[0];
 8002e10:	f813 e000 	ldrb.w	lr, [r3, r0]
        val |= d[1] << 8;
 8002e14:	7852      	ldrb	r2, [r2, #1]
 8002e16:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002e1a:	1c82      	adds	r2, r0, #2
        volatile const uint8_t* const d = movieData + offset;
 8002e1c:	1899      	adds	r1, r3, r2
        val |= d[0];
 8002e1e:	f813 c002 	ldrb.w	ip, [r3, r2]
        val |= d[1] << 8;
 8002e22:	784a      	ldrb	r2, [r1, #1]
 8002e24:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002e28:	1d01      	adds	r1, r0, #4
        volatile const uint8_t* const d = movieData + offset;
 8002e2a:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002e2c:	5c5d      	ldrb	r5, [r3, r1]
        val |= d[1] << 8;
 8002e2e:	7851      	ldrb	r1, [r2, #1]
        val |= d[2] << 16;
 8002e30:	7893      	ldrb	r3, [r2, #2]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e38:	431d      	orrs	r5, r3
        val |= d[3] << 24;
 8002e3a:	78d3      	ldrb	r3, [r2, #3]
 8002e3c:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
        return val;
 8002e40:	e7c3      	b.n	8002dca <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x62>
            currentMovieOffset += 8;
 8002e42:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002e44:	462a      	mov	r2, r5
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7ff faf8 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002e4c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002e4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002e50:	9302      	str	r3, [sp, #8]
 8002e52:	f8cd 8004 	str.w	r8, [sp, #4]
 8002e56:	9700      	str	r7, [sp, #0]
 8002e58:	4633      	mov	r3, r6
 8002e5a:	462a      	mov	r2, r5
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff ff33 	bl	8002cc8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002e62:	6963      	ldr	r3, [r4, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002e68:	69a0      	ldr	r0, [r4, #24]
 8002e6a:	4428      	add	r0, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002e6c:	e7bf      	b.n	8002dee <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x86>
            frameNumber = 1;
 8002e6e:	2001      	movs	r0, #1
 8002e70:	6160      	str	r0, [r4, #20]
            currentMovieOffset = firstFrameOffset; /* start over */
 8002e72:	6a23      	ldr	r3, [r4, #32]
 8002e74:	61a3      	str	r3, [r4, #24]
            isCurrentFrameLast = true;
 8002e76:	e003      	b.n	8002e80 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x118>
        frameNumber = 1;
 8002e78:	2001      	movs	r0, #1
 8002e7a:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002e7c:	6a23      	ldr	r3, [r4, #32]
 8002e7e:	61a3      	str	r3, [r4, #24]
}
 8002e80:	f080 0001 	eor.w	r0, r0, #1
 8002e84:	b005      	add	sp, #20
 8002e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e8a:	bf00      	nop
 8002e8c:	0802abec 	.word	0x0802abec
 8002e90:	0802ad2c 	.word	0x0802ad2c
 8002e94:	0802ab04 	.word	0x0802ab04

08002e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	6981      	ldr	r1, [r0, #24]
 8002ea2:	f7ff facb 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002ea6:	69a9      	ldr	r1, [r5, #24]
 8002ea8:	1d0b      	adds	r3, r1, #4
    if (reader != 0)
 8002eaa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8002eac:	b32a      	cbz	r2, 8002efa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x62>
        const uint32_t index = offset - aviBufferStartOffset;
 8002eae:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002eb0:	1a9b      	subs	r3, r3, r2
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002eb2:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8002eb4:	18c2      	adds	r2, r0, r3
 8002eb6:	f892 c001 	ldrb.w	ip, [r2, #1]
 8002eba:	7894      	ldrb	r4, [r2, #2]
 8002ebc:	0424      	lsls	r4, r4, #16
 8002ebe:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
 8002ec2:	5cc3      	ldrb	r3, [r0, r3]
 8002ec4:	431c      	orrs	r4, r3
 8002ec6:	78d3      	ldrb	r3, [r2, #3]
 8002ec8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002ecc:	4622      	mov	r2, r4
 8002ece:	3108      	adds	r1, #8
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	f7ff fab3 	bl	800243c <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002ed6:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002ed8:	b16e      	cbz	r6, 8002ef6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x5e>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002eda:	4633      	mov	r3, r6
 8002edc:	4622      	mov	r2, r4
 8002ede:	480d      	ldr	r0, [pc, #52]	@ (8002f14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8002ee0:	f7ff fdaa 	bl	8002a38 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ee4:	4d0b      	ldr	r5, [pc, #44]	@ (8002f14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8002ee6:	4c0c      	ldr	r4, [pc, #48]	@ (8002f18 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f7ff fea5 	bl	8002c38 <JPEG_OutputHandler>
 8002eee:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f8      	beq.n	8002ee8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>
}
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002efa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002efc:	18c2      	adds	r2, r0, r3
        val |= d[0];
 8002efe:	5cc4      	ldrb	r4, [r0, r3]
        val |= d[1] << 8;
 8002f00:	7850      	ldrb	r0, [r2, #1]
        val |= d[2] << 16;
 8002f02:	7893      	ldrb	r3, [r2, #2]
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f0a:	431c      	orrs	r4, r3
        val |= d[3] << 24;
 8002f0c:	78d3      	ldrb	r3, [r2, #3]
 8002f0e:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
        return val;
 8002f12:	e7db      	b.n	8002ecc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x34>
 8002f14:	240005a4 	.word	0x240005a4
 8002f18:	2400ab64 	.word	0x2400ab64

08002f1c <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 8002f1c:	b510      	push	{r4, lr}
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002f1e:	68c3      	ldr	r3, [r0, #12]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	491c      	ldr	r1, [pc, #112]	@ (8002f94 <DMA2D_CopyBuffer+0x78>)
 8002f24:	680c      	ldr	r4, [r1, #0]
 8002f26:	fbb3 fef4 	udiv	lr, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002f2a:	684a      	ldr	r2, [r1, #4]
 8002f2c:	fb02 f20e 	mul.w	r2, r2, lr
 8002f30:	ea4f 1c02 	mov.w	ip, r2, lsl #4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002f34:	fb04 331e 	mls	r3, r4, lr, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002f38:	690a      	ldr	r2, [r1, #16]
 8002f3a:	fb03 f202 	mul.w	r2, r3, r2

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f3e:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <DMA2D_CopyBuffer+0x7c>)
 8002f40:	2401      	movs	r4, #1
 8002f42:	635c      	str	r4, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002f44:	68cb      	ldr	r3, [r1, #12]
 8002f46:	4915      	ldr	r1, [pc, #84]	@ (8002f9c <DMA2D_CopyBuffer+0x80>)
 8002f48:	6809      	ldr	r1, [r1, #0]
 8002f4a:	1ac9      	subs	r1, r1, r3
 8002f4c:	68c4      	ldr	r4, [r0, #12]
 8002f4e:	428c      	cmp	r4, r1
 8002f50:	d31a      	bcc.n	8002f88 <DMA2D_CopyBuffer+0x6c>
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002f52:	4910      	ldr	r1, [pc, #64]	@ (8002f94 <DMA2D_CopyBuffer+0x78>)
 8002f54:	6889      	ldr	r1, [r1, #8]
 8002f56:	f1c1 0110 	rsb	r1, r1, #16
 8002f5a:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
 8002f5e:	4c0e      	ldr	r4, [pc, #56]	@ (8002f98 <DMA2D_CopyBuffer+0x7c>)
 8002f60:	6461      	str	r1, [r4, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002f62:	490f      	ldr	r1, [pc, #60]	@ (8002fa0 <DMA2D_CopyBuffer+0x84>)
 8002f64:	6809      	ldr	r1, [r1, #0]
 8002f66:	4411      	add	r1, r2
 8002f68:	4461      	add	r1, ip
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f98 <DMA2D_CopyBuffer+0x7c>)
 8002f6c:	63d1      	str	r1, [r2, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002f6e:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002f76:	2300      	movs	r3, #0
 8002f78:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <DMA2D_CopyBuffer+0x88>)
 8002f7c:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002f7e:	6843      	ldr	r3, [r0, #4]
 8002f80:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002f82:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <DMA2D_CopyBuffer+0x8c>)
 8002f84:	6013      	str	r3, [r2, #0]
}
 8002f86:	bd10      	pop	{r4, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002f88:	0519      	lsls	r1, r3, #20
 8002f8a:	f041 0110 	orr.w	r1, r1, #16
 8002f8e:	4c02      	ldr	r4, [pc, #8]	@ (8002f98 <DMA2D_CopyBuffer+0x7c>)
 8002f90:	6461      	str	r1, [r4, #68]	@ 0x44
 8002f92:	e7e6      	b.n	8002f62 <DMA2D_CopyBuffer+0x46>
 8002f94:	24001534 	.word	0x24001534
 8002f98:	52001000 	.word	0x52001000
 8002f9c:	2400ab60 	.word	0x2400ab60
 8002fa0:	2400ab7c 	.word	0x2400ab7c
 8002fa4:	ff09000b 	.word	0xff09000b
 8002fa8:	00012301 	.word	0x00012301

08002fac <DMA2D_ExternalJobCompleted>:
 * @brief  External DMA2D job complete callback
 * @param job: External job reference
 * @retval None
 */
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
 8002fac:	b508      	push	{r3, lr}
    job.State = JPEG_BUFFER_EMPTY;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	7003      	strb	r3, [r0, #0]
    job.DataBufferSize = 0;
 8002fb2:	6083      	str	r3, [r0, #8]

    JPEG_OUT_Read_BufferIndex++;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <DMA2D_ExternalJobCompleted+0x3c>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	3201      	adds	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d902      	bls.n	8002fc8 <DMA2D_ExternalJobCompleted+0x1c>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002fc2:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <DMA2D_ExternalJobCompleted+0x3c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002fc8:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <DMA2D_ExternalJobCompleted+0x40>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a08      	ldr	r2, [pc, #32]	@ (8002ff0 <DMA2D_ExternalJobCompleted+0x44>)
 8002fce:	68d2      	ldr	r2, [r2, #12]
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	68c2      	ldr	r2, [r0, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <DMA2D_ExternalJobCompleted+0x32>
    {
        DMA2D_CopyBufferEnd = 1;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <DMA2D_ExternalJobCompleted+0x48>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <DMA2D_ExternalJobCompleted+0x4c>)
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	f00e ff1a 	bl	8011e1a <osSemaphoreRelease>
}
 8002fe6:	bd08      	pop	{r3, pc}
 8002fe8:	2400154c 	.word	0x2400154c
 8002fec:	2400ab60 	.word	0x2400ab60
 8002ff0:	24001534 	.word	0x24001534
 8002ff4:	24001548 	.word	0x24001548
 8002ff8:	24001550 	.word	0x24001550

08002ffc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002ffc:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002ffe:	2200      	movs	r2, #0
 8003000:	2101      	movs	r1, #1
 8003002:	4608      	mov	r0, r1
 8003004:	f00e fe82 	bl	8011d0c <osSemaphoreNew>
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 800300a:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800300c:	b140      	cbz	r0, 8003020 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800300e:	2200      	movs	r2, #0
 8003010:	2104      	movs	r1, #4
 8003012:	2001      	movs	r0, #1
 8003014:	f00e ff2f 	bl	8011e76 <osMessageQueueNew>
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800301a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800301c:	b130      	cbz	r0, 800302c <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800301e:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8003020:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8003022:	4a08      	ldr	r2, [pc, #32]	@ (8003044 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8003024:	2128      	movs	r1, #40	@ 0x28
 8003026:	4808      	ldr	r0, [pc, #32]	@ (8003048 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8003028:	f026 fad2 	bl	80295d0 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800302c:	4b07      	ldr	r3, [pc, #28]	@ (800304c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800302e:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8003030:	212c      	movs	r1, #44	@ 0x2c
 8003032:	4805      	ldr	r0, [pc, #20]	@ (8003048 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8003034:	f026 facc 	bl	80295d0 <__assert_func>
 8003038:	2400ab84 	.word	0x2400ab84
 800303c:	2400ab80 	.word	0x2400ab80
 8003040:	0802adcc 	.word	0x0802adcc
 8003044:	0802ae18 	.word	0x0802ae18
 8003048:	0802ae48 	.word	0x0802ae48
 800304c:	0802aed0 	.word	0x0802aed0

08003050 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8003050:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8003052:	f04f 31ff 	mov.w	r1, #4294967295
 8003056:	4b02      	ldr	r3, [pc, #8]	@ (8003060 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	f00e feaa 	bl	8011db2 <osSemaphoreAcquire>
}
 800305e:	bd08      	pop	{r3, pc}
 8003060:	2400ab84 	.word	0x2400ab84

08003064 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8003064:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8003066:	4b02      	ldr	r3, [pc, #8]	@ (8003070 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	f00e fed6 	bl	8011e1a <osSemaphoreRelease>
}
 800306e:	bd08      	pop	{r3, pc}
 8003070:	2400ab84 	.word	0x2400ab84

08003074 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8003074:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8003076:	2100      	movs	r1, #0
 8003078:	4b02      	ldr	r3, [pc, #8]	@ (8003084 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	f00e fe99 	bl	8011db2 <osSemaphoreAcquire>
}
 8003080:	bd08      	pop	{r3, pc}
 8003082:	bf00      	nop
 8003084:	2400ab84 	.word	0x2400ab84

08003088 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8003088:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 800308a:	4b02      	ldr	r3, [pc, #8]	@ (8003094 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	f00e fec4 	bl	8011e1a <osSemaphoreRelease>
}
 8003092:	bd08      	pop	{r3, pc}
 8003094:	2400ab84 	.word	0x2400ab84

08003098 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8003098:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800309a:	2300      	movs	r3, #0
 800309c:	461a      	mov	r2, r3
 800309e:	4903      	ldr	r1, [pc, #12]	@ (80030ac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80030a0:	4803      	ldr	r0, [pc, #12]	@ (80030b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80030a2:	6800      	ldr	r0, [r0, #0]
 80030a4:	f00e ff2b 	bl	8011efe <osMessageQueuePut>
}
 80030a8:	bd08      	pop	{r3, pc}
 80030aa:	bf00      	nop
 80030ac:	24000030 	.word	0x24000030
 80030b0:	2400ab80 	.word	0x2400ab80

080030b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80030b4:	b510      	push	{r4, lr}
 80030b6:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80030b8:	4c07      	ldr	r4, [pc, #28]	@ (80030d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80030ba:	2300      	movs	r3, #0
 80030bc:	461a      	mov	r2, r3
 80030be:	a901      	add	r1, sp, #4
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	f00e ff5b 	bl	8011f7c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	2200      	movs	r2, #0
 80030cc:	a901      	add	r1, sp, #4
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	f00e ff54 	bl	8011f7c <osMessageQueueGet>
}
 80030d4:	b002      	add	sp, #8
 80030d6:	bd10      	pop	{r4, pc}
 80030d8:	2400ab80 	.word	0x2400ab80

080030dc <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void flush()
 80030dc:	b508      	push	{r3, lr}
        waitForFrameBufferSemaphore();
 80030de:	6803      	ldr	r3, [r0, #0]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4798      	blx	r3
    }
 80030e4:	bd08      	pop	{r3, pc}

080030e6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 80030e6:	2001      	movs	r0, #1
 80030e8:	4770      	bx	lr
	...

080030ec <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80030ec:	b508      	push	{r3, lr}
        dma.signalDMAInterrupt();
 80030ee:	4b03      	ldr	r3, [pc, #12]	@ (80030fc <DMA2D_XferCpltCallback+0x10>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6858      	ldr	r0, [r3, #4]
 80030f4:	6803      	ldr	r3, [r0, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 80030fa:	bd08      	pop	{r3, pc}
 80030fc:	240621b8 	.word	0x240621b8

08003100 <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8003100:	e7fe      	b.n	8003100 <DMA2D_XferErrorCallback>
	...

08003104 <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <_ZN8STM32DMAD1Ev+0x18>)
 8003106:	6003      	str	r3, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <_ZN8STM32DMAD1Ev+0x1c>)
 800310a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800310e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003112:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003116:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 800311a:	4770      	bx	lr
 800311c:	0802b0b0 	.word	0x0802b0b0
 8003120:	e000e100 	.word	0xe000e100

08003124 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8003124:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <_ZN8STM32DMA10initializeEv+0x44>)
 8003128:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800312c:	f042 0210 	orr.w	r2, r2, #16
 8003130:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8003134:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003138:	f002 0210 	and.w	r2, r2, #16
 800313c:	9201      	str	r2, [sp, #4]
 800313e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003140:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003142:	f042 0210 	orr.w	r2, r2, #16
 8003146:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003148:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800314a:	f022 0210 	bic.w	r2, r2, #16
 800314e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <_ZN8STM32DMA10initializeEv+0x48>)
 8003152:	4a07      	ldr	r2, [pc, #28]	@ (8003170 <_ZN8STM32DMA10initializeEv+0x4c>)
 8003154:	621a      	str	r2, [r3, #32]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8003156:	4a07      	ldr	r2, [pc, #28]	@ (8003174 <_ZN8STM32DMA10initializeEv+0x50>)
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	4b07      	ldr	r3, [pc, #28]	@ (8003178 <_ZN8STM32DMA10initializeEv+0x54>)
 800315c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003160:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8003162:	b002      	add	sp, #8
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	58024400 	.word	0x58024400
 800316c:	240006b8 	.word	0x240006b8
 8003170:	080030ed 	.word	0x080030ed
 8003174:	08003101 	.word	0x08003101
 8003178:	e000e100 	.word	0xe000e100

0800317c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 800317c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8003180:	4770      	bx	lr

08003182 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8003182:	b510      	push	{r4, lr}
 8003184:	4604      	mov	r4, r0
}
 8003186:	f7ff ffbd 	bl	8003104 <_ZN8STM32DMAD1Ev>
 800318a:	f640 51a8 	movw	r1, #3496	@ 0xda8
 800318e:	4620      	mov	r0, r4
 8003190:	f025 fea6 	bl	8028ee0 <_ZdlPvj>
 8003194:	4620      	mov	r0, r4
 8003196:	bd10      	pop	{r4, pc}

08003198 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003198:	b510      	push	{r4, lr}
 800319a:	4604      	mov	r4, r0
    {
        if (!started_by_external_job)
 800319c:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
 80031a0:	b9fb      	cbnz	r3, 80031e2 <_ZN8STM32DMA18signalDMAInterruptEv+0x4a>
        {
            executeCompleted();
 80031a2:	6803      	ldr	r3, [r0, #0]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	4798      	blx	r3

            /* Start new external job if next buffer is full */
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 80031a8:	4b1c      	ldr	r3, [pc, #112]	@ (800321c <_ZN8STM32DMA18signalDMAInterruptEv+0x84>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003220 <_ZN8STM32DMA18signalDMAInterruptEv+0x88>)
 80031b0:	5cd3      	ldrb	r3, [r2, r3]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d000      	beq.n	80031b8 <_ZN8STM32DMA18signalDMAInterruptEv+0x20>
            {
                started_by_external_job = false;
                execute();
            }
        }
    }
 80031b6:	bd10      	pop	{r4, pc}
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 80031b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <_ZN8STM32DMA18signalDMAInterruptEv+0x8c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1fa      	bne.n	80031b6 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
 80031c0:	7a23      	ldrb	r3, [r4, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f7      	bne.n	80031b6 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
 80031c6:	7aa3      	ldrb	r3, [r4, #10]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f4      	bne.n	80031b6 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
                started_by_external_job = true;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
 80031d2:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <_ZN8STM32DMA18signalDMAInterruptEv+0x84>)
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80031dc:	f7ff fe9e 	bl	8002f1c <DMA2D_CopyBuffer>
    }
 80031e0:	e7e9      	b.n	80031b6 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
        if (isRunning)
 80031e2:	7a03      	ldrb	r3, [r0, #8]
 80031e4:	b983      	cbnz	r3, 8003208 <_ZN8STM32DMA18signalDMAInterruptEv+0x70>
            if (!queue.isEmpty() && isAllowed)
 80031e6:	6860      	ldr	r0, [r4, #4]
 80031e8:	6803      	ldr	r3, [r0, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4798      	blx	r3
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d1e1      	bne.n	80031b6 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
 80031f2:	7a63      	ldrb	r3, [r4, #9]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0de      	beq.n	80031b6 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
                started_by_external_job = false;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
                execute();
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	4620      	mov	r0, r4
 8003204:	4798      	blx	r3
    }
 8003206:	e7d6      	b.n	80031b6 <_ZN8STM32DMA18signalDMAInterruptEv+0x1e>
            isRunning = false;
 8003208:	2300      	movs	r3, #0
 800320a:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <_ZN8STM32DMA18signalDMAInterruptEv+0x84>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <_ZN8STM32DMA18signalDMAInterruptEv+0x88>)
 8003212:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8003216:	f7ff fec9 	bl	8002fac <DMA2D_ExternalJobCompleted>
 800321a:	e7e4      	b.n	80031e6 <_ZN8STM32DMA18signalDMAInterruptEv+0x4e>
 800321c:	2400154c 	.word	0x2400154c
 8003220:	24000010 	.word	0x24000010
 8003224:	24001548 	.word	0x24001548

08003228 <_ZN8STM32DMA5startEv>:
    virtual void start()
 8003228:	b510      	push	{r4, lr}
 800322a:	4604      	mov	r4, r0
        MUTEX_LOCK(mutexIsRunning);
 800322c:	f04f 31ff 	mov.w	r1, #4294967295
 8003230:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8003234:	f00e fd16 	bl	8011c64 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8003238:	6860      	ldr	r0, [r4, #4]
 800323a:	6803      	ldr	r3, [r0, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4798      	blx	r3
 8003240:	b950      	cbnz	r0, 8003258 <_ZN8STM32DMA5startEv+0x30>
 8003242:	7a63      	ldrb	r3, [r4, #9]
 8003244:	b143      	cbz	r3, 8003258 <_ZN8STM32DMA5startEv+0x30>
 8003246:	7a23      	ldrb	r3, [r4, #8]
 8003248:	bb1b      	cbnz	r3, 8003292 <_ZN8STM32DMA5startEv+0x6a>
            started_by_external_job = false;
 800324a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	4620      	mov	r0, r4
 8003254:	4798      	blx	r3
 8003256:	e006      	b.n	8003266 <_ZN8STM32DMA5startEv+0x3e>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8003258:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <_ZN8STM32DMA5startEv+0x70>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	4a0f      	ldr	r2, [pc, #60]	@ (800329c <_ZN8STM32DMA5startEv+0x74>)
 8003260:	5cd3      	ldrb	r3, [r2, r3]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d004      	beq.n	8003270 <_ZN8STM32DMA5startEv+0x48>
        MUTEX_UNLOCK(mutexIsRunning);
 8003266:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
 800326a:	f00e fd2a 	bl	8011cc2 <osMutexRelease>
    }
 800326e:	bd10      	pop	{r4, pc}
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8003270:	7a23      	ldrb	r3, [r4, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f7      	bne.n	8003266 <_ZN8STM32DMA5startEv+0x3e>
 8003276:	7aa3      	ldrb	r3, [r4, #10]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f4      	bne.n	8003266 <_ZN8STM32DMA5startEv+0x3e>
            started_by_external_job = true;
 800327c:	2301      	movs	r3, #1
 800327e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8003282:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003284:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <_ZN8STM32DMA5startEv+0x70>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800328c:	f7ff fe46 	bl	8002f1c <DMA2D_CopyBuffer>
    }
 8003290:	e7e9      	b.n	8003266 <_ZN8STM32DMA5startEv+0x3e>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8003292:	4b01      	ldr	r3, [pc, #4]	@ (8003298 <_ZN8STM32DMA5startEv+0x70>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e7e6      	b.n	8003266 <_ZN8STM32DMA5startEv+0x3e>
 8003298:	2400154c 	.word	0x2400154c
 800329c:	24000010 	.word	0x24000010

080032a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80032a0:	b508      	push	{r3, lr}
    switch (format)
 80032a2:	7f8b      	ldrb	r3, [r1, #30]
 80032a4:	2b0a      	cmp	r3, #10
 80032a6:	d809      	bhi.n	80032bc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 80032a8:	e8df f003 	tbb	[pc, r3]
 80032ac:	080e1006 	.word	0x080e1006
 80032b0:	10080808 	.word	0x10080808
 80032b4:	1010      	.short	0x1010
 80032b6:	10          	.byte	0x10
 80032b7:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80032b8:	2002      	movs	r0, #2
 80032ba:	e008      	b.n	80032ce <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 80032bc:	4b1f      	ldr	r3, [pc, #124]	@ (800333c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 80032be:	4a20      	ldr	r2, [pc, #128]	@ (8003340 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 80032c0:	2191      	movs	r1, #145	@ 0x91
 80032c2:	4820      	ldr	r0, [pc, #128]	@ (8003344 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 80032c4:	f026 f984 	bl	80295d0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80032c8:	2000      	movs	r0, #0
 80032ca:	e000      	b.n	80032ce <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
    switch (format)
 80032cc:	2001      	movs	r0, #1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 80032d0:	6358      	str	r0, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80032d2:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 80032d6:	8aca      	ldrh	r2, [r1, #22]
 80032d8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80032de:	690a      	ldr	r2, [r1, #16]
 80032e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80032e2:	8b4a      	ldrh	r2, [r1, #26]
 80032e4:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 80032e8:	eba2 020c 	sub.w	r2, r2, ip
 80032ec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80032ee:	680b      	ldr	r3, [r1, #0]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d008      	beq.n	8003306 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 80032f6:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
        return color;
 80032fc:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80032fe:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003300:	4a12      	ldr	r2, [pc, #72]	@ (800334c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8003302:	601a      	str	r2, [r3, #0]
    }
}
 8003304:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003306:	8b4a      	ldrh	r2, [r1, #26]
 8003308:	8a8b      	ldrh	r3, [r1, #20]
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 800330e:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003310:	8b4a      	ldrh	r2, [r1, #26]
 8003312:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8003316:	eba2 020c 	sub.w	r2, r2, ip
 800331a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800331c:	6258      	str	r0, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800331e:	7f08      	ldrb	r0, [r1, #28]
 8003320:	4a0b      	ldr	r2, [pc, #44]	@ (8003350 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8003322:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003326:	61da      	str	r2, [r3, #28]
 8003328:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800332a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800332c:	690a      	ldr	r2, [r1, #16]
 800332e:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003330:	690a      	ldr	r2, [r1, #16]
 8003332:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8003334:	4a07      	ldr	r2, [pc, #28]	@ (8003354 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e7e4      	b.n	8003304 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 800333a:	bf00      	nop
 800333c:	0802af14 	.word	0x0802af14
 8003340:	0802af30 	.word	0x0802af30
 8003344:	0802af7c 	.word	0x0802af7c
 8003348:	52001000 	.word	0x52001000
 800334c:	00032301 	.word	0x00032301
 8003350:	00010009 	.word	0x00010009
 8003354:	00022301 	.word	0x00022301

08003358 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003358:	b538      	push	{r3, r4, r5, lr}
    switch (format)
 800335a:	7f4b      	ldrb	r3, [r1, #29]
 800335c:	2b0b      	cmp	r3, #11
 800335e:	d81a      	bhi.n	8003396 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3e>
 8003360:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003364:	01230126 	.word	0x01230126
 8003368:	0019001f 	.word	0x0019001f
 800336c:	00190019 	.word	0x00190019
 8003370:	000c0019 	.word	0x000c0019
 8003374:	000c000c 	.word	0x000c000c
 8003378:	000c000c 	.word	0x000c000c
        dma2dColorMode = DMA2D_INPUT_L8;
 800337c:	f04f 0c05 	mov.w	ip, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003380:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8003382:	2b0b      	cmp	r3, #11
 8003384:	d876      	bhi.n	8003474 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8003386:	e8df f003 	tbb	[pc, r3]
 800338a:	1953      	.short	0x1953
 800338c:	75757587 	.word	0x75757587
 8003390:	58585875 	.word	0x58585875
 8003394:	5858      	.short	0x5858
        assert(0 && "Unsupported Format!");
 8003396:	4b88      	ldr	r3, [pc, #544]	@ (80035b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>)
 8003398:	4a88      	ldr	r2, [pc, #544]	@ (80035bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>)
 800339a:	2170      	movs	r1, #112	@ 0x70
 800339c:	4888      	ldr	r0, [pc, #544]	@ (80035c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>)
 800339e:	f026 f917 	bl	80295d0 <__assert_func>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80033a2:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 80033a4:	2b0b      	cmp	r3, #11
 80033a6:	d865      	bhi.n	8003474 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 80033a8:	e8df f003 	tbb	[pc, r3]
 80033ac:	646a0640 	.word	0x646a0640
 80033b0:	45646464 	.word	0x45646464
 80033b4:	45454545 	.word	0x45454545
 80033b8:	f04f 0c00 	mov.w	ip, #0
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80033bc:	2001      	movs	r0, #1
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80033be:	2401      	movs	r4, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80033c0:	8b4a      	ldrh	r2, [r1, #26]
 80033c2:	8a8b      	ldrh	r3, [r1, #20]
 80033c4:	1ad2      	subs	r2, r2, r3
 80033c6:	4b7f      	ldr	r3, [pc, #508]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 80033c8:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80033ca:	8b4a      	ldrh	r2, [r1, #26]
 80033cc:	f8b1 e014 	ldrh.w	lr, [r1, #20]
 80033d0:	eba2 020e 	sub.w	r2, r2, lr
 80033d4:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80033d6:	8b0a      	ldrh	r2, [r1, #24]
 80033d8:	f8b1 e014 	ldrh.w	lr, [r1, #20]
 80033dc:	eba2 020e 	sub.w	r2, r2, lr
 80033e0:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80033e2:	635c      	str	r4, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80033e4:	f8b1 e014 	ldrh.w	lr, [r1, #20]
 80033e8:	8aca      	ldrh	r2, [r1, #22]
 80033ea:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80033f0:	690a      	ldr	r2, [r1, #16]
 80033f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80033f4:	684a      	ldr	r2, [r1, #4]
 80033f6:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80033f8:	680b      	ldr	r3, [r1, #0]
 80033fa:	2b80      	cmp	r3, #128	@ 0x80
 80033fc:	d071      	beq.n	80034e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
 80033fe:	d84e      	bhi.n	800349e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
 8003400:	2b20      	cmp	r3, #32
 8003402:	f000 80b4 	beq.w	800356e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x216>
 8003406:	2b40      	cmp	r3, #64	@ 0x40
 8003408:	f000 80b1 	beq.w	800356e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x216>
 800340c:	2b04      	cmp	r3, #4
 800340e:	f040 80bb 	bne.w	8003588 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003412:	7f0b      	ldrb	r3, [r1, #28]
 8003414:	ea4c 6303 	orr.w	r3, ip, r3, lsl #24
 8003418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800341c:	4a69      	ldr	r2, [pc, #420]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 800341e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003420:	6250      	str	r0, [r2, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003422:	690b      	ldr	r3, [r1, #16]
 8003424:	6153      	str	r3, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003426:	4b68      	ldr	r3, [pc, #416]	@ (80035c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 8003428:	6013      	str	r3, [r2, #0]
        break;
 800342a:	e059      	b.n	80034e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
    switch (format)
 800342c:	f04f 0c00 	mov.w	ip, #0
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003430:	2002      	movs	r0, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003432:	2402      	movs	r4, #2
        break;
 8003434:	e7c4      	b.n	80033c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x68>
    switch (format)
 8003436:	f04f 0c00 	mov.w	ip, #0
        dma2dColorMode = DMA2D_INPUT_L8;
 800343a:	2005      	movs	r0, #5
    switch (format)
 800343c:	2b0a      	cmp	r3, #10
 800343e:	d823      	bhi.n	8003488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
 8003440:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	08003433 	.word	0x08003433
 800344c:	080033bf 	.word	0x080033bf
 8003450:	08003495 	.word	0x08003495
 8003454:	08003489 	.word	0x08003489
 8003458:	08003489 	.word	0x08003489
 800345c:	08003489 	.word	0x08003489
 8003460:	08003489 	.word	0x08003489
 8003464:	080033bf 	.word	0x080033bf
 8003468:	080033bf 	.word	0x080033bf
 800346c:	080033bf 	.word	0x080033bf
 8003470:	080033bf 	.word	0x080033bf
        assert(0 && "Unsupported Format!");
 8003474:	4b50      	ldr	r3, [pc, #320]	@ (80035b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>)
 8003476:	4a51      	ldr	r2, [pc, #324]	@ (80035bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>)
 8003478:	2170      	movs	r1, #112	@ 0x70
 800347a:	4851      	ldr	r0, [pc, #324]	@ (80035c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>)
 800347c:	f026 f8a8 	bl	80295d0 <__assert_func>
    switch (format)
 8003480:	f04f 0c00 	mov.w	ip, #0
 8003484:	4660      	mov	r0, ip
 8003486:	e7d9      	b.n	800343c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe4>
        assert(0 && "Unsupported Format!");
 8003488:	4b4b      	ldr	r3, [pc, #300]	@ (80035b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>)
 800348a:	4a50      	ldr	r2, [pc, #320]	@ (80035cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>)
 800348c:	2191      	movs	r1, #145	@ 0x91
 800348e:	484c      	ldr	r0, [pc, #304]	@ (80035c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>)
 8003490:	f026 f89e 	bl	80295d0 <__assert_func>
    switch (format)
 8003494:	2400      	movs	r4, #0
 8003496:	e793      	b.n	80033c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x68>
    switch (format)
 8003498:	2000      	movs	r0, #0
 800349a:	4604      	mov	r4, r0
 800349c:	e790      	b.n	80033c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x68>
    switch (blitOp.operation)
 800349e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a2:	d010      	beq.n	80034c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16e>
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a8:	d16e      	bne.n	8003588 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80034aa:	7f0b      	ldrb	r3, [r1, #28]
 80034ac:	4a48      	ldr	r2, [pc, #288]	@ (80035d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>)
 80034ae:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80034b2:	4b44      	ldr	r3, [pc, #272]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 80034b4:	61da      	str	r2, [r3, #28]
 80034b6:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80034b8:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80034ba:	6258      	str	r0, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80034bc:	690a      	ldr	r2, [r1, #16]
 80034be:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80034c0:	4a41      	ldr	r2, [pc, #260]	@ (80035c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 80034c2:	601a      	str	r2, [r3, #0]
        break;
 80034c4:	e00c      	b.n	80034e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80034c6:	7f0b      	ldrb	r3, [r1, #28]
 80034c8:	4a42      	ldr	r2, [pc, #264]	@ (80035d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80034ca:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80034ce:	4b3d      	ldr	r3, [pc, #244]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 80034d0:	61da      	str	r2, [r3, #28]
 80034d2:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80034d4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80034d6:	6258      	str	r0, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80034d8:	690a      	ldr	r2, [r1, #16]
 80034da:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80034dc:	4a3a      	ldr	r2, [pc, #232]	@ (80035c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 80034de:	601a      	str	r2, [r3, #0]
}
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80034e2:	688c      	ldr	r4, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80034e4:	7f0b      	ldrb	r3, [r1, #28]
 80034e6:	ea4c 6303 	orr.w	r3, ip, r3, lsl #24
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ee:	4a35      	ldr	r2, [pc, #212]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 80034f0:	61d3      	str	r3, [r2, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80034f2:	6250      	str	r0, [r2, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80034f4:	690b      	ldr	r3, [r1, #16]
 80034f6:	6153      	str	r3, [r2, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80034f8:	1d23      	adds	r3, r4, #4
 80034fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 80034fc:	7823      	ldrb	r3, [r4, #0]
 80034fe:	b18b      	cbz	r3, 8003524 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>
 8003500:	2b01      	cmp	r3, #1
 8003502:	d129      	bne.n	8003558 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x200>
                if (blitOp.alpha == 255)
 8003504:	7f09      	ldrb	r1, [r1, #28]
 8003506:	39ff      	subs	r1, #255	@ 0xff
 8003508:	bf18      	it	ne
 800350a:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800350c:	482d      	ldr	r0, [pc, #180]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 800350e:	69c5      	ldr	r5, [r0, #28]
 8003510:	8862      	ldrh	r2, [r4, #2]
 8003512:	3a01      	subs	r2, #1
 8003514:	4b30      	ldr	r3, [pc, #192]	@ (80035d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8003516:	402b      	ands	r3, r5
 8003518:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800351c:	f043 0310 	orr.w	r3, r3, #16
 8003520:	61c3      	str	r3, [r0, #28]
                break;
 8003522:	e009      	b.n	8003538 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003524:	4927      	ldr	r1, [pc, #156]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 8003526:	69c8      	ldr	r0, [r1, #28]
 8003528:	8862      	ldrh	r2, [r4, #2]
 800352a:	3a01      	subs	r2, #1
 800352c:	4b2a      	ldr	r3, [pc, #168]	@ (80035d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 800352e:	4003      	ands	r3, r0
 8003530:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003534:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8003536:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003538:	4a22      	ldr	r2, [pc, #136]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 800353a:	69d3      	ldr	r3, [r2, #28]
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003542:	69d3      	ldr	r3, [r2, #28]
 8003544:	f013 0f20 	tst.w	r3, #32
 8003548:	d1fb      	bne.n	8003542 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800354a:	4b1e      	ldr	r3, [pc, #120]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 800354c:	2210      	movs	r2, #16
 800354e:	609a      	str	r2, [r3, #8]
            if (blend)
 8003550:	b149      	cbz	r1, 8003566 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20e>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003552:	4a1d      	ldr	r2, [pc, #116]	@ (80035c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e7c3      	b.n	80034e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
                assert(0 && "Unsupported format");
 8003558:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 800355a:	4a21      	ldr	r2, [pc, #132]	@ (80035e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 800355c:	f240 110b 	movw	r1, #267	@ 0x10b
 8003560:	4817      	ldr	r0, [pc, #92]	@ (80035c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>)
 8003562:	f026 f835 	bl	80295d0 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003566:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 8003568:	4a1e      	ldr	r2, [pc, #120]	@ (80035e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e7b8      	b.n	80034e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800356e:	7f0b      	ldrb	r3, [r1, #28]
 8003570:	ea4c 6303 	orr.w	r3, ip, r3, lsl #24
 8003574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003578:	4a12      	ldr	r2, [pc, #72]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 800357a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800357c:	6250      	str	r0, [r2, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800357e:	690b      	ldr	r3, [r1, #16]
 8003580:	6153      	str	r3, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003582:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>)
 8003584:	6013      	str	r3, [r2, #0]
        break;
 8003586:	e7ab      	b.n	80034e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003588:	7f0b      	ldrb	r3, [r1, #28]
 800358a:	ea4c 6303 	orr.w	r3, ip, r3, lsl #24
 800358e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003592:	4a0c      	ldr	r2, [pc, #48]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 8003594:	61d3      	str	r3, [r2, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003596:	7f4a      	ldrb	r2, [r1, #29]
 8003598:	7f8b      	ldrb	r3, [r1, #30]
 800359a:	429a      	cmp	r2, r3
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800359c:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 800359e:	bf14      	ite	ne
 80035a0:	4a10      	ldrne	r2, [pc, #64]	@ (80035e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80035a2:	f242 3201 	movweq	r2, #8961	@ 0x2301
 80035a6:	601a      	str	r2, [r3, #0]
}
 80035a8:	e79a      	b.n	80034e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80035aa:	f04f 0c01 	mov.w	ip, #1
 80035ae:	e6e7      	b.n	8003380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28>
    switch (format)
 80035b0:	f04f 0c02 	mov.w	ip, #2
 80035b4:	e6e4      	b.n	8003380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28>
 80035b6:	bf00      	nop
 80035b8:	0802af14 	.word	0x0802af14
 80035bc:	0802b000 	.word	0x0802b000
 80035c0:	0802af7c 	.word	0x0802af7c
 80035c4:	52001000 	.word	0x52001000
 80035c8:	00022301 	.word	0x00022301
 80035cc:	0802af30 	.word	0x0802af30
 80035d0:	00020009 	.word	0x00020009
 80035d4:	0002000a 	.word	0x0002000a
 80035d8:	ffff00ef 	.word	0xffff00ef
 80035dc:	0802b04c 	.word	0x0802b04c
 80035e0:	0802b068 	.word	0x0802b068
 80035e4:	00012301 	.word	0x00012301

080035e8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4605      	mov	r5, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80035ec:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80035ee:	6068      	str	r0, [r5, #4]
 80035f0:	2300      	movs	r3, #0
 80035f2:	722b      	strb	r3, [r5, #8]
 80035f4:	726b      	strb	r3, [r5, #9]
 80035f6:	462c      	mov	r4, r5
 80035f8:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <_ZN8STM32DMAC1Ev+0x44>)
 80035fa:	f844 3b20 	str.w	r3, [r4], #32
 80035fe:	2260      	movs	r2, #96	@ 0x60
 8003600:	4621      	mov	r1, r4
 8003602:	f011 ff77 	bl	80154f4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003606:	4621      	mov	r1, r4
 8003608:	f505 625a 	add.w	r2, r5, #3488	@ 0xda0
        : color(0)
 800360c:	2300      	movs	r3, #0
 800360e:	60cb      	str	r3, [r1, #12]
 8003610:	3124      	adds	r1, #36	@ 0x24
 8003612:	4291      	cmp	r1, r2
 8003614:	d1fb      	bne.n	800360e <_ZN8STM32DMAC1Ev+0x26>
 8003616:	2000      	movs	r0, #0
 8003618:	f885 0da0 	strb.w	r0, [r5, #3488]	@ 0xda0
 800361c:	f8c5 0da4 	str.w	r0, [r5, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8003620:	f00e fadf 	bl	8011be2 <osMutexNew>
 8003624:	f8c5 0da4 	str.w	r0, [r5, #3492]	@ 0xda4
}
 8003628:	4628      	mov	r0, r5
 800362a:	bd38      	pop	{r3, r4, r5, pc}
 800362c:	0802b0b0 	.word	0x0802b0b0

08003630 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003630:	4a04      	ldr	r2, [pc, #16]	@ (8003644 <_ZN8touchgfx5paint8tearDownEv+0x14>)
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	f013 0f01 	tst.w	r3, #1
 8003638:	d1fb      	bne.n	8003632 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800363a:	4b02      	ldr	r3, [pc, #8]	@ (8003644 <_ZN8touchgfx5paint8tearDownEv+0x14>)
 800363c:	2223      	movs	r2, #35	@ 0x23
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	52001000 	.word	0x52001000

08003648 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003648:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <_ZN8touchgfx5paint9flushLineEPmi+0x38>)
 800364a:	695b      	ldr	r3, [r3, #20]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800364c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003650:	d001      	beq.n	8003656 <_ZN8touchgfx5paint9flushLineEPmi+0xe>
 8003652:	2900      	cmp	r1, #0
 8003654:	dc00      	bgt.n	8003658 <_ZN8touchgfx5paint9flushLineEPmi+0x10>
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8003656:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003658:	f000 021f 	and.w	r2, r0, #31
 800365c:	440a      	add	r2, r1
  __ASM volatile ("dsb 0xF":::"memory");
 800365e:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003662:	4603      	mov	r3, r0
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003664:	4906      	ldr	r1, [pc, #24]	@ (8003680 <_ZN8touchgfx5paint9flushLineEPmi+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8003666:	4410      	add	r0, r2
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003668:	f8c1 3268 	str.w	r3, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800366c:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 800366e:	1ac2      	subs	r2, r0, r3
 8003670:	2a00      	cmp	r2, #0
 8003672:	dcf9      	bgt.n	8003668 <_ZN8touchgfx5paint9flushLineEPmi+0x20>
 8003674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	e7eb      	b.n	8003656 <_ZN8touchgfx5paint9flushLineEPmi+0xe>
 800367e:	bf00      	nop
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8003684:	b430      	push	{r4, r5}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003686:	4d13      	ldr	r5, [pc, #76]	@ (80036d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
 8003688:	682c      	ldr	r4, [r5, #0]
 800368a:	f014 0f01 	tst.w	r4, #1
 800368e:	d1fb      	bne.n	8003688 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003690:	4c10      	ldr	r4, [pc, #64]	@ (80036d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
 8003692:	2523      	movs	r5, #35	@ 0x23
 8003694:	60a5      	str	r5, [r4, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003696:	2501      	movs	r5, #1
 8003698:	6365      	str	r5, [r4, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800369a:	0409      	lsls	r1, r1, #16
 800369c:	4329      	orrs	r1, r5
 800369e:	6461      	str	r1, [r4, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80036a0:	63e0      	str	r0, [r4, #60]	@ 0x3c

    if (alpha < 0xFF)
 80036a2:	2bff      	cmp	r3, #255	@ 0xff
 80036a4:	d00e      	beq.n	80036c4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x40>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80036a6:	4621      	mov	r1, r4
 80036a8:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80036aa:	4c0b      	ldr	r4, [pc, #44]	@ (80036d8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x54>)
 80036ac:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
 80036b0:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80036b2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80036b6:	620a      	str	r2, [r1, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 80036b8:	6148      	str	r0, [r1, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 80036ba:	60c8      	str	r0, [r1, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 80036bc:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x58>)
 80036be:	600b      	str	r3, [r1, #0]
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 80036c0:	bc30      	pop	{r4, r5}
 80036c2:	4770      	bx	lr
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
 80036c6:	2101      	movs	r1, #1
 80036c8:	61d9      	str	r1, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color);
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80036cc:	4a04      	ldr	r2, [pc, #16]	@ (80036e0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x5c>)
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	e7f6      	b.n	80036c0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
 80036d2:	bf00      	nop
 80036d4:	52001000 	.word	0x52001000
 80036d8:	00010009 	.word	0x00010009
 80036dc:	00020001 	.word	0x00020001
 80036e0:	00030001 	.word	0x00030001

080036e4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 80036e4:	b430      	push	{r4, r5}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80036e6:	4d10      	ldr	r5, [pc, #64]	@ (8003728 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 80036e8:	682c      	ldr	r4, [r5, #0]
 80036ea:	f014 0f01 	tst.w	r4, #1
 80036ee:	d1fb      	bne.n	80036e8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80036f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003728 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 80036f2:	2523      	movs	r5, #35	@ 0x23
 80036f4:	60a5      	str	r5, [r4, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80036f6:	2501      	movs	r5, #1
 80036f8:	6365      	str	r5, [r4, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80036fa:	0412      	lsls	r2, r2, #16
 80036fc:	432a      	orrs	r2, r5
 80036fe:	6462      	str	r2, [r4, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003700:	63e0      	str	r0, [r4, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003702:	60e1      	str	r1, [r4, #12]

    if (alpha < 0xFF)
 8003704:	2bff      	cmp	r3, #255	@ 0xff
 8003706:	d008      	beq.n	800371a <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x36>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003708:	4908      	ldr	r1, [pc, #32]	@ (800372c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x48>)
 800370a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800370e:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003710:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003712:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003714:	6021      	str	r1, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003716:	bc30      	pop	{r4, r5}
 8003718:	4770      	bx	lr
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800371a:	4b03      	ldr	r3, [pc, #12]	@ (8003728 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 800371c:	4a04      	ldr	r2, [pc, #16]	@ (8003730 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4c>)
 800371e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	e7f7      	b.n	8003716 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8003726:	bf00      	nop
 8003728:	52001000 	.word	0x52001000
 800372c:	00020001 	.word	0x00020001
 8003730:	ff020001 	.word	0xff020001

08003734 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003734:	b430      	push	{r4, r5}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003736:	4d0c      	ldr	r5, [pc, #48]	@ (8003768 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
 8003738:	682c      	ldr	r4, [r5, #0]
 800373a:	f014 0f01 	tst.w	r4, #1
 800373e:	d1fb      	bne.n	8003738 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003740:	4c09      	ldr	r4, [pc, #36]	@ (8003768 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
 8003742:	2523      	movs	r5, #35	@ 0x23
 8003744:	60a5      	str	r5, [r4, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003746:	2501      	movs	r5, #1
 8003748:	6365      	str	r5, [r4, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800374a:	0412      	lsls	r2, r2, #16
 800374c:	432a      	orrs	r2, r5
 800374e:	6462      	str	r2, [r4, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003750:	63e0      	str	r0, [r4, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003752:	60e1      	str	r1, [r4, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375a:	61e3      	str	r3, [r4, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800375c:	6265      	str	r5, [r4, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800375e:	6160      	str	r0, [r4, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003760:	4b02      	ldr	r3, [pc, #8]	@ (800376c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x38>)
 8003762:	6023      	str	r3, [r4, #0]
}
 8003764:	bc30      	pop	{r4, r5}
 8003766:	4770      	bx	lr
 8003768:	52001000 	.word	0x52001000
 800376c:	00020001 	.word	0x00020001

08003770 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8003770:	2001      	movs	r0, #1
 8003772:	4770      	bx	lr

08003774 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8003774:	200c      	movs	r0, #12
 8003776:	4770      	bx	lr

08003778 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8003778:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800377c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
 8003780:	3008      	adds	r0, #8
 8003782:	4770      	bx	lr

08003784 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8003784:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003788:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
 800378c:	3008      	adds	r0, #8
 800378e:	4770      	bx	lr

08003790 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003790:	2001      	movs	r0, #1
 8003792:	4770      	bx	lr

08003794 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003794:	4800      	ldr	r0, [pc, #0]	@ (8003798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x4>)
 8003796:	4770      	bx	lr
 8003798:	00024c5c 	.word	0x00024c5c

0800379c <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800379c:	4b02      	ldr	r3, [pc, #8]	@ (80037a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0xc>)
 800379e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80037a2:	3008      	adds	r0, #8
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	00024c5c 	.word	0x00024c5c

080037ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80037ac:	4b02      	ldr	r3, [pc, #8]	@ (80037b8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0xc>)
 80037ae:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80037b2:	3008      	adds	r0, #8
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	00024c5c 	.word	0x00024c5c

080037bc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24Test_lidar_hautPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80037bc:	2001      	movs	r0, #1
 80037be:	4770      	bx	lr

080037c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24Test_lidar_hautPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80037c0:	2010      	movs	r0, #16
 80037c2:	4770      	bx	lr

080037c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24Test_lidar_hautPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80037c4:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80037c8:	3008      	adds	r0, #8
 80037ca:	4770      	bx	lr

080037cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24Test_lidar_hautPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80037cc:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80037d0:	3008      	adds	r0, #8
 80037d2:	4770      	bx	lr

080037d4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80037d4:	b508      	push	{r3, lr}
    {
        app.gotoHomeScreenNoTransition();
 80037d6:	4608      	mov	r0, r1
 80037d8:	f002 fb2c 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
    }
 80037dc:	bd08      	pop	{r3, pc}
	...

080037e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
 80037e4:	4b02      	ldr	r3, [pc, #8]	@ (80037f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80037e6:	6003      	str	r3, [r0, #0]
 80037e8:	f010 fccf 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80037ec:	4620      	mov	r0, r4
 80037ee:	bd10      	pop	{r4, pc}
 80037f0:	0802b168 	.word	0x0802b168

080037f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80037f4:	b510      	push	{r4, lr}
 80037f6:	4604      	mov	r4, r0
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80037fa:	6003      	str	r3, [r0, #0]
 80037fc:	f010 fcc5 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003800:	2114      	movs	r1, #20
 8003802:	4620      	mov	r0, r4
 8003804:	f025 fb6c 	bl	8028ee0 <_ZdlPvj>
 8003808:	4620      	mov	r0, r4
 800380a:	bd10      	pop	{r4, pc}
 800380c:	0802b168 	.word	0x0802b168

08003810 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003810:	b510      	push	{r4, lr}
 8003812:	4604      	mov	r4, r0
 8003814:	4b02      	ldr	r3, [pc, #8]	@ (8003820 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003816:	6003      	str	r3, [r0, #0]
 8003818:	f010 fcb7 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800381c:	4620      	mov	r0, r4
 800381e:	bd10      	pop	{r4, pc}
 8003820:	0802b134 	.word	0x0802b134

08003824 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003824:	b510      	push	{r4, lr}
 8003826:	4604      	mov	r4, r0
 8003828:	4b04      	ldr	r3, [pc, #16]	@ (800383c <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800382a:	6003      	str	r3, [r0, #0]
 800382c:	f010 fcad 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003830:	4903      	ldr	r1, [pc, #12]	@ (8003840 <_ZN8touchgfx9PartitionINS_4meta8TypeListI18Test_lidar_basViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 8003832:	4620      	mov	r0, r4
 8003834:	f025 fb54 	bl	8028ee0 <_ZdlPvj>
 8003838:	4620      	mov	r0, r4
 800383a:	bd10      	pop	{r4, pc}
 800383c:	0802b134 	.word	0x0802b134
 8003840:	00024c64 	.word	0x00024c64

08003844 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24Test_lidar_hautPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003844:	b510      	push	{r4, lr}
 8003846:	4604      	mov	r4, r0
 8003848:	4b02      	ldr	r3, [pc, #8]	@ (8003854 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24Test_lidar_hautPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800384a:	6003      	str	r3, [r0, #0]
 800384c:	f010 fc9d 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003850:	4620      	mov	r0, r4
 8003852:	bd10      	pop	{r4, pc}
 8003854:	0802b100 	.word	0x0802b100

08003858 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24Test_lidar_hautPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003858:	b510      	push	{r4, lr}
 800385a:	4604      	mov	r4, r0
 800385c:	4b04      	ldr	r3, [pc, #16]	@ (8003870 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24Test_lidar_hautPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800385e:	6003      	str	r3, [r0, #0]
 8003860:	f010 fc93 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003864:	2118      	movs	r1, #24
 8003866:	4620      	mov	r0, r4
 8003868:	f025 fb3a 	bl	8028ee0 <_ZdlPvj>
 800386c:	4620      	mov	r0, r4
 800386e:	bd10      	pop	{r4, pc}
 8003870:	0802b100 	.word	0x0802b100

08003874 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003874:	b510      	push	{r4, lr}
 8003876:	4604      	mov	r4, r0
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <_ZN12FrontendHeapD1Ev+0x38>)
 800387a:	6003      	str	r3, [r0, #0]
 800387c:	f500 3310 	add.w	r3, r0, #147456	@ 0x24000
 8003880:	4a0b      	ldr	r2, [pc, #44]	@ (80038b0 <_ZN12FrontendHeapD1Ev+0x3c>)
 8003882:	f8c3 2c90 	str.w	r2, [r3, #3216]	@ 0xc90
 8003886:	480b      	ldr	r0, [pc, #44]	@ (80038b4 <_ZN12FrontendHeapD1Ev+0x40>)
 8003888:	4420      	add	r0, r4
 800388a:	f010 fc7e 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800388e:	4620      	mov	r0, r4
 8003890:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <_ZN12FrontendHeapD1Ev+0x44>)
 8003892:	f840 3f2c 	str.w	r3, [r0, #44]!
 8003896:	f010 fc78 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800389a:	4620      	mov	r0, r4
 800389c:	4b07      	ldr	r3, [pc, #28]	@ (80038bc <_ZN12FrontendHeapD1Ev+0x48>)
 800389e:	f840 3f14 	str.w	r3, [r0, #20]!
 80038a2:	f010 fc72 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80038a6:	4620      	mov	r0, r4
 80038a8:	bd10      	pop	{r4, pc}
 80038aa:	bf00      	nop
 80038ac:	0802b19c 	.word	0x0802b19c
 80038b0:	0802b168 	.word	0x0802b168
 80038b4:	00024c90 	.word	0x00024c90
 80038b8:	0802b134 	.word	0x0802b134
 80038bc:	0802b100 	.word	0x0802b100

080038c0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80038c0:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 80038c2:	4c0c      	ldr	r4, [pc, #48]	@ (80038f4 <__tcf_0+0x34>)
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <__tcf_0+0x38>)
 80038c6:	6023      	str	r3, [r4, #0]
 80038c8:	f504 3310 	add.w	r3, r4, #147456	@ 0x24000
 80038cc:	4a0b      	ldr	r2, [pc, #44]	@ (80038fc <__tcf_0+0x3c>)
 80038ce:	f8c3 2c90 	str.w	r2, [r3, #3216]	@ 0xc90
 80038d2:	f503 6049 	add.w	r0, r3, #3216	@ 0xc90
 80038d6:	f010 fc58 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80038da:	4620      	mov	r0, r4
 80038dc:	4b08      	ldr	r3, [pc, #32]	@ (8003900 <__tcf_0+0x40>)
 80038de:	f840 3f2c 	str.w	r3, [r0, #44]!
 80038e2:	f010 fc52 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80038e6:	4620      	mov	r0, r4
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <__tcf_0+0x44>)
 80038ea:	f840 3f14 	str.w	r3, [r0, #20]!
 80038ee:	f010 fc4c 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
        static FrontendHeap instance;
 80038f2:	bd10      	pop	{r4, pc}
 80038f4:	2400ba40 	.word	0x2400ba40
 80038f8:	0802b19c 	.word	0x0802b19c
 80038fc:	0802b168 	.word	0x0802b168
 8003900:	0802b134 	.word	0x0802b134
 8003904:	0802b100 	.word	0x0802b100

08003908 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003908:	b510      	push	{r4, lr}
 800390a:	4604      	mov	r4, r0
 800390c:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <_ZN12FrontendHeapD0Ev+0x40>)
 800390e:	6003      	str	r3, [r0, #0]
 8003910:	f500 3310 	add.w	r3, r0, #147456	@ 0x24000
 8003914:	4a0d      	ldr	r2, [pc, #52]	@ (800394c <_ZN12FrontendHeapD0Ev+0x44>)
 8003916:	f8c3 2c90 	str.w	r2, [r3, #3216]	@ 0xc90
 800391a:	480d      	ldr	r0, [pc, #52]	@ (8003950 <_ZN12FrontendHeapD0Ev+0x48>)
 800391c:	4420      	add	r0, r4
 800391e:	f010 fc34 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003922:	4620      	mov	r0, r4
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <_ZN12FrontendHeapD0Ev+0x4c>)
 8003926:	f840 3f2c 	str.w	r3, [r0, #44]!
 800392a:	f010 fc2e 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800392e:	4620      	mov	r0, r4
 8003930:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <_ZN12FrontendHeapD0Ev+0x50>)
 8003932:	f840 3f14 	str.w	r3, [r0, #20]!
 8003936:	f010 fc28 	bl	801418a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800393a:	4908      	ldr	r1, [pc, #32]	@ (800395c <_ZN12FrontendHeapD0Ev+0x54>)
 800393c:	4620      	mov	r0, r4
 800393e:	f025 facf 	bl	8028ee0 <_ZdlPvj>
 8003942:	4620      	mov	r0, r4
 8003944:	bd10      	pop	{r4, pc}
 8003946:	bf00      	nop
 8003948:	0802b19c 	.word	0x0802b19c
 800394c:	0802b168 	.word	0x0802b168
 8003950:	00024c90 	.word	0x00024c90
 8003954:	0802b134 	.word	0x0802b134
 8003958:	0802b100 	.word	0x0802b100
 800395c:	00024e04 	.word	0x00024e04

08003960 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003962:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003964:	f000 fcdc 	bl	8004320 <_ZN14BitmapDatabase11getInstanceEv>
 8003968:	4605      	mov	r5, r0
 800396a:	f000 fcdd 	bl	8004328 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800396e:	4601      	mov	r1, r0
 8003970:	2400      	movs	r4, #0
 8003972:	9400      	str	r4, [sp, #0]
 8003974:	4623      	mov	r3, r4
 8003976:	4622      	mov	r2, r4
 8003978:	4628      	mov	r0, r5
 800397a:	f01a fc83 	bl	801e284 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800397e:	4b27      	ldr	r3, [pc, #156]	@ (8003a1c <touchgfx_init+0xbc>)
 8003980:	4a27      	ldr	r2, [pc, #156]	@ (8003a20 <touchgfx_init+0xc0>)
 8003982:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003984:	4620      	mov	r0, r4
 8003986:	f005 fb93 	bl	80090b0 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 800398a:	4b26      	ldr	r3, [pc, #152]	@ (8003a24 <touchgfx_init+0xc4>)
 800398c:	4a26      	ldr	r2, [pc, #152]	@ (8003a28 <touchgfx_init+0xc8>)
 800398e:	609a      	str	r2, [r3, #8]

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003990:	4826      	ldr	r0, [pc, #152]	@ (8003a2c <touchgfx_init+0xcc>)
 8003992:	f01a fb23 	bl	801dfdc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8003996:	4b26      	ldr	r3, [pc, #152]	@ (8003a30 <touchgfx_init+0xd0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3bf 8f5b 	dmb	ish
 800399e:	f013 0f01 	tst.w	r3, #1
 80039a2:	d004      	beq.n	80039ae <touchgfx_init+0x4e>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80039a4:	4823      	ldr	r0, [pc, #140]	@ (8003a34 <touchgfx_init+0xd4>)
 80039a6:	f7fe fa8b 	bl	8001ec0 <_ZN11TouchGFXHAL10initializeEv>
}
 80039aa:	b003      	add	sp, #12
 80039ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ae:	4820      	ldr	r0, [pc, #128]	@ (8003a30 <touchgfx_init+0xd0>)
 80039b0:	f025 fa98 	bl	8028ee4 <__cxa_guard_acquire>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d0f5      	beq.n	80039a4 <touchgfx_init+0x44>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80039b8:	4c1f      	ldr	r4, [pc, #124]	@ (8003a38 <touchgfx_init+0xd8>)
 80039ba:	f104 0014 	add.w	r0, r4, #20
 80039be:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80039c0:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 80039c4:	60a7      	str	r7, [r4, #8]
          transitionStorage(tra),
 80039c6:	4e1d      	ldr	r6, [pc, #116]	@ (8003a3c <touchgfx_init+0xdc>)
 80039c8:	60e6      	str	r6, [r4, #12]
          frontendApplication(app)
 80039ca:	f106 0518 	add.w	r5, r6, #24
 80039ce:	6125      	str	r5, [r4, #16]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80039d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <touchgfx_init+0xe0>)
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	f010 fbda 	bl	801418c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80039d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <touchgfx_init+0xe4>)
 80039da:	6163      	str	r3, [r4, #20]
 80039dc:	4638      	mov	r0, r7
 80039de:	f010 fbd5 	bl	801418c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80039e2:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <touchgfx_init+0xe8>)
 80039e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039e6:	4630      	mov	r0, r6
 80039e8:	f010 fbd0 	bl	801418c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80039ec:	f504 3310 	add.w	r3, r4, #147456	@ 0x24000
 80039f0:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <touchgfx_init+0xec>)
 80039f2:	f8c3 2c90 	str.w	r2, [r3, #3216]	@ 0xc90
 80039f6:	3614      	adds	r6, #20
 80039f8:	4630      	mov	r0, r6
 80039fa:	f005 fd0f 	bl	800941c <_ZN5ModelC1Ev>
 80039fe:	4622      	mov	r2, r4
 8003a00:	4631      	mov	r1, r6
 8003a02:	4628      	mov	r0, r5
 8003a04:	f005 fc90 	bl	8009328 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotoHomeScreenNoTransition();
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f002 fa13 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
        static FrontendHeap instance;
 8003a0e:	4810      	ldr	r0, [pc, #64]	@ (8003a50 <touchgfx_init+0xf0>)
 8003a10:	f025 fdfc 	bl	802960c <atexit>
 8003a14:	4806      	ldr	r0, [pc, #24]	@ (8003a30 <touchgfx_init+0xd0>)
 8003a16:	f025 fa71 	bl	8028efc <__cxa_guard_release>
 8003a1a:	e7c3      	b.n	80039a4 <touchgfx_init+0x44>
 8003a1c:	2406221c 	.word	0x2406221c
 8003a20:	2400ac04 	.word	0x2400ac04
 8003a24:	2400ac24 	.word	0x2400ac24
 8003a28:	2400ac08 	.word	0x2400ac08
 8003a2c:	24000034 	.word	0x24000034
 8003a30:	2400ba3c 	.word	0x2400ba3c
 8003a34:	2400ab88 	.word	0x2400ab88
 8003a38:	2400ba40 	.word	0x2400ba40
 8003a3c:	240306d0 	.word	0x240306d0
 8003a40:	0802b19c 	.word	0x0802b19c
 8003a44:	0802b100 	.word	0x0802b100
 8003a48:	0802b134 	.word	0x0802b134
 8003a4c:	0802b168 	.word	0x0802b168
 8003a50:	080038c1 	.word	0x080038c1

08003a54 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003a54:	4770      	bx	lr
	...

08003a58 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003a58:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003a5a:	4802      	ldr	r0, [pc, #8]	@ (8003a64 <touchgfx_taskEntry+0xc>)
 8003a5c:	f7fe fa42 	bl	8001ee4 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8003a60:	bd08      	pop	{r3, pc}
 8003a62:	bf00      	nop
 8003a64:	2400ab88 	.word	0x2400ab88

08003a68 <_GLOBAL__sub_I_touchgfx_init>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	b082      	sub	sp, #8
{
public:

    STM32TouchController() {}
 8003a6c:	4e0d      	ldr	r6, [pc, #52]	@ (8003aa4 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8003a70:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003a72:	4c0e      	ldr	r4, [pc, #56]	@ (8003aac <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7ff fdb7 	bl	80035e8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ab0 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f01e faa3 	bl	8021fc8 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003a82:	480c      	ldr	r0, [pc, #48]	@ (8003ab4 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8003a84:	f018 fbce 	bl	801c224 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003a88:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	4633      	mov	r3, r6
 8003a96:	462a      	mov	r2, r5
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4807      	ldr	r0, [pc, #28]	@ (8003ab8 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003a9c:	f7fe fa44 	bl	8001f28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	2400ba38 	.word	0x2400ba38
 8003aa8:	0802a838 	.word	0x0802a838
 8003aac:	2400ac90 	.word	0x2400ac90
 8003ab0:	2400ac24 	.word	0x2400ac24
 8003ab4:	2400ac08 	.word	0x2400ac08
 8003ab8:	2400ab88 	.word	0x2400ab88

08003abc <_GLOBAL__sub_D_touchgfx_init>:
 8003abc:	b508      	push	{r3, lr}
static STM32DMA dma;
 8003abe:	4802      	ldr	r0, [pc, #8]	@ (8003ac8 <_GLOBAL__sub_D_touchgfx_init+0xc>)
 8003ac0:	f7ff fb20 	bl	8003104 <_ZN8STM32DMAD1Ev>
}
 8003ac4:	bd08      	pop	{r3, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2400ac90 	.word	0x2400ac90

08003acc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8003acc:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8003ace:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8003ad2:	b113      	cbz	r3, 8003ada <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	4798      	blx	r3
        }
    }
 8003ada:	bd08      	pop	{r3, pc}

08003adc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003adc:	2000      	movs	r0, #0
 8003ade:	4770      	bx	lr

08003ae0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003ae0:	8081      	strh	r1, [r0, #4]
    }
 8003ae2:	4770      	bx	lr

08003ae4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003ae4:	80c1      	strh	r1, [r0, #6]
    }
 8003ae6:	4770      	bx	lr

08003ae8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003ae8:	8101      	strh	r1, [r0, #8]
    }
 8003aea:	4770      	bx	lr

08003aec <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003aec:	8141      	strh	r1, [r0, #10]
    }
 8003aee:	4770      	bx	lr

08003af0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003af0:	4770      	bx	lr

08003af2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003af2:	4770      	bx	lr

08003af4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003af4:	4770      	bx	lr

08003af6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003af6:	4770      	bx	lr

08003af8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003af8:	4770      	bx	lr

08003afa <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003afa:	b508      	push	{r3, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003afc:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8003b00:	eba2 020c 	sub.w	r2, r2, ip
 8003b04:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8003b08:	eba1 010c 	sub.w	r1, r1, ip
 8003b0c:	6803      	ldr	r3, [r0, #0]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b10:	b212      	sxth	r2, r2
 8003b12:	b209      	sxth	r1, r1
 8003b14:	4798      	blx	r3
    }
 8003b16:	bd08      	pop	{r3, pc}

08003b18 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003b18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b1c:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003b1e:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8003b20:	8443      	strh	r3, [r0, #34]	@ 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003b26:	6010      	str	r0, [r2, #0]
    }
 8003b28:	4770      	bx	lr

08003b2a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003b2a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003b2e:	b11a      	cbz	r2, 8003b38 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003b30:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003b34:	b102      	cbz	r2, 8003b38 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003b36:	6018      	str	r0, [r3, #0]
        }
    }
 8003b38:	4770      	bx	lr

08003b3a <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	4770      	bx	lr

08003b3e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003b3e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8003b42:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003b44:	2001      	movs	r0, #1
 8003b46:	4770      	bx	lr

08003b48 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8003b48:	4770      	bx	lr

08003b4a <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003b4a:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003b4e:	4770      	bx	lr

08003b50 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003b50:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003b54:	4770      	bx	lr

08003b56 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
        return rect.width;
 8003b56:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
        return rect.height;
 8003b5a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	8002      	strh	r2, [r0, #0]
 8003b62:	8042      	strh	r2, [r0, #2]
 8003b64:	f8a0 c004 	strh.w	ip, [r0, #4]
 8003b68:	80c1      	strh	r1, [r0, #6]
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003b6a:	4770      	bx	lr

08003b6c <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	8002      	strh	r2, [r0, #0]
 8003b70:	8042      	strh	r2, [r0, #2]
 8003b72:	8082      	strh	r2, [r0, #4]
 8003b74:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003b76:	4770      	bx	lr

08003b78 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 8003b78:	7701      	strb	r1, [r0, #28]
    }
 8003b7a:	4770      	bx	lr

08003b7c <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8003b7c:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003b80:	4770      	bx	lr

08003b82 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003b82:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8003b86:	4770      	bx	lr

08003b88 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 8003b88:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 8003b8c:	4770      	bx	lr

08003b8e <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003b8e:	2001      	movs	r0, #1
 8003b90:	4770      	bx	lr

08003b92 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003b92:	3098      	adds	r0, #152	@ 0x98
 8003b94:	4770      	bx	lr

08003b96 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8003b96:	308c      	adds	r0, #140	@ 0x8c
 8003b98:	4770      	bx	lr

08003b9a <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8003b9a:	3084      	adds	r0, #132	@ 0x84
 8003b9c:	4770      	bx	lr

08003b9e <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003b9e:	4770      	bx	lr

08003ba0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba0:	4b02      	ldr	r3, [pc, #8]	@ (8003bac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8003ba2:	2290      	movs	r2, #144	@ 0x90
 8003ba4:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000e100 	.word	0xe000e100

08003bb0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb0:	4b02      	ldr	r3, [pc, #8]	@ (8003bbc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003bb2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bb6:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003bc2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003bca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bce:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8003bd2:	4770      	bx	lr
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003bd8:	4770      	bx	lr
	...

08003bdc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003bdc:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x5c>)
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003be4:	d026      	beq.n	8003c34 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>
{
 8003be6:	b510      	push	{r4, lr}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003be8:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x5c>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003bf0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003bf8:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003bfc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003c00:	ea4f 1c43 	mov.w	ip, r3, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c04:	f643 7ee0 	movw	lr, #16352	@ 0x3fe0
 8003c08:	480b      	ldr	r0, [pc, #44]	@ (8003c38 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x5c>)
 8003c0a:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c0e:	4623      	mov	r3, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c10:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
 8003c14:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d1f7      	bne.n	8003c10 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x34>
    } while(sets-- != 0U);
 8003c20:	f1ac 0c20 	sub.w	ip, ip, #32
 8003c24:	f11c 0f20 	cmn.w	ip, #32
 8003c28:	d1ef      	bne.n	8003c0a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2e>
 8003c2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c2e:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003c32:	bd10      	pop	{r4, pc}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003c3c:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x5c>)
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003c44:	d026      	beq.n	8003c94 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>
{
 8003c46:	b510      	push	{r4, lr}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x5c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003c50:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c58:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003c5c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003c60:	ea4f 1c43 	mov.w	ip, r3, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c64:	f643 7ee0 	movw	lr, #16352	@ 0x3fe0
 8003c68:	480b      	ldr	r0, [pc, #44]	@ (8003c98 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x5c>)
 8003c6a:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c6e:	4623      	mov	r3, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c70:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
 8003c74:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d1f7      	bne.n	8003c70 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x34>
    } while(sets-- != 0U);
 8003c80:	f1ac 0c20 	sub.w	ip, ip, #32
 8003c84:	f11c 0f20 	cmn.w	ip, #32
 8003c88:	d1ef      	bne.n	8003c6a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
 8003c8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c8e:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003c92:	bd10      	pop	{r4, pc}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8003c9c:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003c9e:	6381      	str	r1, [r0, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003ca0:	6342      	str	r2, [r0, #52]	@ 0x34
    }
 8003ca2:	4770      	bx	lr

08003ca4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003ca4:	4770      	bx	lr

08003ca6 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003ca6:	4770      	bx	lr

08003ca8 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003ca8:	4770      	bx	lr

08003caa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8003caa:	b508      	push	{r3, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 8003cac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003cb0:	6840      	ldr	r0, [r0, #4]
 8003cb2:	6803      	ldr	r3, [r0, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4798      	blx	r3
    }
 8003cba:	bd08      	pop	{r3, pc}

08003cbc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003cbc:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003cc0:	4770      	bx	lr

08003cc2 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003cc2:	b510      	push	{r4, lr}
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	212c      	movs	r1, #44	@ 0x2c
 8003cc8:	f025 f90a 	bl	8028ee0 <_ZdlPvj>
 8003ccc:	4620      	mov	r0, r4
 8003cce:	bd10      	pop	{r4, pc}

08003cd0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	2148      	movs	r1, #72	@ 0x48
 8003cd6:	f025 f903 	bl	8028ee0 <_ZdlPvj>
 8003cda:	4620      	mov	r0, r4
 8003cdc:	bd10      	pop	{r4, pc}

08003cde <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003cde:	b510      	push	{r4, lr}
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	21bc      	movs	r1, #188	@ 0xbc
 8003ce4:	f025 f8fc 	bl	8028ee0 <_ZdlPvj>
 8003ce8:	4620      	mov	r0, r4
 8003cea:	bd10      	pop	{r4, pc}

08003cec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
        assert(handle < no_streams);
 8003cec:	b911      	cbnz	r1, 8003cf4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x8>
    }
 8003cee:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003cf2:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
 8003cf4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003cf6:	4b03      	ldr	r3, [pc, #12]	@ (8003d04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003cf8:	4a03      	ldr	r2, [pc, #12]	@ (8003d08 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003cfa:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003cfe:	4803      	ldr	r0, [pc, #12]	@ (8003d0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003d00:	f025 fc66 	bl	80295d0 <__assert_func>
 8003d04:	0802b1a8 	.word	0x0802b1a8
 8003d08:	0802b1bc 	.word	0x0802b1bc
 8003d0c:	0802b348 	.word	0x0802b348

08003d10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003d10:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003d12:	b929      	cbnz	r1, 8003d20 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x10>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003d14:	6840      	ldr	r0, [r0, #4]
 8003d16:	6803      	ldr	r3, [r0, #0]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4798      	blx	r3
    }
 8003d1e:	bd08      	pop	{r3, pc}
        assert(handle < no_streams);
 8003d20:	4b03      	ldr	r3, [pc, #12]	@ (8003d30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003d22:	4a04      	ldr	r2, [pc, #16]	@ (8003d34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003d24:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003d28:	4803      	ldr	r0, [pc, #12]	@ (8003d38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003d2a:	f025 fc51 	bl	80295d0 <__assert_func>
 8003d2e:	bf00      	nop
 8003d30:	0802b1a8 	.word	0x0802b1a8
 8003d34:	0802b394 	.word	0x0802b394
 8003d38:	0802b348 	.word	0x0802b348

08003d3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
 8003d3c:	b909      	cbnz	r1, 8003d42 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x6>
    }
 8003d3e:	68c0      	ldr	r0, [r0, #12]
 8003d40:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003d42:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003d44:	4b02      	ldr	r3, [pc, #8]	@ (8003d50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003d46:	4a03      	ldr	r2, [pc, #12]	@ (8003d54 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003d48:	2179      	movs	r1, #121	@ 0x79
 8003d4a:	4803      	ldr	r0, [pc, #12]	@ (8003d58 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003d4c:	f025 fc40 	bl	80295d0 <__assert_func>
 8003d50:	0802b1a8 	.word	0x0802b1a8
 8003d54:	0802b544 	.word	0x0802b544
 8003d58:	0802b348 	.word	0x0802b348

08003d5c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003d5c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003d5e:	b939      	cbnz	r1, 8003d70 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x14>
 8003d60:	4604      	mov	r4, r0
        switch (cmd)
 8003d62:	2a05      	cmp	r2, #5
 8003d64:	d81b      	bhi.n	8003d9e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003d66:	e8df f002 	tbb	[pc, r2]
 8003d6a:	1709      	.short	0x1709
 8003d6c:	2e28201b 	.word	0x2e28201b
        assert(handle < no_streams);
 8003d70:	4b18      	ldr	r3, [pc, #96]	@ (8003dd4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x78>)
 8003d72:	4a19      	ldr	r2, [pc, #100]	@ (8003dd8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
 8003d74:	21a2      	movs	r1, #162	@ 0xa2
 8003d76:	4819      	ldr	r0, [pc, #100]	@ (8003ddc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
 8003d78:	f025 fc2a 	bl	80295d0 <__assert_func>
            if (mjpegDecoders[handle]->hasVideo())
 8003d7c:	6840      	ldr	r0, [r0, #4]
 8003d7e:	6803      	ldr	r3, [r0, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	4798      	blx	r3
 8003d84:	b158      	cbz	r0, 8003d9e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8003d8c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
                stream.frameCount = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	6123      	str	r3, [r4, #16]
                stream.tickCount = 0;
 8003d94:	6163      	str	r3, [r4, #20]
 8003d96:	e002      	b.n	8003d9e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 8003d9e:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003da0:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	6103      	str	r3, [r0, #16]
            stream.tickCount = 0;
 8003da6:	6143      	str	r3, [r0, #20]
            break;
 8003da8:	e7f9      	b.n	8003d9e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.seek_to_frame = param;
 8003daa:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
            stream.frameCount = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	6103      	str	r3, [r0, #16]
            stream.tickCount = 0;
 8003db6:	6143      	str	r3, [r0, #20]
            break;
 8003db8:	e7f1      	b.n	8003d9e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	6203      	str	r3, [r0, #32]
            break;
 8003dc4:	e7eb      	b.n	8003d9e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8003dc6:	3b00      	subs	r3, #0
 8003dc8:	bf18      	it	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003dd0:	e7e5      	b.n	8003d9e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003dd2:	bf00      	nop
 8003dd4:	0802b1a8 	.word	0x0802b1a8
 8003dd8:	0802b6fc 	.word	0x0802b6fc
 8003ddc:	0802b348 	.word	0x0802b348

08003de0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003de0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003de2:	b941      	cbnz	r1, 8003df6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 8003de4:	4611      	mov	r1, r2
 8003de6:	461a      	mov	r2, r3
        stream.frameNumber = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60c3      	str	r3, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003dec:	6840      	ldr	r0, [r0, #4]
 8003dee:	6803      	ldr	r3, [r0, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4798      	blx	r3
    }
 8003df4:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
 8003df6:	4b03      	ldr	r3, [pc, #12]	@ (8003e04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003df8:	4a03      	ldr	r2, [pc, #12]	@ (8003e08 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003dfa:	2190      	movs	r1, #144	@ 0x90
 8003dfc:	4803      	ldr	r0, [pc, #12]	@ (8003e0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003dfe:	f025 fbe7 	bl	80295d0 <__assert_func>
 8003e02:	bf00      	nop
 8003e04:	0802b1a8 	.word	0x0802b1a8
 8003e08:	0802b8d0 	.word	0x0802b8d0
 8003e0c:	0802b348 	.word	0x0802b348

08003e10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
        assert(handle < no_streams);
 8003e10:	b929      	cbnz	r1, 8003e1e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0xe>
        stream.frameCount = 0;
 8003e12:	2100      	movs	r1, #0
 8003e14:	6101      	str	r1, [r0, #16]
        stream.tickCount = 0;
 8003e16:	6141      	str	r1, [r0, #20]
        stream.frame_rate_ticks = ui_frames;
 8003e18:	61c2      	str	r2, [r0, #28]
        stream.frame_rate_video = video_frames;
 8003e1a:	6183      	str	r3, [r0, #24]
 8003e1c:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003e1e:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003e20:	4b02      	ldr	r3, [pc, #8]	@ (8003e2c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003e22:	4a03      	ldr	r2, [pc, #12]	@ (8003e30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003e24:	2182      	movs	r1, #130	@ 0x82
 8003e26:	4803      	ldr	r0, [pc, #12]	@ (8003e34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003e28:	f025 fbd2 	bl	80295d0 <__assert_func>
 8003e2c:	0802b1a8 	.word	0x0802b1a8
 8003e30:	0802baac 	.word	0x0802baac
 8003e34:	0802b348 	.word	0x0802b348

08003e38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003e38:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003e3a:	b981      	cbnz	r1, 8003e5e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x26>
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	4610      	mov	r0, r2
        if (stream.isPlaying)
 8003e40:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003e44:	b133      	cbz	r3, 8003e54 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x1c>
        return vSyncForFrame;
 8003e46:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003e4e:	6963      	ldr	r3, [r4, #20]
 8003e50:	4413      	add	r3, r2
 8003e52:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003e54:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003e58:	b93b      	cbnz	r3, 8003e6a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8003e5a:	2001      	movs	r0, #1
    }
 8003e5c:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e98 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003e60:	4a0e      	ldr	r2, [pc, #56]	@ (8003e9c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003e62:	21d0      	movs	r1, #208	@ 0xd0
 8003e64:	480e      	ldr	r0, [pc, #56]	@ (8003ea0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
 8003e66:	f025 fbb3 	bl	80295d0 <__assert_func>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8003e6a:	68a3      	ldr	r3, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003e6c:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003e6e:	6803      	ldr	r3, [r0, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003e7a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d1ec      	bne.n	8003e5c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x24>
 8003e82:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e8      	bne.n	8003e5c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x24>
                stream.isPlaying = false;
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
            return stream.hasMoreFrames;
 8003e90:	4618      	mov	r0, r3
 8003e92:	e7e3      	b.n	8003e5c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x24>
 8003e94:	240621b8 	.word	0x240621b8
 8003e98:	0802b1a8 	.word	0x0802b1a8
 8003e9c:	0802bc68 	.word	0x0802bc68
 8003ea0:	0802b348 	.word	0x0802b348

08003ea4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003ea4:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003ea6:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8003eaa:	b133      	cbz	r3, 8003eba <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x16>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003eac:	4b1c      	ldr	r3, [pc, #112]	@ (8003f20 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 8003eae:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
 8003eb0:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003eb4:	481c      	ldr	r0, [pc, #112]	@ (8003f28 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003eb6:	f025 fb8b 	bl	80295d0 <__assert_func>
                streams[i] = Stream();
 8003eba:	60c3      	str	r3, [r0, #12]
 8003ebc:	6103      	str	r3, [r0, #16]
 8003ebe:	6143      	str	r3, [r0, #20]
 8003ec0:	6183      	str	r3, [r0, #24]
 8003ec2:	61c3      	str	r3, [r0, #28]
 8003ec4:	6203      	str	r3, [r0, #32]
 8003ec6:	6243      	str	r3, [r0, #36]	@ 0x24
 8003ec8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
 8003ecc:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8003ed0:	f880 302b 	strb.w	r3, [r0, #43]	@ 0x2b
 8003ed4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 8003ede:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
        streams[handle].isActive = true;
 8003ee2:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ee6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003ee8:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8003eea:	4423      	add	r3, r4
 8003eec:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003eee:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8003ef0:	442a      	add	r2, r5
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d80d      	bhi.n	8003f12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6e>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003ef6:	6084      	str	r4, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003ef8:	6383      	str	r3, [r0, #56]	@ 0x38
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003f00:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003f04:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003f06:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003f0a:	870b      	strh	r3, [r1, #56]	@ 0x38
        buffer = videoBuffer;
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	6308      	str	r0, [r1, #48]	@ 0x30
    }
 8003f10:	bd38      	pop	{r3, r4, r5, pc}
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8003f14:	4a07      	ldr	r2, [pc, #28]	@ (8003f34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8003f16:	2152      	movs	r1, #82	@ 0x52
 8003f18:	4803      	ldr	r0, [pc, #12]	@ (8003f28 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8003f1a:	f025 fb59 	bl	80295d0 <__assert_func>
 8003f1e:	bf00      	nop
 8003f20:	0802be0c 	.word	0x0802be0c
 8003f24:	0802be3c 	.word	0x0802be3c
 8003f28:	0802b348 	.word	0x0802b348
 8003f2c:	00119400 	.word	0x00119400
 8003f30:	0802bfc4 	.word	0x0802bfc4
 8003f34:	0802c000 	.word	0x0802c000

08003f38 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4604      	mov	r4, r0
    HAL::initialize();
 8003f3c:	f010 fc23 	bl	8014786 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003f44:	f017 f826 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003f54:	2300      	movs	r3, #0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4906      	ldr	r1, [pc, #24]	@ (8003f74 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	47a8      	blx	r5
    mjpegdecoder1.addDMA(dma);
 8003f5e:	6863      	ldr	r3, [r4, #4]
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 8003f60:	4a05      	ldr	r2, [pc, #20]	@ (8003f78 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003f62:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003f64:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003f66:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003f68:	4a05      	ldr	r2, [pc, #20]	@ (8003f80 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003f6c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003f6e:	4a05      	ldr	r2, [pc, #20]	@ (8003f84 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	d0119400 	.word	0xd0119400
 8003f78:	2403094c 	.word	0x2403094c
 8003f7c:	24030904 	.word	0x24030904
 8003f80:	d0000000 	.word	0xd0000000
 8003f84:	00119400 	.word	0x00119400

08003f88 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4604      	mov	r4, r0
    HAL::endFrame();
 8003f8c:	f010 fbee 	bl	801476c <_ZN8touchgfx3HAL8endFrameEv>
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003f90:	4b1d      	ldr	r3, [pc, #116]	@ (8004008 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x80>)
 8003f92:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003f96:	b91b      	cbnz	r3, 8003fa0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
 8003f98:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x80>)
 8003f9a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003f9e:	b153      	cbz	r3, 8003fb6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x2e>
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003fa0:	4b19      	ldr	r3, [pc, #100]	@ (8004008 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x80>)
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	fb01 f202 	mul.w	r2, r1, r2
 8003faa:	69d9      	ldr	r1, [r3, #28]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d20e      	bcs.n	8003fd4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x4c>
        firstDrawThisFrame = true;
 8003fb6:	4d14      	ldr	r5, [pc, #80]	@ (8004008 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x80>)
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003fbe:	6c28      	ldr	r0, [r5, #64]	@ 0x40
 8003fc0:	f00d ff2b 	bl	8011e1a <osSemaphoreRelease>
        if (uiHasMutex)
 8003fc4:	f895 303e 	ldrb.w	r3, [r5, #62]	@ 0x3e
 8003fc8:	b9b3      	cbnz	r3, 8003ff8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x70>
    dma.start();
 8003fca:	6860      	ldr	r0, [r4, #4]
 8003fcc:	6803      	ldr	r3, [r0, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4798      	blx	r3
}
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
            if (allowSkipFrames)
 8003fd4:	480c      	ldr	r0, [pc, #48]	@ (8004008 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x80>)
 8003fd6:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003fda:	b140      	cbz	r0, 8003fee <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003fdc:	1ad2      	subs	r2, r2, r3
 8003fde:	fbb2 f3f1 	udiv	r3, r2, r1
                if (stream.skip_frames > 0)
 8003fe2:	4291      	cmp	r1, r2
                    stream.skip_frames--;
 8003fe4:	bf98      	it	ls
 8003fe6:	f103 33ff 	addls.w	r3, r3, #4294967295
 8003fea:	4a07      	ldr	r2, [pc, #28]	@ (8004008 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x80>)
 8003fec:	6253      	str	r3, [r2, #36]	@ 0x24
                    stream.doDecode = true;
 8003fee:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x80>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8003ff6:	e7de      	b.n	8003fb6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x2e>
            MUTEX_UNLOCK(mutexBuffers);
 8003ff8:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 8003ffa:	f00d fe62 	bl	8011cc2 <osMutexRelease>
            uiHasMutex = false;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
 8004004:	e7e1      	b.n	8003fca <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
 8004006:	bf00      	nop
 8004008:	24030904 	.word	0x24030904

0800400c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 800400c:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 800400e:	f010 fb6b 	bl	80146e8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8004012:	bd08      	pop	{r3, pc}

08004014 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 8004014:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 8004016:	f010 fcca 	bl	80149ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 800401a:	bd08      	pop	{r3, pc}

0800401c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800401c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004020:	b903      	cbnz	r3, 8004024 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
 8004022:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8004024:	b510      	push	{r4, lr}
 8004026:	4604      	mov	r4, r0
            MUTEX_LOCK(mutexBuffers);
 8004028:	f04f 31ff 	mov.w	r1, #4294967295
 800402c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800402e:	f00d fe19 	bl	8011c64 <osMutexAcquire>
            firstDrawThisFrame = false;
 8004032:	2300      	movs	r3, #0
 8004034:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8004038:	2301      	movs	r3, #1
 800403a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 800403e:	bd10      	pop	{r4, pc}

08004040 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4605      	mov	r5, r0
 8004044:	460c      	mov	r4, r1
        MUTEX_LOCK(mutexBuffers);
 8004046:	f04f 31ff 	mov.w	r1, #4294967295
 800404a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800404c:	f00d fe0a 	bl	8011c64 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8004050:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 8004052:	f00d fe36 	bl	8011cc2 <osMutexRelease>
        streams[handle].isActive = false;
 8004056:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800405a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800405e:	2300      	movs	r3, #0
 8004060:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        if (oneIsActive == false)
 8004064:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8004068:	b90b      	cbnz	r3, 800406e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
 800406a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800406c:	63ab      	str	r3, [r5, #56]	@ 0x38
    }
 800406e:	bd38      	pop	{r3, r4, r5, pc}

08004070 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8004070:	b538      	push	{r3, r4, r5, lr}
    static CWRVectorRendererRGB888 renderer;
 8004072:	4b3e      	ldr	r3, [pc, #248]	@ (800416c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xfc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f3bf 8f5b 	dmb	ish
 800407a:	f013 0f01 	tst.w	r3, #1
 800407e:	d001      	beq.n	8004084 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x14>
}
 8004080:	483b      	ldr	r0, [pc, #236]	@ (8004170 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x100>)
 8004082:	bd38      	pop	{r3, r4, r5, pc}
    static CWRVectorRendererRGB888 renderer;
 8004084:	4839      	ldr	r0, [pc, #228]	@ (800416c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xfc>)
 8004086:	f024 ff2d 	bl	8028ee4 <__cxa_guard_acquire>
 800408a:	2800      	cmp	r0, #0
 800408c:	d0f8      	beq.n	8004080 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x10>
class CWRVectorRenderer : public VectorRenderer
 800408e:	4c38      	ldr	r4, [pc, #224]	@ (8004170 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x100>)
 8004090:	4b38      	ldr	r3, [pc, #224]	@ (8004174 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x104>)
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	2500      	movs	r5, #0
 8004096:	80a5      	strh	r5, [r4, #4]
 8004098:	80e5      	strh	r5, [r4, #6]
 800409a:	8125      	strh	r5, [r4, #8]
 800409c:	8165      	strh	r5, [r4, #10]
 800409e:	81a5      	strh	r5, [r4, #12]
 80040a0:	81e5      	strh	r5, [r4, #14]
 80040a2:	8225      	strh	r5, [r4, #16]
 80040a4:	8265      	strh	r5, [r4, #18]
 80040a6:	84e5      	strh	r5, [r4, #38]	@ 0x26
 80040a8:	8525      	strh	r5, [r4, #40]	@ 0x28
 80040aa:	8565      	strh	r5, [r4, #42]	@ 0x2a
 80040ac:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 80040ae:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80040b2:	f018 fb16 	bl	801c6e2 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 80040b6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040ba:	f013 fa65 	bl	8017588 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80040be:	4b2e      	ldr	r3, [pc, #184]	@ (8004178 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x108>)
 80040c0:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80040c2:	4b2e      	ldr	r3, [pc, #184]	@ (800417c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x10c>)
 80040c4:	6023      	str	r3, [r4, #0]
        : widgetWidth(0)
 80040c6:	f8a4 5088 	strh.w	r5, [r4, #136]	@ 0x88
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
        : AbstractPainter()
 80040ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004180 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x110>)
 80040cc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80040d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004184 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x114>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80040d8:	b10a      	cbz	r2, 80040de <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x6e>
 80040da:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80040dc:	b900      	cbnz	r0, 80040e0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x70>
        return instance->lcdRef;
 80040de:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80040e0:	6803      	ldr	r3, [r0, #0]
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	4798      	blx	r3
 80040e6:	2801      	cmp	r0, #1
 80040e8:	bf14      	ite	ne
 80040ea:	2400      	movne	r4, #0
 80040ec:	2401      	moveq	r4, #1
        return auxiliaryLCD;
 80040ee:	4b25      	ldr	r3, [pc, #148]	@ (8004184 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x114>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80040f4:	b130      	cbz	r0, 8004104 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80040f6:	6803      	ldr	r3, [r0, #0]
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	4798      	blx	r3
 80040fc:	2801      	cmp	r0, #1
 80040fe:	bf08      	it	eq
 8004100:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8004104:	b35c      	cbz	r4, 800415e <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xee>
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8004106:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x100>)
 8004108:	2200      	movs	r2, #0
 800410a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 800410e:	491e      	ldr	r1, [pc, #120]	@ (8004188 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x118>)
 8004110:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
 8004114:	3124      	adds	r1, #36	@ 0x24
 8004116:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
        : widgetWidth(0)
 800411a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 800411e:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8004122:	2164      	movs	r1, #100	@ 0x64
 8004124:	f8a3 10a0 	strh.w	r1, [r3, #160]	@ 0xa0
 8004128:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800412c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 8004130:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
 8004134:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 8004138:	2200      	movs	r2, #0
 800413a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800413e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8004142:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8004146:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 800414a:	4a10      	ldr	r2, [pc, #64]	@ (800418c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x11c>)
 800414c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004150:	480f      	ldr	r0, [pc, #60]	@ (8004190 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x120>)
 8004152:	f025 fa5b 	bl	802960c <atexit>
 8004156:	4805      	ldr	r0, [pc, #20]	@ (800416c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xfc>)
 8004158:	f024 fed0 	bl	8028efc <__cxa_guard_release>
 800415c:	e790      	b.n	8004080 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x10>
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x124>)
 8004160:	4a0d      	ldr	r2, [pc, #52]	@ (8004198 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x128>)
 8004162:	2127      	movs	r1, #39	@ 0x27
 8004164:	480d      	ldr	r0, [pc, #52]	@ (800419c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x12c>)
 8004166:	f025 fa33 	bl	80295d0 <__assert_func>
 800416a:	bf00      	nop
 800416c:	24030844 	.word	0x24030844
 8004170:	24030848 	.word	0x24030848
 8004174:	0802de9c 	.word	0x0802de9c
 8004178:	0802c2d8 	.word	0x0802c2d8
 800417c:	0802c350 	.word	0x0802c350
 8004180:	0802c2b8 	.word	0x0802c2b8
 8004184:	240621b8 	.word	0x240621b8
 8004188:	0802dee8 	.word	0x0802dee8
 800418c:	0802df20 	.word	0x0802df20
 8004190:	08003b9f 	.word	0x08003b9f
 8004194:	0802c1a4 	.word	0x0802c1a4
 8004198:	0802c204 	.word	0x0802c204
 800419c:	0802c240 	.word	0x0802c240

080041a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80041a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041a4:	b083      	sub	sp, #12
 80041a6:	4604      	mov	r4, r0
            SEM_WAIT(semDecode);
 80041a8:	f04f 36ff 	mov.w	r6, #4294967295
                    stream.doInvalidateOnNextTick = true;
 80041ac:	2701      	movs	r7, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80041ae:	f44f 6816 	mov.w	r8, #2400	@ 0x960
 80041b2:	e01b      	b.n	80041ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x4c>
                        if (stream.skip_frames > 0)
 80041b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d030      	beq.n	800421c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x7c>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	4628      	mov	r0, r5
 80041c4:	4798      	blx	r3
 80041c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80041c8:	4401      	add	r1, r0
 80041ca:	4628      	mov	r0, r5
 80041cc:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80041ce:	6923      	ldr	r3, [r4, #16]
 80041d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80041d2:	4413      	add	r3, r2
 80041d4:	6123      	str	r3, [r4, #16]
                            stream.skip_frames = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80041da:	e01f      	b.n	800421c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x7c>
 80041dc:	4638      	mov	r0, r7
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80041de:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80041e6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80041e8:	f00d fd6b 	bl	8011cc2 <osMutexRelease>
            SEM_WAIT(semDecode);
 80041ec:	4631      	mov	r1, r6
 80041ee:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80041f0:	f00d fddf 	bl	8011db2 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 80041f4:	4631      	mov	r1, r6
 80041f6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80041f8:	f00d fd34 	bl	8011c64 <osMutexAcquire>
                if (stream.doDecode)
 80041fc:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x46>
                    stream.doInvalidateOnNextTick = true;
 8004204:	f884 702b 	strb.w	r7, [r4, #43]	@ 0x2b
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8004208:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 800420a:	6a21      	ldr	r1, [r4, #32]
 800420c:	2900      	cmp	r1, #0
 800420e:	d0d1      	beq.n	80041b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x14>
                        decoder->gotoFrame(stream.seek_to_frame);
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	4628      	mov	r0, r5
 8004216:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	f8cd 8000 	str.w	r8, [sp]
 8004222:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8004226:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800422a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800422e:	68a1      	ldr	r1, [r4, #8]
 8004230:	4628      	mov	r0, r5
 8004232:	47c8      	blx	r9
 8004234:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	3301      	adds	r3, #1
 800423c:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 800423e:	2800      	cmp	r0, #0
 8004240:	d0cc      	beq.n	80041dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x3c>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8004242:	682b      	ldr	r3, [r5, #0]
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	4628      	mov	r0, r5
 8004248:	4798      	blx	r3
 800424a:	3801      	subs	r0, #1
 800424c:	e7c7      	b.n	80041de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x3e>
	...

08004250 <videoTaskFunc>:

extern "C" void videoTaskFunc(void* argument)
{
 8004250:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8004252:	4801      	ldr	r0, [pc, #4]	@ (8004258 <videoTaskFunc+0x8>)
 8004254:	f7ff ffa4 	bl	80041a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8004258:	24030904 	.word	0x24030904

0800425c <_GLOBAL__sub_I_mjpegdecoder1>:
}
 800425c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 800425e:	481a      	ldr	r0, [pc, #104]	@ (80042c8 <_GLOBAL__sub_I_mjpegdecoder1+0x6c>)
 8004260:	f7fe f8b8 	bl	80023d4 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8004264:	4c19      	ldr	r4, [pc, #100]	@ (80042cc <_GLOBAL__sub_I_mjpegdecoder1+0x70>)
 8004266:	4b1a      	ldr	r3, [pc, #104]	@ (80042d0 <_GLOBAL__sub_I_mjpegdecoder1+0x74>)
 8004268:	6023      	str	r3, [r4, #0]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800426a:	2500      	movs	r5, #0
 800426c:	60e5      	str	r5, [r4, #12]
 800426e:	6125      	str	r5, [r4, #16]
 8004270:	6165      	str	r5, [r4, #20]
 8004272:	61a5      	str	r5, [r4, #24]
 8004274:	61e5      	str	r5, [r4, #28]
            seek_to_frame(0), skip_frames(0),
 8004276:	6225      	str	r5, [r4, #32]
 8004278:	6265      	str	r5, [r4, #36]	@ 0x24
            isActive(false), isPlaying(false), isShowingOneFrame(false),
 800427a:	f884 5028 	strb.w	r5, [r4, #40]	@ 0x28
 800427e:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8004282:	f884 502a 	strb.w	r5, [r4, #42]	@ 0x2a
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8004286:	f884 502b 	strb.w	r5, [r4, #43]	@ 0x2b
 800428a:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 800428e:	2001      	movs	r0, #1
 8004290:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8004294:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8004298:	6325      	str	r5, [r4, #48]	@ 0x30
 800429a:	6365      	str	r5, [r4, #52]	@ 0x34
 800429c:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800429e:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 80042a2:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 80042a6:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
 80042aa:	6425      	str	r5, [r4, #64]	@ 0x40
 80042ac:	6465      	str	r5, [r4, #68]	@ 0x44
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80042ae:	60a5      	str	r5, [r4, #8]
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 80042b0:	6065      	str	r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
 80042b2:	462a      	mov	r2, r5
 80042b4:	4629      	mov	r1, r5
 80042b6:	f00d fd29 	bl	8011d0c <osSemaphoreNew>
 80042ba:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 80042bc:	4628      	mov	r0, r5
 80042be:	f00d fc90 	bl	8011be2 <osMutexNew>
 80042c2:	6460      	str	r0, [r4, #68]	@ 0x44
}
 80042c4:	bd38      	pop	{r3, r4, r5, pc}
 80042c6:	bf00      	nop
 80042c8:	2403094c 	.word	0x2403094c
 80042cc:	24030904 	.word	0x24030904
 80042d0:	0802c39c 	.word	0x0802c39c

080042d4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId GOOD_TYPO = 3;     // verdanab_30_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 4; // verdanab_45_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80042d4:	4770      	bx	lr

080042d6 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80042d6:	b508      	push	{r3, lr}
    switch (typography)
 80042d8:	2904      	cmp	r1, #4
 80042da:	d818      	bhi.n	800430e <_ZN23ApplicationFontProvider7getFontEt+0x38>
 80042dc:	e8df f001 	tbb	[pc, r1]
 80042e0:	0f0b0703 	.word	0x0f0b0703
 80042e4:	13          	.byte	0x13
 80042e5:	00          	.byte	0x00
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80042e6:	f004 ff33 	bl	8009150 <_ZN17TypedTextDatabase8getFontsEv>
 80042ea:	6800      	ldr	r0, [r0, #0]
        // verdanab_45_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
    default:
        return 0;
    }
}
 80042ec:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80042ee:	f004 ff2f 	bl	8009150 <_ZN17TypedTextDatabase8getFontsEv>
 80042f2:	6840      	ldr	r0, [r0, #4]
 80042f4:	e7fa      	b.n	80042ec <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80042f6:	f004 ff2b 	bl	8009150 <_ZN17TypedTextDatabase8getFontsEv>
 80042fa:	6880      	ldr	r0, [r0, #8]
 80042fc:	e7f6      	b.n	80042ec <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80042fe:	f004 ff27 	bl	8009150 <_ZN17TypedTextDatabase8getFontsEv>
 8004302:	68c0      	ldr	r0, [r0, #12]
 8004304:	e7f2      	b.n	80042ec <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8004306:	f004 ff23 	bl	8009150 <_ZN17TypedTextDatabase8getFontsEv>
 800430a:	6900      	ldr	r0, [r0, #16]
 800430c:	e7ee      	b.n	80042ec <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 800430e:	2000      	movs	r0, #0
 8004310:	e7ec      	b.n	80042ec <_ZN23ApplicationFontProvider7getFontEt+0x16>

08004312 <_ZN23ApplicationFontProviderD0Ev>:
 8004312:	b510      	push	{r4, lr}
 8004314:	4604      	mov	r4, r0
 8004316:	2104      	movs	r1, #4
 8004318:	f024 fde2 	bl	8028ee0 <_ZdlPvj>
 800431c:	4620      	mov	r0, r4
 800431e:	bd10      	pop	{r4, pc}

08004320 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8004320:	4800      	ldr	r0, [pc, #0]	@ (8004324 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8004322:	4770      	bx	lr
 8004324:	0802c3ec 	.word	0x0802c3ec

08004328 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8004328:	2014      	movs	r0, #20
 800432a:	4770      	bx	lr

0800432c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 800432c:	b169      	cbz	r1, 800434a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800432e:	b510      	push	{r4, lr}
 8004330:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8004336:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800433a:	6803      	ldr	r3, [r0, #0]
 800433c:	689c      	ldr	r4, [r3, #8]
 800433e:	f10d 0303 	add.w	r3, sp, #3
 8004342:	aa01      	add	r2, sp, #4
 8004344:	47a0      	blx	r4
        return glyph;
    }
 8004346:	b002      	add	sp, #8
 8004348:	bd10      	pop	{r4, pc}
            return 0;
 800434a:	2000      	movs	r0, #0
    }
 800434c:	4770      	bx	lr

0800434e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800434e:	89c0      	ldrh	r0, [r0, #14]
 8004350:	4770      	bx	lr

08004352 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8004352:	8a00      	ldrh	r0, [r0, #16]
 8004354:	4770      	bx	lr

08004356 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8004356:	88c0      	ldrh	r0, [r0, #6]
 8004358:	4770      	bx	lr

0800435a <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800435a:	8880      	ldrh	r0, [r0, #4]
 800435c:	4770      	bx	lr

0800435e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800435e:	7a80      	ldrb	r0, [r0, #10]
    }
 8004360:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004364:	4770      	bx	lr

08004366 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8004366:	7a80      	ldrb	r0, [r0, #10]
    }
 8004368:	09c0      	lsrs	r0, r0, #7
 800436a:	4770      	bx	lr

0800436c <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 800436c:	2000      	movs	r0, #0
 800436e:	4770      	bx	lr

08004370 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8004370:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004378 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	00000000 	.word	0x00000000

0800437c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800437c:	4770      	bx	lr

0800437e <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800437e:	4770      	bx	lr

08004380 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004380:	4770      	bx	lr

08004382 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004382:	4770      	bx	lr

08004384 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8004384:	4770      	bx	lr

08004386 <_ZN23Choix_strategieViewBase11strategie_1Ev>:
     * Virtual Action Handlers
     */
    virtual void strategie_1()
    {
        // Override and implement this function in Choix_strategie
    }
 8004386:	4770      	bx	lr

08004388 <_ZN23Choix_strategieViewBase13valider_stratEv>:
    virtual void valider_strat()
    {
        // Override and implement this function in Choix_strategie
    }
 8004388:	4770      	bx	lr

0800438a <_ZN23Choix_strategieViewBase11strategie_2Ev>:
    virtual void strategie_2()
    {
        // Override and implement this function in Choix_strategie
    }
 800438a:	4770      	bx	lr

0800438c <_ZN23Choix_strategieViewBase11strategie_3Ev>:
    virtual void strategie_3()
    {
        // Override and implement this function in Choix_strategie
    }
 800438c:	4770      	bx	lr

0800438e <_ZN23Choix_strategieViewBase11strategie_4Ev>:
    virtual void strategie_4()
    {
        // Override and implement this function in Choix_strategie
    }
 800438e:	4770      	bx	lr

08004390 <_ZN23Choix_strategieViewBase11strategie_5Ev>:
    virtual void strategie_5()
    {
        // Override and implement this function in Choix_strategie
    }
 8004390:	4770      	bx	lr

08004392 <_ZN23Choix_strategieViewBase11strategie_6Ev>:
    virtual void strategie_6()
    {
        // Override and implement this function in Choix_strategie
    }
 8004392:	4770      	bx	lr

08004394 <_ZN23Choix_strategieViewBaseD1Ev>:
}

Choix_strategieViewBase::~Choix_strategieViewBase()
{

}
 8004394:	4770      	bx	lr

08004396 <_ZN23Choix_strategieViewBase11setupScreenEv>:

void Choix_strategieViewBase::setupScreen()
{

}
 8004396:	4770      	bx	lr

08004398 <_ZN8touchgfx8CallbackI23Choix_strategieViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type, typename T1>
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004398:	4770      	bx	lr

0800439a <_ZN8touchgfx8CallbackI23Choix_strategieViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
     *
     * @param  t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid
     */
    virtual void execute(T1 t1)
 800439a:	b510      	push	{r4, lr}
 800439c:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)(t1);
 800439e:	68c2      	ldr	r2, [r0, #12]
 80043a0:	6844      	ldr	r4, [r0, #4]
 80043a2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80043a6:	f012 0f01 	tst.w	r2, #1
 80043aa:	d102      	bne.n	80043b2 <_ZN8touchgfx8CallbackI23Choix_strategieViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	4798      	blx	r3
    }
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 80043b6:	f854 200c 	ldr.w	r2, [r4, ip]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	58d3      	ldr	r3, [r2, r3]
 80043be:	e7f6      	b.n	80043ae <_ZN8touchgfx8CallbackI23Choix_strategieViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x14>

080043c0 <_ZNK8touchgfx8CallbackI23Choix_strategieViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80043c0:	6843      	ldr	r3, [r0, #4]
 80043c2:	b13b      	cbz	r3, 80043d4 <_ZNK8touchgfx8CallbackI23Choix_strategieViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80043c4:	6883      	ldr	r3, [r0, #8]
 80043c6:	b10b      	cbz	r3, 80043cc <_ZNK8touchgfx8CallbackI23Choix_strategieViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 80043c8:	2001      	movs	r0, #1
    }
 80043ca:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 80043cc:	68c0      	ldr	r0, [r0, #12]
 80043ce:	f000 0001 	and.w	r0, r0, #1
 80043d2:	4770      	bx	lr
 80043d4:	2000      	movs	r0, #0
 80043d6:	4770      	bx	lr

080043d8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80043d8:	b510      	push	{r4, lr}
 80043da:	4604      	mov	r4, r0
    }
 80043dc:	2108      	movs	r1, #8
 80043de:	f024 fd7f 	bl	8028ee0 <_ZdlPvj>
 80043e2:	4620      	mov	r0, r4
 80043e4:	bd10      	pop	{r4, pc}

080043e6 <_ZN8touchgfx8CallbackI23Choix_strategieViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80043e6:	b510      	push	{r4, lr}
 80043e8:	4604      	mov	r4, r0
 80043ea:	2110      	movs	r1, #16
 80043ec:	f024 fd78 	bl	8028ee0 <_ZdlPvj>
 80043f0:	4620      	mov	r0, r4
 80043f2:	bd10      	pop	{r4, pc}

080043f4 <_ZN23Choix_strategieViewBaseD0Ev>:
Choix_strategieViewBase::~Choix_strategieViewBase()
 80043f4:	b510      	push	{r4, lr}
 80043f6:	4604      	mov	r4, r0
}
 80043f8:	f44f 7175 	mov.w	r1, #980	@ 0x3d4
 80043fc:	f024 fd70 	bl	8028ee0 <_ZdlPvj>
 8004400:	4620      	mov	r0, r4
 8004402:	bd10      	pop	{r4, pc}

08004404 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Choix_strategieViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8004404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	4604      	mov	r4, r0
 800440a:	460d      	mov	r5, r1
    if (&src == &bouton_home)
 800440c:	f500 7350 	add.w	r3, r0, #832	@ 0x340
 8004410:	4299      	cmp	r1, r3
 8004412:	d027      	beq.n	8004464 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x60>
        //vers_home
        //When bouton_home clicked change screen to Home
        //Go to Home with no screen transition
        application().gotoHomeScreenNoTransition();
    }
    if (&src == &bouton_strat_1)
 8004414:	f504 763e 	add.w	r6, r4, #760	@ 0x2f8
 8004418:	42ae      	cmp	r6, r5
 800441a:	d028      	beq.n	800446e <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x6a>
        //fonction_strat_1
        //When bouton_strat_1 clicked call virtual function
        //Call strategie_1
        strategie_1();
    }
    if (&src == &bouton_strat_2)
 800441c:	f504 772c 	add.w	r7, r4, #688	@ 0x2b0
 8004420:	42af      	cmp	r7, r5
 8004422:	d064      	beq.n	80044ee <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xea>
        //fonction_strat_2
        //When bouton_strat_2 clicked call virtual function
        //Call strategie_2
        strategie_2();
    }
    if (&src == &bouton_strat_3)
 8004424:	f504 781a 	add.w	r8, r4, #616	@ 0x268
 8004428:	45a8      	cmp	r8, r5
 800442a:	f000 809f 	beq.w	800456c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>
        //fonction_strat_3
        //When bouton_strat_3 clicked call virtual function
        //Call strategie_3
        strategie_3();
    }
    if (&src == &bouton_strat_4)
 800442e:	f504 7908 	add.w	r9, r4, #544	@ 0x220
 8004432:	45a9      	cmp	r9, r5
 8004434:	f000 80d8 	beq.w	80045e8 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1e4>
        //fonction_strat_4
        //When bouton_strat_4 clicked call virtual function
        //Call strategie_4
        strategie_4();
    }
    if (&src == &bouton_strat_5)
 8004438:	f504 7ac8 	add.w	sl, r4, #400	@ 0x190
 800443c:	45aa      	cmp	sl, r5
 800443e:	f000 8108 	beq.w	8004652 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24e>
        //fonction_strat_5
        //When bouton_strat_5 clicked call virtual function
        //Call strategie_5
        strategie_5();
    }
    if (&src == &bouton_retour)
 8004442:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8004446:	429d      	cmp	r5, r3
 8004448:	f000 813f 	beq.w	80046ca <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2c6>
        //vers_home_2
        //When bouton_retour clicked change screen to Home
        //Go to Home with no screen transition
        application().gotoHomeScreenNoTransition();
    }
    if (&src == &bouton_strat_6)
 800444c:	f504 7bec 	add.w	fp, r4, #472	@ 0x1d8
 8004450:	45ab      	cmp	fp, r5
 8004452:	f000 813f 	beq.w	80046d4 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2d0>
        //When bouton_strat_6 clicked show bouton_valider
        //Show bouton_valider
        bouton_valider.setVisible(true);
        bouton_valider.invalidate();
    }
    if (&src == &bouton_valider)
 8004456:	f504 735f 	add.w	r3, r4, #892	@ 0x37c
 800445a:	429d      	cmp	r5, r3
 800445c:	f000 817d 	beq.w	800475a <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x356>
        //fonction_valider_strat
        //When bouton_valider clicked call virtual function
        //Call valider_strat
        valider_strat();
    }
}
 8004460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004464:	f016 fd96 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoHomeScreenNoTransition();
 8004468:	f001 fce4 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
 800446c:	e7d2      	b.n	8004414 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
    {
        color = col;
 800446e:	4bbf      	ldr	r3, [pc, #764]	@ (800476c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x368>)
 8004470:	f8c4 3334 	str.w	r3, [r4, #820]	@ 0x334
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
    {
        colorPressed = col;
 8004474:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004478:	f8c4 3338 	str.w	r3, [r4, #824]	@ 0x338
        bouton_strat_1.invalidate();
 800447c:	4630      	mov	r0, r6
 800447e:	f017 fe1c 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        visible = vis;
 8004482:	2301      	movs	r3, #1
 8004484:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
        bouton_valider.invalidate();
 8004488:	f504 705f 	add.w	r0, r4, #892	@ 0x37c
 800448c:	f017 fe15 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004490:	f04f 37ff 	mov.w	r7, #4294967295
 8004494:	f8c4 72ec 	str.w	r7, [r4, #748]	@ 0x2ec
        colorPressed = col;
 8004498:	f8c4 72f0 	str.w	r7, [r4, #752]	@ 0x2f0
        bouton_strat_2.invalidate();
 800449c:	f504 702c 	add.w	r0, r4, #688	@ 0x2b0
 80044a0:	f017 fe0b 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80044a4:	f8c4 72a4 	str.w	r7, [r4, #676]	@ 0x2a4
        colorPressed = col;
 80044a8:	f8c4 72a8 	str.w	r7, [r4, #680]	@ 0x2a8
        bouton_strat_3.invalidate();
 80044ac:	f504 701a 	add.w	r0, r4, #616	@ 0x268
 80044b0:	f017 fe03 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80044b4:	f8c4 725c 	str.w	r7, [r4, #604]	@ 0x25c
        colorPressed = col;
 80044b8:	f8c4 7260 	str.w	r7, [r4, #608]	@ 0x260
        bouton_strat_4.invalidate();
 80044bc:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 80044c0:	f017 fdfb 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80044c4:	f8c4 71cc 	str.w	r7, [r4, #460]	@ 0x1cc
        colorPressed = col;
 80044c8:	f8c4 71d0 	str.w	r7, [r4, #464]	@ 0x1d0
        bouton_strat_5.invalidate();
 80044cc:	f504 70c8 	add.w	r0, r4, #400	@ 0x190
 80044d0:	f017 fdf3 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80044d4:	f8c4 7214 	str.w	r7, [r4, #532]	@ 0x214
        colorPressed = col;
 80044d8:	f8c4 7218 	str.w	r7, [r4, #536]	@ 0x218
        bouton_strat_6.invalidate();
 80044dc:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 80044e0:	f017 fdeb 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        strategie_1();
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	4620      	mov	r0, r4
 80044ea:	4798      	blx	r3
 80044ec:	e796      	b.n	800441c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
        color = col;
 80044ee:	4b9f      	ldr	r3, [pc, #636]	@ (800476c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x368>)
 80044f0:	f8c4 32ec 	str.w	r3, [r4, #748]	@ 0x2ec
        colorPressed = col;
 80044f4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80044f8:	f8c4 32f0 	str.w	r3, [r4, #752]	@ 0x2f0
        bouton_strat_2.invalidate();
 80044fc:	4638      	mov	r0, r7
 80044fe:	f017 fddc 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
 8004502:	2301      	movs	r3, #1
 8004504:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
        bouton_valider.invalidate();
 8004508:	f504 705f 	add.w	r0, r4, #892	@ 0x37c
 800450c:	f017 fdd5 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004510:	f04f 38ff 	mov.w	r8, #4294967295
 8004514:	f8c4 8334 	str.w	r8, [r4, #820]	@ 0x334
        colorPressed = col;
 8004518:	f8c4 8338 	str.w	r8, [r4, #824]	@ 0x338
        bouton_strat_1.invalidate();
 800451c:	4630      	mov	r0, r6
 800451e:	f017 fdcc 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004522:	f8c4 82a4 	str.w	r8, [r4, #676]	@ 0x2a4
        colorPressed = col;
 8004526:	f8c4 82a8 	str.w	r8, [r4, #680]	@ 0x2a8
        bouton_strat_3.invalidate();
 800452a:	f504 701a 	add.w	r0, r4, #616	@ 0x268
 800452e:	f017 fdc4 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004532:	f8c4 825c 	str.w	r8, [r4, #604]	@ 0x25c
        colorPressed = col;
 8004536:	f8c4 8260 	str.w	r8, [r4, #608]	@ 0x260
        bouton_strat_4.invalidate();
 800453a:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800453e:	f017 fdbc 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004542:	f8c4 81cc 	str.w	r8, [r4, #460]	@ 0x1cc
        colorPressed = col;
 8004546:	f8c4 81d0 	str.w	r8, [r4, #464]	@ 0x1d0
        bouton_strat_5.invalidate();
 800454a:	f504 70c8 	add.w	r0, r4, #400	@ 0x190
 800454e:	f017 fdb4 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004552:	f8c4 8214 	str.w	r8, [r4, #532]	@ 0x214
        colorPressed = col;
 8004556:	f8c4 8218 	str.w	r8, [r4, #536]	@ 0x218
        bouton_strat_6.invalidate();
 800455a:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 800455e:	f017 fdac 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        strategie_2();
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004566:	4620      	mov	r0, r4
 8004568:	4798      	blx	r3
 800456a:	e75b      	b.n	8004424 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
        color = col;
 800456c:	4b7f      	ldr	r3, [pc, #508]	@ (800476c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x368>)
 800456e:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        colorPressed = col;
 8004572:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004576:	f8c4 32a8 	str.w	r3, [r4, #680]	@ 0x2a8
        bouton_strat_3.invalidate();
 800457a:	4640      	mov	r0, r8
 800457c:	f017 fd9d 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
 8004580:	2301      	movs	r3, #1
 8004582:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
        bouton_valider.invalidate();
 8004586:	f504 705f 	add.w	r0, r4, #892	@ 0x37c
 800458a:	f017 fd96 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800458e:	f04f 39ff 	mov.w	r9, #4294967295
 8004592:	f8c4 9334 	str.w	r9, [r4, #820]	@ 0x334
        colorPressed = col;
 8004596:	f8c4 9338 	str.w	r9, [r4, #824]	@ 0x338
        bouton_strat_1.invalidate();
 800459a:	4630      	mov	r0, r6
 800459c:	f017 fd8d 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80045a0:	f8c4 92ec 	str.w	r9, [r4, #748]	@ 0x2ec
        colorPressed = col;
 80045a4:	f8c4 92f0 	str.w	r9, [r4, #752]	@ 0x2f0
        bouton_strat_2.invalidate();
 80045a8:	4638      	mov	r0, r7
 80045aa:	f017 fd86 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80045ae:	f8c4 925c 	str.w	r9, [r4, #604]	@ 0x25c
        colorPressed = col;
 80045b2:	f8c4 9260 	str.w	r9, [r4, #608]	@ 0x260
        bouton_strat_4.invalidate();
 80045b6:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 80045ba:	f017 fd7e 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80045be:	f8c4 91cc 	str.w	r9, [r4, #460]	@ 0x1cc
        colorPressed = col;
 80045c2:	f8c4 91d0 	str.w	r9, [r4, #464]	@ 0x1d0
        bouton_strat_5.invalidate();
 80045c6:	f504 70c8 	add.w	r0, r4, #400	@ 0x190
 80045ca:	f017 fd76 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80045ce:	f8c4 9214 	str.w	r9, [r4, #532]	@ 0x214
        colorPressed = col;
 80045d2:	f8c4 9218 	str.w	r9, [r4, #536]	@ 0x218
        bouton_strat_6.invalidate();
 80045d6:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 80045da:	f017 fd6e 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        strategie_3();
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	4620      	mov	r0, r4
 80045e4:	4798      	blx	r3
 80045e6:	e722      	b.n	800442e <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>
        color = col;
 80045e8:	4b60      	ldr	r3, [pc, #384]	@ (800476c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x368>)
 80045ea:	f8c4 325c 	str.w	r3, [r4, #604]	@ 0x25c
        colorPressed = col;
 80045ee:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80045f2:	f8c4 3260 	str.w	r3, [r4, #608]	@ 0x260
        bouton_strat_4.invalidate();
 80045f6:	4648      	mov	r0, r9
 80045f8:	f017 fd5f 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
 80045fc:	2301      	movs	r3, #1
 80045fe:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
        bouton_valider.invalidate();
 8004602:	f504 705f 	add.w	r0, r4, #892	@ 0x37c
 8004606:	f017 fd58 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800460a:	f04f 3aff 	mov.w	sl, #4294967295
 800460e:	f8c4 a334 	str.w	sl, [r4, #820]	@ 0x334
        colorPressed = col;
 8004612:	f8c4 a338 	str.w	sl, [r4, #824]	@ 0x338
        bouton_strat_1.invalidate();
 8004616:	4630      	mov	r0, r6
 8004618:	f017 fd4f 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800461c:	f8c4 a2ec 	str.w	sl, [r4, #748]	@ 0x2ec
        colorPressed = col;
 8004620:	f8c4 a2f0 	str.w	sl, [r4, #752]	@ 0x2f0
        bouton_strat_2.invalidate();
 8004624:	4638      	mov	r0, r7
 8004626:	f017 fd48 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800462a:	f8c4 a2a4 	str.w	sl, [r4, #676]	@ 0x2a4
        colorPressed = col;
 800462e:	f8c4 a2a8 	str.w	sl, [r4, #680]	@ 0x2a8
        bouton_strat_3.invalidate();
 8004632:	4640      	mov	r0, r8
 8004634:	f017 fd41 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004638:	f8c4 a1cc 	str.w	sl, [r4, #460]	@ 0x1cc
        colorPressed = col;
 800463c:	f8c4 a1d0 	str.w	sl, [r4, #464]	@ 0x1d0
        bouton_strat_5.invalidate();
 8004640:	f504 70c8 	add.w	r0, r4, #400	@ 0x190
 8004644:	f017 fd39 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        strategie_4();
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464c:	4620      	mov	r0, r4
 800464e:	4798      	blx	r3
 8004650:	e6f2      	b.n	8004438 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x34>
        color = col;
 8004652:	4b46      	ldr	r3, [pc, #280]	@ (800476c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x368>)
 8004654:	f8c4 31cc 	str.w	r3, [r4, #460]	@ 0x1cc
        colorPressed = col;
 8004658:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800465c:	f8c4 31d0 	str.w	r3, [r4, #464]	@ 0x1d0
        bouton_strat_5.invalidate();
 8004660:	4650      	mov	r0, sl
 8004662:	f017 fd2a 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
 8004666:	2301      	movs	r3, #1
 8004668:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
        bouton_valider.invalidate();
 800466c:	f504 705f 	add.w	r0, r4, #892	@ 0x37c
 8004670:	f017 fd23 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004674:	f04f 3bff 	mov.w	fp, #4294967295
 8004678:	f8c4 b334 	str.w	fp, [r4, #820]	@ 0x334
        colorPressed = col;
 800467c:	f8c4 b338 	str.w	fp, [r4, #824]	@ 0x338
        bouton_strat_1.invalidate();
 8004680:	4630      	mov	r0, r6
 8004682:	f017 fd1a 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004686:	f8c4 b2ec 	str.w	fp, [r4, #748]	@ 0x2ec
        colorPressed = col;
 800468a:	f8c4 b2f0 	str.w	fp, [r4, #752]	@ 0x2f0
        bouton_strat_2.invalidate();
 800468e:	4638      	mov	r0, r7
 8004690:	f017 fd13 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8004694:	f8c4 b2a4 	str.w	fp, [r4, #676]	@ 0x2a4
        colorPressed = col;
 8004698:	f8c4 b2a8 	str.w	fp, [r4, #680]	@ 0x2a8
        bouton_strat_3.invalidate();
 800469c:	4640      	mov	r0, r8
 800469e:	f017 fd0c 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80046a2:	f8c4 b25c 	str.w	fp, [r4, #604]	@ 0x25c
        colorPressed = col;
 80046a6:	f8c4 b260 	str.w	fp, [r4, #608]	@ 0x260
        bouton_strat_4.invalidate();
 80046aa:	4648      	mov	r0, r9
 80046ac:	f017 fd05 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80046b0:	f8c4 b214 	str.w	fp, [r4, #532]	@ 0x214
        colorPressed = col;
 80046b4:	f8c4 b218 	str.w	fp, [r4, #536]	@ 0x218
        bouton_strat_6.invalidate();
 80046b8:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 80046bc:	f017 fcfd 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        strategie_5();
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	4620      	mov	r0, r4
 80046c6:	4798      	blx	r3
 80046c8:	e6bb      	b.n	8004442 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
 80046ca:	f016 fc63 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoHomeScreenNoTransition();
 80046ce:	f001 fbb1 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
 80046d2:	e6bb      	b.n	800444c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x48>
        color = col;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
 80046d8:	f8c4 3334 	str.w	r3, [r4, #820]	@ 0x334
        colorPressed = col;
 80046dc:	f8c4 3338 	str.w	r3, [r4, #824]	@ 0x338
        bouton_strat_1.invalidate();
 80046e0:	4630      	mov	r0, r6
 80046e2:	f017 fcea 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	f8c4 32ec 	str.w	r3, [r4, #748]	@ 0x2ec
        colorPressed = col;
 80046ee:	f8c4 32f0 	str.w	r3, [r4, #752]	@ 0x2f0
        bouton_strat_2.invalidate();
 80046f2:	4638      	mov	r0, r7
 80046f4:	f017 fce1 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        colorPressed = col;
 8004700:	f8c4 32a8 	str.w	r3, [r4, #680]	@ 0x2a8
        bouton_strat_3.invalidate();
 8004704:	4640      	mov	r0, r8
 8004706:	f017 fcd8 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	f8c4 325c 	str.w	r3, [r4, #604]	@ 0x25c
        colorPressed = col;
 8004712:	f8c4 3260 	str.w	r3, [r4, #608]	@ 0x260
        bouton_strat_4.invalidate();
 8004716:	4648      	mov	r0, r9
 8004718:	f017 fccf 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800471c:	f04f 33ff 	mov.w	r3, #4294967295
 8004720:	f8c4 31cc 	str.w	r3, [r4, #460]	@ 0x1cc
        colorPressed = col;
 8004724:	f8c4 31d0 	str.w	r3, [r4, #464]	@ 0x1d0
        bouton_strat_5.invalidate();
 8004728:	4650      	mov	r0, sl
 800472a:	f017 fcc6 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x368>)
 8004730:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
        colorPressed = col;
 8004734:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004738:	f8c4 3218 	str.w	r3, [r4, #536]	@ 0x218
        bouton_strat_6.invalidate();
 800473c:	4658      	mov	r0, fp
 800473e:	f017 fcbc 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        strategie_6();
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	4620      	mov	r0, r4
 8004748:	4798      	blx	r3
 800474a:	2301      	movs	r3, #1
 800474c:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
        bouton_valider.invalidate();
 8004750:	f504 705f 	add.w	r0, r4, #892	@ 0x37c
 8004754:	f017 fcb1 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
 8004758:	e67d      	b.n	8004456 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x52>
 800475a:	f016 fc1b 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoRobot_pretScreenNoTransition();
 800475e:	f001 fb89 	bl	8005e74 <_ZN23FrontendApplicationBase32gotoRobot_pretScreenNoTransitionEv>
        valider_strat();
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	4620      	mov	r0, r4
 8004768:	4798      	blx	r3
}
 800476a:	e679      	b.n	8004460 <_ZN23Choix_strategieViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5c>
 800476c:	ffeb1e1e 	.word	0xffeb1e1e

08004770 <_ZN23Choix_strategieViewBaseC1Ev>:
Choix_strategieViewBase::Choix_strategieViewBase() :
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	b0ab      	sub	sp, #172	@ 0xac
 8004776:	4604      	mov	r4, r0
template <class T>
class View : public Screen
{
public:
    View()
        : presenter(0)
 8004778:	f018 fb18 	bl	801cdac <_ZN8touchgfx6ScreenC1Ev>
 800477c:	2500      	movs	r5, #0
 800477e:	63e5      	str	r5, [r4, #60]	@ 0x3c
    buttonCallback(this, &Choix_strategieViewBase::buttonCallbackHandler)
 8004780:	4627      	mov	r7, r4
 8004782:	4bde      	ldr	r3, [pc, #888]	@ (8004afc <_ZN23Choix_strategieViewBaseC1Ev+0x38c>)
 8004784:	f847 3b40 	str.w	r3, [r7], #64
 8004788:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 800478c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8004790:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8004794:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8004798:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 800479c:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 80047a0:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 80047a4:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          parent(0),
 80047a8:	6565      	str	r5, [r4, #84]	@ 0x54
          nextSibling(0),
 80047aa:	65a5      	str	r5, [r4, #88]	@ 0x58
          nextDrawChainElement(0),
 80047ac:	65e5      	str	r5, [r4, #92]	@ 0x5c
          cachedAbsX(0),
 80047ae:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
          cachedAbsY(0),
 80047b2:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
          touchable(false),
 80047b6:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
          visible(true)
 80047ba:	f04f 0901 	mov.w	r9, #1
 80047be:	f884 9065 	strb.w	r9, [r4, #101]	@ 0x65
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80047c2:	4bcf      	ldr	r3, [pc, #828]	@ (8004b00 <_ZN23Choix_strategieViewBaseC1Ev+0x390>)
 80047c4:	6423      	str	r3, [r4, #64]	@ 0x40
 80047c6:	26ff      	movs	r6, #255	@ 0xff
 80047c8:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
        : color(col)
 80047cc:	66a5      	str	r5, [r4, #104]	@ 0x68
 80047ce:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
        : x(0), y(0), width(0), height(0)
 80047d2:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 80047d6:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 80047da:	f8a4 5074 	strh.w	r5, [r4, #116]	@ 0x74
 80047de:	f8a4 5076 	strh.w	r5, [r4, #118]	@ 0x76
 80047e2:	f8a4 5078 	strh.w	r5, [r4, #120]	@ 0x78
 80047e6:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 80047ea:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
 80047ee:	f8a4 507e 	strh.w	r5, [r4, #126]	@ 0x7e
          parent(0),
 80047f2:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
          nextSibling(0),
 80047f6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          nextDrawChainElement(0),
 80047fa:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
          cachedAbsX(0),
 80047fe:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
          cachedAbsY(0),
 8004802:	f8a4 508e 	strh.w	r5, [r4, #142]	@ 0x8e
          touchable(false),
 8004806:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
          visible(true)
 800480a:	f884 9091 	strb.w	r9, [r4, #145]	@ 0x91
 800480e:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8004810:	f884 6092 	strb.w	r6, [r4, #146]	@ 0x92
        : color(col)
 8004814:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8004818:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 800481c:	4640      	mov	r0, r8
 800481e:	f013 fe8f 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8004822:	f104 0ad4 	add.w	sl, r4, #212	@ 0xd4
        : x(0), y(0), width(0), height(0)
 8004826:	f8a4 50d8 	strh.w	r5, [r4, #216]	@ 0xd8
 800482a:	f8a4 50da 	strh.w	r5, [r4, #218]	@ 0xda
 800482e:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 8004832:	f8a4 50de 	strh.w	r5, [r4, #222]	@ 0xde
 8004836:	f8a4 50e0 	strh.w	r5, [r4, #224]	@ 0xe0
 800483a:	f8a4 50e2 	strh.w	r5, [r4, #226]	@ 0xe2
 800483e:	f8a4 50e4 	strh.w	r5, [r4, #228]	@ 0xe4
 8004842:	f8a4 50e6 	strh.w	r5, [r4, #230]	@ 0xe6
          parent(0),
 8004846:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
          nextSibling(0),
 800484a:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
          nextDrawChainElement(0),
 800484e:	f8c4 50f0 	str.w	r5, [r4, #240]	@ 0xf0
          cachedAbsX(0),
 8004852:	f8a4 50f4 	strh.w	r5, [r4, #244]	@ 0xf4
          cachedAbsY(0),
 8004856:	f8a4 50f6 	strh.w	r5, [r4, #246]	@ 0xf6
          touchable(false),
 800485a:	f884 50f8 	strb.w	r5, [r4, #248]	@ 0xf8
          visible(true)
 800485e:	f884 90f9 	strb.w	r9, [r4, #249]	@ 0xf9
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004862:	4aa8      	ldr	r2, [pc, #672]	@ (8004b04 <_ZN23Choix_strategieViewBaseC1Ev+0x394>)
 8004864:	f8c4 20d4 	str.w	r2, [r4, #212]	@ 0xd4
        : typedTextId(id)
 8004868:	49a7      	ldr	r1, [pc, #668]	@ (8004b08 <_ZN23Choix_strategieViewBaseC1Ev+0x398>)
 800486a:	f8c4 10fc 	str.w	r1, [r4, #252]	@ 0xfc
 800486e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004872:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
        : color(col)
 8004876:	f8c4 5104 	str.w	r5, [r4, #260]	@ 0x104
 800487a:	f8a4 5108 	strh.w	r5, [r4, #264]	@ 0x108
 800487e:	f884 610a 	strb.w	r6, [r4, #266]	@ 0x10a
 8004882:	f884 510b 	strb.w	r5, [r4, #267]	@ 0x10b
 8004886:	f884 510c 	strb.w	r5, [r4, #268]	@ 0x10c
 800488a:	f884 510d 	strb.w	r5, [r4, #269]	@ 0x10d
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800488e:	f8a4 5110 	strh.w	r5, [r4, #272]	@ 0x110
 8004892:	f8a4 5112 	strh.w	r5, [r4, #274]	@ 0x112
 8004896:	f8a4 3114 	strh.w	r3, [r4, #276]	@ 0x114
 800489a:	f8a4 3116 	strh.w	r3, [r4, #278]	@ 0x116
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800489e:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 80048a2:	f504 708e 	add.w	r0, r4, #284	@ 0x11c
 80048a6:	900a      	str	r0, [sp, #40]	@ 0x28
        : x(0), y(0), width(0), height(0)
 80048a8:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 80048ac:	f8a4 5122 	strh.w	r5, [r4, #290]	@ 0x122
 80048b0:	f8a4 5124 	strh.w	r5, [r4, #292]	@ 0x124
 80048b4:	f8a4 5126 	strh.w	r5, [r4, #294]	@ 0x126
 80048b8:	f8a4 5128 	strh.w	r5, [r4, #296]	@ 0x128
 80048bc:	f8a4 512a 	strh.w	r5, [r4, #298]	@ 0x12a
 80048c0:	f8a4 512c 	strh.w	r5, [r4, #300]	@ 0x12c
 80048c4:	f8a4 512e 	strh.w	r5, [r4, #302]	@ 0x12e
          parent(0),
 80048c8:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
          nextSibling(0),
 80048cc:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
          nextDrawChainElement(0),
 80048d0:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
          cachedAbsX(0),
 80048d4:	f8a4 513c 	strh.w	r5, [r4, #316]	@ 0x13c
          cachedAbsY(0),
 80048d8:	f8a4 513e 	strh.w	r5, [r4, #318]	@ 0x13e
          touchable(false),
 80048dc:	f884 5140 	strb.w	r5, [r4, #320]	@ 0x140
          visible(true)
 80048e0:	f884 9141 	strb.w	r9, [r4, #321]	@ 0x141
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80048e4:	f8c4 211c 	str.w	r2, [r4, #284]	@ 0x11c
 80048e8:	f8c4 1144 	str.w	r1, [r4, #324]	@ 0x144
 80048ec:	f8a4 3148 	strh.w	r3, [r4, #328]	@ 0x148
        : color(col)
 80048f0:	f8c4 514c 	str.w	r5, [r4, #332]	@ 0x14c
 80048f4:	f8a4 5150 	strh.w	r5, [r4, #336]	@ 0x150
 80048f8:	f884 3152 	strb.w	r3, [r4, #338]	@ 0x152
 80048fc:	f884 5153 	strb.w	r5, [r4, #339]	@ 0x153
 8004900:	f884 5154 	strb.w	r5, [r4, #340]	@ 0x154
 8004904:	f884 5155 	strb.w	r5, [r4, #341]	@ 0x155
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004908:	f8a4 5158 	strh.w	r5, [r4, #344]	@ 0x158
 800490c:	f8a4 515a 	strh.w	r5, [r4, #346]	@ 0x15a
 8004910:	f8a4 315c 	strh.w	r3, [r4, #348]	@ 0x15c
 8004914:	f8a4 315e 	strh.w	r3, [r4, #350]	@ 0x15e
              text(0)
 8004918:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
 800491c:	f504 76b2 	add.w	r6, r4, #356	@ 0x164
        : x(0), y(0), width(0), height(0)
 8004920:	f8a4 5168 	strh.w	r5, [r4, #360]	@ 0x168
 8004924:	f8a4 516a 	strh.w	r5, [r4, #362]	@ 0x16a
 8004928:	f8a4 516c 	strh.w	r5, [r4, #364]	@ 0x16c
 800492c:	f8a4 516e 	strh.w	r5, [r4, #366]	@ 0x16e
 8004930:	f8a4 5170 	strh.w	r5, [r4, #368]	@ 0x170
 8004934:	f8a4 5172 	strh.w	r5, [r4, #370]	@ 0x172
 8004938:	f8a4 5174 	strh.w	r5, [r4, #372]	@ 0x174
 800493c:	f8a4 5176 	strh.w	r5, [r4, #374]	@ 0x176
          parent(0),
 8004940:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
          nextSibling(0),
 8004944:	f8c4 517c 	str.w	r5, [r4, #380]	@ 0x17c
          nextDrawChainElement(0),
 8004948:	f8c4 5180 	str.w	r5, [r4, #384]	@ 0x180
          cachedAbsX(0),
 800494c:	f8a4 5184 	strh.w	r5, [r4, #388]	@ 0x184
          cachedAbsY(0),
 8004950:	f8a4 5186 	strh.w	r5, [r4, #390]	@ 0x186
          touchable(false),
 8004954:	f884 5188 	strb.w	r5, [r4, #392]	@ 0x188
          visible(true)
 8004958:	f884 9189 	strb.w	r9, [r4, #393]	@ 0x189
class Container : public Drawable
{
public:
    Container()
        : Drawable(),
          firstChild(0)
 800495c:	4b6b      	ldr	r3, [pc, #428]	@ (8004b0c <_ZN23Choix_strategieViewBaseC1Ev+0x39c>)
 800495e:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
 8004962:	f8c4 518c 	str.w	r5, [r4, #396]	@ 0x18c
 8004966:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
 800496a:	9303      	str	r3, [sp, #12]
 800496c:	4618      	mov	r0, r3
 800496e:	f013 ff45 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004972:	f504 72ec 	add.w	r2, r4, #472	@ 0x1d8
 8004976:	9204      	str	r2, [sp, #16]
 8004978:	4610      	mov	r0, r2
 800497a:	f013 ff3f 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800497e:	f504 7208 	add.w	r2, r4, #544	@ 0x220
 8004982:	9205      	str	r2, [sp, #20]
 8004984:	4610      	mov	r0, r2
 8004986:	f013 ff39 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800498a:	f504 721a 	add.w	r2, r4, #616	@ 0x268
 800498e:	9206      	str	r2, [sp, #24]
 8004990:	4610      	mov	r0, r2
 8004992:	f013 ff33 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004996:	f504 722c 	add.w	r2, r4, #688	@ 0x2b0
 800499a:	9207      	str	r2, [sp, #28]
 800499c:	4610      	mov	r0, r2
 800499e:	f013 ff2d 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049a2:	f504 723e 	add.w	r2, r4, #760	@ 0x2f8
 80049a6:	9208      	str	r2, [sp, #32]
 80049a8:	4610      	mov	r0, r2
 80049aa:	f013 ff27 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80049ae:	f504 7250 	add.w	r2, r4, #832	@ 0x340
 80049b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80049b4:	4610      	mov	r0, r2
 80049b6:	f013 fdc3 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80049ba:	f504 725f 	add.w	r2, r4, #892	@ 0x37c
 80049be:	9209      	str	r2, [sp, #36]	@ 0x24
 80049c0:	4610      	mov	r0, r2
 80049c2:	f013 ff1b 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80049c6:	4b52      	ldr	r3, [pc, #328]	@ (8004b10 <_ZN23Choix_strategieViewBaseC1Ev+0x3a0>)
 80049c8:	f8c4 33c4 	str.w	r3, [r4, #964]	@ 0x3c4
 80049cc:	f8c4 43c8 	str.w	r4, [r4, #968]	@ 0x3c8
 80049d0:	4b50      	ldr	r3, [pc, #320]	@ (8004b14 <_ZN23Choix_strategieViewBaseC1Ev+0x3a4>)
 80049d2:	f8c4 33cc 	str.w	r3, [r4, #972]	@ 0x3cc
 80049d6:	f8c4 53d0 	str.w	r5, [r4, #976]	@ 0x3d0
        setX(x);
 80049da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	4629      	mov	r1, r5
 80049e0:	4638      	mov	r0, r7
 80049e2:	4798      	blx	r3
        setY(y);
 80049e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e8:	4629      	mov	r1, r5
 80049ea:	4638      	mov	r0, r7
 80049ec:	4798      	blx	r3
        setWidth(width);
 80049ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80049f6:	4638      	mov	r0, r7
 80049f8:	4798      	blx	r3
        setHeight(height);
 80049fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fe:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004a02:	4638      	mov	r0, r7
 8004a04:	4798      	blx	r3
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004a06:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004a0a:	66a3      	str	r3, [r4, #104]	@ 0x68
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004a0c:	f104 0904 	add.w	r9, r4, #4
 8004a10:	4639      	mov	r1, r7
 8004a12:	4648      	mov	r0, r9
 8004a14:	f00f fbce 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004a18:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4658      	mov	r0, fp
 8004a20:	4798      	blx	r3
        setY(y);
 8004a22:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a26:	4629      	mov	r1, r5
 8004a28:	4658      	mov	r0, fp
 8004a2a:	4798      	blx	r3
        setWidth(width);
 8004a2c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8004a34:	4658      	mov	r0, fp
 8004a36:	4798      	blx	r3
        setHeight(height);
 8004a38:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004a40:	4658      	mov	r0, fp
 8004a42:	4798      	blx	r3
 8004a44:	4b34      	ldr	r3, [pc, #208]	@ (8004b18 <_ZN23Choix_strategieViewBaseC1Ev+0x3a8>)
 8004a46:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8004a4a:	4659      	mov	r1, fp
 8004a4c:	4648      	mov	r0, r9
 8004a4e:	f00f fbb1 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004a52:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4798      	blx	r3
        setY(y);
 8004a5e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8004a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a64:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8004a68:	4640      	mov	r0, r8
 8004a6a:	4798      	blx	r3
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8004a72:	2303      	movs	r3, #3
 8004a74:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8004a78:	230c      	movs	r3, #12
 8004a7a:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8004a7e:	f04f 0b0a 	mov.w	fp, #10
 8004a82:	f8ad b04c 	strh.w	fp, [sp, #76]	@ 0x4c
    bouton_retour.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REPLY_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8004a86:	ab13      	add	r3, sp, #76	@ 0x4c
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	ab12      	add	r3, sp, #72	@ 0x48
 8004a8c:	aa11      	add	r2, sp, #68	@ 0x44
 8004a8e:	a910      	add	r1, sp, #64	@ 0x40
 8004a90:	4640      	mov	r0, r8
 8004a92:	f013 fcc0 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 8004a96:	2305      	movs	r3, #5
 8004a98:	f8a4 30d0 	strh.w	r3, [r4, #208]	@ 0xd0
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
    {
        iconY = y;
 8004a9c:	f8a4 30d2 	strh.w	r3, [r4, #210]	@ 0xd2
    bouton_retour.setAction(buttonCallback);
 8004aa0:	f504 7771 	add.w	r7, r4, #964	@ 0x3c4
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004aa4:	f8c4 70c0 	str.w	r7, [r4, #192]	@ 0xc0
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	4648      	mov	r0, r9
 8004aac:	f00f fb82 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004ab0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	f240 215f 	movw	r1, #607	@ 0x25f
 8004aba:	4650      	mov	r0, sl
 8004abc:	4798      	blx	r3
        setY(y);
 8004abe:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	4650      	mov	r0, sl
 8004ac8:	4798      	blx	r3
        color = newColor;
 8004aca:	f04f 3bff 	mov.w	fp, #4294967295
 8004ace:	f8c4 b104 	str.w	fp, [r4, #260]	@ 0x104
        linespace = space;
 8004ad2:	f8a4 5108 	strh.w	r5, [r4, #264]	@ 0x108
        boundingArea = calculateBoundingArea();
 8004ad6:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8004ada:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8004ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	4798      	blx	r3
 8004ae8:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8004aec:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004af0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004af4:	4904      	ldr	r1, [pc, #16]	@ (8004b08 <_ZN23Choix_strategieViewBaseC1Ev+0x398>)
 8004af6:	9114      	str	r1, [sp, #80]	@ 0x50
 8004af8:	231a      	movs	r3, #26
 8004afa:	e00f      	b.n	8004b1c <_ZN23Choix_strategieViewBaseC1Ev+0x3ac>
 8004afc:	0802c684 	.word	0x0802c684
 8004b00:	0802e1ec 	.word	0x0802e1ec
 8004b04:	0802e15c 	.word	0x0802e15c
 8004b08:	0802c65c 	.word	0x0802c65c
 8004b0c:	0802ddc8 	.word	0x0802ddc8
 8004b10:	0802c66c 	.word	0x0802c66c
 8004b14:	08004405 	.word	0x08004405
 8004b18:	ff63003b 	.word	0xff63003b
 8004b1c:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
    texte_mode_competition.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZH0S));
 8004b20:	a914      	add	r1, sp, #80	@ 0x50
 8004b22:	4650      	mov	r0, sl
 8004b24:	f013 fb44 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004b28:	4651      	mov	r1, sl
 8004b2a:	4648      	mov	r0, r9
 8004b2c:	f00f fb42 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004b30:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	21b2      	movs	r1, #178	@ 0xb2
 8004b38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b3c:	4650      	mov	r0, sl
 8004b3e:	4798      	blx	r3
        setY(y);
 8004b40:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	2130      	movs	r1, #48	@ 0x30
 8004b48:	4650      	mov	r0, sl
 8004b4a:	4798      	blx	r3
        color = newColor;
 8004b4c:	f8c4 b14c 	str.w	fp, [r4, #332]	@ 0x14c
        linespace = space;
 8004b50:	f8a4 5150 	strh.w	r5, [r4, #336]	@ 0x150
        boundingArea = calculateBoundingArea();
 8004b54:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8004b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	4640      	mov	r0, r8
 8004b60:	4798      	blx	r3
 8004b62:	f504 73ac 	add.w	r3, r4, #344	@ 0x158
 8004b66:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004b6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b6e:	4b94      	ldr	r3, [pc, #592]	@ (8004dc0 <_ZN23Choix_strategieViewBaseC1Ev+0x650>)
 8004b70:	9316      	str	r3, [sp, #88]	@ 0x58
 8004b72:	2319      	movs	r3, #25
 8004b74:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    texte_choix_strategie.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T2NW));
 8004b78:	a916      	add	r1, sp, #88	@ 0x58
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	f013 fb18 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004b80:	4651      	mov	r1, sl
 8004b82:	4648      	mov	r0, r9
 8004b84:	f00f fb16 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004b88:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	211e      	movs	r1, #30
 8004b90:	4630      	mov	r0, r6
 8004b92:	4798      	blx	r3
        setY(y);
 8004b94:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8004b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9a:	216f      	movs	r1, #111	@ 0x6f
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	4798      	blx	r3
        setWidth(width);
 8004ba0:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	f240 21e7 	movw	r1, #743	@ 0x2e7
 8004baa:	4630      	mov	r0, r6
 8004bac:	4798      	blx	r3
        setHeight(height);
 8004bae:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004bb8:	4630      	mov	r0, r6
 8004bba:	4798      	blx	r3
        setX(x);
 8004bbc:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	f240 1193 	movw	r1, #403	@ 0x193
 8004bc6:	9d03      	ldr	r5, [sp, #12]
 8004bc8:	4628      	mov	r0, r5
 8004bca:	4798      	blx	r3
        setY(y);
 8004bcc:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd2:	2177      	movs	r1, #119	@ 0x77
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	4798      	blx	r3
 8004bd8:	2307      	movs	r3, #7
 8004bda:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 8004bde:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
    bouton_strat_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 8004be2:	aa19      	add	r2, sp, #100	@ 0x64
 8004be4:	a918      	add	r1, sp, #96	@ 0x60
 8004be6:	4628      	mov	r0, r5
 8004be8:	f013 fb40 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004bec:	2314      	movs	r3, #20
 8004bee:	f8a4 31c8 	strh.w	r3, [r4, #456]	@ 0x1c8
        return typedTextId < numberOfTypedTexts;
 8004bf2:	4b74      	ldr	r3, [pc, #464]	@ (8004dc4 <_ZN23Choix_strategieViewBaseC1Ev+0x654>)
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
    {
        if (typedText.hasValidId())
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	2b14      	cmp	r3, #20
 8004bf8:	d92c      	bls.n	8004c54 <_ZN23Choix_strategieViewBaseC1Ev+0x4e4>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004bfa:	4b73      	ldr	r3, [pc, #460]	@ (8004dc8 <_ZN23Choix_strategieViewBaseC1Ev+0x658>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b31b      	cbz	r3, 8004c48 <_ZN23Choix_strategieViewBaseC1Ev+0x4d8>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004c00:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8004c04:	4b71      	ldr	r3, [pc, #452]	@ (8004dcc <_ZN23Choix_strategieViewBaseC1Ev+0x65c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004c0c:	2114      	movs	r1, #20
 8004c0e:	4b70      	ldr	r3, [pc, #448]	@ (8004dd0 <_ZN23Choix_strategieViewBaseC1Ev+0x660>)
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	f004 fa8d 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8004c16:	4682      	mov	sl, r0
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004c18:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	4640      	mov	r0, r8
 8004c20:	4798      	blx	r3
 8004c22:	4605      	mov	r5, r0
 8004c24:	f8d8 3000 	ldr.w	r3, [r8]
 8004c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	4798      	blx	r3
 8004c30:	fb15 f500 	smulbb	r5, r5, r0
 8004c34:	b2ad      	uxth	r5, r5
 8004c36:	f8d8 3000 	ldr.w	r3, [r8]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	4640      	mov	r0, r8
 8004c40:	4798      	blx	r3
 8004c42:	4405      	add	r5, r0
 8004c44:	b22d      	sxth	r5, r5
 8004c46:	e006      	b.n	8004c56 <_ZN23Choix_strategieViewBaseC1Ev+0x4e6>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004c48:	4b62      	ldr	r3, [pc, #392]	@ (8004dd4 <_ZN23Choix_strategieViewBaseC1Ev+0x664>)
 8004c4a:	4a63      	ldr	r2, [pc, #396]	@ (8004dd8 <_ZN23Choix_strategieViewBaseC1Ev+0x668>)
 8004c4c:	216c      	movs	r1, #108	@ 0x6c
 8004c4e:	4863      	ldr	r0, [pc, #396]	@ (8004ddc <_ZN23Choix_strategieViewBaseC1Ev+0x66c>)
 8004c50:	f024 fcbe 	bl	80295d0 <__assert_func>
 8004c54:	2500      	movs	r5, #0
 8004c56:	f8a4 51d6 	strh.w	r5, [r4, #470]	@ 0x1d6
        color = col;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5e:	f8c4 31cc 	str.w	r3, [r4, #460]	@ 0x1cc
        colorPressed = col;
 8004c62:	f8c4 31d0 	str.w	r3, [r4, #464]	@ 0x1d0
 8004c66:	f8c4 71b8 	str.w	r7, [r4, #440]	@ 0x1b8
    bloc_possibilites.add(bouton_strat_5);
 8004c6a:	9903      	ldr	r1, [sp, #12]
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f00f faa1 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004c72:	f8d4 31d8 	ldr.w	r3, [r4, #472]	@ 0x1d8
 8004c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c78:	f240 1193 	movw	r1, #403	@ 0x193
 8004c7c:	9d04      	ldr	r5, [sp, #16]
 8004c7e:	4628      	mov	r0, r5
 8004c80:	4798      	blx	r3
        setY(y);
 8004c82:	f8d4 31d8 	ldr.w	r3, [r4, #472]	@ 0x1d8
 8004c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c88:	21dc      	movs	r1, #220	@ 0xdc
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	4798      	blx	r3
 8004c8e:	2307      	movs	r3, #7
 8004c90:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
 8004c94:	f8ad 306c 	strh.w	r3, [sp, #108]	@ 0x6c
    bouton_strat_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 8004c98:	aa1b      	add	r2, sp, #108	@ 0x6c
 8004c9a:	a91a      	add	r1, sp, #104	@ 0x68
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f013 fae5 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004ca2:	2305      	movs	r3, #5
 8004ca4:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
        return typedTextId < numberOfTypedTexts;
 8004ca8:	4b46      	ldr	r3, [pc, #280]	@ (8004dc4 <_ZN23Choix_strategieViewBaseC1Ev+0x654>)
        if (typedText.hasValidId())
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	d92b      	bls.n	8004d08 <_ZN23Choix_strategieViewBaseC1Ev+0x598>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004cb0:	4b45      	ldr	r3, [pc, #276]	@ (8004dc8 <_ZN23Choix_strategieViewBaseC1Ev+0x658>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	b313      	cbz	r3, 8004cfc <_ZN23Choix_strategieViewBaseC1Ev+0x58c>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004cb6:	7a9a      	ldrb	r2, [r3, #10]
 8004cb8:	4b44      	ldr	r3, [pc, #272]	@ (8004dcc <_ZN23Choix_strategieViewBaseC1Ev+0x65c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004cc0:	2105      	movs	r1, #5
 8004cc2:	4b43      	ldr	r3, [pc, #268]	@ (8004dd0 <_ZN23Choix_strategieViewBaseC1Ev+0x660>)
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	f004 fa33 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8004cca:	4682      	mov	sl, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	4798      	blx	r3
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cde:	4651      	mov	r1, sl
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	4798      	blx	r3
 8004ce4:	fb15 f500 	smulbb	r5, r5, r0
 8004ce8:	b2ad      	uxth	r5, r5
 8004cea:	f8d8 3000 	ldr.w	r3, [r8]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	4798      	blx	r3
 8004cf6:	4405      	add	r5, r0
 8004cf8:	b22d      	sxth	r5, r5
 8004cfa:	e006      	b.n	8004d0a <_ZN23Choix_strategieViewBaseC1Ev+0x59a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004cfc:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <_ZN23Choix_strategieViewBaseC1Ev+0x664>)
 8004cfe:	4a36      	ldr	r2, [pc, #216]	@ (8004dd8 <_ZN23Choix_strategieViewBaseC1Ev+0x668>)
 8004d00:	216c      	movs	r1, #108	@ 0x6c
 8004d02:	4836      	ldr	r0, [pc, #216]	@ (8004ddc <_ZN23Choix_strategieViewBaseC1Ev+0x66c>)
 8004d04:	f024 fc64 	bl	80295d0 <__assert_func>
 8004d08:	2500      	movs	r5, #0
 8004d0a:	f8a4 521e 	strh.w	r5, [r4, #542]	@ 0x21e
        color = col;
 8004d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d12:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
        colorPressed = col;
 8004d16:	f8c4 3218 	str.w	r3, [r4, #536]	@ 0x218
 8004d1a:	f8c4 7200 	str.w	r7, [r4, #512]	@ 0x200
    bloc_possibilites.add(bouton_strat_6);
 8004d1e:	9904      	ldr	r1, [sp, #16]
 8004d20:	4630      	mov	r0, r6
 8004d22:	f00f fa47 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004d26:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	f240 1193 	movw	r1, #403	@ 0x193
 8004d30:	9d05      	ldr	r5, [sp, #20]
 8004d32:	4628      	mov	r0, r5
 8004d34:	4798      	blx	r3
        setY(y);
 8004d36:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3c:	2112      	movs	r1, #18
 8004d3e:	4628      	mov	r0, r5
 8004d40:	4798      	blx	r3
 8004d42:	2307      	movs	r3, #7
 8004d44:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 8004d48:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
    bouton_strat_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 8004d4c:	aa1d      	add	r2, sp, #116	@ 0x74
 8004d4e:	a91c      	add	r1, sp, #112	@ 0x70
 8004d50:	4628      	mov	r0, r5
 8004d52:	f013 fa8b 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004d56:	2315      	movs	r3, #21
 8004d58:	f8a4 3258 	strh.w	r3, [r4, #600]	@ 0x258
        return typedTextId < numberOfTypedTexts;
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <_ZN23Choix_strategieViewBaseC1Ev+0x654>)
        if (typedText.hasValidId())
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	2b15      	cmp	r3, #21
 8004d62:	d93d      	bls.n	8004de0 <_ZN23Choix_strategieViewBaseC1Ev+0x670>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004d64:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <_ZN23Choix_strategieViewBaseC1Ev+0x658>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	b31b      	cbz	r3, 8004db2 <_ZN23Choix_strategieViewBaseC1Ev+0x642>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004d6a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8004d6e:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <_ZN23Choix_strategieViewBaseC1Ev+0x65c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004d76:	2115      	movs	r1, #21
 8004d78:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <_ZN23Choix_strategieViewBaseC1Ev+0x660>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	f004 f9d8 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8004d80:	4682      	mov	sl, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004d82:	f8d8 3000 	ldr.w	r3, [r8]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4798      	blx	r3
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d94:	4651      	mov	r1, sl
 8004d96:	4640      	mov	r0, r8
 8004d98:	4798      	blx	r3
 8004d9a:	fb15 f500 	smulbb	r5, r5, r0
 8004d9e:	b2ad      	uxth	r5, r5
 8004da0:	f8d8 3000 	ldr.w	r3, [r8]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	4651      	mov	r1, sl
 8004da8:	4640      	mov	r0, r8
 8004daa:	4798      	blx	r3
 8004dac:	4405      	add	r5, r0
 8004dae:	b22d      	sxth	r5, r5
 8004db0:	e017      	b.n	8004de2 <_ZN23Choix_strategieViewBaseC1Ev+0x672>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004db2:	4b08      	ldr	r3, [pc, #32]	@ (8004dd4 <_ZN23Choix_strategieViewBaseC1Ev+0x664>)
 8004db4:	4a08      	ldr	r2, [pc, #32]	@ (8004dd8 <_ZN23Choix_strategieViewBaseC1Ev+0x668>)
 8004db6:	216c      	movs	r1, #108	@ 0x6c
 8004db8:	4808      	ldr	r0, [pc, #32]	@ (8004ddc <_ZN23Choix_strategieViewBaseC1Ev+0x66c>)
 8004dba:	f024 fc09 	bl	80295d0 <__assert_func>
 8004dbe:	bf00      	nop
 8004dc0:	0802c65c 	.word	0x0802c65c
 8004dc4:	24062214 	.word	0x24062214
 8004dc8:	24062210 	.word	0x24062210
 8004dcc:	24062218 	.word	0x24062218
 8004dd0:	2406221c 	.word	0x2406221c
 8004dd4:	0802c57c 	.word	0x0802c57c
 8004dd8:	0802c5c0 	.word	0x0802c5c0
 8004ddc:	0802c5fc 	.word	0x0802c5fc
 8004de0:	2500      	movs	r5, #0
 8004de2:	f8a4 5266 	strh.w	r5, [r4, #614]	@ 0x266
        color = col;
 8004de6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dea:	f8c4 325c 	str.w	r3, [r4, #604]	@ 0x25c
        colorPressed = col;
 8004dee:	f8c4 3260 	str.w	r3, [r4, #608]	@ 0x260
 8004df2:	f8c4 7248 	str.w	r7, [r4, #584]	@ 0x248
    bloc_possibilites.add(bouton_strat_4);
 8004df6:	9905      	ldr	r1, [sp, #20]
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f00f f9db 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004dfe:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	211e      	movs	r1, #30
 8004e06:	9d06      	ldr	r5, [sp, #24]
 8004e08:	4628      	mov	r0, r5
 8004e0a:	4798      	blx	r3
        setY(y);
 8004e0c:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 8004e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e12:	21dc      	movs	r1, #220	@ 0xdc
 8004e14:	4628      	mov	r0, r5
 8004e16:	4798      	blx	r3
 8004e18:	2307      	movs	r3, #7
 8004e1a:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
 8004e1e:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
    bouton_strat_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 8004e22:	aa1f      	add	r2, sp, #124	@ 0x7c
 8004e24:	a91e      	add	r1, sp, #120	@ 0x78
 8004e26:	4628      	mov	r0, r5
 8004e28:	f013 fa20 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004e2c:	2316      	movs	r3, #22
 8004e2e:	f8a4 32a0 	strh.w	r3, [r4, #672]	@ 0x2a0
        return typedTextId < numberOfTypedTexts;
 8004e32:	4bb6      	ldr	r3, [pc, #728]	@ (800510c <_ZN23Choix_strategieViewBaseC1Ev+0x99c>)
        if (typedText.hasValidId())
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	2b16      	cmp	r3, #22
 8004e38:	d92c      	bls.n	8004e94 <_ZN23Choix_strategieViewBaseC1Ev+0x724>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004e3a:	4bb5      	ldr	r3, [pc, #724]	@ (8005110 <_ZN23Choix_strategieViewBaseC1Ev+0x9a0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b31b      	cbz	r3, 8004e88 <_ZN23Choix_strategieViewBaseC1Ev+0x718>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004e40:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004e44:	4bb3      	ldr	r3, [pc, #716]	@ (8005114 <_ZN23Choix_strategieViewBaseC1Ev+0x9a4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004e4c:	2116      	movs	r1, #22
 8004e4e:	4bb2      	ldr	r3, [pc, #712]	@ (8005118 <_ZN23Choix_strategieViewBaseC1Ev+0x9a8>)
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	f004 f96d 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8004e56:	4682      	mov	sl, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004e58:	f8d8 3000 	ldr.w	r3, [r8]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	4640      	mov	r0, r8
 8004e60:	4798      	blx	r3
 8004e62:	4605      	mov	r5, r0
 8004e64:	f8d8 3000 	ldr.w	r3, [r8]
 8004e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e6a:	4651      	mov	r1, sl
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4798      	blx	r3
 8004e70:	fb15 f500 	smulbb	r5, r5, r0
 8004e74:	b2ad      	uxth	r5, r5
 8004e76:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4798      	blx	r3
 8004e82:	4405      	add	r5, r0
 8004e84:	b22d      	sxth	r5, r5
 8004e86:	e006      	b.n	8004e96 <_ZN23Choix_strategieViewBaseC1Ev+0x726>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004e88:	4ba4      	ldr	r3, [pc, #656]	@ (800511c <_ZN23Choix_strategieViewBaseC1Ev+0x9ac>)
 8004e8a:	4aa5      	ldr	r2, [pc, #660]	@ (8005120 <_ZN23Choix_strategieViewBaseC1Ev+0x9b0>)
 8004e8c:	216c      	movs	r1, #108	@ 0x6c
 8004e8e:	48a5      	ldr	r0, [pc, #660]	@ (8005124 <_ZN23Choix_strategieViewBaseC1Ev+0x9b4>)
 8004e90:	f024 fb9e 	bl	80295d0 <__assert_func>
 8004e94:	2500      	movs	r5, #0
 8004e96:	f8a4 52ae 	strh.w	r5, [r4, #686]	@ 0x2ae
        color = col;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        colorPressed = col;
 8004ea2:	f8c4 32a8 	str.w	r3, [r4, #680]	@ 0x2a8
 8004ea6:	f8c4 7290 	str.w	r7, [r4, #656]	@ 0x290
    bloc_possibilites.add(bouton_strat_3);
 8004eaa:	9906      	ldr	r1, [sp, #24]
 8004eac:	4630      	mov	r0, r6
 8004eae:	f00f f981 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004eb2:	f8d4 32b0 	ldr.w	r3, [r4, #688]	@ 0x2b0
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	211e      	movs	r1, #30
 8004eba:	9d07      	ldr	r5, [sp, #28]
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	4798      	blx	r3
        setY(y);
 8004ec0:	f8d4 32b0 	ldr.w	r3, [r4, #688]	@ 0x2b0
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec6:	2177      	movs	r1, #119	@ 0x77
 8004ec8:	4628      	mov	r0, r5
 8004eca:	4798      	blx	r3
 8004ecc:	2307      	movs	r3, #7
 8004ece:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8004ed2:	f8ad 3084 	strh.w	r3, [sp, #132]	@ 0x84
    bouton_strat_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 8004ed6:	aa21      	add	r2, sp, #132	@ 0x84
 8004ed8:	a920      	add	r1, sp, #128	@ 0x80
 8004eda:	4628      	mov	r0, r5
 8004edc:	f013 f9c6 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004ee0:	2317      	movs	r3, #23
 8004ee2:	f8a4 32e8 	strh.w	r3, [r4, #744]	@ 0x2e8
        return typedTextId < numberOfTypedTexts;
 8004ee6:	4b89      	ldr	r3, [pc, #548]	@ (800510c <_ZN23Choix_strategieViewBaseC1Ev+0x99c>)
        if (typedText.hasValidId())
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	2b17      	cmp	r3, #23
 8004eec:	d92c      	bls.n	8004f48 <_ZN23Choix_strategieViewBaseC1Ev+0x7d8>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004eee:	4b88      	ldr	r3, [pc, #544]	@ (8005110 <_ZN23Choix_strategieViewBaseC1Ev+0x9a0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	b31b      	cbz	r3, 8004f3c <_ZN23Choix_strategieViewBaseC1Ev+0x7cc>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004ef4:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8004ef8:	4b86      	ldr	r3, [pc, #536]	@ (8005114 <_ZN23Choix_strategieViewBaseC1Ev+0x9a4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004f00:	2117      	movs	r1, #23
 8004f02:	4b85      	ldr	r3, [pc, #532]	@ (8005118 <_ZN23Choix_strategieViewBaseC1Ev+0x9a8>)
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	f004 f913 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8004f0a:	4682      	mov	sl, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	4640      	mov	r0, r8
 8004f14:	4798      	blx	r3
 8004f16:	4605      	mov	r5, r0
 8004f18:	f8d8 3000 	ldr.w	r3, [r8]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1e:	4651      	mov	r1, sl
 8004f20:	4640      	mov	r0, r8
 8004f22:	4798      	blx	r3
 8004f24:	fb15 f500 	smulbb	r5, r5, r0
 8004f28:	b2ad      	uxth	r5, r5
 8004f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	4651      	mov	r1, sl
 8004f32:	4640      	mov	r0, r8
 8004f34:	4798      	blx	r3
 8004f36:	4405      	add	r5, r0
 8004f38:	b22d      	sxth	r5, r5
 8004f3a:	e006      	b.n	8004f4a <_ZN23Choix_strategieViewBaseC1Ev+0x7da>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004f3c:	4b77      	ldr	r3, [pc, #476]	@ (800511c <_ZN23Choix_strategieViewBaseC1Ev+0x9ac>)
 8004f3e:	4a78      	ldr	r2, [pc, #480]	@ (8005120 <_ZN23Choix_strategieViewBaseC1Ev+0x9b0>)
 8004f40:	216c      	movs	r1, #108	@ 0x6c
 8004f42:	4878      	ldr	r0, [pc, #480]	@ (8005124 <_ZN23Choix_strategieViewBaseC1Ev+0x9b4>)
 8004f44:	f024 fb44 	bl	80295d0 <__assert_func>
 8004f48:	2500      	movs	r5, #0
 8004f4a:	f8a4 52f6 	strh.w	r5, [r4, #758]	@ 0x2f6
        color = col;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	f8c4 32ec 	str.w	r3, [r4, #748]	@ 0x2ec
        colorPressed = col;
 8004f56:	f8c4 32f0 	str.w	r3, [r4, #752]	@ 0x2f0
 8004f5a:	f8c4 72d8 	str.w	r7, [r4, #728]	@ 0x2d8
    bloc_possibilites.add(bouton_strat_2);
 8004f5e:	9907      	ldr	r1, [sp, #28]
 8004f60:	4630      	mov	r0, r6
 8004f62:	f00f f927 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8004f66:	f8d4 32f8 	ldr.w	r3, [r4, #760]	@ 0x2f8
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	211e      	movs	r1, #30
 8004f6e:	9d08      	ldr	r5, [sp, #32]
 8004f70:	4628      	mov	r0, r5
 8004f72:	4798      	blx	r3
        setY(y);
 8004f74:	f8d4 32f8 	ldr.w	r3, [r4, #760]	@ 0x2f8
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	2112      	movs	r1, #18
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	4798      	blx	r3
 8004f80:	2307      	movs	r3, #7
 8004f82:	f8ad 3088 	strh.w	r3, [sp, #136]	@ 0x88
 8004f86:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
    bouton_strat_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 8004f8a:	aa23      	add	r2, sp, #140	@ 0x8c
 8004f8c:	a922      	add	r1, sp, #136	@ 0x88
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f013 f96c 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004f94:	2318      	movs	r3, #24
 8004f96:	f8a4 3330 	strh.w	r3, [r4, #816]	@ 0x330
        return typedTextId < numberOfTypedTexts;
 8004f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800510c <_ZN23Choix_strategieViewBaseC1Ev+0x99c>)
        if (typedText.hasValidId())
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	2b18      	cmp	r3, #24
 8004fa0:	d92c      	bls.n	8004ffc <_ZN23Choix_strategieViewBaseC1Ev+0x88c>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8005110 <_ZN23Choix_strategieViewBaseC1Ev+0x9a0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b31b      	cbz	r3, 8004ff0 <_ZN23Choix_strategieViewBaseC1Ev+0x880>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004fa8:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8004fac:	4b59      	ldr	r3, [pc, #356]	@ (8005114 <_ZN23Choix_strategieViewBaseC1Ev+0x9a4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004fb4:	2118      	movs	r1, #24
 8004fb6:	4b58      	ldr	r3, [pc, #352]	@ (8005118 <_ZN23Choix_strategieViewBaseC1Ev+0x9a8>)
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	f004 f8b9 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8004fbe:	4682      	mov	sl, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4798      	blx	r3
 8004fca:	4605      	mov	r5, r0
 8004fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	4798      	blx	r3
 8004fd8:	fb15 f500 	smulbb	r5, r5, r0
 8004fdc:	b2ad      	uxth	r5, r5
 8004fde:	f8d8 3000 	ldr.w	r3, [r8]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	4798      	blx	r3
 8004fea:	4405      	add	r5, r0
 8004fec:	b22d      	sxth	r5, r5
 8004fee:	e006      	b.n	8004ffe <_ZN23Choix_strategieViewBaseC1Ev+0x88e>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800511c <_ZN23Choix_strategieViewBaseC1Ev+0x9ac>)
 8004ff2:	4a4b      	ldr	r2, [pc, #300]	@ (8005120 <_ZN23Choix_strategieViewBaseC1Ev+0x9b0>)
 8004ff4:	216c      	movs	r1, #108	@ 0x6c
 8004ff6:	484b      	ldr	r0, [pc, #300]	@ (8005124 <_ZN23Choix_strategieViewBaseC1Ev+0x9b4>)
 8004ff8:	f024 faea 	bl	80295d0 <__assert_func>
 8004ffc:	2500      	movs	r5, #0
 8004ffe:	f8a4 533e 	strh.w	r5, [r4, #830]	@ 0x33e
        color = col;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	f8c4 3334 	str.w	r3, [r4, #820]	@ 0x334
        colorPressed = col;
 800500a:	f8c4 3338 	str.w	r3, [r4, #824]	@ 0x338
 800500e:	f8c4 7320 	str.w	r7, [r4, #800]	@ 0x320
    bloc_possibilites.add(bouton_strat_1);
 8005012:	9908      	ldr	r1, [sp, #32]
 8005014:	4630      	mov	r0, r6
 8005016:	f00f f8cd 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800501a:	4631      	mov	r1, r6
 800501c:	4648      	mov	r0, r9
 800501e:	f00f f8c9 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8005022:	f8d4 3340 	ldr.w	r3, [r4, #832]	@ 0x340
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	2100      	movs	r1, #0
 800502a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800502c:	4628      	mov	r0, r5
 800502e:	4798      	blx	r3
        setY(y);
 8005030:	f8d4 3340 	ldr.w	r3, [r4, #832]	@ 0x340
 8005034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005036:	2100      	movs	r1, #0
 8005038:	4628      	mov	r0, r5
 800503a:	4798      	blx	r3
 800503c:	2302      	movs	r3, #2
 800503e:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 8005042:	2303      	movs	r3, #3
 8005044:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 8005048:	230b      	movs	r3, #11
 800504a:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 800504e:	230a      	movs	r3, #10
 8005050:	f8ad 309c 	strh.w	r3, [sp, #156]	@ 0x9c
    bouton_home.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_HOME_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8005054:	ab27      	add	r3, sp, #156	@ 0x9c
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	ab26      	add	r3, sp, #152	@ 0x98
 800505a:	aa25      	add	r2, sp, #148	@ 0x94
 800505c:	a924      	add	r1, sp, #144	@ 0x90
 800505e:	4628      	mov	r0, r5
 8005060:	f013 f9d9 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8005064:	2305      	movs	r3, #5
 8005066:	f8a4 3378 	strh.w	r3, [r4, #888]	@ 0x378
        iconY = y;
 800506a:	f8a4 337a 	strh.w	r3, [r4, #890]	@ 0x37a
 800506e:	f8c4 7368 	str.w	r7, [r4, #872]	@ 0x368
 8005072:	4629      	mov	r1, r5
 8005074:	4648      	mov	r0, r9
 8005076:	f00f f89d 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800507a:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 800507e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005080:	f44f 710f 	mov.w	r1, #572	@ 0x23c
 8005084:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005086:	4628      	mov	r0, r5
 8005088:	4798      	blx	r3
        setY(y);
 800508a:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 800508e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005090:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8005094:	4628      	mov	r0, r5
 8005096:	4798      	blx	r3
 8005098:	2308      	movs	r3, #8
 800509a:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
 800509e:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
    bouton_valider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_SMALL_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_SMALL_ROUND_DISABLED_ID));
 80050a2:	aa29      	add	r2, sp, #164	@ 0xa4
 80050a4:	a928      	add	r1, sp, #160	@ 0xa0
 80050a6:	4628      	mov	r0, r5
 80050a8:	f013 f8e0 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 80050ac:	2306      	movs	r3, #6
 80050ae:	f8a4 33b4 	strh.w	r3, [r4, #948]	@ 0x3b4
        return typedTextId < numberOfTypedTexts;
 80050b2:	4b16      	ldr	r3, [pc, #88]	@ (800510c <_ZN23Choix_strategieViewBaseC1Ev+0x99c>)
        if (typedText.hasValidId())
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d936      	bls.n	8005128 <_ZN23Choix_strategieViewBaseC1Ev+0x9b8>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <_ZN23Choix_strategieViewBaseC1Ev+0x9a0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	b1fb      	cbz	r3, 8005100 <_ZN23Choix_strategieViewBaseC1Ev+0x990>
        return fonts[typedTexts[typedTextId].fontIdx];
 80050c0:	7b1a      	ldrb	r2, [r3, #12]
 80050c2:	4b14      	ldr	r3, [pc, #80]	@ (8005114 <_ZN23Choix_strategieViewBaseC1Ev+0x9a4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80050ca:	2106      	movs	r1, #6
 80050cc:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <_ZN23Choix_strategieViewBaseC1Ev+0x9a8>)
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	f004 f82e 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 80050d4:	4680      	mov	r8, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80050d6:	6833      	ldr	r3, [r6, #0]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	4630      	mov	r0, r6
 80050dc:	4798      	blx	r3
 80050de:	4605      	mov	r5, r0
 80050e0:	6833      	ldr	r3, [r6, #0]
 80050e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e4:	4641      	mov	r1, r8
 80050e6:	4630      	mov	r0, r6
 80050e8:	4798      	blx	r3
 80050ea:	fb15 f500 	smulbb	r5, r5, r0
 80050ee:	b2ad      	uxth	r5, r5
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	4641      	mov	r1, r8
 80050f6:	4630      	mov	r0, r6
 80050f8:	4798      	blx	r3
 80050fa:	4428      	add	r0, r5
 80050fc:	b200      	sxth	r0, r0
 80050fe:	e014      	b.n	800512a <_ZN23Choix_strategieViewBaseC1Ev+0x9ba>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005100:	4b06      	ldr	r3, [pc, #24]	@ (800511c <_ZN23Choix_strategieViewBaseC1Ev+0x9ac>)
 8005102:	4a07      	ldr	r2, [pc, #28]	@ (8005120 <_ZN23Choix_strategieViewBaseC1Ev+0x9b0>)
 8005104:	216c      	movs	r1, #108	@ 0x6c
 8005106:	4807      	ldr	r0, [pc, #28]	@ (8005124 <_ZN23Choix_strategieViewBaseC1Ev+0x9b4>)
 8005108:	f024 fa62 	bl	80295d0 <__assert_func>
 800510c:	24062214 	.word	0x24062214
 8005110:	24062210 	.word	0x24062210
 8005114:	24062218 	.word	0x24062218
 8005118:	2406221c 	.word	0x2406221c
 800511c:	0802c57c 	.word	0x0802c57c
 8005120:	0802c5c0 	.word	0x0802c5c0
 8005124:	0802c5fc 	.word	0x0802c5fc
 8005128:	2000      	movs	r0, #0
 800512a:	f8a4 03c2 	strh.w	r0, [r4, #962]	@ 0x3c2
        color = col;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295
 8005132:	f8c4 33b8 	str.w	r3, [r4, #952]	@ 0x3b8
        colorPressed = col;
 8005136:	f8c4 33bc 	str.w	r3, [r4, #956]	@ 0x3bc
        visible = vis;
 800513a:	2300      	movs	r3, #0
 800513c:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
 8005140:	f8c4 73a4 	str.w	r7, [r4, #932]	@ 0x3a4
 8005144:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005146:	4648      	mov	r0, r9
 8005148:	f00f f834 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800514c:	4620      	mov	r0, r4
 800514e:	b02b      	add	sp, #172	@ 0xac
 8005150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005154 <_ZN19Choix_testsViewBaseD1Ev>:
}

Choix_testsViewBase::~Choix_testsViewBase()
{

}
 8005154:	4770      	bx	lr

08005156 <_ZN19Choix_testsViewBase11setupScreenEv>:

void Choix_testsViewBase::setupScreen()
{

}
 8005156:	4770      	bx	lr

08005158 <_ZN8touchgfx8CallbackI19Choix_testsViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005158:	4770      	bx	lr

0800515a <_ZN8touchgfx8CallbackI19Choix_testsViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800515a:	b510      	push	{r4, lr}
 800515c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800515e:	68c2      	ldr	r2, [r0, #12]
 8005160:	6844      	ldr	r4, [r0, #4]
 8005162:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005166:	f012 0f01 	tst.w	r2, #1
 800516a:	d102      	bne.n	8005172 <_ZN8touchgfx8CallbackI19Choix_testsViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	4798      	blx	r3
    }
 8005170:	bd10      	pop	{r4, pc}
 8005172:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8005176:	f854 200c 	ldr.w	r2, [r4, ip]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	58d3      	ldr	r3, [r2, r3]
 800517e:	e7f6      	b.n	800516e <_ZN8touchgfx8CallbackI19Choix_testsViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x14>

08005180 <_ZNK8touchgfx8CallbackI19Choix_testsViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005180:	6843      	ldr	r3, [r0, #4]
 8005182:	b13b      	cbz	r3, 8005194 <_ZNK8touchgfx8CallbackI19Choix_testsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8005184:	6883      	ldr	r3, [r0, #8]
 8005186:	b10b      	cbz	r3, 800518c <_ZNK8touchgfx8CallbackI19Choix_testsViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 8005188:	2001      	movs	r0, #1
    }
 800518a:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 800518c:	68c0      	ldr	r0, [r0, #12]
 800518e:	f000 0001 	and.w	r0, r0, #1
 8005192:	4770      	bx	lr
 8005194:	2000      	movs	r0, #0
 8005196:	4770      	bx	lr

08005198 <_ZN8touchgfx8CallbackI19Choix_testsViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005198:	b510      	push	{r4, lr}
 800519a:	4604      	mov	r4, r0
 800519c:	2110      	movs	r1, #16
 800519e:	f023 fe9f 	bl	8028ee0 <_ZdlPvj>
 80051a2:	4620      	mov	r0, r4
 80051a4:	bd10      	pop	{r4, pc}

080051a6 <_ZN19Choix_testsViewBaseD0Ev>:
Choix_testsViewBase::~Choix_testsViewBase()
 80051a6:	b510      	push	{r4, lr}
 80051a8:	4604      	mov	r4, r0
}
 80051aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80051ae:	f023 fe97 	bl	8028ee0 <_ZdlPvj>
 80051b2:	4620      	mov	r0, r4
 80051b4:	bd10      	pop	{r4, pc}

080051b6 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Choix_testsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80051b6:	b538      	push	{r3, r4, r5, lr}
 80051b8:	4604      	mov	r4, r0
 80051ba:	460d      	mov	r5, r1
    if (&src == &bouton_home)
 80051bc:	f500 73b2 	add.w	r3, r0, #356	@ 0x164
 80051c0:	4299      	cmp	r1, r3
 80051c2:	d01c      	beq.n	80051fe <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x48>
        //vers_home
        //When bouton_home clicked change screen to Home
        //Go to Home with no screen transition
        application().gotoHomeScreenNoTransition();
    }
    if (&src == &bouton_moteurs)
 80051c4:	f504 7317 	add.w	r3, r4, #604	@ 0x25c
 80051c8:	429d      	cmp	r5, r3
 80051ca:	d01d      	beq.n	8005208 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x52>
        //vers_tests_moteurs
        //When bouton_moteurs clicked change screen to Tests_moteurs
        //Go to Tests_moteurs with no screen transition
        application().gotoTests_moteursScreenNoTransition();
    }
    if (&src == &bouton_lidar_1)
 80051cc:	f504 7305 	add.w	r3, r4, #532	@ 0x214
 80051d0:	429d      	cmp	r5, r3
 80051d2:	d01e      	beq.n	8005212 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5c>
        //vers_test_lidar_1
        //When bouton_lidar_1 clicked change screen to Test_lidar_bas
        //Go to Test_lidar_bas with no screen transition
        application().gotoTest_lidar_basScreenNoTransition();
    }
    if (&src == &bouton_lidar_2)
 80051d4:	f504 73e6 	add.w	r3, r4, #460	@ 0x1cc
 80051d8:	429d      	cmp	r5, r3
 80051da:	d01f      	beq.n	800521c <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
        //vers_test_lidar_2
        //When bouton_lidar_2 clicked change screen to Test_lidar_haut
        //Go to Test_lidar_haut with no screen transition
        application().gotoTest_lidar_hautScreenNoTransition();
    }
    if (&src == &bouton_retour)
 80051dc:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 80051e0:	429d      	cmp	r5, r3
 80051e2:	d020      	beq.n	8005226 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        //vers_home_2
        //When bouton_retour clicked change screen to Home
        //Go to Home with no screen transition
        application().gotoHomeScreenNoTransition();
    }
    if (&src == &button1)
 80051e4:	f504 7355 	add.w	r3, r4, #852	@ 0x354
 80051e8:	429d      	cmp	r5, r3
 80051ea:	d021      	beq.n	8005230 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x7a>
        //vers_test_moteurs_1
        //When button1 clicked change screen to Tests_moteurs
        //Go to Tests_moteurs with no screen transition
        application().gotoTests_moteursScreenNoTransition();
    }
    if (&src == &button1_1)
 80051ec:	f504 7362 	add.w	r3, r4, #904	@ 0x388
 80051f0:	429d      	cmp	r5, r3
 80051f2:	d022      	beq.n	800523a <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x84>
        //vers_test_lidar_1_1
        //When button1_1 clicked change screen to Test_lidar_bas
        //Go to Test_lidar_bas with no screen transition
        application().gotoTest_lidar_basScreenNoTransition();
    }
    if (&src == &button1_1_1)
 80051f4:	f504 746f 	add.w	r4, r4, #956	@ 0x3bc
 80051f8:	42a5      	cmp	r5, r4
 80051fa:	d023      	beq.n	8005244 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8e>
        //vers_test_lidar_2_1
        //When button1_1_1 clicked change screen to Test_lidar_haut
        //Go to Test_lidar_haut with no screen transition
        application().gotoTest_lidar_hautScreenNoTransition();
    }
}
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
    virtual ~Choix_testsViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80051fe:	f015 fec9 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoHomeScreenNoTransition();
 8005202:	f000 fe17 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
 8005206:	e7dd      	b.n	80051c4 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
 8005208:	f015 fec4 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoTests_moteursScreenNoTransition();
 800520c:	f000 fe62 	bl	8005ed4 <_ZN23FrontendApplicationBase35gotoTests_moteursScreenNoTransitionEv>
 8005210:	e7dc      	b.n	80051cc <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
 8005212:	f015 febf 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoTest_lidar_basScreenNoTransition();
 8005216:	f000 fe6d 	bl	8005ef4 <_ZN23FrontendApplicationBase36gotoTest_lidar_basScreenNoTransitionEv>
 800521a:	e7db      	b.n	80051d4 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1e>
 800521c:	f015 feba 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoTest_lidar_hautScreenNoTransition();
 8005220:	f000 fe78 	bl	8005f14 <_ZN23FrontendApplicationBase37gotoTest_lidar_hautScreenNoTransitionEv>
 8005224:	e7da      	b.n	80051dc <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
 8005226:	f015 feb5 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoHomeScreenNoTransition();
 800522a:	f000 fe03 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
 800522e:	e7d9      	b.n	80051e4 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
 8005230:	f015 feb0 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoTests_moteursScreenNoTransition();
 8005234:	f000 fe4e 	bl	8005ed4 <_ZN23FrontendApplicationBase35gotoTests_moteursScreenNoTransitionEv>
 8005238:	e7d8      	b.n	80051ec <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x36>
 800523a:	f015 feab 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoTest_lidar_basScreenNoTransition();
 800523e:	f000 fe59 	bl	8005ef4 <_ZN23FrontendApplicationBase36gotoTest_lidar_basScreenNoTransitionEv>
 8005242:	e7d7      	b.n	80051f4 <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
 8005244:	f015 fea6 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoTest_lidar_hautScreenNoTransition();
 8005248:	f000 fe64 	bl	8005f14 <_ZN23FrontendApplicationBase37gotoTest_lidar_hautScreenNoTransitionEv>
}
 800524c:	e7d6      	b.n	80051fc <_ZN19Choix_testsViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
	...

08005250 <_ZN19Choix_testsViewBaseC1Ev>:
Choix_testsViewBase::Choix_testsViewBase() :
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	b0b3      	sub	sp, #204	@ 0xcc
 8005256:	4604      	mov	r4, r0
 8005258:	f017 fda8 	bl	801cdac <_ZN8touchgfx6ScreenC1Ev>
 800525c:	2500      	movs	r5, #0
 800525e:	63e5      	str	r5, [r4, #60]	@ 0x3c
    buttonCallback(this, &Choix_testsViewBase::buttonCallbackHandler)
 8005260:	46a1      	mov	r9, r4
 8005262:	4bf2      	ldr	r3, [pc, #968]	@ (800562c <_ZN19Choix_testsViewBaseC1Ev+0x3dc>)
 8005264:	f849 3b40 	str.w	r3, [r9], #64
 8005268:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 800526c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8005270:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8005274:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8005278:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 800527c:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 8005280:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 8005284:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          parent(0),
 8005288:	6565      	str	r5, [r4, #84]	@ 0x54
          nextSibling(0),
 800528a:	65a5      	str	r5, [r4, #88]	@ 0x58
          nextDrawChainElement(0),
 800528c:	65e5      	str	r5, [r4, #92]	@ 0x5c
          cachedAbsX(0),
 800528e:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
          cachedAbsY(0),
 8005292:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
          touchable(false),
 8005296:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
          visible(true)
 800529a:	f04f 0801 	mov.w	r8, #1
 800529e:	f884 8065 	strb.w	r8, [r4, #101]	@ 0x65
        : Widget(), alpha(255), color(0)
 80052a2:	4be3      	ldr	r3, [pc, #908]	@ (8005630 <_ZN19Choix_testsViewBaseC1Ev+0x3e0>)
 80052a4:	6423      	str	r3, [r4, #64]	@ 0x40
 80052a6:	f04f 0bff 	mov.w	fp, #255	@ 0xff
 80052aa:	f884 b066 	strb.w	fp, [r4, #102]	@ 0x66
        : color(col)
 80052ae:	66a5      	str	r5, [r4, #104]	@ 0x68
 80052b0:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
        : x(0), y(0), width(0), height(0)
 80052b4:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 80052b8:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 80052bc:	f8a4 5074 	strh.w	r5, [r4, #116]	@ 0x74
 80052c0:	f8a4 5076 	strh.w	r5, [r4, #118]	@ 0x76
 80052c4:	f8a4 5078 	strh.w	r5, [r4, #120]	@ 0x78
 80052c8:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 80052cc:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
 80052d0:	f8a4 507e 	strh.w	r5, [r4, #126]	@ 0x7e
          parent(0),
 80052d4:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
          nextSibling(0),
 80052d8:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          nextDrawChainElement(0),
 80052dc:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
          cachedAbsX(0),
 80052e0:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
          cachedAbsY(0),
 80052e4:	f8a4 508e 	strh.w	r5, [r4, #142]	@ 0x8e
          touchable(false),
 80052e8:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
          visible(true)
 80052ec:	f884 8091 	strb.w	r8, [r4, #145]	@ 0x91
 80052f0:	66e3      	str	r3, [r4, #108]	@ 0x6c
 80052f2:	f884 b092 	strb.w	fp, [r4, #146]	@ 0x92
        : color(col)
 80052f6:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 80052fa:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 80052fe:	4638      	mov	r0, r7
 8005300:	f013 f91e 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8005304:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 8005308:	9303      	str	r3, [sp, #12]
        : x(0), y(0), width(0), height(0)
 800530a:	f8a4 50d8 	strh.w	r5, [r4, #216]	@ 0xd8
 800530e:	f8a4 50da 	strh.w	r5, [r4, #218]	@ 0xda
 8005312:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 8005316:	f8a4 50de 	strh.w	r5, [r4, #222]	@ 0xde
 800531a:	f8a4 50e0 	strh.w	r5, [r4, #224]	@ 0xe0
 800531e:	f8a4 50e2 	strh.w	r5, [r4, #226]	@ 0xe2
 8005322:	f8a4 50e4 	strh.w	r5, [r4, #228]	@ 0xe4
 8005326:	f8a4 50e6 	strh.w	r5, [r4, #230]	@ 0xe6
          parent(0),
 800532a:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
          nextSibling(0),
 800532e:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
          nextDrawChainElement(0),
 8005332:	f8c4 50f0 	str.w	r5, [r4, #240]	@ 0xf0
          cachedAbsX(0),
 8005336:	f8a4 50f4 	strh.w	r5, [r4, #244]	@ 0xf4
          cachedAbsY(0),
 800533a:	f8a4 50f6 	strh.w	r5, [r4, #246]	@ 0xf6
          touchable(false),
 800533e:	f884 50f8 	strb.w	r5, [r4, #248]	@ 0xf8
          visible(true)
 8005342:	f884 80f9 	strb.w	r8, [r4, #249]	@ 0xf9
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005346:	4bbb      	ldr	r3, [pc, #748]	@ (8005634 <_ZN19Choix_testsViewBaseC1Ev+0x3e4>)
 8005348:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
        : typedTextId(id)
 800534c:	4aba      	ldr	r2, [pc, #744]	@ (8005638 <_ZN19Choix_testsViewBaseC1Ev+0x3e8>)
 800534e:	f8c4 20fc 	str.w	r2, [r4, #252]	@ 0xfc
 8005352:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8005356:	f8a4 6100 	strh.w	r6, [r4, #256]	@ 0x100
        : color(col)
 800535a:	f8c4 5104 	str.w	r5, [r4, #260]	@ 0x104
 800535e:	f8a4 5108 	strh.w	r5, [r4, #264]	@ 0x108
 8005362:	f884 b10a 	strb.w	fp, [r4, #266]	@ 0x10a
 8005366:	f884 510b 	strb.w	r5, [r4, #267]	@ 0x10b
 800536a:	f884 510c 	strb.w	r5, [r4, #268]	@ 0x10c
 800536e:	f884 510d 	strb.w	r5, [r4, #269]	@ 0x10d
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005372:	f8a4 5110 	strh.w	r5, [r4, #272]	@ 0x110
 8005376:	f8a4 5112 	strh.w	r5, [r4, #274]	@ 0x112
 800537a:	f8a4 6114 	strh.w	r6, [r4, #276]	@ 0x114
 800537e:	f8a4 6116 	strh.w	r6, [r4, #278]	@ 0x116
              text(0)
 8005382:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8005386:	f504 718e 	add.w	r1, r4, #284	@ 0x11c
 800538a:	9104      	str	r1, [sp, #16]
        : x(0), y(0), width(0), height(0)
 800538c:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 8005390:	f8a4 5122 	strh.w	r5, [r4, #290]	@ 0x122
 8005394:	f8a4 5124 	strh.w	r5, [r4, #292]	@ 0x124
 8005398:	f8a4 5126 	strh.w	r5, [r4, #294]	@ 0x126
 800539c:	f8a4 5128 	strh.w	r5, [r4, #296]	@ 0x128
 80053a0:	f8a4 512a 	strh.w	r5, [r4, #298]	@ 0x12a
 80053a4:	f8a4 512c 	strh.w	r5, [r4, #300]	@ 0x12c
 80053a8:	f8a4 512e 	strh.w	r5, [r4, #302]	@ 0x12e
          parent(0),
 80053ac:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
          nextSibling(0),
 80053b0:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
          nextDrawChainElement(0),
 80053b4:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
          cachedAbsX(0),
 80053b8:	f8a4 513c 	strh.w	r5, [r4, #316]	@ 0x13c
          cachedAbsY(0),
 80053bc:	f8a4 513e 	strh.w	r5, [r4, #318]	@ 0x13e
          touchable(false),
 80053c0:	f884 5140 	strb.w	r5, [r4, #320]	@ 0x140
          visible(true)
 80053c4:	f884 8141 	strb.w	r8, [r4, #321]	@ 0x141
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80053c8:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
 80053cc:	f8c4 2144 	str.w	r2, [r4, #324]	@ 0x144
 80053d0:	f8a4 6148 	strh.w	r6, [r4, #328]	@ 0x148
        : color(col)
 80053d4:	f8c4 514c 	str.w	r5, [r4, #332]	@ 0x14c
 80053d8:	f8a4 5150 	strh.w	r5, [r4, #336]	@ 0x150
 80053dc:	f884 6152 	strb.w	r6, [r4, #338]	@ 0x152
 80053e0:	f884 5153 	strb.w	r5, [r4, #339]	@ 0x153
 80053e4:	f884 5154 	strb.w	r5, [r4, #340]	@ 0x154
 80053e8:	f884 5155 	strb.w	r5, [r4, #341]	@ 0x155
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80053ec:	f8a4 5158 	strh.w	r5, [r4, #344]	@ 0x158
 80053f0:	f8a4 515a 	strh.w	r5, [r4, #346]	@ 0x15a
 80053f4:	f8a4 615c 	strh.w	r6, [r4, #348]	@ 0x15c
 80053f8:	f8a4 615e 	strh.w	r6, [r4, #350]	@ 0x15e
              text(0)
 80053fc:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
 8005400:	f504 70b2 	add.w	r0, r4, #356	@ 0x164
 8005404:	9008      	str	r0, [sp, #32]
 8005406:	f013 f89b 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800540a:	f504 7bd0 	add.w	fp, r4, #416	@ 0x1a0
        : x(0), y(0), width(0), height(0)
 800540e:	f8a4 51a4 	strh.w	r5, [r4, #420]	@ 0x1a4
 8005412:	f8a4 51a6 	strh.w	r5, [r4, #422]	@ 0x1a6
 8005416:	f8a4 51a8 	strh.w	r5, [r4, #424]	@ 0x1a8
 800541a:	f8a4 51aa 	strh.w	r5, [r4, #426]	@ 0x1aa
 800541e:	f8a4 51ac 	strh.w	r5, [r4, #428]	@ 0x1ac
 8005422:	f8a4 51ae 	strh.w	r5, [r4, #430]	@ 0x1ae
 8005426:	f8a4 51b0 	strh.w	r5, [r4, #432]	@ 0x1b0
 800542a:	f8a4 51b2 	strh.w	r5, [r4, #434]	@ 0x1b2
          parent(0),
 800542e:	f8c4 51b4 	str.w	r5, [r4, #436]	@ 0x1b4
          nextSibling(0),
 8005432:	f8c4 51b8 	str.w	r5, [r4, #440]	@ 0x1b8
          nextDrawChainElement(0),
 8005436:	f8c4 51bc 	str.w	r5, [r4, #444]	@ 0x1bc
          cachedAbsX(0),
 800543a:	f8a4 51c0 	strh.w	r5, [r4, #448]	@ 0x1c0
          cachedAbsY(0),
 800543e:	f8a4 51c2 	strh.w	r5, [r4, #450]	@ 0x1c2
          touchable(false),
 8005442:	f884 51c4 	strb.w	r5, [r4, #452]	@ 0x1c4
          visible(true)
 8005446:	f884 81c5 	strb.w	r8, [r4, #453]	@ 0x1c5
 800544a:	4b7c      	ldr	r3, [pc, #496]	@ (800563c <_ZN19Choix_testsViewBaseC1Ev+0x3ec>)
 800544c:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
 8005450:	f8c4 51c8 	str.w	r5, [r4, #456]	@ 0x1c8
 8005454:	f504 71e6 	add.w	r1, r4, #460	@ 0x1cc
 8005458:	9105      	str	r1, [sp, #20]
 800545a:	4608      	mov	r0, r1
 800545c:	f013 f9ce 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005460:	f504 7c05 	add.w	ip, r4, #532	@ 0x214
 8005464:	f8cd c018 	str.w	ip, [sp, #24]
 8005468:	4660      	mov	r0, ip
 800546a:	f013 f9c7 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800546e:	f504 7c17 	add.w	ip, r4, #604	@ 0x25c
 8005472:	f8cd c01c 	str.w	ip, [sp, #28]
 8005476:	4660      	mov	r0, ip
 8005478:	f013 f9c0 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800547c:	f504 7c29 	add.w	ip, r4, #676	@ 0x2a4
 8005480:	4660      	mov	r0, ip
 8005482:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8005486:	f8ad 6050 	strh.w	r6, [sp, #80]	@ 0x50
 800548a:	a914      	add	r1, sp, #80	@ 0x50
 800548c:	f012 f8e4 	bl	8017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005490:	f504 7c34 	add.w	ip, r4, #720	@ 0x2d0
 8005494:	4660      	mov	r0, ip
 8005496:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800549a:	f8ad 6054 	strh.w	r6, [sp, #84]	@ 0x54
 800549e:	a915      	add	r1, sp, #84	@ 0x54
 80054a0:	f012 f8da 	bl	8017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80054a4:	f504 7c3f 	add.w	ip, r4, #764	@ 0x2fc
 80054a8:	4660      	mov	r0, ip
 80054aa:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 80054ae:	f8ad 6058 	strh.w	r6, [sp, #88]	@ 0x58
 80054b2:	a916      	add	r1, sp, #88	@ 0x58
 80054b4:	f012 f8d0 	bl	8017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80054b8:	f504 7c4a 	add.w	ip, r4, #808	@ 0x328
 80054bc:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 80054c0:	f8a4 532c 	strh.w	r5, [r4, #812]	@ 0x32c
 80054c4:	f8a4 532e 	strh.w	r5, [r4, #814]	@ 0x32e
 80054c8:	f8a4 5330 	strh.w	r5, [r4, #816]	@ 0x330
 80054cc:	f8a4 5332 	strh.w	r5, [r4, #818]	@ 0x332
 80054d0:	f8a4 5334 	strh.w	r5, [r4, #820]	@ 0x334
 80054d4:	f8a4 5336 	strh.w	r5, [r4, #822]	@ 0x336
 80054d8:	f8a4 5338 	strh.w	r5, [r4, #824]	@ 0x338
 80054dc:	f8a4 533a 	strh.w	r5, [r4, #826]	@ 0x33a
          parent(0),
 80054e0:	f8c4 533c 	str.w	r5, [r4, #828]	@ 0x33c
          nextSibling(0),
 80054e4:	f8c4 5340 	str.w	r5, [r4, #832]	@ 0x340
          nextDrawChainElement(0),
 80054e8:	f8c4 5344 	str.w	r5, [r4, #836]	@ 0x344
          cachedAbsX(0),
 80054ec:	f8a4 5348 	strh.w	r5, [r4, #840]	@ 0x348
          cachedAbsY(0),
 80054f0:	f8a4 534a 	strh.w	r5, [r4, #842]	@ 0x34a
          touchable(false),
 80054f4:	f884 534c 	strb.w	r5, [r4, #844]	@ 0x34c
          visible(true)
 80054f8:	f884 834d 	strb.w	r8, [r4, #845]	@ 0x34d
 80054fc:	4b4f      	ldr	r3, [pc, #316]	@ (800563c <_ZN19Choix_testsViewBaseC1Ev+0x3ec>)
 80054fe:	f8c4 3328 	str.w	r3, [r4, #808]	@ 0x328
 8005502:	f8c4 5350 	str.w	r5, [r4, #848]	@ 0x350
 8005506:	f504 7355 	add.w	r3, r4, #852	@ 0x354
 800550a:	930d      	str	r3, [sp, #52]	@ 0x34
 800550c:	f8a4 5358 	strh.w	r5, [r4, #856]	@ 0x358
 8005510:	f8a4 535a 	strh.w	r5, [r4, #858]	@ 0x35a
 8005514:	f8a4 535c 	strh.w	r5, [r4, #860]	@ 0x35c
 8005518:	f8a4 535e 	strh.w	r5, [r4, #862]	@ 0x35e
 800551c:	f8a4 5360 	strh.w	r5, [r4, #864]	@ 0x360
 8005520:	f8a4 5362 	strh.w	r5, [r4, #866]	@ 0x362
 8005524:	f8a4 5364 	strh.w	r5, [r4, #868]	@ 0x364
 8005528:	f8a4 5366 	strh.w	r5, [r4, #870]	@ 0x366
          parent(0),
 800552c:	f8c4 5368 	str.w	r5, [r4, #872]	@ 0x368
          nextSibling(0),
 8005530:	f8c4 536c 	str.w	r5, [r4, #876]	@ 0x36c
          nextDrawChainElement(0),
 8005534:	f8c4 5370 	str.w	r5, [r4, #880]	@ 0x370
          cachedAbsX(0),
 8005538:	f8a4 5374 	strh.w	r5, [r4, #884]	@ 0x374
          cachedAbsY(0),
 800553c:	f8a4 5376 	strh.w	r5, [r4, #886]	@ 0x376
          visible(true)
 8005540:	f884 8379 	strb.w	r8, [r4, #889]	@ 0x379
        : Widget(), action(), pressed(false)
 8005544:	f8c4 537c 	str.w	r5, [r4, #892]	@ 0x37c
 8005548:	f884 5380 	strb.w	r5, [r4, #896]	@ 0x380
        touchable = touch;
 800554c:	f884 8378 	strb.w	r8, [r4, #888]	@ 0x378
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8005550:	4b3b      	ldr	r3, [pc, #236]	@ (8005640 <_ZN19Choix_testsViewBaseC1Ev+0x3f0>)
 8005552:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 8005556:	f8a4 6382 	strh.w	r6, [r4, #898]	@ 0x382
 800555a:	f8a4 6384 	strh.w	r6, [r4, #900]	@ 0x384
 800555e:	f884 6386 	strb.w	r6, [r4, #902]	@ 0x386
 8005562:	f504 7c62 	add.w	ip, r4, #904	@ 0x388
 8005566:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
 800556a:	f8a4 538c 	strh.w	r5, [r4, #908]	@ 0x38c
 800556e:	f8a4 538e 	strh.w	r5, [r4, #910]	@ 0x38e
 8005572:	f8a4 5390 	strh.w	r5, [r4, #912]	@ 0x390
 8005576:	f8a4 5392 	strh.w	r5, [r4, #914]	@ 0x392
 800557a:	f8a4 5394 	strh.w	r5, [r4, #916]	@ 0x394
 800557e:	f8a4 5396 	strh.w	r5, [r4, #918]	@ 0x396
 8005582:	f8a4 5398 	strh.w	r5, [r4, #920]	@ 0x398
 8005586:	f8a4 539a 	strh.w	r5, [r4, #922]	@ 0x39a
          parent(0),
 800558a:	f8c4 539c 	str.w	r5, [r4, #924]	@ 0x39c
          nextSibling(0),
 800558e:	f8c4 53a0 	str.w	r5, [r4, #928]	@ 0x3a0
          nextDrawChainElement(0),
 8005592:	f8c4 53a4 	str.w	r5, [r4, #932]	@ 0x3a4
          cachedAbsX(0),
 8005596:	f8a4 53a8 	strh.w	r5, [r4, #936]	@ 0x3a8
          cachedAbsY(0),
 800559a:	f8a4 53aa 	strh.w	r5, [r4, #938]	@ 0x3aa
          visible(true)
 800559e:	f884 83ad 	strb.w	r8, [r4, #941]	@ 0x3ad
 80055a2:	f8c4 53b0 	str.w	r5, [r4, #944]	@ 0x3b0
 80055a6:	f884 53b4 	strb.w	r5, [r4, #948]	@ 0x3b4
        touchable = touch;
 80055aa:	f884 83ac 	strb.w	r8, [r4, #940]	@ 0x3ac
 80055ae:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
 80055b2:	f8a4 63b6 	strh.w	r6, [r4, #950]	@ 0x3b6
 80055b6:	f8a4 63b8 	strh.w	r6, [r4, #952]	@ 0x3b8
 80055ba:	f884 63ba 	strb.w	r6, [r4, #954]	@ 0x3ba
 80055be:	f504 7c6f 	add.w	ip, r4, #956	@ 0x3bc
 80055c2:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
 80055c6:	f8a4 53c0 	strh.w	r5, [r4, #960]	@ 0x3c0
 80055ca:	f8a4 53c2 	strh.w	r5, [r4, #962]	@ 0x3c2
 80055ce:	f8a4 53c4 	strh.w	r5, [r4, #964]	@ 0x3c4
 80055d2:	f8a4 53c6 	strh.w	r5, [r4, #966]	@ 0x3c6
 80055d6:	f8a4 53c8 	strh.w	r5, [r4, #968]	@ 0x3c8
 80055da:	f8a4 53ca 	strh.w	r5, [r4, #970]	@ 0x3ca
 80055de:	f8a4 53cc 	strh.w	r5, [r4, #972]	@ 0x3cc
 80055e2:	f8a4 53ce 	strh.w	r5, [r4, #974]	@ 0x3ce
          parent(0),
 80055e6:	f8c4 53d0 	str.w	r5, [r4, #976]	@ 0x3d0
          nextSibling(0),
 80055ea:	f8c4 53d4 	str.w	r5, [r4, #980]	@ 0x3d4
          nextDrawChainElement(0),
 80055ee:	f8c4 53d8 	str.w	r5, [r4, #984]	@ 0x3d8
          cachedAbsX(0),
 80055f2:	f8a4 53dc 	strh.w	r5, [r4, #988]	@ 0x3dc
          cachedAbsY(0),
 80055f6:	f8a4 53de 	strh.w	r5, [r4, #990]	@ 0x3de
          visible(true)
 80055fa:	f884 83e1 	strb.w	r8, [r4, #993]	@ 0x3e1
 80055fe:	f8c4 53e4 	str.w	r5, [r4, #996]	@ 0x3e4
 8005602:	f884 53e8 	strb.w	r5, [r4, #1000]	@ 0x3e8
        touchable = touch;
 8005606:	f884 83e0 	strb.w	r8, [r4, #992]	@ 0x3e0
 800560a:	f8c4 33bc 	str.w	r3, [r4, #956]	@ 0x3bc
 800560e:	f8a4 63ea 	strh.w	r6, [r4, #1002]	@ 0x3ea
 8005612:	f8a4 63ec 	strh.w	r6, [r4, #1004]	@ 0x3ec
 8005616:	f884 63ee 	strb.w	r6, [r4, #1006]	@ 0x3ee
        : pobject(pObject), pmemfun(pmemfun_1)
 800561a:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <_ZN19Choix_testsViewBaseC1Ev+0x3f4>)
 800561c:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
 8005620:	f8c4 43f4 	str.w	r4, [r4, #1012]	@ 0x3f4
 8005624:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <_ZN19Choix_testsViewBaseC1Ev+0x3f8>)
 8005626:	f8c4 33f8 	str.w	r3, [r4, #1016]	@ 0x3f8
 800562a:	e00f      	b.n	800564c <_ZN19Choix_testsViewBaseC1Ev+0x3fc>
 800562c:	0802c6ec 	.word	0x0802c6ec
 8005630:	0802e1ec 	.word	0x0802e1ec
 8005634:	0802e15c 	.word	0x0802e15c
 8005638:	0802c65c 	.word	0x0802c65c
 800563c:	0802ddc8 	.word	0x0802ddc8
 8005640:	0802e254 	.word	0x0802e254
 8005644:	0802c6d4 	.word	0x0802c6d4
 8005648:	080051b7 	.word	0x080051b7
 800564c:	f8c4 53fc 	str.w	r5, [r4, #1020]	@ 0x3fc
        setX(x);
 8005650:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	4629      	mov	r1, r5
 8005656:	4648      	mov	r0, r9
 8005658:	4798      	blx	r3
        setY(y);
 800565a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800565c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565e:	4629      	mov	r1, r5
 8005660:	4648      	mov	r0, r9
 8005662:	4798      	blx	r3
        setWidth(width);
 8005664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800566c:	4648      	mov	r0, r9
 800566e:	4798      	blx	r3
        setHeight(height);
 8005670:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8005678:	4648      	mov	r0, r9
 800567a:	4798      	blx	r3
        color = newColor;
 800567c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8005680:	66a3      	str	r3, [r4, #104]	@ 0x68
 8005682:	1d26      	adds	r6, r4, #4
 8005684:	4649      	mov	r1, r9
 8005686:	4630      	mov	r0, r6
 8005688:	f00e fd94 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800568c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	4629      	mov	r1, r5
 8005692:	4650      	mov	r0, sl
 8005694:	4798      	blx	r3
        setY(y);
 8005696:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569a:	4629      	mov	r1, r5
 800569c:	4650      	mov	r0, sl
 800569e:	4798      	blx	r3
        setWidth(width);
 80056a0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80056a8:	4650      	mov	r0, sl
 80056aa:	4798      	blx	r3
        setHeight(height);
 80056ac:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80056ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80056b4:	4650      	mov	r0, sl
 80056b6:	4798      	blx	r3
 80056b8:	4bbd      	ldr	r3, [pc, #756]	@ (80059b0 <_ZN19Choix_testsViewBaseC1Ev+0x760>)
 80056ba:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80056be:	4651      	mov	r1, sl
 80056c0:	4630      	mov	r0, r6
 80056c2:	f00e fd77 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80056c6:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80056ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056cc:	4629      	mov	r1, r5
 80056ce:	4638      	mov	r0, r7
 80056d0:	4798      	blx	r3
        setY(y);
 80056d2:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80056d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d8:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80056dc:	4638      	mov	r0, r7
 80056de:	4798      	blx	r3
 80056e0:	f04f 0c02 	mov.w	ip, #2
 80056e4:	f8ad c05c 	strh.w	ip, [sp, #92]	@ 0x5c
 80056e8:	f04f 0e03 	mov.w	lr, #3
 80056ec:	f8ad e060 	strh.w	lr, [sp, #96]	@ 0x60
 80056f0:	f04f 080c 	mov.w	r8, #12
 80056f4:	f8ad 8064 	strh.w	r8, [sp, #100]	@ 0x64
 80056f8:	f04f 0a0a 	mov.w	sl, #10
 80056fc:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
    bouton_retour.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REPLY_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8005700:	ab1a      	add	r3, sp, #104	@ 0x68
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	ab19      	add	r3, sp, #100	@ 0x64
 8005706:	aa18      	add	r2, sp, #96	@ 0x60
 8005708:	a917      	add	r1, sp, #92	@ 0x5c
 800570a:	4638      	mov	r0, r7
 800570c:	f012 fe83 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8005710:	f04f 0905 	mov.w	r9, #5
 8005714:	f8a4 90d0 	strh.w	r9, [r4, #208]	@ 0xd0
        iconY = y;
 8005718:	f8a4 90d2 	strh.w	r9, [r4, #210]	@ 0xd2
    bouton_retour.setAction(buttonCallback);
 800571c:	f504 787c 	add.w	r8, r4, #1008	@ 0x3f0
        action = &callback;
 8005720:	f8c4 80c0 	str.w	r8, [r4, #192]	@ 0xc0
 8005724:	4639      	mov	r1, r7
 8005726:	4630      	mov	r0, r6
 8005728:	f00e fd44 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800572c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	21fd      	movs	r1, #253	@ 0xfd
 8005734:	9f03      	ldr	r7, [sp, #12]
 8005736:	4638      	mov	r0, r7
 8005738:	4798      	blx	r3
        setY(y);
 800573a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800573e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005740:	2130      	movs	r1, #48	@ 0x30
 8005742:	9703      	str	r7, [sp, #12]
 8005744:	4638      	mov	r0, r7
 8005746:	4798      	blx	r3
        color = newColor;
 8005748:	f04f 33ff 	mov.w	r3, #4294967295
 800574c:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
        linespace = space;
 8005750:	f8a4 5108 	strh.w	r5, [r4, #264]	@ 0x108
        boundingArea = calculateBoundingArea();
 8005754:	af10      	add	r7, sp, #64	@ 0x40
 8005756:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800575a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575e:	9903      	ldr	r1, [sp, #12]
 8005760:	4638      	mov	r0, r7
 8005762:	4798      	blx	r3
 8005764:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8005768:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800576c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005770:	4a90      	ldr	r2, [pc, #576]	@ (80059b4 <_ZN19Choix_testsViewBaseC1Ev+0x764>)
 8005772:	921b      	str	r2, [sp, #108]	@ 0x6c
 8005774:	230e      	movs	r3, #14
 8005776:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
    texte_choix_tests.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P977));
 800577a:	a91b      	add	r1, sp, #108	@ 0x6c
 800577c:	9803      	ldr	r0, [sp, #12]
 800577e:	f012 fd17 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005782:	9903      	ldr	r1, [sp, #12]
 8005784:	4630      	mov	r0, r6
 8005786:	f00e fd15 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800578a:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 800578e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005790:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005794:	9804      	ldr	r0, [sp, #16]
 8005796:	4798      	blx	r3
        setY(y);
 8005798:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 800579c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579e:	2106      	movs	r1, #6
 80057a0:	9804      	ldr	r0, [sp, #16]
 80057a2:	4798      	blx	r3
        color = newColor;
 80057a4:	f04f 33ff 	mov.w	r3, #4294967295
 80057a8:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
        linespace = space;
 80057ac:	f8a4 5150 	strh.w	r5, [r4, #336]	@ 0x150
        boundingArea = calculateBoundingArea();
 80057b0:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 80057b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057b8:	9904      	ldr	r1, [sp, #16]
 80057ba:	4638      	mov	r0, r7
 80057bc:	4798      	blx	r3
 80057be:	f504 73ac 	add.w	r3, r4, #344	@ 0x158
 80057c2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80057c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80057ca:	4a7a      	ldr	r2, [pc, #488]	@ (80059b4 <_ZN19Choix_testsViewBaseC1Ev+0x764>)
 80057cc:	921d      	str	r2, [sp, #116]	@ 0x74
 80057ce:	2311      	movs	r3, #17
 80057d0:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
    texte_menu_tests.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZJLH));
 80057d4:	a91d      	add	r1, sp, #116	@ 0x74
 80057d6:	9f04      	ldr	r7, [sp, #16]
 80057d8:	4638      	mov	r0, r7
 80057da:	f012 fce9 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80057de:	4639      	mov	r1, r7
 80057e0:	4630      	mov	r0, r6
 80057e2:	f00e fce7 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80057e6:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	4629      	mov	r1, r5
 80057ee:	9f08      	ldr	r7, [sp, #32]
 80057f0:	4638      	mov	r0, r7
 80057f2:	4798      	blx	r3
        setY(y);
 80057f4:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 80057f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057fa:	4629      	mov	r1, r5
 80057fc:	4638      	mov	r0, r7
 80057fe:	4798      	blx	r3
 8005800:	f04f 0c02 	mov.w	ip, #2
 8005804:	f8ad c07c 	strh.w	ip, [sp, #124]	@ 0x7c
 8005808:	f04f 0e03 	mov.w	lr, #3
 800580c:	f8ad e080 	strh.w	lr, [sp, #128]	@ 0x80
 8005810:	250b      	movs	r5, #11
 8005812:	f8ad 5084 	strh.w	r5, [sp, #132]	@ 0x84
 8005816:	f8ad a088 	strh.w	sl, [sp, #136]	@ 0x88
    bouton_home.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_HOME_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 800581a:	ab22      	add	r3, sp, #136	@ 0x88
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	ab21      	add	r3, sp, #132	@ 0x84
 8005820:	aa20      	add	r2, sp, #128	@ 0x80
 8005822:	a91f      	add	r1, sp, #124	@ 0x7c
 8005824:	4638      	mov	r0, r7
 8005826:	f012 fdf6 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 800582a:	f8a4 919c 	strh.w	r9, [r4, #412]	@ 0x19c
        iconY = y;
 800582e:	f8a4 919e 	strh.w	r9, [r4, #414]	@ 0x19e
 8005832:	f8c4 818c 	str.w	r8, [r4, #396]	@ 0x18c
 8005836:	4639      	mov	r1, r7
 8005838:	4630      	mov	r0, r6
 800583a:	f00e fcbb 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800583e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	210c      	movs	r1, #12
 8005846:	4658      	mov	r0, fp
 8005848:	4798      	blx	r3
        setY(y);
 800584a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800584e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005850:	f240 113f 	movw	r1, #319	@ 0x13f
 8005854:	4658      	mov	r0, fp
 8005856:	4798      	blx	r3
        setWidth(width);
 8005858:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800585c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585e:	f240 3102 	movw	r1, #770	@ 0x302
 8005862:	4658      	mov	r0, fp
 8005864:	4798      	blx	r3
        setHeight(height);
 8005866:	f8d4 31a0 	ldr.w	r3, [r4, #416]	@ 0x1a0
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	2147      	movs	r1, #71	@ 0x47
 800586e:	4658      	mov	r0, fp
 8005870:	4798      	blx	r3
        setX(x);
 8005872:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	f240 2112 	movw	r1, #530	@ 0x212
 800587c:	9f05      	ldr	r7, [sp, #20]
 800587e:	4638      	mov	r0, r7
 8005880:	4798      	blx	r3
        setY(y);
 8005882:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 8005886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005888:	4651      	mov	r1, sl
 800588a:	4638      	mov	r0, r7
 800588c:	4798      	blx	r3
 800588e:	2304      	movs	r3, #4
 8005890:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 8005894:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
    bouton_lidar_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_DISABLED_ID));
 8005898:	aa24      	add	r2, sp, #144	@ 0x90
 800589a:	a923      	add	r1, sp, #140	@ 0x8c
 800589c:	4638      	mov	r0, r7
 800589e:	f012 fce5 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 80058a2:	f8a4 5204 	strh.w	r5, [r4, #516]	@ 0x204
        return typedTextId < numberOfTypedTexts;
 80058a6:	4b44      	ldr	r3, [pc, #272]	@ (80059b8 <_ZN19Choix_testsViewBaseC1Ev+0x768>)
        if (typedText.hasValidId())
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	42ab      	cmp	r3, r5
 80058ac:	d928      	bls.n	8005900 <_ZN19Choix_testsViewBaseC1Ev+0x6b0>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80058ae:	4b43      	ldr	r3, [pc, #268]	@ (80059bc <_ZN19Choix_testsViewBaseC1Ev+0x76c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	b1fb      	cbz	r3, 80058f4 <_ZN19Choix_testsViewBaseC1Ev+0x6a4>
        return fonts[typedTexts[typedTextId].fontIdx];
 80058b4:	7d9a      	ldrb	r2, [r3, #22]
 80058b6:	4b42      	ldr	r3, [pc, #264]	@ (80059c0 <_ZN19Choix_testsViewBaseC1Ev+0x770>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80058be:	210b      	movs	r1, #11
 80058c0:	4b40      	ldr	r3, [pc, #256]	@ (80059c4 <_ZN19Choix_testsViewBaseC1Ev+0x774>)
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	f003 fc34 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 80058c8:	4681      	mov	r9, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ce:	4638      	mov	r0, r7
 80058d0:	4798      	blx	r3
 80058d2:	4605      	mov	r5, r0
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d8:	4649      	mov	r1, r9
 80058da:	4638      	mov	r0, r7
 80058dc:	4798      	blx	r3
 80058de:	fb15 f500 	smulbb	r5, r5, r0
 80058e2:	b2ad      	uxth	r5, r5
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e8:	4649      	mov	r1, r9
 80058ea:	4638      	mov	r0, r7
 80058ec:	4798      	blx	r3
 80058ee:	4405      	add	r5, r0
 80058f0:	b22d      	sxth	r5, r5
 80058f2:	e006      	b.n	8005902 <_ZN19Choix_testsViewBaseC1Ev+0x6b2>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80058f4:	4b34      	ldr	r3, [pc, #208]	@ (80059c8 <_ZN19Choix_testsViewBaseC1Ev+0x778>)
 80058f6:	4a35      	ldr	r2, [pc, #212]	@ (80059cc <_ZN19Choix_testsViewBaseC1Ev+0x77c>)
 80058f8:	216c      	movs	r1, #108	@ 0x6c
 80058fa:	4835      	ldr	r0, [pc, #212]	@ (80059d0 <_ZN19Choix_testsViewBaseC1Ev+0x780>)
 80058fc:	f023 fe68 	bl	80295d0 <__assert_func>
 8005900:	2500      	movs	r5, #0
 8005902:	f8a4 5212 	strh.w	r5, [r4, #530]	@ 0x212
        color = col;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
        colorPressed = col;
 800590e:	f8c4 320c 	str.w	r3, [r4, #524]	@ 0x20c
 8005912:	f8c4 81f4 	str.w	r8, [r4, #500]	@ 0x1f4
    bloc_possibilites.add(bouton_lidar_2);
 8005916:	9905      	ldr	r1, [sp, #20]
 8005918:	4658      	mov	r0, fp
 800591a:	f00e fc4b 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800591e:	f8d4 3214 	ldr.w	r3, [r4, #532]	@ 0x214
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005924:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005928:	9d06      	ldr	r5, [sp, #24]
 800592a:	4628      	mov	r0, r5
 800592c:	4798      	blx	r3
        setY(y);
 800592e:	f8d4 3214 	ldr.w	r3, [r4, #532]	@ 0x214
 8005932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005934:	210a      	movs	r1, #10
 8005936:	4628      	mov	r0, r5
 8005938:	4798      	blx	r3
 800593a:	2304      	movs	r3, #4
 800593c:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 8005940:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
    bouton_lidar_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_DISABLED_ID));
 8005944:	aa26      	add	r2, sp, #152	@ 0x98
 8005946:	a925      	add	r1, sp, #148	@ 0x94
 8005948:	4628      	mov	r0, r5
 800594a:	f012 fc8f 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800594e:	230c      	movs	r3, #12
 8005950:	f8a4 324c 	strh.w	r3, [r4, #588]	@ 0x24c
        return typedTextId < numberOfTypedTexts;
 8005954:	4b18      	ldr	r3, [pc, #96]	@ (80059b8 <_ZN19Choix_testsViewBaseC1Ev+0x768>)
        if (typedText.hasValidId())
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	2b0c      	cmp	r3, #12
 800595a:	d93b      	bls.n	80059d4 <_ZN19Choix_testsViewBaseC1Ev+0x784>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800595c:	4b17      	ldr	r3, [pc, #92]	@ (80059bc <_ZN19Choix_testsViewBaseC1Ev+0x76c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	b1fb      	cbz	r3, 80059a2 <_ZN19Choix_testsViewBaseC1Ev+0x752>
        return fonts[typedTexts[typedTextId].fontIdx];
 8005962:	7e1a      	ldrb	r2, [r3, #24]
 8005964:	4b16      	ldr	r3, [pc, #88]	@ (80059c0 <_ZN19Choix_testsViewBaseC1Ev+0x770>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 800596c:	210c      	movs	r1, #12
 800596e:	4b15      	ldr	r3, [pc, #84]	@ (80059c4 <_ZN19Choix_testsViewBaseC1Ev+0x774>)
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	f003 fbdd 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8005976:	4681      	mov	r9, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	4638      	mov	r0, r7
 800597e:	4798      	blx	r3
 8005980:	4605      	mov	r5, r0
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005986:	4649      	mov	r1, r9
 8005988:	4638      	mov	r0, r7
 800598a:	4798      	blx	r3
 800598c:	fb15 f500 	smulbb	r5, r5, r0
 8005990:	b2ad      	uxth	r5, r5
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	4649      	mov	r1, r9
 8005998:	4638      	mov	r0, r7
 800599a:	4798      	blx	r3
 800599c:	4405      	add	r5, r0
 800599e:	b22d      	sxth	r5, r5
 80059a0:	e019      	b.n	80059d6 <_ZN19Choix_testsViewBaseC1Ev+0x786>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80059a2:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <_ZN19Choix_testsViewBaseC1Ev+0x778>)
 80059a4:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <_ZN19Choix_testsViewBaseC1Ev+0x77c>)
 80059a6:	216c      	movs	r1, #108	@ 0x6c
 80059a8:	4809      	ldr	r0, [pc, #36]	@ (80059d0 <_ZN19Choix_testsViewBaseC1Ev+0x780>)
 80059aa:	f023 fe11 	bl	80295d0 <__assert_func>
 80059ae:	bf00      	nop
 80059b0:	ff63003b 	.word	0xff63003b
 80059b4:	0802c65c 	.word	0x0802c65c
 80059b8:	24062214 	.word	0x24062214
 80059bc:	24062210 	.word	0x24062210
 80059c0:	24062218 	.word	0x24062218
 80059c4:	2406221c 	.word	0x2406221c
 80059c8:	0802c57c 	.word	0x0802c57c
 80059cc:	0802c5c0 	.word	0x0802c5c0
 80059d0:	0802c5fc 	.word	0x0802c5fc
 80059d4:	2500      	movs	r5, #0
 80059d6:	f8a4 525a 	strh.w	r5, [r4, #602]	@ 0x25a
        color = col;
 80059da:	f04f 33ff 	mov.w	r3, #4294967295
 80059de:	f8c4 3250 	str.w	r3, [r4, #592]	@ 0x250
        colorPressed = col;
 80059e2:	f8c4 3254 	str.w	r3, [r4, #596]	@ 0x254
 80059e6:	f8c4 823c 	str.w	r8, [r4, #572]	@ 0x23c
    bloc_possibilites.add(bouton_lidar_1);
 80059ea:	9906      	ldr	r1, [sp, #24]
 80059ec:	4658      	mov	r0, fp
 80059ee:	f00e fbe1 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80059f2:	f8d4 325c 	ldr.w	r3, [r4, #604]	@ 0x25c
 80059f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f8:	2109      	movs	r1, #9
 80059fa:	9d07      	ldr	r5, [sp, #28]
 80059fc:	4628      	mov	r0, r5
 80059fe:	4798      	blx	r3
        setY(y);
 8005a00:	f8d4 325c 	ldr.w	r3, [r4, #604]	@ 0x25c
 8005a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a06:	210a      	movs	r1, #10
 8005a08:	4628      	mov	r0, r5
 8005a0a:	4798      	blx	r3
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	f8ad 309c 	strh.w	r3, [sp, #156]	@ 0x9c
 8005a12:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
    bouton_moteurs.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_DISABLED_ID));
 8005a16:	aa28      	add	r2, sp, #160	@ 0xa0
 8005a18:	a927      	add	r1, sp, #156	@ 0x9c
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f012 fc26 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8005a20:	230d      	movs	r3, #13
 8005a22:	f8a4 3294 	strh.w	r3, [r4, #660]	@ 0x294
        return typedTextId < numberOfTypedTexts;
 8005a26:	4b9e      	ldr	r3, [pc, #632]	@ (8005ca0 <_ZN19Choix_testsViewBaseC1Ev+0xa50>)
        if (typedText.hasValidId())
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	2b0d      	cmp	r3, #13
 8005a2c:	d928      	bls.n	8005a80 <_ZN19Choix_testsViewBaseC1Ev+0x830>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005a2e:	4b9d      	ldr	r3, [pc, #628]	@ (8005ca4 <_ZN19Choix_testsViewBaseC1Ev+0xa54>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b1fb      	cbz	r3, 8005a74 <_ZN19Choix_testsViewBaseC1Ev+0x824>
        return fonts[typedTexts[typedTextId].fontIdx];
 8005a34:	7e9a      	ldrb	r2, [r3, #26]
 8005a36:	4b9c      	ldr	r3, [pc, #624]	@ (8005ca8 <_ZN19Choix_testsViewBaseC1Ev+0xa58>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8005a3e:	210d      	movs	r1, #13
 8005a40:	4b9a      	ldr	r3, [pc, #616]	@ (8005cac <_ZN19Choix_testsViewBaseC1Ev+0xa5c>)
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	f003 fb74 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8005a48:	4681      	mov	r9, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	4638      	mov	r0, r7
 8005a50:	4798      	blx	r3
 8005a52:	4605      	mov	r5, r0
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a58:	4649      	mov	r1, r9
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	4798      	blx	r3
 8005a5e:	fb15 f500 	smulbb	r5, r5, r0
 8005a62:	b2ad      	uxth	r5, r5
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	4649      	mov	r1, r9
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	4798      	blx	r3
 8005a6e:	4405      	add	r5, r0
 8005a70:	b22d      	sxth	r5, r5
 8005a72:	e006      	b.n	8005a82 <_ZN19Choix_testsViewBaseC1Ev+0x832>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005a74:	4b8e      	ldr	r3, [pc, #568]	@ (8005cb0 <_ZN19Choix_testsViewBaseC1Ev+0xa60>)
 8005a76:	4a8f      	ldr	r2, [pc, #572]	@ (8005cb4 <_ZN19Choix_testsViewBaseC1Ev+0xa64>)
 8005a78:	216c      	movs	r1, #108	@ 0x6c
 8005a7a:	488f      	ldr	r0, [pc, #572]	@ (8005cb8 <_ZN19Choix_testsViewBaseC1Ev+0xa68>)
 8005a7c:	f023 fda8 	bl	80295d0 <__assert_func>
 8005a80:	2500      	movs	r5, #0
 8005a82:	f8a4 52a2 	strh.w	r5, [r4, #674]	@ 0x2a2
        color = col;
 8005a86:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8a:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
        colorPressed = col;
 8005a8e:	f8c4 329c 	str.w	r3, [r4, #668]	@ 0x29c
 8005a92:	f8c4 8284 	str.w	r8, [r4, #644]	@ 0x284
    bloc_possibilites.add(bouton_moteurs);
 8005a96:	9907      	ldr	r1, [sp, #28]
 8005a98:	4658      	mov	r0, fp
 8005a9a:	f00e fb8b 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005a9e:	4659      	mov	r1, fp
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f00e fb87 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005aa6:	230d      	movs	r3, #13
 8005aa8:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
    image_moteur.setBitmap(touchgfx::Bitmap(BITMAP_IMAGE_ID));
 8005aac:	a929      	add	r1, sp, #164	@ 0xa4
 8005aae:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f012 fd6c 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8005ab6:	f8d4 32a4 	ldr.w	r3, [r4, #676]	@ 0x2a4
 8005aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abc:	2115      	movs	r1, #21
 8005abe:	4628      	mov	r0, r5
 8005ac0:	4798      	blx	r3
        setY(y);
 8005ac2:	f8d4 32a4 	ldr.w	r3, [r4, #676]	@ 0x2a4
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac8:	2186      	movs	r1, #134	@ 0x86
 8005aca:	4628      	mov	r0, r5
 8005acc:	4798      	blx	r3
        setWidth(width);
 8005ace:	f8d4 32a4 	ldr.w	r3, [r4, #676]	@ 0x2a4
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	21f0      	movs	r1, #240	@ 0xf0
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	4798      	blx	r3
        setHeight(height);
 8005ada:	f8d4 32a4 	ldr.w	r3, [r4, #676]	@ 0x2a4
 8005ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae0:	219c      	movs	r1, #156	@ 0x9c
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	4798      	blx	r3
    image_moteur.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f011 fd70 	bl	80175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8005aee:	4629      	mov	r1, r5
 8005af0:	4630      	mov	r0, r6
 8005af2:	f00e fb5f 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005af6:	230f      	movs	r3, #15
 8005af8:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
    image_lidar_bas.setBitmap(touchgfx::Bitmap(BITMAP_LIDAR1_ID));
 8005afc:	a92a      	add	r1, sp, #168	@ 0xa8
 8005afe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8005b00:	4628      	mov	r0, r5
 8005b02:	f012 fd44 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8005b06:	f8d4 32d0 	ldr.w	r3, [r4, #720]	@ 0x2d0
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	f240 111d 	movw	r1, #285	@ 0x11d
 8005b10:	4628      	mov	r0, r5
 8005b12:	4798      	blx	r3
        setY(y);
 8005b14:	f8d4 32d0 	ldr.w	r3, [r4, #720]	@ 0x2d0
 8005b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1a:	2186      	movs	r1, #134	@ 0x86
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	4798      	blx	r3
        setWidth(width);
 8005b20:	f8d4 32d0 	ldr.w	r3, [r4, #720]	@ 0x2d0
 8005b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b26:	21e6      	movs	r1, #230	@ 0xe6
 8005b28:	4628      	mov	r0, r5
 8005b2a:	4798      	blx	r3
        setHeight(height);
 8005b2c:	f8d4 32d0 	ldr.w	r3, [r4, #720]	@ 0x2d0
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	219c      	movs	r1, #156	@ 0x9c
 8005b34:	4628      	mov	r0, r5
 8005b36:	4798      	blx	r3
    image_lidar_bas.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f011 fd47 	bl	80175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4630      	mov	r0, r6
 8005b44:	f00e fb36 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
    image_lidar_haut.setBitmap(touchgfx::Bitmap(BITMAP_LIDAR2_ID));
 8005b4e:	a92b      	add	r1, sp, #172	@ 0xac
 8005b50:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005b52:	4628      	mov	r0, r5
 8005b54:	f012 fd1b 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8005b58:	f8d4 32fc 	ldr.w	r3, [r4, #764]	@ 0x2fc
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	f240 2139 	movw	r1, #569	@ 0x239
 8005b62:	4628      	mov	r0, r5
 8005b64:	4798      	blx	r3
        setY(y);
 8005b66:	f8d4 32fc 	ldr.w	r3, [r4, #764]	@ 0x2fc
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b6c:	2186      	movs	r1, #134	@ 0x86
 8005b6e:	4628      	mov	r0, r5
 8005b70:	4798      	blx	r3
        setWidth(width);
 8005b72:	f8d4 32fc 	ldr.w	r3, [r4, #764]	@ 0x2fc
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	21bb      	movs	r1, #187	@ 0xbb
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	4798      	blx	r3
        setHeight(height);
 8005b7e:	f8d4 32fc 	ldr.w	r3, [r4, #764]	@ 0x2fc
 8005b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b84:	219c      	movs	r1, #156	@ 0x9c
 8005b86:	4628      	mov	r0, r5
 8005b88:	4798      	blx	r3
    image_lidar_haut.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f011 fd1e 	bl	80175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8005b92:	4629      	mov	r1, r5
 8005b94:	4630      	mov	r0, r6
 8005b96:	f00e fb0d 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8005b9a:	f8d4 3328 	ldr.w	r3, [r4, #808]	@ 0x328
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba0:	210c      	movs	r1, #12
 8005ba2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	4798      	blx	r3
        setY(y);
 8005ba8:	f8d4 3328 	ldr.w	r3, [r4, #808]	@ 0x328
 8005bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bae:	2179      	movs	r1, #121	@ 0x79
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	4798      	blx	r3
        setWidth(width);
 8005bb4:	f8d4 3328 	ldr.w	r3, [r4, #808]	@ 0x328
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	f240 21f9 	movw	r1, #761	@ 0x2f9
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	4798      	blx	r3
        setHeight(height);
 8005bc2:	f8d4 3328 	ldr.w	r3, [r4, #808]	@ 0x328
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	21ba      	movs	r1, #186	@ 0xba
 8005bca:	4628      	mov	r0, r5
 8005bcc:	4798      	blx	r3
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f00e faef 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8005bd6:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	2135      	movs	r1, #53	@ 0x35
 8005bde:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 8005be2:	4648      	mov	r0, r9
 8005be4:	4798      	blx	r3
        setY(y);
 8005be6:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 8005bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bec:	217d      	movs	r1, #125	@ 0x7d
 8005bee:	4648      	mov	r0, r9
 8005bf0:	4798      	blx	r3
 8005bf2:	2500      	movs	r5, #0
 8005bf4:	f8ad 50b0 	strh.w	r5, [sp, #176]	@ 0xb0
 8005bf8:	2701      	movs	r7, #1
 8005bfa:	f8ad 70b4 	strh.w	r7, [sp, #180]	@ 0xb4
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_PRESSED_ID));
 8005bfe:	aa2d      	add	r2, sp, #180	@ 0xb4
 8005c00:	a92c      	add	r1, sp, #176	@ 0xb0
 8005c02:	4648      	mov	r0, r9
 8005c04:	f012 fb32 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8005c08:	f884 5386 	strb.w	r5, [r4, #902]	@ 0x386
 8005c0c:	f8c4 837c 	str.w	r8, [r4, #892]	@ 0x37c
 8005c10:	4649      	mov	r1, r9
 8005c12:	4630      	mov	r0, r6
 8005c14:	f00e face 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8005c18:	f8d4 3388 	ldr.w	r3, [r4, #904]	@ 0x388
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	f240 1135 	movw	r1, #309	@ 0x135
 8005c22:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8005c26:	4648      	mov	r0, r9
 8005c28:	4798      	blx	r3
        setY(y);
 8005c2a:	f8d4 3388 	ldr.w	r3, [r4, #904]	@ 0x388
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c30:	217d      	movs	r1, #125	@ 0x7d
 8005c32:	4648      	mov	r0, r9
 8005c34:	4798      	blx	r3
 8005c36:	f8ad 50b8 	strh.w	r5, [sp, #184]	@ 0xb8
 8005c3a:	f8ad 70bc 	strh.w	r7, [sp, #188]	@ 0xbc
    button1_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_PRESSED_ID));
 8005c3e:	aa2f      	add	r2, sp, #188	@ 0xbc
 8005c40:	a92e      	add	r1, sp, #184	@ 0xb8
 8005c42:	4648      	mov	r0, r9
 8005c44:	f012 fb12 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8005c48:	f884 53ba 	strb.w	r5, [r4, #954]	@ 0x3ba
 8005c4c:	f8c4 83b0 	str.w	r8, [r4, #944]	@ 0x3b0
 8005c50:	4649      	mov	r1, r9
 8005c52:	4630      	mov	r0, r6
 8005c54:	f00e faae 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8005c58:	f8d4 33bc 	ldr.w	r3, [r4, #956]	@ 0x3bc
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5e:	f240 213e 	movw	r1, #574	@ 0x23e
 8005c62:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8005c66:	4648      	mov	r0, r9
 8005c68:	4798      	blx	r3
        setY(y);
 8005c6a:	f8d4 33bc 	ldr.w	r3, [r4, #956]	@ 0x3bc
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c70:	217d      	movs	r1, #125	@ 0x7d
 8005c72:	4648      	mov	r0, r9
 8005c74:	4798      	blx	r3
 8005c76:	f8ad 50c0 	strh.w	r5, [sp, #192]	@ 0xc0
 8005c7a:	f8ad 70c4 	strh.w	r7, [sp, #196]	@ 0xc4
    button1_1_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_FILL_PRESSED_ID));
 8005c7e:	aa31      	add	r2, sp, #196	@ 0xc4
 8005c80:	a930      	add	r1, sp, #192	@ 0xc0
 8005c82:	4648      	mov	r0, r9
 8005c84:	f012 faf2 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8005c88:	f884 53ee 	strb.w	r5, [r4, #1006]	@ 0x3ee
 8005c8c:	f8c4 83e4 	str.w	r8, [r4, #996]	@ 0x3e4
 8005c90:	4649      	mov	r1, r9
 8005c92:	4630      	mov	r0, r6
 8005c94:	f00e fa8e 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005c98:	4620      	mov	r0, r4
 8005c9a:	b033      	add	sp, #204	@ 0xcc
 8005c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca0:	24062214 	.word	0x24062214
 8005ca4:	24062210 	.word	0x24062210
 8005ca8:	24062218 	.word	0x24062218
 8005cac:	2406221c 	.word	0x2406221c
 8005cb0:	0802c57c 	.word	0x0802c57c
 8005cb4:	0802c5c0 	.word	0x0802c5c0
 8005cb8:	0802c5fc 	.word	0x0802c5fc

08005cbc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8005cbc:	4770      	bx	lr

08005cbe <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8005cbe:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8005cc2:	6808      	ldr	r0, [r1, #0]
 8005cc4:	6849      	ldr	r1, [r1, #4]
 8005cc6:	c303      	stmia	r3!, {r0, r1}
    }
 8005cc8:	4770      	bx	lr

08005cca <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8005cca:	4770      	bx	lr

08005ccc <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8005ccc:	4770      	bx	lr

08005cce <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8005cce:	6041      	str	r1, [r0, #4]
    }
 8005cd0:	4770      	bx	lr

08005cd2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8005cd2:	b510      	push	{r4, lr}
 8005cd4:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8005cd6:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8005cda:	b158      	cbz	r0, 8005cf4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8005cdc:	6803      	ldr	r3, [r0, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	4798      	blx	r3
 8005ce2:	b138      	cbz	r0, 8005cf4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8005ce4:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8005ce8:	6803      	ldr	r3, [r0, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8005cf4:	bd10      	pop	{r4, pc}

08005cf6 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8005cf6:	4770      	bx	lr

08005cf8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	7203      	strb	r3, [r0, #8]
    }
 8005cfc:	4770      	bx	lr

08005cfe <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8005cfe:	4770      	bx	lr

08005d00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005d00:	4770      	bx	lr

08005d02 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8005d02:	b508      	push	{r3, lr}
 8005d04:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8005d06:	68c2      	ldr	r2, [r0, #12]
 8005d08:	6841      	ldr	r1, [r0, #4]
 8005d0a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8005d0e:	f012 0f01 	tst.w	r2, #1
 8005d12:	d102      	bne.n	8005d1a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	4798      	blx	r3
    }
 8005d18:	bd08      	pop	{r3, pc}
 8005d1a:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8005d1e:	f851 200c 	ldr.w	r2, [r1, ip]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	58d3      	ldr	r3, [r2, r3]
 8005d26:	e7f6      	b.n	8005d16 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08005d28 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8005d28:	6843      	ldr	r3, [r0, #4]
 8005d2a:	b13b      	cbz	r3, 8005d3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8005d2c:	6883      	ldr	r3, [r0, #8]
 8005d2e:	b10b      	cbz	r3, 8005d34 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8005d30:	2001      	movs	r0, #1
    }
 8005d32:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 8005d34:	68c0      	ldr	r0, [r0, #12]
 8005d36:	f000 0001 	and.w	r0, r0, #1
 8005d3a:	4770      	bx	lr
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	4770      	bx	lr

08005d40 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	4604      	mov	r4, r0
 8005d44:	210c      	movs	r1, #12
 8005d46:	f023 f8cb 	bl	8028ee0 <_ZdlPvj>
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	bd10      	pop	{r4, pc}

08005d4e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	4604      	mov	r4, r0
 8005d52:	2110      	movs	r1, #16
 8005d54:	f023 f8c4 	bl	8028ee0 <_ZdlPvj>
 8005d58:	4620      	mov	r0, r4
 8005d5a:	bd10      	pop	{r4, pc}

08005d5c <_ZN23FrontendApplicationBaseD0Ev>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4604      	mov	r4, r0
 8005d60:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8005d64:	f023 f8bc 	bl	8028ee0 <_ZdlPvj>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	bd10      	pop	{r4, pc}

08005d6c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8005d6c:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8005d6e:	f015 f911 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8005d72:	6803      	ldr	r3, [r0, #0]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d76:	4798      	blx	r3
    }
 8005d78:	bd08      	pop	{r3, pc}
	...

08005d7c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8005d7c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005d80:	4b05      	ldr	r3, [pc, #20]	@ (8005d98 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8005d82:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005d86:	2300      	movs	r3, #0
 8005d88:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Home

void FrontendApplicationBase::gotoHomeScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoHomeScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005d8c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005d90:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoHomeScreenNoTransition();
    }
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	08006095 	.word	0x08006095

08005d9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	4604      	mov	r4, r0
 8005da0:	460e      	mov	r6, r1
 8005da2:	4617      	mov	r7, r2
          pendingScreenTransitionCallback(0)
 8005da4:	f015 f9d6 	bl	801b154 <_ZN8touchgfx11ApplicationC1Ev>
        : currentPresenter(0),
 8005da8:	2500      	movs	r5, #0
 8005daa:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 8005dae:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
        instance = this;
 8005db2:	4b1c      	ldr	r3, [pc, #112]	@ (8005e24 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x88>)
 8005db4:	601c      	str	r4, [r3, #0]
      model(m)
 8005db6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e28 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x8c>)
 8005db8:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8005dba:	4b1c      	ldr	r3, [pc, #112]	@ (8005e2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x90>)
 8005dbc:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8005dc0:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8005dc4:	f8c4 514c 	str.w	r5, [r4, #332]	@ 0x14c
 8005dc8:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
      frontendHeap(heap),
 8005dcc:	f8c4 7154 	str.w	r7, [r4, #340]	@ 0x154
      model(m)
 8005dd0:	f8c4 6158 	str.w	r6, [r4, #344]	@ 0x158
        return instance;
 8005dd4:	4e16      	ldr	r6, [pc, #88]	@ (8005e30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x94>)
 8005dd6:	6830      	ldr	r0, [r6, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8005dd8:	6803      	ldr	r3, [r0, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4629      	mov	r1, r5
 8005dde:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8005de0:	4628      	mov	r0, r5
 8005de2:	f003 f965 	bl	80090b0 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005de6:	6833      	ldr	r3, [r6, #0]
 8005de8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005dec:	b10a      	cbz	r2, 8005df2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x56>
 8005dee:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005df0:	b900      	cbnz	r0, 8005df4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
        return instance->lcdRef;
 8005df2:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8005df4:	f01d f9e9 	bl	80231ca <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005df8:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x94>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005e00:	b10a      	cbz	r2, 8005e06 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
 8005e02:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005e04:	b900      	cbnz	r0, 8005e08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>
        return instance->lcdRef;
 8005e06:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8005e08:	f01d fa56 	bl	80232b8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8005e0c:	4b08      	ldr	r3, [pc, #32]	@ (8005e30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x94>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005e14:	b10a      	cbz	r2, 8005e1a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7e>
 8005e16:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005e18:	b900      	cbnz	r0, 8005e1c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>
        return instance->lcdRef;
 8005e1a:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8005e1c:	f01d fa58 	bl	80232d0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8005e20:	4620      	mov	r0, r4
 8005e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e24:	2406220c 	.word	0x2406220c
 8005e28:	0802d050 	.word	0x0802d050
 8005e2c:	0802d038 	.word	0x0802d038
 8005e30:	240621b8 	.word	0x240621b8

08005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005e34:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005e38:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv+0x1c>)
 8005e3a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8005e44:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005e48:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	08006095 	.word	0x08006095

08005e54 <_ZN23FrontendApplicationBase37gotoChoix_strategieScreenNoTransitionEv>:
 8005e54:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <_ZN23FrontendApplicationBase37gotoChoix_strategieScreenNoTransitionEv+0x1c>)
 8005e5a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Choix_strategie

void FrontendApplicationBase::gotoChoix_strategieScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoChoix_strategieScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005e64:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005e68:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	0800621d 	.word	0x0800621d

08005e74 <_ZN23FrontendApplicationBase32gotoRobot_pretScreenNoTransitionEv>:
 8005e74:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005e78:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <_ZN23FrontendApplicationBase32gotoRobot_pretScreenNoTransitionEv+0x1c>)
 8005e7a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Robot_pret

void FrontendApplicationBase::gotoRobot_pretScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoRobot_pretScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005e84:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005e88:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	080063a5 	.word	0x080063a5

08005e94 <_ZN23FrontendApplicationBase36gotoRobot_en_matchScreenNoTransitionEv>:
 8005e94:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005e98:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <_ZN23FrontendApplicationBase36gotoRobot_en_matchScreenNoTransitionEv+0x1c>)
 8005e9a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Robot_en_match

void FrontendApplicationBase::gotoRobot_en_matchScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoRobot_en_matchScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005ea4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005ea8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	0800652d 	.word	0x0800652d

08005eb4 <_ZN23FrontendApplicationBase33gotoChoix_testsScreenNoTransitionEv>:
 8005eb4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <_ZN23FrontendApplicationBase33gotoChoix_testsScreenNoTransitionEv+0x1c>)
 8005eba:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Choix_tests

void FrontendApplicationBase::gotoChoix_testsScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoChoix_testsScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005ec4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005ec8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	080066b5 	.word	0x080066b5

08005ed4 <_ZN23FrontendApplicationBase35gotoTests_moteursScreenNoTransitionEv>:
 8005ed4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <_ZN23FrontendApplicationBase35gotoTests_moteursScreenNoTransitionEv+0x1c>)
 8005eda:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Tests_moteurs

void FrontendApplicationBase::gotoTests_moteursScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoTests_moteursScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005ee4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005ee8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	0800683d 	.word	0x0800683d

08005ef4 <_ZN23FrontendApplicationBase36gotoTest_lidar_basScreenNoTransitionEv>:
 8005ef4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <_ZN23FrontendApplicationBase36gotoTest_lidar_basScreenNoTransitionEv+0x1c>)
 8005efa:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005efe:	2300      	movs	r3, #0
 8005f00:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Test_lidar_bas

void FrontendApplicationBase::gotoTest_lidar_basScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoTest_lidar_basScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005f04:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005f08:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	080069c9 	.word	0x080069c9

08005f14 <_ZN23FrontendApplicationBase37gotoTest_lidar_hautScreenNoTransitionEv>:
 8005f14:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8005f18:	4b05      	ldr	r3, [pc, #20]	@ (8005f30 <_ZN23FrontendApplicationBase37gotoTest_lidar_hautScreenNoTransitionEv+0x1c>)
 8005f1a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Test_lidar_haut

void FrontendApplicationBase::gotoTest_lidar_hautScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoTest_lidar_hautScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8005f24:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8005f28:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	08006b51 	.word	0x08006b51

08005f34 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8005f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	4607      	mov	r7, r0
 8005f3a:	4688      	mov	r8, r1
 8005f3c:	4615      	mov	r5, r2
 8005f3e:	4699      	mov	r9, r3
 8005f40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005f44:	6890      	ldr	r0, [r2, #8]
 8005f46:	6803      	ldr	r3, [r0, #0]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	4798      	blx	r3
 8005f4c:	f5b0 7f0f 	cmp.w	r0, #572	@ 0x23c
 8005f50:	d377      	bcc.n	8006042 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005f52:	6868      	ldr	r0, [r5, #4]
 8005f54:	6803      	ldr	r3, [r0, #0]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	4798      	blx	r3
 8005f5a:	280f      	cmp	r0, #15
 8005f5c:	d977      	bls.n	800604e <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005f5e:	68e8      	ldr	r0, [r5, #12]
 8005f60:	6803      	ldr	r3, [r0, #0]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	4798      	blx	r3
 8005f66:	280b      	cmp	r0, #11
 8005f68:	d977      	bls.n	800605a <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 8005f6a:	f015 f813 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8005f6e:	3004      	adds	r0, #4
 8005f70:	f015 f84e 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005f74:	f8d9 0000 	ldr.w	r0, [r9]
 8005f78:	b140      	cbz	r0, 8005f8c <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->tearDown();
 8005f7a:	6803      	ldr	r3, [r0, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	4798      	blx	r3
    if (*currentTrans)
 8005f80:	f8d9 0000 	ldr.w	r0, [r9]
 8005f84:	b110      	cbz	r0, 8005f8c <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 8005f86:	6803      	ldr	r3, [r0, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4798      	blx	r3
    if (*currentScreen)
 8005f8c:	6838      	ldr	r0, [r7, #0]
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d06f      	beq.n	8006072 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13e>
        (*currentScreen)->tearDownScreen();
 8005f92:	6803      	ldr	r3, [r0, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4798      	blx	r3
    if (*currentPresenter)
 8005f98:	f8d8 0000 	ldr.w	r0, [r8]
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d064      	beq.n	800606a <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x136>
        (*currentPresenter)->deactivate();
 8005fa0:	6803      	ldr	r3, [r0, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	4798      	blx	r3
    if (*currentScreen)
 8005fa6:	6838      	ldr	r0, [r7, #0]
 8005fa8:	b110      	cbz	r0, 8005fb0 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->~Screen();
 8005faa:	6803      	ldr	r3, [r0, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4798      	blx	r3
    if (*currentPresenter)
 8005fb0:	f8d8 0000 	ldr.w	r0, [r8]
 8005fb4:	b110      	cbz	r0, 8005fbc <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->~Presenter();
 8005fb6:	6803      	ldr	r3, [r0, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005fbc:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8005fbe:	6803      	ldr	r3, [r0, #0]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4798      	blx	r3
 8005fc6:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8005fc8:	f04f 0b00 	mov.w	fp, #0
 8005fcc:	f8c0 b004 	str.w	fp, [r0, #4]
 8005fd0:	f880 b008 	strb.w	fp, [r0, #8]
 8005fd4:	4b29      	ldr	r3, [pc, #164]	@ (800607c <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8005fd6:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005fd8:	68a8      	ldr	r0, [r5, #8]
 8005fda:	6803      	ldr	r3, [r0, #0]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	4659      	mov	r1, fp
 8005fe0:	4798      	blx	r3
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	f003 fa0c 	bl	8009400 <_ZN8HomeViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005fe8:	6868      	ldr	r0, [r5, #4]
 8005fea:	6803      	ldr	r3, [r0, #0]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fee:	4659      	mov	r1, fp
 8005ff0:	4798      	blx	r3
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	f003 f9b5 	bl	8009364 <_ZN13HomePresenterC1ER8HomeView>
    *currentTrans = newTransition;
 8005ffa:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8005ffe:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8006002:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8006004:	2d00      	cmp	r5, #0
 8006006:	d02e      	beq.n	8006066 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8006008:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800600a:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800600e:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8006012:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4630      	mov	r0, r6
 800601a:	4798      	blx	r3
    newPresenter->activate();
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4628      	mov	r0, r5
 8006022:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006024:	4621      	mov	r1, r4
 8006026:	4630      	mov	r0, r6
 8006028:	f017 f86c 	bl	801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	4620      	mov	r0, r4
 8006032:	4798      	blx	r3
    newTransition->invalidate();
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	4620      	mov	r0, r4
 800603a:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 800603c:	4628      	mov	r0, r5
 800603e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006042:	4b0f      	ldr	r3, [pc, #60]	@ (8006080 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8006044:	4a0f      	ldr	r2, [pc, #60]	@ (8006084 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006046:	21a3      	movs	r1, #163	@ 0xa3
 8006048:	480f      	ldr	r0, [pc, #60]	@ (8006088 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 800604a:	f023 fac1 	bl	80295d0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800604e:	4b0f      	ldr	r3, [pc, #60]	@ (800608c <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 8006050:	4a0c      	ldr	r2, [pc, #48]	@ (8006084 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006052:	21a4      	movs	r1, #164	@ 0xa4
 8006054:	480c      	ldr	r0, [pc, #48]	@ (8006088 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006056:	f023 fabb 	bl	80295d0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800605a:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 800605c:	4a09      	ldr	r2, [pc, #36]	@ (8006084 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 800605e:	21a5      	movs	r1, #165	@ 0xa5
 8006060:	4809      	ldr	r0, [pc, #36]	@ (8006088 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006062:	f023 fab5 	bl	80295d0 <__assert_func>
    model->bind(newPresenter);
 8006066:	462b      	mov	r3, r5
 8006068:	e7cf      	b.n	800600a <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
    if (*currentScreen)
 800606a:	6838      	ldr	r0, [r7, #0]
 800606c:	2800      	cmp	r0, #0
 800606e:	d19c      	bne.n	8005faa <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
 8006070:	e7a4      	b.n	8005fbc <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
    if (*currentPresenter)
 8006072:	f8d8 0000 	ldr.w	r0, [r8]
 8006076:	2800      	cmp	r0, #0
 8006078:	d192      	bne.n	8005fa0 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
 800607a:	e79f      	b.n	8005fbc <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
 800607c:	0802d0a4 	.word	0x0802d0a4
 8006080:	0802c718 	.word	0x0802c718
 8006084:	0802c7a8 	.word	0x0802c7a8
 8006088:	0802c874 	.word	0x0802c874
 800608c:	0802c8cc 	.word	0x0802c8cc
 8006090:	0802c970 	.word	0x0802c970

08006094 <_ZN23FrontendApplicationBase30gotoHomeScreenNoTransitionImplEv>:
{
 8006094:	b500      	push	{lr}
 8006096:	b083      	sub	sp, #12
    touchgfx::makeTransition<HomeView, HomePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8006098:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <_ZN23FrontendApplicationBase30gotoHomeScreenNoTransitionImplEv+0x20>)
 80060a0:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 80060a4:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 80060a8:	4803      	ldr	r0, [pc, #12]	@ (80060b8 <_ZN23FrontendApplicationBase30gotoHomeScreenNoTransitionImplEv+0x24>)
 80060aa:	f7ff ff43 	bl	8005f34 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80060ae:	b003      	add	sp, #12
 80060b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80060b4:	24062200 	.word	0x24062200
 80060b8:	240621fc 	.word	0x240621fc

080060bc <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80060bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	4607      	mov	r7, r0
 80060c2:	4688      	mov	r8, r1
 80060c4:	4615      	mov	r5, r2
 80060c6:	4699      	mov	r9, r3
 80060c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80060cc:	6890      	ldr	r0, [r2, #8]
 80060ce:	6803      	ldr	r3, [r0, #0]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	4798      	blx	r3
 80060d4:	f5b0 7f75 	cmp.w	r0, #980	@ 0x3d4
 80060d8:	d377      	bcc.n	80061ca <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80060da:	6868      	ldr	r0, [r5, #4]
 80060dc:	6803      	ldr	r3, [r0, #0]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	4798      	blx	r3
 80060e2:	280f      	cmp	r0, #15
 80060e4:	d977      	bls.n	80061d6 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80060e6:	68e8      	ldr	r0, [r5, #12]
 80060e8:	6803      	ldr	r3, [r0, #0]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	4798      	blx	r3
 80060ee:	280b      	cmp	r0, #11
 80060f0:	d977      	bls.n	80061e2 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 80060f2:	f014 ff4f 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 80060f6:	3004      	adds	r0, #4
 80060f8:	f014 ff8a 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80060fc:	f8d9 0000 	ldr.w	r0, [r9]
 8006100:	b140      	cbz	r0, 8006114 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->tearDown();
 8006102:	6803      	ldr	r3, [r0, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	4798      	blx	r3
    if (*currentTrans)
 8006108:	f8d9 0000 	ldr.w	r0, [r9]
 800610c:	b110      	cbz	r0, 8006114 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 800610e:	6803      	ldr	r3, [r0, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4798      	blx	r3
    if (*currentScreen)
 8006114:	6838      	ldr	r0, [r7, #0]
 8006116:	2800      	cmp	r0, #0
 8006118:	d06f      	beq.n	80061fa <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13e>
        (*currentScreen)->tearDownScreen();
 800611a:	6803      	ldr	r3, [r0, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	4798      	blx	r3
    if (*currentPresenter)
 8006120:	f8d8 0000 	ldr.w	r0, [r8]
 8006124:	2800      	cmp	r0, #0
 8006126:	d064      	beq.n	80061f2 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x136>
        (*currentPresenter)->deactivate();
 8006128:	6803      	ldr	r3, [r0, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	4798      	blx	r3
    if (*currentScreen)
 800612e:	6838      	ldr	r0, [r7, #0]
 8006130:	b110      	cbz	r0, 8006138 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->~Screen();
 8006132:	6803      	ldr	r3, [r0, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4798      	blx	r3
    if (*currentPresenter)
 8006138:	f8d8 0000 	ldr.w	r0, [r8]
 800613c:	b110      	cbz	r0, 8006144 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->~Presenter();
 800613e:	6803      	ldr	r3, [r0, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8006144:	68e8      	ldr	r0, [r5, #12]
 8006146:	6803      	ldr	r3, [r0, #0]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	2100      	movs	r1, #0
 800614c:	4798      	blx	r3
 800614e:	4604      	mov	r4, r0
 8006150:	f04f 0b00 	mov.w	fp, #0
 8006154:	f8c0 b004 	str.w	fp, [r0, #4]
 8006158:	f880 b008 	strb.w	fp, [r0, #8]
 800615c:	4b29      	ldr	r3, [pc, #164]	@ (8006204 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 800615e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006160:	68a8      	ldr	r0, [r5, #8]
 8006162:	6803      	ldr	r3, [r0, #0]
 8006164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006166:	4659      	mov	r1, fp
 8006168:	4798      	blx	r3
 800616a:	4606      	mov	r6, r0
 800616c:	f003 f872 	bl	8009254 <_ZN19Choix_strategieViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006170:	6868      	ldr	r0, [r5, #4]
 8006172:	6803      	ldr	r3, [r0, #0]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	4659      	mov	r1, fp
 8006178:	4798      	blx	r3
 800617a:	4605      	mov	r5, r0
 800617c:	4631      	mov	r1, r6
 800617e:	f003 f81d 	bl	80091bc <_ZN24Choix_strategiePresenterC1ER19Choix_strategieView>
    *currentTrans = newTransition;
 8006182:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8006186:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 800618a:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 800618c:	2d00      	cmp	r5, #0
 800618e:	d02e      	beq.n	80061ee <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8006190:	1d2b      	adds	r3, r5, #4
 8006192:	f8ca 3000 	str.w	r3, [sl]
 8006196:	f8c5 a008 	str.w	sl, [r5, #8]
 800619a:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 800619c:	6833      	ldr	r3, [r6, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4630      	mov	r0, r6
 80061a2:	4798      	blx	r3
    newPresenter->activate();
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4628      	mov	r0, r5
 80061aa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80061ac:	4621      	mov	r1, r4
 80061ae:	4630      	mov	r0, r6
 80061b0:	f016 ffa8 	bl	801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	4620      	mov	r0, r4
 80061ba:	4798      	blx	r3
    newTransition->invalidate();
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	4620      	mov	r0, r4
 80061c2:	4798      	blx	r3
}
 80061c4:	4628      	mov	r0, r5
 80061c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80061ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006208 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80061cc:	4a0f      	ldr	r2, [pc, #60]	@ (800620c <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80061ce:	21a3      	movs	r1, #163	@ 0xa3
 80061d0:	480f      	ldr	r0, [pc, #60]	@ (8006210 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80061d2:	f023 f9fd 	bl	80295d0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80061d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 80061d8:	4a0c      	ldr	r2, [pc, #48]	@ (800620c <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80061da:	21a4      	movs	r1, #164	@ 0xa4
 80061dc:	480c      	ldr	r0, [pc, #48]	@ (8006210 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80061de:	f023 f9f7 	bl	80295d0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80061e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 80061e4:	4a09      	ldr	r2, [pc, #36]	@ (800620c <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80061e6:	21a5      	movs	r1, #165	@ 0xa5
 80061e8:	4809      	ldr	r0, [pc, #36]	@ (8006210 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80061ea:	f023 f9f1 	bl	80295d0 <__assert_func>
    model->bind(newPresenter);
 80061ee:	462b      	mov	r3, r5
 80061f0:	e7cf      	b.n	8006192 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
    if (*currentScreen)
 80061f2:	6838      	ldr	r0, [r7, #0]
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d19c      	bne.n	8006132 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
 80061f8:	e7a4      	b.n	8006144 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
    if (*currentPresenter)
 80061fa:	f8d8 0000 	ldr.w	r0, [r8]
 80061fe:	2800      	cmp	r0, #0
 8006200:	d192      	bne.n	8006128 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
 8006202:	e79f      	b.n	8006144 <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
 8006204:	0802d0a4 	.word	0x0802d0a4
 8006208:	0802c718 	.word	0x0802c718
 800620c:	0802ca14 	.word	0x0802ca14
 8006210:	0802c874 	.word	0x0802c874
 8006214:	0802c8cc 	.word	0x0802c8cc
 8006218:	0802c970 	.word	0x0802c970

0800621c <_ZN23FrontendApplicationBase41gotoChoix_strategieScreenNoTransitionImplEv>:
{
 800621c:	b500      	push	{lr}
 800621e:	b083      	sub	sp, #12
    touchgfx::makeTransition<Choix_strategieView, Choix_strategiePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8006220:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	4b05      	ldr	r3, [pc, #20]	@ (800623c <_ZN23FrontendApplicationBase41gotoChoix_strategieScreenNoTransitionImplEv+0x20>)
 8006228:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 800622c:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 8006230:	4803      	ldr	r0, [pc, #12]	@ (8006240 <_ZN23FrontendApplicationBase41gotoChoix_strategieScreenNoTransitionImplEv+0x24>)
 8006232:	f7ff ff43 	bl	80060bc <_ZN8touchgfx14makeTransitionI19Choix_strategieView24Choix_strategiePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8006236:	b003      	add	sp, #12
 8006238:	f85d fb04 	ldr.w	pc, [sp], #4
 800623c:	24062200 	.word	0x24062200
 8006240:	240621fc 	.word	0x240621fc

08006244 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8006244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	4607      	mov	r7, r0
 800624a:	4688      	mov	r8, r1
 800624c:	4615      	mov	r5, r2
 800624e:	4699      	mov	r9, r3
 8006250:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006254:	6890      	ldr	r0, [r2, #8]
 8006256:	6803      	ldr	r3, [r0, #0]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	4798      	blx	r3
 800625c:	f5b0 7fd8 	cmp.w	r0, #432	@ 0x1b0
 8006260:	d377      	bcc.n	8006352 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8006262:	6868      	ldr	r0, [r5, #4]
 8006264:	6803      	ldr	r3, [r0, #0]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	4798      	blx	r3
 800626a:	280f      	cmp	r0, #15
 800626c:	d977      	bls.n	800635e <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800626e:	68e8      	ldr	r0, [r5, #12]
 8006270:	6803      	ldr	r3, [r0, #0]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	4798      	blx	r3
 8006276:	280b      	cmp	r0, #11
 8006278:	d977      	bls.n	800636a <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 800627a:	f014 fe8b 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800627e:	3004      	adds	r0, #4
 8006280:	f014 fec6 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8006284:	f8d9 0000 	ldr.w	r0, [r9]
 8006288:	b140      	cbz	r0, 800629c <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->tearDown();
 800628a:	6803      	ldr	r3, [r0, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	4798      	blx	r3
    if (*currentTrans)
 8006290:	f8d9 0000 	ldr.w	r0, [r9]
 8006294:	b110      	cbz	r0, 800629c <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 8006296:	6803      	ldr	r3, [r0, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4798      	blx	r3
    if (*currentScreen)
 800629c:	6838      	ldr	r0, [r7, #0]
 800629e:	2800      	cmp	r0, #0
 80062a0:	d06f      	beq.n	8006382 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13e>
        (*currentScreen)->tearDownScreen();
 80062a2:	6803      	ldr	r3, [r0, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	4798      	blx	r3
    if (*currentPresenter)
 80062a8:	f8d8 0000 	ldr.w	r0, [r8]
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d064      	beq.n	800637a <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x136>
        (*currentPresenter)->deactivate();
 80062b0:	6803      	ldr	r3, [r0, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	4798      	blx	r3
    if (*currentScreen)
 80062b6:	6838      	ldr	r0, [r7, #0]
 80062b8:	b110      	cbz	r0, 80062c0 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->~Screen();
 80062ba:	6803      	ldr	r3, [r0, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4798      	blx	r3
    if (*currentPresenter)
 80062c0:	f8d8 0000 	ldr.w	r0, [r8]
 80062c4:	b110      	cbz	r0, 80062cc <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->~Presenter();
 80062c6:	6803      	ldr	r3, [r0, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80062cc:	68e8      	ldr	r0, [r5, #12]
 80062ce:	6803      	ldr	r3, [r0, #0]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d2:	2100      	movs	r1, #0
 80062d4:	4798      	blx	r3
 80062d6:	4604      	mov	r4, r0
 80062d8:	f04f 0b00 	mov.w	fp, #0
 80062dc:	f8c0 b004 	str.w	fp, [r0, #4]
 80062e0:	f880 b008 	strb.w	fp, [r0, #8]
 80062e4:	4b29      	ldr	r3, [pc, #164]	@ (800638c <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80062e6:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80062e8:	68a8      	ldr	r0, [r5, #8]
 80062ea:	6803      	ldr	r3, [r0, #0]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	4659      	mov	r1, fp
 80062f0:	4798      	blx	r3
 80062f2:	4606      	mov	r6, r0
 80062f4:	f003 f958 	bl	80095a8 <_ZN14Robot_pretViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80062f8:	6868      	ldr	r0, [r5, #4]
 80062fa:	6803      	ldr	r3, [r0, #0]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	4659      	mov	r1, fp
 8006300:	4798      	blx	r3
 8006302:	4605      	mov	r5, r0
 8006304:	4631      	mov	r1, r6
 8006306:	f003 f929 	bl	800955c <_ZN19Robot_pretPresenterC1ER14Robot_pretView>
    *currentTrans = newTransition;
 800630a:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800630e:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8006312:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8006314:	2d00      	cmp	r5, #0
 8006316:	d02e      	beq.n	8006376 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8006318:	1d2b      	adds	r3, r5, #4
 800631a:	f8ca 3000 	str.w	r3, [sl]
 800631e:	f8c5 a008 	str.w	sl, [r5, #8]
 8006322:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8006324:	6833      	ldr	r3, [r6, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	4630      	mov	r0, r6
 800632a:	4798      	blx	r3
    newPresenter->activate();
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4628      	mov	r0, r5
 8006332:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006334:	4621      	mov	r1, r4
 8006336:	4630      	mov	r0, r6
 8006338:	f016 fee4 	bl	801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	4620      	mov	r0, r4
 8006342:	4798      	blx	r3
    newTransition->invalidate();
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	4620      	mov	r0, r4
 800634a:	4798      	blx	r3
}
 800634c:	4628      	mov	r0, r5
 800634e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006352:	4b0f      	ldr	r3, [pc, #60]	@ (8006390 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8006354:	4a0f      	ldr	r2, [pc, #60]	@ (8006394 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006356:	21a3      	movs	r1, #163	@ 0xa3
 8006358:	480f      	ldr	r0, [pc, #60]	@ (8006398 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 800635a:	f023 f939 	bl	80295d0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800635e:	4b0f      	ldr	r3, [pc, #60]	@ (800639c <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 8006360:	4a0c      	ldr	r2, [pc, #48]	@ (8006394 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006362:	21a4      	movs	r1, #164	@ 0xa4
 8006364:	480c      	ldr	r0, [pc, #48]	@ (8006398 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006366:	f023 f933 	bl	80295d0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800636a:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 800636c:	4a09      	ldr	r2, [pc, #36]	@ (8006394 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 800636e:	21a5      	movs	r1, #165	@ 0xa5
 8006370:	4809      	ldr	r0, [pc, #36]	@ (8006398 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006372:	f023 f92d 	bl	80295d0 <__assert_func>
    model->bind(newPresenter);
 8006376:	462b      	mov	r3, r5
 8006378:	e7cf      	b.n	800631a <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
    if (*currentScreen)
 800637a:	6838      	ldr	r0, [r7, #0]
 800637c:	2800      	cmp	r0, #0
 800637e:	d19c      	bne.n	80062ba <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
 8006380:	e7a4      	b.n	80062cc <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
    if (*currentPresenter)
 8006382:	f8d8 0000 	ldr.w	r0, [r8]
 8006386:	2800      	cmp	r0, #0
 8006388:	d192      	bne.n	80062b0 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
 800638a:	e79f      	b.n	80062cc <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
 800638c:	0802d0a4 	.word	0x0802d0a4
 8006390:	0802c718 	.word	0x0802c718
 8006394:	0802caf8 	.word	0x0802caf8
 8006398:	0802c874 	.word	0x0802c874
 800639c:	0802c8cc 	.word	0x0802c8cc
 80063a0:	0802c970 	.word	0x0802c970

080063a4 <_ZN23FrontendApplicationBase36gotoRobot_pretScreenNoTransitionImplEv>:
{
 80063a4:	b500      	push	{lr}
 80063a6:	b083      	sub	sp, #12
    touchgfx::makeTransition<Robot_pretView, Robot_pretPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80063a8:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <_ZN23FrontendApplicationBase36gotoRobot_pretScreenNoTransitionImplEv+0x20>)
 80063b0:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 80063b4:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 80063b8:	4803      	ldr	r0, [pc, #12]	@ (80063c8 <_ZN23FrontendApplicationBase36gotoRobot_pretScreenNoTransitionImplEv+0x24>)
 80063ba:	f7ff ff43 	bl	8006244 <_ZN8touchgfx14makeTransitionI14Robot_pretView19Robot_pretPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80063be:	b003      	add	sp, #12
 80063c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80063c4:	24062200 	.word	0x24062200
 80063c8:	240621fc 	.word	0x240621fc

080063cc <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80063cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	4607      	mov	r7, r0
 80063d2:	4688      	mov	r8, r1
 80063d4:	4615      	mov	r5, r2
 80063d6:	4699      	mov	r9, r3
 80063d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80063dc:	6890      	ldr	r0, [r2, #8]
 80063de:	6803      	ldr	r3, [r0, #0]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	4798      	blx	r3
 80063e4:	28df      	cmp	r0, #223	@ 0xdf
 80063e6:	d977      	bls.n	80064d8 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80063e8:	6868      	ldr	r0, [r5, #4]
 80063ea:	6803      	ldr	r3, [r0, #0]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	4798      	blx	r3
 80063f0:	280f      	cmp	r0, #15
 80063f2:	d977      	bls.n	80064e4 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80063f4:	68e8      	ldr	r0, [r5, #12]
 80063f6:	6803      	ldr	r3, [r0, #0]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	4798      	blx	r3
 80063fc:	280b      	cmp	r0, #11
 80063fe:	d977      	bls.n	80064f0 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
    Application::getInstance()->clearAllTimerWidgets();
 8006400:	f014 fdc8 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8006404:	3004      	adds	r0, #4
 8006406:	f014 fe03 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800640a:	f8d9 0000 	ldr.w	r0, [r9]
 800640e:	b140      	cbz	r0, 8006422 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
        (*currentTrans)->tearDown();
 8006410:	6803      	ldr	r3, [r0, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4798      	blx	r3
    if (*currentTrans)
 8006416:	f8d9 0000 	ldr.w	r0, [r9]
 800641a:	b110      	cbz	r0, 8006422 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
        (*currentTrans)->~Transition();
 800641c:	6803      	ldr	r3, [r0, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4798      	blx	r3
    if (*currentScreen)
 8006422:	6838      	ldr	r0, [r7, #0]
 8006424:	2800      	cmp	r0, #0
 8006426:	d06f      	beq.n	8006508 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>
        (*currentScreen)->tearDownScreen();
 8006428:	6803      	ldr	r3, [r0, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	4798      	blx	r3
    if (*currentPresenter)
 800642e:	f8d8 0000 	ldr.w	r0, [r8]
 8006432:	2800      	cmp	r0, #0
 8006434:	d064      	beq.n	8006500 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->deactivate();
 8006436:	6803      	ldr	r3, [r0, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4798      	blx	r3
    if (*currentScreen)
 800643c:	6838      	ldr	r0, [r7, #0]
 800643e:	b110      	cbz	r0, 8006446 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
        (*currentScreen)->~Screen();
 8006440:	6803      	ldr	r3, [r0, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4798      	blx	r3
    if (*currentPresenter)
 8006446:	f8d8 0000 	ldr.w	r0, [r8]
 800644a:	b110      	cbz	r0, 8006452 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x86>
        (*currentPresenter)->~Presenter();
 800644c:	6803      	ldr	r3, [r0, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8006452:	68e8      	ldr	r0, [r5, #12]
 8006454:	6803      	ldr	r3, [r0, #0]
 8006456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006458:	2100      	movs	r1, #0
 800645a:	4798      	blx	r3
 800645c:	4604      	mov	r4, r0
 800645e:	f04f 0b00 	mov.w	fp, #0
 8006462:	f8c0 b004 	str.w	fp, [r0, #4]
 8006466:	f880 b008 	strb.w	fp, [r0, #8]
 800646a:	4b2a      	ldr	r3, [pc, #168]	@ (8006514 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 800646c:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800646e:	68a8      	ldr	r0, [r5, #8]
 8006470:	6803      	ldr	r3, [r0, #0]
 8006472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006474:	4659      	mov	r1, fp
 8006476:	4798      	blx	r3
 8006478:	4606      	mov	r6, r0
 800647a:	f003 f84d 	bl	8009518 <_ZN18Robot_en_matchViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800647e:	6868      	ldr	r0, [r5, #4]
 8006480:	6803      	ldr	r3, [r0, #0]
 8006482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006484:	4659      	mov	r1, fp
 8006486:	4798      	blx	r3
 8006488:	4605      	mov	r5, r0
 800648a:	4631      	mov	r1, r6
 800648c:	f002 ffde 	bl	800944c <_ZN23Robot_en_matchPresenterC1ER18Robot_en_matchView>
    *currentTrans = newTransition;
 8006490:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8006494:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8006498:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 800649a:	2d00      	cmp	r5, #0
 800649c:	d02e      	beq.n	80064fc <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800649e:	1d2b      	adds	r3, r5, #4
 80064a0:	f8ca 3000 	str.w	r3, [sl]
 80064a4:	f8c5 a008 	str.w	sl, [r5, #8]
 80064a8:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 80064aa:	6833      	ldr	r3, [r6, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	4630      	mov	r0, r6
 80064b0:	4798      	blx	r3
    newPresenter->activate();
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4628      	mov	r0, r5
 80064b8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80064ba:	4621      	mov	r1, r4
 80064bc:	4630      	mov	r0, r6
 80064be:	f016 fe21 	bl	801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	4620      	mov	r0, r4
 80064c8:	4798      	blx	r3
    newTransition->invalidate();
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	4620      	mov	r0, r4
 80064d0:	4798      	blx	r3
}
 80064d2:	4628      	mov	r0, r5
 80064d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80064d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006518 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80064da:	4a10      	ldr	r2, [pc, #64]	@ (800651c <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80064dc:	21a3      	movs	r1, #163	@ 0xa3
 80064de:	4810      	ldr	r0, [pc, #64]	@ (8006520 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80064e0:	f023 f876 	bl	80295d0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80064e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006524 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 80064e6:	4a0d      	ldr	r2, [pc, #52]	@ (800651c <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80064e8:	21a4      	movs	r1, #164	@ 0xa4
 80064ea:	480d      	ldr	r0, [pc, #52]	@ (8006520 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80064ec:	f023 f870 	bl	80295d0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80064f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 80064f2:	4a0a      	ldr	r2, [pc, #40]	@ (800651c <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80064f4:	21a5      	movs	r1, #165	@ 0xa5
 80064f6:	480a      	ldr	r0, [pc, #40]	@ (8006520 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80064f8:	f023 f86a 	bl	80295d0 <__assert_func>
    model->bind(newPresenter);
 80064fc:	462b      	mov	r3, r5
 80064fe:	e7cf      	b.n	80064a0 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd4>
    if (*currentScreen)
 8006500:	6838      	ldr	r0, [r7, #0]
 8006502:	2800      	cmp	r0, #0
 8006504:	d19c      	bne.n	8006440 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
 8006506:	e7a4      	b.n	8006452 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x86>
    if (*currentPresenter)
 8006508:	f8d8 0000 	ldr.w	r0, [r8]
 800650c:	2800      	cmp	r0, #0
 800650e:	d192      	bne.n	8006436 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6a>
 8006510:	e79f      	b.n	8006452 <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x86>
 8006512:	bf00      	nop
 8006514:	0802d0a4 	.word	0x0802d0a4
 8006518:	0802c718 	.word	0x0802c718
 800651c:	0802cbd0 	.word	0x0802cbd0
 8006520:	0802c874 	.word	0x0802c874
 8006524:	0802c8cc 	.word	0x0802c8cc
 8006528:	0802c970 	.word	0x0802c970

0800652c <_ZN23FrontendApplicationBase40gotoRobot_en_matchScreenNoTransitionImplEv>:
{
 800652c:	b500      	push	{lr}
 800652e:	b083      	sub	sp, #12
    touchgfx::makeTransition<Robot_en_matchView, Robot_en_matchPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8006530:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4b05      	ldr	r3, [pc, #20]	@ (800654c <_ZN23FrontendApplicationBase40gotoRobot_en_matchScreenNoTransitionImplEv+0x20>)
 8006538:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 800653c:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 8006540:	4803      	ldr	r0, [pc, #12]	@ (8006550 <_ZN23FrontendApplicationBase40gotoRobot_en_matchScreenNoTransitionImplEv+0x24>)
 8006542:	f7ff ff43 	bl	80063cc <_ZN8touchgfx14makeTransitionI18Robot_en_matchView23Robot_en_matchPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8006546:	b003      	add	sp, #12
 8006548:	f85d fb04 	ldr.w	pc, [sp], #4
 800654c:	24062200 	.word	0x24062200
 8006550:	240621fc 	.word	0x240621fc

08006554 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8006554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	4607      	mov	r7, r0
 800655a:	4688      	mov	r8, r1
 800655c:	4615      	mov	r5, r2
 800655e:	4699      	mov	r9, r3
 8006560:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006564:	6890      	ldr	r0, [r2, #8]
 8006566:	6803      	ldr	r3, [r0, #0]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	4798      	blx	r3
 800656c:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8006570:	d377      	bcc.n	8006662 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8006572:	6868      	ldr	r0, [r5, #4]
 8006574:	6803      	ldr	r3, [r0, #0]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	4798      	blx	r3
 800657a:	280f      	cmp	r0, #15
 800657c:	d977      	bls.n	800666e <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800657e:	68e8      	ldr	r0, [r5, #12]
 8006580:	6803      	ldr	r3, [r0, #0]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	4798      	blx	r3
 8006586:	280b      	cmp	r0, #11
 8006588:	d977      	bls.n	800667a <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 800658a:	f014 fd03 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800658e:	3004      	adds	r0, #4
 8006590:	f014 fd3e 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8006594:	f8d9 0000 	ldr.w	r0, [r9]
 8006598:	b140      	cbz	r0, 80065ac <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->tearDown();
 800659a:	6803      	ldr	r3, [r0, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	4798      	blx	r3
    if (*currentTrans)
 80065a0:	f8d9 0000 	ldr.w	r0, [r9]
 80065a4:	b110      	cbz	r0, 80065ac <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 80065a6:	6803      	ldr	r3, [r0, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4798      	blx	r3
    if (*currentScreen)
 80065ac:	6838      	ldr	r0, [r7, #0]
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d06f      	beq.n	8006692 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13e>
        (*currentScreen)->tearDownScreen();
 80065b2:	6803      	ldr	r3, [r0, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	4798      	blx	r3
    if (*currentPresenter)
 80065b8:	f8d8 0000 	ldr.w	r0, [r8]
 80065bc:	2800      	cmp	r0, #0
 80065be:	d064      	beq.n	800668a <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x136>
        (*currentPresenter)->deactivate();
 80065c0:	6803      	ldr	r3, [r0, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4798      	blx	r3
    if (*currentScreen)
 80065c6:	6838      	ldr	r0, [r7, #0]
 80065c8:	b110      	cbz	r0, 80065d0 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->~Screen();
 80065ca:	6803      	ldr	r3, [r0, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4798      	blx	r3
    if (*currentPresenter)
 80065d0:	f8d8 0000 	ldr.w	r0, [r8]
 80065d4:	b110      	cbz	r0, 80065dc <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->~Presenter();
 80065d6:	6803      	ldr	r3, [r0, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80065dc:	68e8      	ldr	r0, [r5, #12]
 80065de:	6803      	ldr	r3, [r0, #0]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e2:	2100      	movs	r1, #0
 80065e4:	4798      	blx	r3
 80065e6:	4604      	mov	r4, r0
 80065e8:	f04f 0b00 	mov.w	fp, #0
 80065ec:	f8c0 b004 	str.w	fp, [r0, #4]
 80065f0:	f880 b008 	strb.w	fp, [r0, #8]
 80065f4:	4b29      	ldr	r3, [pc, #164]	@ (800669c <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80065f6:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80065f8:	68a8      	ldr	r0, [r5, #8]
 80065fa:	6803      	ldr	r3, [r0, #0]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fe:	4659      	mov	r1, fp
 8006600:	4798      	blx	r3
 8006602:	4606      	mov	r6, r0
 8006604:	f002 fe6e 	bl	80092e4 <_ZN15Choix_testsViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006608:	6868      	ldr	r0, [r5, #4]
 800660a:	6803      	ldr	r3, [r0, #0]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	4659      	mov	r1, fp
 8006610:	4798      	blx	r3
 8006612:	4605      	mov	r5, r0
 8006614:	4631      	mov	r1, r6
 8006616:	f002 fe3f 	bl	8009298 <_ZN20Choix_testsPresenterC1ER15Choix_testsView>
    *currentTrans = newTransition;
 800661a:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800661e:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8006622:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8006624:	2d00      	cmp	r5, #0
 8006626:	d02e      	beq.n	8006686 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8006628:	1d2b      	adds	r3, r5, #4
 800662a:	f8ca 3000 	str.w	r3, [sl]
 800662e:	f8c5 a008 	str.w	sl, [r5, #8]
 8006632:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8006634:	6833      	ldr	r3, [r6, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4630      	mov	r0, r6
 800663a:	4798      	blx	r3
    newPresenter->activate();
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4628      	mov	r0, r5
 8006642:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006644:	4621      	mov	r1, r4
 8006646:	4630      	mov	r0, r6
 8006648:	f016 fd5c 	bl	801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	4620      	mov	r0, r4
 8006652:	4798      	blx	r3
    newTransition->invalidate();
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	4620      	mov	r0, r4
 800665a:	4798      	blx	r3
}
 800665c:	4628      	mov	r0, r5
 800665e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006662:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8006664:	4a0f      	ldr	r2, [pc, #60]	@ (80066a4 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006666:	21a3      	movs	r1, #163	@ 0xa3
 8006668:	480f      	ldr	r0, [pc, #60]	@ (80066a8 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 800666a:	f022 ffb1 	bl	80295d0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800666e:	4b0f      	ldr	r3, [pc, #60]	@ (80066ac <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 8006670:	4a0c      	ldr	r2, [pc, #48]	@ (80066a4 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006672:	21a4      	movs	r1, #164	@ 0xa4
 8006674:	480c      	ldr	r0, [pc, #48]	@ (80066a8 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006676:	f022 ffab 	bl	80295d0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800667a:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 800667c:	4a09      	ldr	r2, [pc, #36]	@ (80066a4 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 800667e:	21a5      	movs	r1, #165	@ 0xa5
 8006680:	4809      	ldr	r0, [pc, #36]	@ (80066a8 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006682:	f022 ffa5 	bl	80295d0 <__assert_func>
    model->bind(newPresenter);
 8006686:	462b      	mov	r3, r5
 8006688:	e7cf      	b.n	800662a <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
    if (*currentScreen)
 800668a:	6838      	ldr	r0, [r7, #0]
 800668c:	2800      	cmp	r0, #0
 800668e:	d19c      	bne.n	80065ca <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
 8006690:	e7a4      	b.n	80065dc <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
    if (*currentPresenter)
 8006692:	f8d8 0000 	ldr.w	r0, [r8]
 8006696:	2800      	cmp	r0, #0
 8006698:	d192      	bne.n	80065c0 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
 800669a:	e79f      	b.n	80065dc <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
 800669c:	0802d0a4 	.word	0x0802d0a4
 80066a0:	0802c718 	.word	0x0802c718
 80066a4:	0802ccb0 	.word	0x0802ccb0
 80066a8:	0802c874 	.word	0x0802c874
 80066ac:	0802c8cc 	.word	0x0802c8cc
 80066b0:	0802c970 	.word	0x0802c970

080066b4 <_ZN23FrontendApplicationBase37gotoChoix_testsScreenNoTransitionImplEv>:
{
 80066b4:	b500      	push	{lr}
 80066b6:	b083      	sub	sp, #12
    touchgfx::makeTransition<Choix_testsView, Choix_testsPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80066b8:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <_ZN23FrontendApplicationBase37gotoChoix_testsScreenNoTransitionImplEv+0x20>)
 80066c0:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 80066c4:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 80066c8:	4803      	ldr	r0, [pc, #12]	@ (80066d8 <_ZN23FrontendApplicationBase37gotoChoix_testsScreenNoTransitionImplEv+0x24>)
 80066ca:	f7ff ff43 	bl	8006554 <_ZN8touchgfx14makeTransitionI15Choix_testsView20Choix_testsPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80066ce:	b003      	add	sp, #12
 80066d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80066d4:	24062200 	.word	0x24062200
 80066d8:	240621fc 	.word	0x240621fc

080066dc <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80066dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e0:	4607      	mov	r7, r0
 80066e2:	4688      	mov	r8, r1
 80066e4:	4615      	mov	r5, r2
 80066e6:	4699      	mov	r9, r3
 80066e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80066ec:	6890      	ldr	r0, [r2, #8]
 80066ee:	6803      	ldr	r3, [r0, #0]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	4798      	blx	r3
 80066f4:	f5b0 7f2d 	cmp.w	r0, #692	@ 0x2b4
 80066f8:	d377      	bcc.n	80067ea <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80066fa:	6868      	ldr	r0, [r5, #4]
 80066fc:	6803      	ldr	r3, [r0, #0]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	4798      	blx	r3
 8006702:	280f      	cmp	r0, #15
 8006704:	d977      	bls.n	80067f6 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8006706:	68e8      	ldr	r0, [r5, #12]
 8006708:	6803      	ldr	r3, [r0, #0]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	4798      	blx	r3
 800670e:	280b      	cmp	r0, #11
 8006710:	d977      	bls.n	8006802 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 8006712:	f014 fc3f 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8006716:	3004      	adds	r0, #4
 8006718:	f014 fc7a 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800671c:	f8d9 0000 	ldr.w	r0, [r9]
 8006720:	b140      	cbz	r0, 8006734 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->tearDown();
 8006722:	6803      	ldr	r3, [r0, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	4798      	blx	r3
    if (*currentTrans)
 8006728:	f8d9 0000 	ldr.w	r0, [r9]
 800672c:	b110      	cbz	r0, 8006734 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 800672e:	6803      	ldr	r3, [r0, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4798      	blx	r3
    if (*currentScreen)
 8006734:	6838      	ldr	r0, [r7, #0]
 8006736:	2800      	cmp	r0, #0
 8006738:	d06f      	beq.n	800681a <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13e>
        (*currentScreen)->tearDownScreen();
 800673a:	6803      	ldr	r3, [r0, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	4798      	blx	r3
    if (*currentPresenter)
 8006740:	f8d8 0000 	ldr.w	r0, [r8]
 8006744:	2800      	cmp	r0, #0
 8006746:	d064      	beq.n	8006812 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x136>
        (*currentPresenter)->deactivate();
 8006748:	6803      	ldr	r3, [r0, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4798      	blx	r3
    if (*currentScreen)
 800674e:	6838      	ldr	r0, [r7, #0]
 8006750:	b110      	cbz	r0, 8006758 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->~Screen();
 8006752:	6803      	ldr	r3, [r0, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4798      	blx	r3
    if (*currentPresenter)
 8006758:	f8d8 0000 	ldr.w	r0, [r8]
 800675c:	b110      	cbz	r0, 8006764 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->~Presenter();
 800675e:	6803      	ldr	r3, [r0, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8006764:	68e8      	ldr	r0, [r5, #12]
 8006766:	6803      	ldr	r3, [r0, #0]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	2100      	movs	r1, #0
 800676c:	4798      	blx	r3
 800676e:	4604      	mov	r4, r0
 8006770:	f04f 0b00 	mov.w	fp, #0
 8006774:	f8c0 b004 	str.w	fp, [r0, #4]
 8006778:	f880 b008 	strb.w	fp, [r0, #8]
 800677c:	4b29      	ldr	r3, [pc, #164]	@ (8006824 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 800677e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006780:	68a8      	ldr	r0, [r5, #8]
 8006782:	6803      	ldr	r3, [r0, #0]
 8006784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006786:	4659      	mov	r1, fp
 8006788:	4798      	blx	r3
 800678a:	4606      	mov	r6, r0
 800678c:	f003 f95c 	bl	8009a48 <_ZN17Tests_moteursViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006790:	6868      	ldr	r0, [r5, #4]
 8006792:	6803      	ldr	r3, [r0, #0]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	4659      	mov	r1, fp
 8006798:	4798      	blx	r3
 800679a:	4605      	mov	r5, r0
 800679c:	4631      	mov	r1, r6
 800679e:	f003 f8dd 	bl	800995c <_ZN22Tests_moteursPresenterC1ER17Tests_moteursView>
    *currentTrans = newTransition;
 80067a2:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80067a6:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 80067aa:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80067ac:	2d00      	cmp	r5, #0
 80067ae:	d02e      	beq.n	800680e <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 80067b0:	1d2b      	adds	r3, r5, #4
 80067b2:	f8ca 3000 	str.w	r3, [sl]
 80067b6:	f8c5 a008 	str.w	sl, [r5, #8]
 80067ba:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	4630      	mov	r0, r6
 80067c2:	4798      	blx	r3
    newPresenter->activate();
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4628      	mov	r0, r5
 80067ca:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80067cc:	4621      	mov	r1, r4
 80067ce:	4630      	mov	r0, r6
 80067d0:	f016 fc98 	bl	801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	4620      	mov	r0, r4
 80067da:	4798      	blx	r3
    newTransition->invalidate();
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	4620      	mov	r0, r4
 80067e2:	4798      	blx	r3
}
 80067e4:	4628      	mov	r0, r5
 80067e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80067ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006828 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80067ec:	4a0f      	ldr	r2, [pc, #60]	@ (800682c <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80067ee:	21a3      	movs	r1, #163	@ 0xa3
 80067f0:	480f      	ldr	r0, [pc, #60]	@ (8006830 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80067f2:	f022 feed 	bl	80295d0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80067f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006834 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 80067f8:	4a0c      	ldr	r2, [pc, #48]	@ (800682c <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80067fa:	21a4      	movs	r1, #164	@ 0xa4
 80067fc:	480c      	ldr	r0, [pc, #48]	@ (8006830 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80067fe:	f022 fee7 	bl	80295d0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 8006804:	4a09      	ldr	r2, [pc, #36]	@ (800682c <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006806:	21a5      	movs	r1, #165	@ 0xa5
 8006808:	4809      	ldr	r0, [pc, #36]	@ (8006830 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 800680a:	f022 fee1 	bl	80295d0 <__assert_func>
    model->bind(newPresenter);
 800680e:	462b      	mov	r3, r5
 8006810:	e7cf      	b.n	80067b2 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
    if (*currentScreen)
 8006812:	6838      	ldr	r0, [r7, #0]
 8006814:	2800      	cmp	r0, #0
 8006816:	d19c      	bne.n	8006752 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
 8006818:	e7a4      	b.n	8006764 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
    if (*currentPresenter)
 800681a:	f8d8 0000 	ldr.w	r0, [r8]
 800681e:	2800      	cmp	r0, #0
 8006820:	d192      	bne.n	8006748 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
 8006822:	e79f      	b.n	8006764 <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
 8006824:	0802d0a4 	.word	0x0802d0a4
 8006828:	0802c718 	.word	0x0802c718
 800682c:	0802cd8c 	.word	0x0802cd8c
 8006830:	0802c874 	.word	0x0802c874
 8006834:	0802c8cc 	.word	0x0802c8cc
 8006838:	0802c970 	.word	0x0802c970

0800683c <_ZN23FrontendApplicationBase39gotoTests_moteursScreenNoTransitionImplEv>:
{
 800683c:	b500      	push	{lr}
 800683e:	b083      	sub	sp, #12
    touchgfx::makeTransition<Tests_moteursView, Tests_moteursPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8006840:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4b05      	ldr	r3, [pc, #20]	@ (800685c <_ZN23FrontendApplicationBase39gotoTests_moteursScreenNoTransitionImplEv+0x20>)
 8006848:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 800684c:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 8006850:	4803      	ldr	r0, [pc, #12]	@ (8006860 <_ZN23FrontendApplicationBase39gotoTests_moteursScreenNoTransitionImplEv+0x24>)
 8006852:	f7ff ff43 	bl	80066dc <_ZN8touchgfx14makeTransitionI17Tests_moteursView22Tests_moteursPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8006856:	b003      	add	sp, #12
 8006858:	f85d fb04 	ldr.w	pc, [sp], #4
 800685c:	24062200 	.word	0x24062200
 8006860:	240621fc 	.word	0x240621fc

08006864 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8006864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	4607      	mov	r7, r0
 800686a:	4688      	mov	r8, r1
 800686c:	4615      	mov	r5, r2
 800686e:	4699      	mov	r9, r3
 8006870:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006874:	6890      	ldr	r0, [r2, #8]
 8006876:	6803      	ldr	r3, [r0, #0]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	4798      	blx	r3
 800687c:	4b4b      	ldr	r3, [pc, #300]	@ (80069ac <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 800687e:	4298      	cmp	r0, r3
 8006880:	d977      	bls.n	8006972 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8006882:	6868      	ldr	r0, [r5, #4]
 8006884:	6803      	ldr	r3, [r0, #0]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	4798      	blx	r3
 800688a:	280f      	cmp	r0, #15
 800688c:	d977      	bls.n	800697e <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800688e:	68e8      	ldr	r0, [r5, #12]
 8006890:	6803      	ldr	r3, [r0, #0]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	4798      	blx	r3
 8006896:	280b      	cmp	r0, #11
 8006898:	d977      	bls.n	800698a <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 800689a:	f014 fb7b 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 800689e:	3004      	adds	r0, #4
 80068a0:	f014 fbb6 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80068a4:	f8d9 0000 	ldr.w	r0, [r9]
 80068a8:	b140      	cbz	r0, 80068bc <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->tearDown();
 80068aa:	6803      	ldr	r3, [r0, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	4798      	blx	r3
    if (*currentTrans)
 80068b0:	f8d9 0000 	ldr.w	r0, [r9]
 80068b4:	b110      	cbz	r0, 80068bc <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4798      	blx	r3
    if (*currentScreen)
 80068bc:	6838      	ldr	r0, [r7, #0]
 80068be:	2800      	cmp	r0, #0
 80068c0:	d06f      	beq.n	80069a2 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13e>
        (*currentScreen)->tearDownScreen();
 80068c2:	6803      	ldr	r3, [r0, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	4798      	blx	r3
    if (*currentPresenter)
 80068c8:	f8d8 0000 	ldr.w	r0, [r8]
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d064      	beq.n	800699a <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x136>
        (*currentPresenter)->deactivate();
 80068d0:	6803      	ldr	r3, [r0, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4798      	blx	r3
    if (*currentScreen)
 80068d6:	6838      	ldr	r0, [r7, #0]
 80068d8:	b110      	cbz	r0, 80068e0 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->~Screen();
 80068da:	6803      	ldr	r3, [r0, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4798      	blx	r3
    if (*currentPresenter)
 80068e0:	f8d8 0000 	ldr.w	r0, [r8]
 80068e4:	b110      	cbz	r0, 80068ec <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->~Presenter();
 80068e6:	6803      	ldr	r3, [r0, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80068ec:	68e8      	ldr	r0, [r5, #12]
 80068ee:	6803      	ldr	r3, [r0, #0]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	2100      	movs	r1, #0
 80068f4:	4798      	blx	r3
 80068f6:	4604      	mov	r4, r0
 80068f8:	f04f 0b00 	mov.w	fp, #0
 80068fc:	f8c0 b004 	str.w	fp, [r0, #4]
 8006900:	f880 b008 	strb.w	fp, [r0, #8]
 8006904:	4b2a      	ldr	r3, [pc, #168]	@ (80069b0 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8006906:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006908:	68a8      	ldr	r0, [r5, #8]
 800690a:	6803      	ldr	r3, [r0, #0]
 800690c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690e:	4659      	mov	r1, fp
 8006910:	4798      	blx	r3
 8006912:	4606      	mov	r6, r0
 8006914:	f002 fed0 	bl	80096b8 <_ZN18Test_lidar_basViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006918:	6868      	ldr	r0, [r5, #4]
 800691a:	6803      	ldr	r3, [r0, #0]
 800691c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691e:	4659      	mov	r1, fp
 8006920:	4798      	blx	r3
 8006922:	4605      	mov	r5, r0
 8006924:	4631      	mov	r1, r6
 8006926:	f002 fe61 	bl	80095ec <_ZN23Test_lidar_basPresenterC1ER18Test_lidar_basView>
    *currentTrans = newTransition;
 800692a:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800692e:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8006932:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8006934:	2d00      	cmp	r5, #0
 8006936:	d02e      	beq.n	8006996 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8006938:	1d2b      	adds	r3, r5, #4
 800693a:	f8ca 3000 	str.w	r3, [sl]
 800693e:	f8c5 a008 	str.w	sl, [r5, #8]
 8006942:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8006944:	6833      	ldr	r3, [r6, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4630      	mov	r0, r6
 800694a:	4798      	blx	r3
    newPresenter->activate();
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4628      	mov	r0, r5
 8006952:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006954:	4621      	mov	r1, r4
 8006956:	4630      	mov	r0, r6
 8006958:	f016 fbd4 	bl	801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	4620      	mov	r0, r4
 8006962:	4798      	blx	r3
    newTransition->invalidate();
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	4620      	mov	r0, r4
 800696a:	4798      	blx	r3
}
 800696c:	4628      	mov	r0, r5
 800696e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006972:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006974:	4a10      	ldr	r2, [pc, #64]	@ (80069b8 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006976:	21a3      	movs	r1, #163	@ 0xa3
 8006978:	4810      	ldr	r0, [pc, #64]	@ (80069bc <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 800697a:	f022 fe29 	bl	80295d0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800697e:	4b10      	ldr	r3, [pc, #64]	@ (80069c0 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 8006980:	4a0d      	ldr	r2, [pc, #52]	@ (80069b8 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006982:	21a4      	movs	r1, #164	@ 0xa4
 8006984:	480d      	ldr	r0, [pc, #52]	@ (80069bc <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 8006986:	f022 fe23 	bl	80295d0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800698a:	4b0e      	ldr	r3, [pc, #56]	@ (80069c4 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800698c:	4a0a      	ldr	r2, [pc, #40]	@ (80069b8 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 800698e:	21a5      	movs	r1, #165	@ 0xa5
 8006990:	480a      	ldr	r0, [pc, #40]	@ (80069bc <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 8006992:	f022 fe1d 	bl	80295d0 <__assert_func>
    model->bind(newPresenter);
 8006996:	462b      	mov	r3, r5
 8006998:	e7cf      	b.n	800693a <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
    if (*currentScreen)
 800699a:	6838      	ldr	r0, [r7, #0]
 800699c:	2800      	cmp	r0, #0
 800699e:	d19c      	bne.n	80068da <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
 80069a0:	e7a4      	b.n	80068ec <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
    if (*currentPresenter)
 80069a2:	f8d8 0000 	ldr.w	r0, [r8]
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d192      	bne.n	80068d0 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
 80069aa:	e79f      	b.n	80068ec <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
 80069ac:	00024c5b 	.word	0x00024c5b
 80069b0:	0802d0a4 	.word	0x0802d0a4
 80069b4:	0802c718 	.word	0x0802c718
 80069b8:	0802ce6c 	.word	0x0802ce6c
 80069bc:	0802c874 	.word	0x0802c874
 80069c0:	0802c8cc 	.word	0x0802c8cc
 80069c4:	0802c970 	.word	0x0802c970

080069c8 <_ZN23FrontendApplicationBase40gotoTest_lidar_basScreenNoTransitionImplEv>:
{
 80069c8:	b500      	push	{lr}
 80069ca:	b083      	sub	sp, #12
    touchgfx::makeTransition<Test_lidar_basView, Test_lidar_basPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80069cc:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4b05      	ldr	r3, [pc, #20]	@ (80069e8 <_ZN23FrontendApplicationBase40gotoTest_lidar_basScreenNoTransitionImplEv+0x20>)
 80069d4:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 80069d8:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 80069dc:	4803      	ldr	r0, [pc, #12]	@ (80069ec <_ZN23FrontendApplicationBase40gotoTest_lidar_basScreenNoTransitionImplEv+0x24>)
 80069de:	f7ff ff41 	bl	8006864 <_ZN8touchgfx14makeTransitionI18Test_lidar_basView23Test_lidar_basPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80069e2:	b003      	add	sp, #12
 80069e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80069e8:	24062200 	.word	0x24062200
 80069ec:	240621fc 	.word	0x240621fc

080069f0 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80069f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	4607      	mov	r7, r0
 80069f6:	4688      	mov	r8, r1
 80069f8:	4615      	mov	r5, r2
 80069fa:	4699      	mov	r9, r3
 80069fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006a00:	6890      	ldr	r0, [r2, #8]
 8006a02:	6803      	ldr	r3, [r0, #0]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	4798      	blx	r3
 8006a08:	f5b0 7fe0 	cmp.w	r0, #448	@ 0x1c0
 8006a0c:	d377      	bcc.n	8006afe <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8006a0e:	6868      	ldr	r0, [r5, #4]
 8006a10:	6803      	ldr	r3, [r0, #0]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	4798      	blx	r3
 8006a16:	280f      	cmp	r0, #15
 8006a18:	d977      	bls.n	8006b0a <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8006a1a:	68e8      	ldr	r0, [r5, #12]
 8006a1c:	6803      	ldr	r3, [r0, #0]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	4798      	blx	r3
 8006a22:	280b      	cmp	r0, #11
 8006a24:	d977      	bls.n	8006b16 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 8006a26:	f014 fab5 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8006a2a:	3004      	adds	r0, #4
 8006a2c:	f014 faf0 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8006a30:	f8d9 0000 	ldr.w	r0, [r9]
 8006a34:	b140      	cbz	r0, 8006a48 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->tearDown();
 8006a36:	6803      	ldr	r3, [r0, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	4798      	blx	r3
    if (*currentTrans)
 8006a3c:	f8d9 0000 	ldr.w	r0, [r9]
 8006a40:	b110      	cbz	r0, 8006a48 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 8006a42:	6803      	ldr	r3, [r0, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4798      	blx	r3
    if (*currentScreen)
 8006a48:	6838      	ldr	r0, [r7, #0]
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d06f      	beq.n	8006b2e <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13e>
        (*currentScreen)->tearDownScreen();
 8006a4e:	6803      	ldr	r3, [r0, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	4798      	blx	r3
    if (*currentPresenter)
 8006a54:	f8d8 0000 	ldr.w	r0, [r8]
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d064      	beq.n	8006b26 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x136>
        (*currentPresenter)->deactivate();
 8006a5c:	6803      	ldr	r3, [r0, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	4798      	blx	r3
    if (*currentScreen)
 8006a62:	6838      	ldr	r0, [r7, #0]
 8006a64:	b110      	cbz	r0, 8006a6c <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->~Screen();
 8006a66:	6803      	ldr	r3, [r0, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4798      	blx	r3
    if (*currentPresenter)
 8006a6c:	f8d8 0000 	ldr.w	r0, [r8]
 8006a70:	b110      	cbz	r0, 8006a78 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->~Presenter();
 8006a72:	6803      	ldr	r3, [r0, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8006a78:	68e8      	ldr	r0, [r5, #12]
 8006a7a:	6803      	ldr	r3, [r0, #0]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4798      	blx	r3
 8006a82:	4604      	mov	r4, r0
 8006a84:	f04f 0b00 	mov.w	fp, #0
 8006a88:	f8c0 b004 	str.w	fp, [r0, #4]
 8006a8c:	f880 b008 	strb.w	fp, [r0, #8]
 8006a90:	4b29      	ldr	r3, [pc, #164]	@ (8006b38 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8006a92:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006a94:	68a8      	ldr	r0, [r5, #8]
 8006a96:	6803      	ldr	r3, [r0, #0]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	4798      	blx	r3
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	f002 ff3a 	bl	8009918 <_ZN19Test_lidar_hautViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8006aa4:	6868      	ldr	r0, [r5, #4]
 8006aa6:	6803      	ldr	r3, [r0, #0]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	4659      	mov	r1, fp
 8006aac:	4798      	blx	r3
 8006aae:	4605      	mov	r5, r0
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	f002 ff0b 	bl	80098cc <_ZN24Test_lidar_hautPresenterC1ER19Test_lidar_hautView>
    *currentTrans = newTransition;
 8006ab6:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8006aba:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8006abe:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	d02e      	beq.n	8006b22 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8006ac4:	1d2b      	adds	r3, r5, #4
 8006ac6:	f8ca 3000 	str.w	r3, [sl]
 8006aca:	f8c5 a008 	str.w	sl, [r5, #8]
 8006ace:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8006ad0:	6833      	ldr	r3, [r6, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	4798      	blx	r3
    newPresenter->activate();
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4628      	mov	r0, r5
 8006ade:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f016 fb0e 	bl	801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	4620      	mov	r0, r4
 8006aee:	4798      	blx	r3
    newTransition->invalidate();
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	4620      	mov	r0, r4
 8006af6:	4798      	blx	r3
}
 8006af8:	4628      	mov	r0, r5
 8006afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8006afe:	4b0f      	ldr	r3, [pc, #60]	@ (8006b3c <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8006b00:	4a0f      	ldr	r2, [pc, #60]	@ (8006b40 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006b02:	21a3      	movs	r1, #163	@ 0xa3
 8006b04:	480f      	ldr	r0, [pc, #60]	@ (8006b44 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006b06:	f022 fd63 	bl	80295d0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 8006b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8006b40 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006b0e:	21a4      	movs	r1, #164	@ 0xa4
 8006b10:	480c      	ldr	r0, [pc, #48]	@ (8006b44 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006b12:	f022 fd5d 	bl	80295d0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 8006b18:	4a09      	ldr	r2, [pc, #36]	@ (8006b40 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8006b1a:	21a5      	movs	r1, #165	@ 0xa5
 8006b1c:	4809      	ldr	r0, [pc, #36]	@ (8006b44 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 8006b1e:	f022 fd57 	bl	80295d0 <__assert_func>
    model->bind(newPresenter);
 8006b22:	462b      	mov	r3, r5
 8006b24:	e7cf      	b.n	8006ac6 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
    if (*currentScreen)
 8006b26:	6838      	ldr	r0, [r7, #0]
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d19c      	bne.n	8006a66 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x76>
 8006b2c:	e7a4      	b.n	8006a78 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
    if (*currentPresenter)
 8006b2e:	f8d8 0000 	ldr.w	r0, [r8]
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d192      	bne.n	8006a5c <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6c>
 8006b36:	e79f      	b.n	8006a78 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
 8006b38:	0802d0a4 	.word	0x0802d0a4
 8006b3c:	0802c718 	.word	0x0802c718
 8006b40:	0802cf4c 	.word	0x0802cf4c
 8006b44:	0802c874 	.word	0x0802c874
 8006b48:	0802c8cc 	.word	0x0802c8cc
 8006b4c:	0802c970 	.word	0x0802c970

08006b50 <_ZN23FrontendApplicationBase41gotoTest_lidar_hautScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoTest_lidar_hautScreenNoTransitionImpl()
{
 8006b50:	b500      	push	{lr}
 8006b52:	b083      	sub	sp, #12
    touchgfx::makeTransition<Test_lidar_hautView, Test_lidar_hautPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8006b54:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <_ZN23FrontendApplicationBase41gotoTest_lidar_hautScreenNoTransitionImplEv+0x20>)
 8006b5c:	f8d0 2154 	ldr.w	r2, [r0, #340]	@ 0x154
 8006b60:	f500 719e 	add.w	r1, r0, #316	@ 0x13c
 8006b64:	4803      	ldr	r0, [pc, #12]	@ (8006b74 <_ZN23FrontendApplicationBase41gotoTest_lidar_hautScreenNoTransitionImplEv+0x24>)
 8006b66:	f7ff ff43 	bl	80069f0 <_ZN8touchgfx14makeTransitionI19Test_lidar_hautView24Test_lidar_hautPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8006b6a:	b003      	add	sp, #12
 8006b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b70:	24062200 	.word	0x24062200
 8006b74:	240621fc 	.word	0x240621fc

08006b78 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8006b78:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006b7a:	4770      	bx	lr

08006b7c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8006b7c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006b7e:	4770      	bx	lr

08006b80 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8006b80:	4770      	bx	lr

08006b82 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8006b82:	888b      	ldrh	r3, [r1, #4]
 8006b84:	0adb      	lsrs	r3, r3, #11
 8006b86:	69c0      	ldr	r0, [r0, #28]
 8006b88:	680a      	ldr	r2, [r1, #0]
 8006b8a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8006b8e:	4410      	add	r0, r2
 8006b90:	4770      	bx	lr

08006b92 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8006b92:	4694      	mov	ip, r2
 8006b94:	b1e2      	cbz	r2, 8006bd0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
 8006b96:	7b12      	ldrb	r2, [r2, #12]
 8006b98:	b1e2      	cbz	r2, 8006bd4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8006b9a:	f89c 300d 	ldrb.w	r3, [ip, #13]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ba4:	f89c c00b 	ldrb.w	ip, [ip, #11]
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8006ba8:	ea4c 0c03 	orr.w	ip, ip, r3
 8006bac:	6a03      	ldr	r3, [r0, #32]
 8006bae:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006bb2:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8006bb6:	881a      	ldrh	r2, [r3, #0]
 8006bb8:	428a      	cmp	r2, r1
 8006bba:	d006      	beq.n	8006bca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x38>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 8006bbc:	428a      	cmp	r2, r1
 8006bbe:	d80b      	bhi.n	8006bd8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x46>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4283      	cmp	r3, r0
 8006bc4:	d1f7      	bne.n	8006bb6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x24>
        {
            break;
        }
    }
    return 0;
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	4770      	bx	lr
            return kerndata->distance;
 8006bca:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8006bce:	4770      	bx	lr
        return 0;
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	4770      	bx	lr
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	4770      	bx	lr
    return 0;
 8006bd8:	2000      	movs	r0, #0
}
 8006bda:	4770      	bx	lr

08006bdc <_ZN8touchgfx13GeneratedFontD0Ev>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4604      	mov	r4, r0
 8006be0:	212c      	movs	r1, #44	@ 0x2c
 8006be2:	f022 f97d 	bl	8028ee0 <_ZdlPvj>
 8006be6:	4620      	mov	r0, r4
 8006be8:	bd10      	pop	{r4, pc}
	...

08006bec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8006bec:	b530      	push	{r4, r5, lr}
 8006bee:	b08b      	sub	sp, #44	@ 0x2c
 8006bf0:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8006bf2:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8006bf6:	9508      	str	r5, [sp, #32]
 8006bf8:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8006bfc:	9507      	str	r5, [sp, #28]
 8006bfe:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8006c02:	9506      	str	r5, [sp, #24]
 8006c04:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8006c08:	9505      	str	r5, [sp, #20]
 8006c0a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8006c0e:	9504      	str	r5, [sp, #16]
 8006c10:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8006c14:	9503      	str	r5, [sp, #12]
 8006c16:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8006c1a:	9502      	str	r5, [sp, #8]
 8006c1c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8006c20:	9501      	str	r5, [sp, #4]
 8006c22:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8006c26:	9500      	str	r5, [sp, #0]
 8006c28:	f015 fe18 	bl	801c85c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8006c2e:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8006c30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c32:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8006c34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c36:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8006c38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c3a:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8006c3c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006c3e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8006c40:	4620      	mov	r0, r4
 8006c42:	b00b      	add	sp, #44	@ 0x2c
 8006c44:	bd30      	pop	{r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	0802d0c8 	.word	0x0802d0c8

08006c4c <_ZN12HomeViewBase10pos_departEv>:
     * Virtual Action Handlers
     */
    virtual void pos_depart()
    {
        // Override and implement this function in Home
    }
 8006c4c:	4770      	bx	lr

08006c4e <_ZN12HomeViewBaseD1Ev>:
}

HomeViewBase::~HomeViewBase()
{

}
 8006c4e:	4770      	bx	lr

08006c50 <_ZN12HomeViewBase11setupScreenEv>:

void HomeViewBase::setupScreen()
{

}
 8006c50:	4770      	bx	lr

08006c52 <_ZN8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006c52:	4770      	bx	lr

08006c54 <_ZN8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006c58:	68c2      	ldr	r2, [r0, #12]
 8006c5a:	6844      	ldr	r4, [r0, #4]
 8006c5c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006c60:	f012 0f01 	tst.w	r2, #1
 8006c64:	d102      	bne.n	8006c6c <_ZN8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4798      	blx	r3
    }
 8006c6a:	bd10      	pop	{r4, pc}
 8006c6c:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8006c70:	f854 200c 	ldr.w	r2, [r4, ip]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	58d3      	ldr	r3, [r2, r3]
 8006c78:	e7f6      	b.n	8006c68 <_ZN8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x14>

08006c7a <_ZNK8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006c7a:	6843      	ldr	r3, [r0, #4]
 8006c7c:	b13b      	cbz	r3, 8006c8e <_ZNK8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006c7e:	6883      	ldr	r3, [r0, #8]
 8006c80:	b10b      	cbz	r3, 8006c86 <_ZNK8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 8006c82:	2001      	movs	r0, #1
    }
 8006c84:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 8006c86:	68c0      	ldr	r0, [r0, #12]
 8006c88:	f000 0001 	and.w	r0, r0, #1
 8006c8c:	4770      	bx	lr
 8006c8e:	2000      	movs	r0, #0
 8006c90:	4770      	bx	lr

08006c92 <_ZN8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006c92:	b510      	push	{r4, lr}
 8006c94:	4604      	mov	r4, r0
 8006c96:	2110      	movs	r1, #16
 8006c98:	f022 f922 	bl	8028ee0 <_ZdlPvj>
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	bd10      	pop	{r4, pc}

08006ca0 <_ZN12HomeViewBaseD0Ev>:
HomeViewBase::~HomeViewBase()
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	4604      	mov	r4, r0
}
 8006ca4:	f44f 710f 	mov.w	r1, #572	@ 0x23c
 8006ca8:	f022 f91a 	bl	8028ee0 <_ZdlPvj>
 8006cac:	4620      	mov	r0, r4
 8006cae:	bd10      	pop	{r4, pc}

08006cb0 <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void HomeViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	460d      	mov	r5, r1
    if (&src == &bouton_strategies)
 8006cb6:	f100 0398 	add.w	r3, r0, #152	@ 0x98
 8006cba:	4299      	cmp	r1, r3
 8006cbc:	d00c      	beq.n	8006cd8 <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
        //vers_choix_strat
        //When bouton_strategies clicked change screen to Choix_strategie
        //Go to Choix_strategie with no screen transition
        application().gotoChoix_strategieScreenNoTransition();
    }
    if (&src == &bouton_tests)
 8006cbe:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 8006cc2:	429d      	cmp	r5, r3
 8006cc4:	d00d      	beq.n	8006ce2 <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
        //vers_choix_tests
        //When bouton_tests clicked change screen to Choix_tests
        //Go to Choix_tests with no screen transition
        application().gotoChoix_testsScreenNoTransition();
    }
    if (&src == &bouton_position_depart)
 8006cc6:	f504 7394 	add.w	r3, r4, #296	@ 0x128
 8006cca:	429d      	cmp	r5, r3
 8006ccc:	d00e      	beq.n	8006cec <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        //fonction_position_depart
        //When bouton_position_depart clicked call virtual function
        //Call pos_depart
        pos_depart();
    }
    if (&src == &buttonWithLabel1)
 8006cce:	f504 74f2 	add.w	r4, r4, #484	@ 0x1e4
 8006cd2:	42a5      	cmp	r5, r4
 8006cd4:	d00f      	beq.n	8006cf6 <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Robot_en_match
        //Go to Robot_en_match with no screen transition
        application().gotoRobot_en_matchScreenNoTransition();
    }
}
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006cd8:	f014 f95c 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoChoix_strategieScreenNoTransition();
 8006cdc:	f7ff f8ba 	bl	8005e54 <_ZN23FrontendApplicationBase37gotoChoix_strategieScreenNoTransitionEv>
 8006ce0:	e7ed      	b.n	8006cbe <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
 8006ce2:	f014 f957 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoChoix_testsScreenNoTransition();
 8006ce6:	f7ff f8e5 	bl	8005eb4 <_ZN23FrontendApplicationBase33gotoChoix_testsScreenNoTransitionEv>
 8006cea:	e7ec      	b.n	8006cc6 <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
        pos_depart();
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4798      	blx	r3
 8006cf4:	e7eb      	b.n	8006cce <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1e>
 8006cf6:	f014 f94d 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoRobot_en_matchScreenNoTransition();
 8006cfa:	f7ff f8cb 	bl	8005e94 <_ZN23FrontendApplicationBase36gotoRobot_en_matchScreenNoTransitionEv>
}
 8006cfe:	e7ea      	b.n	8006cd6 <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>

08006d00 <_ZN12HomeViewBaseC1Ev>:
HomeViewBase::HomeViewBase() :
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	b095      	sub	sp, #84	@ 0x54
 8006d06:	4604      	mov	r4, r0
        : presenter(0)
 8006d08:	f016 f850 	bl	801cdac <_ZN8touchgfx6ScreenC1Ev>
 8006d0c:	2500      	movs	r5, #0
 8006d0e:	63e5      	str	r5, [r4, #60]	@ 0x3c
    buttonCallback(this, &HomeViewBase::buttonCallbackHandler)
 8006d10:	46a0      	mov	r8, r4
 8006d12:	4bc8      	ldr	r3, [pc, #800]	@ (8007034 <_ZN12HomeViewBaseC1Ev+0x334>)
 8006d14:	f848 3b40 	str.w	r3, [r8], #64
 8006d18:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 8006d1c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8006d20:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8006d24:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8006d28:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 8006d2c:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 8006d30:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 8006d34:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          parent(0),
 8006d38:	6565      	str	r5, [r4, #84]	@ 0x54
          nextSibling(0),
 8006d3a:	65a5      	str	r5, [r4, #88]	@ 0x58
          nextDrawChainElement(0),
 8006d3c:	65e5      	str	r5, [r4, #92]	@ 0x5c
          cachedAbsX(0),
 8006d3e:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
          cachedAbsY(0),
 8006d42:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
          touchable(false),
 8006d46:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
          visible(true)
 8006d4a:	2701      	movs	r7, #1
 8006d4c:	f884 7065 	strb.w	r7, [r4, #101]	@ 0x65
        : Widget(), alpha(255), color(0)
 8006d50:	4bb9      	ldr	r3, [pc, #740]	@ (8007038 <_ZN12HomeViewBaseC1Ev+0x338>)
 8006d52:	6423      	str	r3, [r4, #64]	@ 0x40
 8006d54:	26ff      	movs	r6, #255	@ 0xff
 8006d56:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
        : color(col)
 8006d5a:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006d5c:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
        : x(0), y(0), width(0), height(0)
 8006d60:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 8006d64:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 8006d68:	f8a4 5074 	strh.w	r5, [r4, #116]	@ 0x74
 8006d6c:	f8a4 5076 	strh.w	r5, [r4, #118]	@ 0x76
 8006d70:	f8a4 5078 	strh.w	r5, [r4, #120]	@ 0x78
 8006d74:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 8006d78:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
 8006d7c:	f8a4 507e 	strh.w	r5, [r4, #126]	@ 0x7e
          parent(0),
 8006d80:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
          nextSibling(0),
 8006d84:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          nextDrawChainElement(0),
 8006d88:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
          cachedAbsX(0),
 8006d8c:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
          cachedAbsY(0),
 8006d90:	f8a4 508e 	strh.w	r5, [r4, #142]	@ 0x8e
          touchable(false),
 8006d94:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
          visible(true)
 8006d98:	f884 7091 	strb.w	r7, [r4, #145]	@ 0x91
 8006d9c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8006d9e:	f884 6092 	strb.w	r6, [r4, #146]	@ 0x92
        : color(col)
 8006da2:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8006da6:	f104 0b98 	add.w	fp, r4, #152	@ 0x98
 8006daa:	4658      	mov	r0, fp
 8006dac:	f011 fd26 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8006db0:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f011 fd20 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8006dbc:	f504 7394 	add.w	r3, r4, #296	@ 0x128
 8006dc0:	9302      	str	r3, [sp, #8]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f011 fd1a 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8006dc8:	f504 79b8 	add.w	r9, r4, #368	@ 0x170
        : x(0), y(0), width(0), height(0)
 8006dcc:	f8a4 5174 	strh.w	r5, [r4, #372]	@ 0x174
 8006dd0:	f8a4 5176 	strh.w	r5, [r4, #374]	@ 0x176
 8006dd4:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
 8006dd8:	f8a4 517a 	strh.w	r5, [r4, #378]	@ 0x17a
 8006ddc:	f8a4 517c 	strh.w	r5, [r4, #380]	@ 0x17c
 8006de0:	f8a4 517e 	strh.w	r5, [r4, #382]	@ 0x17e
 8006de4:	f8a4 5180 	strh.w	r5, [r4, #384]	@ 0x180
 8006de8:	f8a4 5182 	strh.w	r5, [r4, #386]	@ 0x182
          parent(0),
 8006dec:	f8c4 5184 	str.w	r5, [r4, #388]	@ 0x184
          nextSibling(0),
 8006df0:	f8c4 5188 	str.w	r5, [r4, #392]	@ 0x188
          nextDrawChainElement(0),
 8006df4:	f8c4 518c 	str.w	r5, [r4, #396]	@ 0x18c
          cachedAbsX(0),
 8006df8:	f8a4 5190 	strh.w	r5, [r4, #400]	@ 0x190
          cachedAbsY(0),
 8006dfc:	f8a4 5192 	strh.w	r5, [r4, #402]	@ 0x192
          touchable(false),
 8006e00:	f884 5194 	strb.w	r5, [r4, #404]	@ 0x194
          visible(true)
 8006e04:	f884 7195 	strb.w	r7, [r4, #405]	@ 0x195
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006e08:	4b8c      	ldr	r3, [pc, #560]	@ (800703c <_ZN12HomeViewBaseC1Ev+0x33c>)
 8006e0a:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
        : typedTextId(id)
 8006e0e:	4b8c      	ldr	r3, [pc, #560]	@ (8007040 <_ZN12HomeViewBaseC1Ev+0x340>)
 8006e10:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
 8006e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e18:	f8a4 319c 	strh.w	r3, [r4, #412]	@ 0x19c
        : color(col)
 8006e1c:	f8c4 51a0 	str.w	r5, [r4, #416]	@ 0x1a0
 8006e20:	f8a4 51a4 	strh.w	r5, [r4, #420]	@ 0x1a4
 8006e24:	f884 61a6 	strb.w	r6, [r4, #422]	@ 0x1a6
 8006e28:	f884 51a7 	strb.w	r5, [r4, #423]	@ 0x1a7
 8006e2c:	f884 51a8 	strb.w	r5, [r4, #424]	@ 0x1a8
 8006e30:	f884 51a9 	strb.w	r5, [r4, #425]	@ 0x1a9
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006e34:	f8a4 51ac 	strh.w	r5, [r4, #428]	@ 0x1ac
 8006e38:	f8a4 51ae 	strh.w	r5, [r4, #430]	@ 0x1ae
 8006e3c:	f8a4 31b0 	strh.w	r3, [r4, #432]	@ 0x1b0
 8006e40:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
              text(0)
 8006e44:	f8c4 51b4 	str.w	r5, [r4, #436]	@ 0x1b4
 8006e48:	f504 77dc 	add.w	r7, r4, #440	@ 0x1b8
 8006e4c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006e50:	a908      	add	r1, sp, #32
 8006e52:	4638      	mov	r0, r7
 8006e54:	f010 fc00 	bl	8017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8006e58:	f504 73f2 	add.w	r3, r4, #484	@ 0x1e4
 8006e5c:	9303      	str	r3, [sp, #12]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f011 fccc 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8006e64:	4b77      	ldr	r3, [pc, #476]	@ (8007044 <_ZN12HomeViewBaseC1Ev+0x344>)
 8006e66:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8006e6a:	f8c4 4230 	str.w	r4, [r4, #560]	@ 0x230
 8006e6e:	4b76      	ldr	r3, [pc, #472]	@ (8007048 <_ZN12HomeViewBaseC1Ev+0x348>)
 8006e70:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
 8006e74:	f8c4 5238 	str.w	r5, [r4, #568]	@ 0x238
        setX(x);
 8006e78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4640      	mov	r0, r8
 8006e80:	4798      	blx	r3
        setY(y);
 8006e82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e86:	4629      	mov	r1, r5
 8006e88:	4640      	mov	r0, r8
 8006e8a:	4798      	blx	r3
        setWidth(width);
 8006e8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8006e94:	4640      	mov	r0, r8
 8006e96:	4798      	blx	r3
        setHeight(height);
 8006e98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	4798      	blx	r3
        color = newColor;
 8006ea4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8006ea8:	66a3      	str	r3, [r4, #104]	@ 0x68
 8006eaa:	1d26      	adds	r6, r4, #4
 8006eac:	4641      	mov	r1, r8
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f00d f980 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8006eb4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4650      	mov	r0, sl
 8006ebc:	4798      	blx	r3
        setY(y);
 8006ebe:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	4798      	blx	r3
        setWidth(width);
 8006ec8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ecc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8006ed0:	4650      	mov	r0, sl
 8006ed2:	4798      	blx	r3
        setHeight(height);
 8006ed4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006edc:	4650      	mov	r0, sl
 8006ede:	4798      	blx	r3
 8006ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800704c <_ZN12HomeViewBaseC1Ev+0x34c>)
 8006ee2:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8006ee6:	4651      	mov	r1, sl
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f00d f963 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8006eee:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef4:	21f4      	movs	r1, #244	@ 0xf4
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	4798      	blx	r3
        setY(y);
 8006efa:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8006efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f00:	21f0      	movs	r1, #240	@ 0xf0
 8006f02:	4658      	mov	r0, fp
 8006f04:	4798      	blx	r3
 8006f06:	2307      	movs	r3, #7
 8006f08:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8006f0c:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
    bouton_strategies.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 8006f10:	aa0a      	add	r2, sp, #40	@ 0x28
 8006f12:	a909      	add	r1, sp, #36	@ 0x24
 8006f14:	4658      	mov	r0, fp
 8006f16:	f011 f9a9 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8006f1a:	231c      	movs	r3, #28
 8006f1c:	f8a4 30d0 	strh.w	r3, [r4, #208]	@ 0xd0
        return typedTextId < numberOfTypedTexts;
 8006f20:	4b4b      	ldr	r3, [pc, #300]	@ (8007050 <_ZN12HomeViewBaseC1Ev+0x350>)
        if (typedText.hasValidId())
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	2b1c      	cmp	r3, #28
 8006f26:	d92c      	bls.n	8006f82 <_ZN12HomeViewBaseC1Ev+0x282>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006f28:	4b4a      	ldr	r3, [pc, #296]	@ (8007054 <_ZN12HomeViewBaseC1Ev+0x354>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	b31b      	cbz	r3, 8006f76 <_ZN12HomeViewBaseC1Ev+0x276>
        return fonts[typedTexts[typedTextId].fontIdx];
 8006f2e:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8006f32:	4b49      	ldr	r3, [pc, #292]	@ (8007058 <_ZN12HomeViewBaseC1Ev+0x358>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8006f3a:	211c      	movs	r1, #28
 8006f3c:	4b47      	ldr	r3, [pc, #284]	@ (800705c <_ZN12HomeViewBaseC1Ev+0x35c>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	f002 f8f6 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8006f44:	4682      	mov	sl, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8006f46:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4798      	blx	r3
 8006f50:	4605      	mov	r5, r0
 8006f52:	f8d8 3000 	ldr.w	r3, [r8]
 8006f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f58:	4651      	mov	r1, sl
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4798      	blx	r3
 8006f5e:	fb15 f500 	smulbb	r5, r5, r0
 8006f62:	b2ad      	uxth	r5, r5
 8006f64:	f8d8 3000 	ldr.w	r3, [r8]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	4798      	blx	r3
 8006f70:	4405      	add	r5, r0
 8006f72:	b22d      	sxth	r5, r5
 8006f74:	e006      	b.n	8006f84 <_ZN12HomeViewBaseC1Ev+0x284>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006f76:	4b3a      	ldr	r3, [pc, #232]	@ (8007060 <_ZN12HomeViewBaseC1Ev+0x360>)
 8006f78:	4a3a      	ldr	r2, [pc, #232]	@ (8007064 <_ZN12HomeViewBaseC1Ev+0x364>)
 8006f7a:	216c      	movs	r1, #108	@ 0x6c
 8006f7c:	483a      	ldr	r0, [pc, #232]	@ (8007068 <_ZN12HomeViewBaseC1Ev+0x368>)
 8006f7e:	f022 fb27 	bl	80295d0 <__assert_func>
 8006f82:	2500      	movs	r5, #0
 8006f84:	f8a4 50de 	strh.w	r5, [r4, #222]	@ 0xde
        color = col;
 8006f88:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8c:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
        colorPressed = col;
 8006f90:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
    bouton_strategies.setAction(buttonCallback);
 8006f94:	f504 780b 	add.w	r8, r4, #556	@ 0x22c
 8006f98:	f8c4 80c0 	str.w	r8, [r4, #192]	@ 0xc0
 8006f9c:	4659      	mov	r1, fp
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f00d f908 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8006fa4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006faa:	21f4      	movs	r1, #244	@ 0xf4
 8006fac:	9d01      	ldr	r5, [sp, #4]
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4798      	blx	r3
        setY(y);
 8006fb2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb8:	f240 1145 	movw	r1, #325	@ 0x145
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	4798      	blx	r3
 8006fc0:	2307      	movs	r3, #7
 8006fc2:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8006fc6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
    bouton_tests.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 8006fca:	aa0c      	add	r2, sp, #48	@ 0x30
 8006fcc:	a90b      	add	r1, sp, #44	@ 0x2c
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f011 f94c 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8006fd4:	231b      	movs	r3, #27
 8006fd6:	f8a4 3118 	strh.w	r3, [r4, #280]	@ 0x118
        return typedTextId < numberOfTypedTexts;
 8006fda:	4b1d      	ldr	r3, [pc, #116]	@ (8007050 <_ZN12HomeViewBaseC1Ev+0x350>)
        if (typedText.hasValidId())
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	2b1b      	cmp	r3, #27
 8006fe0:	d94a      	bls.n	8007078 <_ZN12HomeViewBaseC1Ev+0x378>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8007054 <_ZN12HomeViewBaseC1Ev+0x354>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d040      	beq.n	800706c <_ZN12HomeViewBaseC1Ev+0x36c>
        return fonts[typedTexts[typedTextId].fontIdx];
 8006fea:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8006fee:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <_ZN12HomeViewBaseC1Ev+0x358>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8006ff6:	211b      	movs	r1, #27
 8006ff8:	4b18      	ldr	r3, [pc, #96]	@ (800705c <_ZN12HomeViewBaseC1Ev+0x35c>)
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	f002 f898 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8007000:	4683      	mov	fp, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8007002:	f8da 3000 	ldr.w	r3, [sl]
 8007006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007008:	4650      	mov	r0, sl
 800700a:	4798      	blx	r3
 800700c:	4605      	mov	r5, r0
 800700e:	f8da 3000 	ldr.w	r3, [sl]
 8007012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007014:	4659      	mov	r1, fp
 8007016:	4650      	mov	r0, sl
 8007018:	4798      	blx	r3
 800701a:	fb15 f500 	smulbb	r5, r5, r0
 800701e:	b2ad      	uxth	r5, r5
 8007020:	f8da 3000 	ldr.w	r3, [sl]
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007026:	4659      	mov	r1, fp
 8007028:	4650      	mov	r0, sl
 800702a:	4798      	blx	r3
 800702c:	4405      	add	r5, r0
 800702e:	b22d      	sxth	r5, r5
 8007030:	e023      	b.n	800707a <_ZN12HomeViewBaseC1Ev+0x37a>
 8007032:	bf00      	nop
 8007034:	0802d148 	.word	0x0802d148
 8007038:	0802e1ec 	.word	0x0802e1ec
 800703c:	0802e15c 	.word	0x0802e15c
 8007040:	0802c65c 	.word	0x0802c65c
 8007044:	0802d130 	.word	0x0802d130
 8007048:	08006cb1 	.word	0x08006cb1
 800704c:	ff63003b 	.word	0xff63003b
 8007050:	24062214 	.word	0x24062214
 8007054:	24062210 	.word	0x24062210
 8007058:	24062218 	.word	0x24062218
 800705c:	2406221c 	.word	0x2406221c
 8007060:	0802c57c 	.word	0x0802c57c
 8007064:	0802c5c0 	.word	0x0802c5c0
 8007068:	0802c5fc 	.word	0x0802c5fc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800706c:	4b8e      	ldr	r3, [pc, #568]	@ (80072a8 <_ZN12HomeViewBaseC1Ev+0x5a8>)
 800706e:	4a8f      	ldr	r2, [pc, #572]	@ (80072ac <_ZN12HomeViewBaseC1Ev+0x5ac>)
 8007070:	216c      	movs	r1, #108	@ 0x6c
 8007072:	488f      	ldr	r0, [pc, #572]	@ (80072b0 <_ZN12HomeViewBaseC1Ev+0x5b0>)
 8007074:	f022 faac 	bl	80295d0 <__assert_func>
 8007078:	2500      	movs	r5, #0
 800707a:	f8a4 5126 	strh.w	r5, [r4, #294]	@ 0x126
        color = col;
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
        colorPressed = col;
 8007086:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
 800708a:	f8c4 8108 	str.w	r8, [r4, #264]	@ 0x108
 800708e:	9901      	ldr	r1, [sp, #4]
 8007090:	4630      	mov	r0, r6
 8007092:	f00d f88f 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8007096:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800709a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709c:	21f4      	movs	r1, #244	@ 0xf4
 800709e:	9d02      	ldr	r5, [sp, #8]
 80070a0:	4628      	mov	r0, r5
 80070a2:	4798      	blx	r3
        setY(y);
 80070a4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80070a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070aa:	2198      	movs	r1, #152	@ 0x98
 80070ac:	4628      	mov	r0, r5
 80070ae:	4798      	blx	r3
 80070b0:	2307      	movs	r3, #7
 80070b2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80070b6:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
    bouton_position_depart.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_MEDIUM_ROUND_DISABLED_ID));
 80070ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80070bc:	a90d      	add	r1, sp, #52	@ 0x34
 80070be:	4628      	mov	r0, r5
 80070c0:	f011 f8d4 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 80070c4:	2303      	movs	r3, #3
 80070c6:	f8a4 3160 	strh.w	r3, [r4, #352]	@ 0x160
        return typedTextId < numberOfTypedTexts;
 80070ca:	4b7a      	ldr	r3, [pc, #488]	@ (80072b4 <_ZN12HomeViewBaseC1Ev+0x5b4>)
        if (typedText.hasValidId())
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d92b      	bls.n	800712a <_ZN12HomeViewBaseC1Ev+0x42a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80070d2:	4b79      	ldr	r3, [pc, #484]	@ (80072b8 <_ZN12HomeViewBaseC1Ev+0x5b8>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	b313      	cbz	r3, 800711e <_ZN12HomeViewBaseC1Ev+0x41e>
        return fonts[typedTexts[typedTextId].fontIdx];
 80070d8:	799a      	ldrb	r2, [r3, #6]
 80070da:	4b78      	ldr	r3, [pc, #480]	@ (80072bc <_ZN12HomeViewBaseC1Ev+0x5bc>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80070e2:	2103      	movs	r1, #3
 80070e4:	4b76      	ldr	r3, [pc, #472]	@ (80072c0 <_ZN12HomeViewBaseC1Ev+0x5c0>)
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	f002 f822 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 80070ec:	4683      	mov	fp, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80070ee:	f8da 3000 	ldr.w	r3, [sl]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f4:	4650      	mov	r0, sl
 80070f6:	4798      	blx	r3
 80070f8:	4605      	mov	r5, r0
 80070fa:	f8da 3000 	ldr.w	r3, [sl]
 80070fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007100:	4659      	mov	r1, fp
 8007102:	4650      	mov	r0, sl
 8007104:	4798      	blx	r3
 8007106:	fb15 f500 	smulbb	r5, r5, r0
 800710a:	b2ad      	uxth	r5, r5
 800710c:	f8da 3000 	ldr.w	r3, [sl]
 8007110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007112:	4659      	mov	r1, fp
 8007114:	4650      	mov	r0, sl
 8007116:	4798      	blx	r3
 8007118:	4405      	add	r5, r0
 800711a:	b22d      	sxth	r5, r5
 800711c:	e006      	b.n	800712c <_ZN12HomeViewBaseC1Ev+0x42c>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800711e:	4b62      	ldr	r3, [pc, #392]	@ (80072a8 <_ZN12HomeViewBaseC1Ev+0x5a8>)
 8007120:	4a62      	ldr	r2, [pc, #392]	@ (80072ac <_ZN12HomeViewBaseC1Ev+0x5ac>)
 8007122:	216c      	movs	r1, #108	@ 0x6c
 8007124:	4862      	ldr	r0, [pc, #392]	@ (80072b0 <_ZN12HomeViewBaseC1Ev+0x5b0>)
 8007126:	f022 fa53 	bl	80295d0 <__assert_func>
 800712a:	2500      	movs	r5, #0
 800712c:	f8a4 516e 	strh.w	r5, [r4, #366]	@ 0x16e
        color = col;
 8007130:	f04f 35ff 	mov.w	r5, #4294967295
 8007134:	f8c4 5164 	str.w	r5, [r4, #356]	@ 0x164
        colorPressed = col;
 8007138:	f8c4 5168 	str.w	r5, [r4, #360]	@ 0x168
 800713c:	f8c4 8150 	str.w	r8, [r4, #336]	@ 0x150
 8007140:	9902      	ldr	r1, [sp, #8]
 8007142:	4630      	mov	r0, r6
 8007144:	f00d f836 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8007148:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 800714c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8007152:	4648      	mov	r0, r9
 8007154:	4798      	blx	r3
        setY(y);
 8007156:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 800715a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800715c:	210a      	movs	r1, #10
 800715e:	4648      	mov	r0, r9
 8007160:	4798      	blx	r3
        color = newColor;
 8007162:	f8c4 51a0 	str.w	r5, [r4, #416]	@ 0x1a0
        linespace = space;
 8007166:	2500      	movs	r5, #0
 8007168:	f8a4 51a4 	strh.w	r5, [r4, #420]	@ 0x1a4
        boundingArea = calculateBoundingArea();
 800716c:	f10d 0a10 	add.w	sl, sp, #16
 8007170:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 8007174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007178:	4649      	mov	r1, r9
 800717a:	4650      	mov	r0, sl
 800717c:	4798      	blx	r3
 800717e:	f109 033c 	add.w	r3, r9, #60	@ 0x3c
 8007182:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8007186:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        : typedTextId(id)
 800718a:	4b4e      	ldr	r3, [pc, #312]	@ (80072c4 <_ZN12HomeViewBaseC1Ev+0x5c4>)
 800718c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800718e:	2313      	movs	r3, #19
 8007190:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
    texte_menu_principal.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G9ZK));
 8007194:	a90f      	add	r1, sp, #60	@ 0x3c
 8007196:	4648      	mov	r0, r9
 8007198:	f011 f80a 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800719c:	4649      	mov	r1, r9
 800719e:	4630      	mov	r0, r6
 80071a0:	f00d f808 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80071a4:	2311      	movs	r3, #17
 80071a6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
    image_logo_iut.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_IUT_ID));
 80071aa:	a911      	add	r1, sp, #68	@ 0x44
 80071ac:	4638      	mov	r0, r7
 80071ae:	f011 f9ee 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80071b2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 80071b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b8:	4629      	mov	r1, r5
 80071ba:	4638      	mov	r0, r7
 80071bc:	4798      	blx	r3
        setY(y);
 80071be:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 80071c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c4:	4629      	mov	r1, r5
 80071c6:	4638      	mov	r0, r7
 80071c8:	4798      	blx	r3
        setWidth(width);
 80071ca:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 80071ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d0:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80071d4:	4638      	mov	r0, r7
 80071d6:	4798      	blx	r3
        setHeight(height);
 80071d8:	f8d4 31b8 	ldr.w	r3, [r4, #440]	@ 0x1b8
 80071dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071de:	2152      	movs	r1, #82	@ 0x52
 80071e0:	4638      	mov	r0, r7
 80071e2:	4798      	blx	r3
    image_logo_iut.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80071e4:	4629      	mov	r1, r5
 80071e6:	4638      	mov	r0, r7
 80071e8:	f010 f9f1 	bl	80175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80071ec:	4639      	mov	r1, r7
 80071ee:	4630      	mov	r0, r6
 80071f0:	f00c ffe0 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80071f4:	f8d4 31e4 	ldr.w	r3, [r4, #484]	@ 0x1e4
 80071f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fa:	2112      	movs	r1, #18
 80071fc:	9f03      	ldr	r7, [sp, #12]
 80071fe:	4638      	mov	r0, r7
 8007200:	4798      	blx	r3
        setY(y);
 8007202:	f8d4 31e4 	ldr.w	r3, [r4, #484]	@ 0x1e4
 8007206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007208:	f240 119f 	movw	r1, #415	@ 0x19f
 800720c:	4638      	mov	r0, r7
 800720e:	4798      	blx	r3
 8007210:	2304      	movs	r3, #4
 8007212:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8007216:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_DISABLED_ID));
 800721a:	aa13      	add	r2, sp, #76	@ 0x4c
 800721c:	a912      	add	r1, sp, #72	@ 0x48
 800721e:	4638      	mov	r0, r7
 8007220:	f011 f824 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8007224:	f8a4 521c 	strh.w	r5, [r4, #540]	@ 0x21c
        return typedTextId < numberOfTypedTexts;
 8007228:	4b22      	ldr	r3, [pc, #136]	@ (80072b4 <_ZN12HomeViewBaseC1Ev+0x5b4>)
        if (typedText.hasValidId())
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b343      	cbz	r3, 8007280 <_ZN12HomeViewBaseC1Ev+0x580>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800722e:	4b22      	ldr	r3, [pc, #136]	@ (80072b8 <_ZN12HomeViewBaseC1Ev+0x5b8>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	b1fb      	cbz	r3, 8007274 <_ZN12HomeViewBaseC1Ev+0x574>
        return fonts[typedTexts[typedTextId].fontIdx];
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	4b21      	ldr	r3, [pc, #132]	@ (80072bc <_ZN12HomeViewBaseC1Ev+0x5bc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 800723e:	2100      	movs	r1, #0
 8007240:	4b1f      	ldr	r3, [pc, #124]	@ (80072c0 <_ZN12HomeViewBaseC1Ev+0x5c0>)
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	f001 ff74 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8007248:	4681      	mov	r9, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	4638      	mov	r0, r7
 8007250:	4798      	blx	r3
 8007252:	4605      	mov	r5, r0
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007258:	4649      	mov	r1, r9
 800725a:	4638      	mov	r0, r7
 800725c:	4798      	blx	r3
 800725e:	fb15 f500 	smulbb	r5, r5, r0
 8007262:	b2ad      	uxth	r5, r5
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	4649      	mov	r1, r9
 800726a:	4638      	mov	r0, r7
 800726c:	4798      	blx	r3
 800726e:	4428      	add	r0, r5
 8007270:	b200      	sxth	r0, r0
 8007272:	e006      	b.n	8007282 <_ZN12HomeViewBaseC1Ev+0x582>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007274:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <_ZN12HomeViewBaseC1Ev+0x5a8>)
 8007276:	4a0d      	ldr	r2, [pc, #52]	@ (80072ac <_ZN12HomeViewBaseC1Ev+0x5ac>)
 8007278:	216c      	movs	r1, #108	@ 0x6c
 800727a:	480d      	ldr	r0, [pc, #52]	@ (80072b0 <_ZN12HomeViewBaseC1Ev+0x5b0>)
 800727c:	f022 f9a8 	bl	80295d0 <__assert_func>
 8007280:	2000      	movs	r0, #0
 8007282:	f8a4 022a 	strh.w	r0, [r4, #554]	@ 0x22a
        color = col;
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	f8c4 3220 	str.w	r3, [r4, #544]	@ 0x220
        colorPressed = col;
 800728e:	f8c4 3224 	str.w	r3, [r4, #548]	@ 0x224
 8007292:	f8c4 820c 	str.w	r8, [r4, #524]	@ 0x20c
 8007296:	9903      	ldr	r1, [sp, #12]
 8007298:	4630      	mov	r0, r6
 800729a:	f00c ff8b 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800729e:	4620      	mov	r0, r4
 80072a0:	b015      	add	sp, #84	@ 0x54
 80072a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a6:	bf00      	nop
 80072a8:	0802c57c 	.word	0x0802c57c
 80072ac:	0802c5c0 	.word	0x0802c5c0
 80072b0:	0802c5fc 	.word	0x0802c5fc
 80072b4:	24062214 	.word	0x24062214
 80072b8:	24062210 	.word	0x24062210
 80072bc:	24062218 	.word	0x24062218
 80072c0:	2406221c 	.word	0x2406221c
 80072c4:	0802c65c 	.word	0x0802c65c

080072c8 <_ZN22Robot_en_matchViewBase29reception_can_lidars_en_matchEv>:
     * Virtual Action Handlers
     */
    virtual void reception_can_lidars_en_match()
    {
        // Override and implement this function in Robot_en_match
    }
 80072c8:	4770      	bx	lr

080072ca <_ZN22Robot_en_matchViewBaseD1Ev>:
}

Robot_en_matchViewBase::~Robot_en_matchViewBase()
{

}
 80072ca:	4770      	bx	lr

080072cc <_ZN22Robot_en_matchViewBase11setupScreenEv>:

void Robot_en_matchViewBase::setupScreen()
{

}
 80072cc:	4770      	bx	lr

080072ce <_ZN22Robot_en_matchViewBase15handleTickEventEv>:

void Robot_en_matchViewBase::handleTickEvent()
{
 80072ce:	b508      	push	{r3, lr}
    //fonction_reception_can_lidars_en_match
    //When every N tick call virtual function
    //Call reception_can_lidars_en_match
    reception_can_lidars_en_match();
 80072d0:	6803      	ldr	r3, [r0, #0]
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	4798      	blx	r3
}
 80072d6:	bd08      	pop	{r3, pc}

080072d8 <_ZN22Robot_en_matchViewBaseD0Ev>:
Robot_en_matchViewBase::~Robot_en_matchViewBase()
 80072d8:	b510      	push	{r4, lr}
 80072da:	4604      	mov	r4, r0
}
 80072dc:	21e0      	movs	r1, #224	@ 0xe0
 80072de:	f021 fdff 	bl	8028ee0 <_ZdlPvj>
 80072e2:	4620      	mov	r0, r4
 80072e4:	bd10      	pop	{r4, pc}
	...

080072e8 <_ZN22Robot_en_matchViewBaseC1Ev>:
Robot_en_matchViewBase::Robot_en_matchViewBase()
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	b087      	sub	sp, #28
 80072ee:	4604      	mov	r4, r0
 80072f0:	f015 fd5c 	bl	801cdac <_ZN8touchgfx6ScreenC1Ev>
 80072f4:	2500      	movs	r5, #0
 80072f6:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80072f8:	4626      	mov	r6, r4
 80072fa:	4b7b      	ldr	r3, [pc, #492]	@ (80074e8 <_ZN22Robot_en_matchViewBaseC1Ev+0x200>)
 80072fc:	f846 3b40 	str.w	r3, [r6], #64
        : x(0), y(0), width(0), height(0)
 8007300:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 8007304:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8007308:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 800730c:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8007310:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 8007314:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 8007318:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 800731c:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          parent(0),
 8007320:	6565      	str	r5, [r4, #84]	@ 0x54
          nextSibling(0),
 8007322:	65a5      	str	r5, [r4, #88]	@ 0x58
          nextDrawChainElement(0),
 8007324:	65e5      	str	r5, [r4, #92]	@ 0x5c
          cachedAbsX(0),
 8007326:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
          cachedAbsY(0),
 800732a:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
          touchable(false),
 800732e:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
          visible(true)
 8007332:	f04f 0901 	mov.w	r9, #1
 8007336:	f884 9065 	strb.w	r9, [r4, #101]	@ 0x65
        : Widget(), alpha(255), color(0)
 800733a:	4b6c      	ldr	r3, [pc, #432]	@ (80074ec <_ZN22Robot_en_matchViewBaseC1Ev+0x204>)
 800733c:	6423      	str	r3, [r4, #64]	@ 0x40
 800733e:	21ff      	movs	r1, #255	@ 0xff
 8007340:	f884 1066 	strb.w	r1, [r4, #102]	@ 0x66
        : color(col)
 8007344:	66a5      	str	r5, [r4, #104]	@ 0x68
 8007346:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
        : x(0), y(0), width(0), height(0)
 800734a:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 800734e:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 8007352:	f8a4 5074 	strh.w	r5, [r4, #116]	@ 0x74
 8007356:	f8a4 5076 	strh.w	r5, [r4, #118]	@ 0x76
 800735a:	f8a4 5078 	strh.w	r5, [r4, #120]	@ 0x78
 800735e:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 8007362:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
 8007366:	f8a4 507e 	strh.w	r5, [r4, #126]	@ 0x7e
          parent(0),
 800736a:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
          nextSibling(0),
 800736e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          nextDrawChainElement(0),
 8007372:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
          cachedAbsX(0),
 8007376:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
          cachedAbsY(0),
 800737a:	f8a4 508e 	strh.w	r5, [r4, #142]	@ 0x8e
          touchable(false),
 800737e:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
          visible(true)
 8007382:	f884 9091 	strb.w	r9, [r4, #145]	@ 0x91
 8007386:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8007388:	f884 1092 	strb.w	r1, [r4, #146]	@ 0x92
        : color(col)
 800738c:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8007390:	f104 0798 	add.w	r7, r4, #152	@ 0x98
        : x(0), y(0), width(0), height(0)
 8007394:	f8a4 509c 	strh.w	r5, [r4, #156]	@ 0x9c
 8007398:	f8a4 509e 	strh.w	r5, [r4, #158]	@ 0x9e
 800739c:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 80073a0:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 80073a4:	f8a4 50a4 	strh.w	r5, [r4, #164]	@ 0xa4
 80073a8:	f8a4 50a6 	strh.w	r5, [r4, #166]	@ 0xa6
 80073ac:	f8a4 50a8 	strh.w	r5, [r4, #168]	@ 0xa8
 80073b0:	f8a4 50aa 	strh.w	r5, [r4, #170]	@ 0xaa
          parent(0),
 80073b4:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac
          nextSibling(0),
 80073b8:	f8c4 50b0 	str.w	r5, [r4, #176]	@ 0xb0
          nextDrawChainElement(0),
 80073bc:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
          cachedAbsX(0),
 80073c0:	f8a4 50b8 	strh.w	r5, [r4, #184]	@ 0xb8
          cachedAbsY(0),
 80073c4:	f8a4 50ba 	strh.w	r5, [r4, #186]	@ 0xba
          touchable(false),
 80073c8:	f884 50bc 	strb.w	r5, [r4, #188]	@ 0xbc
          visible(true)
 80073cc:	f884 90bd 	strb.w	r9, [r4, #189]	@ 0xbd
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80073d0:	4a47      	ldr	r2, [pc, #284]	@ (80074f0 <_ZN22Robot_en_matchViewBaseC1Ev+0x208>)
 80073d2:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
        : typedTextId(id)
 80073d6:	f8df b120 	ldr.w	fp, [pc, #288]	@ 80074f8 <_ZN22Robot_en_matchViewBaseC1Ev+0x210>
 80073da:	f8c4 b0c0 	str.w	fp, [r4, #192]	@ 0xc0
 80073de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80073e2:	f8a4 20c4 	strh.w	r2, [r4, #196]	@ 0xc4
        : color(col)
 80073e6:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
 80073ea:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
 80073ee:	f884 10ce 	strb.w	r1, [r4, #206]	@ 0xce
 80073f2:	f884 50cf 	strb.w	r5, [r4, #207]	@ 0xcf
 80073f6:	f884 50d0 	strb.w	r5, [r4, #208]	@ 0xd0
 80073fa:	f884 50d1 	strb.w	r5, [r4, #209]	@ 0xd1
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80073fe:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
 8007402:	f8a4 50d6 	strh.w	r5, [r4, #214]	@ 0xd6
 8007406:	f8a4 20d8 	strh.w	r2, [r4, #216]	@ 0xd8
 800740a:	f8a4 20da 	strh.w	r2, [r4, #218]	@ 0xda
              text(0)
 800740e:	f8c4 50dc 	str.w	r5, [r4, #220]	@ 0xdc
        setX(x);
 8007412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007414:	4629      	mov	r1, r5
 8007416:	4630      	mov	r0, r6
 8007418:	4798      	blx	r3
        setY(y);
 800741a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800741c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800741e:	4629      	mov	r1, r5
 8007420:	4630      	mov	r0, r6
 8007422:	4798      	blx	r3
        setWidth(width);
 8007424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007428:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800742c:	4630      	mov	r0, r6
 800742e:	4798      	blx	r3
        setHeight(height);
 8007430:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007434:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8007438:	4630      	mov	r0, r6
 800743a:	4798      	blx	r3
        color = newColor;
 800743c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8007440:	66a3      	str	r3, [r4, #104]	@ 0x68
 8007442:	f104 0a04 	add.w	sl, r4, #4
 8007446:	4631      	mov	r1, r6
 8007448:	4650      	mov	r0, sl
 800744a:	f00c feb3 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800744e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007452:	4629      	mov	r1, r5
 8007454:	4640      	mov	r0, r8
 8007456:	4798      	blx	r3
        setY(y);
 8007458:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800745a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745c:	4629      	mov	r1, r5
 800745e:	4640      	mov	r0, r8
 8007460:	4798      	blx	r3
        setWidth(width);
 8007462:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007466:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800746a:	4640      	mov	r0, r8
 800746c:	4798      	blx	r3
        setHeight(height);
 800746e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007472:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8007476:	4640      	mov	r0, r8
 8007478:	4798      	blx	r3
 800747a:	4b1e      	ldr	r3, [pc, #120]	@ (80074f4 <_ZN22Robot_en_matchViewBaseC1Ev+0x20c>)
 800747c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8007480:	4641      	mov	r1, r8
 8007482:	4650      	mov	r0, sl
 8007484:	f00c fe96 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8007488:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	2181      	movs	r1, #129	@ 0x81
 8007490:	4638      	mov	r0, r7
 8007492:	4798      	blx	r3
        setY(y);
 8007494:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8007498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800749a:	21ba      	movs	r1, #186	@ 0xba
 800749c:	4638      	mov	r0, r7
 800749e:	4798      	blx	r3
        color = newColor;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
        linespace = space;
 80074a8:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
        boundingArea = calculateBoundingArea();
 80074ac:	466d      	mov	r5, sp
 80074ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80074b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074b6:	4639      	mov	r1, r7
 80074b8:	4628      	mov	r0, r5
 80074ba:	4798      	blx	r3
 80074bc:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 80074c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80074c8:	f8cd b010 	str.w	fp, [sp, #16]
 80074cc:	f8ad 9014 	strh.w	r9, [sp, #20]
    texte_mode_competition_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G58B));
 80074d0:	a904      	add	r1, sp, #16
 80074d2:	4638      	mov	r0, r7
 80074d4:	f010 fe6c 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80074d8:	4639      	mov	r1, r7
 80074da:	4650      	mov	r0, sl
 80074dc:	f00c fe6a 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80074e0:	4620      	mov	r0, r4
 80074e2:	b007      	add	sp, #28
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	0802d180 	.word	0x0802d180
 80074ec:	0802e1ec 	.word	0x0802e1ec
 80074f0:	0802e15c 	.word	0x0802e15c
 80074f4:	ff63003b 	.word	0xff63003b
 80074f8:	0802c65c 	.word	0x0802c65c

080074fc <_ZN18Robot_pretViewBase15attente_tiretteEv>:
     * Virtual Action Handlers
     */
    virtual void attente_tirette()
    {
        // Override and implement this function in Robot_pret
    }
 80074fc:	4770      	bx	lr

080074fe <_ZN18Robot_pretViewBaseD1Ev>:
}

Robot_pretViewBase::~Robot_pretViewBase()
{

}
 80074fe:	4770      	bx	lr

08007500 <_ZN18Robot_pretViewBase11setupScreenEv>:

void Robot_pretViewBase::setupScreen()
{

}
 8007500:	4770      	bx	lr

08007502 <_ZN8touchgfx8CallbackI18Robot_pretViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007502:	4770      	bx	lr

08007504 <_ZN8touchgfx8CallbackI18Robot_pretViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007504:	b510      	push	{r4, lr}
 8007506:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8007508:	68c2      	ldr	r2, [r0, #12]
 800750a:	6844      	ldr	r4, [r0, #4]
 800750c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007510:	f012 0f01 	tst.w	r2, #1
 8007514:	d102      	bne.n	800751c <_ZN8touchgfx8CallbackI18Robot_pretViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	4798      	blx	r3
    }
 800751a:	bd10      	pop	{r4, pc}
 800751c:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8007520:	f854 200c 	ldr.w	r2, [r4, ip]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	58d3      	ldr	r3, [r2, r3]
 8007528:	e7f6      	b.n	8007518 <_ZN8touchgfx8CallbackI18Robot_pretViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x14>

0800752a <_ZNK8touchgfx8CallbackI18Robot_pretViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800752a:	6843      	ldr	r3, [r0, #4]
 800752c:	b13b      	cbz	r3, 800753e <_ZNK8touchgfx8CallbackI18Robot_pretViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800752e:	6883      	ldr	r3, [r0, #8]
 8007530:	b10b      	cbz	r3, 8007536 <_ZNK8touchgfx8CallbackI18Robot_pretViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 8007532:	2001      	movs	r0, #1
    }
 8007534:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 8007536:	68c0      	ldr	r0, [r0, #12]
 8007538:	f000 0001 	and.w	r0, r0, #1
 800753c:	4770      	bx	lr
 800753e:	2000      	movs	r0, #0
 8007540:	4770      	bx	lr

08007542 <_ZN8touchgfx8CallbackI18Robot_pretViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007542:	b510      	push	{r4, lr}
 8007544:	4604      	mov	r4, r0
 8007546:	2110      	movs	r1, #16
 8007548:	f021 fcca 	bl	8028ee0 <_ZdlPvj>
 800754c:	4620      	mov	r0, r4
 800754e:	bd10      	pop	{r4, pc}

08007550 <_ZN18Robot_pretViewBaseD0Ev>:
Robot_pretViewBase::~Robot_pretViewBase()
 8007550:	b510      	push	{r4, lr}
 8007552:	4604      	mov	r4, r0
}
 8007554:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8007558:	f021 fcc2 	bl	8028ee0 <_ZdlPvj>
 800755c:	4620      	mov	r0, r4
 800755e:	bd10      	pop	{r4, pc}

08007560 <_ZN18Robot_pretViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Robot_pretViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4604      	mov	r4, r0
 8007564:	460d      	mov	r5, r1
    if (&src == &bouton_home)
 8007566:	f500 7394 	add.w	r3, r0, #296	@ 0x128
 800756a:	4299      	cmp	r1, r3
 800756c:	d004      	beq.n	8007578 <_ZN18Robot_pretViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
        //vers_home
        //When bouton_home clicked change screen to Home
        //Go to Home with no screen transition
        application().gotoHomeScreenNoTransition();
    }
    if (&src == &bouton_retour)
 800756e:	f504 74b2 	add.w	r4, r4, #356	@ 0x164
 8007572:	42a5      	cmp	r5, r4
 8007574:	d005      	beq.n	8007582 <_ZN18Robot_pretViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
        //vers_choix_strategie
        //When bouton_retour clicked change screen to Choix_strategie
        //Go to Choix_strategie with no screen transition
        application().gotoChoix_strategieScreenNoTransition();
    }
}
 8007576:	bd38      	pop	{r3, r4, r5, pc}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8007578:	f013 fd0c 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoHomeScreenNoTransition();
 800757c:	f7fe fc5a 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
 8007580:	e7f5      	b.n	800756e <_ZN18Robot_pretViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
 8007582:	f013 fd07 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoChoix_strategieScreenNoTransition();
 8007586:	f7fe fc65 	bl	8005e54 <_ZN23FrontendApplicationBase37gotoChoix_strategieScreenNoTransitionEv>
 800758a:	f013 fd03 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoChoix_strategieScreenNoTransition();
 800758e:	f7fe fc61 	bl	8005e54 <_ZN23FrontendApplicationBase37gotoChoix_strategieScreenNoTransitionEv>
}
 8007592:	e7f0      	b.n	8007576 <_ZN18Robot_pretViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>

08007594 <_ZN18Robot_pretViewBase15handleTickEventEv>:

void Robot_pretViewBase::handleTickEvent()
{
 8007594:	b508      	push	{r3, lr}
    //fonction_attente_tirette
    //When every N tick call virtual function
    //Call attente_tirette
    attente_tirette();
 8007596:	6803      	ldr	r3, [r0, #0]
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	4798      	blx	r3
 800759c:	f013 fcfa 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>

    //vers_robot_en_match
    //When fonction_attente_tirette completed change screen to Robot_en_match
    //Go to Robot_en_match with no screen transition
    application().gotoRobot_en_matchScreenNoTransition();
 80075a0:	f7fe fc78 	bl	8005e94 <_ZN23FrontendApplicationBase36gotoRobot_en_matchScreenNoTransitionEv>
}
 80075a4:	bd08      	pop	{r3, pc}
	...

080075a8 <_ZN18Robot_pretViewBaseC1Ev>:
Robot_pretViewBase::Robot_pretViewBase() :
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	b095      	sub	sp, #84	@ 0x54
 80075ae:	4604      	mov	r4, r0
 80075b0:	f015 fbfc 	bl	801cdac <_ZN8touchgfx6ScreenC1Ev>
 80075b4:	2500      	movs	r5, #0
 80075b6:	63e5      	str	r5, [r4, #60]	@ 0x3c
    buttonCallback(this, &Robot_pretViewBase::buttonCallbackHandler)
 80075b8:	4626      	mov	r6, r4
 80075ba:	4bdb      	ldr	r3, [pc, #876]	@ (8007928 <_ZN18Robot_pretViewBaseC1Ev+0x380>)
 80075bc:	f846 3b40 	str.w	r3, [r6], #64
        : x(0), y(0), width(0), height(0)
 80075c0:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 80075c4:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 80075c8:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 80075cc:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 80075d0:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 80075d4:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 80075d8:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 80075dc:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          parent(0),
 80075e0:	6565      	str	r5, [r4, #84]	@ 0x54
          nextSibling(0),
 80075e2:	65a5      	str	r5, [r4, #88]	@ 0x58
          nextDrawChainElement(0),
 80075e4:	65e5      	str	r5, [r4, #92]	@ 0x5c
          cachedAbsX(0),
 80075e6:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
          cachedAbsY(0),
 80075ea:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
          touchable(false),
 80075ee:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
          visible(true)
 80075f2:	2201      	movs	r2, #1
 80075f4:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
        : Widget(), alpha(255), color(0)
 80075f8:	4bcc      	ldr	r3, [pc, #816]	@ (800792c <_ZN18Robot_pretViewBaseC1Ev+0x384>)
 80075fa:	6423      	str	r3, [r4, #64]	@ 0x40
 80075fc:	21ff      	movs	r1, #255	@ 0xff
 80075fe:	f884 1066 	strb.w	r1, [r4, #102]	@ 0x66
        : color(col)
 8007602:	66a5      	str	r5, [r4, #104]	@ 0x68
 8007604:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
        : x(0), y(0), width(0), height(0)
 8007608:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 800760c:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 8007610:	f8a4 5074 	strh.w	r5, [r4, #116]	@ 0x74
 8007614:	f8a4 5076 	strh.w	r5, [r4, #118]	@ 0x76
 8007618:	f8a4 5078 	strh.w	r5, [r4, #120]	@ 0x78
 800761c:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 8007620:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
 8007624:	f8a4 507e 	strh.w	r5, [r4, #126]	@ 0x7e
          parent(0),
 8007628:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
          nextSibling(0),
 800762c:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          nextDrawChainElement(0),
 8007630:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
          cachedAbsX(0),
 8007634:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
          cachedAbsY(0),
 8007638:	f8a4 508e 	strh.w	r5, [r4, #142]	@ 0x8e
          touchable(false),
 800763c:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
          visible(true)
 8007640:	f884 2091 	strb.w	r2, [r4, #145]	@ 0x91
 8007644:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8007646:	f884 1092 	strb.w	r1, [r4, #146]	@ 0x92
        : color(col)
 800764a:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 800764e:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
        : x(0), y(0), width(0), height(0)
 8007652:	f8a4 509c 	strh.w	r5, [r4, #156]	@ 0x9c
 8007656:	f8a4 509e 	strh.w	r5, [r4, #158]	@ 0x9e
 800765a:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 800765e:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 8007662:	f8a4 50a4 	strh.w	r5, [r4, #164]	@ 0xa4
 8007666:	f8a4 50a6 	strh.w	r5, [r4, #166]	@ 0xa6
 800766a:	f8a4 50a8 	strh.w	r5, [r4, #168]	@ 0xa8
 800766e:	f8a4 50aa 	strh.w	r5, [r4, #170]	@ 0xaa
          parent(0),
 8007672:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac
          nextSibling(0),
 8007676:	f8c4 50b0 	str.w	r5, [r4, #176]	@ 0xb0
          nextDrawChainElement(0),
 800767a:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
          cachedAbsX(0),
 800767e:	f8a4 50b8 	strh.w	r5, [r4, #184]	@ 0xb8
          cachedAbsY(0),
 8007682:	f8a4 50ba 	strh.w	r5, [r4, #186]	@ 0xba
          touchable(false),
 8007686:	f884 50bc 	strb.w	r5, [r4, #188]	@ 0xbc
          visible(true)
 800768a:	f884 20bd 	strb.w	r2, [r4, #189]	@ 0xbd
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800768e:	48a8      	ldr	r0, [pc, #672]	@ (8007930 <_ZN18Robot_pretViewBaseC1Ev+0x388>)
 8007690:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
 8007694:	4fa7      	ldr	r7, [pc, #668]	@ (8007934 <_ZN18Robot_pretViewBaseC1Ev+0x38c>)
 8007696:	f8c4 70c0 	str.w	r7, [r4, #192]	@ 0xc0
 800769a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800769e:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
        : color(col)
 80076a2:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
 80076a6:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
 80076aa:	f884 10ce 	strb.w	r1, [r4, #206]	@ 0xce
 80076ae:	f884 50cf 	strb.w	r5, [r4, #207]	@ 0xcf
 80076b2:	f884 50d0 	strb.w	r5, [r4, #208]	@ 0xd0
 80076b6:	f884 50d1 	strb.w	r5, [r4, #209]	@ 0xd1
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80076ba:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
 80076be:	f8a4 50d6 	strh.w	r5, [r4, #214]	@ 0xd6
 80076c2:	f8a4 30d8 	strh.w	r3, [r4, #216]	@ 0xd8
 80076c6:	f8a4 30da 	strh.w	r3, [r4, #218]	@ 0xda
              text(0)
 80076ca:	f8c4 50dc 	str.w	r5, [r4, #220]	@ 0xdc
 80076ce:	f104 09e0 	add.w	r9, r4, #224	@ 0xe0
        : x(0), y(0), width(0), height(0)
 80076d2:	f8a4 50e4 	strh.w	r5, [r4, #228]	@ 0xe4
 80076d6:	f8a4 50e6 	strh.w	r5, [r4, #230]	@ 0xe6
 80076da:	f8a4 50e8 	strh.w	r5, [r4, #232]	@ 0xe8
 80076de:	f8a4 50ea 	strh.w	r5, [r4, #234]	@ 0xea
 80076e2:	f8a4 50ec 	strh.w	r5, [r4, #236]	@ 0xec
 80076e6:	f8a4 50ee 	strh.w	r5, [r4, #238]	@ 0xee
 80076ea:	f8a4 50f0 	strh.w	r5, [r4, #240]	@ 0xf0
 80076ee:	f8a4 50f2 	strh.w	r5, [r4, #242]	@ 0xf2
          parent(0),
 80076f2:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
          nextSibling(0),
 80076f6:	f8c4 50f8 	str.w	r5, [r4, #248]	@ 0xf8
          nextDrawChainElement(0),
 80076fa:	f8c4 50fc 	str.w	r5, [r4, #252]	@ 0xfc
          cachedAbsX(0),
 80076fe:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
          cachedAbsY(0),
 8007702:	f8a4 5102 	strh.w	r5, [r4, #258]	@ 0x102
          touchable(false),
 8007706:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
          visible(true)
 800770a:	f884 2105 	strb.w	r2, [r4, #261]	@ 0x105
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800770e:	f8c4 00e0 	str.w	r0, [r4, #224]	@ 0xe0
 8007712:	f8c4 7108 	str.w	r7, [r4, #264]	@ 0x108
 8007716:	f8a4 310c 	strh.w	r3, [r4, #268]	@ 0x10c
        : color(col)
 800771a:	f8c4 5110 	str.w	r5, [r4, #272]	@ 0x110
 800771e:	f8a4 5114 	strh.w	r5, [r4, #276]	@ 0x114
 8007722:	f884 3116 	strb.w	r3, [r4, #278]	@ 0x116
 8007726:	f884 5117 	strb.w	r5, [r4, #279]	@ 0x117
 800772a:	f884 5118 	strb.w	r5, [r4, #280]	@ 0x118
 800772e:	f884 5119 	strb.w	r5, [r4, #281]	@ 0x119
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8007732:	f8a4 511c 	strh.w	r5, [r4, #284]	@ 0x11c
 8007736:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 800773a:	f8a4 3120 	strh.w	r3, [r4, #288]	@ 0x120
 800773e:	f8a4 3122 	strh.w	r3, [r4, #290]	@ 0x122
              text(0)
 8007742:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8007746:	f504 7894 	add.w	r8, r4, #296	@ 0x128
 800774a:	4640      	mov	r0, r8
 800774c:	f010 fef8 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8007750:	f504 72b2 	add.w	r2, r4, #356	@ 0x164
 8007754:	9203      	str	r2, [sp, #12]
 8007756:	4610      	mov	r0, r2
 8007758:	f010 fef2 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 800775c:	4b76      	ldr	r3, [pc, #472]	@ (8007938 <_ZN18Robot_pretViewBaseC1Ev+0x390>)
 800775e:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
 8007762:	f8c4 41a4 	str.w	r4, [r4, #420]	@ 0x1a4
 8007766:	4b75      	ldr	r3, [pc, #468]	@ (800793c <_ZN18Robot_pretViewBaseC1Ev+0x394>)
 8007768:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
 800776c:	f8c4 51ac 	str.w	r5, [r4, #428]	@ 0x1ac
        setX(x);
 8007770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	4798      	blx	r3
        setY(y);
 800777a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800777c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777e:	4629      	mov	r1, r5
 8007780:	4630      	mov	r0, r6
 8007782:	4798      	blx	r3
        setWidth(width);
 8007784:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800778c:	4630      	mov	r0, r6
 800778e:	4798      	blx	r3
        setHeight(height);
 8007790:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007794:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8007798:	4630      	mov	r0, r6
 800779a:	4798      	blx	r3
        color = newColor;
 800779c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80077a0:	66a3      	str	r3, [r4, #104]	@ 0x68
 80077a2:	1d27      	adds	r7, r4, #4
 80077a4:	4631      	mov	r1, r6
 80077a6:	4638      	mov	r0, r7
 80077a8:	f00c fd04 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80077ac:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80077ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b0:	4629      	mov	r1, r5
 80077b2:	4658      	mov	r0, fp
 80077b4:	4798      	blx	r3
        setY(y);
 80077b6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80077b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ba:	4629      	mov	r1, r5
 80077bc:	4658      	mov	r0, fp
 80077be:	4798      	blx	r3
        setWidth(width);
 80077c0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80077c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c4:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80077c8:	4658      	mov	r0, fp
 80077ca:	4798      	blx	r3
        setHeight(height);
 80077cc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80077ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80077d4:	4658      	mov	r0, fp
 80077d6:	4798      	blx	r3
 80077d8:	4b59      	ldr	r3, [pc, #356]	@ (8007940 <_ZN18Robot_pretViewBaseC1Ev+0x398>)
 80077da:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80077de:	4659      	mov	r1, fp
 80077e0:	4638      	mov	r0, r7
 80077e2:	f00c fce7 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80077e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80077ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ec:	f240 215f 	movw	r1, #607	@ 0x25f
 80077f0:	4650      	mov	r0, sl
 80077f2:	4798      	blx	r3
        setY(y);
 80077f4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80077f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077fa:	210a      	movs	r1, #10
 80077fc:	4650      	mov	r0, sl
 80077fe:	4798      	blx	r3
        color = newColor;
 8007800:	f04f 3bff 	mov.w	fp, #4294967295
 8007804:	f8c4 b0c8 	str.w	fp, [r4, #200]	@ 0xc8
        linespace = space;
 8007808:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
        boundingArea = calculateBoundingArea();
 800780c:	ae04      	add	r6, sp, #16
 800780e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8007812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007816:	4651      	mov	r1, sl
 8007818:	4630      	mov	r0, r6
 800781a:	4798      	blx	r3
 800781c:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 8007820:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007824:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007828:	4b42      	ldr	r3, [pc, #264]	@ (8007934 <_ZN18Robot_pretViewBaseC1Ev+0x38c>)
 800782a:	9308      	str	r3, [sp, #32]
 800782c:	2312      	movs	r3, #18
 800782e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    texte_mode_competition.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8Y5L));
 8007832:	a908      	add	r1, sp, #32
 8007834:	4650      	mov	r0, sl
 8007836:	f010 fcbb 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800783a:	4651      	mov	r1, sl
 800783c:	4638      	mov	r0, r7
 800783e:	f00c fcb9 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8007842:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8007846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007848:	2107      	movs	r1, #7
 800784a:	4648      	mov	r0, r9
 800784c:	4798      	blx	r3
        setY(y);
 800784e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8007852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007854:	2196      	movs	r1, #150	@ 0x96
 8007856:	4648      	mov	r0, r9
 8007858:	4798      	blx	r3
        color = newColor;
 800785a:	f8c4 b110 	str.w	fp, [r4, #272]	@ 0x110
        linespace = space;
 800785e:	f8a4 5114 	strh.w	r5, [r4, #276]	@ 0x114
        boundingArea = calculateBoundingArea();
 8007862:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8007866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800786a:	4649      	mov	r1, r9
 800786c:	4630      	mov	r0, r6
 800786e:	4798      	blx	r3
 8007870:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8007874:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007878:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800787c:	4b2d      	ldr	r3, [pc, #180]	@ (8007934 <_ZN18Robot_pretViewBaseC1Ev+0x38c>)
 800787e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007880:	2304      	movs	r3, #4
 8007882:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    texte_mode_competition_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HJ3M));
 8007886:	a90a      	add	r1, sp, #40	@ 0x28
 8007888:	4648      	mov	r0, r9
 800788a:	f010 fc91 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800788e:	4649      	mov	r1, r9
 8007890:	4638      	mov	r0, r7
 8007892:	f00c fc8f 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8007896:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800789a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789c:	4629      	mov	r1, r5
 800789e:	4640      	mov	r0, r8
 80078a0:	4798      	blx	r3
        setY(y);
 80078a2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80078a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a8:	4629      	mov	r1, r5
 80078aa:	4640      	mov	r0, r8
 80078ac:	4798      	blx	r3
 80078ae:	f04f 0a02 	mov.w	sl, #2
 80078b2:	f8ad a030 	strh.w	sl, [sp, #48]	@ 0x30
 80078b6:	f04f 0b03 	mov.w	fp, #3
 80078ba:	f8ad b034 	strh.w	fp, [sp, #52]	@ 0x34
 80078be:	230b      	movs	r3, #11
 80078c0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80078c4:	f04f 030a 	mov.w	r3, #10
 80078c8:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    bouton_home.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_HOME_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 80078cc:	ab0f      	add	r3, sp, #60	@ 0x3c
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	ab0e      	add	r3, sp, #56	@ 0x38
 80078d2:	aa0d      	add	r2, sp, #52	@ 0x34
 80078d4:	a90c      	add	r1, sp, #48	@ 0x30
 80078d6:	4640      	mov	r0, r8
 80078d8:	f010 fd9d 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 80078dc:	2605      	movs	r6, #5
 80078de:	f8a4 6160 	strh.w	r6, [r4, #352]	@ 0x160
        iconY = y;
 80078e2:	f8a4 6162 	strh.w	r6, [r4, #354]	@ 0x162
    bouton_home.setAction(buttonCallback);
 80078e6:	f504 79d0 	add.w	r9, r4, #416	@ 0x1a0
 80078ea:	f8c4 9150 	str.w	r9, [r4, #336]	@ 0x150
 80078ee:	4641      	mov	r1, r8
 80078f0:	4638      	mov	r0, r7
 80078f2:	f00c fc5f 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80078f6:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 80078fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fc:	4629      	mov	r1, r5
 80078fe:	9d03      	ldr	r5, [sp, #12]
 8007900:	4628      	mov	r0, r5
 8007902:	4798      	blx	r3
        setY(y);
 8007904:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8007908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800790a:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800790e:	4628      	mov	r0, r5
 8007910:	4798      	blx	r3
 8007912:	f8ad a040 	strh.w	sl, [sp, #64]	@ 0x40
 8007916:	f8ad b044 	strh.w	fp, [sp, #68]	@ 0x44
 800791a:	230c      	movs	r3, #12
 800791c:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8007920:	f04f 030a 	mov.w	r3, #10
 8007924:	e00e      	b.n	8007944 <_ZN18Robot_pretViewBaseC1Ev+0x39c>
 8007926:	bf00      	nop
 8007928:	0802d1d0 	.word	0x0802d1d0
 800792c:	0802e1ec 	.word	0x0802e1ec
 8007930:	0802e15c 	.word	0x0802e15c
 8007934:	0802c65c 	.word	0x0802c65c
 8007938:	0802d1b8 	.word	0x0802d1b8
 800793c:	08007561 	.word	0x08007561
 8007940:	ff63003b 	.word	0xff63003b
 8007944:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
    bouton_retour.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REPLY_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8007948:	ab13      	add	r3, sp, #76	@ 0x4c
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	ab12      	add	r3, sp, #72	@ 0x48
 800794e:	aa11      	add	r2, sp, #68	@ 0x44
 8007950:	a910      	add	r1, sp, #64	@ 0x40
 8007952:	4628      	mov	r0, r5
 8007954:	f010 fd5f 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8007958:	f8a4 619c 	strh.w	r6, [r4, #412]	@ 0x19c
        iconY = y;
 800795c:	f8a4 619e 	strh.w	r6, [r4, #414]	@ 0x19e
 8007960:	f8c4 918c 	str.w	r9, [r4, #396]	@ 0x18c
 8007964:	4629      	mov	r1, r5
 8007966:	4638      	mov	r0, r7
 8007968:	f00c fc24 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800796c:	4620      	mov	r0, r4
 800796e:	b015      	add	sp, #84	@ 0x54
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007974 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007974:	4770      	bx	lr
	...

08007978 <_Z23getFont_verdana_10_4bppv>:
 8007978:	4b18      	ldr	r3, [pc, #96]	@ (80079dc <_Z23getFont_verdana_10_4bppv+0x64>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f3bf 8f5b 	dmb	ish
 8007980:	f013 0f01 	tst.w	r3, #1
 8007984:	d001      	beq.n	800798a <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 8007986:	4816      	ldr	r0, [pc, #88]	@ (80079e0 <_Z23getFont_verdana_10_4bppv+0x68>)
 8007988:	4770      	bx	lr
{
 800798a:	b500      	push	{lr}
 800798c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800798e:	4813      	ldr	r0, [pc, #76]	@ (80079dc <_Z23getFont_verdana_10_4bppv+0x64>)
 8007990:	f021 faa8 	bl	8028ee4 <__cxa_guard_acquire>
 8007994:	b918      	cbnz	r0, 800799e <_Z23getFont_verdana_10_4bppv+0x26>
}
 8007996:	4812      	ldr	r0, [pc, #72]	@ (80079e0 <_Z23getFont_verdana_10_4bppv+0x68>)
 8007998:	b00f      	add	sp, #60	@ 0x3c
 800799a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800799e:	2300      	movs	r3, #0
 80079a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80079a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80079a6:	223f      	movs	r2, #63	@ 0x3f
 80079a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80079aa:	4a0e      	ldr	r2, [pc, #56]	@ (80079e4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80079ac:	9208      	str	r2, [sp, #32]
 80079ae:	4a0e      	ldr	r2, [pc, #56]	@ (80079e8 <_Z23getFont_verdana_10_4bppv+0x70>)
 80079b0:	9207      	str	r2, [sp, #28]
 80079b2:	9306      	str	r3, [sp, #24]
 80079b4:	9305      	str	r3, [sp, #20]
 80079b6:	2201      	movs	r2, #1
 80079b8:	9204      	str	r2, [sp, #16]
 80079ba:	2104      	movs	r1, #4
 80079bc:	9103      	str	r1, [sp, #12]
 80079be:	9302      	str	r3, [sp, #8]
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	230a      	movs	r3, #10
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4909      	ldr	r1, [pc, #36]	@ (80079ec <_Z23getFont_verdana_10_4bppv+0x74>)
 80079c8:	4805      	ldr	r0, [pc, #20]	@ (80079e0 <_Z23getFont_verdana_10_4bppv+0x68>)
 80079ca:	f7ff f90f 	bl	8006bec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80079ce:	4808      	ldr	r0, [pc, #32]	@ (80079f0 <_Z23getFont_verdana_10_4bppv+0x78>)
 80079d0:	f021 fe1c 	bl	802960c <atexit>
 80079d4:	4801      	ldr	r0, [pc, #4]	@ (80079dc <_Z23getFont_verdana_10_4bppv+0x64>)
 80079d6:	f021 fa91 	bl	8028efc <__cxa_guard_release>
 80079da:	e7dc      	b.n	8007996 <_Z23getFont_verdana_10_4bppv+0x1e>
 80079dc:	24030994 	.word	0x24030994
 80079e0:	24030998 	.word	0x24030998
 80079e4:	08032888 	.word	0x08032888
 80079e8:	080328c0 	.word	0x080328c0
 80079ec:	080323b0 	.word	0x080323b0
 80079f0:	08007975 	.word	0x08007975

080079f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 25, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80079f4:	4770      	bx	lr
	...

080079f8 <_Z23getFont_verdana_20_4bppv>:
 80079f8:	4b19      	ldr	r3, [pc, #100]	@ (8007a60 <_Z23getFont_verdana_20_4bppv+0x68>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f3bf 8f5b 	dmb	ish
 8007a00:	f013 0f01 	tst.w	r3, #1
 8007a04:	d001      	beq.n	8007a0a <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 8007a06:	4817      	ldr	r0, [pc, #92]	@ (8007a64 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8007a08:	4770      	bx	lr
{
 8007a0a:	b500      	push	{lr}
 8007a0c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 25, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007a0e:	4814      	ldr	r0, [pc, #80]	@ (8007a60 <_Z23getFont_verdana_20_4bppv+0x68>)
 8007a10:	f021 fa68 	bl	8028ee4 <__cxa_guard_acquire>
 8007a14:	b918      	cbnz	r0, 8007a1e <_Z23getFont_verdana_20_4bppv+0x26>
}
 8007a16:	4813      	ldr	r0, [pc, #76]	@ (8007a64 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8007a18:	b00f      	add	sp, #60	@ 0x3c
 8007a1a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 25, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a24:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a26:	223f      	movs	r2, #63	@ 0x3f
 8007a28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8007a68 <_Z23getFont_verdana_20_4bppv+0x70>)
 8007a2c:	9208      	str	r2, [sp, #32]
 8007a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8007a6c <_Z23getFont_verdana_20_4bppv+0x74>)
 8007a30:	9207      	str	r2, [sp, #28]
 8007a32:	2201      	movs	r2, #1
 8007a34:	9206      	str	r2, [sp, #24]
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	9204      	str	r2, [sp, #16]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	9203      	str	r2, [sp, #12]
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	2314      	movs	r3, #20
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	2318      	movs	r3, #24
 8007a48:	2219      	movs	r2, #25
 8007a4a:	4909      	ldr	r1, [pc, #36]	@ (8007a70 <_Z23getFont_verdana_20_4bppv+0x78>)
 8007a4c:	4805      	ldr	r0, [pc, #20]	@ (8007a64 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8007a4e:	f7ff f8cd 	bl	8006bec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007a52:	4808      	ldr	r0, [pc, #32]	@ (8007a74 <_Z23getFont_verdana_20_4bppv+0x7c>)
 8007a54:	f021 fdda 	bl	802960c <atexit>
 8007a58:	4801      	ldr	r0, [pc, #4]	@ (8007a60 <_Z23getFont_verdana_20_4bppv+0x68>)
 8007a5a:	f021 fa4f 	bl	8028efc <__cxa_guard_release>
 8007a5e:	e7da      	b.n	8007a16 <_Z23getFont_verdana_20_4bppv+0x1e>
 8007a60:	240309c4 	.word	0x240309c4
 8007a64:	240309c8 	.word	0x240309c8
 8007a68:	0803288c 	.word	0x0803288c
 8007a6c:	080328c4 	.word	0x080328c4
 8007a70:	080323c0 	.word	0x080323c0
 8007a74:	080079f5 	.word	0x080079f5

08007a78 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007a78:	4770      	bx	lr
	...

08007a7c <_Z23getFont_verdana_40_4bppv>:
 8007a7c:	4b18      	ldr	r3, [pc, #96]	@ (8007ae0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f3bf 8f5b 	dmb	ish
 8007a84:	f013 0f01 	tst.w	r3, #1
 8007a88:	d001      	beq.n	8007a8e <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 8007a8a:	4816      	ldr	r0, [pc, #88]	@ (8007ae4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8007a8c:	4770      	bx	lr
{
 8007a8e:	b500      	push	{lr}
 8007a90:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007a92:	4813      	ldr	r0, [pc, #76]	@ (8007ae0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8007a94:	f021 fa26 	bl	8028ee4 <__cxa_guard_acquire>
 8007a98:	b918      	cbnz	r0, 8007aa2 <_Z23getFont_verdana_40_4bppv+0x26>
}
 8007a9a:	4812      	ldr	r0, [pc, #72]	@ (8007ae4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8007a9c:	b00f      	add	sp, #60	@ 0x3c
 8007a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007aa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aaa:	223f      	movs	r2, #63	@ 0x3f
 8007aac:	9209      	str	r2, [sp, #36]	@ 0x24
 8007aae:	4a0e      	ldr	r2, [pc, #56]	@ (8007ae8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8007ab0:	9208      	str	r2, [sp, #32]
 8007ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8007aec <_Z23getFont_verdana_40_4bppv+0x70>)
 8007ab4:	9207      	str	r2, [sp, #28]
 8007ab6:	9306      	str	r3, [sp, #24]
 8007ab8:	9305      	str	r3, [sp, #20]
 8007aba:	2201      	movs	r2, #1
 8007abc:	9204      	str	r2, [sp, #16]
 8007abe:	2104      	movs	r1, #4
 8007ac0:	9103      	str	r1, [sp, #12]
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	9301      	str	r3, [sp, #4]
 8007ac6:	2328      	movs	r3, #40	@ 0x28
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	4909      	ldr	r1, [pc, #36]	@ (8007af0 <_Z23getFont_verdana_40_4bppv+0x74>)
 8007acc:	4805      	ldr	r0, [pc, #20]	@ (8007ae4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8007ace:	f7ff f88d 	bl	8006bec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007ad2:	4808      	ldr	r0, [pc, #32]	@ (8007af4 <_Z23getFont_verdana_40_4bppv+0x78>)
 8007ad4:	f021 fd9a 	bl	802960c <atexit>
 8007ad8:	4801      	ldr	r0, [pc, #4]	@ (8007ae0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8007ada:	f021 fa0f 	bl	8028efc <__cxa_guard_release>
 8007ade:	e7dc      	b.n	8007a9a <_Z23getFont_verdana_40_4bppv+0x1e>
 8007ae0:	240309f4 	.word	0x240309f4
 8007ae4:	240309f8 	.word	0x240309f8
 8007ae8:	080328b4 	.word	0x080328b4
 8007aec:	080328c8 	.word	0x080328c8
 8007af0:	08032520 	.word	0x08032520
 8007af4:	08007a79 	.word	0x08007a79

08007af8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_30_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_30_4bpp()
{
    static touchgfx::GeneratedFont verdanab_30_4bpp(glyphs_verdanab_30_4bpp, 56, 36, 30, 0, 0, 4, 1, 0, 1, unicodes_verdanab_30_4bpp, kerning_verdanab_30_4bpp, 63, 0, 0, 0);
 8007af8:	4770      	bx	lr
	...

08007afc <_Z24getFont_verdanab_30_4bppv>:
 8007afc:	4b19      	ldr	r3, [pc, #100]	@ (8007b64 <_Z24getFont_verdanab_30_4bppv+0x68>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f3bf 8f5b 	dmb	ish
 8007b04:	f013 0f01 	tst.w	r3, #1
 8007b08:	d001      	beq.n	8007b0e <_Z24getFont_verdanab_30_4bppv+0x12>
    return verdanab_30_4bpp;
}
 8007b0a:	4817      	ldr	r0, [pc, #92]	@ (8007b68 <_Z24getFont_verdanab_30_4bppv+0x6c>)
 8007b0c:	4770      	bx	lr
{
 8007b0e:	b500      	push	{lr}
 8007b10:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdanab_30_4bpp(glyphs_verdanab_30_4bpp, 56, 36, 30, 0, 0, 4, 1, 0, 1, unicodes_verdanab_30_4bpp, kerning_verdanab_30_4bpp, 63, 0, 0, 0);
 8007b12:	4814      	ldr	r0, [pc, #80]	@ (8007b64 <_Z24getFont_verdanab_30_4bppv+0x68>)
 8007b14:	f021 f9e6 	bl	8028ee4 <__cxa_guard_acquire>
 8007b18:	b918      	cbnz	r0, 8007b22 <_Z24getFont_verdanab_30_4bppv+0x26>
}
 8007b1a:	4813      	ldr	r0, [pc, #76]	@ (8007b68 <_Z24getFont_verdanab_30_4bppv+0x6c>)
 8007b1c:	b00f      	add	sp, #60	@ 0x3c
 8007b1e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdanab_30_4bpp(glyphs_verdanab_30_4bpp, 56, 36, 30, 0, 0, 4, 1, 0, 1, unicodes_verdanab_30_4bpp, kerning_verdanab_30_4bpp, 63, 0, 0, 0);
 8007b22:	2300      	movs	r3, #0
 8007b24:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b2a:	223f      	movs	r2, #63	@ 0x3f
 8007b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8007b6c <_Z24getFont_verdanab_30_4bppv+0x70>)
 8007b30:	9208      	str	r2, [sp, #32]
 8007b32:	4a0f      	ldr	r2, [pc, #60]	@ (8007b70 <_Z24getFont_verdanab_30_4bppv+0x74>)
 8007b34:	9207      	str	r2, [sp, #28]
 8007b36:	2201      	movs	r2, #1
 8007b38:	9206      	str	r2, [sp, #24]
 8007b3a:	9305      	str	r3, [sp, #20]
 8007b3c:	9204      	str	r2, [sp, #16]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	9203      	str	r2, [sp, #12]
 8007b42:	9302      	str	r3, [sp, #8]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	231e      	movs	r3, #30
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	2324      	movs	r3, #36	@ 0x24
 8007b4c:	2238      	movs	r2, #56	@ 0x38
 8007b4e:	4909      	ldr	r1, [pc, #36]	@ (8007b74 <_Z24getFont_verdanab_30_4bppv+0x78>)
 8007b50:	4805      	ldr	r0, [pc, #20]	@ (8007b68 <_Z24getFont_verdanab_30_4bppv+0x6c>)
 8007b52:	f7ff f84b 	bl	8006bec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007b56:	4808      	ldr	r0, [pc, #32]	@ (8007b78 <_Z24getFont_verdanab_30_4bppv+0x7c>)
 8007b58:	f021 fd58 	bl	802960c <atexit>
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <_Z24getFont_verdanab_30_4bppv+0x68>)
 8007b5e:	f021 f9cd 	bl	8028efc <__cxa_guard_release>
 8007b62:	e7da      	b.n	8007b1a <_Z24getFont_verdanab_30_4bppv+0x1e>
 8007b64:	24030a24 	.word	0x24030a24
 8007b68:	24030a28 	.word	0x24030a28
 8007b6c:	080328b8 	.word	0x080328b8
 8007b70:	080328cc 	.word	0x080328cc
 8007b74:	08032530 	.word	0x08032530
 8007b78:	08007af9 	.word	0x08007af9

08007b7c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_45_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_45_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_45_4bpp()
{
    static touchgfx::GeneratedFont verdanab_45_4bpp(glyphs_verdanab_45_4bpp, 5, 46, 45, 0, 0, 4, 1, 0, 0, unicodes_verdanab_45_4bpp, kerning_verdanab_45_4bpp, 63, 0, 0, 0);
 8007b7c:	4770      	bx	lr
	...

08007b80 <_Z24getFont_verdanab_45_4bppv>:
 8007b80:	4b19      	ldr	r3, [pc, #100]	@ (8007be8 <_Z24getFont_verdanab_45_4bppv+0x68>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f3bf 8f5b 	dmb	ish
 8007b88:	f013 0f01 	tst.w	r3, #1
 8007b8c:	d001      	beq.n	8007b92 <_Z24getFont_verdanab_45_4bppv+0x12>
    return verdanab_45_4bpp;
}
 8007b8e:	4817      	ldr	r0, [pc, #92]	@ (8007bec <_Z24getFont_verdanab_45_4bppv+0x6c>)
 8007b90:	4770      	bx	lr
{
 8007b92:	b500      	push	{lr}
 8007b94:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdanab_45_4bpp(glyphs_verdanab_45_4bpp, 5, 46, 45, 0, 0, 4, 1, 0, 0, unicodes_verdanab_45_4bpp, kerning_verdanab_45_4bpp, 63, 0, 0, 0);
 8007b96:	4814      	ldr	r0, [pc, #80]	@ (8007be8 <_Z24getFont_verdanab_45_4bppv+0x68>)
 8007b98:	f021 f9a4 	bl	8028ee4 <__cxa_guard_acquire>
 8007b9c:	b918      	cbnz	r0, 8007ba6 <_Z24getFont_verdanab_45_4bppv+0x26>
}
 8007b9e:	4813      	ldr	r0, [pc, #76]	@ (8007bec <_Z24getFont_verdanab_45_4bppv+0x6c>)
 8007ba0:	b00f      	add	sp, #60	@ 0x3c
 8007ba2:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdanab_45_4bpp(glyphs_verdanab_45_4bpp, 5, 46, 45, 0, 0, 4, 1, 0, 0, unicodes_verdanab_45_4bpp, kerning_verdanab_45_4bpp, 63, 0, 0, 0);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	930c      	str	r3, [sp, #48]	@ 0x30
 8007baa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bac:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bae:	223f      	movs	r2, #63	@ 0x3f
 8007bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf0 <_Z24getFont_verdanab_45_4bppv+0x70>)
 8007bb4:	9208      	str	r2, [sp, #32]
 8007bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf4 <_Z24getFont_verdanab_45_4bppv+0x74>)
 8007bb8:	9207      	str	r2, [sp, #28]
 8007bba:	9306      	str	r3, [sp, #24]
 8007bbc:	9305      	str	r3, [sp, #20]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	9204      	str	r2, [sp, #16]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	9203      	str	r2, [sp, #12]
 8007bc6:	9302      	str	r3, [sp, #8]
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	232d      	movs	r3, #45	@ 0x2d
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	232e      	movs	r3, #46	@ 0x2e
 8007bd0:	2205      	movs	r2, #5
 8007bd2:	4909      	ldr	r1, [pc, #36]	@ (8007bf8 <_Z24getFont_verdanab_45_4bppv+0x78>)
 8007bd4:	4805      	ldr	r0, [pc, #20]	@ (8007bec <_Z24getFont_verdanab_45_4bppv+0x6c>)
 8007bd6:	f7ff f809 	bl	8006bec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007bda:	4808      	ldr	r0, [pc, #32]	@ (8007bfc <_Z24getFont_verdanab_45_4bppv+0x7c>)
 8007bdc:	f021 fd16 	bl	802960c <atexit>
 8007be0:	4801      	ldr	r0, [pc, #4]	@ (8007be8 <_Z24getFont_verdanab_45_4bppv+0x68>)
 8007be2:	f021 f98b 	bl	8028efc <__cxa_guard_release>
 8007be6:	e7da      	b.n	8007b9e <_Z24getFont_verdanab_45_4bppv+0x1e>
 8007be8:	24030a54 	.word	0x24030a54
 8007bec:	24030a58 	.word	0x24030a58
 8007bf0:	080328bc 	.word	0x080328bc
 8007bf4:	080328d0 	.word	0x080328d0
 8007bf8:	08032840 	.word	0x08032840
 8007bfc:	08007b7d 	.word	0x08007b7d

08007c00 <_ZN22Test_lidar_basViewBase23donnees_lidar_bas_avantEv>:
     * Virtual Action Handlers
     */
    virtual void donnees_lidar_bas_avant()
    {
        // Override and implement this function in Test_lidar_bas
    }
 8007c00:	4770      	bx	lr

08007c02 <_ZN22Test_lidar_basViewBase25donnees_lidar_bas_arriereEv>:
    virtual void donnees_lidar_bas_arriere()
    {
        // Override and implement this function in Test_lidar_bas
    }
 8007c02:	4770      	bx	lr

08007c04 <_ZN22Test_lidar_basViewBase41reception_can_lidars_test_lidar_bas_avantEv>:
    virtual void reception_can_lidars_test_lidar_bas_avant()
    {
        // Override and implement this function in Test_lidar_bas
    }
 8007c04:	4770      	bx	lr

08007c06 <_ZN22Test_lidar_basViewBase11setupScreenEv>:
}

void Test_lidar_basViewBase::setupScreen()
{

}
 8007c06:	4770      	bx	lr

08007c08 <_ZN22Test_lidar_basViewBase15handleTickEventEv>:
        application().gotoChoix_testsScreenNoTransition();
    }
}

void Test_lidar_basViewBase::handleTickEvent()
{
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	4604      	mov	r4, r0
    //fonction_donnees_lidar_bas_avant
    //When every N tick call virtual function
    //Call donnees_lidar_bas_avant
    donnees_lidar_bas_avant();
 8007c0c:	6803      	ldr	r3, [r0, #0]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c10:	4798      	blx	r3

    //fonction_donnees_lidar_bas_arriere
    //When every N tick call virtual function
    //Call donnees_lidar_bas_arriere
    donnees_lidar_bas_arriere();
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c16:	4620      	mov	r0, r4
 8007c18:	4798      	blx	r3

    //fonction_reception_can_lidars_test_lidar_bas_avant
    //When every N tick call virtual function
    //Call reception_can_lidars_test_lidar_bas_avant
    reception_can_lidars_test_lidar_bas_avant();
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4798      	blx	r3
}
 8007c22:	bd10      	pop	{r4, pc}

08007c24 <_ZN8touchgfx8CallbackI22Test_lidar_basViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007c24:	4770      	bx	lr

08007c26 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
 * callback when the animation has finished.
 *
 * This mixin can be used on any Drawable.
 */
template <class T>
class MoveAnimator : public T
 8007c26:	4770      	bx	lr

08007c28 <_ZN8touchgfx8CallbackI22Test_lidar_basViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8007c2c:	68c2      	ldr	r2, [r0, #12]
 8007c2e:	6844      	ldr	r4, [r0, #4]
 8007c30:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007c34:	f012 0f01 	tst.w	r2, #1
 8007c38:	d102      	bne.n	8007c40 <_ZN8touchgfx8CallbackI22Test_lidar_basViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	4798      	blx	r3
    }
 8007c3e:	bd10      	pop	{r4, pc}
 8007c40:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8007c44:	f854 200c 	ldr.w	r2, [r4, ip]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	58d3      	ldr	r3, [r2, r3]
 8007c4c:	e7f6      	b.n	8007c3c <_ZN8touchgfx8CallbackI22Test_lidar_basViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x14>

08007c4e <_ZNK8touchgfx8CallbackI22Test_lidar_basViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8007c4e:	6843      	ldr	r3, [r0, #4]
 8007c50:	b13b      	cbz	r3, 8007c62 <_ZNK8touchgfx8CallbackI22Test_lidar_basViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8007c52:	6883      	ldr	r3, [r0, #8]
 8007c54:	b10b      	cbz	r3, 8007c5a <_ZNK8touchgfx8CallbackI22Test_lidar_basViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 8007c56:	2001      	movs	r0, #1
    }
 8007c58:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 8007c5a:	68c0      	ldr	r0, [r0, #12]
 8007c5c:	f000 0001 	and.w	r0, r0, #1
 8007c60:	4770      	bx	lr
 8007c62:	2000      	movs	r0, #0
 8007c64:	4770      	bx	lr

08007c66 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
     *
     * @see getMoveAnimationDelay
     */
    virtual void setMoveAnimationDelay(uint16_t delay)
    {
        moveAnimationDelay = delay;
 8007c66:	f8a0 104a 	strh.w	r1, [r0, #74]	@ 0x4a
    }
 8007c6a:	4770      	bx	lr

08007c6c <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
     * @see setMoveAnimationDelay
     */
    virtual uint16_t getMoveAnimationDelay() const
    {
        return moveAnimationDelay;
    }
 8007c6c:	f8b0 004a 	ldrh.w	r0, [r0, #74]	@ 0x4a
 8007c70:	4770      	bx	lr

08007c72 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
class MoveAnimator : public T
 8007c72:	b510      	push	{r4, lr}
 8007c74:	4604      	mov	r4, r0
 8007c76:	2164      	movs	r1, #100	@ 0x64
 8007c78:	f021 f932 	bl	8028ee0 <_ZdlPvj>
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	bd10      	pop	{r4, pc}

08007c80 <_ZN8touchgfx8CallbackI22Test_lidar_basViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007c80:	b510      	push	{r4, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	2110      	movs	r1, #16
 8007c86:	f021 f92b 	bl	8028ee0 <_ZdlPvj>
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	bd10      	pop	{r4, pc}

08007c8e <_ZNK8touchgfx6Circle14getMinimalRectEv>:
     */
    int getCapPrecision() const;

    virtual bool drawCanvasWidget(const Rect& invalidatedArea) const;

    virtual Rect getMinimalRect() const
 8007c8e:	b510      	push	{r4, lr}
 8007c90:	4604      	mov	r4, r0
    {
        return getMinimalRect(circleArcAngleStart, circleArcAngleEnd);
 8007c92:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8007c94:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 8007c96:	f00f f935 	bl	8016f04 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
    }
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	bd10      	pop	{r4, pc}
	...

08007ca0 <_ZN22Test_lidar_basViewBaseD1Ev>:
Test_lidar_basViewBase::~Test_lidar_basViewBase()
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4b02      	ldr	r3, [pc, #8]	@ (8007cb0 <_ZN22Test_lidar_basViewBaseD1Ev+0x10>)
 8007ca6:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8007ca8:	f011 fc5e 	bl	8019568 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8007cac:	4620      	mov	r0, r4
 8007cae:	bd10      	pop	{r4, pc}
 8007cb0:	0802d2a0 	.word	0x0802d2a0

08007cb4 <_ZN22Test_lidar_basViewBaseD0Ev>:
Test_lidar_basViewBase::~Test_lidar_basViewBase()
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	4604      	mov	r4, r0
}
 8007cb8:	f7ff fff2 	bl	8007ca0 <_ZN22Test_lidar_basViewBaseD1Ev>
 8007cbc:	4902      	ldr	r1, [pc, #8]	@ (8007cc8 <_ZN22Test_lidar_basViewBaseD0Ev+0x14>)
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f021 f90e 	bl	8028ee0 <_ZdlPvj>
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	bd10      	pop	{r4, pc}
 8007cc8:	00024c28 	.word	0x00024c28

08007ccc <_ZN22Test_lidar_basViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
{
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4604      	mov	r4, r0
 8007cd0:	460d      	mov	r5, r1
    if (&src == &bouton_home)
 8007cd2:	f500 738e 	add.w	r3, r0, #284	@ 0x11c
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	d003      	beq.n	8007ce2 <_ZN22Test_lidar_basViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    if (&src == &bouton_retour)
 8007cda:	34e0      	adds	r4, #224	@ 0xe0
 8007cdc:	42a5      	cmp	r5, r4
 8007cde:	d005      	beq.n	8007cec <_ZN22Test_lidar_basViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
}
 8007ce0:	bd38      	pop	{r3, r4, r5, pc}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8007ce2:	f013 f957 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoHomeScreenNoTransition();
 8007ce6:	f7fe f8a5 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
 8007cea:	e7f6      	b.n	8007cda <_ZN22Test_lidar_basViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
 8007cec:	f013 f952 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoChoix_testsScreenNoTransition();
 8007cf0:	f7fe f8e0 	bl	8005eb4 <_ZN23FrontendApplicationBase33gotoChoix_testsScreenNoTransitionEv>
}
 8007cf4:	e7f4      	b.n	8007ce0 <_ZN22Test_lidar_basViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>

08007cf6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
    {
        if (moveAnimationRunning)
 8007cf6:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d059      	beq.n	8007db2 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv+0xbc>
    virtual void handleTickEvent()
 8007cfe:	b570      	push	{r4, r5, r6, lr}
 8007d00:	4604      	mov	r4, r0
        {
            moveAnimationCounter++;
 8007d02:	f8b0 3048 	ldrh.w	r3, [r0, #72]	@ 0x48
 8007d06:	3301      	adds	r3, #1
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f8a0 3048 	strh.w	r3, [r0, #72]	@ 0x48
            if (moveAnimationCounter >= moveAnimationDelay)
 8007d0e:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d333      	bcc.n	8007d7e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv+0x88>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	b29d      	uxth	r5, r3
 8007d1a:	f8b0 2052 	ldrh.w	r2, [r0, #82]	@ 0x52
 8007d1e:	f8b0 304e 	ldrh.w	r3, [r0, #78]	@ 0x4e
 8007d22:	1ad2      	subs	r2, r2, r3
 8007d24:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 8007d26:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 8007d2a:	b212      	sxth	r2, r2
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b0      	blx	r6
 8007d32:	4606      	mov	r6, r0
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8007d34:	f8b4 2054 	ldrh.w	r2, [r4, #84]	@ 0x54
 8007d38:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8007d3c:	1ad2      	subs	r2, r2, r3
 8007d3e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 8007d42:	b212      	sxth	r2, r2
 8007d44:	2100      	movs	r1, #0
 8007d46:	4628      	mov	r0, r5
 8007d48:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
 8007d4a:	47a8      	blx	r5
        moveRelative(x - rect.x, y - rect.y);
 8007d4c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8007d50:	88e3      	ldrh	r3, [r4, #6]
 8007d52:	1ad2      	subs	r2, r2, r3
 8007d54:	4402      	add	r2, r0
 8007d56:	f8b4 104e 	ldrh.w	r1, [r4, #78]	@ 0x4e
 8007d5a:	88a3      	ldrh	r3, [r4, #4]
 8007d5c:	1ac9      	subs	r1, r1, r3
 8007d5e:	4431      	add	r1, r6
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d64:	b212      	sxth	r2, r2
 8007d66:	b209      	sxth	r1, r1
 8007d68:	4620      	mov	r0, r4
 8007d6a:	4798      	blx	r3

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8007d6c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 8007d70:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8007d74:	f8b4 104c 	ldrh.w	r1, [r4, #76]	@ 0x4c
 8007d78:	440b      	add	r3, r1
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d200      	bcs.n	8007d80 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv+0x8a>
    }
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
                {
                    // End of animation
                    moveAnimationRunning = false;
 8007d80:	2300      	movs	r3, #0
 8007d82:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
                    moveAnimationCounter = 0;
 8007d86:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                    Application::getInstance()->unregisterTimerWidget(this);
 8007d8a:	f013 f903 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
    {
        timerWidgets.remove(w);
 8007d8e:	4621      	mov	r1, r4
 8007d90:	3004      	adds	r0, #4
 8007d92:	f013 f924 	bl	801afde <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8007d96:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0f0      	beq.n	8007d7e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv+0x88>
 8007d9c:	6803      	ldr	r3, [r0, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4798      	blx	r3
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d0eb      	beq.n	8007d7e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv+0x88>
                    {
                        moveAnimationEndedCallback->execute(*this);
 8007da6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8007da8:	6803      	ldr	r3, [r0, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4621      	mov	r1, r4
 8007dae:	4798      	blx	r3
    }
 8007db0:	e7e5      	b.n	8007d7e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv+0x88>
 8007db2:	4770      	bx	lr

08007db4 <_ZN22Test_lidar_basViewBaseC1Ev>:
Test_lidar_basViewBase::Test_lidar_basViewBase() :
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	b099      	sub	sp, #100	@ 0x64
 8007dba:	4604      	mov	r4, r0
 8007dbc:	f014 fff6 	bl	801cdac <_ZN8touchgfx6ScreenC1Ev>
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	63e5      	str	r5, [r4, #60]	@ 0x3c
    buttonCallback(this, &Test_lidar_basViewBase::buttonCallbackHandler)
 8007dc4:	4627      	mov	r7, r4
 8007dc6:	4bcd      	ldr	r3, [pc, #820]	@ (80080fc <_ZN22Test_lidar_basViewBaseC1Ev+0x348>)
 8007dc8:	f847 3b40 	str.w	r3, [r7], #64
        : x(0), y(0), width(0), height(0)
 8007dcc:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 8007dd0:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8007dd4:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8007dd8:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8007ddc:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 8007de0:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 8007de4:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 8007de8:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          parent(0),
 8007dec:	6565      	str	r5, [r4, #84]	@ 0x54
          nextSibling(0),
 8007dee:	65a5      	str	r5, [r4, #88]	@ 0x58
          nextDrawChainElement(0),
 8007df0:	65e5      	str	r5, [r4, #92]	@ 0x5c
          cachedAbsX(0),
 8007df2:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
          cachedAbsY(0),
 8007df6:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
          touchable(false),
 8007dfa:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
          visible(true)
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
        : Widget(), alpha(255), color(0)
 8007e04:	49be      	ldr	r1, [pc, #760]	@ (8008100 <_ZN22Test_lidar_basViewBaseC1Ev+0x34c>)
 8007e06:	6421      	str	r1, [r4, #64]	@ 0x40
 8007e08:	23ff      	movs	r3, #255	@ 0xff
 8007e0a:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        : color(col)
 8007e0e:	66a5      	str	r5, [r4, #104]	@ 0x68
 8007e10:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
        : x(0), y(0), width(0), height(0)
 8007e14:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 8007e18:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 8007e1c:	f8a4 5074 	strh.w	r5, [r4, #116]	@ 0x74
 8007e20:	f8a4 5076 	strh.w	r5, [r4, #118]	@ 0x76
 8007e24:	f8a4 5078 	strh.w	r5, [r4, #120]	@ 0x78
 8007e28:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 8007e2c:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
 8007e30:	f8a4 507e 	strh.w	r5, [r4, #126]	@ 0x7e
          parent(0),
 8007e34:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
          nextSibling(0),
 8007e38:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          nextDrawChainElement(0),
 8007e3c:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
          cachedAbsX(0),
 8007e40:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
          cachedAbsY(0),
 8007e44:	f8a4 508e 	strh.w	r5, [r4, #142]	@ 0x8e
          touchable(false),
 8007e48:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
          visible(true)
 8007e4c:	f884 2091 	strb.w	r2, [r4, #145]	@ 0x91
 8007e50:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8007e52:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
        : color(col)
 8007e56:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8007e5a:	f104 0898 	add.w	r8, r4, #152	@ 0x98
        : x(0), y(0), width(0), height(0)
 8007e5e:	f8a4 509c 	strh.w	r5, [r4, #156]	@ 0x9c
 8007e62:	f8a4 509e 	strh.w	r5, [r4, #158]	@ 0x9e
 8007e66:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 8007e6a:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 8007e6e:	f8a4 50a4 	strh.w	r5, [r4, #164]	@ 0xa4
 8007e72:	f8a4 50a6 	strh.w	r5, [r4, #166]	@ 0xa6
 8007e76:	f8a4 50a8 	strh.w	r5, [r4, #168]	@ 0xa8
 8007e7a:	f8a4 50aa 	strh.w	r5, [r4, #170]	@ 0xaa
          parent(0),
 8007e7e:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac
          nextSibling(0),
 8007e82:	f8c4 50b0 	str.w	r5, [r4, #176]	@ 0xb0
          nextDrawChainElement(0),
 8007e86:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
          cachedAbsX(0),
 8007e8a:	f8a4 50b8 	strh.w	r5, [r4, #184]	@ 0xb8
          cachedAbsY(0),
 8007e8e:	f8a4 50ba 	strh.w	r5, [r4, #186]	@ 0xba
          touchable(false),
 8007e92:	f884 50bc 	strb.w	r5, [r4, #188]	@ 0xbc
          visible(true)
 8007e96:	f884 20bd 	strb.w	r2, [r4, #189]	@ 0xbd
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8007e9a:	4a9a      	ldr	r2, [pc, #616]	@ (8008104 <_ZN22Test_lidar_basViewBaseC1Ev+0x350>)
 8007e9c:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8007ea0:	4a99      	ldr	r2, [pc, #612]	@ (8008108 <_ZN22Test_lidar_basViewBaseC1Ev+0x354>)
 8007ea2:	f8c4 20c0 	str.w	r2, [r4, #192]	@ 0xc0
 8007ea6:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8007eaa:	f8a4 b0c4 	strh.w	fp, [r4, #196]	@ 0xc4
        : color(col)
 8007eae:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
 8007eb2:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
 8007eb6:	f884 30ce 	strb.w	r3, [r4, #206]	@ 0xce
 8007eba:	f884 50cf 	strb.w	r5, [r4, #207]	@ 0xcf
 8007ebe:	f884 50d0 	strb.w	r5, [r4, #208]	@ 0xd0
 8007ec2:	f884 50d1 	strb.w	r5, [r4, #209]	@ 0xd1
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8007ec6:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
 8007eca:	f8a4 50d6 	strh.w	r5, [r4, #214]	@ 0xd6
 8007ece:	f8a4 b0d8 	strh.w	fp, [r4, #216]	@ 0xd8
 8007ed2:	f8a4 b0da 	strh.w	fp, [r4, #218]	@ 0xda
              text(0)
 8007ed6:	f8c4 50dc 	str.w	r5, [r4, #220]	@ 0xdc
 8007eda:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 8007ede:	9303      	str	r3, [sp, #12]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f010 fb2d 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8007ee6:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8007eea:	9302      	str	r3, [sp, #8]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f010 fb27 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8007ef2:	f504 76ac 	add.w	r6, r4, #344	@ 0x158
 8007ef6:	f8ad b028 	strh.w	fp, [sp, #40]	@ 0x28
 8007efa:	a90a      	add	r1, sp, #40	@ 0x28
 8007efc:	4630      	mov	r0, r6
 8007efe:	f00f fbab 	bl	8017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8007f02:	f504 79c2 	add.w	r9, r4, #388	@ 0x184
 8007f06:	f8ad b02c 	strh.w	fp, [sp, #44]	@ 0x2c
 8007f0a:	a90b      	add	r1, sp, #44	@ 0x2c
 8007f0c:	4648      	mov	r0, r9
 8007f0e:	f00f fba3 	bl	8017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8007f12:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 8007f16:	9304      	str	r3, [sp, #16]
          moveAnimationEndedCallback(0)
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f00e fe35 	bl	8016b88 <_ZN8touchgfx6CircleC1Ev>
 8007f1e:	4b7b      	ldr	r3, [pc, #492]	@ (800810c <_ZN22Test_lidar_basViewBaseC1Ev+0x358>)
 8007f20:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
          moveAnimationRunning(false),
 8007f24:	f884 51f6 	strb.w	r5, [r4, #502]	@ 0x1f6
          moveAnimationCounter(0),
 8007f28:	f8a4 51f8 	strh.w	r5, [r4, #504]	@ 0x1f8
          moveAnimationDelay(0),
 8007f2c:	f8a4 51fa 	strh.w	r5, [r4, #506]	@ 0x1fa
          moveAnimationDuration(0),
 8007f30:	f8a4 51fc 	strh.w	r5, [r4, #508]	@ 0x1fc
          moveAnimationStartX(0),
 8007f34:	f8a4 51fe 	strh.w	r5, [r4, #510]	@ 0x1fe
          moveAnimationStartY(0),
 8007f38:	f8a4 5200 	strh.w	r5, [r4, #512]	@ 0x200
          moveAnimationEndX(0),
 8007f3c:	f8a4 5202 	strh.w	r5, [r4, #514]	@ 0x202
          moveAnimationEndY(0),
 8007f40:	f8a4 5204 	strh.w	r5, [r4, #516]	@ 0x204
          moveAnimationXEquation(),
 8007f44:	f8c4 5208 	str.w	r5, [r4, #520]	@ 0x208
          moveAnimationYEquation(),
 8007f48:	f8c4 520c 	str.w	r5, [r4, #524]	@ 0x20c
          moveAnimationEndedCallback(0)
 8007f4c:	f8c4 5210 	str.w	r5, [r4, #528]	@ 0x210
 8007f50:	f504 7305 	add.w	r3, r4, #532	@ 0x214
 8007f54:	9305      	str	r3, [sp, #20]
 8007f56:	f8a4 5218 	strh.w	r5, [r4, #536]	@ 0x218
        : AbstractPainter()
 8007f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8008110 <_ZN22Test_lidar_basViewBaseC1Ev+0x35c>)
 8007f5c:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8007f60:	4b6c      	ldr	r3, [pc, #432]	@ (8008114 <_ZN22Test_lidar_basViewBaseC1Ev+0x360>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007f68:	b10a      	cbz	r2, 8007f6e <_ZN22Test_lidar_basViewBaseC1Ev+0x1ba>
 8007f6a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007f6c:	b900      	cbnz	r0, 8007f70 <_ZN22Test_lidar_basViewBaseC1Ev+0x1bc>
        return instance->lcdRef;
 8007f6e:	6898      	ldr	r0, [r3, #8]
        bool compat = HAL::lcd().framebufferFormat() == format;
 8007f70:	6803      	ldr	r3, [r0, #0]
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	4798      	blx	r3
 8007f76:	2801      	cmp	r0, #1
 8007f78:	bf14      	ite	ne
 8007f7a:	2500      	movne	r5, #0
 8007f7c:	2501      	moveq	r5, #1
        return auxiliaryLCD;
 8007f7e:	4b65      	ldr	r3, [pc, #404]	@ (8008114 <_ZN22Test_lidar_basViewBaseC1Ev+0x360>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8007f84:	b130      	cbz	r0, 8007f94 <_ZN22Test_lidar_basViewBaseC1Ev+0x1e0>
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8007f86:	6803      	ldr	r3, [r0, #0]
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8a:	4798      	blx	r3
 8007f8c:	2801      	cmp	r0, #1
 8007f8e:	bf08      	it	eq
 8007f90:	f045 0501 	orreq.w	r5, r5, #1
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8007f94:	2d00      	cmp	r5, #0
 8007f96:	f000 8191 	beq.w	80082bc <_ZN22Test_lidar_basViewBaseC1Ev+0x508>
 8007f9a:	2500      	movs	r5, #0
 8007f9c:	f8c4 5220 	str.w	r5, [r4, #544]	@ 0x220
 8007fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8008118 <_ZN22Test_lidar_basViewBaseC1Ev+0x364>)
 8007fa2:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
 8007fa6:	3324      	adds	r3, #36	@ 0x24
 8007fa8:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
        : pobject(pObject), pmemfun(pmemfun_1)
 8007fac:	f504 3310 	add.w	r3, r4, #147456	@ 0x24000
 8007fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800811c <_ZN22Test_lidar_basViewBaseC1Ev+0x368>)
 8007fb2:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18
 8007fb6:	f8c3 4c1c 	str.w	r4, [r3, #3100]	@ 0xc1c
 8007fba:	4a59      	ldr	r2, [pc, #356]	@ (8008120 <_ZN22Test_lidar_basViewBaseC1Ev+0x36c>)
 8007fbc:	f8c3 2c20 	str.w	r2, [r3, #3104]	@ 0xc20
 8007fc0:	f8c3 5c24 	str.w	r5, [r3, #3108]	@ 0xc24
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8007fc4:	4957      	ldr	r1, [pc, #348]	@ (8008124 <_ZN22Test_lidar_basViewBaseC1Ev+0x370>)
 8007fc6:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8007fca:	f011 fac3 	bl	8019554 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        setX(x);
 8007fce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	4798      	blx	r3
        setY(y);
 8007fd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4638      	mov	r0, r7
 8007fe0:	4798      	blx	r3
        setWidth(width);
 8007fe2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe6:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8007fea:	4638      	mov	r0, r7
 8007fec:	4798      	blx	r3
        setHeight(height);
 8007fee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff2:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	4798      	blx	r3
        color = newColor;
 8007ffa:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8007ffe:	66a3      	str	r3, [r4, #104]	@ 0x68
 8008000:	f104 0b04 	add.w	fp, r4, #4
 8008004:	4639      	mov	r1, r7
 8008006:	4658      	mov	r0, fp
 8008008:	f00c f8d4 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800800c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800800e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008010:	4629      	mov	r1, r5
 8008012:	4650      	mov	r0, sl
 8008014:	4798      	blx	r3
        setY(y);
 8008016:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800801a:	4629      	mov	r1, r5
 800801c:	4650      	mov	r0, sl
 800801e:	4798      	blx	r3
        setWidth(width);
 8008020:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008024:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8008028:	4650      	mov	r0, sl
 800802a:	4798      	blx	r3
        setHeight(height);
 800802c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800802e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008030:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8008034:	4650      	mov	r0, sl
 8008036:	4798      	blx	r3
 8008038:	4b3b      	ldr	r3, [pc, #236]	@ (8008128 <_ZN22Test_lidar_basViewBaseC1Ev+0x374>)
 800803a:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800803e:	4651      	mov	r1, sl
 8008040:	4658      	mov	r0, fp
 8008042:	f00c f8b7 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008046:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800804a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8008050:	4640      	mov	r0, r8
 8008052:	4798      	blx	r3
        setY(y);
 8008054:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805a:	2106      	movs	r1, #6
 800805c:	4640      	mov	r0, r8
 800805e:	4798      	blx	r3
        color = newColor;
 8008060:	f04f 3aff 	mov.w	sl, #4294967295
 8008064:	f8c4 a0c8 	str.w	sl, [r4, #200]	@ 0xc8
        linespace = space;
 8008068:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
        boundingArea = calculateBoundingArea();
 800806c:	af06      	add	r7, sp, #24
 800806e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008076:	4641      	mov	r1, r8
 8008078:	4638      	mov	r0, r7
 800807a:	4798      	blx	r3
 800807c:	f108 033c 	add.w	r3, r8, #60	@ 0x3c
 8008080:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8008084:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008088:	4b1f      	ldr	r3, [pc, #124]	@ (8008108 <_ZN22Test_lidar_basViewBaseC1Ev+0x354>)
 800808a:	930c      	str	r3, [sp, #48]	@ 0x30
 800808c:	f04f 030f 	mov.w	r3, #15
 8008090:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    texte_menu_tests_lidar_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WWBO));
 8008094:	a90c      	add	r1, sp, #48	@ 0x30
 8008096:	4640      	mov	r0, r8
 8008098:	f010 f88a 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800809c:	4641      	mov	r1, r8
 800809e:	4658      	mov	r0, fp
 80080a0:	f00c f888 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80080a4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80080a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080aa:	4629      	mov	r1, r5
 80080ac:	9f03      	ldr	r7, [sp, #12]
 80080ae:	4638      	mov	r0, r7
 80080b0:	4798      	blx	r3
        setY(y);
 80080b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80080b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b8:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80080bc:	4638      	mov	r0, r7
 80080be:	4798      	blx	r3
 80080c0:	f04f 0202 	mov.w	r2, #2
 80080c4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80080c8:	f04f 0103 	mov.w	r1, #3
 80080cc:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c
 80080d0:	230c      	movs	r3, #12
 80080d2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80080d6:	f04f 000a 	mov.w	r0, #10
 80080da:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
    bouton_retour.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REPLY_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 80080de:	ab11      	add	r3, sp, #68	@ 0x44
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	ab10      	add	r3, sp, #64	@ 0x40
 80080e4:	aa0f      	add	r2, sp, #60	@ 0x3c
 80080e6:	a90e      	add	r1, sp, #56	@ 0x38
 80080e8:	9703      	str	r7, [sp, #12]
 80080ea:	4638      	mov	r0, r7
 80080ec:	f010 f993 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 80080f0:	2705      	movs	r7, #5
 80080f2:	f8a4 7118 	strh.w	r7, [r4, #280]	@ 0x118
        iconY = y;
 80080f6:	f8a4 711a 	strh.w	r7, [r4, #282]	@ 0x11a
 80080fa:	e017      	b.n	800812c <_ZN22Test_lidar_basViewBaseC1Ev+0x378>
 80080fc:	0802d2a0 	.word	0x0802d2a0
 8008100:	0802e1ec 	.word	0x0802e1ec
 8008104:	0802e15c 	.word	0x0802e15c
 8008108:	0802c65c 	.word	0x0802c65c
 800810c:	0802d208 	.word	0x0802d208
 8008110:	0802c2b8 	.word	0x0802c2b8
 8008114:	240621b8 	.word	0x240621b8
 8008118:	0802dee8 	.word	0x0802dee8
 800811c:	0802d288 	.word	0x0802d288
 8008120:	08007ccd 	.word	0x08007ccd
 8008124:	000249f0 	.word	0x000249f0
 8008128:	ff63003b 	.word	0xff63003b
    bouton_retour.setAction(buttonCallback);
 800812c:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 80082d4 <_ZN22Test_lidar_basViewBaseC1Ev+0x520>
 8008130:	44a0      	add	r8, r4
 8008132:	f8c4 8108 	str.w	r8, [r4, #264]	@ 0x108
 8008136:	9903      	ldr	r1, [sp, #12]
 8008138:	4658      	mov	r0, fp
 800813a:	f00c f83b 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800813e:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8008142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008144:	4629      	mov	r1, r5
 8008146:	9802      	ldr	r0, [sp, #8]
 8008148:	4798      	blx	r3
        setY(y);
 800814a:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 800814e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008150:	4629      	mov	r1, r5
 8008152:	9802      	ldr	r0, [sp, #8]
 8008154:	4798      	blx	r3
 8008156:	f04f 0202 	mov.w	r2, #2
 800815a:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 800815e:	f04f 0103 	mov.w	r1, #3
 8008162:	f8ad 104c 	strh.w	r1, [sp, #76]	@ 0x4c
 8008166:	230b      	movs	r3, #11
 8008168:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
 800816c:	f04f 020a 	mov.w	r2, #10
 8008170:	f8ad 2054 	strh.w	r2, [sp, #84]	@ 0x54
    bouton_home.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_HOME_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8008174:	ab15      	add	r3, sp, #84	@ 0x54
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	ab14      	add	r3, sp, #80	@ 0x50
 800817a:	aa13      	add	r2, sp, #76	@ 0x4c
 800817c:	a912      	add	r1, sp, #72	@ 0x48
 800817e:	9802      	ldr	r0, [sp, #8]
 8008180:	f010 f949 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8008184:	f8a4 7154 	strh.w	r7, [r4, #340]	@ 0x154
        iconY = y;
 8008188:	f8a4 7156 	strh.w	r7, [r4, #342]	@ 0x156
 800818c:	f8c4 8144 	str.w	r8, [r4, #324]	@ 0x144
 8008190:	9902      	ldr	r1, [sp, #8]
 8008192:	4658      	mov	r0, fp
 8008194:	f00c f80e 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008198:	2313      	movs	r3, #19
 800819a:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    repere_polaire.setBitmap(touchgfx::Bitmap(BITMAP_TABLE_ID));
 800819e:	a916      	add	r1, sp, #88	@ 0x58
 80081a0:	4630      	mov	r0, r6
 80081a2:	f010 f9f4 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80081a6:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 80081aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ac:	2195      	movs	r1, #149	@ 0x95
 80081ae:	4630      	mov	r0, r6
 80081b0:	4798      	blx	r3
        setY(y);
 80081b2:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 80081b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b8:	4629      	mov	r1, r5
 80081ba:	4630      	mov	r0, r6
 80081bc:	4798      	blx	r3
        setWidth(width);
 80081be:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 80081c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c4:	f240 11f7 	movw	r1, #503	@ 0x1f7
 80081c8:	4630      	mov	r0, r6
 80081ca:	4798      	blx	r3
        setHeight(height);
 80081cc:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 80081d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d2:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80081d6:	4630      	mov	r0, r6
 80081d8:	4798      	blx	r3
    repere_polaire.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80081da:	4629      	mov	r1, r5
 80081dc:	4630      	mov	r0, r6
 80081de:	f00f f9f6 	bl	80175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80081e2:	4631      	mov	r1, r6
 80081e4:	4658      	mov	r0, fp
 80081e6:	f00b ffe5 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80081ea:	f04f 030f 	mov.w	r3, #15
 80081ee:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    image_lidar_bas.setBitmap(touchgfx::Bitmap(BITMAP_LIDAR1_ID));
 80081f2:	a917      	add	r1, sp, #92	@ 0x5c
 80081f4:	4648      	mov	r0, r9
 80081f6:	f010 f9ca 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80081fa:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 80081fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008200:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 8008204:	4648      	mov	r0, r9
 8008206:	4798      	blx	r3
        setY(y);
 8008208:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 800820c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800820e:	2146      	movs	r1, #70	@ 0x46
 8008210:	4648      	mov	r0, r9
 8008212:	4798      	blx	r3
        setWidth(width);
 8008214:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 8008218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821a:	2157      	movs	r1, #87	@ 0x57
 800821c:	4648      	mov	r0, r9
 800821e:	4798      	blx	r3
        setHeight(height);
 8008220:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 8008224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008226:	2150      	movs	r1, #80	@ 0x50
 8008228:	4648      	mov	r0, r9
 800822a:	4798      	blx	r3
    image_lidar_bas.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800822c:	4629      	mov	r1, r5
 800822e:	4648      	mov	r0, r9
 8008230:	f00f f9cd 	bl	80175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008234:	4649      	mov	r1, r9
 8008236:	4658      	mov	r0, fp
 8008238:	f00b ffbc 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800823c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 8008240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008242:	214e      	movs	r1, #78	@ 0x4e
 8008244:	9e04      	ldr	r6, [sp, #16]
 8008246:	4630      	mov	r0, r6
 8008248:	4798      	blx	r3
        setY(y);
 800824a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800824e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008250:	21c0      	movs	r1, #192	@ 0xc0
 8008252:	4630      	mov	r0, r6
 8008254:	4798      	blx	r3
        setWidth(width);
 8008256:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 800825a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825c:	2126      	movs	r1, #38	@ 0x26
 800825e:	4630      	mov	r0, r6
 8008260:	4798      	blx	r3
        setHeight(height);
 8008262:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 8008266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008268:	2128      	movs	r1, #40	@ 0x28
 800826a:	4630      	mov	r0, r6
 800826c:	4798      	blx	r3
        this->circleCenterX = CWRUtil::toQ5(x);
 800826e:	f246 23c0 	movw	r3, #25280	@ 0x62c0
 8008272:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
        this->circleCenterY = CWRUtil::toQ5(y);
 8008276:	f44f 536b 	mov.w	r3, #15040	@ 0x3ac0
 800827a:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
        this->circleRadius = CWRUtil::toQ5(r);
 800827e:	23a0      	movs	r3, #160	@ 0xa0
 8008280:	f8c4 31e4 	str.w	r3, [r4, #484]	@ 0x1e4
        this->circleLineWidth = CWRUtil::toQ5(width);
 8008284:	f8c4 51f0 	str.w	r5, [r4, #496]	@ 0x1f0
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 8008288:	f8c4 51e8 	str.w	r5, [r4, #488]	@ 0x1e8
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 800828c:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8008290:	f8c4 31ec 	str.w	r3, [r4, #492]	@ 0x1ec
 8008294:	f8c4 a220 	str.w	sl, [r4, #544]	@ 0x220
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8008298:	23ff      	movs	r3, #255	@ 0xff
 800829a:	f884 a224 	strb.w	sl, [r4, #548]	@ 0x224
        painterGreen = Color::getGreen(color);
 800829e:	f884 3225 	strb.w	r3, [r4, #549]	@ 0x225
        painterBlue = Color::getBlue(color);
 80082a2:	f884 3226 	strb.w	r3, [r4, #550]	@ 0x226
        canvasPainter = &painter;
 80082a6:	9b05      	ldr	r3, [sp, #20]
 80082a8:	f8c4 31d8 	str.w	r3, [r4, #472]	@ 0x1d8
 80082ac:	4631      	mov	r1, r6
 80082ae:	4658      	mov	r0, fp
 80082b0:	f00b ff80 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80082b4:	4620      	mov	r0, r4
 80082b6:	b019      	add	sp, #100	@ 0x64
 80082b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082bc:	4b02      	ldr	r3, [pc, #8]	@ (80082c8 <_ZN22Test_lidar_basViewBaseC1Ev+0x514>)
 80082be:	4a03      	ldr	r2, [pc, #12]	@ (80082cc <_ZN22Test_lidar_basViewBaseC1Ev+0x518>)
 80082c0:	2127      	movs	r1, #39	@ 0x27
 80082c2:	4803      	ldr	r0, [pc, #12]	@ (80082d0 <_ZN22Test_lidar_basViewBaseC1Ev+0x51c>)
 80082c4:	f021 f984 	bl	80295d0 <__assert_func>
 80082c8:	0802c1a4 	.word	0x0802c1a4
 80082cc:	0802c204 	.word	0x0802c204
 80082d0:	0802c240 	.word	0x0802c240
 80082d4:	00024c18 	.word	0x00024c18

080082d8 <_ZN23Test_lidar_hautViewBase18donnees_lidar_hautEv>:
     * Virtual Action Handlers
     */
    virtual void donnees_lidar_haut()
    {
        // Override and implement this function in Test_lidar_haut
    }
 80082d8:	4770      	bx	lr

080082da <_ZN23Test_lidar_hautViewBase10lidar_loopEv>:
    virtual void lidar_loop()
    {
        // Override and implement this function in Test_lidar_haut
    }
 80082da:	4770      	bx	lr

080082dc <_ZN23Test_lidar_hautViewBaseD1Ev>:
}

Test_lidar_hautViewBase::~Test_lidar_hautViewBase()
{

}
 80082dc:	4770      	bx	lr

080082de <_ZN23Test_lidar_hautViewBase11setupScreenEv>:

void Test_lidar_hautViewBase::setupScreen()
{
 80082de:	b508      	push	{r3, lr}
    transitionBegins();
 80082e0:	6803      	ldr	r3, [r0, #0]
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	4798      	blx	r3
}
 80082e6:	bd08      	pop	{r3, pc}

080082e8 <_ZN23Test_lidar_hautViewBase16transitionBeginsEv>:
        application().gotoChoix_testsScreenNoTransition();
    }
}

void Test_lidar_hautViewBase::transitionBegins()
{
 80082e8:	b508      	push	{r3, lr}
    //fonction_donnees_lidar_haut
    //When screen transition begins call virtual function
    //Call donnees_lidar_haut
    donnees_lidar_haut();
 80082ea:	6803      	ldr	r3, [r0, #0]
 80082ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ee:	4798      	blx	r3
}
 80082f0:	bd08      	pop	{r3, pc}

080082f2 <_ZN23Test_lidar_hautViewBase15handleTickEventEv>:

void Test_lidar_hautViewBase::handleTickEvent()
{
 80082f2:	b508      	push	{r3, lr}
    //fonction_lidar_loop
    //When every N tick call virtual function
    //Call lidar_loop
    lidar_loop();
 80082f4:	6803      	ldr	r3, [r0, #0]
 80082f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f8:	4798      	blx	r3
}
 80082fa:	bd08      	pop	{r3, pc}

080082fc <_ZN8touchgfx8CallbackI23Test_lidar_hautViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80082fc:	4770      	bx	lr

080082fe <_ZN8touchgfx8CallbackI23Test_lidar_hautViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80082fe:	b510      	push	{r4, lr}
 8008300:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8008302:	68c2      	ldr	r2, [r0, #12]
 8008304:	6844      	ldr	r4, [r0, #4]
 8008306:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800830a:	f012 0f01 	tst.w	r2, #1
 800830e:	d102      	bne.n	8008316 <_ZN8touchgfx8CallbackI23Test_lidar_hautViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	4798      	blx	r3
    }
 8008314:	bd10      	pop	{r4, pc}
 8008316:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 800831a:	f854 200c 	ldr.w	r2, [r4, ip]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	58d3      	ldr	r3, [r2, r3]
 8008322:	e7f6      	b.n	8008312 <_ZN8touchgfx8CallbackI23Test_lidar_hautViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x14>

08008324 <_ZNK8touchgfx8CallbackI23Test_lidar_hautViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8008324:	6843      	ldr	r3, [r0, #4]
 8008326:	b13b      	cbz	r3, 8008338 <_ZNK8touchgfx8CallbackI23Test_lidar_hautViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8008328:	6883      	ldr	r3, [r0, #8]
 800832a:	b10b      	cbz	r3, 8008330 <_ZNK8touchgfx8CallbackI23Test_lidar_hautViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 800832c:	2001      	movs	r0, #1
    }
 800832e:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 8008330:	68c0      	ldr	r0, [r0, #12]
 8008332:	f000 0001 	and.w	r0, r0, #1
 8008336:	4770      	bx	lr
 8008338:	2000      	movs	r0, #0
 800833a:	4770      	bx	lr

0800833c <_ZN8touchgfx8CallbackI23Test_lidar_hautViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800833c:	b510      	push	{r4, lr}
 800833e:	4604      	mov	r4, r0
 8008340:	2110      	movs	r1, #16
 8008342:	f020 fdcd 	bl	8028ee0 <_ZdlPvj>
 8008346:	4620      	mov	r0, r4
 8008348:	bd10      	pop	{r4, pc}

0800834a <_ZN23Test_lidar_hautViewBaseD0Ev>:
Test_lidar_hautViewBase::~Test_lidar_hautViewBase()
 800834a:	b510      	push	{r4, lr}
 800834c:	4604      	mov	r4, r0
}
 800834e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8008352:	f020 fdc5 	bl	8028ee0 <_ZdlPvj>
 8008356:	4620      	mov	r0, r4
 8008358:	bd10      	pop	{r4, pc}

0800835a <_ZN23Test_lidar_hautViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
{
 800835a:	b538      	push	{r3, r4, r5, lr}
 800835c:	4604      	mov	r4, r0
 800835e:	460d      	mov	r5, r1
    if (&src == &bouton_home)
 8008360:	f500 73a4 	add.w	r3, r0, #328	@ 0x148
 8008364:	4299      	cmp	r1, r3
 8008366:	d004      	beq.n	8008372 <_ZN23Test_lidar_hautViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    if (&src == &bouton_retour)
 8008368:	f504 7486 	add.w	r4, r4, #268	@ 0x10c
 800836c:	42a5      	cmp	r5, r4
 800836e:	d005      	beq.n	800837c <_ZN23Test_lidar_hautViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
}
 8008370:	bd38      	pop	{r3, r4, r5, pc}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8008372:	f012 fe0f 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoHomeScreenNoTransition();
 8008376:	f7fd fd5d 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
 800837a:	e7f5      	b.n	8008368 <_ZN23Test_lidar_hautViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
 800837c:	f012 fe0a 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoChoix_testsScreenNoTransition();
 8008380:	f7fd fd98 	bl	8005eb4 <_ZN23FrontendApplicationBase33gotoChoix_testsScreenNoTransitionEv>
}
 8008384:	e7f4      	b.n	8008370 <_ZN23Test_lidar_hautViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
	...

08008388 <_ZN23Test_lidar_hautViewBaseC1Ev>:
Test_lidar_hautViewBase::Test_lidar_hautViewBase() :
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	b097      	sub	sp, #92	@ 0x5c
 800838e:	4604      	mov	r4, r0
 8008390:	f014 fd0c 	bl	801cdac <_ZN8touchgfx6ScreenC1Ev>
 8008394:	2500      	movs	r5, #0
 8008396:	63e5      	str	r5, [r4, #60]	@ 0x3c
    buttonCallback(this, &Test_lidar_hautViewBase::buttonCallbackHandler)
 8008398:	46a1      	mov	r9, r4
 800839a:	4bd5      	ldr	r3, [pc, #852]	@ (80086f0 <_ZN23Test_lidar_hautViewBaseC1Ev+0x368>)
 800839c:	f849 3b40 	str.w	r3, [r9], #64
        : x(0), y(0), width(0), height(0)
 80083a0:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 80083a4:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 80083a8:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 80083ac:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 80083b0:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 80083b4:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 80083b8:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 80083bc:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          parent(0),
 80083c0:	6565      	str	r5, [r4, #84]	@ 0x54
          nextSibling(0),
 80083c2:	65a5      	str	r5, [r4, #88]	@ 0x58
          nextDrawChainElement(0),
 80083c4:	65e5      	str	r5, [r4, #92]	@ 0x5c
          cachedAbsX(0),
 80083c6:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
          cachedAbsY(0),
 80083ca:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
          touchable(false),
 80083ce:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
          visible(true)
 80083d2:	2601      	movs	r6, #1
 80083d4:	f884 6065 	strb.w	r6, [r4, #101]	@ 0x65
        : Widget(), alpha(255), color(0)
 80083d8:	4ac6      	ldr	r2, [pc, #792]	@ (80086f4 <_ZN23Test_lidar_hautViewBaseC1Ev+0x36c>)
 80083da:	6422      	str	r2, [r4, #64]	@ 0x40
 80083dc:	23ff      	movs	r3, #255	@ 0xff
 80083de:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        : color(col)
 80083e2:	66a5      	str	r5, [r4, #104]	@ 0x68
 80083e4:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
        : x(0), y(0), width(0), height(0)
 80083e8:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 80083ec:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 80083f0:	f8a4 5074 	strh.w	r5, [r4, #116]	@ 0x74
 80083f4:	f8a4 5076 	strh.w	r5, [r4, #118]	@ 0x76
 80083f8:	f8a4 5078 	strh.w	r5, [r4, #120]	@ 0x78
 80083fc:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 8008400:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
 8008404:	f8a4 507e 	strh.w	r5, [r4, #126]	@ 0x7e
          parent(0),
 8008408:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
          nextSibling(0),
 800840c:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          nextDrawChainElement(0),
 8008410:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
          cachedAbsX(0),
 8008414:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
          cachedAbsY(0),
 8008418:	f8a4 508e 	strh.w	r5, [r4, #142]	@ 0x8e
          touchable(false),
 800841c:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
          visible(true)
 8008420:	f884 6091 	strb.w	r6, [r4, #145]	@ 0x91
 8008424:	66e2      	str	r2, [r4, #108]	@ 0x6c
 8008426:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
        : color(col)
 800842a:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 800842e:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 8008432:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8008436:	f8ad 7020 	strh.w	r7, [sp, #32]
 800843a:	a908      	add	r1, sp, #32
 800843c:	4640      	mov	r0, r8
 800843e:	f00f f90b 	bl	8017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8008442:	f104 0ac4 	add.w	sl, r4, #196	@ 0xc4
        : x(0), y(0), width(0), height(0)
 8008446:	f8a4 50c8 	strh.w	r5, [r4, #200]	@ 0xc8
 800844a:	f8a4 50ca 	strh.w	r5, [r4, #202]	@ 0xca
 800844e:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
 8008452:	f8a4 50ce 	strh.w	r5, [r4, #206]	@ 0xce
 8008456:	f8a4 50d0 	strh.w	r5, [r4, #208]	@ 0xd0
 800845a:	f8a4 50d2 	strh.w	r5, [r4, #210]	@ 0xd2
 800845e:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
 8008462:	f8a4 50d6 	strh.w	r5, [r4, #214]	@ 0xd6
          parent(0),
 8008466:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
          nextSibling(0),
 800846a:	f8c4 50dc 	str.w	r5, [r4, #220]	@ 0xdc
          nextDrawChainElement(0),
 800846e:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
          cachedAbsX(0),
 8008472:	f8a4 50e4 	strh.w	r5, [r4, #228]	@ 0xe4
          cachedAbsY(0),
 8008476:	f8a4 50e6 	strh.w	r5, [r4, #230]	@ 0xe6
          touchable(false),
 800847a:	f884 50e8 	strb.w	r5, [r4, #232]	@ 0xe8
          visible(true)
 800847e:	f884 60e9 	strb.w	r6, [r4, #233]	@ 0xe9
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8008482:	4b9d      	ldr	r3, [pc, #628]	@ (80086f8 <_ZN23Test_lidar_hautViewBaseC1Ev+0x370>)
 8008484:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8008488:	4b9c      	ldr	r3, [pc, #624]	@ (80086fc <_ZN23Test_lidar_hautViewBaseC1Ev+0x374>)
 800848a:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
 800848e:	f8a4 70f0 	strh.w	r7, [r4, #240]	@ 0xf0
        : color(col)
 8008492:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 8008496:	f8a4 50f8 	strh.w	r5, [r4, #248]	@ 0xf8
 800849a:	f884 70fa 	strb.w	r7, [r4, #250]	@ 0xfa
 800849e:	f884 50fb 	strb.w	r5, [r4, #251]	@ 0xfb
 80084a2:	f884 50fc 	strb.w	r5, [r4, #252]	@ 0xfc
 80084a6:	f884 50fd 	strb.w	r5, [r4, #253]	@ 0xfd
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80084aa:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
 80084ae:	f8a4 5102 	strh.w	r5, [r4, #258]	@ 0x102
 80084b2:	f8a4 7104 	strh.w	r7, [r4, #260]	@ 0x104
 80084b6:	f8a4 7106 	strh.w	r7, [r4, #262]	@ 0x106
              text(0)
 80084ba:	f8c4 5108 	str.w	r5, [r4, #264]	@ 0x108
 80084be:	f504 7286 	add.w	r2, r4, #268	@ 0x10c
 80084c2:	9202      	str	r2, [sp, #8]
 80084c4:	4610      	mov	r0, r2
 80084c6:	f010 f83b 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80084ca:	f504 71a4 	add.w	r1, r4, #328	@ 0x148
 80084ce:	9103      	str	r1, [sp, #12]
 80084d0:	4608      	mov	r0, r1
 80084d2:	f010 f835 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80084d6:	f504 76c2 	add.w	r6, r4, #388	@ 0x184
 80084da:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 80084de:	a909      	add	r1, sp, #36	@ 0x24
 80084e0:	4630      	mov	r0, r6
 80084e2:	f00f f8b9 	bl	8017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 80084e6:	4b86      	ldr	r3, [pc, #536]	@ (8008700 <_ZN23Test_lidar_hautViewBaseC1Ev+0x378>)
 80084e8:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
 80084ec:	f8c4 41b4 	str.w	r4, [r4, #436]	@ 0x1b4
 80084f0:	4b84      	ldr	r3, [pc, #528]	@ (8008704 <_ZN23Test_lidar_hautViewBaseC1Ev+0x37c>)
 80084f2:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
 80084f6:	f8c4 51bc 	str.w	r5, [r4, #444]	@ 0x1bc
        setX(x);
 80084fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fe:	4629      	mov	r1, r5
 8008500:	4648      	mov	r0, r9
 8008502:	4798      	blx	r3
        setY(y);
 8008504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008508:	4629      	mov	r1, r5
 800850a:	4648      	mov	r0, r9
 800850c:	4798      	blx	r3
        setWidth(width);
 800850e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008512:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8008516:	4648      	mov	r0, r9
 8008518:	4798      	blx	r3
        setHeight(height);
 800851a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800851c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800851e:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8008522:	4648      	mov	r0, r9
 8008524:	4798      	blx	r3
        color = newColor;
 8008526:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800852a:	66a3      	str	r3, [r4, #104]	@ 0x68
 800852c:	1d27      	adds	r7, r4, #4
 800852e:	4649      	mov	r1, r9
 8008530:	4638      	mov	r0, r7
 8008532:	f00b fe3f 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008536:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800853a:	4629      	mov	r1, r5
 800853c:	4658      	mov	r0, fp
 800853e:	4798      	blx	r3
        setY(y);
 8008540:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008544:	4629      	mov	r1, r5
 8008546:	4658      	mov	r0, fp
 8008548:	4798      	blx	r3
        setWidth(width);
 800854a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8008552:	4658      	mov	r0, fp
 8008554:	4798      	blx	r3
        setHeight(height);
 8008556:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800855e:	4658      	mov	r0, fp
 8008560:	4798      	blx	r3
 8008562:	4b69      	ldr	r3, [pc, #420]	@ (8008708 <_ZN23Test_lidar_hautViewBaseC1Ev+0x380>)
 8008564:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8008568:	4659      	mov	r1, fp
 800856a:	4638      	mov	r0, r7
 800856c:	f00b fe22 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008570:	2313      	movs	r3, #19
 8008572:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
    repere_polaire.setBitmap(touchgfx::Bitmap(BITMAP_TABLE_ID));
 8008576:	a90a      	add	r1, sp, #40	@ 0x28
 8008578:	4640      	mov	r0, r8
 800857a:	f010 f808 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 800857e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008584:	2195      	movs	r1, #149	@ 0x95
 8008586:	4640      	mov	r0, r8
 8008588:	4798      	blx	r3
        setY(y);
 800858a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800858e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008590:	4629      	mov	r1, r5
 8008592:	4640      	mov	r0, r8
 8008594:	4798      	blx	r3
        setWidth(width);
 8008596:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800859a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859c:	f240 11f7 	movw	r1, #503	@ 0x1f7
 80085a0:	4640      	mov	r0, r8
 80085a2:	4798      	blx	r3
        setHeight(height);
 80085a4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80085a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085aa:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80085ae:	4640      	mov	r0, r8
 80085b0:	4798      	blx	r3
    repere_polaire.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80085b2:	4629      	mov	r1, r5
 80085b4:	4640      	mov	r0, r8
 80085b6:	f00f f80a 	bl	80175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80085ba:	4641      	mov	r1, r8
 80085bc:	4638      	mov	r0, r7
 80085be:	f00b fdf9 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 80085c2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80085c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80085cc:	4650      	mov	r0, sl
 80085ce:	4798      	blx	r3
        setY(y);
 80085d0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80085d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d6:	2106      	movs	r1, #6
 80085d8:	4650      	mov	r0, sl
 80085da:	4798      	blx	r3
        color = newColor;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
        linespace = space;
 80085e4:	f8a4 50f8 	strh.w	r5, [r4, #248]	@ 0xf8
        boundingArea = calculateBoundingArea();
 80085e8:	f10d 0810 	add.w	r8, sp, #16
 80085ec:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80085f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085f4:	4651      	mov	r1, sl
 80085f6:	4640      	mov	r0, r8
 80085f8:	4798      	blx	r3
 80085fa:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 80085fe:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8008602:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008606:	4b3d      	ldr	r3, [pc, #244]	@ (80086fc <_ZN23Test_lidar_hautViewBaseC1Ev+0x374>)
 8008608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800860a:	f04f 090a 	mov.w	r9, #10
 800860e:	f8ad 9030 	strh.w	r9, [sp, #48]	@ 0x30
    texte_menu_tests_lidar_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VNQG));
 8008612:	a90b      	add	r1, sp, #44	@ 0x2c
 8008614:	4650      	mov	r0, sl
 8008616:	f00f fdcb 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800861a:	4651      	mov	r1, sl
 800861c:	4638      	mov	r0, r7
 800861e:	f00b fdc9 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008622:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8008626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008628:	4629      	mov	r1, r5
 800862a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800862e:	4640      	mov	r0, r8
 8008630:	4798      	blx	r3
        setY(y);
 8008632:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8008636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008638:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800863c:	4640      	mov	r0, r8
 800863e:	4798      	blx	r3
 8008640:	f04f 0b02 	mov.w	fp, #2
 8008644:	f8ad b034 	strh.w	fp, [sp, #52]	@ 0x34
 8008648:	f04f 0303 	mov.w	r3, #3
 800864c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8008650:	230c      	movs	r3, #12
 8008652:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8008656:	f8ad 9040 	strh.w	r9, [sp, #64]	@ 0x40
    bouton_retour.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REPLY_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 800865a:	ab10      	add	r3, sp, #64	@ 0x40
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	ab0f      	add	r3, sp, #60	@ 0x3c
 8008660:	aa0e      	add	r2, sp, #56	@ 0x38
 8008662:	a90d      	add	r1, sp, #52	@ 0x34
 8008664:	f8cd 8008 	str.w	r8, [sp, #8]
 8008668:	4640      	mov	r0, r8
 800866a:	f00f fed4 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 800866e:	f04f 0805 	mov.w	r8, #5
 8008672:	f8a4 8144 	strh.w	r8, [r4, #324]	@ 0x144
        iconY = y;
 8008676:	f8a4 8146 	strh.w	r8, [r4, #326]	@ 0x146
    bouton_retour.setAction(buttonCallback);
 800867a:	f504 7ad8 	add.w	sl, r4, #432	@ 0x1b0
 800867e:	f8c4 a134 	str.w	sl, [r4, #308]	@ 0x134
 8008682:	9902      	ldr	r1, [sp, #8]
 8008684:	4638      	mov	r0, r7
 8008686:	f00b fd95 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 800868a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800868e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008690:	4629      	mov	r1, r5
 8008692:	9803      	ldr	r0, [sp, #12]
 8008694:	4798      	blx	r3
        setY(y);
 8008696:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800869a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869c:	4629      	mov	r1, r5
 800869e:	9803      	ldr	r0, [sp, #12]
 80086a0:	4798      	blx	r3
 80086a2:	f8ad b044 	strh.w	fp, [sp, #68]	@ 0x44
 80086a6:	f04f 0303 	mov.w	r3, #3
 80086aa:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 80086ae:	230b      	movs	r3, #11
 80086b0:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 80086b4:	f8ad 9050 	strh.w	r9, [sp, #80]	@ 0x50
    bouton_home.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_HOME_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 80086b8:	ab14      	add	r3, sp, #80	@ 0x50
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	ab13      	add	r3, sp, #76	@ 0x4c
 80086be:	aa12      	add	r2, sp, #72	@ 0x48
 80086c0:	a911      	add	r1, sp, #68	@ 0x44
 80086c2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80086c6:	4648      	mov	r0, r9
 80086c8:	f00f fea5 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 80086cc:	f8a4 8180 	strh.w	r8, [r4, #384]	@ 0x180
        iconY = y;
 80086d0:	f8a4 8182 	strh.w	r8, [r4, #386]	@ 0x182
 80086d4:	f8c4 a170 	str.w	sl, [r4, #368]	@ 0x170
 80086d8:	4649      	mov	r1, r9
 80086da:	4638      	mov	r0, r7
 80086dc:	f00b fd6a 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80086e0:	2310      	movs	r3, #16
 80086e2:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
    image_lidar_haut.setBitmap(touchgfx::Bitmap(BITMAP_LIDAR2_ID));
 80086e6:	a915      	add	r1, sp, #84	@ 0x54
 80086e8:	4630      	mov	r0, r6
 80086ea:	f00f ff50 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80086ee:	e00d      	b.n	800870c <_ZN23Test_lidar_hautViewBaseC1Ev+0x384>
 80086f0:	0802d2f8 	.word	0x0802d2f8
 80086f4:	0802e1ec 	.word	0x0802e1ec
 80086f8:	0802e15c 	.word	0x0802e15c
 80086fc:	0802c65c 	.word	0x0802c65c
 8008700:	0802d2e0 	.word	0x0802d2e0
 8008704:	0800835b 	.word	0x0800835b
 8008708:	ff63003b 	.word	0xff63003b
        setX(x);
 800870c:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 8008710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008712:	f240 21af 	movw	r1, #687	@ 0x2af
 8008716:	4630      	mov	r0, r6
 8008718:	4798      	blx	r3
        setY(y);
 800871a:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 800871e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008720:	2146      	movs	r1, #70	@ 0x46
 8008722:	4630      	mov	r0, r6
 8008724:	4798      	blx	r3
        setWidth(width);
 8008726:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 800872a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872c:	2150      	movs	r1, #80	@ 0x50
 800872e:	4630      	mov	r0, r6
 8008730:	4798      	blx	r3
        setHeight(height);
 8008732:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
 8008736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008738:	2150      	movs	r1, #80	@ 0x50
 800873a:	4630      	mov	r0, r6
 800873c:	4798      	blx	r3
    image_lidar_haut.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800873e:	4629      	mov	r1, r5
 8008740:	4630      	mov	r0, r6
 8008742:	f00e ff44 	bl	80175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008746:	4631      	mov	r1, r6
 8008748:	4638      	mov	r0, r7
 800874a:	f00b fd33 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800874e:	4620      	mov	r0, r4
 8008750:	b017      	add	sp, #92	@ 0x5c
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	bf00      	nop

08008758 <_ZN21Tests_moteursViewBase15moteurs_avancerEv>:
     * Virtual Action Handlers
     */
    virtual void moteurs_avancer()
    {
        // Override and implement this function in Tests_moteurs
    }
 8008758:	4770      	bx	lr

0800875a <_ZN21Tests_moteursViewBase18moteurs_tourner_90Ev>:
    virtual void moteurs_tourner_90()
    {
        // Override and implement this function in Tests_moteurs
    }
 800875a:	4770      	bx	lr

0800875c <_ZN21Tests_moteursViewBase19moteurs_tourner_180Ev>:
    virtual void moteurs_tourner_180()
    {
        // Override and implement this function in Tests_moteurs
    }
 800875c:	4770      	bx	lr

0800875e <_ZN21Tests_moteursViewBase4stopEv>:
    virtual void stop()
    {
        // Override and implement this function in Tests_moteurs
    }
 800875e:	4770      	bx	lr

08008760 <_ZN21Tests_moteursViewBaseD1Ev>:
}

Tests_moteursViewBase::~Tests_moteursViewBase()
{

}
 8008760:	4770      	bx	lr

08008762 <_ZN21Tests_moteursViewBase11setupScreenEv>:

void Tests_moteursViewBase::setupScreen()
{

}
 8008762:	4770      	bx	lr

08008764 <_ZN8touchgfx8CallbackI21Tests_moteursViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008764:	4770      	bx	lr

08008766 <_ZN8touchgfx8CallbackI21Tests_moteursViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008766:	b510      	push	{r4, lr}
 8008768:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800876a:	68c2      	ldr	r2, [r0, #12]
 800876c:	6844      	ldr	r4, [r0, #4]
 800876e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008772:	f012 0f01 	tst.w	r2, #1
 8008776:	d102      	bne.n	800877e <_ZN8touchgfx8CallbackI21Tests_moteursViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	4798      	blx	r3
    }
 800877c:	bd10      	pop	{r4, pc}
 800877e:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8008782:	f854 200c 	ldr.w	r2, [r4, ip]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	58d3      	ldr	r3, [r2, r3]
 800878a:	e7f6      	b.n	800877a <_ZN8touchgfx8CallbackI21Tests_moteursViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x14>

0800878c <_ZNK8touchgfx8CallbackI21Tests_moteursViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800878c:	6843      	ldr	r3, [r0, #4]
 800878e:	b13b      	cbz	r3, 80087a0 <_ZNK8touchgfx8CallbackI21Tests_moteursViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8008790:	6883      	ldr	r3, [r0, #8]
 8008792:	b10b      	cbz	r3, 8008798 <_ZNK8touchgfx8CallbackI21Tests_moteursViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 8008794:	2001      	movs	r0, #1
    }
 8008796:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 8008798:	68c0      	ldr	r0, [r0, #12]
 800879a:	f000 0001 	and.w	r0, r0, #1
 800879e:	4770      	bx	lr
 80087a0:	2000      	movs	r0, #0
 80087a2:	4770      	bx	lr

080087a4 <_ZN8touchgfx8CallbackI21Tests_moteursViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80087a4:	b510      	push	{r4, lr}
 80087a6:	4604      	mov	r4, r0
 80087a8:	2110      	movs	r1, #16
 80087aa:	f020 fb99 	bl	8028ee0 <_ZdlPvj>
 80087ae:	4620      	mov	r0, r4
 80087b0:	bd10      	pop	{r4, pc}

080087b2 <_ZN21Tests_moteursViewBaseD0Ev>:
Tests_moteursViewBase::~Tests_moteursViewBase()
 80087b2:	b510      	push	{r4, lr}
 80087b4:	4604      	mov	r4, r0
}
 80087b6:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 80087ba:	f020 fb91 	bl	8028ee0 <_ZdlPvj>
 80087be:	4620      	mov	r0, r4
 80087c0:	bd10      	pop	{r4, pc}
	...

080087c4 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Tests_moteursViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80087c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
    if (&src == &bouton_home)
 80087cc:	f500 731a 	add.w	r3, r0, #616	@ 0x268
 80087d0:	4299      	cmp	r1, r3
 80087d2:	d015      	beq.n	8008800 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        //vers_home
        //When bouton_home clicked change screen to Home
        //Go to Home with no screen transition
        application().gotoHomeScreenNoTransition();
    }
    if (&src == &bouton_retour)
 80087d4:	f504 730b 	add.w	r3, r4, #556	@ 0x22c
 80087d8:	429d      	cmp	r5, r3
 80087da:	d016      	beq.n	800880a <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
        //vers_choix_tests
        //When bouton_retour clicked change screen to Choix_tests
        //Go to Choix_tests with no screen transition
        application().gotoChoix_testsScreenNoTransition();
    }
    if (&src == &bouton_avancer)
 80087dc:	f504 76aa 	add.w	r6, r4, #340	@ 0x154
 80087e0:	42ae      	cmp	r6, r5
 80087e2:	d017      	beq.n	8008814 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x50>
        //fonction_avancer
        //When bouton_avancer clicked call virtual function
        //Call moteurs_avancer
        moteurs_avancer();
    }
    if (&src == &bouton_tourner_180)
 80087e4:	f104 07c4 	add.w	r7, r4, #196	@ 0xc4
 80087e8:	42af      	cmp	r7, r5
 80087ea:	d034      	beq.n	8008856 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
        //fonction_tourner_180
        //When bouton_tourner_180 clicked call virtual function
        //Call moteurs_tourner_180
        moteurs_tourner_180();
    }
    if (&src == &bouton_tourner_90)
 80087ec:	f504 7086 	add.w	r0, r4, #268	@ 0x10c
 80087f0:	42a8      	cmp	r0, r5
 80087f2:	d050      	beq.n	8008896 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd2>
        //fonction_tourner_90
        //When bouton_tourner_90 clicked call virtual function
        //Call moteurs_tourner_90
        moteurs_tourner_90();
    }
    if (&src == &bouton_stop)
 80087f4:	f504 73ce 	add.w	r3, r4, #412	@ 0x19c
 80087f8:	429d      	cmp	r5, r3
 80087fa:	d06a      	beq.n	80088d2 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10e>
        //fonction_stop
        //When bouton_stop clicked call virtual function
        //Call stop
        stop();
    }
}
 80087fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8008800:	f012 fbc8 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoHomeScreenNoTransition();
 8008804:	f7fd fb16 	bl	8005e34 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
 8008808:	e7e4      	b.n	80087d4 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
 800880a:	f012 fbc3 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoChoix_testsScreenNoTransition();
 800880e:	f7fd fb51 	bl	8005eb4 <_ZN23FrontendApplicationBase33gotoChoix_testsScreenNoTransitionEv>
 8008812:	e7e3      	b.n	80087dc <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
        color = col;
 8008814:	4b31      	ldr	r3, [pc, #196]	@ (80088dc <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x118>)
 8008816:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
        colorPressed = col;
 800881a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800881e:	f8c4 3194 	str.w	r3, [r4, #404]	@ 0x194
        bouton_avancer.invalidate();
 8008822:	4630      	mov	r0, r6
 8008824:	f013 fc49 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 8008828:	f04f 37ff 	mov.w	r7, #4294967295
 800882c:	f8c4 7148 	str.w	r7, [r4, #328]	@ 0x148
        colorPressed = col;
 8008830:	f8c4 714c 	str.w	r7, [r4, #332]	@ 0x14c
        bouton_tourner_90.invalidate();
 8008834:	f504 7086 	add.w	r0, r4, #268	@ 0x10c
 8008838:	f013 fc3f 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800883c:	f8c4 7100 	str.w	r7, [r4, #256]	@ 0x100
        colorPressed = col;
 8008840:	f8c4 7104 	str.w	r7, [r4, #260]	@ 0x104
        bouton_tourner_180.invalidate();
 8008844:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8008848:	f013 fc37 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        moteurs_avancer();
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008850:	4620      	mov	r0, r4
 8008852:	4798      	blx	r3
 8008854:	e7c6      	b.n	80087e4 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
        color = col;
 8008856:	4b21      	ldr	r3, [pc, #132]	@ (80088dc <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x118>)
 8008858:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
        colorPressed = col;
 800885c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8008860:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
        bouton_tourner_180.invalidate();
 8008864:	4638      	mov	r0, r7
 8008866:	f013 fc28 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800886a:	f04f 38ff 	mov.w	r8, #4294967295
 800886e:	f8c4 8190 	str.w	r8, [r4, #400]	@ 0x190
        colorPressed = col;
 8008872:	f8c4 8194 	str.w	r8, [r4, #404]	@ 0x194
        bouton_avancer.invalidate();
 8008876:	4630      	mov	r0, r6
 8008878:	f013 fc1f 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 800887c:	f8c4 8148 	str.w	r8, [r4, #328]	@ 0x148
        colorPressed = col;
 8008880:	f8c4 814c 	str.w	r8, [r4, #332]	@ 0x14c
        bouton_tourner_90.invalidate();
 8008884:	f504 7086 	add.w	r0, r4, #268	@ 0x10c
 8008888:	f013 fc17 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        moteurs_tourner_180();
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008890:	4620      	mov	r0, r4
 8008892:	4798      	blx	r3
 8008894:	e7aa      	b.n	80087ec <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
        color = col;
 8008896:	4b11      	ldr	r3, [pc, #68]	@ (80088dc <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x118>)
 8008898:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
        colorPressed = col;
 800889c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80088a0:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
        bouton_tourner_90.invalidate();
 80088a4:	f013 fc09 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80088a8:	f04f 38ff 	mov.w	r8, #4294967295
 80088ac:	f8c4 8190 	str.w	r8, [r4, #400]	@ 0x190
        colorPressed = col;
 80088b0:	f8c4 8194 	str.w	r8, [r4, #404]	@ 0x194
        bouton_avancer.invalidate();
 80088b4:	4630      	mov	r0, r6
 80088b6:	f013 fc00 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        color = col;
 80088ba:	f8c4 8100 	str.w	r8, [r4, #256]	@ 0x100
        colorPressed = col;
 80088be:	f8c4 8104 	str.w	r8, [r4, #260]	@ 0x104
        bouton_tourner_180.invalidate();
 80088c2:	4638      	mov	r0, r7
 80088c4:	f013 fbf9 	bl	801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>
        moteurs_tourner_90();
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088cc:	4620      	mov	r0, r4
 80088ce:	4798      	blx	r3
 80088d0:	e790      	b.n	80087f4 <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x30>
        stop();
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d6:	4620      	mov	r0, r4
 80088d8:	4798      	blx	r3
}
 80088da:	e78f      	b.n	80087fc <_ZN21Tests_moteursViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x38>
 80088dc:	ffeb1e1e 	.word	0xffeb1e1e

080088e0 <_ZN21Tests_moteursViewBaseC1Ev>:
Tests_moteursViewBase::Tests_moteursViewBase() :
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	b09f      	sub	sp, #124	@ 0x7c
 80088e6:	4604      	mov	r4, r0
 80088e8:	f014 fa60 	bl	801cdac <_ZN8touchgfx6ScreenC1Ev>
 80088ec:	2500      	movs	r5, #0
 80088ee:	63e5      	str	r5, [r4, #60]	@ 0x3c
    buttonCallback(this, &Tests_moteursViewBase::buttonCallbackHandler)
 80088f0:	4627      	mov	r7, r4
 80088f2:	4bbd      	ldr	r3, [pc, #756]	@ (8008be8 <_ZN21Tests_moteursViewBaseC1Ev+0x308>)
 80088f4:	f847 3b40 	str.w	r3, [r7], #64
        : x(0), y(0), width(0), height(0)
 80088f8:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 80088fc:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8008900:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8008904:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8008908:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 800890c:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
 8008910:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 8008914:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          parent(0),
 8008918:	6565      	str	r5, [r4, #84]	@ 0x54
          nextSibling(0),
 800891a:	65a5      	str	r5, [r4, #88]	@ 0x58
          nextDrawChainElement(0),
 800891c:	65e5      	str	r5, [r4, #92]	@ 0x5c
          cachedAbsX(0),
 800891e:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
          cachedAbsY(0),
 8008922:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
          touchable(false),
 8008926:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
          visible(true)
 800892a:	f04f 0a01 	mov.w	sl, #1
 800892e:	f884 a065 	strb.w	sl, [r4, #101]	@ 0x65
        : Widget(), alpha(255), color(0)
 8008932:	4bae      	ldr	r3, [pc, #696]	@ (8008bec <_ZN21Tests_moteursViewBaseC1Ev+0x30c>)
 8008934:	6423      	str	r3, [r4, #64]	@ 0x40
 8008936:	f04f 0bff 	mov.w	fp, #255	@ 0xff
 800893a:	f884 b066 	strb.w	fp, [r4, #102]	@ 0x66
        : color(col)
 800893e:	66a5      	str	r5, [r4, #104]	@ 0x68
 8008940:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
        : x(0), y(0), width(0), height(0)
 8008944:	f8a4 5070 	strh.w	r5, [r4, #112]	@ 0x70
 8008948:	f8a4 5072 	strh.w	r5, [r4, #114]	@ 0x72
 800894c:	f8a4 5074 	strh.w	r5, [r4, #116]	@ 0x74
 8008950:	f8a4 5076 	strh.w	r5, [r4, #118]	@ 0x76
 8008954:	f8a4 5078 	strh.w	r5, [r4, #120]	@ 0x78
 8008958:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 800895c:	f8a4 507c 	strh.w	r5, [r4, #124]	@ 0x7c
 8008960:	f8a4 507e 	strh.w	r5, [r4, #126]	@ 0x7e
          parent(0),
 8008964:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
          nextSibling(0),
 8008968:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          nextDrawChainElement(0),
 800896c:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
          cachedAbsX(0),
 8008970:	f8a4 508c 	strh.w	r5, [r4, #140]	@ 0x8c
          cachedAbsY(0),
 8008974:	f8a4 508e 	strh.w	r5, [r4, #142]	@ 0x8e
          touchable(false),
 8008978:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
          visible(true)
 800897c:	f884 a091 	strb.w	sl, [r4, #145]	@ 0x91
 8008980:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8008982:	f884 b092 	strb.w	fp, [r4, #146]	@ 0x92
        : color(col)
 8008986:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 800898a:	f104 0698 	add.w	r6, r4, #152	@ 0x98
        : x(0), y(0), width(0), height(0)
 800898e:	f8a4 509c 	strh.w	r5, [r4, #156]	@ 0x9c
 8008992:	f8a4 509e 	strh.w	r5, [r4, #158]	@ 0x9e
 8008996:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 800899a:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 800899e:	f8a4 50a4 	strh.w	r5, [r4, #164]	@ 0xa4
 80089a2:	f8a4 50a6 	strh.w	r5, [r4, #166]	@ 0xa6
 80089a6:	f8a4 50a8 	strh.w	r5, [r4, #168]	@ 0xa8
 80089aa:	f8a4 50aa 	strh.w	r5, [r4, #170]	@ 0xaa
          parent(0),
 80089ae:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac
          nextSibling(0),
 80089b2:	f8c4 50b0 	str.w	r5, [r4, #176]	@ 0xb0
          nextDrawChainElement(0),
 80089b6:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
          cachedAbsX(0),
 80089ba:	f8a4 50b8 	strh.w	r5, [r4, #184]	@ 0xb8
          cachedAbsY(0),
 80089be:	f8a4 50ba 	strh.w	r5, [r4, #186]	@ 0xba
          touchable(false),
 80089c2:	f884 50bc 	strb.w	r5, [r4, #188]	@ 0xbc
          visible(true)
 80089c6:	f884 a0bd 	strb.w	sl, [r4, #189]	@ 0xbd
 80089ca:	4b89      	ldr	r3, [pc, #548]	@ (8008bf0 <_ZN21Tests_moteursViewBaseC1Ev+0x310>)
 80089cc:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80089d0:	f8c4 50c0 	str.w	r5, [r4, #192]	@ 0xc0
 80089d4:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 80089d8:	4648      	mov	r0, r9
 80089da:	f00f ff0f 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80089de:	f504 7386 	add.w	r3, r4, #268	@ 0x10c
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f00f ff09 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80089ea:	f504 73aa 	add.w	r3, r4, #340	@ 0x154
 80089ee:	9306      	str	r3, [sp, #24]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f00f ff03 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80089f6:	f504 73ce 	add.w	r3, r4, #412	@ 0x19c
 80089fa:	9307      	str	r3, [sp, #28]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f00f fefd 	bl	80187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8008a02:	f504 73f2 	add.w	r3, r4, #484	@ 0x1e4
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	f8a4 51e8 	strh.w	r5, [r4, #488]	@ 0x1e8
 8008a0c:	f8a4 51ea 	strh.w	r5, [r4, #490]	@ 0x1ea
 8008a10:	f8a4 51ec 	strh.w	r5, [r4, #492]	@ 0x1ec
 8008a14:	f8a4 51ee 	strh.w	r5, [r4, #494]	@ 0x1ee
 8008a18:	f8a4 51f0 	strh.w	r5, [r4, #496]	@ 0x1f0
 8008a1c:	f8a4 51f2 	strh.w	r5, [r4, #498]	@ 0x1f2
 8008a20:	f8a4 51f4 	strh.w	r5, [r4, #500]	@ 0x1f4
 8008a24:	f8a4 51f6 	strh.w	r5, [r4, #502]	@ 0x1f6
          parent(0),
 8008a28:	f8c4 51f8 	str.w	r5, [r4, #504]	@ 0x1f8
          nextSibling(0),
 8008a2c:	f8c4 51fc 	str.w	r5, [r4, #508]	@ 0x1fc
          nextDrawChainElement(0),
 8008a30:	f8c4 5200 	str.w	r5, [r4, #512]	@ 0x200
          cachedAbsX(0),
 8008a34:	f8a4 5204 	strh.w	r5, [r4, #516]	@ 0x204
          cachedAbsY(0),
 8008a38:	f8a4 5206 	strh.w	r5, [r4, #518]	@ 0x206
          touchable(false),
 8008a3c:	f884 5208 	strb.w	r5, [r4, #520]	@ 0x208
          visible(true)
 8008a40:	f884 a209 	strb.w	sl, [r4, #521]	@ 0x209
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8008a44:	4b6b      	ldr	r3, [pc, #428]	@ (8008bf4 <_ZN21Tests_moteursViewBaseC1Ev+0x314>)
 8008a46:	f8c4 31e4 	str.w	r3, [r4, #484]	@ 0x1e4
 8008a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8008bf8 <_ZN21Tests_moteursViewBaseC1Ev+0x318>)
 8008a4c:	f8c4 320c 	str.w	r3, [r4, #524]	@ 0x20c
 8008a50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a54:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
        : color(col)
 8008a58:	f8c4 5214 	str.w	r5, [r4, #532]	@ 0x214
 8008a5c:	f8a4 5218 	strh.w	r5, [r4, #536]	@ 0x218
 8008a60:	f884 b21a 	strb.w	fp, [r4, #538]	@ 0x21a
 8008a64:	f884 521b 	strb.w	r5, [r4, #539]	@ 0x21b
 8008a68:	f884 521c 	strb.w	r5, [r4, #540]	@ 0x21c
 8008a6c:	f884 521d 	strb.w	r5, [r4, #541]	@ 0x21d
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8008a70:	f8a4 5220 	strh.w	r5, [r4, #544]	@ 0x220
 8008a74:	f8a4 5222 	strh.w	r5, [r4, #546]	@ 0x222
 8008a78:	f8a4 3224 	strh.w	r3, [r4, #548]	@ 0x224
 8008a7c:	f8a4 3226 	strh.w	r3, [r4, #550]	@ 0x226
              text(0)
 8008a80:	f8c4 5228 	str.w	r5, [r4, #552]	@ 0x228
 8008a84:	f504 730b 	add.w	r3, r4, #556	@ 0x22c
 8008a88:	9304      	str	r3, [sp, #16]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f00f fd58 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8008a90:	f504 7b1a 	add.w	fp, r4, #616	@ 0x268
 8008a94:	4658      	mov	r0, fp
 8008a96:	f00f fd53 	bl	8018540 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8008a9a:	4b58      	ldr	r3, [pc, #352]	@ (8008bfc <_ZN21Tests_moteursViewBaseC1Ev+0x31c>)
 8008a9c:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8008aa0:	f8c4 42a8 	str.w	r4, [r4, #680]	@ 0x2a8
 8008aa4:	4b56      	ldr	r3, [pc, #344]	@ (8008c00 <_ZN21Tests_moteursViewBaseC1Ev+0x320>)
 8008aa6:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
 8008aaa:	f8c4 52b0 	str.w	r5, [r4, #688]	@ 0x2b0
        setX(x);
 8008aae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	4798      	blx	r3
        setY(y);
 8008ab8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abc:	4629      	mov	r1, r5
 8008abe:	4638      	mov	r0, r7
 8008ac0:	4798      	blx	r3
        setWidth(width);
 8008ac2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac6:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8008aca:	4638      	mov	r0, r7
 8008acc:	4798      	blx	r3
        setHeight(height);
 8008ace:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad2:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	4798      	blx	r3
        color = newColor;
 8008ada:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8008ade:	66a3      	str	r3, [r4, #104]	@ 0x68
 8008ae0:	f104 0a04 	add.w	sl, r4, #4
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	f00b fb64 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008aec:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af0:	4629      	mov	r1, r5
 8008af2:	4640      	mov	r0, r8
 8008af4:	4798      	blx	r3
        setY(y);
 8008af6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afa:	4629      	mov	r1, r5
 8008afc:	4640      	mov	r0, r8
 8008afe:	4798      	blx	r3
        setWidth(width);
 8008b00:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b04:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4798      	blx	r3
        setHeight(height);
 8008b0c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b10:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8008b14:	4640      	mov	r0, r8
 8008b16:	4798      	blx	r3
 8008b18:	4b3a      	ldr	r3, [pc, #232]	@ (8008c04 <_ZN21Tests_moteursViewBaseC1Ev+0x324>)
 8008b1a:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8008b1e:	4641      	mov	r1, r8
 8008b20:	4650      	mov	r0, sl
 8008b22:	f00b fb47 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008b26:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2c:	219b      	movs	r1, #155	@ 0x9b
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4798      	blx	r3
        setY(y);
 8008b32:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b38:	2153      	movs	r1, #83	@ 0x53
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4798      	blx	r3
        setWidth(width);
 8008b3e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b44:	f240 11eb 	movw	r1, #491	@ 0x1eb
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4798      	blx	r3
        setHeight(height);
 8008b4c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b52:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 8008b56:	4630      	mov	r0, r6
 8008b58:	4798      	blx	r3
        setX(x);
 8008b5a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8008b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b60:	2105      	movs	r1, #5
 8008b62:	4648      	mov	r0, r9
 8008b64:	4798      	blx	r3
        setY(y);
 8008b66:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8008b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6c:	21c2      	movs	r1, #194	@ 0xc2
 8008b6e:	4648      	mov	r0, r9
 8008b70:	4798      	blx	r3
 8008b72:	2306      	movs	r3, #6
 8008b74:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8008b78:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    bouton_tourner_180.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_LARGE_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_LARGE_ROUND_DISABLED_ID));
 8008b7c:	aa0d      	add	r2, sp, #52	@ 0x34
 8008b7e:	a90c      	add	r1, sp, #48	@ 0x30
 8008b80:	4648      	mov	r0, r9
 8008b82:	f00f fb73 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8008b86:	2309      	movs	r3, #9
 8008b88:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
        return typedTextId < numberOfTypedTexts;
 8008b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8008c08 <_ZN21Tests_moteursViewBaseC1Ev+0x328>)
        if (typedText.hasValidId())
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	2b09      	cmp	r3, #9
 8008b92:	d947      	bls.n	8008c24 <_ZN21Tests_moteursViewBaseC1Ev+0x344>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008b94:	4b1d      	ldr	r3, [pc, #116]	@ (8008c0c <_ZN21Tests_moteursViewBaseC1Ev+0x32c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	b1fb      	cbz	r3, 8008bda <_ZN21Tests_moteursViewBaseC1Ev+0x2fa>
        return fonts[typedTexts[typedTextId].fontIdx];
 8008b9a:	7c9a      	ldrb	r2, [r3, #18]
 8008b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c10 <_ZN21Tests_moteursViewBaseC1Ev+0x330>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8008ba4:	2109      	movs	r1, #9
 8008ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8008c14 <_ZN21Tests_moteursViewBaseC1Ev+0x334>)
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	f000 fac1 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8008bae:	4680      	mov	r8, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	4798      	blx	r3
 8008bb8:	4605      	mov	r5, r0
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	4798      	blx	r3
 8008bc4:	fb15 f500 	smulbb	r5, r5, r0
 8008bc8:	b2ad      	uxth	r5, r5
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	4641      	mov	r1, r8
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	4798      	blx	r3
 8008bd4:	4405      	add	r5, r0
 8008bd6:	b22d      	sxth	r5, r5
 8008bd8:	e025      	b.n	8008c26 <_ZN21Tests_moteursViewBaseC1Ev+0x346>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008bda:	4b0f      	ldr	r3, [pc, #60]	@ (8008c18 <_ZN21Tests_moteursViewBaseC1Ev+0x338>)
 8008bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8008c1c <_ZN21Tests_moteursViewBaseC1Ev+0x33c>)
 8008bde:	216c      	movs	r1, #108	@ 0x6c
 8008be0:	480f      	ldr	r0, [pc, #60]	@ (8008c20 <_ZN21Tests_moteursViewBaseC1Ev+0x340>)
 8008be2:	f020 fcf5 	bl	80295d0 <__assert_func>
 8008be6:	bf00      	nop
 8008be8:	0802d350 	.word	0x0802d350
 8008bec:	0802e1ec 	.word	0x0802e1ec
 8008bf0:	0802ddc8 	.word	0x0802ddc8
 8008bf4:	0802e15c 	.word	0x0802e15c
 8008bf8:	0802c65c 	.word	0x0802c65c
 8008bfc:	0802d338 	.word	0x0802d338
 8008c00:	080087c5 	.word	0x080087c5
 8008c04:	ff63003b 	.word	0xff63003b
 8008c08:	24062214 	.word	0x24062214
 8008c0c:	24062210 	.word	0x24062210
 8008c10:	24062218 	.word	0x24062218
 8008c14:	2406221c 	.word	0x2406221c
 8008c18:	0802c57c 	.word	0x0802c57c
 8008c1c:	0802c5c0 	.word	0x0802c5c0
 8008c20:	0802c5fc 	.word	0x0802c5fc
 8008c24:	2500      	movs	r5, #0
 8008c26:	f8a4 510a 	strh.w	r5, [r4, #266]	@ 0x10a
        color = col;
 8008c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
        colorPressed = col;
 8008c32:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
    bouton_tourner_180.setAction(buttonCallback);
 8008c36:	f504 7529 	add.w	r5, r4, #676	@ 0x2a4
 8008c3a:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
    bloc_possibilites.add(bouton_tourner_180);
 8008c3e:	4649      	mov	r1, r9
 8008c40:	4630      	mov	r0, r6
 8008c42:	f00b fab7 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008c46:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4c:	2105      	movs	r1, #5
 8008c4e:	9f05      	ldr	r7, [sp, #20]
 8008c50:	4638      	mov	r0, r7
 8008c52:	4798      	blx	r3
        setY(y);
 8008c54:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8008c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5a:	216a      	movs	r1, #106	@ 0x6a
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	4798      	blx	r3
 8008c60:	2306      	movs	r3, #6
 8008c62:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8008c66:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    bouton_tourner_90.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_LARGE_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_LARGE_ROUND_DISABLED_ID));
 8008c6a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008c6c:	a90e      	add	r1, sp, #56	@ 0x38
 8008c6e:	4638      	mov	r0, r7
 8008c70:	f00f fafc 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8008c74:	2308      	movs	r3, #8
 8008c76:	f8a4 3144 	strh.w	r3, [r4, #324]	@ 0x144
        return typedTextId < numberOfTypedTexts;
 8008c7a:	4b71      	ldr	r3, [pc, #452]	@ (8008e40 <_ZN21Tests_moteursViewBaseC1Ev+0x560>)
        if (typedText.hasValidId())
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d92b      	bls.n	8008cda <_ZN21Tests_moteursViewBaseC1Ev+0x3fa>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008c82:	4b70      	ldr	r3, [pc, #448]	@ (8008e44 <_ZN21Tests_moteursViewBaseC1Ev+0x564>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	b313      	cbz	r3, 8008cce <_ZN21Tests_moteursViewBaseC1Ev+0x3ee>
        return fonts[typedTexts[typedTextId].fontIdx];
 8008c88:	7c1a      	ldrb	r2, [r3, #16]
 8008c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8008e48 <_ZN21Tests_moteursViewBaseC1Ev+0x568>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8008c92:	2108      	movs	r1, #8
 8008c94:	4b6d      	ldr	r3, [pc, #436]	@ (8008e4c <_ZN21Tests_moteursViewBaseC1Ev+0x56c>)
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	f000 fa4a 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8008c9c:	4681      	mov	r9, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8008c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4798      	blx	r3
 8008ca8:	4607      	mov	r7, r0
 8008caa:	f8d8 3000 	ldr.w	r3, [r8]
 8008cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	4798      	blx	r3
 8008cb6:	fb17 f700 	smulbb	r7, r7, r0
 8008cba:	b2bf      	uxth	r7, r7
 8008cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	4798      	blx	r3
 8008cc8:	4407      	add	r7, r0
 8008cca:	b23f      	sxth	r7, r7
 8008ccc:	e006      	b.n	8008cdc <_ZN21Tests_moteursViewBaseC1Ev+0x3fc>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008cce:	4b60      	ldr	r3, [pc, #384]	@ (8008e50 <_ZN21Tests_moteursViewBaseC1Ev+0x570>)
 8008cd0:	4a60      	ldr	r2, [pc, #384]	@ (8008e54 <_ZN21Tests_moteursViewBaseC1Ev+0x574>)
 8008cd2:	216c      	movs	r1, #108	@ 0x6c
 8008cd4:	4860      	ldr	r0, [pc, #384]	@ (8008e58 <_ZN21Tests_moteursViewBaseC1Ev+0x578>)
 8008cd6:	f020 fc7b 	bl	80295d0 <__assert_func>
 8008cda:	2700      	movs	r7, #0
 8008cdc:	f8a4 7152 	strh.w	r7, [r4, #338]	@ 0x152
        color = col;
 8008ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce4:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
        colorPressed = col;
 8008ce8:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8008cec:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
    bloc_possibilites.add(bouton_tourner_90);
 8008cf0:	9905      	ldr	r1, [sp, #20]
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f00b fa5e 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008cf8:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfe:	2105      	movs	r1, #5
 8008d00:	9f06      	ldr	r7, [sp, #24]
 8008d02:	4638      	mov	r0, r7
 8008d04:	4798      	blx	r3
        setY(y);
 8008d06:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d0c:	210f      	movs	r1, #15
 8008d0e:	4638      	mov	r0, r7
 8008d10:	4798      	blx	r3
 8008d12:	2306      	movs	r3, #6
 8008d14:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008d18:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
    bouton_avancer.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_LARGE_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_LARGE_ROUND_DISABLED_ID));
 8008d1c:	aa11      	add	r2, sp, #68	@ 0x44
 8008d1e:	a910      	add	r1, sp, #64	@ 0x40
 8008d20:	4638      	mov	r0, r7
 8008d22:	f00f faa3 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8008d26:	2307      	movs	r3, #7
 8008d28:	f8a4 318c 	strh.w	r3, [r4, #396]	@ 0x18c
        return typedTextId < numberOfTypedTexts;
 8008d2c:	4b44      	ldr	r3, [pc, #272]	@ (8008e40 <_ZN21Tests_moteursViewBaseC1Ev+0x560>)
        if (typedText.hasValidId())
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	2b07      	cmp	r3, #7
 8008d32:	d92b      	bls.n	8008d8c <_ZN21Tests_moteursViewBaseC1Ev+0x4ac>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008d34:	4b43      	ldr	r3, [pc, #268]	@ (8008e44 <_ZN21Tests_moteursViewBaseC1Ev+0x564>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	b313      	cbz	r3, 8008d80 <_ZN21Tests_moteursViewBaseC1Ev+0x4a0>
        return fonts[typedTexts[typedTextId].fontIdx];
 8008d3a:	7b9a      	ldrb	r2, [r3, #14]
 8008d3c:	4b42      	ldr	r3, [pc, #264]	@ (8008e48 <_ZN21Tests_moteursViewBaseC1Ev+0x568>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8008d44:	2107      	movs	r1, #7
 8008d46:	4b41      	ldr	r3, [pc, #260]	@ (8008e4c <_ZN21Tests_moteursViewBaseC1Ev+0x56c>)
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f000 f9f1 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8008d4e:	4681      	mov	r9, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8008d50:	f8d8 3000 	ldr.w	r3, [r8]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d56:	4640      	mov	r0, r8
 8008d58:	4798      	blx	r3
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d62:	4649      	mov	r1, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	4798      	blx	r3
 8008d68:	fb17 f700 	smulbb	r7, r7, r0
 8008d6c:	b2bf      	uxth	r7, r7
 8008d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d74:	4649      	mov	r1, r9
 8008d76:	4640      	mov	r0, r8
 8008d78:	4798      	blx	r3
 8008d7a:	4407      	add	r7, r0
 8008d7c:	b23f      	sxth	r7, r7
 8008d7e:	e006      	b.n	8008d8e <_ZN21Tests_moteursViewBaseC1Ev+0x4ae>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008d80:	4b33      	ldr	r3, [pc, #204]	@ (8008e50 <_ZN21Tests_moteursViewBaseC1Ev+0x570>)
 8008d82:	4a34      	ldr	r2, [pc, #208]	@ (8008e54 <_ZN21Tests_moteursViewBaseC1Ev+0x574>)
 8008d84:	216c      	movs	r1, #108	@ 0x6c
 8008d86:	4834      	ldr	r0, [pc, #208]	@ (8008e58 <_ZN21Tests_moteursViewBaseC1Ev+0x578>)
 8008d88:	f020 fc22 	bl	80295d0 <__assert_func>
 8008d8c:	2700      	movs	r7, #0
 8008d8e:	f8a4 719a 	strh.w	r7, [r4, #410]	@ 0x19a
        color = col;
 8008d92:	f04f 33ff 	mov.w	r3, #4294967295
 8008d96:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
        colorPressed = col;
 8008d9a:	f8c4 3194 	str.w	r3, [r4, #404]	@ 0x194
 8008d9e:	f8c4 517c 	str.w	r5, [r4, #380]	@ 0x17c
    bloc_possibilites.add(bouton_avancer);
 8008da2:	9906      	ldr	r1, [sp, #24]
 8008da4:	4630      	mov	r0, r6
 8008da6:	f00b fa05 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008daa:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 8008dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db0:	2105      	movs	r1, #5
 8008db2:	9f07      	ldr	r7, [sp, #28]
 8008db4:	4638      	mov	r0, r7
 8008db6:	4798      	blx	r3
        setY(y);
 8008db8:	f8d4 319c 	ldr.w	r3, [r4, #412]	@ 0x19c
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dbe:	f240 111d 	movw	r1, #285	@ 0x11d
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	4798      	blx	r3
 8008dc6:	2305      	movs	r3, #5
 8008dc8:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8008dcc:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
    bouton_stop.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_LARGE_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_60_LARGE_ROUND_ACTION_ID));
 8008dd0:	aa13      	add	r2, sp, #76	@ 0x4c
 8008dd2:	a912      	add	r1, sp, #72	@ 0x48
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f00f fa49 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8008dda:	2302      	movs	r3, #2
 8008ddc:	f8a4 31d4 	strh.w	r3, [r4, #468]	@ 0x1d4
        return typedTextId < numberOfTypedTexts;
 8008de0:	4b17      	ldr	r3, [pc, #92]	@ (8008e40 <_ZN21Tests_moteursViewBaseC1Ev+0x560>)
        if (typedText.hasValidId())
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d939      	bls.n	8008e5c <_ZN21Tests_moteursViewBaseC1Ev+0x57c>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008de8:	4b16      	ldr	r3, [pc, #88]	@ (8008e44 <_ZN21Tests_moteursViewBaseC1Ev+0x564>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	b313      	cbz	r3, 8008e34 <_ZN21Tests_moteursViewBaseC1Ev+0x554>
        return fonts[typedTexts[typedTextId].fontIdx];
 8008dee:	791a      	ldrb	r2, [r3, #4]
 8008df0:	4b15      	ldr	r3, [pc, #84]	@ (8008e48 <_ZN21Tests_moteursViewBaseC1Ev+0x568>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8008df8:	2102      	movs	r1, #2
 8008dfa:	4b14      	ldr	r3, [pc, #80]	@ (8008e4c <_ZN21Tests_moteursViewBaseC1Ev+0x56c>)
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f000 f997 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8008e02:	4681      	mov	r9, r0
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8008e04:	f8d8 3000 	ldr.w	r3, [r8]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4798      	blx	r3
 8008e0e:	4607      	mov	r7, r0
 8008e10:	f8d8 3000 	ldr.w	r3, [r8]
 8008e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4798      	blx	r3
 8008e1c:	fb17 f700 	smulbb	r7, r7, r0
 8008e20:	b2bf      	uxth	r7, r7
 8008e22:	f8d8 3000 	ldr.w	r3, [r8]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	4798      	blx	r3
 8008e2e:	4407      	add	r7, r0
 8008e30:	b23f      	sxth	r7, r7
 8008e32:	e014      	b.n	8008e5e <_ZN21Tests_moteursViewBaseC1Ev+0x57e>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008e34:	4b06      	ldr	r3, [pc, #24]	@ (8008e50 <_ZN21Tests_moteursViewBaseC1Ev+0x570>)
 8008e36:	4a07      	ldr	r2, [pc, #28]	@ (8008e54 <_ZN21Tests_moteursViewBaseC1Ev+0x574>)
 8008e38:	216c      	movs	r1, #108	@ 0x6c
 8008e3a:	4807      	ldr	r0, [pc, #28]	@ (8008e58 <_ZN21Tests_moteursViewBaseC1Ev+0x578>)
 8008e3c:	f020 fbc8 	bl	80295d0 <__assert_func>
 8008e40:	24062214 	.word	0x24062214
 8008e44:	24062210 	.word	0x24062210
 8008e48:	24062218 	.word	0x24062218
 8008e4c:	2406221c 	.word	0x2406221c
 8008e50:	0802c57c 	.word	0x0802c57c
 8008e54:	0802c5c0 	.word	0x0802c5c0
 8008e58:	0802c5fc 	.word	0x0802c5fc
 8008e5c:	2700      	movs	r7, #0
 8008e5e:	f8a4 71e2 	strh.w	r7, [r4, #482]	@ 0x1e2
        color = col;
 8008e62:	f04f 37ff 	mov.w	r7, #4294967295
 8008e66:	f8c4 71d8 	str.w	r7, [r4, #472]	@ 0x1d8
        colorPressed = col;
 8008e6a:	f8c4 71dc 	str.w	r7, [r4, #476]	@ 0x1dc
 8008e6e:	f8c4 51c4 	str.w	r5, [r4, #452]	@ 0x1c4
    bloc_possibilites.add(bouton_stop);
 8008e72:	9907      	ldr	r1, [sp, #28]
 8008e74:	4630      	mov	r0, r6
 8008e76:	f00b f99d 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	f00b f999 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008e82:	f8d4 31e4 	ldr.w	r3, [r4, #484]	@ 0x1e4
 8008e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e88:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8008e8c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e90:	4640      	mov	r0, r8
 8008e92:	4798      	blx	r3
        setY(y);
 8008e94:	f8d4 31e4 	ldr.w	r3, [r4, #484]	@ 0x1e4
 8008e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9a:	2106      	movs	r1, #6
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4798      	blx	r3
        color = newColor;
 8008ea0:	f8c4 7214 	str.w	r7, [r4, #532]	@ 0x214
        linespace = space;
 8008ea4:	2700      	movs	r7, #0
 8008ea6:	f8a4 7218 	strh.w	r7, [r4, #536]	@ 0x218
        boundingArea = calculateBoundingArea();
 8008eaa:	ae08      	add	r6, sp, #32
 8008eac:	f8d4 31e4 	ldr.w	r3, [r4, #484]	@ 0x1e4
 8008eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4798      	blx	r3
 8008eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ebe:	4643      	mov	r3, r8
 8008ec0:	333c      	adds	r3, #60	@ 0x3c
 8008ec2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        : typedTextId(id)
 8008eca:	4b35      	ldr	r3, [pc, #212]	@ (8008fa0 <_ZN21Tests_moteursViewBaseC1Ev+0x6c0>)
 8008ecc:	9314      	str	r3, [sp, #80]	@ 0x50
 8008ece:	2310      	movs	r3, #16
 8008ed0:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
    texte_menu_tests_moteurs.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OXSS));
 8008ed4:	a914      	add	r1, sp, #80	@ 0x50
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f00f f96a 	bl	80181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008edc:	4641      	mov	r1, r8
 8008ede:	4650      	mov	r0, sl
 8008ee0:	f00b f968 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008ee4:	f8d4 322c 	ldr.w	r3, [r4, #556]	@ 0x22c
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eea:	4639      	mov	r1, r7
 8008eec:	9e04      	ldr	r6, [sp, #16]
 8008eee:	4630      	mov	r0, r6
 8008ef0:	4798      	blx	r3
        setY(y);
 8008ef2:	f8d4 322c 	ldr.w	r3, [r4, #556]	@ 0x22c
 8008ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ef8:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8008efc:	4630      	mov	r0, r6
 8008efe:	4798      	blx	r3
 8008f00:	f04f 0302 	mov.w	r3, #2
 8008f04:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
 8008f08:	f04f 0903 	mov.w	r9, #3
 8008f0c:	f8ad 905c 	strh.w	r9, [sp, #92]	@ 0x5c
 8008f10:	230c      	movs	r3, #12
 8008f12:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 8008f16:	f04f 080a 	mov.w	r8, #10
 8008f1a:	f8ad 8064 	strh.w	r8, [sp, #100]	@ 0x64
    bouton_retour.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_CONTENT_REPLY_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8008f1e:	ab19      	add	r3, sp, #100	@ 0x64
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	ab18      	add	r3, sp, #96	@ 0x60
 8008f24:	aa17      	add	r2, sp, #92	@ 0x5c
 8008f26:	a916      	add	r1, sp, #88	@ 0x58
 8008f28:	9604      	str	r6, [sp, #16]
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f00f fa73 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8008f30:	2605      	movs	r6, #5
 8008f32:	f8a4 6264 	strh.w	r6, [r4, #612]	@ 0x264
        iconY = y;
 8008f36:	f8a4 6266 	strh.w	r6, [r4, #614]	@ 0x266
 8008f3a:	f8c4 5254 	str.w	r5, [r4, #596]	@ 0x254
 8008f3e:	9904      	ldr	r1, [sp, #16]
 8008f40:	4650      	mov	r0, sl
 8008f42:	f00b f937 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
 8008f46:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	4658      	mov	r0, fp
 8008f50:	4798      	blx	r3
        setY(y);
 8008f52:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 8008f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f58:	4639      	mov	r1, r7
 8008f5a:	4658      	mov	r0, fp
 8008f5c:	4798      	blx	r3
 8008f5e:	f04f 0302 	mov.w	r3, #2
 8008f62:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
 8008f66:	f8ad 906c 	strh.w	r9, [sp, #108]	@ 0x6c
 8008f6a:	230b      	movs	r3, #11
 8008f6c:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 8008f70:	f8ad 8074 	strh.w	r8, [sp, #116]	@ 0x74
    bouton_home.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_HOME_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8008f74:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	ab1c      	add	r3, sp, #112	@ 0x70
 8008f7a:	aa1b      	add	r2, sp, #108	@ 0x6c
 8008f7c:	a91a      	add	r1, sp, #104	@ 0x68
 8008f7e:	4658      	mov	r0, fp
 8008f80:	f00f fa49 	bl	8018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8008f84:	f8a4 62a0 	strh.w	r6, [r4, #672]	@ 0x2a0
        iconY = y;
 8008f88:	f8a4 62a2 	strh.w	r6, [r4, #674]	@ 0x2a2
 8008f8c:	f8c4 5290 	str.w	r5, [r4, #656]	@ 0x290
 8008f90:	4659      	mov	r1, fp
 8008f92:	4650      	mov	r0, sl
 8008f94:	f00b f90e 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008f98:	4620      	mov	r0, r4
 8008f9a:	b01f      	add	sp, #124	@ 0x7c
 8008f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa0:	0802c65c 	.word	0x0802c65c

08008fa4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	4770      	bx	lr

08008fa8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8008fa8:	2000      	movs	r0, #0
 8008faa:	4770      	bx	lr

08008fac <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008fac:	b40e      	push	{r1, r2, r3}
 8008fae:	b500      	push	{lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8008fb8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008fba:	2100      	movs	r1, #0
 8008fbc:	f012 ff52 	bl	801be64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8008fc0:	b002      	add	sp, #8
 8008fc2:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc6:	b003      	add	sp, #12
 8008fc8:	4770      	bx	lr

08008fca <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008fca:	b40c      	push	{r2, r3}
 8008fcc:	b500      	push	{lr}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	ab04      	add	r3, sp, #16
 8008fd2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8008fd6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008fd8:	f012 ff44 	bl	801be64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8008fdc:	b003      	add	sp, #12
 8008fde:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fe2:	b002      	add	sp, #8
 8008fe4:	4770      	bx	lr
	...

08008fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008fe8:	b510      	push	{r4, lr}
 8008fea:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8008fec:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8008fee:	b133      	cbz	r3, 8008ffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008ff0:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8008ff2:	b143      	cbz	r3, 8009006 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8008ff4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8008ff6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008ffa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8008ffc:	b94b      	cbnz	r3, 8009012 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8008ffe:	4620      	mov	r0, r4
 8009000:	f014 fcb2 	bl	801d968 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8009004:	bd10      	pop	{r4, pc}
            assert(used > 0);
 8009006:	4b19      	ldr	r3, [pc, #100]	@ (800906c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x84>)
 8009008:	4a19      	ldr	r2, [pc, #100]	@ (8009070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 800900a:	21c5      	movs	r1, #197	@ 0xc5
 800900c:	4819      	ldr	r0, [pc, #100]	@ (8009074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 800900e:	f020 fadf 	bl	80295d0 <__assert_func>
        substituteGlyphs();
 8009012:	f014 fda7 	bl	801db64 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009016:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8009018:	2b01      	cmp	r3, #1
 800901a:	d915      	bls.n	8009048 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x60>
            const uint16_t index = pos + offset;
 800901c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800901e:	1c53      	adds	r3, r2, #1
 8009020:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8009022:	2b09      	cmp	r3, #9
 8009024:	d816      	bhi.n	8009054 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
 8009026:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800902a:	8c48      	ldrh	r0, [r1, #34]	@ 0x22
 800902c:	f640 113f 	movw	r1, #2367	@ 0x93f
 8009030:	4288      	cmp	r0, r1
 8009032:	d1e4      	bne.n	8008ffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8009034:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 8009038:	8c51      	ldrh	r1, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800903a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800903e:	8459      	strh	r1, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8009040:	f640 133f 	movw	r3, #2367	@ 0x93f
 8009044:	8453      	strh	r3, [r2, #34]	@ 0x22
        }
 8009046:	e7da      	b.n	8008ffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 8009048:	4b0b      	ldr	r3, [pc, #44]	@ (8009078 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 800904a:	4a0c      	ldr	r2, [pc, #48]	@ (800907c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800904c:	21cb      	movs	r1, #203	@ 0xcb
 800904e:	4809      	ldr	r0, [pc, #36]	@ (8009074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 8009050:	f020 fabe 	bl	80295d0 <__assert_func>
            return buffer[index < size ? index : index - size];
 8009054:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8009058:	89d9      	ldrh	r1, [r3, #14]
 800905a:	f640 133f 	movw	r3, #2367	@ 0x93f
 800905e:	4299      	cmp	r1, r3
 8009060:	d1cd      	bne.n	8008ffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8009062:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 8009066:	8c51      	ldrh	r1, [r2, #34]	@ 0x22
 8009068:	2300      	movs	r3, #0
 800906a:	e7e6      	b.n	800903a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x52>
 800906c:	0802d38c 	.word	0x0802d38c
 8009070:	0802d398 	.word	0x0802d398
 8009074:	0802d444 	.word	0x0802d444
 8009078:	0802d49c 	.word	0x0802d49c
 800907c:	0802d4ac 	.word	0x0802d4ac

08009080 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009080:	b508      	push	{r3, lr}
    fillInputBuffer();
 8009082:	f014 fc3a 	bl	801d8fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009086:	bd08      	pop	{r3, pc}

08009088 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8009088:	b500      	push	{lr}
 800908a:	b087      	sub	sp, #28
 800908c:	f10d 0c08 	add.w	ip, sp, #8
 8009090:	e88c 0006 	stmia.w	ip, {r1, r2}
 8009094:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8009096:	ab0a      	add	r3, sp, #40	@ 0x28
 8009098:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	9b08      	ldr	r3, [sp, #32]
 80090a2:	4661      	mov	r1, ip
 80090a4:	f011 faf6 	bl	801a694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80090a8:	b007      	add	sp, #28
 80090aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080090b0 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d127      	bne.n	8009104 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 80090b4:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
 80090b6:	4b14      	ldr	r3, [pc, #80]	@ (8009108 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80090b8:	681c      	ldr	r4, [r3, #0]
 80090ba:	b1c4      	cbz	r4, 80090ee <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80090bc:	6822      	ldr	r2, [r4, #0]
 80090be:	4422      	add	r2, r4
 80090c0:	4912      	ldr	r1, [pc, #72]	@ (800910c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80090c2:	600a      	str	r2, [r1, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80090c4:	6862      	ldr	r2, [r4, #4]
 80090c6:	4422      	add	r2, r4
 80090c8:	4911      	ldr	r1, [pc, #68]	@ (8009110 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80090ca:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80090cc:	68a2      	ldr	r2, [r4, #8]
 80090ce:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80090d0:	4b10      	ldr	r3, [pc, #64]	@ (8009114 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80090d6:	f000 f83b 	bl	8009150 <_ZN17TypedTextDatabase8getFontsEv>
 80090da:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80090dc:	f000 f836 	bl	800914c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80090e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009118 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80090e2:	601c      	str	r4, [r3, #0]
        fonts = f;
 80090e4:	4b0d      	ldr	r3, [pc, #52]	@ (800911c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80090e6:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80090e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80090ea:	8018      	strh	r0, [r3, #0]
    }
}
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 80090ee:	4b07      	ldr	r3, [pc, #28]	@ (800910c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80090f0:	4a0c      	ldr	r2, [pc, #48]	@ (8009124 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80090f2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80090f4:	4b06      	ldr	r3, [pc, #24]	@ (8009110 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80090f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009128 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 80090f8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80090fa:	4b0c      	ldr	r3, [pc, #48]	@ (800912c <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 80090fc:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80090fe:	2c00      	cmp	r4, #0
 8009100:	d1e6      	bne.n	80090d0 <_ZN8touchgfx5Texts11setLanguageEt+0x20>
 8009102:	e7f3      	b.n	80090ec <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	24030a90 	.word	0x24030a90
 800910c:	24030a88 	.word	0x24030a88
 8009110:	24030a84 	.word	0x24030a84
 8009114:	24030a8c 	.word	0x24030a8c
 8009118:	24062210 	.word	0x24062210
 800911c:	24062218 	.word	0x24062218
 8009120:	24062214 	.word	0x24062214
 8009124:	90b62754 	.word	0x90b62754
 8009128:	90b626e0 	.word	0x90b626e0
 800912c:	90b62b24 	.word	0x90b62b24

08009130 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009130:	4b04      	ldr	r3, [pc, #16]	@ (8009144 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8009138:	4b03      	ldr	r3, [pc, #12]	@ (8009148 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800913a:	681b      	ldr	r3, [r3, #0]
}
 800913c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	24030a84 	.word	0x24030a84
 8009148:	24030a88 	.word	0x24030a88

0800914c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800914c:	201d      	movs	r0, #29
 800914e:	4770      	bx	lr

08009150 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8009150:	4800      	ldr	r0, [pc, #0]	@ (8009154 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8009152:	4770      	bx	lr
 8009154:	24030a94 	.word	0x24030a94

08009158 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdanab_45_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009158:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800915a:	f7fe fc4d 	bl	80079f8 <_Z23getFont_verdana_20_4bppv>
};
 800915e:	4c07      	ldr	r4, [pc, #28]	@ (800917c <_GLOBAL__sub_I_touchgfx_fonts+0x24>)
 8009160:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8009162:	f7fe fc8b 	bl	8007a7c <_Z23getFont_verdana_40_4bppv>
};
 8009166:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8009168:	f7fe fc06 	bl	8007978 <_Z23getFont_verdana_10_4bppv>
};
 800916c:	60a0      	str	r0, [r4, #8]
    &(getFont_verdanab_30_4bpp()),
 800916e:	f7fe fcc5 	bl	8007afc <_Z24getFont_verdanab_30_4bppv>
};
 8009172:	60e0      	str	r0, [r4, #12]
    &(getFont_verdanab_45_4bpp())
 8009174:	f7fe fd04 	bl	8007b80 <_Z24getFont_verdanab_45_4bppv>
};
 8009178:	6120      	str	r0, [r4, #16]
} // namespace TypedTextDatabase
 800917a:	bd10      	pop	{r4, pc}
 800917c:	24030a94 	.word	0x24030a94

08009180 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8009180:	b410      	push	{r4}
    pointArray = 0;
 8009182:	2400      	movs	r4, #0
 8009184:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8009186:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8009188:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800918a:	601c      	str	r4, [r3, #0]
}
 800918c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009190:	4770      	bx	lr

08009192 <_ZN24Choix_strategiePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Choix_strategiePresenter() {}
 8009192:	4770      	bx	lr

08009194 <_ZThn4_N24Choix_strategiePresenterD1Ev>:
 8009194:	3804      	subs	r0, #4
 8009196:	4770      	bx	lr

08009198 <_ZN24Choix_strategiePresenter8activateEv>:
}

void Choix_strategiePresenter::activate()
{

}
 8009198:	4770      	bx	lr

0800919a <_ZN24Choix_strategiePresenter10deactivateEv>:

void Choix_strategiePresenter::deactivate()
{

}
 800919a:	4770      	bx	lr

0800919c <_ZN24Choix_strategiePresenterD0Ev>:
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	2110      	movs	r1, #16
 80091a2:	f01f fe9d 	bl	8028ee0 <_ZdlPvj>
 80091a6:	4620      	mov	r0, r4
 80091a8:	bd10      	pop	{r4, pc}

080091aa <_ZThn4_N24Choix_strategiePresenterD0Ev>:
 80091aa:	b510      	push	{r4, lr}
 80091ac:	1f04      	subs	r4, r0, #4
 80091ae:	2110      	movs	r1, #16
 80091b0:	4620      	mov	r0, r4
 80091b2:	f01f fe95 	bl	8028ee0 <_ZdlPvj>
 80091b6:	4620      	mov	r0, r4
 80091b8:	bd10      	pop	{r4, pc}
	...

080091bc <_ZN24Choix_strategiePresenterC1ER19Choix_strategieView>:
    ModelListener() : model(0) {}
 80091bc:	2200      	movs	r2, #0
 80091be:	6082      	str	r2, [r0, #8]
    : view(v)
 80091c0:	4a02      	ldr	r2, [pc, #8]	@ (80091cc <_ZN24Choix_strategiePresenterC1ER19Choix_strategieView+0x10>)
 80091c2:	6002      	str	r2, [r0, #0]
 80091c4:	3218      	adds	r2, #24
 80091c6:	6042      	str	r2, [r0, #4]
 80091c8:	60c1      	str	r1, [r0, #12]
}
 80091ca:	4770      	bx	lr
 80091cc:	0802d588 	.word	0x0802d588

080091d0 <_ZN19Choix_strategieView14tearDownScreenEv>:
}

void Choix_strategieView::tearDownScreen()
{
    Choix_strategieViewBase::tearDownScreen();
}
 80091d0:	4770      	bx	lr
	...

080091d4 <_ZN19Choix_strategieView11strategie_1Ev>:

void Choix_strategieView::strategie_1()
{
	strat = 1;
 80091d4:	4b01      	ldr	r3, [pc, #4]	@ (80091dc <_ZN19Choix_strategieView11strategie_1Ev+0x8>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	4770      	bx	lr
 80091dc:	24000368 	.word	0x24000368

080091e0 <_ZN19Choix_strategieView11strategie_2Ev>:

void Choix_strategieView::strategie_2()
{
	strat = 2;
 80091e0:	4b01      	ldr	r3, [pc, #4]	@ (80091e8 <_ZN19Choix_strategieView11strategie_2Ev+0x8>)
 80091e2:	2202      	movs	r2, #2
 80091e4:	601a      	str	r2, [r3, #0]
}
 80091e6:	4770      	bx	lr
 80091e8:	24000368 	.word	0x24000368

080091ec <_ZN19Choix_strategieView11strategie_3Ev>:

void Choix_strategieView::strategie_3()
{
	strat = 3;
 80091ec:	4b01      	ldr	r3, [pc, #4]	@ (80091f4 <_ZN19Choix_strategieView11strategie_3Ev+0x8>)
 80091ee:	2203      	movs	r2, #3
 80091f0:	601a      	str	r2, [r3, #0]
}
 80091f2:	4770      	bx	lr
 80091f4:	24000368 	.word	0x24000368

080091f8 <_ZN19Choix_strategieView11strategie_4Ev>:

void Choix_strategieView::strategie_4()
{
	strat = 4;
 80091f8:	4b01      	ldr	r3, [pc, #4]	@ (8009200 <_ZN19Choix_strategieView11strategie_4Ev+0x8>)
 80091fa:	2204      	movs	r2, #4
 80091fc:	601a      	str	r2, [r3, #0]
}
 80091fe:	4770      	bx	lr
 8009200:	24000368 	.word	0x24000368

08009204 <_ZN19Choix_strategieView11strategie_5Ev>:

void Choix_strategieView::strategie_5()
{
	strat = 5;
 8009204:	4b01      	ldr	r3, [pc, #4]	@ (800920c <_ZN19Choix_strategieView11strategie_5Ev+0x8>)
 8009206:	2205      	movs	r2, #5
 8009208:	601a      	str	r2, [r3, #0]
}
 800920a:	4770      	bx	lr
 800920c:	24000368 	.word	0x24000368

08009210 <_ZN19Choix_strategieView11strategie_6Ev>:

void Choix_strategieView::strategie_6()
{
	strat = 6;
 8009210:	4b01      	ldr	r3, [pc, #4]	@ (8009218 <_ZN19Choix_strategieView11strategie_6Ev+0x8>)
 8009212:	2206      	movs	r2, #6
 8009214:	601a      	str	r2, [r3, #0]
}
 8009216:	4770      	bx	lr
 8009218:	24000368 	.word	0x24000368

0800921c <_ZN19Choix_strategieView13valider_stratEv>:
			break;

		case 6:
			break;
	}
}
 800921c:	4770      	bx	lr
	...

08009220 <_ZN19Choix_strategieViewD1Ev>:

class Choix_strategieView : public Choix_strategieViewBase
{
public:
    Choix_strategieView();
    virtual ~Choix_strategieView() {}
 8009220:	b510      	push	{r4, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	4b02      	ldr	r3, [pc, #8]	@ (8009230 <_ZN19Choix_strategieViewD1Ev+0x10>)
 8009226:	6003      	str	r3, [r0, #0]
 8009228:	f7fb f8b4 	bl	8004394 <_ZN23Choix_strategieViewBaseD1Ev>
 800922c:	4620      	mov	r0, r4
 800922e:	bd10      	pop	{r4, pc}
 8009230:	0802d5b0 	.word	0x0802d5b0

08009234 <_ZN19Choix_strategieViewD0Ev>:
 8009234:	b510      	push	{r4, lr}
 8009236:	4604      	mov	r4, r0
 8009238:	4b05      	ldr	r3, [pc, #20]	@ (8009250 <_ZN19Choix_strategieViewD0Ev+0x1c>)
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	f7fb f8aa 	bl	8004394 <_ZN23Choix_strategieViewBaseD1Ev>
 8009240:	f44f 7175 	mov.w	r1, #980	@ 0x3d4
 8009244:	4620      	mov	r0, r4
 8009246:	f01f fe4b 	bl	8028ee0 <_ZdlPvj>
 800924a:	4620      	mov	r0, r4
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop
 8009250:	0802d5b0 	.word	0x0802d5b0

08009254 <_ZN19Choix_strategieViewC1Ev>:
Choix_strategieView::Choix_strategieView()
 8009254:	b510      	push	{r4, lr}
 8009256:	4604      	mov	r4, r0
 8009258:	f7fb fa8a 	bl	8004770 <_ZN23Choix_strategieViewBaseC1Ev>
 800925c:	4b01      	ldr	r3, [pc, #4]	@ (8009264 <_ZN19Choix_strategieViewC1Ev+0x10>)
 800925e:	6023      	str	r3, [r4, #0]
}
 8009260:	4620      	mov	r0, r4
 8009262:	bd10      	pop	{r4, pc}
 8009264:	0802d5b0 	.word	0x0802d5b0

08009268 <_ZN19Choix_strategieView11setupScreenEv>:
{
 8009268:	b508      	push	{r3, lr}
    Choix_strategieViewBase::setupScreen();
 800926a:	f7fb f894 	bl	8004396 <_ZN23Choix_strategieViewBase11setupScreenEv>
}
 800926e:	bd08      	pop	{r3, pc}

08009270 <_ZN20Choix_testsPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Choix_testsPresenter() {}
 8009270:	4770      	bx	lr

08009272 <_ZThn4_N20Choix_testsPresenterD1Ev>:
 8009272:	3804      	subs	r0, #4
 8009274:	4770      	bx	lr

08009276 <_ZN20Choix_testsPresenter8activateEv>:
}

void Choix_testsPresenter::activate()
{

}
 8009276:	4770      	bx	lr

08009278 <_ZN20Choix_testsPresenter10deactivateEv>:

void Choix_testsPresenter::deactivate()
{

}
 8009278:	4770      	bx	lr

0800927a <_ZN20Choix_testsPresenterD0Ev>:
 800927a:	b510      	push	{r4, lr}
 800927c:	4604      	mov	r4, r0
 800927e:	2110      	movs	r1, #16
 8009280:	f01f fe2e 	bl	8028ee0 <_ZdlPvj>
 8009284:	4620      	mov	r0, r4
 8009286:	bd10      	pop	{r4, pc}

08009288 <_ZThn4_N20Choix_testsPresenterD0Ev>:
 8009288:	b510      	push	{r4, lr}
 800928a:	1f04      	subs	r4, r0, #4
 800928c:	2110      	movs	r1, #16
 800928e:	4620      	mov	r0, r4
 8009290:	f01f fe26 	bl	8028ee0 <_ZdlPvj>
 8009294:	4620      	mov	r0, r4
 8009296:	bd10      	pop	{r4, pc}

08009298 <_ZN20Choix_testsPresenterC1ER15Choix_testsView>:
 8009298:	2200      	movs	r2, #0
 800929a:	6082      	str	r2, [r0, #8]
    : view(v)
 800929c:	4a02      	ldr	r2, [pc, #8]	@ (80092a8 <_ZN20Choix_testsPresenterC1ER15Choix_testsView+0x10>)
 800929e:	6002      	str	r2, [r0, #0]
 80092a0:	3218      	adds	r2, #24
 80092a2:	6042      	str	r2, [r0, #4]
 80092a4:	60c1      	str	r1, [r0, #12]
}
 80092a6:	4770      	bx	lr
 80092a8:	0802d600 	.word	0x0802d600

080092ac <_ZN15Choix_testsView14tearDownScreenEv>:
}

void Choix_testsView::tearDownScreen()
{
    Choix_testsViewBase::tearDownScreen();
}
 80092ac:	4770      	bx	lr
	...

080092b0 <_ZN15Choix_testsViewD1Ev>:

class Choix_testsView : public Choix_testsViewBase
{
public:
    Choix_testsView();
    virtual ~Choix_testsView() {}
 80092b0:	b510      	push	{r4, lr}
 80092b2:	4604      	mov	r4, r0
 80092b4:	4b02      	ldr	r3, [pc, #8]	@ (80092c0 <_ZN15Choix_testsViewD1Ev+0x10>)
 80092b6:	6003      	str	r3, [r0, #0]
 80092b8:	f7fb ff4c 	bl	8005154 <_ZN19Choix_testsViewBaseD1Ev>
 80092bc:	4620      	mov	r0, r4
 80092be:	bd10      	pop	{r4, pc}
 80092c0:	0802d628 	.word	0x0802d628

080092c4 <_ZN15Choix_testsViewD0Ev>:
 80092c4:	b510      	push	{r4, lr}
 80092c6:	4604      	mov	r4, r0
 80092c8:	4b05      	ldr	r3, [pc, #20]	@ (80092e0 <_ZN15Choix_testsViewD0Ev+0x1c>)
 80092ca:	6003      	str	r3, [r0, #0]
 80092cc:	f7fb ff42 	bl	8005154 <_ZN19Choix_testsViewBaseD1Ev>
 80092d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80092d4:	4620      	mov	r0, r4
 80092d6:	f01f fe03 	bl	8028ee0 <_ZdlPvj>
 80092da:	4620      	mov	r0, r4
 80092dc:	bd10      	pop	{r4, pc}
 80092de:	bf00      	nop
 80092e0:	0802d628 	.word	0x0802d628

080092e4 <_ZN15Choix_testsViewC1Ev>:
Choix_testsView::Choix_testsView()
 80092e4:	b510      	push	{r4, lr}
 80092e6:	4604      	mov	r4, r0
 80092e8:	f7fb ffb2 	bl	8005250 <_ZN19Choix_testsViewBaseC1Ev>
 80092ec:	4b01      	ldr	r3, [pc, #4]	@ (80092f4 <_ZN15Choix_testsViewC1Ev+0x10>)
 80092ee:	6023      	str	r3, [r4, #0]
}
 80092f0:	4620      	mov	r0, r4
 80092f2:	bd10      	pop	{r4, pc}
 80092f4:	0802d628 	.word	0x0802d628

080092f8 <_ZN15Choix_testsView11setupScreenEv>:
{
 80092f8:	b508      	push	{r3, lr}
    Choix_testsViewBase::setupScreen();
 80092fa:	f7fb ff2c 	bl	8005156 <_ZN19Choix_testsViewBase11setupScreenEv>
}
 80092fe:	bd08      	pop	{r3, pc}

08009300 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8009300:	4770      	bx	lr

08009302 <_ZN19FrontendApplicationD0Ev>:
 8009302:	b510      	push	{r4, lr}
 8009304:	4604      	mov	r4, r0
 8009306:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800930a:	f01f fde9 	bl	8028ee0 <_ZdlPvj>
 800930e:	4620      	mov	r0, r4
 8009310:	bd10      	pop	{r4, pc}

08009312 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8009312:	b510      	push	{r4, lr}
 8009314:	4604      	mov	r4, r0
    {
        model.tick();
 8009316:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800931a:	f000 f882 	bl	8009422 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800931e:	4620      	mov	r0, r4
 8009320:	f011 fed4 	bl	801b0cc <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8009324:	bd10      	pop	{r4, pc}
	...

08009328 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009328:	b510      	push	{r4, lr}
 800932a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800932c:	f7fc fd36 	bl	8005d9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009330:	4b01      	ldr	r3, [pc, #4]	@ (8009338 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8009332:	6023      	str	r3, [r4, #0]
{

}
 8009334:	4620      	mov	r0, r4
 8009336:	bd10      	pop	{r4, pc}
 8009338:	0802d65c 	.word	0x0802d65c

0800933c <_ZN13HomePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~HomePresenter() {}
 800933c:	4770      	bx	lr

0800933e <_ZThn4_N13HomePresenterD1Ev>:
 800933e:	3804      	subs	r0, #4
 8009340:	4770      	bx	lr

08009342 <_ZN13HomePresenter8activateEv>:
}

void HomePresenter::activate()
{

}
 8009342:	4770      	bx	lr

08009344 <_ZN13HomePresenter10deactivateEv>:

void HomePresenter::deactivate()
{

}
 8009344:	4770      	bx	lr

08009346 <_ZN13HomePresenterD0Ev>:
 8009346:	b510      	push	{r4, lr}
 8009348:	4604      	mov	r4, r0
 800934a:	2110      	movs	r1, #16
 800934c:	f01f fdc8 	bl	8028ee0 <_ZdlPvj>
 8009350:	4620      	mov	r0, r4
 8009352:	bd10      	pop	{r4, pc}

08009354 <_ZThn4_N13HomePresenterD0Ev>:
 8009354:	b510      	push	{r4, lr}
 8009356:	1f04      	subs	r4, r0, #4
 8009358:	2110      	movs	r1, #16
 800935a:	4620      	mov	r0, r4
 800935c:	f01f fdc0 	bl	8028ee0 <_ZdlPvj>
 8009360:	4620      	mov	r0, r4
 8009362:	bd10      	pop	{r4, pc}

08009364 <_ZN13HomePresenterC1ER8HomeView>:
 8009364:	2200      	movs	r2, #0
 8009366:	6082      	str	r2, [r0, #8]
    : view(v)
 8009368:	4a02      	ldr	r2, [pc, #8]	@ (8009374 <_ZN13HomePresenterC1ER8HomeView+0x10>)
 800936a:	6002      	str	r2, [r0, #0]
 800936c:	3218      	adds	r2, #24
 800936e:	6042      	str	r2, [r0, #4]
 8009370:	60c1      	str	r1, [r0, #12]
}
 8009372:	4770      	bx	lr
 8009374:	0802d6b0 	.word	0x0802d6b0

08009378 <_ZN8HomeView14tearDownScreenEv>:
}

void HomeView::tearDownScreen()
{
    HomeViewBase::tearDownScreen();
}
 8009378:	4770      	bx	lr

0800937a <_ZN8HomeView10pos_departEv>:

void HomeView::pos_depart()
{
 800937a:	b508      	push	{r3, lr}
	HAL_NVIC_SystemReset();
 800937c:	f002 fb26 	bl	800b9cc <HAL_NVIC_SystemReset>
}
 8009380:	bd08      	pop	{r3, pc}
	...

08009384 <_ZN8HomeView15envoi_trame_canEv>:

void HomeView::envoi_trame_can()
{
 8009384:	b500      	push	{lr}
 8009386:	b08d      	sub	sp, #52	@ 0x34
	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
	static uint8_t cpt = 0;
	T_CAN_trame_tx trame_tx;

	trame_tx.header.Identifier = 0x7B0;
 8009388:	f44f 63f6 	mov.w	r3, #1968	@ 0x7b0
 800938c:	9301      	str	r3, [sp, #4]
	trame_tx.header.IdType = FDCAN_STANDARD_ID;
 800938e:	2300      	movs	r3, #0
 8009390:	9302      	str	r3, [sp, #8]
	trame_tx.header.TxFrameType = FDCAN_DATA_FRAME;
 8009392:	9303      	str	r3, [sp, #12]
	trame_tx.header.DataLength = 2;
 8009394:	2202      	movs	r2, #2
 8009396:	9204      	str	r2, [sp, #16]
	trame_tx.header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8009398:	9305      	str	r3, [sp, #20]
	trame_tx.header.BitRateSwitch = FDCAN_BRS_OFF;
 800939a:	9306      	str	r3, [sp, #24]
	trame_tx.header.FDFormat = FDCAN_CLASSIC_CAN;
 800939c:	9307      	str	r3, [sp, #28]
	trame_tx.header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800939e:	9308      	str	r3, [sp, #32]
	trame_tx.header.MessageMarker = 0;
 80093a0:	9309      	str	r3, [sp, #36]	@ 0x24

	trame_tx.data[0] = (uint8_t)(cpt >> 8);
 80093a2:	4908      	ldr	r1, [pc, #32]	@ (80093c4 <_ZN8HomeView15envoi_trame_canEv+0x40>)
 80093a4:	780a      	ldrb	r2, [r1, #0]
 80093a6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
	trame_tx.data[1] = (uint8_t)cpt;
 80093aa:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29

	cpt++;
 80093ae:	3201      	adds	r2, #1
 80093b0:	700a      	strb	r2, [r1, #0]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &trame_tx.header, trame_tx.data);
 80093b2:	aa0a      	add	r2, sp, #40	@ 0x28
 80093b4:	a901      	add	r1, sp, #4
 80093b6:	4804      	ldr	r0, [pc, #16]	@ (80093c8 <_ZN8HomeView15envoi_trame_canEv+0x44>)
 80093b8:	f003 fd2c 	bl	800ce14 <HAL_FDCAN_AddMessageToTxFifoQ>

	//NVIC_SystemReset();
}
 80093bc:	b00d      	add	sp, #52	@ 0x34
 80093be:	f85d fb04 	ldr.w	pc, [sp], #4
 80093c2:	bf00      	nop
 80093c4:	24030aa8 	.word	0x24030aa8
 80093c8:	240005fc 	.word	0x240005fc

080093cc <_ZN8HomeViewD1Ev>:

class HomeView : public HomeViewBase
{
public:
    HomeView();
    virtual ~HomeView() {}
 80093cc:	b510      	push	{r4, lr}
 80093ce:	4604      	mov	r4, r0
 80093d0:	4b02      	ldr	r3, [pc, #8]	@ (80093dc <_ZN8HomeViewD1Ev+0x10>)
 80093d2:	6003      	str	r3, [r0, #0]
 80093d4:	f7fd fc3b 	bl	8006c4e <_ZN12HomeViewBaseD1Ev>
 80093d8:	4620      	mov	r0, r4
 80093da:	bd10      	pop	{r4, pc}
 80093dc:	0802d6d8 	.word	0x0802d6d8

080093e0 <_ZN8HomeViewD0Ev>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	4604      	mov	r4, r0
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <_ZN8HomeViewD0Ev+0x1c>)
 80093e6:	6003      	str	r3, [r0, #0]
 80093e8:	f7fd fc31 	bl	8006c4e <_ZN12HomeViewBaseD1Ev>
 80093ec:	f44f 710f 	mov.w	r1, #572	@ 0x23c
 80093f0:	4620      	mov	r0, r4
 80093f2:	f01f fd75 	bl	8028ee0 <_ZdlPvj>
 80093f6:	4620      	mov	r0, r4
 80093f8:	bd10      	pop	{r4, pc}
 80093fa:	bf00      	nop
 80093fc:	0802d6d8 	.word	0x0802d6d8

08009400 <_ZN8HomeViewC1Ev>:
HomeView::HomeView()
 8009400:	b510      	push	{r4, lr}
 8009402:	4604      	mov	r4, r0
 8009404:	f7fd fc7c 	bl	8006d00 <_ZN12HomeViewBaseC1Ev>
 8009408:	4b01      	ldr	r3, [pc, #4]	@ (8009410 <_ZN8HomeViewC1Ev+0x10>)
 800940a:	6023      	str	r3, [r4, #0]
}
 800940c:	4620      	mov	r0, r4
 800940e:	bd10      	pop	{r4, pc}
 8009410:	0802d6d8 	.word	0x0802d6d8

08009414 <_ZN8HomeView11setupScreenEv>:
{
 8009414:	b508      	push	{r3, lr}
    HomeViewBase::setupScreen();
 8009416:	f7fd fc1b 	bl	8006c50 <_ZN12HomeViewBase11setupScreenEv>
}
 800941a:	bd08      	pop	{r3, pc}

0800941c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800941c:	2200      	movs	r2, #0
 800941e:	6002      	str	r2, [r0, #0]
{

}
 8009420:	4770      	bx	lr

08009422 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8009422:	4770      	bx	lr

08009424 <_ZN23Robot_en_matchPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Robot_en_matchPresenter() {}
 8009424:	4770      	bx	lr

08009426 <_ZThn4_N23Robot_en_matchPresenterD1Ev>:
 8009426:	3804      	subs	r0, #4
 8009428:	4770      	bx	lr

0800942a <_ZN23Robot_en_matchPresenter8activateEv>:
}

void Robot_en_matchPresenter::activate()
{

}
 800942a:	4770      	bx	lr

0800942c <_ZN23Robot_en_matchPresenter10deactivateEv>:

void Robot_en_matchPresenter::deactivate()
{

}
 800942c:	4770      	bx	lr

0800942e <_ZN23Robot_en_matchPresenterD0Ev>:
 800942e:	b510      	push	{r4, lr}
 8009430:	4604      	mov	r4, r0
 8009432:	2110      	movs	r1, #16
 8009434:	f01f fd54 	bl	8028ee0 <_ZdlPvj>
 8009438:	4620      	mov	r0, r4
 800943a:	bd10      	pop	{r4, pc}

0800943c <_ZThn4_N23Robot_en_matchPresenterD0Ev>:
 800943c:	b510      	push	{r4, lr}
 800943e:	1f04      	subs	r4, r0, #4
 8009440:	2110      	movs	r1, #16
 8009442:	4620      	mov	r0, r4
 8009444:	f01f fd4c 	bl	8028ee0 <_ZdlPvj>
 8009448:	4620      	mov	r0, r4
 800944a:	bd10      	pop	{r4, pc}

0800944c <_ZN23Robot_en_matchPresenterC1ER18Robot_en_matchView>:
 800944c:	2200      	movs	r2, #0
 800944e:	6082      	str	r2, [r0, #8]
    : view(v)
 8009450:	4a02      	ldr	r2, [pc, #8]	@ (800945c <_ZN23Robot_en_matchPresenterC1ER18Robot_en_matchView+0x10>)
 8009452:	6002      	str	r2, [r0, #0]
 8009454:	3218      	adds	r2, #24
 8009456:	6042      	str	r2, [r0, #4]
 8009458:	60c1      	str	r1, [r0, #12]
}
 800945a:	4770      	bx	lr
 800945c:	0802d714 	.word	0x0802d714

08009460 <_ZN18Robot_en_matchView14tearDownScreenEv>:
}

void Robot_en_matchView::tearDownScreen()
{
    Robot_en_matchViewBase::tearDownScreen();
}
 8009460:	4770      	bx	lr
	...

08009464 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv>:

void Robot_en_matchView::reception_can_lidars_en_match()
{
 8009464:	b508      	push	{r3, lr}
	int32_t fifo = read_fifo();
 8009466:	f7f8 fa67 	bl	8001938 <_Z9read_fifov>

	if(fifo != -1)
 800946a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800946e:	d00a      	beq.n	8009486 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x22>
	{
		switch (tab_recep_trames_can[fifo].header.Identifier)
 8009470:	2368      	movs	r3, #104	@ 0x68
 8009472:	fb00 f303 	mul.w	r3, r0, r3
 8009476:	4a15      	ldr	r2, [pc, #84]	@ (80094cc <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x68>)
 8009478:	58d3      	ldr	r3, [r2, r3]
 800947a:	2bdc      	cmp	r3, #220	@ 0xdc
 800947c:	d017      	beq.n	80094ae <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x4a>
 800947e:	2be6      	cmp	r3, #230	@ 0xe6
 8009480:	d01c      	beq.n	80094bc <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x58>
 8009482:	2bd2      	cmp	r3, #210	@ 0xd2
 8009484:	d000      	beq.n	8009488 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x24>
			case 230:
				tab_coord_point_C = tab_recep_trames_can[fifo].data;
				break;
		}
	}
}
 8009486:	bd08      	pop	{r3, pc}
				tab_coord_point_A = tab_recep_trames_can[fifo].data;
 8009488:	2268      	movs	r2, #104	@ 0x68
 800948a:	4b11      	ldr	r3, [pc, #68]	@ (80094d0 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x6c>)
 800948c:	fb02 3300 	mla	r3, r2, r0, r3
 8009490:	4a10      	ldr	r2, [pc, #64]	@ (80094d4 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x70>)
 8009492:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8009494:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009498:	490f      	ldr	r1, [pc, #60]	@ (80094d8 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x74>)
 800949a:	68ca      	ldr	r2, [r1, #12]
 800949c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80094a0:	4b0e      	ldr	r3, [pc, #56]	@ (80094dc <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x78>)
 80094a2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80094a4:	60cb      	str	r3, [r1, #12]
 80094a6:	f3bf 8f4f 	dsb	sy
    __NOP();
 80094aa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80094ac:	e7fd      	b.n	80094aa <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x46>
				tab_coord_point_B = tab_recep_trames_can[fifo].data;
 80094ae:	2268      	movs	r2, #104	@ 0x68
 80094b0:	4b07      	ldr	r3, [pc, #28]	@ (80094d0 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x6c>)
 80094b2:	fb02 3300 	mla	r3, r2, r0, r3
 80094b6:	4a0a      	ldr	r2, [pc, #40]	@ (80094e0 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x7c>)
 80094b8:	6013      	str	r3, [r2, #0]
				break;
 80094ba:	e7e4      	b.n	8009486 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x22>
				tab_coord_point_C = tab_recep_trames_can[fifo].data;
 80094bc:	2268      	movs	r2, #104	@ 0x68
 80094be:	4b04      	ldr	r3, [pc, #16]	@ (80094d0 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x6c>)
 80094c0:	fb02 3300 	mla	r3, r2, r0, r3
 80094c4:	4a07      	ldr	r2, [pc, #28]	@ (80094e4 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x80>)
 80094c6:	6013      	str	r3, [r2, #0]
}
 80094c8:	e7dd      	b.n	8009486 <_ZN18Robot_en_matchView29reception_can_lidars_en_matchEv+0x22>
 80094ca:	bf00      	nop
 80094cc:	2400079c 	.word	0x2400079c
 80094d0:	240007c4 	.word	0x240007c4
 80094d4:	24000364 	.word	0x24000364
 80094d8:	e000ed00 	.word	0xe000ed00
 80094dc:	05fa0004 	.word	0x05fa0004
 80094e0:	24000360 	.word	0x24000360
 80094e4:	2400035c 	.word	0x2400035c

080094e8 <_ZN18Robot_en_matchViewD1Ev>:

class Robot_en_matchView : public Robot_en_matchViewBase
{
public:
    Robot_en_matchView();
    virtual ~Robot_en_matchView() {}
 80094e8:	b510      	push	{r4, lr}
 80094ea:	4604      	mov	r4, r0
 80094ec:	4b02      	ldr	r3, [pc, #8]	@ (80094f8 <_ZN18Robot_en_matchViewD1Ev+0x10>)
 80094ee:	6003      	str	r3, [r0, #0]
 80094f0:	f7fd feeb 	bl	80072ca <_ZN22Robot_en_matchViewBaseD1Ev>
 80094f4:	4620      	mov	r0, r4
 80094f6:	bd10      	pop	{r4, pc}
 80094f8:	0802d73c 	.word	0x0802d73c

080094fc <_ZN18Robot_en_matchViewD0Ev>:
 80094fc:	b510      	push	{r4, lr}
 80094fe:	4604      	mov	r4, r0
 8009500:	4b04      	ldr	r3, [pc, #16]	@ (8009514 <_ZN18Robot_en_matchViewD0Ev+0x18>)
 8009502:	6003      	str	r3, [r0, #0]
 8009504:	f7fd fee1 	bl	80072ca <_ZN22Robot_en_matchViewBaseD1Ev>
 8009508:	21e0      	movs	r1, #224	@ 0xe0
 800950a:	4620      	mov	r0, r4
 800950c:	f01f fce8 	bl	8028ee0 <_ZdlPvj>
 8009510:	4620      	mov	r0, r4
 8009512:	bd10      	pop	{r4, pc}
 8009514:	0802d73c 	.word	0x0802d73c

08009518 <_ZN18Robot_en_matchViewC1Ev>:
Robot_en_matchView::Robot_en_matchView()
 8009518:	b510      	push	{r4, lr}
 800951a:	4604      	mov	r4, r0
 800951c:	f7fd fee4 	bl	80072e8 <_ZN22Robot_en_matchViewBaseC1Ev>
 8009520:	4b01      	ldr	r3, [pc, #4]	@ (8009528 <_ZN18Robot_en_matchViewC1Ev+0x10>)
 8009522:	6023      	str	r3, [r4, #0]
}
 8009524:	4620      	mov	r0, r4
 8009526:	bd10      	pop	{r4, pc}
 8009528:	0802d73c 	.word	0x0802d73c

0800952c <_ZN18Robot_en_matchView11setupScreenEv>:
{
 800952c:	b508      	push	{r3, lr}
    Robot_en_matchViewBase::setupScreen();
 800952e:	f7fd fecd 	bl	80072cc <_ZN22Robot_en_matchViewBase11setupScreenEv>
}
 8009532:	bd08      	pop	{r3, pc}

08009534 <_ZN19Robot_pretPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Robot_pretPresenter() {}
 8009534:	4770      	bx	lr

08009536 <_ZThn4_N19Robot_pretPresenterD1Ev>:
 8009536:	3804      	subs	r0, #4
 8009538:	4770      	bx	lr

0800953a <_ZN19Robot_pretPresenter8activateEv>:
}

void Robot_pretPresenter::activate()
{

}
 800953a:	4770      	bx	lr

0800953c <_ZN19Robot_pretPresenter10deactivateEv>:

void Robot_pretPresenter::deactivate()
{

}
 800953c:	4770      	bx	lr

0800953e <_ZN19Robot_pretPresenterD0Ev>:
 800953e:	b510      	push	{r4, lr}
 8009540:	4604      	mov	r4, r0
 8009542:	2110      	movs	r1, #16
 8009544:	f01f fccc 	bl	8028ee0 <_ZdlPvj>
 8009548:	4620      	mov	r0, r4
 800954a:	bd10      	pop	{r4, pc}

0800954c <_ZThn4_N19Robot_pretPresenterD0Ev>:
 800954c:	b510      	push	{r4, lr}
 800954e:	1f04      	subs	r4, r0, #4
 8009550:	2110      	movs	r1, #16
 8009552:	4620      	mov	r0, r4
 8009554:	f01f fcc4 	bl	8028ee0 <_ZdlPvj>
 8009558:	4620      	mov	r0, r4
 800955a:	bd10      	pop	{r4, pc}

0800955c <_ZN19Robot_pretPresenterC1ER14Robot_pretView>:
 800955c:	2200      	movs	r2, #0
 800955e:	6082      	str	r2, [r0, #8]
    : view(v)
 8009560:	4a02      	ldr	r2, [pc, #8]	@ (800956c <_ZN19Robot_pretPresenterC1ER14Robot_pretView+0x10>)
 8009562:	6002      	str	r2, [r0, #0]
 8009564:	3218      	adds	r2, #24
 8009566:	6042      	str	r2, [r0, #4]
 8009568:	60c1      	str	r1, [r0, #12]
}
 800956a:	4770      	bx	lr
 800956c:	0802d774 	.word	0x0802d774

08009570 <_ZN14Robot_pretView14tearDownScreenEv>:
}

void Robot_pretView::tearDownScreen()
{
    Robot_pretViewBase::tearDownScreen();
}
 8009570:	4770      	bx	lr

08009572 <_ZN14Robot_pretView15attente_tiretteEv>:

void Robot_pretView::attente_tirette()
{
	// mettre la variable "tirette" à 1 lorsqu'elle est retirée
}
 8009572:	4770      	bx	lr

08009574 <_ZN14Robot_pretViewD1Ev>:

class Robot_pretView : public Robot_pretViewBase
{
public:
    Robot_pretView();
    virtual ~Robot_pretView() {}
 8009574:	b510      	push	{r4, lr}
 8009576:	4604      	mov	r4, r0
 8009578:	4b02      	ldr	r3, [pc, #8]	@ (8009584 <_ZN14Robot_pretViewD1Ev+0x10>)
 800957a:	6003      	str	r3, [r0, #0]
 800957c:	f7fd ffbf 	bl	80074fe <_ZN18Robot_pretViewBaseD1Ev>
 8009580:	4620      	mov	r0, r4
 8009582:	bd10      	pop	{r4, pc}
 8009584:	0802d79c 	.word	0x0802d79c

08009588 <_ZN14Robot_pretViewD0Ev>:
 8009588:	b510      	push	{r4, lr}
 800958a:	4604      	mov	r4, r0
 800958c:	4b05      	ldr	r3, [pc, #20]	@ (80095a4 <_ZN14Robot_pretViewD0Ev+0x1c>)
 800958e:	6003      	str	r3, [r0, #0]
 8009590:	f7fd ffb5 	bl	80074fe <_ZN18Robot_pretViewBaseD1Ev>
 8009594:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8009598:	4620      	mov	r0, r4
 800959a:	f01f fca1 	bl	8028ee0 <_ZdlPvj>
 800959e:	4620      	mov	r0, r4
 80095a0:	bd10      	pop	{r4, pc}
 80095a2:	bf00      	nop
 80095a4:	0802d79c 	.word	0x0802d79c

080095a8 <_ZN14Robot_pretViewC1Ev>:
Robot_pretView::Robot_pretView()
 80095a8:	b510      	push	{r4, lr}
 80095aa:	4604      	mov	r4, r0
 80095ac:	f7fd fffc 	bl	80075a8 <_ZN18Robot_pretViewBaseC1Ev>
 80095b0:	4b01      	ldr	r3, [pc, #4]	@ (80095b8 <_ZN14Robot_pretViewC1Ev+0x10>)
 80095b2:	6023      	str	r3, [r4, #0]
}
 80095b4:	4620      	mov	r0, r4
 80095b6:	bd10      	pop	{r4, pc}
 80095b8:	0802d79c 	.word	0x0802d79c

080095bc <_ZN14Robot_pretView11setupScreenEv>:
{
 80095bc:	b508      	push	{r3, lr}
    Robot_pretViewBase::setupScreen();
 80095be:	f7fd ff9f 	bl	8007500 <_ZN18Robot_pretViewBase11setupScreenEv>
}
 80095c2:	bd08      	pop	{r3, pc}

080095c4 <_ZN23Test_lidar_basPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Test_lidar_basPresenter() {}
 80095c4:	4770      	bx	lr

080095c6 <_ZThn4_N23Test_lidar_basPresenterD1Ev>:
 80095c6:	3804      	subs	r0, #4
 80095c8:	4770      	bx	lr

080095ca <_ZN23Test_lidar_basPresenter8activateEv>:
}

void Test_lidar_basPresenter::activate()
{

}
 80095ca:	4770      	bx	lr

080095cc <_ZN23Test_lidar_basPresenter10deactivateEv>:

void Test_lidar_basPresenter::deactivate()
{

}
 80095cc:	4770      	bx	lr

080095ce <_ZN23Test_lidar_basPresenterD0Ev>:
 80095ce:	b510      	push	{r4, lr}
 80095d0:	4604      	mov	r4, r0
 80095d2:	2110      	movs	r1, #16
 80095d4:	f01f fc84 	bl	8028ee0 <_ZdlPvj>
 80095d8:	4620      	mov	r0, r4
 80095da:	bd10      	pop	{r4, pc}

080095dc <_ZThn4_N23Test_lidar_basPresenterD0Ev>:
 80095dc:	b510      	push	{r4, lr}
 80095de:	1f04      	subs	r4, r0, #4
 80095e0:	2110      	movs	r1, #16
 80095e2:	4620      	mov	r0, r4
 80095e4:	f01f fc7c 	bl	8028ee0 <_ZdlPvj>
 80095e8:	4620      	mov	r0, r4
 80095ea:	bd10      	pop	{r4, pc}

080095ec <_ZN23Test_lidar_basPresenterC1ER18Test_lidar_basView>:
 80095ec:	2200      	movs	r2, #0
 80095ee:	6082      	str	r2, [r0, #8]
    : view(v)
 80095f0:	4a02      	ldr	r2, [pc, #8]	@ (80095fc <_ZN23Test_lidar_basPresenterC1ER18Test_lidar_basView+0x10>)
 80095f2:	6002      	str	r2, [r0, #0]
 80095f4:	3218      	adds	r2, #24
 80095f6:	6042      	str	r2, [r0, #4]
 80095f8:	60c1      	str	r1, [r0, #12]
}
 80095fa:	4770      	bx	lr
 80095fc:	0802d7d4 	.word	0x0802d7d4

08009600 <_ZNK11CustomPoint14getMinimalRectEv>:
        invalidate(); // Rafraîchir l'affichage
    }

    virtual touchgfx::Rect getMinimalRect() const override
    {
        return touchgfx::Rect(x, y, 2, 2); // Taille minimale du point
 8009600:	f9b1 c02c 	ldrsh.w	ip, [r1, #44]	@ 0x2c
 8009604:	f9b1 2030 	ldrsh.w	r2, [r1, #48]	@ 0x30
 8009608:	f8a0 c000 	strh.w	ip, [r0]
 800960c:	8042      	strh	r2, [r0, #2]
 800960e:	2202      	movs	r2, #2
 8009610:	8082      	strh	r2, [r0, #4]
 8009612:	80c2      	strh	r2, [r0, #6]
    }
 8009614:	4770      	bx	lr

08009616 <_ZN18Test_lidar_basView14tearDownScreenEv>:
}

void Test_lidar_basView::tearDownScreen()
{
    Test_lidar_basViewBase::tearDownScreen();
}
 8009616:	4770      	bx	lr

08009618 <_ZN18Test_lidar_basView23donnees_lidar_bas_avantEv>:
void Test_lidar_basView::donnees_lidar_bas_avant()
{
	// point A obstacle 1
	//point1.setXY(tab[0], tab[1]);
	//point1.invalidate();
}
 8009618:	4770      	bx	lr

0800961a <_ZN18Test_lidar_basView25donnees_lidar_bas_arriereEv>:

void Test_lidar_basView::donnees_lidar_bas_arriere()
{

}
 800961a:	4770      	bx	lr

0800961c <_ZN11CustomPointD1Ev>:
class CustomPoint : public touchgfx::CanvasWidget
 800961c:	4770      	bx	lr

0800961e <_ZN11CustomPointD0Ev>:
 800961e:	b510      	push	{r4, lr}
 8009620:	4604      	mov	r4, r0
 8009622:	2134      	movs	r1, #52	@ 0x34
 8009624:	f01f fc5c 	bl	8028ee0 <_ZdlPvj>
 8009628:	4620      	mov	r0, r4
 800962a:	bd10      	pop	{r4, pc}

0800962c <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv>:
{
 800962c:	b508      	push	{r3, lr}
	int32_t fifo = read_fifo();
 800962e:	f7f8 f983 	bl	8001938 <_Z9read_fifov>
	if (fifo != -1)
 8009632:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009636:	d006      	beq.n	8009646 <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv+0x1a>
		switch (tab_recep_trames_can[fifo].header.Identifier)
 8009638:	2368      	movs	r3, #104	@ 0x68
 800963a:	fb00 f303 	mul.w	r3, r0, r3
 800963e:	4a0c      	ldr	r2, [pc, #48]	@ (8009670 <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv+0x44>)
 8009640:	58d3      	ldr	r3, [r2, r3]
 8009642:	2bc8      	cmp	r3, #200	@ 0xc8
 8009644:	d000      	beq.n	8009648 <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv+0x1c>
}
 8009646:	bd08      	pop	{r3, pc}
			tab_coord_point_A = tab_recep_trames_can[fifo].data;
 8009648:	2268      	movs	r2, #104	@ 0x68
 800964a:	4b0a      	ldr	r3, [pc, #40]	@ (8009674 <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv+0x48>)
 800964c:	fb02 3300 	mla	r3, r2, r0, r3
 8009650:	4a09      	ldr	r2, [pc, #36]	@ (8009678 <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv+0x4c>)
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009658:	4908      	ldr	r1, [pc, #32]	@ (800967c <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv+0x50>)
 800965a:	68ca      	ldr	r2, [r1, #12]
 800965c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009660:	4b07      	ldr	r3, [pc, #28]	@ (8009680 <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv+0x54>)
 8009662:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009664:	60cb      	str	r3, [r1, #12]
 8009666:	f3bf 8f4f 	dsb	sy
    __NOP();
 800966a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800966c:	e7fd      	b.n	800966a <_ZN18Test_lidar_basView41reception_can_lidars_test_lidar_bas_avantEv+0x3e>
 800966e:	bf00      	nop
 8009670:	2400079c 	.word	0x2400079c
 8009674:	240007c4 	.word	0x240007c4
 8009678:	24000364 	.word	0x24000364
 800967c:	e000ed00 	.word	0xe000ed00
 8009680:	05fa0004 	.word	0x05fa0004

08009684 <_ZN18Test_lidar_basViewD1Ev>:

class Test_lidar_basView : public Test_lidar_basViewBase
{
public:
    Test_lidar_basView();
    virtual ~Test_lidar_basView() {}
 8009684:	b510      	push	{r4, lr}
 8009686:	4604      	mov	r4, r0
 8009688:	4b02      	ldr	r3, [pc, #8]	@ (8009694 <_ZN18Test_lidar_basViewD1Ev+0x10>)
 800968a:	6003      	str	r3, [r0, #0]
 800968c:	f7fe fb08 	bl	8007ca0 <_ZN22Test_lidar_basViewBaseD1Ev>
 8009690:	4620      	mov	r0, r4
 8009692:	bd10      	pop	{r4, pc}
 8009694:	0802d874 	.word	0x0802d874

08009698 <_ZN18Test_lidar_basViewD0Ev>:
 8009698:	b510      	push	{r4, lr}
 800969a:	4604      	mov	r4, r0
 800969c:	4b04      	ldr	r3, [pc, #16]	@ (80096b0 <_ZN18Test_lidar_basViewD0Ev+0x18>)
 800969e:	6003      	str	r3, [r0, #0]
 80096a0:	f7fe fafe 	bl	8007ca0 <_ZN22Test_lidar_basViewBaseD1Ev>
 80096a4:	4903      	ldr	r1, [pc, #12]	@ (80096b4 <_ZN18Test_lidar_basViewD0Ev+0x1c>)
 80096a6:	4620      	mov	r0, r4
 80096a8:	f01f fc1a 	bl	8028ee0 <_ZdlPvj>
 80096ac:	4620      	mov	r0, r4
 80096ae:	bd10      	pop	{r4, pc}
 80096b0:	0802d874 	.word	0x0802d874
 80096b4:	00024c5c 	.word	0x00024c5c

080096b8 <_ZN18Test_lidar_basViewC1Ev>:
Test_lidar_basView::Test_lidar_basView()
 80096b8:	b510      	push	{r4, lr}
 80096ba:	4604      	mov	r4, r0
 80096bc:	f7fe fb7a 	bl	8007db4 <_ZN22Test_lidar_basViewBaseC1Ev>
 80096c0:	4b08      	ldr	r3, [pc, #32]	@ (80096e4 <_ZN18Test_lidar_basViewC1Ev+0x2c>)
 80096c2:	6023      	str	r3, [r4, #0]
    CustomPoint() : x(0), y(0) {} // Position initiale à (0,0)
 80096c4:	4808      	ldr	r0, [pc, #32]	@ (80096e8 <_ZN18Test_lidar_basViewC1Ev+0x30>)
 80096c6:	4420      	add	r0, r4
 80096c8:	f00d ff5e 	bl	8017588 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80096cc:	f504 3310 	add.w	r3, r4, #147456	@ 0x24000
 80096d0:	4a06      	ldr	r2, [pc, #24]	@ (80096ec <_ZN18Test_lidar_basViewC1Ev+0x34>)
 80096d2:	f8c3 2c28 	str.w	r2, [r3, #3112]	@ 0xc28
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8c3 2c54 	str.w	r2, [r3, #3156]	@ 0xc54
 80096dc:	f8c3 2c58 	str.w	r2, [r3, #3160]	@ 0xc58
}
 80096e0:	4620      	mov	r0, r4
 80096e2:	bd10      	pop	{r4, pc}
 80096e4:	0802d874 	.word	0x0802d874
 80096e8:	00024c28 	.word	0x00024c28
 80096ec:	0802d7fc 	.word	0x0802d7fc

080096f0 <_GLOBAL__sub_I_x>:
}
 80096f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
touchgfx::MoveAnimator< touchgfx::Circle > points[800];
 80096f4:	4c2e      	ldr	r4, [pc, #184]	@ (80097b0 <_GLOBAL__sub_I_x+0xc0>)
 80096f6:	4e2f      	ldr	r6, [pc, #188]	@ (80097b4 <_GLOBAL__sub_I_x+0xc4>)
 80096f8:	4426      	add	r6, r4
 80096fa:	4f2f      	ldr	r7, [pc, #188]	@ (80097b8 <_GLOBAL__sub_I_x+0xc8>)
          moveAnimationRunning(false),
 80096fc:	2500      	movs	r5, #0
          moveAnimationEndedCallback(0)
 80096fe:	4620      	mov	r0, r4
 8009700:	f00d fa42 	bl	8016b88 <_ZN8touchgfx6CircleC1Ev>
 8009704:	6027      	str	r7, [r4, #0]
          moveAnimationRunning(false),
 8009706:	f884 5046 	strb.w	r5, [r4, #70]	@ 0x46
          moveAnimationCounter(0),
 800970a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
          moveAnimationDelay(0),
 800970e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
          moveAnimationDuration(0),
 8009712:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
          moveAnimationStartX(0),
 8009716:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
          moveAnimationStartY(0),
 800971a:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
          moveAnimationEndX(0),
 800971e:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
          moveAnimationEndY(0),
 8009722:	f8a4 5054 	strh.w	r5, [r4, #84]	@ 0x54
          moveAnimationXEquation(),
 8009726:	65a5      	str	r5, [r4, #88]	@ 0x58
          moveAnimationYEquation(),
 8009728:	65e5      	str	r5, [r4, #92]	@ 0x5c
          moveAnimationEndedCallback(0)
 800972a:	6625      	str	r5, [r4, #96]	@ 0x60
 800972c:	3464      	adds	r4, #100	@ 0x64
 800972e:	42b4      	cmp	r4, r6
 8009730:	d1e5      	bne.n	80096fe <_GLOBAL__sub_I_x+0xe>
 8009732:	4c22      	ldr	r4, [pc, #136]	@ (80097bc <_GLOBAL__sub_I_x+0xcc>)
 8009734:	f504 5a7a 	add.w	sl, r4, #16000	@ 0x3e80
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8009738:	4f21      	ldr	r7, [pc, #132]	@ (80097c0 <_GLOBAL__sub_I_x+0xd0>)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 800973a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80097d4 <_GLOBAL__sub_I_x+0xe4>
 800973e:	f108 0924 	add.w	r9, r8, #36	@ 0x24
 8009742:	e01c      	b.n	800977e <_GLOBAL__sub_I_x+0x8e>
        return instance->lcdRef;
 8009744:	6898      	ldr	r0, [r3, #8]
        bool compat = HAL::lcd().framebufferFormat() == format;
 8009746:	6803      	ldr	r3, [r0, #0]
 8009748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974a:	4798      	blx	r3
 800974c:	2801      	cmp	r0, #1
 800974e:	bf14      	ite	ne
 8009750:	2500      	movne	r5, #0
 8009752:	2501      	moveq	r5, #1
        return auxiliaryLCD;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8009758:	b130      	cbz	r0, 8009768 <_GLOBAL__sub_I_x+0x78>
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800975a:	6803      	ldr	r3, [r0, #0]
 800975c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800975e:	4798      	blx	r3
 8009760:	2801      	cmp	r0, #1
 8009762:	bf08      	it	eq
 8009764:	f045 0501 	orreq.w	r5, r5, #1
 8009768:	b1cd      	cbz	r5, 800979e <_GLOBAL__sub_I_x+0xae>
 800976a:	2300      	movs	r3, #0
 800976c:	f846 3c08 	str.w	r3, [r6, #-8]
 8009770:	f846 8c14 	str.w	r8, [r6, #-20]
 8009774:	f846 9c0c 	str.w	r9, [r6, #-12]
touchgfx::PainterRGB888 pointPainters[800];
 8009778:	3414      	adds	r4, #20
 800977a:	4554      	cmp	r4, sl
 800977c:	d015      	beq.n	80097aa <_GLOBAL__sub_I_x+0xba>
    AbstractPainter()
 800977e:	4626      	mov	r6, r4
        : widgetWidth(0)
 8009780:	2300      	movs	r3, #0
 8009782:	f824 3c10 	strh.w	r3, [r4, #-16]
        : AbstractPainter()
 8009786:	4b0f      	ldr	r3, [pc, #60]	@ (80097c4 <_GLOBAL__sub_I_x+0xd4>)
 8009788:	f844 3c14 	str.w	r3, [r4, #-20]
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009792:	2a00      	cmp	r2, #0
 8009794:	d0d6      	beq.n	8009744 <_GLOBAL__sub_I_x+0x54>
 8009796:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009798:	2800      	cmp	r0, #0
 800979a:	d1d4      	bne.n	8009746 <_GLOBAL__sub_I_x+0x56>
 800979c:	e7d2      	b.n	8009744 <_GLOBAL__sub_I_x+0x54>
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 800979e:	4b0a      	ldr	r3, [pc, #40]	@ (80097c8 <_GLOBAL__sub_I_x+0xd8>)
 80097a0:	4a0a      	ldr	r2, [pc, #40]	@ (80097cc <_GLOBAL__sub_I_x+0xdc>)
 80097a2:	2127      	movs	r1, #39	@ 0x27
 80097a4:	480a      	ldr	r0, [pc, #40]	@ (80097d0 <_GLOBAL__sub_I_x+0xe0>)
 80097a6:	f01f ff13 	bl	80295d0 <__assert_func>
}
 80097aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ae:	bf00      	nop
 80097b0:	2403492c 	.word	0x2403492c
 80097b4:	00013880 	.word	0x00013880
 80097b8:	0802d208 	.word	0x0802d208
 80097bc:	24030ac0 	.word	0x24030ac0
 80097c0:	240621b8 	.word	0x240621b8
 80097c4:	0802c2b8 	.word	0x0802c2b8
 80097c8:	0802c1a4 	.word	0x0802c1a4
 80097cc:	0802c204 	.word	0x0802c204
 80097d0:	0802c240 	.word	0x0802c240
 80097d4:	0802dee8 	.word	0x0802dee8

080097d8 <_GLOBAL__sub_D_x>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
touchgfx::PainterRGB888 pointPainters[800];
 80097da:	4c0a      	ldr	r4, [pc, #40]	@ (8009804 <_GLOBAL__sub_D_x+0x2c>)
 80097dc:	f5a4 557a 	sub.w	r5, r4, #16000	@ 0x3e80
 80097e0:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4620      	mov	r0, r4
 80097e8:	4798      	blx	r3
 80097ea:	42ac      	cmp	r4, r5
 80097ec:	d1f8      	bne.n	80097e0 <_GLOBAL__sub_D_x+0x8>
touchgfx::MoveAnimator< touchgfx::Circle > points[800];
 80097ee:	4c06      	ldr	r4, [pc, #24]	@ (8009808 <_GLOBAL__sub_D_x+0x30>)
 80097f0:	4d06      	ldr	r5, [pc, #24]	@ (800980c <_GLOBAL__sub_D_x+0x34>)
 80097f2:	f854 3d64 	ldr.w	r3, [r4, #-100]!
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4620      	mov	r0, r4
 80097fa:	4798      	blx	r3
 80097fc:	42ac      	cmp	r4, r5
 80097fe:	d1f8      	bne.n	80097f2 <_GLOBAL__sub_D_x+0x1a>
}
 8009800:	bd38      	pop	{r3, r4, r5, pc}
 8009802:	bf00      	nop
 8009804:	2403492c 	.word	0x2403492c
 8009808:	240481ac 	.word	0x240481ac
 800980c:	2403492c 	.word	0x2403492c

08009810 <_ZN18Test_lidar_basView11setupScreenEv>:
{
 8009810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009814:	4607      	mov	r7, r0
    Test_lidar_basViewBase::setupScreen();
 8009816:	f7fe f9f6 	bl	8007c06 <_ZN22Test_lidar_basViewBase11setupScreenEv>
    for(uint16_t i = 0; i < buffer_amnt; i++){
 800981a:	4c20      	ldr	r4, [pc, #128]	@ (800989c <_ZN18Test_lidar_basView11setupScreenEv+0x8c>)
 800981c:	4e20      	ldr	r6, [pc, #128]	@ (80098a0 <_ZN18Test_lidar_basView11setupScreenEv+0x90>)
    Test_lidar_basViewBase::setupScreen();
 800981e:	2500      	movs	r5, #0
        setWidth(width);
 8009820:	f44f 7a48 	mov.w	sl, #800	@ 0x320
        setHeight(height);
 8009824:	f44f 79f0 	mov.w	r9, #480	@ 0x1e0
        this->circleRadius = CWRUtil::toQ5(r);
 8009828:	f04f 0840 	mov.w	r8, #64	@ 0x40
        points[i].setPosition(i + 20, i + 20, 800, 480);
 800982c:	f105 0b14 	add.w	fp, r5, #20
 8009830:	fa0f fb8b 	sxth.w	fp, fp
        setX(x);
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009838:	4659      	mov	r1, fp
 800983a:	4620      	mov	r0, r4
 800983c:	4798      	blx	r3
        setY(y);
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009842:	4659      	mov	r1, fp
 8009844:	4620      	mov	r0, r4
 8009846:	4798      	blx	r3
        setWidth(width);
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984c:	4651      	mov	r1, sl
 800984e:	4620      	mov	r0, r4
 8009850:	4798      	blx	r3
        setHeight(height);
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009856:	4649      	mov	r1, r9
 8009858:	4620      	mov	r0, r4
 800985a:	4798      	blx	r3
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800985c:	016b      	lsls	r3, r5, #5
 800985e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
        this->circleCenterX = CWRUtil::toQ5(x);
 8009862:	62e3      	str	r3, [r4, #44]	@ 0x2c
        this->circleCenterY = CWRUtil::toQ5(y);
 8009864:	6323      	str	r3, [r4, #48]	@ 0x30
        this->circleRadius = CWRUtil::toQ5(r);
 8009866:	f8c4 8034 	str.w	r8, [r4, #52]	@ 0x34
        this->circleLineWidth = CWRUtil::toQ5(width);
 800986a:	2300      	movs	r3, #0
 800986c:	6423      	str	r3, [r4, #64]	@ 0x40
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 800986e:	63a3      	str	r3, [r4, #56]	@ 0x38
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8009870:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8009874:	63e3      	str	r3, [r4, #60]	@ 0x3c
        pointPainters[i].setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009876:	6833      	ldr	r3, [r6, #0]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	f04f 31ff 	mov.w	r1, #4294967295
 800987e:	4630      	mov	r0, r6
 8009880:	4798      	blx	r3
 8009882:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009884:	4621      	mov	r1, r4
 8009886:	1d38      	adds	r0, r7, #4
 8009888:	f00a fc94 	bl	80141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(uint16_t i = 0; i < buffer_amnt; i++){
 800988c:	3501      	adds	r5, #1
 800988e:	3464      	adds	r4, #100	@ 0x64
 8009890:	3614      	adds	r6, #20
 8009892:	2d64      	cmp	r5, #100	@ 0x64
 8009894:	d1ca      	bne.n	800982c <_ZN18Test_lidar_basView11setupScreenEv+0x1c>
}
 8009896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989a:	bf00      	nop
 800989c:	2403492c 	.word	0x2403492c
 80098a0:	24030aac 	.word	0x24030aac

080098a4 <_ZN24Test_lidar_hautPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Test_lidar_hautPresenter() {}
 80098a4:	4770      	bx	lr

080098a6 <_ZThn4_N24Test_lidar_hautPresenterD1Ev>:
 80098a6:	3804      	subs	r0, #4
 80098a8:	4770      	bx	lr

080098aa <_ZN24Test_lidar_hautPresenter8activateEv>:
}

void Test_lidar_hautPresenter::activate()
{

}
 80098aa:	4770      	bx	lr

080098ac <_ZN24Test_lidar_hautPresenter10deactivateEv>:

void Test_lidar_hautPresenter::deactivate()
{

}
 80098ac:	4770      	bx	lr

080098ae <_ZN24Test_lidar_hautPresenterD0Ev>:
 80098ae:	b510      	push	{r4, lr}
 80098b0:	4604      	mov	r4, r0
 80098b2:	2110      	movs	r1, #16
 80098b4:	f01f fb14 	bl	8028ee0 <_ZdlPvj>
 80098b8:	4620      	mov	r0, r4
 80098ba:	bd10      	pop	{r4, pc}

080098bc <_ZThn4_N24Test_lidar_hautPresenterD0Ev>:
 80098bc:	b510      	push	{r4, lr}
 80098be:	1f04      	subs	r4, r0, #4
 80098c0:	2110      	movs	r1, #16
 80098c2:	4620      	mov	r0, r4
 80098c4:	f01f fb0c 	bl	8028ee0 <_ZdlPvj>
 80098c8:	4620      	mov	r0, r4
 80098ca:	bd10      	pop	{r4, pc}

080098cc <_ZN24Test_lidar_hautPresenterC1ER19Test_lidar_hautView>:
 80098cc:	2200      	movs	r2, #0
 80098ce:	6082      	str	r2, [r0, #8]
    : view(v)
 80098d0:	4a02      	ldr	r2, [pc, #8]	@ (80098dc <_ZN24Test_lidar_hautPresenterC1ER19Test_lidar_hautView+0x10>)
 80098d2:	6002      	str	r2, [r0, #0]
 80098d4:	3218      	adds	r2, #24
 80098d6:	6042      	str	r2, [r0, #4]
 80098d8:	60c1      	str	r1, [r0, #12]
}
 80098da:	4770      	bx	lr
 80098dc:	0802d8b4 	.word	0x0802d8b4

080098e0 <_ZN19Test_lidar_hautView14tearDownScreenEv>:
}

void Test_lidar_hautView::tearDownScreen()
{
    Test_lidar_hautViewBase::tearDownScreen();
}
 80098e0:	4770      	bx	lr

080098e2 <_ZN19Test_lidar_hautView18donnees_lidar_hautEv>:

void Test_lidar_hautView::donnees_lidar_haut()
{

}
 80098e2:	4770      	bx	lr

080098e4 <_ZN19Test_lidar_hautViewD1Ev>:

class Test_lidar_hautView : public Test_lidar_hautViewBase
{
public:
    Test_lidar_hautView();
    virtual ~Test_lidar_hautView() {}
 80098e4:	b510      	push	{r4, lr}
 80098e6:	4604      	mov	r4, r0
 80098e8:	4b02      	ldr	r3, [pc, #8]	@ (80098f4 <_ZN19Test_lidar_hautViewD1Ev+0x10>)
 80098ea:	6003      	str	r3, [r0, #0]
 80098ec:	f7fe fcf6 	bl	80082dc <_ZN23Test_lidar_hautViewBaseD1Ev>
 80098f0:	4620      	mov	r0, r4
 80098f2:	bd10      	pop	{r4, pc}
 80098f4:	0802d8dc 	.word	0x0802d8dc

080098f8 <_ZN19Test_lidar_hautViewD0Ev>:
 80098f8:	b510      	push	{r4, lr}
 80098fa:	4604      	mov	r4, r0
 80098fc:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <_ZN19Test_lidar_hautViewD0Ev+0x1c>)
 80098fe:	6003      	str	r3, [r0, #0]
 8009900:	f7fe fcec 	bl	80082dc <_ZN23Test_lidar_hautViewBaseD1Ev>
 8009904:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8009908:	4620      	mov	r0, r4
 800990a:	f01f fae9 	bl	8028ee0 <_ZdlPvj>
 800990e:	4620      	mov	r0, r4
 8009910:	bd10      	pop	{r4, pc}
 8009912:	bf00      	nop
 8009914:	0802d8dc 	.word	0x0802d8dc

08009918 <_ZN19Test_lidar_hautViewC1Ev>:
Test_lidar_hautView::Test_lidar_hautView()
 8009918:	b510      	push	{r4, lr}
 800991a:	4604      	mov	r4, r0
 800991c:	f7fe fd34 	bl	8008388 <_ZN23Test_lidar_hautViewBaseC1Ev>
 8009920:	4b01      	ldr	r3, [pc, #4]	@ (8009928 <_ZN19Test_lidar_hautViewC1Ev+0x10>)
 8009922:	6023      	str	r3, [r4, #0]
}
 8009924:	4620      	mov	r0, r4
 8009926:	bd10      	pop	{r4, pc}
 8009928:	0802d8dc 	.word	0x0802d8dc

0800992c <_ZN19Test_lidar_hautView11setupScreenEv>:
{
 800992c:	b508      	push	{r3, lr}
    Test_lidar_hautViewBase::setupScreen();
 800992e:	f7fe fcd6 	bl	80082de <_ZN23Test_lidar_hautViewBase11setupScreenEv>
}
 8009932:	bd08      	pop	{r3, pc}

08009934 <_ZN22Tests_moteursPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Tests_moteursPresenter() {}
 8009934:	4770      	bx	lr

08009936 <_ZThn4_N22Tests_moteursPresenterD1Ev>:
 8009936:	3804      	subs	r0, #4
 8009938:	4770      	bx	lr

0800993a <_ZN22Tests_moteursPresenter8activateEv>:
}

void Tests_moteursPresenter::activate()
{

}
 800993a:	4770      	bx	lr

0800993c <_ZN22Tests_moteursPresenter10deactivateEv>:

void Tests_moteursPresenter::deactivate()
{

}
 800993c:	4770      	bx	lr

0800993e <_ZN22Tests_moteursPresenterD0Ev>:
 800993e:	b510      	push	{r4, lr}
 8009940:	4604      	mov	r4, r0
 8009942:	2110      	movs	r1, #16
 8009944:	f01f facc 	bl	8028ee0 <_ZdlPvj>
 8009948:	4620      	mov	r0, r4
 800994a:	bd10      	pop	{r4, pc}

0800994c <_ZThn4_N22Tests_moteursPresenterD0Ev>:
 800994c:	b510      	push	{r4, lr}
 800994e:	1f04      	subs	r4, r0, #4
 8009950:	2110      	movs	r1, #16
 8009952:	4620      	mov	r0, r4
 8009954:	f01f fac4 	bl	8028ee0 <_ZdlPvj>
 8009958:	4620      	mov	r0, r4
 800995a:	bd10      	pop	{r4, pc}

0800995c <_ZN22Tests_moteursPresenterC1ER17Tests_moteursView>:
 800995c:	2200      	movs	r2, #0
 800995e:	6082      	str	r2, [r0, #8]
    : view(v)
 8009960:	4a02      	ldr	r2, [pc, #8]	@ (800996c <_ZN22Tests_moteursPresenterC1ER17Tests_moteursView+0x10>)
 8009962:	6002      	str	r2, [r0, #0]
 8009964:	3218      	adds	r2, #24
 8009966:	6042      	str	r2, [r0, #4]
 8009968:	60c1      	str	r1, [r0, #12]
}
 800996a:	4770      	bx	lr
 800996c:	0802d91c 	.word	0x0802d91c

08009970 <_ZN17Tests_moteursView14tearDownScreenEv>:
}

void Tests_moteursView::tearDownScreen()
{
    Tests_moteursViewBase::tearDownScreen();
}
 8009970:	4770      	bx	lr
	...

08009974 <_ZN17Tests_moteursView15moteurs_avancerEv>:


void Tests_moteursView::moteurs_avancer()
{
 8009974:	b500      	push	{lr}
 8009976:	b08d      	sub	sp, #52	@ 0x34
	T_CAN_trame_tx trame_tx_moteurs = {0};
 8009978:	2228      	movs	r2, #40	@ 0x28
 800997a:	2100      	movs	r1, #0
 800997c:	a802      	add	r0, sp, #8
 800997e:	f020 f8c3 	bl	8029b08 <memset>

	trame_tx_moteurs.header.Identifier = 0x101;
 8009982:	f240 1301 	movw	r3, #257	@ 0x101
 8009986:	9301      	str	r3, [sp, #4]
	trame_tx_moteurs.header.BitRateSwitch = FDCAN_BRS_OFF;
	trame_tx_moteurs.header.FDFormat = FDCAN_CLASSIC_CAN;
	trame_tx_moteurs.header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	trame_tx_moteurs.header.MessageMarker = 0;

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &trame_tx_moteurs.header, trame_tx_moteurs.data);
 8009988:	aa0a      	add	r2, sp, #40	@ 0x28
 800998a:	a901      	add	r1, sp, #4
 800998c:	4802      	ldr	r0, [pc, #8]	@ (8009998 <_ZN17Tests_moteursView15moteurs_avancerEv+0x24>)
 800998e:	f003 fa41 	bl	800ce14 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8009992:	b00d      	add	sp, #52	@ 0x34
 8009994:	f85d fb04 	ldr.w	pc, [sp], #4
 8009998:	240005fc 	.word	0x240005fc

0800999c <_ZN17Tests_moteursView18moteurs_tourner_90Ev>:

void Tests_moteursView::moteurs_tourner_90()
{
 800999c:	b500      	push	{lr}
 800999e:	b08d      	sub	sp, #52	@ 0x34
	T_CAN_trame_tx trame_tx_moteurs = {0};
 80099a0:	2228      	movs	r2, #40	@ 0x28
 80099a2:	2100      	movs	r1, #0
 80099a4:	a802      	add	r0, sp, #8
 80099a6:	f020 f8af 	bl	8029b08 <memset>

	trame_tx_moteurs.header.Identifier = 0x90;
 80099aa:	2390      	movs	r3, #144	@ 0x90
 80099ac:	9301      	str	r3, [sp, #4]
	trame_tx_moteurs.header.BitRateSwitch = FDCAN_BRS_OFF;
	trame_tx_moteurs.header.FDFormat = FDCAN_CLASSIC_CAN;
	trame_tx_moteurs.header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	trame_tx_moteurs.header.MessageMarker = 0;

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &trame_tx_moteurs.header, trame_tx_moteurs.data);
 80099ae:	aa0a      	add	r2, sp, #40	@ 0x28
 80099b0:	a901      	add	r1, sp, #4
 80099b2:	4803      	ldr	r0, [pc, #12]	@ (80099c0 <_ZN17Tests_moteursView18moteurs_tourner_90Ev+0x24>)
 80099b4:	f003 fa2e 	bl	800ce14 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80099b8:	b00d      	add	sp, #52	@ 0x34
 80099ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80099be:	bf00      	nop
 80099c0:	240005fc 	.word	0x240005fc

080099c4 <_ZN17Tests_moteursView19moteurs_tourner_180Ev>:

void Tests_moteursView::moteurs_tourner_180()
{
 80099c4:	b500      	push	{lr}
 80099c6:	b08d      	sub	sp, #52	@ 0x34
	T_CAN_trame_tx trame_tx_moteurs = {0};
 80099c8:	2228      	movs	r2, #40	@ 0x28
 80099ca:	2100      	movs	r1, #0
 80099cc:	a802      	add	r0, sp, #8
 80099ce:	f020 f89b 	bl	8029b08 <memset>

	trame_tx_moteurs.header.Identifier = 0x180;
 80099d2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80099d6:	9301      	str	r3, [sp, #4]
	trame_tx_moteurs.header.BitRateSwitch = FDCAN_BRS_OFF;
	trame_tx_moteurs.header.FDFormat = FDCAN_CLASSIC_CAN;
	trame_tx_moteurs.header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	trame_tx_moteurs.header.MessageMarker = 0;

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &trame_tx_moteurs.header, trame_tx_moteurs.data);
 80099d8:	aa0a      	add	r2, sp, #40	@ 0x28
 80099da:	a901      	add	r1, sp, #4
 80099dc:	4802      	ldr	r0, [pc, #8]	@ (80099e8 <_ZN17Tests_moteursView19moteurs_tourner_180Ev+0x24>)
 80099de:	f003 fa19 	bl	800ce14 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80099e2:	b00d      	add	sp, #52	@ 0x34
 80099e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80099e8:	240005fc 	.word	0x240005fc

080099ec <_ZN17Tests_moteursView4stopEv>:

void Tests_moteursView::stop()
{
 80099ec:	b500      	push	{lr}
 80099ee:	b08d      	sub	sp, #52	@ 0x34
	T_CAN_trame_tx trame_tx_moteurs = {0};
 80099f0:	2228      	movs	r2, #40	@ 0x28
 80099f2:	2100      	movs	r1, #0
 80099f4:	a802      	add	r0, sp, #8
 80099f6:	f020 f887 	bl	8029b08 <memset>

	trame_tx_moteurs.header.Identifier = 0x05;
 80099fa:	2305      	movs	r3, #5
 80099fc:	9301      	str	r3, [sp, #4]
	trame_tx_moteurs.header.BitRateSwitch = FDCAN_BRS_OFF;
	trame_tx_moteurs.header.FDFormat = FDCAN_CLASSIC_CAN;
	trame_tx_moteurs.header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	trame_tx_moteurs.header.MessageMarker = 0;

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &trame_tx_moteurs.header, trame_tx_moteurs.data);
 80099fe:	aa0a      	add	r2, sp, #40	@ 0x28
 8009a00:	a901      	add	r1, sp, #4
 8009a02:	4803      	ldr	r0, [pc, #12]	@ (8009a10 <_ZN17Tests_moteursView4stopEv+0x24>)
 8009a04:	f003 fa06 	bl	800ce14 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8009a08:	b00d      	add	sp, #52	@ 0x34
 8009a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a0e:	bf00      	nop
 8009a10:	240005fc 	.word	0x240005fc

08009a14 <_ZN17Tests_moteursViewD1Ev>:

class Tests_moteursView : public Tests_moteursViewBase
{
public:
    Tests_moteursView();
    virtual ~Tests_moteursView() {}
 8009a14:	b510      	push	{r4, lr}
 8009a16:	4604      	mov	r4, r0
 8009a18:	4b02      	ldr	r3, [pc, #8]	@ (8009a24 <_ZN17Tests_moteursViewD1Ev+0x10>)
 8009a1a:	6003      	str	r3, [r0, #0]
 8009a1c:	f7fe fea0 	bl	8008760 <_ZN21Tests_moteursViewBaseD1Ev>
 8009a20:	4620      	mov	r0, r4
 8009a22:	bd10      	pop	{r4, pc}
 8009a24:	0802d944 	.word	0x0802d944

08009a28 <_ZN17Tests_moteursViewD0Ev>:
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <_ZN17Tests_moteursViewD0Ev+0x1c>)
 8009a2e:	6003      	str	r3, [r0, #0]
 8009a30:	f7fe fe96 	bl	8008760 <_ZN21Tests_moteursViewBaseD1Ev>
 8009a34:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f01f fa51 	bl	8028ee0 <_ZdlPvj>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	bd10      	pop	{r4, pc}
 8009a42:	bf00      	nop
 8009a44:	0802d944 	.word	0x0802d944

08009a48 <_ZN17Tests_moteursViewC1Ev>:
Tests_moteursView::Tests_moteursView()
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	f7fe ff48 	bl	80088e0 <_ZN21Tests_moteursViewBaseC1Ev>
 8009a50:	4b01      	ldr	r3, [pc, #4]	@ (8009a58 <_ZN17Tests_moteursViewC1Ev+0x10>)
 8009a52:	6023      	str	r3, [r4, #0]
}
 8009a54:	4620      	mov	r0, r4
 8009a56:	bd10      	pop	{r4, pc}
 8009a58:	0802d944 	.word	0x0802d944

08009a5c <_ZN17Tests_moteursView11setupScreenEv>:
{
 8009a5c:	b508      	push	{r3, lr}
    Tests_moteursViewBase::setupScreen();
 8009a5e:	f7fe fe80 	bl	8008762 <_ZN21Tests_moteursViewBase11setupScreenEv>
}
 8009a62:	bd08      	pop	{r3, pc}

08009a64 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8009a64:	2301      	movs	r3, #1
 8009a66:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 8009a68:	2000      	movs	r0, #0
 8009a6a:	7048      	strb	r0, [r1, #1]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
 8009a70:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8009a74:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8009a76:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8009a7a:	608b      	str	r3, [r1, #8]
  
  return FT6X06_OK;
}
 8009a7c:	4770      	bx	lr

08009a7e <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8009a7e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d001      	beq.n	8009a8a <FT6X06_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }
  
  return FT6X06_OK;
}
 8009a86:	2000      	movs	r0, #0
 8009a88:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8009a90:	e7f9      	b.n	8009a86 <FT6X06_DeInit+0x8>

08009a92 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8009a92:	2000      	movs	r0, #0
 8009a94:	4770      	bx	lr

08009a96 <FT6X06_ClearIT>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8009a96:	2000      	movs	r0, #0
 8009a98:	4770      	bx	lr

08009a9a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8009a9a:	b510      	push	{r4, lr}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009a9c:	6904      	ldr	r4, [r0, #16]
 8009a9e:	8900      	ldrh	r0, [r0, #8]
 8009aa0:	47a0      	blx	r4
}
 8009aa2:	bd10      	pop	{r4, pc}

08009aa4 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8009aa4:	b510      	push	{r4, lr}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009aa6:	68c4      	ldr	r4, [r0, #12]
 8009aa8:	8900      	ldrh	r0, [r0, #8]
 8009aaa:	47a0      	blx	r4
}
 8009aac:	bd10      	pop	{r4, pc}

08009aae <FT6X06_GestureConfig>:
{
 8009aae:	b570      	push	{r4, r5, r6, lr}
 8009ab0:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8009ab2:	f100 0518 	add.w	r5, r0, #24
 8009ab6:	7809      	ldrb	r1, [r1, #0]
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f000 f921 	bl	8009d00 <ft6x06_radian_value>
 8009abe:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8009ac0:	7931      	ldrb	r1, [r6, #4]
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f000 f929 	bl	8009d1a <ft6x06_offset_left_right>
 8009ac8:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8009aca:	7a31      	ldrb	r1, [r6, #8]
 8009acc:	4628      	mov	r0, r5
 8009ace:	f000 f931 	bl	8009d34 <ft6x06_offset_up_down>
 8009ad2:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8009ad4:	7b31      	ldrb	r1, [r6, #12]
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f000 f939 	bl	8009d4e <ft6x06_disatnce_left_right>
 8009adc:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8009ade:	7c31      	ldrb	r1, [r6, #16]
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f000 f941 	bl	8009d68 <ft6x06_distance_up_down>
 8009ae6:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8009ae8:	7d31      	ldrb	r1, [r6, #20]
 8009aea:	4628      	mov	r0, r5
 8009aec:	f000 f949 	bl	8009d82 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8009af0:	42c4      	cmn	r4, r0
}
 8009af2:	bf14      	ite	ne
 8009af4:	f04f 30ff 	movne.w	r0, #4294967295
 8009af8:	2000      	moveq	r0, #0
 8009afa:	bd70      	pop	{r4, r5, r6, pc}

08009afc <FT6X06_ReadID>:
{
 8009afc:	b510      	push	{r4, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8009b02:	f10d 0107 	add.w	r1, sp, #7
 8009b06:	3018      	adds	r0, #24
 8009b08:	f000 f955 	bl	8009db6 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8009b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009b10:	6023      	str	r3, [r4, #0]
}
 8009b12:	b002      	add	sp, #8
 8009b14:	bd10      	pop	{r4, pc}

08009b16 <FT6X06_GetState>:
{
 8009b16:	b530      	push	{r4, r5, lr}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009b1c:	f100 0518 	add.w	r5, r0, #24
 8009b20:	f10d 0103 	add.w	r1, sp, #3
 8009b24:	4628      	mov	r0, r5
 8009b26:	f000 f8de 	bl	8009ce6 <ft6x06_td_status>
 8009b2a:	bb10      	cbnz	r0, 8009b72 <FT6X06_GetState+0x5c>
 8009b2c:	4603      	mov	r3, r0
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8009b2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
      ret = (int32_t)nb_touch;
 8009b32:	2a02      	cmp	r2, #2
 8009b34:	bf98      	it	ls
 8009b36:	4613      	movls	r3, r2
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8009b38:	6023      	str	r3, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8009b3a:	2304      	movs	r3, #4
 8009b3c:	eb0d 0203 	add.w	r2, sp, r3
 8009b40:	2103      	movs	r1, #3
 8009b42:	4628      	mov	r0, r5
 8009b44:	f000 f8be 	bl	8009cc4 <ft6x06_read_reg>
 8009b48:	b9b0      	cbnz	r0, 8009b78 <FT6X06_GetState+0x62>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009b4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8009b5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b66:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60a3      	str	r3, [r4, #8]
}
 8009b6e:	b003      	add	sp, #12
 8009b70:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8009b72:	f04f 33ff 	mov.w	r3, #4294967295
 8009b76:	e7df      	b.n	8009b38 <FT6X06_GetState+0x22>
    ret = FT6X06_ERROR;
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009b7c:	e7f7      	b.n	8009b6e <FT6X06_GetState+0x58>

08009b7e <FT6X06_GetGesture>:
{  
 8009b7e:	b508      	push	{r3, lr}
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8009b80:	3018      	adds	r0, #24
 8009b82:	f000 f8a9 	bl	8009cd8 <ft6x06_gest_id>
}
 8009b86:	bd08      	pop	{r3, pc}

08009b88 <FT6X06_EnableIT>:
{
 8009b88:	b508      	push	{r3, lr}
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	3018      	adds	r0, #24
 8009b8e:	f000 f905 	bl	8009d9c <ft6x06_g_mode>
}
 8009b92:	bd08      	pop	{r3, pc}

08009b94 <FT6X06_DisableIT>:
{
 8009b94:	b508      	push	{r3, lr}
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8009b96:	2100      	movs	r1, #0
 8009b98:	3018      	adds	r0, #24
 8009b9a:	f000 f8ff 	bl	8009d9c <ft6x06_g_mode>
}
 8009b9e:	bd08      	pop	{r3, pc}

08009ba0 <FT6X06_Init>:
  if(pObj->IsInitialized == 0U)
 8009ba0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009ba4:	b973      	cbnz	r3, 8009bc4 <FT6X06_Init+0x24>
{
 8009ba6:	b510      	push	{r4, lr}
 8009ba8:	4604      	mov	r4, r0
    pObj->IO.Init();
 8009baa:	6803      	ldr	r3, [r0, #0]
 8009bac:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f7ff fff0 	bl	8009b94 <FT6X06_DisableIT>
    pObj->IsInitialized = 1;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8009bba:	3800      	subs	r0, #0
 8009bbc:	bf18      	it	ne
 8009bbe:	2001      	movne	r0, #1
 8009bc0:	4240      	negs	r0, r0
}
 8009bc2:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 8009bc4:	2000      	movs	r0, #0
}
 8009bc6:	4770      	bx	lr

08009bc8 <FT6X06_GetMultiTouchState>:
{
 8009bc8:	b530      	push	{r4, r5, lr}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009bce:	f100 0518 	add.w	r5, r0, #24
 8009bd2:	f10d 0103 	add.w	r1, sp, #3
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f000 f885 	bl	8009ce6 <ft6x06_td_status>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d148      	bne.n	8009c72 <FT6X06_GetMultiTouchState+0xaa>
 8009be0:	4603      	mov	r3, r0
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8009be2:	f89d 2003 	ldrb.w	r2, [sp, #3]
      ret = (int32_t)nb_touch;
 8009be6:	2a02      	cmp	r2, #2
 8009be8:	bf98      	it	ls
 8009bea:	4613      	movls	r3, r2
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8009bec:	6023      	str	r3, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8009bee:	230c      	movs	r3, #12
 8009bf0:	aa01      	add	r2, sp, #4
 8009bf2:	2103      	movs	r1, #3
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f000 f865 	bl	8009cc4 <ft6x06_read_reg>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d13b      	bne.n	8009c78 <FT6X06_GetMultiTouchState+0xb0>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009c00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009c04:	020b      	lsls	r3, r1, #8
 8009c06:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009c0a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8009c0e:	4303      	orrs	r3, r0
 8009c10:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8009c12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009c1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009c20:	4303      	orrs	r3, r0
 8009c22:	60e3      	str	r3, [r4, #12]
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8009c24:	0989      	lsrs	r1, r1, #6
 8009c26:	61e1      	str	r1, [r4, #28]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8009c28:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009c2c:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8009c2e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8009c32:	091b      	lsrs	r3, r3, #4
 8009c34:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009c36:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8009c3a:	020b      	lsls	r3, r1, #8
 8009c3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009c40:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8009c44:	4303      	orrs	r3, r0
 8009c46:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8009c48:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009c52:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8009c56:	4303      	orrs	r3, r0
 8009c58:	6123      	str	r3, [r4, #16]
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8009c5a:	0989      	lsrs	r1, r1, #6
 8009c5c:	6221      	str	r1, [r4, #32]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8009c5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009c62:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8009c64:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009c68:	091b      	lsrs	r3, r3, #4
 8009c6a:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	b005      	add	sp, #20
 8009c70:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
 8009c76:	e7b9      	b.n	8009bec <FT6X06_GetMultiTouchState+0x24>
    ret = FT6X06_ERROR;
 8009c78:	f04f 32ff 	mov.w	r2, #4294967295
  return ret;  
 8009c7c:	e7f6      	b.n	8009c6c <FT6X06_GetMultiTouchState+0xa4>
	...

08009c80 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8009c80:	b1a8      	cbz	r0, 8009cae <FT6X06_RegisterBusIO+0x2e>
{
 8009c82:	b508      	push	{r3, lr}
 8009c84:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8009c86:	680a      	ldr	r2, [r1, #0]
 8009c88:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009c8a:	6848      	ldr	r0, [r1, #4]
 8009c8c:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8009c8e:	8908      	ldrh	r0, [r1, #8]
 8009c90:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009c92:	68c8      	ldr	r0, [r1, #12]
 8009c94:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009c96:	6908      	ldr	r0, [r1, #16]
 8009c98:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8009c9a:	6949      	ldr	r1, [r1, #20]
 8009c9c:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8009c9e:	4907      	ldr	r1, [pc, #28]	@ (8009cbc <FT6X06_RegisterBusIO+0x3c>)
 8009ca0:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8009ca2:	4907      	ldr	r1, [pc, #28]	@ (8009cc0 <FT6X06_RegisterBusIO+0x40>)
 8009ca4:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8009ca6:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 8009ca8:	b122      	cbz	r2, 8009cb4 <FT6X06_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 8009caa:	4790      	blx	r2
}
 8009cac:	bd08      	pop	{r3, pc}
    ret = FT6X06_ERROR;
 8009cae:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009cb2:	4770      	bx	lr
      ret = FT6X06_ERROR;
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009cb8:	e7f8      	b.n	8009cac <FT6X06_RegisterBusIO+0x2c>
 8009cba:	bf00      	nop
 8009cbc:	08009a9b 	.word	0x08009a9b
 8009cc0:	08009aa5 	.word	0x08009aa5

08009cc4 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8009cc4:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009cc6:	6844      	ldr	r4, [r0, #4]
 8009cc8:	6880      	ldr	r0, [r0, #8]
 8009cca:	47a0      	blx	r4
}
 8009ccc:	bd10      	pop	{r4, pc}

08009cce <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8009cce:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8009cd0:	6804      	ldr	r4, [r0, #0]
 8009cd2:	6880      	ldr	r0, [r0, #8]
 8009cd4:	47a0      	blx	r4
}
 8009cd6:	bd10      	pop	{r4, pc}

08009cd8 <ft6x06_gest_id>:
* Input          : Pointer to uint8_t
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8009cd8:	b508      	push	{r3, lr}
 8009cda:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8009cdc:	2301      	movs	r3, #1
 8009cde:	4619      	mov	r1, r3
 8009ce0:	f7ff fff0 	bl	8009cc4 <ft6x06_read_reg>
}
 8009ce4:	bd08      	pop	{r3, pc}

08009ce6 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8009ce6:	b510      	push	{r4, lr}
 8009ce8:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8009cea:	2301      	movs	r3, #1
 8009cec:	460a      	mov	r2, r1
 8009cee:	2102      	movs	r1, #2
 8009cf0:	f7ff ffe8 	bl	8009cc4 <ft6x06_read_reg>
  
  if(ret == 0)
 8009cf4:	b918      	cbnz	r0, 8009cfe <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8009cf6:	7823      	ldrb	r3, [r4, #0]
 8009cf8:	f003 030f 	and.w	r3, r3, #15
 8009cfc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8009cfe:	bd10      	pop	{r4, pc}

08009d00 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009d00:	b500      	push	{lr}
 8009d02:	b083      	sub	sp, #12
 8009d04:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f10d 0207 	add.w	r2, sp, #7
 8009d0e:	2191      	movs	r1, #145	@ 0x91
 8009d10:	f7ff ffdd 	bl	8009cce <ft6x06_write_reg>
}
 8009d14:	b003      	add	sp, #12
 8009d16:	f85d fb04 	ldr.w	pc, [sp], #4

08009d1a <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009d1a:	b500      	push	{lr}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8009d22:	2301      	movs	r3, #1
 8009d24:	f10d 0207 	add.w	r2, sp, #7
 8009d28:	2192      	movs	r1, #146	@ 0x92
 8009d2a:	f7ff ffd0 	bl	8009cce <ft6x06_write_reg>
}
 8009d2e:	b003      	add	sp, #12
 8009d30:	f85d fb04 	ldr.w	pc, [sp], #4

08009d34 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009d34:	b500      	push	{lr}
 8009d36:	b083      	sub	sp, #12
 8009d38:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f10d 0207 	add.w	r2, sp, #7
 8009d42:	2193      	movs	r1, #147	@ 0x93
 8009d44:	f7ff ffc3 	bl	8009cce <ft6x06_write_reg>
}
 8009d48:	b003      	add	sp, #12
 8009d4a:	f85d fb04 	ldr.w	pc, [sp], #4

08009d4e <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009d4e:	b500      	push	{lr}
 8009d50:	b083      	sub	sp, #12
 8009d52:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8009d56:	2301      	movs	r3, #1
 8009d58:	f10d 0207 	add.w	r2, sp, #7
 8009d5c:	2194      	movs	r1, #148	@ 0x94
 8009d5e:	f7ff ffb6 	bl	8009cce <ft6x06_write_reg>
}
 8009d62:	b003      	add	sp, #12
 8009d64:	f85d fb04 	ldr.w	pc, [sp], #4

08009d68 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009d68:	b500      	push	{lr}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8009d70:	2301      	movs	r3, #1
 8009d72:	f10d 0207 	add.w	r2, sp, #7
 8009d76:	2195      	movs	r1, #149	@ 0x95
 8009d78:	f7ff ffa9 	bl	8009cce <ft6x06_write_reg>
}
 8009d7c:	b003      	add	sp, #12
 8009d7e:	f85d fb04 	ldr.w	pc, [sp], #4

08009d82 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009d82:	b500      	push	{lr}
 8009d84:	b083      	sub	sp, #12
 8009d86:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	f10d 0207 	add.w	r2, sp, #7
 8009d90:	2196      	movs	r1, #150	@ 0x96
 8009d92:	f7ff ff9c 	bl	8009cce <ft6x06_write_reg>
}
 8009d96:	b003      	add	sp, #12
 8009d98:	f85d fb04 	ldr.w	pc, [sp], #4

08009d9c <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009d9c:	b500      	push	{lr}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8009da4:	2301      	movs	r3, #1
 8009da6:	f10d 0207 	add.w	r2, sp, #7
 8009daa:	21a4      	movs	r1, #164	@ 0xa4
 8009dac:	f7ff ff8f 	bl	8009cce <ft6x06_write_reg>
}
 8009db0:	b003      	add	sp, #12
 8009db2:	f85d fb04 	ldr.w	pc, [sp], #4

08009db6 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8009db6:	b508      	push	{r3, lr}
 8009db8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8009dba:	2301      	movs	r3, #1
 8009dbc:	21a8      	movs	r1, #168	@ 0xa8
 8009dbe:	f7ff ff81 	bl	8009cc4 <ft6x06_read_reg>
    *value &= FT6X06_CHIP_ID_BIT_MASK; 
    *value = *value >> FT6X06_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 8009dc2:	bd08      	pop	{r3, pc}

08009dc4 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8009dc4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8009dc6:	4b08      	ldr	r3, [pc, #32]	@ (8009de8 <IS42S32800J_ClockEnable+0x24>)
 8009dc8:	2201      	movs	r2, #1
 8009dca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8009dcc:	6059      	str	r1, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8009dce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009dd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f007 fb79 	bl	80114d0 <HAL_SDRAM_SendCommand>
 8009dde:	3800      	subs	r0, #0
 8009de0:	bf18      	it	ne
 8009de2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009de4:	4240      	negs	r0, r0
 8009de6:	bd08      	pop	{r3, pc}
 8009de8:	240481ac 	.word	0x240481ac

08009dec <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8009dec:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8009dee:	4b09      	ldr	r3, [pc, #36]	@ (8009e14 <IS42S32800J_Precharge+0x28>)
 8009df0:	2202      	movs	r2, #2
 8009df2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8009df4:	6059      	str	r1, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8009df6:	2201      	movs	r2, #1
 8009df8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e02:	4619      	mov	r1, r3
 8009e04:	f007 fb64 	bl	80114d0 <HAL_SDRAM_SendCommand>
 8009e08:	3800      	subs	r0, #0
 8009e0a:	bf18      	it	ne
 8009e0c:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009e0e:	4240      	negs	r0, r0
 8009e10:	bd08      	pop	{r3, pc}
 8009e12:	bf00      	nop
 8009e14:	240481ac 	.word	0x240481ac

08009e18 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009e1c:	68cb      	ldr	r3, [r1, #12]
 8009e1e:	6909      	ldr	r1, [r1, #16]
 8009e20:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8009e22:	6951      	ldr	r1, [r2, #20]
 8009e24:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8009e26:	6991      	ldr	r1, [r2, #24]
 8009e28:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009e2a:	69d1      	ldr	r1, [r2, #28]
 8009e2c:	430b      	orrs	r3, r1
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8009e2e:	4908      	ldr	r1, [pc, #32]	@ (8009e50 <IS42S32800J_ModeRegConfig+0x38>)
 8009e30:	2404      	movs	r4, #4
 8009e32:	600c      	str	r4, [r1, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8009e34:	6812      	ldr	r2, [r2, #0]
 8009e36:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8009e38:	2201      	movs	r2, #1
 8009e3a:	608a      	str	r2, [r1, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8009e3c:	60cb      	str	r3, [r1, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e42:	f007 fb45 	bl	80114d0 <HAL_SDRAM_SendCommand>
 8009e46:	3800      	subs	r0, #0
 8009e48:	bf18      	it	ne
 8009e4a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009e4c:	4240      	negs	r0, r0
 8009e4e:	bd10      	pop	{r4, pc}
 8009e50:	240481ac 	.word	0x240481ac

08009e54 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8009e54:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8009e56:	4b08      	ldr	r3, [pc, #32]	@ (8009e78 <IS42S32800J_RefreshMode+0x24>)
 8009e58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8009e5a:	6059      	str	r1, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8009e5c:	2208      	movs	r2, #8
 8009e5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8009e60:	2200      	movs	r2, #0
 8009e62:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f007 fb31 	bl	80114d0 <HAL_SDRAM_SendCommand>
 8009e6e:	3800      	subs	r0, #0
 8009e70:	bf18      	it	ne
 8009e72:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009e74:	4240      	negs	r0, r0
 8009e76:	bd08      	pop	{r3, pc}
 8009e78:	240481ac 	.word	0x240481ac

08009e7c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8009e7c:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8009e7e:	f007 fb44 	bl	801150a <HAL_SDRAM_ProgramRefreshRate>
 8009e82:	3800      	subs	r0, #0
 8009e84:	bf18      	it	ne
 8009e86:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009e88:	4240      	negs	r0, r0
 8009e8a:	bd08      	pop	{r3, pc}

08009e8c <IS42S32800J_Init>:
{
 8009e8c:	b570      	push	{r4, r5, r6, lr}
 8009e8e:	4606      	mov	r6, r0
 8009e90:	460d      	mov	r5, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8009e92:	6809      	ldr	r1, [r1, #0]
 8009e94:	f7ff ff96 	bl	8009dc4 <IS42S32800J_ClockEnable>
 8009e98:	b9f8      	cbnz	r0, 8009eda <IS42S32800J_Init+0x4e>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8009e9a:	f001 fd11 	bl	800b8c0 <HAL_GetTick>
 8009e9e:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8009ea0:	f001 fd0e 	bl	800b8c0 <HAL_GetTick>
 8009ea4:	4284      	cmp	r4, r0
 8009ea6:	d0fb      	beq.n	8009ea0 <IS42S32800J_Init+0x14>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8009ea8:	6829      	ldr	r1, [r5, #0]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff ff9e 	bl	8009dec <IS42S32800J_Precharge>
 8009eb0:	b9b0      	cbnz	r0, 8009ee0 <IS42S32800J_Init+0x54>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8009eb2:	686a      	ldr	r2, [r5, #4]
 8009eb4:	6829      	ldr	r1, [r5, #0]
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff ffcc 	bl	8009e54 <IS42S32800J_RefreshMode>
 8009ebc:	b998      	cbnz	r0, 8009ee6 <IS42S32800J_Init+0x5a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff ffa9 	bl	8009e18 <IS42S32800J_ModeRegConfig>
 8009ec6:	b988      	cbnz	r0, 8009eec <IS42S32800J_Init+0x60>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8009ec8:	68a9      	ldr	r1, [r5, #8]
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ffd6 	bl	8009e7c <IS42S32800J_RefreshRate>
 8009ed0:	3800      	subs	r0, #0
 8009ed2:	bf18      	it	ne
 8009ed4:	2001      	movne	r0, #1
 8009ed6:	4240      	negs	r0, r0
}
 8009ed8:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = IS42S32800J_ERROR;
 8009eda:	f04f 30ff 	mov.w	r0, #4294967295
 8009ede:	e7fb      	b.n	8009ed8 <IS42S32800J_Init+0x4c>
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	e7f8      	b.n	8009ed8 <IS42S32800J_Init+0x4c>
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eea:	e7f5      	b.n	8009ed8 <IS42S32800J_Init+0x4c>
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009ef0:	e7f2      	b.n	8009ed8 <IS42S32800J_Init+0x4c>

08009ef2 <MT25TL01G_GetFlashInfo>:
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8009ef2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ef6:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8009ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009efc:	6043      	str	r3, [r0, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8009efe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f02:	60c3      	str	r3, [r0, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8009f04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f08:	6083      	str	r3, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8009f0a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f0e:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8009f10:	2000      	movs	r0, #0
 8009f12:	4770      	bx	lr

08009f14 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009f14:	b500      	push	{lr}
 8009f16:	b095      	sub	sp, #84	@ 0x54

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009f18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009f1c:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009f1e:	2305      	movs	r3, #5
 8009f20:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009f22:	2300      	movs	r3, #0
 8009f24:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009f26:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009f28:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8009f2c:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8009f2e:	2202      	movs	r2, #2
 8009f30:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009f32:	9311      	str	r3, [sp, #68]	@ 0x44
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009f34:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009f36:	9313      	str	r3, [sp, #76]	@ 0x4c

  s_config.Match           = 0;
 8009f38:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009f3a:	9304      	str	r3, [sp, #16]
  s_config.Interval        = 0x10;
 8009f3c:	2310      	movs	r3, #16
 8009f3e:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009f40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009f44:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8009f46:	f240 1301 	movw	r3, #257	@ 0x101
 8009f4a:	9301      	str	r3, [sp, #4]
  s_config.StatusBytesSize = 2;
 8009f4c:	9203      	str	r2, [sp, #12]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009f4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009f52:	466a      	mov	r2, sp
 8009f54:	a906      	add	r1, sp, #24
 8009f56:	f005 fd03 	bl	800f960 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8009f5a:	2800      	cmp	r0, #0

}
 8009f5c:	bf14      	ite	ne
 8009f5e:	f06f 0004 	mvnne.w	r0, #4
 8009f62:	2000      	moveq	r0, #0
 8009f64:	b015      	add	sp, #84	@ 0x54
 8009f66:	f85d fb04 	ldr.w	pc, [sp], #4

08009f6a <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009f6a:	b530      	push	{r4, r5, lr}
 8009f6c:	b095      	sub	sp, #84	@ 0x54
 8009f6e:	4604      	mov	r4, r0
 8009f70:	460d      	mov	r5, r1
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009f72:	2903      	cmp	r1, #3
 8009f74:	bf14      	ite	ne
 8009f76:	f44f 7380 	movne.w	r3, #256	@ 0x100
 8009f7a:	f44f 7340 	moveq.w	r3, #768	@ 0x300
 8009f7e:	930c      	str	r3, [sp, #48]	@ 0x30

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8009f80:	2306      	movs	r3, #6
 8009f82:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009f88:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.DataMode          = QSPI_DATA_NONE;
 8009f8a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8009f8c:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009f8e:	9311      	str	r3, [sp, #68]	@ 0x44
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009f90:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009f92:	9313      	str	r3, [sp, #76]	@ 0x4c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f98:	a906      	add	r1, sp, #24
 8009f9a:	f005 fbbb 	bl	800f714 <HAL_QSPI_Command>
 8009f9e:	bb18      	cbnz	r0, 8009fe8 <MT25TL01G_WriteEnable+0x7e>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8009fa0:	f240 2302 	movw	r3, #514	@ 0x202
 8009fa4:	9300      	str	r3, [sp, #0]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8009fa6:	9301      	str	r3, [sp, #4]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8009fac:	2302      	movs	r3, #2
 8009fae:	9303      	str	r3, [sp, #12]
  s_config.Interval        = 0x10;
 8009fb0:	2310      	movs	r3, #16
 8009fb2:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009fb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009fb8:	9305      	str	r3, [sp, #20]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8009fba:	2305      	movs	r3, #5
 8009fbc:	9306      	str	r3, [sp, #24]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8009fbe:	2d03      	cmp	r5, #3
 8009fc0:	bf14      	ite	ne
 8009fc2:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8009fc6:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
 8009fca:	930f      	str	r3, [sp, #60]	@ 0x3c


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009fcc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009fd0:	466a      	mov	r2, sp
 8009fd2:	a906      	add	r1, sp, #24
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f005 fcc3 	bl	800f960 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	bf14      	ite	ne
 8009fde:	f06f 0004 	mvnne.w	r0, #4
 8009fe2:	2000      	moveq	r0, #0
}
 8009fe4:	b015      	add	sp, #84	@ 0x54
 8009fe6:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8009fe8:	f06f 0001 	mvn.w	r0, #1
 8009fec:	e7fa      	b.n	8009fe4 <MT25TL01G_WriteEnable+0x7a>

08009fee <MT25TL01G_Enter4BytesAddressMode>:
{
 8009fee:	b530      	push	{r4, r5, lr}
 8009ff0:	b08f      	sub	sp, #60	@ 0x3c
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	460c      	mov	r4, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009ff6:	2903      	cmp	r1, #3
 8009ff8:	bf14      	ite	ne
 8009ffa:	f44f 7380 	movne.w	r3, #256	@ 0x100
 8009ffe:	f44f 7340 	moveq.w	r3, #768	@ 0x300
 800a002:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800a004:	23b7      	movs	r3, #183	@ 0xb7
 800a006:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a008:	2300      	movs	r3, #0
 800a00a:	9307      	str	r3, [sp, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a00c:	9308      	str	r3, [sp, #32]
  s_command.DataMode          = QSPI_DATA_NONE;
 800a00e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800a010:	9305      	str	r3, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a012:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a014:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a016:	930d      	str	r3, [sp, #52]	@ 0x34
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800a018:	f7ff ffa7 	bl	8009f6a <MT25TL01G_WriteEnable>
 800a01c:	b980      	cbnz	r0, 800a040 <MT25TL01G_Enter4BytesAddressMode+0x52>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a01e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a022:	4669      	mov	r1, sp
 800a024:	4628      	mov	r0, r5
 800a026:	f005 fb75 	bl	800f714 <HAL_QSPI_Command>
 800a02a:	b960      	cbnz	r0, 800a046 <MT25TL01G_Enter4BytesAddressMode+0x58>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800a02c:	4621      	mov	r1, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	f7ff ff70 	bl	8009f14 <MT25TL01G_AutoPollingMemReady>
    return MT25TL01G_ERROR_COMMAND;
 800a034:	2800      	cmp	r0, #0
 800a036:	bf18      	it	ne
 800a038:	f06f 0001 	mvnne.w	r0, #1
}
 800a03c:	b00f      	add	sp, #60	@ 0x3c
 800a03e:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 800a040:	f06f 0001 	mvn.w	r0, #1
 800a044:	e7fa      	b.n	800a03c <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 800a046:	f06f 0001 	mvn.w	r0, #1
 800a04a:	e7f7      	b.n	800a03c <MT25TL01G_Enter4BytesAddressMode+0x4e>

0800a04c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800a04c:	b500      	push	{lr}
 800a04e:	b08f      	sub	sp, #60	@ 0x3c
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a050:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a054:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800a056:	2335      	movs	r3, #53	@ 0x35
 800a058:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	9307      	str	r3, [sp, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a05e:	9308      	str	r3, [sp, #32]
  s_command.DataMode          = QSPI_DATA_NONE;
 800a060:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800a062:	9305      	str	r3, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a064:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a066:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a068:	930d      	str	r3, [sp, #52]	@ 0x34

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a06a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a06e:	4669      	mov	r1, sp
 800a070:	f005 fb50 	bl	800f714 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800a074:	2800      	cmp	r0, #0
}
 800a076:	bf14      	ite	ne
 800a078:	f06f 0001 	mvnne.w	r0, #1
 800a07c:	2000      	moveq	r0, #0
 800a07e:	b00f      	add	sp, #60	@ 0x3c
 800a080:	f85d fb04 	ldr.w	pc, [sp], #4

0800a084 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800a084:	b500      	push	{lr}
 800a086:	b08f      	sub	sp, #60	@ 0x3c
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a08c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800a08e:	23f5      	movs	r3, #245	@ 0xf5
 800a090:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a092:	2300      	movs	r3, #0
 800a094:	9307      	str	r3, [sp, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a096:	9308      	str	r3, [sp, #32]
  s_command.DataMode          = QSPI_DATA_NONE;
 800a098:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800a09a:	9305      	str	r3, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a09c:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a09e:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a0a0:	930d      	str	r3, [sp, #52]	@ 0x34

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a0a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0a6:	4669      	mov	r1, sp
 800a0a8:	f005 fb34 	bl	800f714 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800a0ac:	2800      	cmp	r0, #0
}
 800a0ae:	bf14      	ite	ne
 800a0b0:	f06f 0001 	mvnne.w	r0, #1
 800a0b4:	2000      	moveq	r0, #0
 800a0b6:	b00f      	add	sp, #60	@ 0x3c
 800a0b8:	f85d fb04 	ldr.w	pc, [sp], #4

0800a0bc <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a0bc:	b500      	push	{lr}
 800a0be:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800a0c0:	2903      	cmp	r1, #3
 800a0c2:	d80e      	bhi.n	800a0e2 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800a0c4:	e8df f001 	tbb	[pc, r1]
 800a0c8:	41352902 	.word	0x41352902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a0cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0d0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800a0d2:	230e      	movs	r3, #14
 800a0d4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800a0d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0da:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800a0dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a0e0:	930b      	str	r3, [sp, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800a0e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800a0e6:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800a0ec:	2208      	movs	r2, #8
 800a0ee:	9207      	str	r2, [sp, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800a0f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a0f4:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800a0f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a0fa:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a0fc:	930f      	str	r3, [sp, #60]	@ 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800a0fe:	9301      	str	r3, [sp, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800a100:	9300      	str	r3, [sp, #0]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800a102:	466a      	mov	r2, sp
 800a104:	a902      	add	r1, sp, #8
 800a106:	f005 fc86 	bl	800fa16 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 800a10a:	2800      	cmp	r0, #0
}
 800a10c:	bf14      	ite	ne
 800a10e:	f06f 0005 	mvnne.w	r0, #5
 800a112:	2000      	moveq	r0, #0
 800a114:	b011      	add	sp, #68	@ 0x44
 800a116:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a11a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a11e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800a120:	233d      	movs	r3, #61	@ 0x3d
 800a122:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800a124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a128:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800a12a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a12e:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
 800a130:	e7d7      	b.n	800a0e2 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a132:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a136:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800a138:	23ee      	movs	r3, #238	@ 0xee
 800a13a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800a13c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a140:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800a142:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800a146:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
 800a148:	e7cb      	b.n	800a0e2 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a14a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a14e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800a150:	23ed      	movs	r3, #237	@ 0xed
 800a152:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800a154:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a158:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800a15a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800a15e:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
 800a160:	e7bf      	b.n	800a0e2 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>

0800a162 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a162:	b500      	push	{lr}
 800a164:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800a166:	2903      	cmp	r1, #3
 800a168:	d80e      	bhi.n	800a188 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 800a16a:	e8df f001 	tbb	[pc, r1]
 800a16e:	2502      	.short	0x2502
 800a170:	3d31      	.short	0x3d31
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a176:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800a178:	230c      	movs	r3, #12
 800a17a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800a17c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a180:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800a182:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a186:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800a188:	2308      	movs	r3, #8
 800a18a:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800a18c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800a190:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a192:	2300      	movs	r3, #0
 800a194:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a196:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a198:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a19a:	930f      	str	r3, [sp, #60]	@ 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800a19c:	9301      	str	r3, [sp, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800a19e:	9300      	str	r3, [sp, #0]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800a1a0:	466a      	mov	r2, sp
 800a1a2:	a902      	add	r1, sp, #8
 800a1a4:	f005 fc37 	bl	800fa16 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 800a1a8:	2800      	cmp	r0, #0
}
 800a1aa:	bf14      	ite	ne
 800a1ac:	f06f 0005 	mvnne.w	r0, #5
 800a1b0:	2000      	moveq	r0, #0
 800a1b2:	b011      	add	sp, #68	@ 0x44
 800a1b4:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a1b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1bc:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800a1be:	23bc      	movs	r3, #188	@ 0xbc
 800a1c0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800a1c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1c6:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800a1c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1cc:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
 800a1ce:	e7db      	b.n	800a188 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a1d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1d4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800a1d6:	23ec      	movs	r3, #236	@ 0xec
 800a1d8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800a1da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a1de:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800a1e0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800a1e4:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
 800a1e6:	e7cf      	b.n	800a188 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a1e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a1ec:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800a1ee:	23eb      	movs	r3, #235	@ 0xeb
 800a1f0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800a1f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a1f6:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800a1f8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800a1fc:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
 800a1fe:	e7c3      	b.n	800a188 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>

0800a200 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a200:	b500      	push	{lr}
 800a202:	b08f      	sub	sp, #60	@ 0x3c
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800a204:	2903      	cmp	r1, #3
 800a206:	bf14      	ite	ne
 800a208:	f44f 7380 	movne.w	r3, #256	@ 0x100
 800a20c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
 800a210:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800a212:	2366      	movs	r3, #102	@ 0x66
 800a214:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a216:	2300      	movs	r3, #0
 800a218:	9307      	str	r3, [sp, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a21a:	9308      	str	r3, [sp, #32]
  s_command.DataMode          = QSPI_DATA_NONE;
 800a21c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800a21e:	9305      	str	r3, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a220:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a222:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a224:	930d      	str	r3, [sp, #52]	@ 0x34

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a22a:	4669      	mov	r1, sp
 800a22c:	f005 fa72 	bl	800f714 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800a230:	2800      	cmp	r0, #0
}
 800a232:	bf14      	ite	ne
 800a234:	f06f 0001 	mvnne.w	r0, #1
 800a238:	2000      	moveq	r0, #0
 800a23a:	b00f      	add	sp, #60	@ 0x3c
 800a23c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a240 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a240:	b500      	push	{lr}
 800a242:	b08f      	sub	sp, #60	@ 0x3c
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800a244:	2903      	cmp	r1, #3
 800a246:	bf14      	ite	ne
 800a248:	f44f 7380 	movne.w	r3, #256	@ 0x100
 800a24c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
 800a250:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800a252:	2399      	movs	r3, #153	@ 0x99
 800a254:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a256:	2300      	movs	r3, #0
 800a258:	9307      	str	r3, [sp, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a25a:	9308      	str	r3, [sp, #32]
  s_command.DataMode          = QSPI_DATA_NONE;
 800a25c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800a25e:	9305      	str	r3, [sp, #20]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a260:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a262:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a264:	930d      	str	r3, [sp, #52]	@ 0x34

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a26a:	4669      	mov	r1, sp
 800a26c:	f005 fa52 	bl	800f714 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800a270:	2800      	cmp	r0, #0
}
 800a272:	bf14      	ite	ne
 800a274:	f06f 0001 	mvnne.w	r0, #1
 800a278:	2000      	moveq	r0, #0
 800a27a:	b00f      	add	sp, #60	@ 0x3c
 800a27c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a280 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800a280:	b510      	push	{r4, lr}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a282:	6884      	ldr	r4, [r0, #8]
 800a284:	8800      	ldrh	r0, [r0, #0]
 800a286:	47a0      	blx	r4
}
 800a288:	bd10      	pop	{r4, pc}

0800a28a <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a28a:	b510      	push	{r4, lr}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a28c:	6844      	ldr	r4, [r0, #4]
 800a28e:	8800      	ldrh	r0, [r0, #0]
 800a290:	47a0      	blx	r4
}
 800a292:	bd10      	pop	{r4, pc}

0800a294 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	4604      	mov	r4, r0
 800a298:	460e      	mov	r6, r1
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800a29a:	68c3      	ldr	r3, [r0, #12]
 800a29c:	4798      	blx	r3
 800a29e:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a2a0:	68e3      	ldr	r3, [r4, #12]
 800a2a2:	4798      	blx	r3
 800a2a4:	1b40      	subs	r0, r0, r5
 800a2a6:	42b0      	cmp	r0, r6
 800a2a8:	d3fa      	bcc.n	800a2a0 <OTM8009A_IO_Delay+0xc>
  {
  }
  return OTM8009A_OK;
}
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2b0 <OTM8009A_Init>:
{
 800a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	b085      	sub	sp, #20
 800a2b6:	4683      	mov	fp, r0
 800a2b8:	9100      	str	r1, [sp, #0]
 800a2ba:	9201      	str	r2, [sp, #4]
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a2bc:	f100 0410 	add.w	r4, r0, #16
 800a2c0:	4df5      	ldr	r5, [pc, #980]	@ (800a698 <OTM8009A_Init+0x3e8>)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f000 fb6f 	bl	800a9ac <otm8009a_write_reg>
 800a2ce:	4607      	mov	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	4af2      	ldr	r2, [pc, #968]	@ (800a69c <OTM8009A_Init+0x3ec>)
 800a2d4:	21ff      	movs	r1, #255	@ 0xff
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 fb68 	bl	800a9ac <otm8009a_write_reg>
 800a2dc:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a2de:	1c6e      	adds	r6, r5, #1
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4632      	mov	r2, r6
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f000 fb60 	bl	800a9ac <otm8009a_write_reg>
 800a2ec:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	4aeb      	ldr	r2, [pc, #940]	@ (800a6a0 <OTM8009A_Init+0x3f0>)
 800a2f2:	21ff      	movs	r1, #255	@ 0xff
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fb59 	bl	800a9ac <otm8009a_write_reg>
 800a2fa:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4632      	mov	r2, r6
 800a300:	4619      	mov	r1, r3
 800a302:	4620      	mov	r0, r4
 800a304:	f000 fb52 	bl	800a9ac <otm8009a_write_reg>
 800a308:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800a30a:	2300      	movs	r3, #0
 800a30c:	1caa      	adds	r2, r5, #2
 800a30e:	21c4      	movs	r1, #196	@ 0xc4
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fb4b 	bl	800a9ac <otm8009a_write_reg>
 800a316:	4407      	add	r7, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800a318:	210a      	movs	r1, #10
 800a31a:	4658      	mov	r0, fp
 800a31c:	f7ff ffba 	bl	800a294 <OTM8009A_IO_Delay>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800a320:	2300      	movs	r3, #0
 800a322:	1cea      	adds	r2, r5, #3
 800a324:	4619      	mov	r1, r3
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fb40 	bl	800a9ac <otm8009a_write_reg>
 800a32c:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800a32e:	2300      	movs	r3, #0
 800a330:	1d2a      	adds	r2, r5, #4
 800a332:	21c4      	movs	r1, #196	@ 0xc4
 800a334:	4620      	mov	r0, r4
 800a336:	f000 fb39 	bl	800a9ac <otm8009a_write_reg>
 800a33a:	4407      	add	r7, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800a33c:	210a      	movs	r1, #10
 800a33e:	4658      	mov	r0, fp
 800a340:	f7ff ffa8 	bl	800a294 <OTM8009A_IO_Delay>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800a344:	2300      	movs	r3, #0
 800a346:	1d6a      	adds	r2, r5, #5
 800a348:	4619      	mov	r1, r3
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 fb2e 	bl	800a9ac <otm8009a_write_reg>
 800a350:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800a352:	2300      	movs	r3, #0
 800a354:	1daa      	adds	r2, r5, #6
 800a356:	21c5      	movs	r1, #197	@ 0xc5
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fb27 	bl	800a9ac <otm8009a_write_reg>
 800a35e:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800a360:	2300      	movs	r3, #0
 800a362:	1dea      	adds	r2, r5, #7
 800a364:	4619      	mov	r1, r3
 800a366:	4620      	mov	r0, r4
 800a368:	f000 fb20 	bl	800a9ac <otm8009a_write_reg>
 800a36c:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800a36e:	f105 0908 	add.w	r9, r5, #8
 800a372:	2300      	movs	r3, #0
 800a374:	464a      	mov	r2, r9
 800a376:	21c5      	movs	r1, #197	@ 0xc5
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 fb17 	bl	800a9ac <otm8009a_write_reg>
 800a37e:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800a380:	2300      	movs	r3, #0
 800a382:	f105 0209 	add.w	r2, r5, #9
 800a386:	4619      	mov	r1, r3
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 fb0f 	bl	800a9ac <otm8009a_write_reg>
 800a38e:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800a390:	2300      	movs	r3, #0
 800a392:	f105 020a 	add.w	r2, r5, #10
 800a396:	21c0      	movs	r1, #192	@ 0xc0
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fb07 	bl	800a9ac <otm8009a_write_reg>
 800a39e:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 fb00 	bl	800a9ac <otm8009a_write_reg>
 800a3ac:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f105 020b 	add.w	r2, r5, #11
 800a3b4:	21d9      	movs	r1, #217	@ 0xd9
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f000 faf8 	bl	800a9ac <otm8009a_write_reg>
 800a3bc:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800a3be:	f105 080e 	add.w	r8, r5, #14
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 faef 	bl	800a9ac <otm8009a_write_reg>
 800a3ce:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f105 020f 	add.w	r2, r5, #15
 800a3d6:	21c1      	movs	r1, #193	@ 0xc1
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 fae7 	bl	800a9ac <otm8009a_write_reg>
 800a3de:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f105 0210 	add.w	r2, r5, #16
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 fadf 	bl	800a9ac <otm8009a_write_reg>
 800a3ee:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f105 0211 	add.w	r2, r5, #17
 800a3f6:	21c5      	movs	r1, #197	@ 0xc5
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f000 fad7 	bl	800a9ac <otm8009a_write_reg>
 800a3fe:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800a400:	2300      	movs	r3, #0
 800a402:	f105 0212 	add.w	r2, r5, #18
 800a406:	4619      	mov	r1, r3
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 facf 	bl	800a9ac <otm8009a_write_reg>
 800a40e:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800a410:	2300      	movs	r3, #0
 800a412:	464a      	mov	r2, r9
 800a414:	21c5      	movs	r1, #197	@ 0xc5
 800a416:	4620      	mov	r0, r4
 800a418:	f000 fac8 	bl	800a9ac <otm8009a_write_reg>
 800a41c:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a41e:	2300      	movs	r3, #0
 800a420:	462a      	mov	r2, r5
 800a422:	4619      	mov	r1, r3
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fac1 	bl	800a9ac <otm8009a_write_reg>
 800a42a:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800a42c:	2302      	movs	r3, #2
 800a42e:	4a9d      	ldr	r2, [pc, #628]	@ (800a6a4 <OTM8009A_Init+0x3f4>)
 800a430:	21d8      	movs	r1, #216	@ 0xd8
 800a432:	4620      	mov	r0, r4
 800a434:	f000 faba 	bl	800a9ac <otm8009a_write_reg>
 800a438:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800a43a:	2300      	movs	r3, #0
 800a43c:	f105 0213 	add.w	r2, r5, #19
 800a440:	4619      	mov	r1, r3
 800a442:	4620      	mov	r0, r4
 800a444:	f000 fab2 	bl	800a9ac <otm8009a_write_reg>
 800a448:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800a44a:	2300      	movs	r3, #0
 800a44c:	f105 0214 	add.w	r2, r5, #20
 800a450:	21c5      	movs	r1, #197	@ 0xc5
 800a452:	4620      	mov	r0, r4
 800a454:	f000 faaa 	bl	800a9ac <otm8009a_write_reg>
 800a458:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800a45a:	2300      	movs	r3, #0
 800a45c:	f105 0215 	add.w	r2, r5, #21
 800a460:	4619      	mov	r1, r3
 800a462:	4620      	mov	r0, r4
 800a464:	f000 faa2 	bl	800a9ac <otm8009a_write_reg>
 800a468:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800a46a:	2300      	movs	r3, #0
 800a46c:	f105 0216 	add.w	r2, r5, #22
 800a470:	21c0      	movs	r1, #192	@ 0xc0
 800a472:	4620      	mov	r0, r4
 800a474:	f000 fa9a 	bl	800a9ac <otm8009a_write_reg>
 800a478:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800a47a:	2300      	movs	r3, #0
 800a47c:	f105 0217 	add.w	r2, r5, #23
 800a480:	4619      	mov	r1, r3
 800a482:	4620      	mov	r0, r4
 800a484:	f000 fa92 	bl	800a9ac <otm8009a_write_reg>
 800a488:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800a48a:	2300      	movs	r3, #0
 800a48c:	f105 0218 	add.w	r2, r5, #24
 800a490:	21c5      	movs	r1, #197	@ 0xc5
 800a492:	4620      	mov	r0, r4
 800a494:	f000 fa8a 	bl	800a9ac <otm8009a_write_reg>
 800a498:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800a49a:	2300      	movs	r3, #0
 800a49c:	f105 020c 	add.w	r2, r5, #12
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 fa82 	bl	800a9ac <otm8009a_write_reg>
 800a4a8:	eb07 0900 	add.w	r9, r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f105 0219 	add.w	r2, r5, #25
 800a4b2:	21c4      	movs	r1, #196	@ 0xc4
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 fa79 	bl	800a9ac <otm8009a_write_reg>
 800a4ba:	4481      	add	r9, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4642      	mov	r2, r8
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 fa72 	bl	800a9ac <otm8009a_write_reg>
 800a4c8:	eb09 0800 	add.w	r8, r9, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f105 021a 	add.w	r2, r5, #26
 800a4d2:	21c1      	movs	r1, #193	@ 0xc1
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 fa69 	bl	800a9ac <otm8009a_write_reg>
 800a4da:	4480      	add	r8, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f105 021b 	add.w	r2, r5, #27
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 fa61 	bl	800a9ac <otm8009a_write_reg>
 800a4ea:	4480      	add	r8, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	4a6e      	ldr	r2, [pc, #440]	@ (800a6a8 <OTM8009A_Init+0x3f8>)
 800a4f0:	21b3      	movs	r1, #179	@ 0xb3
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 fa5a 	bl	800a9ac <otm8009a_write_reg>
 800a4f8:	4480      	add	r8, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	4619      	mov	r1, r3
 800a500:	4620      	mov	r0, r4
 800a502:	f000 fa53 	bl	800a9ac <otm8009a_write_reg>
 800a506:	4480      	add	r8, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800a508:	2306      	movs	r3, #6
 800a50a:	4a68      	ldr	r2, [pc, #416]	@ (800a6ac <OTM8009A_Init+0x3fc>)
 800a50c:	21ce      	movs	r1, #206	@ 0xce
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 fa4c 	bl	800a9ac <otm8009a_write_reg>
 800a514:	4480      	add	r8, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a516:	2300      	movs	r3, #0
 800a518:	f105 021c 	add.w	r2, r5, #28
 800a51c:	4619      	mov	r1, r3
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 fa44 	bl	800a9ac <otm8009a_write_reg>
 800a524:	eb08 0700 	add.w	r7, r8, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800a528:	230e      	movs	r3, #14
 800a52a:	4a61      	ldr	r2, [pc, #388]	@ (800a6b0 <OTM8009A_Init+0x400>)
 800a52c:	21ce      	movs	r1, #206	@ 0xce
 800a52e:	4620      	mov	r0, r4
 800a530:	f000 fa3c 	bl	800a9ac <otm8009a_write_reg>
 800a534:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a536:	f105 0a1d 	add.w	sl, r5, #29
 800a53a:	2300      	movs	r3, #0
 800a53c:	4652      	mov	r2, sl
 800a53e:	4619      	mov	r1, r3
 800a540:	4620      	mov	r0, r4
 800a542:	f000 fa33 	bl	800a9ac <otm8009a_write_reg>
 800a546:	eb07 0800 	add.w	r8, r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800a54a:	230e      	movs	r3, #14
 800a54c:	4a59      	ldr	r2, [pc, #356]	@ (800a6b4 <OTM8009A_Init+0x404>)
 800a54e:	21ce      	movs	r1, #206	@ 0xce
 800a550:	4620      	mov	r0, r4
 800a552:	f000 fa2b 	bl	800a9ac <otm8009a_write_reg>
 800a556:	4480      	add	r8, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a558:	f105 091e 	add.w	r9, r5, #30
 800a55c:	2300      	movs	r3, #0
 800a55e:	464a      	mov	r2, r9
 800a560:	4619      	mov	r1, r3
 800a562:	4620      	mov	r0, r4
 800a564:	f000 fa22 	bl	800a9ac <otm8009a_write_reg>
 800a568:	eb08 0700 	add.w	r7, r8, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800a56c:	230a      	movs	r3, #10
 800a56e:	4a52      	ldr	r2, [pc, #328]	@ (800a6b8 <OTM8009A_Init+0x408>)
 800a570:	21cf      	movs	r1, #207	@ 0xcf
 800a572:	4620      	mov	r0, r4
 800a574:	f000 fa1a 	bl	800a9ac <otm8009a_write_reg>
 800a578:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a57a:	f105 081f 	add.w	r8, r5, #31
 800a57e:	2300      	movs	r3, #0
 800a580:	4642      	mov	r2, r8
 800a582:	4619      	mov	r1, r3
 800a584:	4620      	mov	r0, r4
 800a586:	f000 fa11 	bl	800a9ac <otm8009a_write_reg>
 800a58a:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800a58c:	2300      	movs	r3, #0
 800a58e:	f105 022c 	add.w	r2, r5, #44	@ 0x2c
 800a592:	21cf      	movs	r1, #207	@ 0xcf
 800a594:	4620      	mov	r0, r4
 800a596:	f000 fa09 	bl	800a9ac <otm8009a_write_reg>
 800a59a:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a59c:	2300      	movs	r3, #0
 800a59e:	4632      	mov	r2, r6
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f000 fa02 	bl	800a9ac <otm8009a_write_reg>
 800a5a8:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800a5aa:	230a      	movs	r3, #10
 800a5ac:	4a43      	ldr	r2, [pc, #268]	@ (800a6bc <OTM8009A_Init+0x40c>)
 800a5ae:	21cb      	movs	r1, #203	@ 0xcb
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 f9fb 	bl	800a9ac <otm8009a_write_reg>
 800a5b6:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f105 0220 	add.w	r2, r5, #32
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 f9f3 	bl	800a9ac <otm8009a_write_reg>
 800a5c6:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800a5c8:	230f      	movs	r3, #15
 800a5ca:	4a3d      	ldr	r2, [pc, #244]	@ (800a6c0 <OTM8009A_Init+0x410>)
 800a5cc:	21cb      	movs	r1, #203	@ 0xcb
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 f9ec 	bl	800a9ac <otm8009a_write_reg>
 800a5d4:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f105 021c 	add.w	r2, r5, #28
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f000 f9e4 	bl	800a9ac <otm8009a_write_reg>
 800a5e4:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800a5e6:	230f      	movs	r3, #15
 800a5e8:	4a36      	ldr	r2, [pc, #216]	@ (800a6c4 <OTM8009A_Init+0x414>)
 800a5ea:	21cb      	movs	r1, #203	@ 0xcb
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 f9dd 	bl	800a9ac <otm8009a_write_reg>
 800a5f2:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4652      	mov	r2, sl
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 f9d6 	bl	800a9ac <otm8009a_write_reg>
 800a600:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800a602:	230a      	movs	r3, #10
 800a604:	4a30      	ldr	r2, [pc, #192]	@ (800a6c8 <OTM8009A_Init+0x418>)
 800a606:	21cb      	movs	r1, #203	@ 0xcb
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 f9cf 	bl	800a9ac <otm8009a_write_reg>
 800a60e:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a610:	2300      	movs	r3, #0
 800a612:	464a      	mov	r2, r9
 800a614:	4619      	mov	r1, r3
 800a616:	4620      	mov	r0, r4
 800a618:	f000 f9c8 	bl	800a9ac <otm8009a_write_reg>
 800a61c:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800a61e:	230f      	movs	r3, #15
 800a620:	4a2a      	ldr	r2, [pc, #168]	@ (800a6cc <OTM8009A_Init+0x41c>)
 800a622:	21cb      	movs	r1, #203	@ 0xcb
 800a624:	4620      	mov	r0, r4
 800a626:	f000 f9c1 	bl	800a9ac <otm8009a_write_reg>
 800a62a:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a62c:	2300      	movs	r3, #0
 800a62e:	4642      	mov	r2, r8
 800a630:	4619      	mov	r1, r3
 800a632:	4620      	mov	r0, r4
 800a634:	f000 f9ba 	bl	800a9ac <otm8009a_write_reg>
 800a638:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800a63a:	230f      	movs	r3, #15
 800a63c:	4a24      	ldr	r2, [pc, #144]	@ (800a6d0 <OTM8009A_Init+0x420>)
 800a63e:	21cb      	movs	r1, #203	@ 0xcb
 800a640:	4620      	mov	r0, r4
 800a642:	f000 f9b3 	bl	800a9ac <otm8009a_write_reg>
 800a646:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800a648:	2300      	movs	r3, #0
 800a64a:	f105 0221 	add.w	r2, r5, #33	@ 0x21
 800a64e:	4619      	mov	r1, r3
 800a650:	4620      	mov	r0, r4
 800a652:	f000 f9ab 	bl	800a9ac <otm8009a_write_reg>
 800a656:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800a658:	230a      	movs	r3, #10
 800a65a:	4a1e      	ldr	r2, [pc, #120]	@ (800a6d4 <OTM8009A_Init+0x424>)
 800a65c:	21cb      	movs	r1, #203	@ 0xcb
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 f9a4 	bl	800a9ac <otm8009a_write_reg>
 800a664:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800a666:	2300      	movs	r3, #0
 800a668:	f105 0222 	add.w	r2, r5, #34	@ 0x22
 800a66c:	4619      	mov	r1, r3
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 f99c 	bl	800a9ac <otm8009a_write_reg>
 800a674:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800a676:	230a      	movs	r3, #10
 800a678:	4a17      	ldr	r2, [pc, #92]	@ (800a6d8 <OTM8009A_Init+0x428>)
 800a67a:	21cb      	movs	r1, #203	@ 0xcb
 800a67c:	4620      	mov	r0, r4
 800a67e:	f000 f995 	bl	800a9ac <otm8009a_write_reg>
 800a682:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800a684:	2300      	movs	r3, #0
 800a686:	4632      	mov	r2, r6
 800a688:	4619      	mov	r1, r3
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 f98e 	bl	800a9ac <otm8009a_write_reg>
 800a690:	4407      	add	r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800a692:	230a      	movs	r3, #10
 800a694:	e022      	b.n	800a6dc <OTM8009A_Init+0x42c>
 800a696:	bf00      	nop
 800a698:	0802dab1 	.word	0x0802dab1
 800a69c:	0802daac 	.word	0x0802daac
 800a6a0:	0802daa8 	.word	0x0802daa8
 800a6a4:	0802daa4 	.word	0x0802daa4
 800a6a8:	0802daa0 	.word	0x0802daa0
 800a6ac:	0802da98 	.word	0x0802da98
 800a6b0:	0802da88 	.word	0x0802da88
 800a6b4:	0802da78 	.word	0x0802da78
 800a6b8:	0802da6c 	.word	0x0802da6c
 800a6bc:	0802da60 	.word	0x0802da60
 800a6c0:	0802da50 	.word	0x0802da50
 800a6c4:	0802da40 	.word	0x0802da40
 800a6c8:	0802da34 	.word	0x0802da34
 800a6cc:	0802da24 	.word	0x0802da24
 800a6d0:	0802da14 	.word	0x0802da14
 800a6d4:	0802da08 	.word	0x0802da08
 800a6d8:	0802d9fc 	.word	0x0802d9fc
 800a6dc:	4a9a      	ldr	r2, [pc, #616]	@ (800a948 <OTM8009A_Init+0x698>)
 800a6de:	21cc      	movs	r1, #204	@ 0xcc
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 f963 	bl	800a9ac <otm8009a_write_reg>
 800a6e6:	183e      	adds	r6, r7, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f105 0220 	add.w	r2, r5, #32
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f000 f95b 	bl	800a9ac <otm8009a_write_reg>
 800a6f6:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800a6f8:	230f      	movs	r3, #15
 800a6fa:	4a94      	ldr	r2, [pc, #592]	@ (800a94c <OTM8009A_Init+0x69c>)
 800a6fc:	21cc      	movs	r1, #204	@ 0xcc
 800a6fe:	4620      	mov	r0, r4
 800a700:	f000 f954 	bl	800a9ac <otm8009a_write_reg>
 800a704:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800a706:	2300      	movs	r3, #0
 800a708:	f105 021c 	add.w	r2, r5, #28
 800a70c:	4619      	mov	r1, r3
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 f94c 	bl	800a9ac <otm8009a_write_reg>
 800a714:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800a716:	230f      	movs	r3, #15
 800a718:	4a8d      	ldr	r2, [pc, #564]	@ (800a950 <OTM8009A_Init+0x6a0>)
 800a71a:	21cc      	movs	r1, #204	@ 0xcc
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 f945 	bl	800a9ac <otm8009a_write_reg>
 800a722:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800a724:	2300      	movs	r3, #0
 800a726:	4652      	mov	r2, sl
 800a728:	4619      	mov	r1, r3
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f93e 	bl	800a9ac <otm8009a_write_reg>
 800a730:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800a732:	230a      	movs	r3, #10
 800a734:	4a87      	ldr	r2, [pc, #540]	@ (800a954 <OTM8009A_Init+0x6a4>)
 800a736:	21cc      	movs	r1, #204	@ 0xcc
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 f937 	bl	800a9ac <otm8009a_write_reg>
 800a73e:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800a740:	2300      	movs	r3, #0
 800a742:	464a      	mov	r2, r9
 800a744:	4619      	mov	r1, r3
 800a746:	4620      	mov	r0, r4
 800a748:	f000 f930 	bl	800a9ac <otm8009a_write_reg>
 800a74c:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800a74e:	230f      	movs	r3, #15
 800a750:	4a81      	ldr	r2, [pc, #516]	@ (800a958 <OTM8009A_Init+0x6a8>)
 800a752:	21cc      	movs	r1, #204	@ 0xcc
 800a754:	4620      	mov	r0, r4
 800a756:	f000 f929 	bl	800a9ac <otm8009a_write_reg>
 800a75a:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800a75c:	2300      	movs	r3, #0
 800a75e:	4642      	mov	r2, r8
 800a760:	4619      	mov	r1, r3
 800a762:	4620      	mov	r0, r4
 800a764:	f000 f922 	bl	800a9ac <otm8009a_write_reg>
 800a768:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800a76a:	230f      	movs	r3, #15
 800a76c:	4a7b      	ldr	r2, [pc, #492]	@ (800a95c <OTM8009A_Init+0x6ac>)
 800a76e:	21cc      	movs	r1, #204	@ 0xcc
 800a770:	4620      	mov	r0, r4
 800a772:	f000 f91b 	bl	800a9ac <otm8009a_write_reg>
 800a776:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800a778:	2300      	movs	r3, #0
 800a77a:	f105 020c 	add.w	r2, r5, #12
 800a77e:	4619      	mov	r1, r3
 800a780:	4620      	mov	r0, r4
 800a782:	f000 f913 	bl	800a9ac <otm8009a_write_reg>
 800a786:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800a788:	2300      	movs	r3, #0
 800a78a:	f105 022d 	add.w	r2, r5, #45	@ 0x2d
 800a78e:	21c5      	movs	r1, #197	@ 0xc5
 800a790:	4620      	mov	r0, r4
 800a792:	f000 f90b 	bl	800a9ac <otm8009a_write_reg>
 800a796:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800a798:	2300      	movs	r3, #0
 800a79a:	f105 022e 	add.w	r2, r5, #46	@ 0x2e
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f000 f903 	bl	800a9ac <otm8009a_write_reg>
 800a7a6:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f105 022f 	add.w	r2, r5, #47	@ 0x2f
 800a7ae:	21f5      	movs	r1, #245	@ 0xf5
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 f8fb 	bl	800a9ac <otm8009a_write_reg>
 800a7b6:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 f8f3 	bl	800a9ac <otm8009a_write_reg>
 800a7c6:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f105 0231 	add.w	r2, r5, #49	@ 0x31
 800a7ce:	21c6      	movs	r1, #198	@ 0xc6
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 f8eb 	bl	800a9ac <otm8009a_write_reg>
 800a7d6:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a7d8:	2300      	movs	r3, #0
 800a7da:	462a      	mov	r2, r5
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 f8e4 	bl	800a9ac <otm8009a_write_reg>
 800a7e4:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	4a5d      	ldr	r2, [pc, #372]	@ (800a960 <OTM8009A_Init+0x6b0>)
 800a7ea:	21ff      	movs	r1, #255	@ 0xff
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 f8dd 	bl	800a9ac <otm8009a_write_reg>
 800a7f2:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	462a      	mov	r2, r5
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 f8d6 	bl	800a9ac <otm8009a_write_reg>
 800a800:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a802:	2300      	movs	r3, #0
 800a804:	462a      	mov	r2, r5
 800a806:	4619      	mov	r1, r3
 800a808:	4620      	mov	r0, r4
 800a80a:	f000 f8cf 	bl	800a9ac <otm8009a_write_reg>
 800a80e:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800a810:	2310      	movs	r3, #16
 800a812:	4a54      	ldr	r2, [pc, #336]	@ (800a964 <OTM8009A_Init+0x6b4>)
 800a814:	21e1      	movs	r1, #225	@ 0xe1
 800a816:	4620      	mov	r0, r4
 800a818:	f000 f8c8 	bl	800a9ac <otm8009a_write_reg>
 800a81c:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a81e:	2300      	movs	r3, #0
 800a820:	462a      	mov	r2, r5
 800a822:	4619      	mov	r1, r3
 800a824:	4620      	mov	r0, r4
 800a826:	f000 f8c1 	bl	800a9ac <otm8009a_write_reg>
 800a82a:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800a82c:	2310      	movs	r3, #16
 800a82e:	4a4e      	ldr	r2, [pc, #312]	@ (800a968 <OTM8009A_Init+0x6b8>)
 800a830:	21e2      	movs	r1, #226	@ 0xe2
 800a832:	4620      	mov	r0, r4
 800a834:	f000 f8ba 	bl	800a9ac <otm8009a_write_reg>
 800a838:	4406      	add	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800a83a:	2300      	movs	r3, #0
 800a83c:	f105 0223 	add.w	r2, r5, #35	@ 0x23
 800a840:	2111      	movs	r1, #17
 800a842:	4620      	mov	r0, r4
 800a844:	f000 f8b2 	bl	800a9ac <otm8009a_write_reg>
 800a848:	1835      	adds	r5, r6, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800a84a:	2178      	movs	r1, #120	@ 0x78
 800a84c:	4658      	mov	r0, fp
 800a84e:	f7ff fd21 	bl	800a294 <OTM8009A_IO_Delay>
  switch(ColorCoding)
 800a852:	9b00      	ldr	r3, [sp, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d04f      	beq.n	800a8f8 <OTM8009A_Init+0x648>
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d10a      	bne.n	800a872 <OTM8009A_Init+0x5c2>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800a85c:	2300      	movs	r3, #0
 800a85e:	f108 0205 	add.w	r2, r8, #5
 800a862:	213a      	movs	r1, #58	@ 0x3a
 800a864:	4620      	mov	r0, r4
 800a866:	f000 f8a1 	bl	800a9ac <otm8009a_write_reg>
 800a86a:	4405      	add	r5, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 800a86c:	4b3f      	ldr	r3, [pc, #252]	@ (800a96c <OTM8009A_Init+0x6bc>)
 800a86e:	2202      	movs	r2, #2
 800a870:	605a      	str	r2, [r3, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800a872:	9b01      	ldr	r3, [sp, #4]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d04a      	beq.n	800a90e <OTM8009A_Init+0x65e>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800a878:	4b3c      	ldr	r3, [pc, #240]	@ (800a96c <OTM8009A_Init+0x6bc>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800a87e:	4e3c      	ldr	r6, [pc, #240]	@ (800a970 <OTM8009A_Init+0x6c0>)
 800a880:	2300      	movs	r3, #0
 800a882:	4632      	mov	r2, r6
 800a884:	2151      	movs	r1, #81	@ 0x51
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f890 	bl	800a9ac <otm8009a_write_reg>
 800a88c:	4405      	add	r5, r0
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800a88e:	2700      	movs	r7, #0
 800a890:	4b36      	ldr	r3, [pc, #216]	@ (800a96c <OTM8009A_Init+0x6bc>)
 800a892:	609f      	str	r7, [r3, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800a894:	463b      	mov	r3, r7
 800a896:	1c72      	adds	r2, r6, #1
 800a898:	2153      	movs	r1, #83	@ 0x53
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 f886 	bl	800a9ac <otm8009a_write_reg>
 800a8a0:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	1cb2      	adds	r2, r6, #2
 800a8a6:	2155      	movs	r1, #85	@ 0x55
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 f87f 	bl	800a9ac <otm8009a_write_reg>
 800a8ae:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800a8b0:	463b      	mov	r3, r7
 800a8b2:	1cf2      	adds	r2, r6, #3
 800a8b4:	215e      	movs	r1, #94	@ 0x5e
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f878 	bl	800a9ac <otm8009a_write_reg>
 800a8bc:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800a8be:	463b      	mov	r3, r7
 800a8c0:	1d32      	adds	r2, r6, #4
 800a8c2:	2129      	movs	r1, #41	@ 0x29
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 f871 	bl	800a9ac <otm8009a_write_reg>
 800a8ca:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a8cc:	463b      	mov	r3, r7
 800a8ce:	f1a6 0226 	sub.w	r2, r6, #38	@ 0x26
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 f869 	bl	800a9ac <otm8009a_write_reg>
 800a8da:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800a8dc:	463b      	mov	r3, r7
 800a8de:	1d72      	adds	r2, r6, #5
 800a8e0:	212c      	movs	r1, #44	@ 0x2c
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f000 f862 	bl	800a9ac <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800a8e8:	42c5      	cmn	r5, r0
}
 800a8ea:	bf14      	ite	ne
 800a8ec:	f04f 30ff 	movne.w	r0, #4294967295
 800a8f0:	4638      	moveq	r0, r7
 800a8f2:	b005      	add	sp, #20
 800a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a974 <OTM8009A_Init+0x6c4>)
 800a8fc:	213a      	movs	r1, #58	@ 0x3a
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 f854 	bl	800a9ac <otm8009a_write_reg>
 800a904:	4405      	add	r5, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800a906:	4b19      	ldr	r3, [pc, #100]	@ (800a96c <OTM8009A_Init+0x6bc>)
 800a908:	2200      	movs	r2, #0
 800a90a:	605a      	str	r2, [r3, #4]
    break;
 800a90c:	e7b1      	b.n	800a872 <OTM8009A_Init+0x5c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800a90e:	2360      	movs	r3, #96	@ 0x60
 800a910:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800a914:	2300      	movs	r3, #0
 800a916:	f10d 020f 	add.w	r2, sp, #15
 800a91a:	2136      	movs	r1, #54	@ 0x36
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 f845 	bl	800a9ac <otm8009a_write_reg>
 800a922:	182e      	adds	r6, r5, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800a924:	2304      	movs	r3, #4
 800a926:	4a14      	ldr	r2, [pc, #80]	@ (800a978 <OTM8009A_Init+0x6c8>)
 800a928:	212a      	movs	r1, #42	@ 0x2a
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 f83e 	bl	800a9ac <otm8009a_write_reg>
 800a930:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800a932:	2304      	movs	r3, #4
 800a934:	4a11      	ldr	r2, [pc, #68]	@ (800a97c <OTM8009A_Init+0x6cc>)
 800a936:	212b      	movs	r1, #43	@ 0x2b
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 f837 	bl	800a9ac <otm8009a_write_reg>
 800a93e:	1835      	adds	r5, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800a940:	4b0a      	ldr	r3, [pc, #40]	@ (800a96c <OTM8009A_Init+0x6bc>)
 800a942:	2201      	movs	r2, #1
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	e79a      	b.n	800a87e <OTM8009A_Init+0x5ce>
 800a948:	0802d9f0 	.word	0x0802d9f0
 800a94c:	0802d9e0 	.word	0x0802d9e0
 800a950:	0802d9d0 	.word	0x0802d9d0
 800a954:	0802d9c4 	.word	0x0802d9c4
 800a958:	0802d9b4 	.word	0x0802d9b4
 800a95c:	0802d9a4 	.word	0x0802d9a4
 800a960:	0802d9a0 	.word	0x0802d9a0
 800a964:	0802d990 	.word	0x0802d990
 800a968:	0802d980 	.word	0x0802d980
 800a96c:	240481bc 	.word	0x240481bc
 800a970:	0802dad7 	.word	0x0802dad7
 800a974:	0802dad6 	.word	0x0802dad6
 800a978:	0802dae8 	.word	0x0802dae8
 800a97c:	0802dae4 	.word	0x0802dae4

0800a980 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 800a980:	4603      	mov	r3, r0
 800a982:	b160      	cbz	r0, 800a99e <OTM8009A_RegisterBusIO+0x1e>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a984:	684a      	ldr	r2, [r1, #4]
 800a986:	6042      	str	r2, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a988:	688a      	ldr	r2, [r1, #8]
 800a98a:	6082      	str	r2, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800a98c:	68ca      	ldr	r2, [r1, #12]
 800a98e:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800a990:	4a04      	ldr	r2, [pc, #16]	@ (800a9a4 <OTM8009A_RegisterBusIO+0x24>)
 800a992:	6142      	str	r2, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800a994:	4a04      	ldr	r2, [pc, #16]	@ (800a9a8 <OTM8009A_RegisterBusIO+0x28>)
 800a996:	6102      	str	r2, [r0, #16]
    pObj->Ctx.handle   = pObj;
 800a998:	6198      	str	r0, [r3, #24]
  int32_t ret = OTM8009A_OK;
 800a99a:	2000      	movs	r0, #0
 800a99c:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a9a2:	4770      	bx	lr
 800a9a4:	0800a281 	.word	0x0800a281
 800a9a8:	0800a28b 	.word	0x0800a28b

0800a9ac <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800a9ac:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800a9ae:	6804      	ldr	r4, [r0, #0]
 800a9b0:	6880      	ldr	r0, [r0, #8]
 800a9b2:	47a0      	blx	r4
}
 800a9b4:	bd10      	pop	{r4, pc}
	...

0800a9b8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800a9b8:	4a11      	ldr	r2, [pc, #68]	@ (800aa00 <BSP_I2C4_DeInit+0x48>)
 800a9ba:	6813      	ldr	r3, [r2, #0]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800a9c0:	b10b      	cbz	r3, 800a9c6 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 800a9c2:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800a9c4:	4770      	bx	lr
{
 800a9c6:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800a9c8:	4c0e      	ldr	r4, [pc, #56]	@ (800aa04 <BSP_I2C4_DeInit+0x4c>)
 800a9ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f002 fb5e 	bl	800d090 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800a9d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f002 fb59 	bl	800d090 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800a9de:	4a0a      	ldr	r2, [pc, #40]	@ (800aa08 <BSP_I2C4_DeInit+0x50>)
 800a9e0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800a9e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a9ec:	4807      	ldr	r0, [pc, #28]	@ (800aa0c <BSP_I2C4_DeInit+0x54>)
 800a9ee:	f002 fde8 	bl	800d5c2 <HAL_I2C_DeInit>
  int32_t ret  = BSP_ERROR_NONE;
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	bf14      	ite	ne
 800a9f6:	f06f 0007 	mvnne.w	r0, #7
 800a9fa:	2000      	moveq	r0, #0
}
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	bf00      	nop
 800aa00:	24048c20 	.word	0x24048c20
 800aa04:	58020c00 	.word	0x58020c00
 800aa08:	58024400 	.word	0x58024400
 800aa0c:	240481c8 	.word	0x240481c8

0800aa10 <MX_I2C4_Init>:
{
 800aa10:	b510      	push	{r4, lr}
 800aa12:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 800aa14:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800aa1e:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 800aa20:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800aa22:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800aa24:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800aa26:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800aa28:	f002 fd6e 	bl	800d508 <HAL_I2C_Init>
 800aa2c:	b108      	cbz	r0, 800aa32 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 800aa2e:	2001      	movs	r0, #1
}
 800aa30:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800aa32:	2100      	movs	r1, #0
 800aa34:	4620      	mov	r0, r4
 800aa36:	f002 ffe2 	bl	800d9fe <HAL_I2CEx_ConfigAnalogFilter>
 800aa3a:	b108      	cbz	r0, 800aa40 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 800aa3c:	2001      	movs	r0, #1
 800aa3e:	e7f7      	b.n	800aa30 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800aa40:	2100      	movs	r1, #0
 800aa42:	4620      	mov	r0, r4
 800aa44:	f003 f809 	bl	800da5a <HAL_I2CEx_ConfigDigitalFilter>
 800aa48:	3800      	subs	r0, #0
 800aa4a:	bf18      	it	ne
 800aa4c:	2001      	movne	r0, #1
 800aa4e:	e7ef      	b.n	800aa30 <MX_I2C4_Init+0x20>

0800aa50 <BSP_I2C4_Init>:
{
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	b09b      	sub	sp, #108	@ 0x6c
  hbus_i2c4.Instance = BUS_I2C4;
 800aa56:	4baf      	ldr	r3, [pc, #700]	@ (800ad14 <BSP_I2C4_Init+0x2c4>)
 800aa58:	4aaf      	ldr	r2, [pc, #700]	@ (800ad18 <BSP_I2C4_Init+0x2c8>)
 800aa5a:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 800aa5c:	4baf      	ldr	r3, [pc, #700]	@ (800ad1c <BSP_I2C4_Init+0x2cc>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	9302      	str	r3, [sp, #8]
 800aa62:	b11b      	cbz	r3, 800aa6c <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
 800aa64:	2000      	movs	r0, #0
}
 800aa66:	b01b      	add	sp, #108	@ 0x6c
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800aa6c:	4bab      	ldr	r3, [pc, #684]	@ (800ad1c <BSP_I2C4_Init+0x2cc>)
 800aa6e:	2201      	movs	r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800aa72:	48a8      	ldr	r0, [pc, #672]	@ (800ad14 <BSP_I2C4_Init+0x2c4>)
 800aa74:	f002 ffbe 	bl	800d9f4 <HAL_I2C_GetState>
 800aa78:	b108      	cbz	r0, 800aa7e <BSP_I2C4_Init+0x2e>
  int32_t ret = BSP_ERROR_NONE;
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e7f3      	b.n	800aa66 <BSP_I2C4_Init+0x16>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800aa7e:	4ca8      	ldr	r4, [pc, #672]	@ (800ad20 <BSP_I2C4_Init+0x2d0>)
 800aa80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800aa84:	f043 0308 	orr.w	r3, r3, #8
 800aa88:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800aa8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800aa90:	f003 0308 	and.w	r3, r3, #8
 800aa94:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800aa98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800aa9c:	f043 0308 	orr.w	r3, r3, #8
 800aaa0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800aaa4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800aaa8:	f003 0308 	and.w	r3, r3, #8
 800aaac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aaae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800aab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aab4:	9315      	str	r3, [sp, #84]	@ 0x54
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800aab6:	f04f 0912 	mov.w	r9, #18
 800aaba:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800aabe:	f04f 0800 	mov.w	r8, #0
 800aac2:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800aac6:	2702      	movs	r7, #2
 800aac8:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800aaca:	2604      	movs	r6, #4
 800aacc:	9619      	str	r6, [sp, #100]	@ 0x64
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800aace:	4d95      	ldr	r5, [pc, #596]	@ (800ad24 <BSP_I2C4_Init+0x2d4>)
 800aad0:	a915      	add	r1, sp, #84	@ 0x54
 800aad2:	4628      	mov	r0, r5
 800aad4:	f002 f9da 	bl	800ce8c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800aad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aadc:	9315      	str	r3, [sp, #84]	@ 0x54
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800aade:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800aae2:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800aae6:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800aae8:	9619      	str	r6, [sp, #100]	@ 0x64
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800aaea:	a915      	add	r1, sp, #84	@ 0x54
 800aaec:	4628      	mov	r0, r5
 800aaee:	f002 f9cd 	bl	800ce8c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800aaf2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800aaf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aafa:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 800aafe:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800ab02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab06:	9314      	str	r3, [sp, #80]	@ 0x50
 800ab08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  BUS_I2C4_FORCE_RESET();
 800ab0a:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800ab0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab12:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 800ab16:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800ab1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab1e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800ab22:	f005 fdf7 	bl	8010714 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800ab26:	4603      	mov	r3, r0
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	f000 811e 	beq.w	800ad6a <BSP_I2C4_Init+0x31a>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800ab2e:	4a7e      	ldr	r2, [pc, #504]	@ (800ad28 <BSP_I2C4_Init+0x2d8>)
 800ab30:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800ab34:	fbb2 f0f0 	udiv	r0, r2, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800ab38:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800ab3c:	f1c3 0a32 	rsb	sl, r3, #50	@ 0x32
  if (tsdadel_min <= 0)
 800ab40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800ab44:	4403      	add	r3, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800ab46:	f5c3 79c3 	rsb	r9, r3, #390	@ 0x186
  if (tsdadel_max <= 0)
 800ab4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800ab4e:	4b77      	ldr	r3, [pc, #476]	@ (800ad2c <BSP_I2C4_Init+0x2dc>)
 800ab50:	681d      	ldr	r5, [r3, #0]
  if (tsdadel_max <= 0)
 800ab52:	4606      	mov	r6, r0
 800ab54:	9c02      	ldr	r4, [sp, #8]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800ab56:	f04f 0e10 	mov.w	lr, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800ab5a:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 800ad30 <BSP_I2C4_Init+0x2e0>
{
 800ab5e:	4632      	mov	r2, r6
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800ab60:	9f02      	ldr	r7, [sp, #8]
 800ab62:	9401      	str	r4, [sp, #4]
 800ab64:	e051      	b.n	800ac0a <BSP_I2C4_Init+0x1ba>
 800ab66:	4b71      	ldr	r3, [pc, #452]	@ (800ad2c <BSP_I2C4_Init+0x2dc>)
 800ab68:	601d      	str	r5, [r3, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ab6a:	462b      	mov	r3, r5
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ab6c:	0041      	lsls	r1, r0, #1
 800ab6e:	f101 0e32 	add.w	lr, r1, #50	@ 0x32
 800ab72:	4a6f      	ldr	r2, [pc, #444]	@ (800ad30 <BSP_I2C4_Init+0x2e0>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ab74:	f8dd c008 	ldr.w	ip, [sp, #8]
  prev_error = ti2cspeed;
 800ab78:	f640 1ac4 	movw	sl, #2500	@ 0x9c4
 uint32_t ret = 0xFFFFFFFFU;
 800ab7c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab80:	9400      	str	r4, [sp, #0]
 800ab82:	f640 0434 	movw	r4, #2100	@ 0x834
 800ab86:	1a64      	subs	r4, r4, r1
 800ab88:	eba4 040e 	sub.w	r4, r4, lr
 800ab8c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab8e:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
 800ab92:	f6a1 1192 	subw	r1, r1, #2450	@ 0x992
 800ab96:	910c      	str	r1, [sp, #48]	@ 0x30
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800ab98:	f640 4935 	movw	r9, #3125	@ 0xc35
 800ab9c:	f240 2157 	movw	r1, #599	@ 0x257
 800aba0:	4281      	cmp	r1, r0
 800aba2:	bf38      	it	cc
 800aba4:	4601      	movcc	r1, r0
 800aba6:	468b      	mov	fp, r1
 800aba8:	461f      	mov	r7, r3
 800abaa:	f8cd a00c 	str.w	sl, [sp, #12]
 800abae:	4663      	mov	r3, ip
 800abb0:	4680      	mov	r8, r0
 800abb2:	4674      	mov	r4, lr
 800abb4:	e096      	b.n	800ace4 <BSP_I2C4_Init+0x294>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800abb6:	f10c 0c01 	add.w	ip, ip, #1
 800abba:	4433      	add	r3, r6
 800abbc:	f1bc 0f10 	cmp.w	ip, #16
 800abc0:	d01f      	beq.n	800ac02 <BSP_I2C4_Init+0x1b2>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800abc2:	459a      	cmp	sl, r3
 800abc4:	bf8c      	ite	hi
 800abc6:	2100      	movhi	r1, #0
 800abc8:	2101      	movls	r1, #1
 800abca:	4599      	cmp	r9, r3
 800abcc:	bf38      	it	cc
 800abce:	2100      	movcc	r1, #0
            if(presc != prev_presc)
 800abd0:	45a6      	cmp	lr, r4
 800abd2:	bf0c      	ite	eq
 800abd4:	2100      	moveq	r1, #0
 800abd6:	f001 0101 	andne.w	r1, r1, #1
 800abda:	2900      	cmp	r1, #0
 800abdc:	d0eb      	beq.n	800abb6 <BSP_I2C4_Init+0x166>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800abde:	eb05 0885 	add.w	r8, r5, r5, lsl #2
 800abe2:	eb0b 0e88 	add.w	lr, fp, r8, lsl #2
 800abe6:	f84b 4028 	str.w	r4, [fp, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800abea:	9a00      	ldr	r2, [sp, #0]
 800abec:	f8ce 2004 	str.w	r2, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800abf0:	f8ce c008 	str.w	ip, [lr, #8]
              I2c_valid_timing_nbr ++;
 800abf4:	3501      	adds	r5, #1
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800abf6:	2d7f      	cmp	r5, #127	@ 0x7f
 800abf8:	d8b5      	bhi.n	800ab66 <BSP_I2C4_Init+0x116>
 800abfa:	4688      	mov	r8, r1
 800abfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ac00:	e7d9      	b.n	800abb6 <BSP_I2C4_Init+0x166>
 800ac02:	9a03      	ldr	r2, [sp, #12]
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800ac04:	4432      	add	r2, r6
 800ac06:	2f10      	cmp	r7, #16
 800ac08:	d009      	beq.n	800ac1e <BSP_I2C4_Init+0x1ce>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800ac0a:	9700      	str	r7, [sp, #0]
 800ac0c:	3701      	adds	r7, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800ac0e:	f5b2 7faf 	cmp.w	r2, #350	@ 0x15e
 800ac12:	d3f7      	bcc.n	800ac04 <BSP_I2C4_Init+0x1b4>
 800ac14:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ac18:	4663      	mov	r3, ip
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800ac1a:	9203      	str	r2, [sp, #12]
 800ac1c:	e7d1      	b.n	800abc2 <BSP_I2C4_Init+0x172>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800ac1e:	3401      	adds	r4, #1
 800ac20:	4406      	add	r6, r0
 800ac22:	2c10      	cmp	r4, #16
 800ac24:	d19b      	bne.n	800ab5e <BSP_I2C4_Init+0x10e>
 800ac26:	f1b8 0f00 	cmp.w	r8, #0
 800ac2a:	d001      	beq.n	800ac30 <BSP_I2C4_Init+0x1e0>
 800ac2c:	4b3f      	ldr	r3, [pc, #252]	@ (800ad2c <BSP_I2C4_Init+0x2dc>)
 800ac2e:	601d      	str	r5, [r3, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ac30:	4b3e      	ldr	r3, [pc, #248]	@ (800ad2c <BSP_I2C4_Init+0x2dc>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 8098 	beq.w	800ad6a <BSP_I2C4_Init+0x31a>
 800ac3a:	e797      	b.n	800ab6c <BSP_I2C4_Init+0x11c>
              I2c_valid_timing[count].scll = scll;
 800ac3c:	f8cc a010 	str.w	sl, [ip, #16]
              I2c_valid_timing[count].sclh = sclh;
 800ac40:	f8cc 600c 	str.w	r6, [ip, #12]
              prev_error = (uint32_t)error;
 800ac44:	4607      	mov	r7, r0
              I2c_valid_timing[count].sclh = sclh;
 800ac46:	9801      	ldr	r0, [sp, #4]
 800ac48:	9000      	str	r0, [sp, #0]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ac4a:	440a      	add	r2, r1
 800ac4c:	1a6d      	subs	r5, r5, r1
 800ac4e:	440c      	add	r4, r1
 800ac50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac54:	d010      	beq.n	800ac78 <BSP_I2C4_Init+0x228>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800ac56:	461e      	mov	r6, r3
 800ac58:	3301      	adds	r3, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800ac5a:	f602 10c4 	addw	r0, r2, #2500	@ 0x9c4
 800ac5e:	4540      	cmp	r0, r8
 800ac60:	d9f3      	bls.n	800ac4a <BSP_I2C4_Init+0x1fa>
 800ac62:	4548      	cmp	r0, r9
 800ac64:	d8f1      	bhi.n	800ac4a <BSP_I2C4_Init+0x1fa>
 800ac66:	45a3      	cmp	fp, r4
 800ac68:	d2ef      	bcs.n	800ac4a <BSP_I2C4_Init+0x1fa>
              error = -error;
 800ac6a:	ea32 0022 	bics.w	r0, r2, r2, asr #32
 800ac6e:	bf28      	it	cs
 800ac70:	4628      	movcs	r0, r5
            if ((uint32_t)error < prev_error)
 800ac72:	42b8      	cmp	r0, r7
 800ac74:	d2e9      	bcs.n	800ac4a <BSP_I2C4_Init+0x1fa>
 800ac76:	e7e1      	b.n	800ac3c <BSP_I2C4_Init+0x1ec>
 800ac78:	9703      	str	r7, [sp, #12]
 800ac7a:	9e04      	ldr	r6, [sp, #16]
 800ac7c:	9f05      	ldr	r7, [sp, #20]
 800ac7e:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ac82:	f8dd a01c 	ldr.w	sl, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ac86:	448c      	add	ip, r1
 800ac88:	ebaa 0a01 	sub.w	sl, sl, r1
 800ac8c:	448e      	add	lr, r1
 800ac8e:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800ac92:	d01d      	beq.n	800acd0 <BSP_I2C4_Init+0x280>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ac94:	4630      	mov	r0, r6
 800ac96:	3601      	adds	r6, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800ac98:	f240 5314 	movw	r3, #1300	@ 0x514
 800ac9c:	459c      	cmp	ip, r3
 800ac9e:	d9f2      	bls.n	800ac86 <BSP_I2C4_Init+0x236>
 800aca0:	f1ac 0332 	sub.w	r3, ip, #50	@ 0x32
 800aca4:	ebb7 0f93 	cmp.w	r7, r3, lsr #2
 800aca8:	d2ed      	bcs.n	800ac86 <BSP_I2C4_Init+0x236>
 800acaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acac:	eb03 020e 	add.w	r2, r3, lr
 800acb0:	9c08      	ldr	r4, [sp, #32]
 800acb2:	4655      	mov	r5, sl
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800acb4:	9b02      	ldr	r3, [sp, #8]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800acb6:	f640 0822 	movw	r8, #2082	@ 0x822
 800acba:	9604      	str	r6, [sp, #16]
 800acbc:	9705      	str	r7, [sp, #20]
 800acbe:	9f03      	ldr	r7, [sp, #12]
 800acc0:	f8cd c018 	str.w	ip, [sp, #24]
 800acc4:	f8cd a01c 	str.w	sl, [sp, #28]
 800acc8:	4682      	mov	sl, r0
 800acca:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 800acce:	e7c2      	b.n	800ac56 <BSP_I2C4_Init+0x206>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800acd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acd2:	46b8      	mov	r8, r7
 800acd4:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800acd6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800acd8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800acda:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800acdc:	3301      	adds	r3, #1
 800acde:	3214      	adds	r2, #20
 800ace0:	429f      	cmp	r7, r3
 800ace2:	d027      	beq.n	800ad34 <BSP_I2C4_Init+0x2e4>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800ace4:	9209      	str	r2, [sp, #36]	@ 0x24
 800ace6:	6811      	ldr	r1, [r2, #0]
 800ace8:	fb01 8108 	mla	r1, r1, r8, r8
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800acec:	190e      	adds	r6, r1, r4
 800acee:	9608      	str	r6, [sp, #32]
 800acf0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800acf2:	eba0 0a41 	sub.w	sl, r0, r1, lsl #1
 800acf6:	eb05 0e01 	add.w	lr, r5, r1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800acfa:	46b4      	mov	ip, r6
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800acfc:	9e02      	ldr	r6, [sp, #8]
 800acfe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ad00:	4408      	add	r0, r1
 800ad02:	900a      	str	r0, [sp, #40]	@ 0x28
              I2c_valid_timing[count].sclh = sclh;
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	970d      	str	r7, [sp, #52]	@ 0x34
 800ad08:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad0a:	4647      	mov	r7, r8
 800ad0c:	940f      	str	r4, [sp, #60]	@ 0x3c
 800ad0e:	9210      	str	r2, [sp, #64]	@ 0x40
 800ad10:	9511      	str	r5, [sp, #68]	@ 0x44
 800ad12:	e7bf      	b.n	800ac94 <BSP_I2C4_Init+0x244>
 800ad14:	240481c8 	.word	0x240481c8
 800ad18:	58001c00 	.word	0x58001c00
 800ad1c:	24048c20 	.word	0x24048c20
 800ad20:	58024400 	.word	0x58024400
 800ad24:	58020c00 	.word	0x58020c00
 800ad28:	3b9aca00 	.word	0x3b9aca00
 800ad2c:	2404821c 	.word	0x2404821c
 800ad30:	24048220 	.word	0x24048220
        if (idx < I2C_VALID_TIMING_NBR)
 800ad34:	9c00      	ldr	r4, [sp, #0]
 800ad36:	2c7f      	cmp	r4, #127	@ 0x7f
 800ad38:	d821      	bhi.n	800ad7e <BSP_I2C4_Init+0x32e>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ad3a:	4912      	ldr	r1, [pc, #72]	@ (800ad84 <BSP_I2C4_Init+0x334>)
 800ad3c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ad40:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ad44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800ad48:	7c02      	ldrb	r2, [r0, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ad4a:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800ad4e:	6843      	ldr	r3, [r0, #4]
 800ad50:	051b      	lsls	r3, r3, #20
 800ad52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ad56:	431a      	orrs	r2, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800ad58:	6883      	ldr	r3, [r0, #8]
 800ad5a:	041b      	lsls	r3, r3, #16
 800ad5c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ad60:	431a      	orrs	r2, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800ad62:	68c3      	ldr	r3, [r0, #12]
 800ad64:	021b      	lsls	r3, r3, #8
 800ad66:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ad68:	4313      	orrs	r3, r2
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4806      	ldr	r0, [pc, #24]	@ (800ad88 <BSP_I2C4_Init+0x338>)
 800ad6e:	f7ff fe4f 	bl	800aa10 <MX_I2C4_Init>
  int32_t ret = BSP_ERROR_NONE;
 800ad72:	2800      	cmp	r0, #0
 800ad74:	bf14      	ite	ne
 800ad76:	f06f 0007 	mvnne.w	r0, #7
 800ad7a:	2000      	moveq	r0, #0
 800ad7c:	e673      	b.n	800aa66 <BSP_I2C4_Init+0x16>
  uint32_t ret = 0;
 800ad7e:	9b02      	ldr	r3, [sp, #8]
 800ad80:	e7f3      	b.n	800ad6a <BSP_I2C4_Init+0x31a>
 800ad82:	bf00      	nop
 800ad84:	24048220 	.word	0x24048220
 800ad88:	240481c8 	.word	0x240481c8

0800ad8c <BSP_I2C4_WriteReg>:
{
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	b084      	sub	sp, #16
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800ad90:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800ad94:	9402      	str	r4, [sp, #8]
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	9200      	str	r2, [sp, #0]
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	460a      	mov	r2, r1
 800ad9e:	4601      	mov	r1, r0
 800ada0:	4807      	ldr	r0, [pc, #28]	@ (800adc0 <BSP_I2C4_WriteReg+0x34>)
 800ada2:	f002 fc27 	bl	800d5f4 <HAL_I2C_Mem_Write>
 800ada6:	b908      	cbnz	r0, 800adac <BSP_I2C4_WriteReg+0x20>
}
 800ada8:	b004      	add	sp, #16
 800adaa:	bd10      	pop	{r4, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800adac:	4804      	ldr	r0, [pc, #16]	@ (800adc0 <BSP_I2C4_WriteReg+0x34>)
 800adae:	f002 fe24 	bl	800d9fa <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800adb2:	2804      	cmp	r0, #4
 800adb4:	bf14      	ite	ne
 800adb6:	f06f 0003 	mvnne.w	r0, #3
 800adba:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 800adbe:	e7f3      	b.n	800ada8 <BSP_I2C4_WriteReg+0x1c>
 800adc0:	240481c8 	.word	0x240481c8

0800adc4 <BSP_I2C4_ReadReg>:
{
 800adc4:	b510      	push	{r4, lr}
 800adc6:	b084      	sub	sp, #16
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800adc8:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800adcc:	9402      	str	r4, [sp, #8]
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	9200      	str	r2, [sp, #0]
 800add2:	2301      	movs	r3, #1
 800add4:	460a      	mov	r2, r1
 800add6:	4601      	mov	r1, r0
 800add8:	4807      	ldr	r0, [pc, #28]	@ (800adf8 <BSP_I2C4_ReadReg+0x34>)
 800adda:	f002 fd09 	bl	800d7f0 <HAL_I2C_Mem_Read>
 800adde:	b908      	cbnz	r0, 800ade4 <BSP_I2C4_ReadReg+0x20>
}
 800ade0:	b004      	add	sp, #16
 800ade2:	bd10      	pop	{r4, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800ade4:	4804      	ldr	r0, [pc, #16]	@ (800adf8 <BSP_I2C4_ReadReg+0x34>)
 800ade6:	f002 fe08 	bl	800d9fa <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800adea:	2804      	cmp	r0, #4
 800adec:	bf14      	ite	ne
 800adee:	f06f 0003 	mvnne.w	r0, #3
 800adf2:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
 800adf6:	e7f3      	b.n	800ade0 <BSP_I2C4_ReadReg+0x1c>
 800adf8:	240481c8 	.word	0x240481c8

0800adfc <BSP_GetTick>:
{
 800adfc:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 800adfe:	f000 fd5f 	bl	800b8c0 <HAL_GetTick>
}
 800ae02:	bd08      	pop	{r3, pc}

0800ae04 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800ae04:	b508      	push	{r3, lr}
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800ae06:	4a0a      	ldr	r2, [pc, #40]	@ (800ae30 <MX_QSPI_Init+0x2c>)
 800ae08:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800ae0a:	684a      	ldr	r2, [r1, #4]
 800ae0c:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800ae0e:	2201      	movs	r2, #1
 800ae10:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800ae12:	688a      	ldr	r2, [r1, #8]
 800ae14:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800ae16:	680a      	ldr	r2, [r1, #0]
 800ae18:	6102      	str	r2, [r0, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800ae1a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800ae1e:	6142      	str	r2, [r0, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800ae20:	2200      	movs	r2, #0
 800ae22:	6182      	str	r2, [r0, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800ae24:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800ae26:	68ca      	ldr	r2, [r1, #12]
 800ae28:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800ae2a:	f004 fc21 	bl	800f670 <HAL_QSPI_Init>
}
 800ae2e:	bd08      	pop	{r3, pc}
 800ae30:	52005000 	.word	0x52005000

0800ae34 <BSP_QSPI_EnableMemoryMappedMode>:
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ae34:	b9b8      	cbnz	r0, 800ae66 <BSP_QSPI_EnableMemoryMappedMode+0x32>
{
 800ae36:	b508      	push	{r3, lr}
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800ae38:	4b0f      	ldr	r3, [pc, #60]	@ (800ae78 <BSP_QSPI_EnableMemoryMappedMode+0x44>)
 800ae3a:	789b      	ldrb	r3, [r3, #2]
 800ae3c:	b94b      	cbnz	r3, 800ae52 <BSP_QSPI_EnableMemoryMappedMode+0x1e>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ae3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae78 <BSP_QSPI_EnableMemoryMappedMode+0x44>)
 800ae40:	7859      	ldrb	r1, [r3, #1]
 800ae42:	480e      	ldr	r0, [pc, #56]	@ (800ae7c <BSP_QSPI_EnableMemoryMappedMode+0x48>)
 800ae44:	f7ff f98d 	bl	800a162 <MT25TL01G_EnableMemoryMappedModeSTR>
 800ae48:	b980      	cbnz	r0, 800ae6c <BSP_QSPI_EnableMemoryMappedMode+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae78 <BSP_QSPI_EnableMemoryMappedMode+0x44>)
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
}
 800ae50:	bd08      	pop	{r3, pc}
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ae52:	4b09      	ldr	r3, [pc, #36]	@ (800ae78 <BSP_QSPI_EnableMemoryMappedMode+0x44>)
 800ae54:	7859      	ldrb	r1, [r3, #1]
 800ae56:	4809      	ldr	r0, [pc, #36]	@ (800ae7c <BSP_QSPI_EnableMemoryMappedMode+0x48>)
 800ae58:	f7ff f930 	bl	800a0bc <MT25TL01G_EnableMemoryMappedModeDTR>
 800ae5c:	b948      	cbnz	r0, 800ae72 <BSP_QSPI_EnableMemoryMappedMode+0x3e>
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ae5e:	4b06      	ldr	r3, [pc, #24]	@ (800ae78 <BSP_QSPI_EnableMemoryMappedMode+0x44>)
 800ae60:	2202      	movs	r2, #2
 800ae62:	701a      	strb	r2, [r3, #0]
 800ae64:	e7f4      	b.n	800ae50 <BSP_QSPI_EnableMemoryMappedMode+0x1c>
    ret = BSP_ERROR_WRONG_PARAM;
 800ae66:	f06f 0001 	mvn.w	r0, #1
}
 800ae6a:	4770      	bx	lr
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae6c:	f06f 0004 	mvn.w	r0, #4
 800ae70:	e7ee      	b.n	800ae50 <BSP_QSPI_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae72:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800ae76:	e7eb      	b.n	800ae50 <BSP_QSPI_EnableMemoryMappedMode+0x1c>
 800ae78:	24048c24 	.word	0x24048c24
 800ae7c:	240003d8 	.word	0x240003d8

0800ae80 <BSP_QSPI_ConfigFlash>:
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ae80:	bb70      	cbnz	r0, 800aee0 <BSP_QSPI_ConfigFlash+0x60>
{
 800ae82:	b538      	push	{r3, r4, r5, lr}
 800ae84:	460d      	mov	r5, r1
 800ae86:	4614      	mov	r4, r2
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800ae88:	4b1a      	ldr	r3, [pc, #104]	@ (800aef4 <BSP_QSPI_ConfigFlash+0x74>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d02a      	beq.n	800aee6 <BSP_QSPI_ConfigFlash+0x66>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800ae90:	4819      	ldr	r0, [pc, #100]	@ (800aef8 <BSP_QSPI_ConfigFlash+0x78>)
 800ae92:	fab2 f382 	clz	r3, r2
 800ae96:	095b      	lsrs	r3, r3, #5
 800ae98:	011b      	lsls	r3, r3, #4
 800ae9a:	60c3      	str	r3, [r0, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800ae9c:	f004 fbe8 	bl	800f670 <HAL_QSPI_Init>
 800aea0:	bb20      	cbnz	r0, 800aeec <BSP_QSPI_ConfigFlash+0x6c>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800aea2:	4b14      	ldr	r3, [pc, #80]	@ (800aef4 <BSP_QSPI_ConfigFlash+0x74>)
 800aea4:	785b      	ldrb	r3, [r3, #1]
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d008      	beq.n	800aebc <BSP_QSPI_ConfigFlash+0x3c>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800aeaa:	2d03      	cmp	r5, #3
 800aeac:	d010      	beq.n	800aed0 <BSP_QSPI_ConfigFlash+0x50>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800aeae:	4b11      	ldr	r3, [pc, #68]	@ (800aef4 <BSP_QSPI_ConfigFlash+0x74>)
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800aeb4:	705d      	strb	r5, [r3, #1]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800aeb6:	709c      	strb	r4, [r3, #2]
 800aeb8:	2000      	movs	r0, #0
    }
  }

  /* Return BSP status */
  return ret;
}
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
          if(Mode != MT25TL01G_QPI_MODE)
 800aebc:	2d03      	cmp	r5, #3
 800aebe:	d0f6      	beq.n	800aeae <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800aec0:	480d      	ldr	r0, [pc, #52]	@ (800aef8 <BSP_QSPI_ConfigFlash+0x78>)
 800aec2:	f7ff f8df 	bl	800a084 <MT25TL01G_ExitQPIMode>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d0f1      	beq.n	800aeae <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800aeca:	f06f 0004 	mvn.w	r0, #4
 800aece:	e7f4      	b.n	800aeba <BSP_QSPI_ConfigFlash+0x3a>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800aed0:	4809      	ldr	r0, [pc, #36]	@ (800aef8 <BSP_QSPI_ConfigFlash+0x78>)
 800aed2:	f7ff f8bb 	bl	800a04c <MT25TL01G_EnterQPIMode>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d0e9      	beq.n	800aeae <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800aeda:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800aede:	e7ec      	b.n	800aeba <BSP_QSPI_ConfigFlash+0x3a>
    ret = BSP_ERROR_WRONG_PARAM;
 800aee0:	f06f 0001 	mvn.w	r0, #1
}
 800aee4:	4770      	bx	lr
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800aee6:	f06f 0019 	mvn.w	r0, #25
 800aeea:	e7e6      	b.n	800aeba <BSP_QSPI_ConfigFlash+0x3a>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800aeec:	f06f 0003 	mvn.w	r0, #3
 800aef0:	e7e3      	b.n	800aeba <BSP_QSPI_ConfigFlash+0x3a>
 800aef2:	bf00      	nop
 800aef4:	24048c24 	.word	0x24048c24
 800aef8:	240003d8 	.word	0x240003d8

0800aefc <BSP_QSPI_Init>:
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f040 81bf 	bne.w	800b280 <BSP_QSPI_Init+0x384>
{
 800af02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af06:	b0a5      	sub	sp, #148	@ 0x94
 800af08:	460c      	mov	r4, r1
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800af0a:	4b03      	ldr	r3, [pc, #12]	@ (800af18 <BSP_QSPI_Init+0x1c>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	b12b      	cbz	r3, 800af1c <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 800af10:	2000      	movs	r0, #0
}
 800af12:	b025      	add	sp, #148	@ 0x94
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	24048c24 	.word	0x24048c24
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800af1c:	4bbc      	ldr	r3, [pc, #752]	@ (800b210 <BSP_QSPI_Init+0x314>)
 800af1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800af22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af26:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800af2a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800af2e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800af32:	9201      	str	r2, [sp, #4]
 800af34:	9a01      	ldr	r2, [sp, #4]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800af36:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800af38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800af3e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800af40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800af44:	67da      	str	r2, [r3, #124]	@ 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800af46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af4a:	f042 0202 	orr.w	r2, r2, #2
 800af4e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800af52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af56:	f002 0202 	and.w	r2, r2, #2
 800af5a:	9202      	str	r2, [sp, #8]
 800af5c:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800af5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af66:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800af6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af6e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800af72:	9203      	str	r2, [sp, #12]
 800af74:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800af76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af7a:	f042 0208 	orr.w	r2, r2, #8
 800af7e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800af82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af86:	f002 0208 	and.w	r2, r2, #8
 800af8a:	9204      	str	r2, [sp, #16]
 800af8c:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800af8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af92:	f042 0220 	orr.w	r2, r2, #32
 800af96:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800af9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800af9e:	f002 0220 	and.w	r2, r2, #32
 800afa2:	9205      	str	r2, [sp, #20]
 800afa4:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800afa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800afaa:	f042 0220 	orr.w	r2, r2, #32
 800afae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800afb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800afb6:	f002 0220 	and.w	r2, r2, #32
 800afba:	9206      	str	r2, [sp, #24]
 800afbc:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800afbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800afc2:	f042 0220 	orr.w	r2, r2, #32
 800afc6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800afca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800afce:	f002 0220 	and.w	r2, r2, #32
 800afd2:	9207      	str	r2, [sp, #28]
 800afd4:	9a07      	ldr	r2, [sp, #28]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800afd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800afda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afde:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800afe2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800afe6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800afea:	9208      	str	r2, [sp, #32]
 800afec:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800afee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aff2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aff6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800affa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800affe:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800b002:	9209      	str	r2, [sp, #36]	@ 0x24
 800b004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800b006:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b00a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b00e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b012:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b016:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800b01a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b01c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800b01e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b022:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b026:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b02a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b02e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800b032:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b034:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800b036:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b03a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b03e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b04a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b04c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800b04e:	f04f 0a04 	mov.w	sl, #4
 800b052:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800b056:	2302      	movs	r3, #2
 800b058:	930e      	str	r3, [sp, #56]	@ 0x38
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b05a:	2303      	movs	r3, #3
 800b05c:	9310      	str	r3, [sp, #64]	@ 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b05e:	2700      	movs	r7, #0
 800b060:	970f      	str	r7, [sp, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b062:	2509      	movs	r5, #9
 800b064:	9511      	str	r5, [sp, #68]	@ 0x44
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800b066:	a90d      	add	r1, sp, #52	@ 0x34
 800b068:	486a      	ldr	r0, [pc, #424]	@ (800b214 <BSP_QSPI_Init+0x318>)
 800b06a:	f001 ff0f 	bl	800ce8c <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800b06e:	2640      	movs	r6, #64	@ 0x40
 800b070:	960d      	str	r6, [sp, #52]	@ 0x34
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800b072:	2301      	movs	r3, #1
 800b074:	930f      	str	r3, [sp, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800b076:	f04f 090a 	mov.w	r9, #10
 800b07a:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800b07e:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b228 <BSP_QSPI_Init+0x32c>
 800b082:	a90d      	add	r1, sp, #52	@ 0x34
 800b084:	4640      	mov	r0, r8
 800b086:	f001 ff01 	bl	800ce8c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800b08a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b08e:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b090:	970f      	str	r7, [sp, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b092:	9511      	str	r5, [sp, #68]	@ 0x44
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800b094:	a90d      	add	r1, sp, #52	@ 0x34
 800b096:	4860      	ldr	r0, [pc, #384]	@ (800b218 <BSP_QSPI_Init+0x31c>)
 800b098:	f001 fef8 	bl	800ce8c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800b09c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b0a0:	9511      	str	r5, [sp, #68]	@ 0x44
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800b0a2:	f8df b188 	ldr.w	fp, [pc, #392]	@ 800b22c <BSP_QSPI_Init+0x330>
 800b0a6:	a90d      	add	r1, sp, #52	@ 0x34
 800b0a8:	4658      	mov	r0, fp
 800b0aa:	f001 feef 	bl	800ce8c <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800b0ae:	f44f 7a00 	mov.w	sl, #512	@ 0x200
 800b0b2:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800b0b6:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800b0ba:	f8df 9174 	ldr.w	r9, [pc, #372]	@ 800b230 <BSP_QSPI_Init+0x334>
 800b0be:	a90d      	add	r1, sp, #52	@ 0x34
 800b0c0:	4648      	mov	r0, r9
 800b0c2:	f001 fee3 	bl	800ce8c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800b0c6:	2308      	movs	r3, #8
 800b0c8:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b0ca:	9511      	str	r5, [sp, #68]	@ 0x44
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800b0cc:	a90d      	add	r1, sp, #52	@ 0x34
 800b0ce:	4658      	mov	r0, fp
 800b0d0:	f001 fedc 	bl	800ce8c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800b0d4:	2380      	movs	r3, #128	@ 0x80
 800b0d6:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b0d8:	9511      	str	r5, [sp, #68]	@ 0x44
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800b0da:	a90d      	add	r1, sp, #52	@ 0x34
 800b0dc:	4648      	mov	r0, r9
 800b0de:	f001 fed5 	bl	800ce8c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800b0e2:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800b0e6:	a90d      	add	r1, sp, #52	@ 0x34
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	f001 fecf 	bl	800ce8c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800b0ee:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800b0f0:	a90d      	add	r1, sp, #52	@ 0x34
 800b0f2:	4648      	mov	r0, r9
 800b0f4:	f001 feca 	bl	800ce8c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800b0f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b0fc:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800b0fe:	a90d      	add	r1, sp, #52	@ 0x34
 800b100:	4640      	mov	r0, r8
 800b102:	f001 fec3 	bl	800ce8c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800b106:	463a      	mov	r2, r7
 800b108:	210f      	movs	r1, #15
 800b10a:	205c      	movs	r0, #92	@ 0x5c
 800b10c:	f000 fc0a 	bl	800b924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800b110:	205c      	movs	r0, #92	@ 0x5c
 800b112:	f000 fc3b 	bl	800b98c <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800b116:	a81f      	add	r0, sp, #124	@ 0x7c
 800b118:	f7fe feeb 	bl	8009ef2 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800b11c:	7863      	ldrb	r3, [r4, #1]
 800b11e:	4a3f      	ldr	r2, [pc, #252]	@ (800b21c <BSP_QSPI_Init+0x320>)
 800b120:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b124:	921c      	str	r2, [sp, #112]	@ 0x70
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800b126:	961e      	str	r6, [sp, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b128:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800b12a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800b12e:	fab2 f282 	clz	r2, r2
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800b132:	3a01      	subs	r2, #1
 800b134:	921b      	str	r2, [sp, #108]	@ 0x6c
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800b136:	fab3 f383 	clz	r3, r3
 800b13a:	095b      	lsrs	r3, r3, #5
 800b13c:	011b      	lsls	r3, r3, #4
 800b13e:	931d      	str	r3, [sp, #116]	@ 0x74
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800b140:	a91b      	add	r1, sp, #108	@ 0x6c
 800b142:	4837      	ldr	r0, [pc, #220]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b144:	f7ff fe5e 	bl	800ae04 <MX_QSPI_Init>
 800b148:	2800      	cmp	r0, #0
 800b14a:	f040 809c 	bne.w	800b286 <BSP_QSPI_Init+0x38a>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800b14e:	2103      	movs	r1, #3
 800b150:	4833      	ldr	r0, [pc, #204]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b152:	f7ff f855 	bl	800a200 <MT25TL01G_ResetEnable>
 800b156:	2800      	cmp	r0, #0
 800b158:	f040 80a1 	bne.w	800b29e <BSP_QSPI_Init+0x3a2>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800b15c:	2103      	movs	r1, #3
 800b15e:	4830      	ldr	r0, [pc, #192]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b160:	f7ff f86e 	bl	800a240 <MT25TL01G_ResetMemory>
 800b164:	2800      	cmp	r0, #0
 800b166:	f040 809a 	bne.w	800b29e <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b16a:	4b2e      	ldr	r3, [pc, #184]	@ (800b224 <BSP_QSPI_Init+0x328>)
 800b16c:	7859      	ldrb	r1, [r3, #1]
 800b16e:	482c      	ldr	r0, [pc, #176]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b170:	f7fe fed0 	bl	8009f14 <MT25TL01G_AutoPollingMemReady>
 800b174:	2800      	cmp	r0, #0
 800b176:	f040 8092 	bne.w	800b29e <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800b17a:	4639      	mov	r1, r7
 800b17c:	4828      	ldr	r0, [pc, #160]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b17e:	f7ff f83f 	bl	800a200 <MT25TL01G_ResetEnable>
 800b182:	2800      	cmp	r0, #0
 800b184:	f040 808b 	bne.w	800b29e <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800b188:	4639      	mov	r1, r7
 800b18a:	4825      	ldr	r0, [pc, #148]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b18c:	f7ff f858 	bl	800a240 <MT25TL01G_ResetMemory>
 800b190:	2800      	cmp	r0, #0
 800b192:	f040 8084 	bne.w	800b29e <BSP_QSPI_Init+0x3a2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800b196:	4b23      	ldr	r3, [pc, #140]	@ (800b224 <BSP_QSPI_Init+0x328>)
 800b198:	2201      	movs	r2, #1
 800b19a:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800b19c:	4639      	mov	r1, r7
 800b19e:	705f      	strb	r7, [r3, #1]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800b1a0:	709f      	strb	r7, [r3, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b1a2:	481f      	ldr	r0, [pc, #124]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b1a4:	f7fe feb6 	bl	8009f14 <MT25TL01G_AutoPollingMemReady>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d16f      	bne.n	800b28c <BSP_QSPI_Init+0x390>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b1ac:	4b1d      	ldr	r3, [pc, #116]	@ (800b224 <BSP_QSPI_Init+0x328>)
 800b1ae:	7859      	ldrb	r1, [r3, #1]
 800b1b0:	481b      	ldr	r0, [pc, #108]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b1b2:	f7fe ff1c 	bl	8009fee <MT25TL01G_Enter4BytesAddressMode>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d16b      	bne.n	800b292 <BSP_QSPI_Init+0x396>
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800b1ba:	f8ad 7002 	strh.w	r7, [sp, #2]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b1be:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800b1c2:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800b1c4:	2285      	movs	r2, #133	@ 0x85
 800b1c6:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b1c8:	9714      	str	r7, [sp, #80]	@ 0x50
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b1ca:	9715      	str	r7, [sp, #84]	@ 0x54
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800b1cc:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 800b1d0:	9216      	str	r2, [sp, #88]	@ 0x58
  s_command.DummyCycles       = 0;
 800b1d2:	9712      	str	r7, [sp, #72]	@ 0x48
  s_command.NbData            = 2;
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	9217      	str	r2, [sp, #92]	@ 0x5c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b1d8:	9718      	str	r7, [sp, #96]	@ 0x60
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b1da:	9719      	str	r7, [sp, #100]	@ 0x64
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b1dc:	971a      	str	r7, [sp, #104]	@ 0x68

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b1de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1e2:	a90d      	add	r1, sp, #52	@ 0x34
 800b1e4:	480e      	ldr	r0, [pc, #56]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b1e6:	f004 fa95 	bl	800f714 <HAL_QSPI_Command>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d154      	bne.n	800b298 <BSP_QSPI_Init+0x39c>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b1ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1f2:	f10d 0102 	add.w	r1, sp, #2
 800b1f6:	480a      	ldr	r0, [pc, #40]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b1f8:	f004 fb44 	bl	800f884 <HAL_QSPI_Receive>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d14b      	bne.n	800b298 <BSP_QSPI_Init+0x39c>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b200:	4b08      	ldr	r3, [pc, #32]	@ (800b224 <BSP_QSPI_Init+0x328>)
 800b202:	7859      	ldrb	r1, [r3, #1]
 800b204:	4806      	ldr	r0, [pc, #24]	@ (800b220 <BSP_QSPI_Init+0x324>)
 800b206:	f7fe feb0 	bl	8009f6a <MT25TL01G_WriteEnable>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d144      	bne.n	800b298 <BSP_QSPI_Init+0x39c>
 800b20e:	e011      	b.n	800b234 <BSP_QSPI_Init+0x338>
 800b210:	58024400 	.word	0x58024400
 800b214:	58020400 	.word	0x58020400
 800b218:	58020c00 	.word	0x58020c00
 800b21c:	0802daec 	.word	0x0802daec
 800b220:	240003d8 	.word	0x240003d8
 800b224:	24048c24 	.word	0x24048c24
 800b228:	58021800 	.word	0x58021800
 800b22c:	58021c00 	.word	0x58021c00
 800b230:	58021400 	.word	0x58021400
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800b234:	2381      	movs	r3, #129	@ 0x81
 800b236:	930d      	str	r3, [sp, #52]	@ 0x34
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800b238:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b23c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800b240:	0512      	lsls	r2, r2, #20
 800b242:	0d12      	lsrs	r2, r2, #20
 800b244:	f248 0380 	movw	r3, #32896	@ 0x8080
 800b248:	4313      	orrs	r3, r2
 800b24a:	f8ad 3002 	strh.w	r3, [sp, #2]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b24e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b252:	a90d      	add	r1, sp, #52	@ 0x34
 800b254:	4813      	ldr	r0, [pc, #76]	@ (800b2a4 <BSP_QSPI_Init+0x3a8>)
 800b256:	f004 fa5d 	bl	800f714 <HAL_QSPI_Command>
 800b25a:	b9e8      	cbnz	r0, 800b298 <BSP_QSPI_Init+0x39c>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b25c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b260:	f10d 0102 	add.w	r1, sp, #2
 800b264:	480f      	ldr	r0, [pc, #60]	@ (800b2a4 <BSP_QSPI_Init+0x3a8>)
 800b266:	f004 faa4 	bl	800f7b2 <HAL_QSPI_Transmit>
 800b26a:	b9a8      	cbnz	r0, 800b298 <BSP_QSPI_Init+0x39c>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800b26c:	7862      	ldrb	r2, [r4, #1]
 800b26e:	7821      	ldrb	r1, [r4, #0]
 800b270:	2000      	movs	r0, #0
 800b272:	f7ff fe05 	bl	800ae80 <BSP_QSPI_ConfigFlash>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800b276:	2800      	cmp	r0, #0
 800b278:	bf18      	it	ne
 800b27a:	f06f 0004 	mvnne.w	r0, #4
 800b27e:	e648      	b.n	800af12 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 800b280:	f06f 0001 	mvn.w	r0, #1
}
 800b284:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800b286:	f06f 0003 	mvn.w	r0, #3
 800b28a:	e642      	b.n	800af12 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b28c:	f06f 0004 	mvn.w	r0, #4
 800b290:	e63f      	b.n	800af12 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b292:	f06f 0004 	mvn.w	r0, #4
 800b296:	e63c      	b.n	800af12 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b298:	f06f 0004 	mvn.w	r0, #4
 800b29c:	e639      	b.n	800af12 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b29e:	f06f 0004 	mvn.w	r0, #4
 800b2a2:	e636      	b.n	800af12 <BSP_QSPI_Init+0x16>
 800b2a4:	240003d8 	.word	0x240003d8

0800b2a8 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800b2a8:	b978      	cbnz	r0, 800b2ca <BSP_SDRAM_DeInit+0x22>
{
 800b2aa:	b508      	push	{r3, lr}
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800b2ac:	4808      	ldr	r0, [pc, #32]	@ (800b2d0 <BSP_SDRAM_DeInit+0x28>)
 800b2ae:	4b09      	ldr	r3, [pc, #36]	@ (800b2d4 <BSP_SDRAM_DeInit+0x2c>)
 800b2b0:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800b2b2:	f006 f8ff 	bl	80114b4 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800b2b6:	207a      	movs	r0, #122	@ 0x7a
 800b2b8:	f000 fb76 	bl	800b9a8 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800b2bc:	4806      	ldr	r0, [pc, #24]	@ (800b2d8 <BSP_SDRAM_DeInit+0x30>)
 800b2be:	4b07      	ldr	r3, [pc, #28]	@ (800b2dc <BSP_SDRAM_DeInit+0x34>)
 800b2c0:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800b2c2:	f003 fede 	bl	800f082 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800b2c6:	2000      	movs	r0, #0
}
 800b2c8:	bd08      	pop	{r3, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800b2ca:	f06f 0001 	mvn.w	r0, #1
}
 800b2ce:	4770      	bx	lr
 800b2d0:	24048d28 	.word	0x24048d28
 800b2d4:	52004140 	.word	0x52004140
 800b2d8:	24048c30 	.word	0x24048c30
 800b2dc:	52000040 	.word	0x52000040

0800b2e0 <MX_SDRAM_Init>:
{
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	b088      	sub	sp, #32
  hSdram->Instance = FMC_SDRAM_DEVICE;
 800b2e4:	4a14      	ldr	r2, [pc, #80]	@ (800b338 <MX_SDRAM_Init+0x58>)
 800b2e6:	6002      	str	r2, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	6042      	str	r2, [r0, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800b2ec:	6082      	str	r2, [r0, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800b2ee:	2104      	movs	r1, #4
 800b2f0:	60c1      	str	r1, [r0, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	6102      	str	r2, [r0, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b2f6:	2240      	movs	r2, #64	@ 0x40
 800b2f8:	6142      	str	r2, [r0, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800b2fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800b2fe:	6182      	str	r2, [r0, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b300:	2200      	movs	r2, #0
 800b302:	61c2      	str	r2, [r0, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800b304:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800b308:	6204      	str	r4, [r0, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800b30a:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800b30e:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800b310:	4b0a      	ldr	r3, [pc, #40]	@ (800b33c <MX_SDRAM_Init+0x5c>)
 800b312:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.LoadToActiveDelay    = 2;
 800b314:	2302      	movs	r3, #2
 800b316:	9301      	str	r3, [sp, #4]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800b318:	2207      	movs	r2, #7
 800b31a:	9202      	str	r2, [sp, #8]
  sdram_timing.SelfRefreshTime      = 4;
 800b31c:	9103      	str	r1, [sp, #12]
  sdram_timing.RowCycleDelay        = 7;
 800b31e:	9204      	str	r2, [sp, #16]
  sdram_timing.WriteRecoveryTime    = 2;
 800b320:	9305      	str	r3, [sp, #20]
  sdram_timing.RPDelay              = 2;
 800b322:	9306      	str	r3, [sp, #24]
  sdram_timing.RCDDelay             = 2;
 800b324:	9307      	str	r3, [sp, #28]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800b326:	4469      	add	r1, sp
 800b328:	f006 f89c 	bl	8011464 <HAL_SDRAM_Init>
}
 800b32c:	3800      	subs	r0, #0
 800b32e:	bf18      	it	ne
 800b330:	2001      	movne	r0, #1
 800b332:	b008      	add	sp, #32
 800b334:	bd10      	pop	{r4, pc}
 800b336:	bf00      	nop
 800b338:	52004140 	.word	0x52004140
 800b33c:	24048d28 	.word	0x24048d28

0800b340 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 800b340:	2800      	cmp	r0, #0
 800b342:	f040 80e1 	bne.w	800b508 <BSP_SDRAM_Init+0x1c8>
{
 800b346:	b570      	push	{r4, r5, r6, lr}
 800b348:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 800b34a:	4b72      	ldr	r3, [pc, #456]	@ (800b514 <BSP_SDRAM_Init+0x1d4>)
 800b34c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b350:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b354:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800b358:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b35c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b360:	9201      	str	r2, [sp, #4]
 800b362:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800b364:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b368:	f042 0201 	orr.w	r2, r2, #1
 800b36c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800b370:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b374:	f002 0201 	and.w	r2, r2, #1
 800b378:	9202      	str	r2, [sp, #8]
 800b37a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b37c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b380:	f042 0208 	orr.w	r2, r2, #8
 800b384:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b388:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b38c:	f002 0208 	and.w	r2, r2, #8
 800b390:	9203      	str	r2, [sp, #12]
 800b392:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b398:	f042 0210 	orr.w	r2, r2, #16
 800b39c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b3a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b3a4:	f002 0210 	and.w	r2, r2, #16
 800b3a8:	9204      	str	r2, [sp, #16]
 800b3aa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b3ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b3b0:	f042 0220 	orr.w	r2, r2, #32
 800b3b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b3b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b3bc:	f002 0220 	and.w	r2, r2, #32
 800b3c0:	9205      	str	r2, [sp, #20]
 800b3c2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b3c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b3c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3cc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b3d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b3d4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800b3d8:	9206      	str	r2, [sp, #24]
 800b3da:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b3dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b3e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b3e4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b3e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b3ec:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800b3f0:	9207      	str	r2, [sp, #28]
 800b3f2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800b3f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b3f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3fc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800b400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b408:	9308      	str	r3, [sp, #32]
 800b40a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800b40c:	2302      	movs	r3, #2
 800b40e:	930a      	str	r3, [sp, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800b410:	2301      	movs	r3, #1
 800b412:	930b      	str	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b414:	2303      	movs	r3, #3
 800b416:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800b418:	230c      	movs	r3, #12
 800b41a:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800b41c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800b420:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800b422:	a909      	add	r1, sp, #36	@ 0x24
 800b424:	483c      	ldr	r0, [pc, #240]	@ (800b518 <BSP_SDRAM_Init+0x1d8>)
 800b426:	f001 fd31 	bl	800ce8c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800b42a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800b42e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800b430:	a909      	add	r1, sp, #36	@ 0x24
 800b432:	483a      	ldr	r0, [pc, #232]	@ (800b51c <BSP_SDRAM_Init+0x1dc>)
 800b434:	f001 fd2a 	bl	800ce8c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800b438:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800b43c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800b43e:	a909      	add	r1, sp, #36	@ 0x24
 800b440:	4837      	ldr	r0, [pc, #220]	@ (800b520 <BSP_SDRAM_Init+0x1e0>)
 800b442:	f001 fd23 	bl	800ce8c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800b446:	f248 1337 	movw	r3, #33079	@ 0x8137
 800b44a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800b44c:	a909      	add	r1, sp, #36	@ 0x24
 800b44e:	4835      	ldr	r0, [pc, #212]	@ (800b524 <BSP_SDRAM_Init+0x1e4>)
 800b450:	f001 fd1c 	bl	800ce8c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800b454:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800b458:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800b45a:	a909      	add	r1, sp, #36	@ 0x24
 800b45c:	4832      	ldr	r0, [pc, #200]	@ (800b528 <BSP_SDRAM_Init+0x1e8>)
 800b45e:	f001 fd15 	bl	800ce8c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800b462:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 800b466:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800b468:	a909      	add	r1, sp, #36	@ 0x24
 800b46a:	4830      	ldr	r0, [pc, #192]	@ (800b52c <BSP_SDRAM_Init+0x1ec>)
 800b46c:	f001 fd0e 	bl	800ce8c <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800b470:	4c2f      	ldr	r4, [pc, #188]	@ (800b530 <BSP_SDRAM_Init+0x1f0>)
 800b472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b476:	6063      	str	r3, [r4, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800b478:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b47c:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800b47e:	2380      	movs	r3, #128	@ 0x80
 800b480:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800b482:	2500      	movs	r5, #0
 800b484:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 800b486:	f240 2202 	movw	r2, #514	@ 0x202
 800b48a:	6162      	str	r2, [r4, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800b48c:	f640 0208 	movw	r2, #2056	@ 0x808
 800b490:	61a2      	str	r2, [r4, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800b492:	2220      	movs	r2, #32
 800b494:	61e2      	str	r2, [r4, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800b496:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800b498:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800b49c:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 800b49e:	62e5      	str	r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800b4a0:	6325      	str	r5, [r4, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 800b4a2:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800b4a4:	6365      	str	r5, [r4, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800b4a6:	63a5      	str	r5, [r4, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800b4a8:	4b22      	ldr	r3, [pc, #136]	@ (800b534 <BSP_SDRAM_Init+0x1f4>)
 800b4aa:	6023      	str	r3, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800b4ac:	4e22      	ldr	r6, [pc, #136]	@ (800b538 <BSP_SDRAM_Init+0x1f8>)
 800b4ae:	6334      	str	r4, [r6, #48]	@ 0x30
 800b4b0:	6426      	str	r6, [r4, #64]	@ 0x40
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f003 fde5 	bl	800f082 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f003 fd5b 	bl	800ef74 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800b4be:	462a      	mov	r2, r5
 800b4c0:	210f      	movs	r1, #15
 800b4c2:	207a      	movs	r0, #122	@ 0x7a
 800b4c4:	f000 fa2e 	bl	800b924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800b4c8:	207a      	movs	r0, #122	@ 0x7a
 800b4ca:	f000 fa5f 	bl	800b98c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff ff06 	bl	800b2e0 <MX_SDRAM_Init>
 800b4d4:	b9d8      	cbnz	r0, 800b50e <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800b4d6:	4919      	ldr	r1, [pc, #100]	@ (800b53c <BSP_SDRAM_Init+0x1fc>)
 800b4d8:	2308      	movs	r3, #8
 800b4da:	600b      	str	r3, [r1, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	604b      	str	r3, [r1, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800b4e0:	f240 6303 	movw	r3, #1539	@ 0x603
 800b4e4:	608b      	str	r3, [r1, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800b4e6:	60cd      	str	r5, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800b4e8:	610d      	str	r5, [r1, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800b4ea:	2230      	movs	r2, #48	@ 0x30
 800b4ec:	614a      	str	r2, [r1, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800b4ee:	618d      	str	r5, [r1, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800b4f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4f4:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	f7fe fcc8 	bl	8009e8c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	bf18      	it	ne
 800b500:	f06f 0004 	mvnne.w	r0, #4
}
 800b504:	b00e      	add	sp, #56	@ 0x38
 800b506:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800b508:	f06f 0001 	mvn.w	r0, #1
}
 800b50c:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 800b50e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800b512:	e7f7      	b.n	800b504 <BSP_SDRAM_Init+0x1c4>
 800b514:	58024400 	.word	0x58024400
 800b518:	58020c00 	.word	0x58020c00
 800b51c:	58021000 	.word	0x58021000
 800b520:	58021400 	.word	0x58021400
 800b524:	58021800 	.word	0x58021800
 800b528:	58021c00 	.word	0x58021c00
 800b52c:	58022000 	.word	0x58022000
 800b530:	24048c9c 	.word	0x24048c9c
 800b534:	52000040 	.word	0x52000040
 800b538:	24048d28 	.word	0x24048d28
 800b53c:	24048d08 	.word	0x24048d08

0800b540 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b544:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b546:	2800      	cmp	r0, #0
 800b548:	d17b      	bne.n	800b642 <BSP_TS_Init+0x102>
 800b54a:	460c      	mov	r4, r1
 800b54c:	680b      	ldr	r3, [r1, #0]
 800b54e:	1e5a      	subs	r2, r3, #1
 800b550:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800b554:	d278      	bcs.n	800b648 <BSP_TS_Init+0x108>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b556:	684a      	ldr	r2, [r1, #4]
 800b558:	1e51      	subs	r1, r2, #1
 800b55a:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800b55e:	d276      	bcs.n	800b64e <BSP_TS_Init+0x10e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800b560:	4293      	cmp	r3, r2
 800b562:	bf28      	it	cs
 800b564:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b566:	68e2      	ldr	r2, [r4, #12]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d873      	bhi.n	800b654 <BSP_TS_Init+0x114>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800b56c:	2354      	movs	r3, #84	@ 0x54
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	2370      	movs	r3, #112	@ 0x70
 800b572:	9302      	str	r3, [sp, #8]

  /* Configure the touch screen driver */
  IOCtx.Init        = BSP_I2C4_Init;
 800b574:	4b39      	ldr	r3, [pc, #228]	@ (800b65c <BSP_TS_Init+0x11c>)
 800b576:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b578:	4b39      	ldr	r3, [pc, #228]	@ (800b660 <BSP_TS_Init+0x120>)
 800b57a:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800b57c:	4b39      	ldr	r3, [pc, #228]	@ (800b664 <BSP_TS_Init+0x124>)
 800b57e:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800b580:	4b39      	ldr	r3, [pc, #228]	@ (800b668 <BSP_TS_Init+0x128>)
 800b582:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800b584:	4b39      	ldr	r3, [pc, #228]	@ (800b66c <BSP_TS_Init+0x12c>)
 800b586:	930b      	str	r3, [sp, #44]	@ 0x2c

  for(i = 0; i < 2UL; i++)
 800b588:	ad01      	add	r5, sp, #4
 800b58a:	f10d 080c 	add.w	r8, sp, #12
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800b58e:	4f38      	ldr	r7, [pc, #224]	@ (800b670 <BSP_TS_Init+0x130>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800b590:	f855 3b04 	ldr.w	r3, [r5], #4
 800b594:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800b598:	a906      	add	r1, sp, #24
 800b59a:	4638      	mov	r0, r7
 800b59c:	f7fe fb70 	bl	8009c80 <FT6X06_RegisterBusIO>
 800b5a0:	b120      	cbz	r0, 800b5ac <BSP_TS_Init+0x6c>
  for(i = 0; i < 2UL; i++)
 800b5a2:	45a8      	cmp	r8, r5
 800b5a4:	d1f4      	bne.n	800b590 <BSP_TS_Init+0x50>
      ret = BSP_ERROR_NO_INIT;
 800b5a6:	f04f 36ff 	mov.w	r6, #4294967295
 800b5aa:	e043      	b.n	800b634 <BSP_TS_Init+0xf4>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800b5ac:	4669      	mov	r1, sp
 800b5ae:	4830      	ldr	r0, [pc, #192]	@ (800b670 <BSP_TS_Init+0x130>)
 800b5b0:	f7fe faa4 	bl	8009afc <FT6X06_ReadID>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d1f4      	bne.n	800b5a2 <BSP_TS_Init+0x62>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 800b5b8:	9b00      	ldr	r3, [sp, #0]
 800b5ba:	2b11      	cmp	r3, #17
 800b5bc:	d1f1      	bne.n	800b5a2 <BSP_TS_Init+0x62>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800b5be:	4e2c      	ldr	r6, [pc, #176]	@ (800b670 <BSP_TS_Init+0x130>)
 800b5c0:	a903      	add	r1, sp, #12
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7fe fa4e 	bl	8009a64 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 800b5c8:	4b2a      	ldr	r3, [pc, #168]	@ (800b674 <BSP_TS_Init+0x134>)
 800b5ca:	601e      	str	r6, [r3, #0]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800b5cc:	4b2a      	ldr	r3, [pc, #168]	@ (800b678 <BSP_TS_Init+0x138>)
 800b5ce:	4a2b      	ldr	r2, [pc, #172]	@ (800b67c <BSP_TS_Init+0x13c>)
 800b5d0:	6013      	str	r3, [r2, #0]

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	4798      	blx	r3
 800b5d8:	4606      	mov	r6, r0
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d1e1      	bne.n	800b5a2 <BSP_TS_Init+0x62>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800b5de:	6822      	ldr	r2, [r4, #0]
 800b5e0:	4b27      	ldr	r3, [pc, #156]	@ (800b680 <BSP_TS_Init+0x140>)
 800b5e2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800b5e4:	6862      	ldr	r2, [r4, #4]
 800b5e6:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800b5e8:	68a2      	ldr	r2, [r4, #8]
 800b5ea:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800b5ec:	68e2      	ldr	r2, [r4, #12]
 800b5ee:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800b5f0:	4b22      	ldr	r3, [pc, #136]	@ (800b67c <BSP_TS_Init+0x13c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	a906      	add	r1, sp, #24
 800b5f8:	4a1e      	ldr	r2, [pc, #120]	@ (800b674 <BSP_TS_Init+0x134>)
 800b5fa:	6810      	ldr	r0, [r2, #0]
 800b5fc:	4798      	blx	r3
 800b5fe:	2800      	cmp	r0, #0
 800b600:	db1c      	blt.n	800b63c <BSP_TS_Init+0xfc>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800b602:	4b1f      	ldr	r3, [pc, #124]	@ (800b680 <BSP_TS_Init+0x140>)
 800b604:	9a07      	ldr	r2, [sp, #28]
 800b606:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b608:	9a08      	ldr	r2, [sp, #32]
 800b60a:	615a      	str	r2, [r3, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b60c:	68e2      	ldr	r2, [r4, #12]
 800b60e:	6821      	ldr	r1, [r4, #0]
 800b610:	440a      	add	r2, r1
 800b612:	3201      	adds	r2, #1
 800b614:	619a      	str	r2, [r3, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b616:	6862      	ldr	r2, [r4, #4]
 800b618:	68e1      	ldr	r1, [r4, #12]
 800b61a:	440a      	add	r2, r1
 800b61c:	3201      	adds	r2, #1
 800b61e:	621a      	str	r2, [r3, #32]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b620:	6822      	ldr	r2, [r4, #0]
 800b622:	68e1      	ldr	r1, [r4, #12]
 800b624:	440a      	add	r2, r1
 800b626:	3201      	adds	r2, #1
 800b628:	61da      	str	r2, [r3, #28]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b62a:	6862      	ldr	r2, [r4, #4]
 800b62c:	68e1      	ldr	r1, [r4, #12]
 800b62e:	440a      	add	r2, r1
 800b630:	3201      	adds	r2, #1
 800b632:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b634:	4630      	mov	r0, r6
 800b636:	b00c      	add	sp, #48	@ 0x30
 800b638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b63c:	f06f 0604 	mvn.w	r6, #4
 800b640:	e7f8      	b.n	800b634 <BSP_TS_Init+0xf4>
    ret = BSP_ERROR_WRONG_PARAM;
 800b642:	f06f 0601 	mvn.w	r6, #1
 800b646:	e7f5      	b.n	800b634 <BSP_TS_Init+0xf4>
 800b648:	f06f 0601 	mvn.w	r6, #1
 800b64c:	e7f2      	b.n	800b634 <BSP_TS_Init+0xf4>
 800b64e:	f06f 0601 	mvn.w	r6, #1
 800b652:	e7ef      	b.n	800b634 <BSP_TS_Init+0xf4>
 800b654:	f06f 0601 	mvn.w	r6, #1
  return ret;
 800b658:	e7ec      	b.n	800b634 <BSP_TS_Init+0xf4>
 800b65a:	bf00      	nop
 800b65c:	0800aa51 	.word	0x0800aa51
 800b660:	0800a9b9 	.word	0x0800a9b9
 800b664:	0800adc5 	.word	0x0800adc5
 800b668:	0800ad8d 	.word	0x0800ad8d
 800b66c:	0800adfd 	.word	0x0800adfd
 800b670:	24048d5c 	.word	0x24048d5c
 800b674:	24048d84 	.word	0x24048d84
 800b678:	24000038 	.word	0x24000038
 800b67c:	24048db0 	.word	0x24048db0
 800b680:	24048d88 	.word	0x24048d88

0800b684 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 800b684:	2800      	cmp	r0, #0
 800b686:	d161      	bne.n	800b74c <BSP_TS_GetState+0xc8>
{
 800b688:	b530      	push	{r4, r5, lr}
 800b68a:	b085      	sub	sp, #20
 800b68c:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800b68e:	4b31      	ldr	r3, [pc, #196]	@ (800b754 <BSP_TS_GetState+0xd0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	a901      	add	r1, sp, #4
 800b696:	4a30      	ldr	r2, [pc, #192]	@ (800b758 <BSP_TS_GetState+0xd4>)
 800b698:	6810      	ldr	r0, [r2, #0]
 800b69a:	4798      	blx	r3
 800b69c:	2800      	cmp	r0, #0
 800b69e:	db51      	blt.n	800b744 <BSP_TS_GetState+0xc0>
    else if(state.TouchDetected != 0U)
 800b6a0:	9801      	ldr	r0, [sp, #4]
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d046      	beq.n	800b734 <BSP_TS_GetState+0xb0>
      x_oriented = state.TouchX;
 800b6a6:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 800b6a8:	9b03      	ldr	r3, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b6aa:	492c      	ldr	r1, [pc, #176]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b6ac:	6889      	ldr	r1, [r1, #8]
 800b6ae:	f011 0f08 	tst.w	r1, #8
 800b6b2:	d102      	bne.n	800b6ba <BSP_TS_GetState+0x36>
 800b6b4:	461d      	mov	r5, r3
      x_oriented = state.TouchX;
 800b6b6:	4613      	mov	r3, r2
      y_oriented = state.TouchY;
 800b6b8:	462a      	mov	r2, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800b6ba:	f011 0f02 	tst.w	r1, #2
 800b6be:	d003      	beq.n	800b6c8 <BSP_TS_GetState+0x44>
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800b6c0:	4d26      	ldr	r5, [pc, #152]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b6c2:	692d      	ldr	r5, [r5, #16]
 800b6c4:	3d01      	subs	r5, #1
 800b6c6:	1aeb      	subs	r3, r5, r3
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800b6c8:	f011 0f04 	tst.w	r1, #4
 800b6cc:	d003      	beq.n	800b6d6 <BSP_TS_GetState+0x52>
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800b6ce:	4923      	ldr	r1, [pc, #140]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b6d0:	6949      	ldr	r1, [r1, #20]
 800b6d2:	3901      	subs	r1, #1
 800b6d4:	1a8a      	subs	r2, r1, r2
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b6d6:	4921      	ldr	r1, [pc, #132]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b6d8:	680d      	ldr	r5, [r1, #0]
 800b6da:	fb05 f303 	mul.w	r3, r5, r3
 800b6de:	690d      	ldr	r5, [r1, #16]
 800b6e0:	fbb3 f3f5 	udiv	r3, r3, r5
 800b6e4:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b6e6:	684d      	ldr	r5, [r1, #4]
 800b6e8:	fb05 f202 	mul.w	r2, r5, r2
 800b6ec:	694d      	ldr	r5, [r1, #20]
 800b6ee:	fbb2 f2f5 	udiv	r2, r2, r5
 800b6f2:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 800b6f4:	6020      	str	r0, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b6f6:	698d      	ldr	r5, [r1, #24]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	bf8c      	ite	hi
 800b6fc:	1b58      	subhi	r0, r3, r5
 800b6fe:	1ae8      	subls	r0, r5, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b700:	4916      	ldr	r1, [pc, #88]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b702:	6a09      	ldr	r1, [r1, #32]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b704:	428a      	cmp	r2, r1
 800b706:	bf8c      	ite	hi
 800b708:	1a51      	subhi	r1, r2, r1
 800b70a:	1a89      	subls	r1, r1, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800b70c:	4602      	mov	r2, r0
 800b70e:	4288      	cmp	r0, r1
 800b710:	bf38      	it	cc
 800b712:	460a      	movcc	r2, r1
 800b714:	4911      	ldr	r1, [pc, #68]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b716:	68c9      	ldr	r1, [r1, #12]
 800b718:	4291      	cmp	r1, r2
 800b71a:	d205      	bcs.n	800b728 <BSP_TS_GetState+0xa4>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800b71c:	4a0f      	ldr	r2, [pc, #60]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b71e:	6193      	str	r3, [r2, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800b720:	68a3      	ldr	r3, [r4, #8]
 800b722:	6213      	str	r3, [r2, #32]
  int32_t ret = BSP_ERROR_NONE;
 800b724:	2000      	movs	r0, #0
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800b726:	e00f      	b.n	800b748 <BSP_TS_GetState+0xc4>
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b728:	6065      	str	r5, [r4, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b72a:	4b0c      	ldr	r3, [pc, #48]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 800b730:	2000      	movs	r0, #0
 800b732:	e009      	b.n	800b748 <BSP_TS_GetState+0xc4>
      TS_State->TouchDetected = 0U;
 800b734:	2000      	movs	r0, #0
 800b736:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b738:	4b08      	ldr	r3, [pc, #32]	@ (800b75c <BSP_TS_GetState+0xd8>)
 800b73a:	699a      	ldr	r2, [r3, #24]
 800b73c:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b73e:	6a1b      	ldr	r3, [r3, #32]
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	e001      	b.n	800b748 <BSP_TS_GetState+0xc4>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b744:	f06f 0004 	mvn.w	r0, #4
}
 800b748:	b005      	add	sp, #20
 800b74a:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b74c:	f06f 0001 	mvn.w	r0, #1
}
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	24048db0 	.word	0x24048db0
 800b758:	24048d84 	.word	0x24048d84
 800b75c:	24048d88 	.word	0x24048d88

0800b760 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b760:	4b2f      	ldr	r3, [pc, #188]	@ (800b820 <SystemInit+0xc0>)
 800b762:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b766:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800b76a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800b76e:	691a      	ldr	r2, [r3, #16]
 800b770:	f042 0210 	orr.w	r2, r2, #16
 800b774:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b776:	4b2b      	ldr	r3, [pc, #172]	@ (800b824 <SystemInit+0xc4>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 030f 	and.w	r3, r3, #15
 800b77e:	2b06      	cmp	r3, #6
 800b780:	d806      	bhi.n	800b790 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b782:	4a28      	ldr	r2, [pc, #160]	@ (800b824 <SystemInit+0xc4>)
 800b784:	6813      	ldr	r3, [r2, #0]
 800b786:	f023 030f 	bic.w	r3, r3, #15
 800b78a:	f043 0307 	orr.w	r3, r3, #7
 800b78e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b790:	4b25      	ldr	r3, [pc, #148]	@ (800b828 <SystemInit+0xc8>)
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	f042 0201 	orr.w	r2, r2, #1
 800b798:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b79a:	2200      	movs	r2, #0
 800b79c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b79e:	6819      	ldr	r1, [r3, #0]
 800b7a0:	4a22      	ldr	r2, [pc, #136]	@ (800b82c <SystemInit+0xcc>)
 800b7a2:	400a      	ands	r2, r1
 800b7a4:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b7a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b824 <SystemInit+0xc4>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f013 0f08 	tst.w	r3, #8
 800b7ae:	d006      	beq.n	800b7be <SystemInit+0x5e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b7b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b824 <SystemInit+0xc4>)
 800b7b2:	6813      	ldr	r3, [r2, #0]
 800b7b4:	f023 030f 	bic.w	r3, r3, #15
 800b7b8:	f043 0307 	orr.w	r3, r3, #7
 800b7bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b7be:	4b1a      	ldr	r3, [pc, #104]	@ (800b828 <SystemInit+0xc8>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b7c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b7c6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b7c8:	4919      	ldr	r1, [pc, #100]	@ (800b830 <SystemInit+0xd0>)
 800b7ca:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b7cc:	4919      	ldr	r1, [pc, #100]	@ (800b834 <SystemInit+0xd4>)
 800b7ce:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b7d0:	4919      	ldr	r1, [pc, #100]	@ (800b838 <SystemInit+0xd8>)
 800b7d2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b7d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b7d6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b7d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b7da:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b7dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800b7e4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b7e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800b7e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7ec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800b7f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b7f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b7f8:	4b10      	ldr	r3, [pc, #64]	@ (800b83c <SystemInit+0xdc>)
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	4b10      	ldr	r3, [pc, #64]	@ (800b840 <SystemInit+0xe0>)
 800b7fe:	4013      	ands	r3, r2
 800b800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b804:	d203      	bcs.n	800b80e <SystemInit+0xae>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b806:	4b0f      	ldr	r3, [pc, #60]	@ (800b844 <SystemInit+0xe4>)
 800b808:	2201      	movs	r2, #1
 800b80a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b80e:	4b0e      	ldr	r3, [pc, #56]	@ (800b848 <SystemInit+0xe8>)
 800b810:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800b814:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800b816:	4b02      	ldr	r3, [pc, #8]	@ (800b820 <SystemInit+0xc0>)
 800b818:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b81c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800b81e:	4770      	bx	lr
 800b820:	e000ed00 	.word	0xe000ed00
 800b824:	52002000 	.word	0x52002000
 800b828:	58024400 	.word	0x58024400
 800b82c:	eaf6ed7f 	.word	0xeaf6ed7f
 800b830:	02020200 	.word	0x02020200
 800b834:	01ff0000 	.word	0x01ff0000
 800b838:	01010280 	.word	0x01010280
 800b83c:	5c001000 	.word	0x5c001000
 800b840:	ffff0000 	.word	0xffff0000
 800b844:	51008000 	.word	0x51008000
 800b848:	52004000 	.word	0x52004000

0800b84c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b84c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b84e:	2003      	movs	r0, #3
 800b850:	f000 f856 	bl	800b900 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b854:	f004 fcd8 	bl	8010208 <HAL_RCC_GetSysClockFreq>
 800b858:	490f      	ldr	r1, [pc, #60]	@ (800b898 <HAL_Init+0x4c>)
 800b85a:	698b      	ldr	r3, [r1, #24]
 800b85c:	4a0f      	ldr	r2, [pc, #60]	@ (800b89c <HAL_Init+0x50>)
 800b85e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b862:	5cd3      	ldrb	r3, [r2, r3]
 800b864:	f003 031f 	and.w	r3, r3, #31
 800b868:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b86a:	698b      	ldr	r3, [r1, #24]
 800b86c:	f003 030f 	and.w	r3, r3, #15
 800b870:	5cd3      	ldrb	r3, [r2, r3]
 800b872:	f003 031f 	and.w	r3, r3, #31
 800b876:	fa20 f303 	lsr.w	r3, r0, r3
 800b87a:	4a09      	ldr	r2, [pc, #36]	@ (800b8a0 <HAL_Init+0x54>)
 800b87c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b87e:	4b09      	ldr	r3, [pc, #36]	@ (800b8a4 <HAL_Init+0x58>)
 800b880:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b882:	2000      	movs	r0, #0
 800b884:	f7f5 ff76 	bl	8001774 <HAL_InitTick>
 800b888:	b110      	cbz	r0, 800b890 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800b88a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800b88c:	4620      	mov	r0, r4
 800b88e:	bd10      	pop	{r4, pc}
 800b890:	4604      	mov	r4, r0
  HAL_MspInit();
 800b892:	f7f5 fc0b 	bl	80010ac <HAL_MspInit>
  return HAL_OK;
 800b896:	e7f9      	b.n	800b88c <HAL_Init+0x40>
 800b898:	58024400 	.word	0x58024400
 800b89c:	0802daf4 	.word	0x0802daf4
 800b8a0:	24000068 	.word	0x24000068
 800b8a4:	2400006c 	.word	0x2400006c

0800b8a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800b8a8:	4a03      	ldr	r2, [pc, #12]	@ (800b8b8 <HAL_IncTick+0x10>)
 800b8aa:	6811      	ldr	r1, [r2, #0]
 800b8ac:	4b03      	ldr	r3, [pc, #12]	@ (800b8bc <HAL_IncTick+0x14>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	440b      	add	r3, r1
 800b8b2:	6013      	str	r3, [r2, #0]
}
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	24048db4 	.word	0x24048db4
 800b8bc:	24000070 	.word	0x24000070

0800b8c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b8c0:	4b01      	ldr	r3, [pc, #4]	@ (800b8c8 <HAL_GetTick+0x8>)
 800b8c2:	6818      	ldr	r0, [r3, #0]
}
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	24048db4 	.word	0x24048db4

0800b8cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b8d0:	f7ff fff6 	bl	800b8c0 <HAL_GetTick>
 800b8d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b8d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b8da:	d002      	beq.n	800b8e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800b8dc:	4b04      	ldr	r3, [pc, #16]	@ (800b8f0 <HAL_Delay+0x24>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b8e2:	f7ff ffed 	bl	800b8c0 <HAL_GetTick>
 800b8e6:	1b40      	subs	r0, r0, r5
 800b8e8:	42a0      	cmp	r0, r4
 800b8ea:	d3fa      	bcc.n	800b8e2 <HAL_Delay+0x16>
  {
  }
}
 800b8ec:	bd38      	pop	{r3, r4, r5, pc}
 800b8ee:	bf00      	nop
 800b8f0:	24000070 	.word	0x24000070

0800b8f4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800b8f4:	4b01      	ldr	r3, [pc, #4]	@ (800b8fc <HAL_GetREVID+0x8>)
 800b8f6:	6818      	ldr	r0, [r3, #0]
}
 800b8f8:	0c00      	lsrs	r0, r0, #16
 800b8fa:	4770      	bx	lr
 800b8fc:	5c001000 	.word	0x5c001000

0800b900 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b900:	4a06      	ldr	r2, [pc, #24]	@ (800b91c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800b902:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b904:	0200      	lsls	r0, r0, #8
 800b906:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b90a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800b90e:	041b      	lsls	r3, r3, #16
 800b910:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b912:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800b914:	4b02      	ldr	r3, [pc, #8]	@ (800b920 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800b916:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800b918:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b91a:	4770      	bx	lr
 800b91c:	e000ed00 	.word	0xe000ed00
 800b920:	05fa0000 	.word	0x05fa0000

0800b924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b924:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b926:	4b16      	ldr	r3, [pc, #88]	@ (800b980 <HAL_NVIC_SetPriority+0x5c>)
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b92e:	f1c3 0c07 	rsb	ip, r3, #7
 800b932:	f1bc 0f04 	cmp.w	ip, #4
 800b936:	bf28      	it	cs
 800b938:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b93c:	f103 0e04 	add.w	lr, r3, #4
 800b940:	f1be 0f06 	cmp.w	lr, #6
 800b944:	bf8c      	ite	hi
 800b946:	3b03      	subhi	r3, #3
 800b948:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b94a:	f04f 3eff 	mov.w	lr, #4294967295
 800b94e:	fa0e fc0c 	lsl.w	ip, lr, ip
 800b952:	ea21 010c 	bic.w	r1, r1, ip
 800b956:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b958:	fa0e fe03 	lsl.w	lr, lr, r3
 800b95c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b960:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800b962:	2800      	cmp	r0, #0
 800b964:	db05      	blt.n	800b972 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b966:	0109      	lsls	r1, r1, #4
 800b968:	b2c9      	uxtb	r1, r1
 800b96a:	4b06      	ldr	r3, [pc, #24]	@ (800b984 <HAL_NVIC_SetPriority+0x60>)
 800b96c:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b96e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b972:	f000 000f 	and.w	r0, r0, #15
 800b976:	0109      	lsls	r1, r1, #4
 800b978:	b2c9      	uxtb	r1, r1
 800b97a:	4b03      	ldr	r3, [pc, #12]	@ (800b988 <HAL_NVIC_SetPriority+0x64>)
 800b97c:	5419      	strb	r1, [r3, r0]
 800b97e:	e7f6      	b.n	800b96e <HAL_NVIC_SetPriority+0x4a>
 800b980:	e000ed00 	.word	0xe000ed00
 800b984:	e000e400 	.word	0xe000e400
 800b988:	e000ed14 	.word	0xe000ed14

0800b98c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b98c:	2800      	cmp	r0, #0
 800b98e:	db07      	blt.n	800b9a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b990:	0941      	lsrs	r1, r0, #5
 800b992:	f000 001f 	and.w	r0, r0, #31
 800b996:	2301      	movs	r3, #1
 800b998:	4083      	lsls	r3, r0
 800b99a:	4a02      	ldr	r2, [pc, #8]	@ (800b9a4 <HAL_NVIC_EnableIRQ+0x18>)
 800b99c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	e000e100 	.word	0xe000e100

0800b9a8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	db0c      	blt.n	800b9c6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b9ac:	0943      	lsrs	r3, r0, #5
 800b9ae:	f000 001f 	and.w	r0, r0, #31
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	4082      	lsls	r2, r0
 800b9b6:	3320      	adds	r3, #32
 800b9b8:	4903      	ldr	r1, [pc, #12]	@ (800b9c8 <HAL_NVIC_DisableIRQ+0x20>)
 800b9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b9be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b9c2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800b9c6:	4770      	bx	lr
 800b9c8:	e000e100 	.word	0xe000e100

0800b9cc <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800b9cc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b9d0:	4905      	ldr	r1, [pc, #20]	@ (800b9e8 <HAL_NVIC_SystemReset+0x1c>)
 800b9d2:	68ca      	ldr	r2, [r1, #12]
 800b9d4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b9d8:	4b04      	ldr	r3, [pc, #16]	@ (800b9ec <HAL_NVIC_SystemReset+0x20>)
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	60cb      	str	r3, [r1, #12]
 800b9de:	f3bf 8f4f 	dsb	sy
    __NOP();
 800b9e2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800b9e4:	e7fd      	b.n	800b9e2 <HAL_NVIC_SystemReset+0x16>
 800b9e6:	bf00      	nop
 800b9e8:	e000ed00 	.word	0xe000ed00
 800b9ec:	05fa0004 	.word	0x05fa0004

0800b9f0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800b9f0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ba08 <HAL_MPU_Disable+0x18>)
 800b9f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9f8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b9fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	e000ed00 	.word	0xe000ed00

0800ba0c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800ba0c:	f040 0001 	orr.w	r0, r0, #1
 800ba10:	4b05      	ldr	r3, [pc, #20]	@ (800ba28 <HAL_MPU_Enable+0x1c>)
 800ba12:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800ba16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba18:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ba1c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800ba1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba22:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ba26:	4770      	bx	lr
 800ba28:	e000ed00 	.word	0xe000ed00

0800ba2c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800ba2c:	7843      	ldrb	r3, [r0, #1]
 800ba2e:	4a14      	ldr	r2, [pc, #80]	@ (800ba80 <HAL_MPU_ConfigRegion+0x54>)
 800ba30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800ba34:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800ba38:	f023 0301 	bic.w	r3, r3, #1
 800ba3c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800ba40:	6843      	ldr	r3, [r0, #4]
 800ba42:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ba46:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ba48:	7ac3      	ldrb	r3, [r0, #11]
 800ba4a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ba4c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800ba50:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba52:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ba54:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba56:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ba5a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba5c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ba60:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba62:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ba66:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ba6c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ba72:	7a01      	ldrb	r1, [r0, #8]
 800ba74:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ba78:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	e000ed00 	.word	0xe000ed00

0800ba84 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d038      	beq.n	800bafa <HAL_CRC_Init+0x76>
{
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ba8c:	7f43      	ldrb	r3, [r0, #29]
 800ba8e:	b31b      	cbz	r3, 800bad8 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800ba90:	2302      	movs	r3, #2
 800ba92:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ba94:	7923      	ldrb	r3, [r4, #4]
 800ba96:	bb1b      	cbnz	r3, 800bae0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	4a19      	ldr	r2, [pc, #100]	@ (800bb00 <HAL_CRC_Init+0x7c>)
 800ba9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ba9e:	6822      	ldr	r2, [r4, #0]
 800baa0:	6893      	ldr	r3, [r2, #8]
 800baa2:	f023 0318 	bic.w	r3, r3, #24
 800baa6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800baa8:	7963      	ldrb	r3, [r4, #5]
 800baaa:	bb13      	cbnz	r3, 800baf2 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	f04f 32ff 	mov.w	r2, #4294967295
 800bab2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bab4:	6822      	ldr	r2, [r4, #0]
 800bab6:	6893      	ldr	r3, [r2, #8]
 800bab8:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800babc:	6961      	ldr	r1, [r4, #20]
 800babe:	430b      	orrs	r3, r1
 800bac0:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	6893      	ldr	r3, [r2, #8]
 800bac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baca:	69a1      	ldr	r1, [r4, #24]
 800bacc:	430b      	orrs	r3, r1
 800bace:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bad0:	2301      	movs	r3, #1
 800bad2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800bad4:	2000      	movs	r0, #0
}
 800bad6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800bad8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800bada:	f7f5 fb01 	bl	80010e0 <HAL_CRC_MspInit>
 800bade:	e7d7      	b.n	800ba90 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bae0:	68e2      	ldr	r2, [r4, #12]
 800bae2:	68a1      	ldr	r1, [r4, #8]
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 f80d 	bl	800bb04 <HAL_CRCEx_Polynomial_Set>
 800baea:	2800      	cmp	r0, #0
 800baec:	d0dc      	beq.n	800baa8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800baee:	2001      	movs	r0, #1
 800baf0:	e7f1      	b.n	800bad6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	6922      	ldr	r2, [r4, #16]
 800baf6:	611a      	str	r2, [r3, #16]
 800baf8:	e7dc      	b.n	800bab4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800bafa:	2001      	movs	r0, #1
}
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	04c11db7 	.word	0x04c11db7

0800bb04 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800bb04:	f011 0f01 	tst.w	r1, #1
 800bb08:	d030      	beq.n	800bb6c <HAL_CRCEx_Polynomial_Set+0x68>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bb0a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb12:	d033      	beq.n	800bb7c <HAL_CRCEx_Polynomial_Set+0x78>
 800bb14:	f003 0c1f 	and.w	ip, r3, #31
 800bb18:	fa21 fc0c 	lsr.w	ip, r1, ip
 800bb1c:	f01c 0f01 	tst.w	ip, #1
 800bb20:	d0f4      	beq.n	800bb0c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800bb22:	2a18      	cmp	r2, #24
 800bb24:	d824      	bhi.n	800bb70 <HAL_CRCEx_Polynomial_Set+0x6c>
 800bb26:	e8df f002 	tbb	[pc, r2]
 800bb2a:	230f      	.short	0x230f
 800bb2c:	23232323 	.word	0x23232323
 800bb30:	231d2323 	.word	0x231d2323
 800bb34:	23232323 	.word	0x23232323
 800bb38:	23192323 	.word	0x23192323
 800bb3c:	23232323 	.word	0x23232323
 800bb40:	2323      	.short	0x2323
 800bb42:	0d          	.byte	0x0d
 800bb43:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800bb44:	2b06      	cmp	r3, #6
 800bb46:	d815      	bhi.n	800bb74 <HAL_CRCEx_Polynomial_Set+0x70>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800bb48:	6803      	ldr	r3, [r0, #0]
 800bb4a:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800bb4c:	6801      	ldr	r1, [r0, #0]
 800bb4e:	688b      	ldr	r3, [r1, #8]
 800bb50:	f023 0318 	bic.w	r3, r3, #24
 800bb54:	4313      	orrs	r3, r2
 800bb56:	608b      	str	r3, [r1, #8]
 800bb58:	2000      	movs	r0, #0
 800bb5a:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
 800bb5c:	2b07      	cmp	r3, #7
 800bb5e:	d9f3      	bls.n	800bb48 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800bb60:	2001      	movs	r0, #1
 800bb62:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_16B)
 800bb64:	2b0f      	cmp	r3, #15
 800bb66:	d9ef      	bls.n	800bb48 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800bb68:	2001      	movs	r0, #1
 800bb6a:	4770      	bx	lr
    status =  HAL_ERROR;
 800bb6c:	2001      	movs	r0, #1
 800bb6e:	4770      	bx	lr
    switch (PolyLength)
 800bb70:	2001      	movs	r0, #1
 800bb72:	4770      	bx	lr
          status =   HAL_ERROR;
 800bb74:	2001      	movs	r0, #1
 800bb76:	4770      	bx	lr
    switch (PolyLength)
 800bb78:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800bb7a:	4770      	bx	lr
    switch (PolyLength)
 800bb7c:	2a18      	cmp	r2, #24
 800bb7e:	d8fb      	bhi.n	800bb78 <HAL_CRCEx_Polynomial_Set+0x74>
 800bb80:	f20f 0c04 	addw	ip, pc, #4
 800bb84:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
 800bb88:	0800bb49 	.word	0x0800bb49
 800bb8c:	0800bb79 	.word	0x0800bb79
 800bb90:	0800bb79 	.word	0x0800bb79
 800bb94:	0800bb79 	.word	0x0800bb79
 800bb98:	0800bb79 	.word	0x0800bb79
 800bb9c:	0800bb79 	.word	0x0800bb79
 800bba0:	0800bb79 	.word	0x0800bb79
 800bba4:	0800bb79 	.word	0x0800bb79
 800bba8:	0800bb79 	.word	0x0800bb79
 800bbac:	0800bb79 	.word	0x0800bb79
 800bbb0:	0800bb79 	.word	0x0800bb79
 800bbb4:	0800bb79 	.word	0x0800bb79
 800bbb8:	0800bb79 	.word	0x0800bb79
 800bbbc:	0800bb79 	.word	0x0800bb79
 800bbc0:	0800bb79 	.word	0x0800bb79
 800bbc4:	0800bb79 	.word	0x0800bb79
 800bbc8:	0800bb5d 	.word	0x0800bb5d
 800bbcc:	0800bb79 	.word	0x0800bb79
 800bbd0:	0800bb79 	.word	0x0800bb79
 800bbd4:	0800bb79 	.word	0x0800bb79
 800bbd8:	0800bb79 	.word	0x0800bb79
 800bbdc:	0800bb79 	.word	0x0800bb79
 800bbe0:	0800bb79 	.word	0x0800bb79
 800bbe4:	0800bb79 	.word	0x0800bb79
 800bbe8:	0800bb45 	.word	0x0800bb45

0800bbec <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d037      	beq.n	800bc60 <HAL_DMA2D_Init+0x74>
{
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800bbf4:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d02c      	beq.n	800bc56 <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800bc02:	6821      	ldr	r1, [r4, #0]
 800bc04:	6808      	ldr	r0, [r1, #0]
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	69e2      	ldr	r2, [r4, #28]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	4a15      	ldr	r2, [pc, #84]	@ (800bc64 <HAL_DMA2D_Init+0x78>)
 800bc0e:	4002      	ands	r2, r0
 800bc10:	4313      	orrs	r3, r2
 800bc12:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800bc14:	6821      	ldr	r1, [r4, #0]
 800bc16:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800bc18:	68a3      	ldr	r3, [r4, #8]
 800bc1a:	69a2      	ldr	r2, [r4, #24]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	4a12      	ldr	r2, [pc, #72]	@ (800bc68 <HAL_DMA2D_Init+0x7c>)
 800bc20:	4002      	ands	r2, r0
 800bc22:	4313      	orrs	r3, r2
 800bc24:	634b      	str	r3, [r1, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800bc26:	6822      	ldr	r2, [r4, #0]
 800bc28:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800bc2a:	4b10      	ldr	r3, [pc, #64]	@ (800bc6c <HAL_DMA2D_Init+0x80>)
 800bc2c:	400b      	ands	r3, r1
 800bc2e:	68e1      	ldr	r1, [r4, #12]
 800bc30:	430b      	orrs	r3, r1
 800bc32:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800bc34:	6821      	ldr	r1, [r4, #0]
 800bc36:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800bc38:	6920      	ldr	r0, [r4, #16]
 800bc3a:	6963      	ldr	r3, [r4, #20]
 800bc3c:	055b      	lsls	r3, r3, #21
 800bc3e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 800bc42:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800bc46:	4313      	orrs	r3, r2
 800bc48:	634b      	str	r3, [r1, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	6660      	str	r0, [r4, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800bc54:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800bc56:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800bc5a:	f7f5 fa59 	bl	8001110 <HAL_DMA2D_MspInit>
 800bc5e:	e7cd      	b.n	800bbfc <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 800bc60:	2001      	movs	r0, #1
}
 800bc62:	4770      	bx	lr
 800bc64:	fff8ffbf 	.word	0xfff8ffbf
 800bc68:	fffffef8 	.word	0xfffffef8
 800bc6c:	ffff0000 	.word	0xffff0000

0800bc70 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800bc70:	4770      	bx	lr

0800bc72 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800bc72:	4770      	bx	lr

0800bc74 <HAL_DMA2D_IRQHandler>:
{
 800bc74:	b570      	push	{r4, r5, r6, lr}
 800bc76:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800bc78:	6803      	ldr	r3, [r0, #0]
 800bc7a:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800bc7c:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800bc7e:	f015 0f01 	tst.w	r5, #1
 800bc82:	d016      	beq.n	800bcb2 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800bc84:	f416 7f80 	tst.w	r6, #256	@ 0x100
 800bc88:	d013      	beq.n	800bcb2 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc90:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800bc92:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800bc94:	f043 0301 	orr.w	r3, r3, #1
 800bc98:	6643      	str	r3, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800bc9a:	6803      	ldr	r3, [r0, #0]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bca0:	2304      	movs	r3, #4
 800bca2:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800bca6:	2300      	movs	r3, #0
 800bca8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800bcac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bcae:	b103      	cbz	r3, 800bcb2 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800bcb0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800bcb2:	f015 0f20 	tst.w	r5, #32
 800bcb6:	d018      	beq.n	800bcea <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800bcb8:	f416 5f00 	tst.w	r6, #8192	@ 0x2000
 800bcbc:	d015      	beq.n	800bcea <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	6813      	ldr	r3, [r2, #0]
 800bcc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bcc6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	2220      	movs	r2, #32
 800bccc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800bcce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcd0:	f043 0302 	orr.w	r3, r3, #2
 800bcd4:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bcd6:	2304      	movs	r3, #4
 800bcd8:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800bce2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bce4:	b10b      	cbz	r3, 800bcea <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800bce6:	4620      	mov	r0, r4
 800bce8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800bcea:	f015 0f08 	tst.w	r5, #8
 800bcee:	d018      	beq.n	800bd22 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800bcf0:	f416 6f00 	tst.w	r6, #2048	@ 0x800
 800bcf4:	d015      	beq.n	800bd22 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800bcf6:	6822      	ldr	r2, [r4, #0]
 800bcf8:	6813      	ldr	r3, [r2, #0]
 800bcfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcfe:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	2208      	movs	r2, #8
 800bd04:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800bd06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd08:	f043 0304 	orr.w	r3, r3, #4
 800bd0c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bd0e:	2304      	movs	r3, #4
 800bd10:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800bd14:	2300      	movs	r3, #0
 800bd16:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800bd1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd1c:	b10b      	cbz	r3, 800bd22 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800bd22:	f015 0f04 	tst.w	r5, #4
 800bd26:	d002      	beq.n	800bd2e <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800bd28:	f416 6f80 	tst.w	r6, #1024	@ 0x400
 800bd2c:	d120      	bne.n	800bd70 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800bd2e:	f015 0f02 	tst.w	r5, #2
 800bd32:	d016      	beq.n	800bd62 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800bd34:	f416 7f00 	tst.w	r6, #512	@ 0x200
 800bd38:	d013      	beq.n	800bd62 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800bd3a:	6822      	ldr	r2, [r4, #0]
 800bd3c:	6813      	ldr	r3, [r2, #0]
 800bd3e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd42:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	2202      	movs	r2, #2
 800bd48:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800bd4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd4c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800bd54:	2300      	movs	r3, #0
 800bd56:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800bd5a:	6a23      	ldr	r3, [r4, #32]
 800bd5c:	b10b      	cbz	r3, 800bd62 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 800bd5e:	4620      	mov	r0, r4
 800bd60:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800bd62:	f015 0f10 	tst.w	r5, #16
 800bd66:	d002      	beq.n	800bd6e <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800bd68:	f416 5f80 	tst.w	r6, #4096	@ 0x1000
 800bd6c:	d10c      	bne.n	800bd88 <HAL_DMA2D_IRQHandler+0x114>
}
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800bd70:	6822      	ldr	r2, [r4, #0]
 800bd72:	6813      	ldr	r3, [r2, #0]
 800bd74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd78:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800bd7a:	6823      	ldr	r3, [r4, #0]
 800bd7c:	2204      	movs	r2, #4
 800bd7e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800bd80:	4620      	mov	r0, r4
 800bd82:	f7ff ff75 	bl	800bc70 <HAL_DMA2D_LineEventCallback>
 800bd86:	e7d2      	b.n	800bd2e <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800bd88:	6822      	ldr	r2, [r4, #0]
 800bd8a:	6813      	ldr	r3, [r2, #0]
 800bd8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd90:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	2210      	movs	r2, #16
 800bd96:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800bd98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd9a:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800bda2:	2300      	movs	r3, #0
 800bda4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f7ff ff62 	bl	800bc72 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800bdae:	e7de      	b.n	800bd6e <HAL_DMA2D_IRQHandler+0xfa>

0800bdb0 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800bdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	4688      	mov	r8, r1
 800bdb8:	4617      	mov	r7, r2
 800bdba:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800bdbc:	f7ff fd80 	bl	800b8c0 <HAL_GetTick>
 800bdc0:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800bdc2:	682c      	ldr	r4, [r5, #0]
 800bdc4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800bdc6:	f013 0f01 	tst.w	r3, #1
 800bdca:	d107      	bne.n	800bddc <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800bdcc:	f7ff fd78 	bl	800b8c0 <HAL_GetTick>
 800bdd0:	1b80      	subs	r0, r0, r6
 800bdd2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800bdd6:	d9f4      	bls.n	800bdc2 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 800bdd8:	2003      	movs	r0, #3
 800bdda:	e008      	b.n	800bdee <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800bddc:	ea47 2309 	orr.w	r3, r7, r9, lsl #8
 800bde0:	9a08      	ldr	r2, [sp, #32]
 800bde2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bde6:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
 800bdea:	66e3      	str	r3, [r4, #108]	@ 0x6c

  return HAL_OK;
 800bdec:	2000      	movs	r0, #0
}
 800bdee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bdf2 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bdf2:	7c02      	ldrb	r2, [r0, #16]
 800bdf4:	2a01      	cmp	r2, #1
 800bdf6:	d075      	beq.n	800bee4 <HAL_DSI_ConfigErrorMonitor+0xf2>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	7402      	strb	r2, [r0, #16]

  hdsi->Instance->IER[0U] = 0U;
 800bdfe:	6800      	ldr	r0, [r0, #0]
 800be00:	2200      	movs	r2, #0
 800be02:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800be06:	6818      	ldr	r0, [r3, #0]
 800be08:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800be0c:	6199      	str	r1, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800be0e:	f011 0f01 	tst.w	r1, #1
 800be12:	d069      	beq.n	800bee8 <HAL_DSI_ConfigErrorMonitor+0xf6>
{
 800be14:	b410      	push	{r4}
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800be16:	6818      	ldr	r0, [r3, #0]
 800be18:	f8d0 40c4 	ldr.w	r4, [r0, #196]	@ 0xc4
 800be1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be20:	4322      	orrs	r2, r4
 800be22:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800be26:	f011 0f02 	tst.w	r1, #2
 800be2a:	d006      	beq.n	800be3a <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800be2c:	6818      	ldr	r0, [r3, #0]
 800be2e:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
 800be32:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800be36:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800be3a:	f011 0f04 	tst.w	r1, #4
 800be3e:	d006      	beq.n	800be4e <HAL_DSI_ConfigErrorMonitor+0x5c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800be46:	f042 0201 	orr.w	r2, r2, #1
 800be4a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800be4e:	f011 0f08 	tst.w	r1, #8
 800be52:	d006      	beq.n	800be62 <HAL_DSI_ConfigErrorMonitor+0x70>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800be54:	6818      	ldr	r0, [r3, #0]
 800be56:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800be5a:	f042 0202 	orr.w	r2, r2, #2
 800be5e:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800be62:	f011 0f10 	tst.w	r1, #16
 800be66:	d006      	beq.n	800be76 <HAL_DSI_ConfigErrorMonitor+0x84>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800be68:	6818      	ldr	r0, [r3, #0]
 800be6a:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800be6e:	f042 020c 	orr.w	r2, r2, #12
 800be72:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800be76:	f011 0f20 	tst.w	r1, #32
 800be7a:	d006      	beq.n	800be8a <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800be82:	f042 0210 	orr.w	r2, r2, #16
 800be86:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800be8a:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800be8e:	d006      	beq.n	800be9e <HAL_DSI_ConfigErrorMonitor+0xac>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800be90:	6818      	ldr	r0, [r3, #0]
 800be92:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800be96:	f042 0220 	orr.w	r2, r2, #32
 800be9a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800be9e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800bea2:	d006      	beq.n	800beb2 <HAL_DSI_ConfigErrorMonitor+0xc0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800beaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800beae:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800beb2:	f411 7f80 	tst.w	r1, #256	@ 0x100
 800beb6:	d006      	beq.n	800bec6 <HAL_DSI_ConfigErrorMonitor+0xd4>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800beb8:	6818      	ldr	r0, [r3, #0]
 800beba:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800bebe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bec2:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800bec6:	f411 7f00 	tst.w	r1, #512	@ 0x200
 800beca:	d006      	beq.n	800beda <HAL_DSI_ConfigErrorMonitor+0xe8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800becc:	6819      	ldr	r1, [r3, #0]
 800bece:	f8d1 20c8 	ldr.w	r2, [r1, #200]	@ 0xc8
 800bed2:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 800bed6:	f8c1 20c8 	str.w	r2, [r1, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800beda:	2000      	movs	r0, #0
 800bedc:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 800bede:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bee2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800bee4:	2002      	movs	r0, #2
 800bee6:	4770      	bx	lr
  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800bee8:	f011 0f02 	tst.w	r1, #2
 800beec:	d006      	beq.n	800befc <HAL_DSI_ConfigErrorMonitor+0x10a>
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
 800bef4:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800bef8:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800befc:	f011 0f04 	tst.w	r1, #4
 800bf00:	d006      	beq.n	800bf10 <HAL_DSI_ConfigErrorMonitor+0x11e>
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800bf08:	f042 0201 	orr.w	r2, r2, #1
 800bf0c:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800bf10:	f011 0f08 	tst.w	r1, #8
 800bf14:	d006      	beq.n	800bf24 <HAL_DSI_ConfigErrorMonitor+0x132>
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800bf1c:	f042 0202 	orr.w	r2, r2, #2
 800bf20:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800bf24:	f011 0f10 	tst.w	r1, #16
 800bf28:	d006      	beq.n	800bf38 <HAL_DSI_ConfigErrorMonitor+0x146>
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800bf2a:	6818      	ldr	r0, [r3, #0]
 800bf2c:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800bf30:	f042 020c 	orr.w	r2, r2, #12
 800bf34:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800bf38:	f011 0f20 	tst.w	r1, #32
 800bf3c:	d006      	beq.n	800bf4c <HAL_DSI_ConfigErrorMonitor+0x15a>
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800bf44:	f042 0210 	orr.w	r2, r2, #16
 800bf48:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800bf4c:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800bf50:	d006      	beq.n	800bf60 <HAL_DSI_ConfigErrorMonitor+0x16e>
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800bf52:	6818      	ldr	r0, [r3, #0]
 800bf54:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800bf58:	f042 0220 	orr.w	r2, r2, #32
 800bf5c:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800bf60:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800bf64:	d006      	beq.n	800bf74 <HAL_DSI_ConfigErrorMonitor+0x182>
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800bf6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf70:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800bf74:	f411 7f80 	tst.w	r1, #256	@ 0x100
 800bf78:	d006      	beq.n	800bf88 <HAL_DSI_ConfigErrorMonitor+0x196>
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800bf7a:	6818      	ldr	r0, [r3, #0]
 800bf7c:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800bf80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bf84:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800bf88:	f411 7f00 	tst.w	r1, #512	@ 0x200
 800bf8c:	d006      	beq.n	800bf9c <HAL_DSI_ConfigErrorMonitor+0x1aa>
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800bf8e:	6819      	ldr	r1, [r3, #0]
 800bf90:	f8d1 20c8 	ldr.w	r2, [r1, #200]	@ 0xc8
 800bf94:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 800bf98:	f8c1 20c8 	str.w	r2, [r1, #200]	@ 0xc8
  __HAL_UNLOCK(hdsi);
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	7418      	strb	r0, [r3, #16]
}
 800bfa0:	4770      	bx	lr
	...

0800bfa4 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	f000 8107 	beq.w	800c1b8 <HAL_DSI_Init+0x214>
{
 800bfaa:	b570      	push	{r4, r5, r6, lr}
 800bfac:	b084      	sub	sp, #16
 800bfae:	460d      	mov	r5, r1
 800bfb0:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800bfb2:	7c43      	ldrb	r3, [r0, #17]
 800bfb4:	b31b      	cbz	r3, 800bffe <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800bfba:	2300      	movs	r3, #0
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	6822      	ldr	r2, [r4, #0]
 800bfc0:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800bfc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bfc8:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800bfd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800bfda:	f7ff fc71 	bl	800b8c0 <HAL_GetTick>
 800bfde:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800bfe6:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800bfea:	d10b      	bne.n	800c004 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800bfec:	f7ff fc68 	bl	800b8c0 <HAL_GetTick>
 800bff0:	1b80      	subs	r0, r0, r6
 800bff2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800bff6:	d9f3      	bls.n	800bfe0 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800bff8:	2003      	movs	r0, #3
}
 800bffa:	b004      	add	sp, #16
 800bffc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 800bffe:	f7f5 f8ab 	bl	8001158 <HAL_DSI_MspInit>
 800c002:	e7d8      	b.n	800bfb6 <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c004:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800c008:	4a6c      	ldr	r2, [pc, #432]	@ (800c1bc <HAL_DSI_Init+0x218>)
 800c00a:	400a      	ands	r2, r1
 800c00c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800c010:	6822      	ldr	r2, [r4, #0]
 800c012:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
 800c016:	6828      	ldr	r0, [r5, #0]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800c018:	686b      	ldr	r3, [r5, #4]
 800c01a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800c01c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800c020:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800c022:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800c026:	430b      	orrs	r3, r1
 800c028:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800c02c:	2300      	movs	r3, #0
 800c02e:	9301      	str	r3, [sp, #4]
 800c030:	6822      	ldr	r2, [r4, #0]
 800c032:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800c036:	f043 0301 	orr.w	r3, r3, #1
 800c03a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	9301      	str	r3, [sp, #4]
 800c04a:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800c04c:	2001      	movs	r0, #1
 800c04e:	f7ff fc3d 	bl	800b8cc <HAL_Delay>
  tickstart = HAL_GetTick();
 800c052:	f7ff fc35 	bl	800b8c0 <HAL_GetTick>
 800c056:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800c05e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800c062:	d107      	bne.n	800c074 <HAL_DSI_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c064:	f7ff fc2c 	bl	800b8c0 <HAL_GetTick>
 800c068:	1b80      	subs	r0, r0, r6
 800c06a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800c06e:	d9f3      	bls.n	800c058 <HAL_DSI_Init+0xb4>
      return HAL_TIMEOUT;
 800c070:	2003      	movs	r0, #3
 800c072:	e7c2      	b.n	800bffa <HAL_DSI_Init+0x56>
  __HAL_DSI_ENABLE(hdsi);
 800c074:	2200      	movs	r2, #0
 800c076:	9202      	str	r2, [sp, #8]
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	f042 0201 	orr.w	r2, r2, #1
 800c07e:	605a      	str	r2, [r3, #4]
 800c080:	6823      	ldr	r3, [r4, #0]
 800c082:	685a      	ldr	r2, [r3, #4]
 800c084:	f002 0201 	and.w	r2, r2, #1
 800c088:	9202      	str	r2, [sp, #8]
 800c08a:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800c08c:	689a      	ldr	r2, [r3, #8]
 800c08e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c092:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800c094:	6822      	ldr	r2, [r4, #0]
 800c096:	6893      	ldr	r3, [r2, #8]
 800c098:	68a1      	ldr	r1, [r4, #8]
 800c09a:	430b      	orrs	r3, r1
 800c09c:	6093      	str	r3, [r2, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800c09e:	6822      	ldr	r2, [r4, #0]
 800c0a0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800c0a4:	f043 0302 	orr.w	r3, r3, #2
 800c0a8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800c0ac:	6822      	ldr	r2, [r4, #0]
 800c0ae:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800c0b2:	f043 0304 	orr.w	r3, r3, #4
 800c0b6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800c0ba:	6822      	ldr	r2, [r4, #0]
 800c0bc:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
 800c0c0:	f023 0303 	bic.w	r3, r3, #3
 800c0c4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800c0c8:	6822      	ldr	r2, [r4, #0]
 800c0ca:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
 800c0ce:	68e1      	ldr	r1, [r4, #12]
 800c0d0:	430b      	orrs	r3, r1
 800c0d2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 800c0d6:	f7ff fbf3 	bl	800b8c0 <HAL_GetTick>
 800c0da:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c0e2:	f013 0f03 	tst.w	r3, #3
 800c0e6:	d010      	beq.n	800c10a <HAL_DSI_Init+0x166>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800c0e8:	6823      	ldr	r3, [r4, #0]
 800c0ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c0ee:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800c0f2:	2b94      	cmp	r3, #148	@ 0x94
 800c0f4:	d01a      	beq.n	800c12c <HAL_DSI_Init+0x188>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c0f6:	f7ff fbe3 	bl	800b8c0 <HAL_GetTick>
 800c0fa:	1b83      	subs	r3, r0, r6
 800c0fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c100:	d9f2      	bls.n	800c0e8 <HAL_DSI_Init+0x144>
        __HAL_UNLOCK(hdsi);
 800c102:	2300      	movs	r3, #0
 800c104:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800c106:	2003      	movs	r0, #3
 800c108:	e777      	b.n	800bffa <HAL_DSI_Init+0x56>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c110:	f003 0314 	and.w	r3, r3, #20
 800c114:	2b14      	cmp	r3, #20
 800c116:	d009      	beq.n	800c12c <HAL_DSI_Init+0x188>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c118:	f7ff fbd2 	bl	800b8c0 <HAL_GetTick>
 800c11c:	1b80      	subs	r0, r0, r6
 800c11e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800c122:	d9f2      	bls.n	800c10a <HAL_DSI_Init+0x166>
        __HAL_UNLOCK(hdsi);
 800c124:	2300      	movs	r3, #0
 800c126:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800c128:	2003      	movs	r0, #3
 800c12a:	e766      	b.n	800bffa <HAL_DSI_Init+0x56>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c12c:	686b      	ldr	r3, [r5, #4]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	bf38      	it	cc
 800c132:	2301      	movcc	r3, #1
 800c134:	4a22      	ldr	r2, [pc, #136]	@ (800c1c0 <HAL_DSI_Init+0x21c>)
 800c136:	fb02 f303 	mul.w	r3, r2, r3
 800c13a:	68aa      	ldr	r2, [r5, #8]
 800c13c:	f002 0203 	and.w	r2, r2, #3
 800c140:	4093      	lsls	r3, r2
 800c142:	682a      	ldr	r2, [r5, #0]
 800c144:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800c148:	fb01 f202 	mul.w	r2, r1, r2
 800c14c:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800c150:	6821      	ldr	r1, [r4, #0]
 800c152:	f8d1 2418 	ldr.w	r2, [r1, #1048]	@ 0x418
 800c156:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800c15a:	f8c1 2418 	str.w	r2, [r1, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800c15e:	6821      	ldr	r1, [r4, #0]
 800c160:	f8d1 2418 	ldr.w	r2, [r1, #1048]	@ 0x418
 800c164:	4313      	orrs	r3, r2
 800c166:	f8c1 3418 	str.w	r3, [r1, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	2000      	movs	r0, #0
 800c16e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 800c178:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 800c17a:	9003      	str	r0, [sp, #12]
 800c17c:	6822      	ldr	r2, [r4, #0]
 800c17e:	6853      	ldr	r3, [r2, #4]
 800c180:	f023 0301 	bic.w	r3, r3, #1
 800c184:	6053      	str	r3, [r2, #4]
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	f002 0201 	and.w	r2, r2, #1
 800c18e:	9203      	str	r2, [sp, #12]
 800c190:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800c192:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800c196:	f022 0203 	bic.w	r2, r2, #3
 800c19a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c19e:	6822      	ldr	r2, [r4, #0]
 800c1a0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800c1a4:	6861      	ldr	r1, [r4, #4]
 800c1a6:	430b      	orrs	r3, r1
 800c1a8:	f043 0301 	orr.w	r3, r3, #1
 800c1ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800c1b0:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800c1b6:	e720      	b.n	800bffa <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 800c1b8:	2001      	movs	r0, #1
}
 800c1ba:	4770      	bx	lr
 800c1bc:	fffc8603 	.word	0xfffc8603
 800c1c0:	003d0900 	.word	0x003d0900

0800c1c4 <HAL_DSI_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800c1c4:	4770      	bx	lr

0800c1c6 <HAL_DSI_IRQHandler>:
{
 800c1c6:	b510      	push	{r4, lr}
 800c1c8:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800c1ca:	6803      	ldr	r3, [r0, #0]
 800c1cc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800c1d0:	f012 0f01 	tst.w	r2, #1
 800c1d4:	d004      	beq.n	800c1e0 <HAL_DSI_IRQHandler+0x1a>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800c1d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800c1da:	f012 0f01 	tst.w	r2, #1
 800c1de:	d160      	bne.n	800c2a2 <HAL_DSI_IRQHandler+0xdc>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800c1e6:	f012 0f02 	tst.w	r2, #2
 800c1ea:	d004      	beq.n	800c1f6 <HAL_DSI_IRQHandler+0x30>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800c1ec:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800c1f0:	f012 0f02 	tst.w	r2, #2
 800c1f4:	d15b      	bne.n	800c2ae <HAL_DSI_IRQHandler+0xe8>
  if (hdsi->ErrorMsk != 0U)
 800c1f6:	69a3      	ldr	r3, [r4, #24]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d051      	beq.n	800c2a0 <HAL_DSI_IRQHandler+0xda>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800c1fc:	6821      	ldr	r1, [r4, #0]
 800c1fe:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800c202:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800c206:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800c208:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800c20c:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800c210:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800c212:	b291      	uxth	r1, r2
 800c214:	b119      	cbz	r1, 800c21e <HAL_DSI_IRQHandler+0x58>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800c216:	6961      	ldr	r1, [r4, #20]
 800c218:	f041 0101 	orr.w	r1, r1, #1
 800c21c:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800c21e:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800c222:	d003      	beq.n	800c22c <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800c224:	6962      	ldr	r2, [r4, #20]
 800c226:	f042 0202 	orr.w	r2, r2, #2
 800c22a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800c22c:	f013 0f01 	tst.w	r3, #1
 800c230:	d003      	beq.n	800c23a <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800c232:	6962      	ldr	r2, [r4, #20]
 800c234:	f042 0204 	orr.w	r2, r2, #4
 800c238:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800c23a:	f013 0f02 	tst.w	r3, #2
 800c23e:	d003      	beq.n	800c248 <HAL_DSI_IRQHandler+0x82>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800c240:	6962      	ldr	r2, [r4, #20]
 800c242:	f042 0208 	orr.w	r2, r2, #8
 800c246:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800c248:	f013 0f0c 	tst.w	r3, #12
 800c24c:	d003      	beq.n	800c256 <HAL_DSI_IRQHandler+0x90>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800c24e:	6962      	ldr	r2, [r4, #20]
 800c250:	f042 0210 	orr.w	r2, r2, #16
 800c254:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800c256:	f013 0f10 	tst.w	r3, #16
 800c25a:	d003      	beq.n	800c264 <HAL_DSI_IRQHandler+0x9e>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800c25c:	6962      	ldr	r2, [r4, #20]
 800c25e:	f042 0220 	orr.w	r2, r2, #32
 800c262:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800c264:	f013 0f20 	tst.w	r3, #32
 800c268:	d003      	beq.n	800c272 <HAL_DSI_IRQHandler+0xac>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800c26a:	6962      	ldr	r2, [r4, #20]
 800c26c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c270:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800c272:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800c276:	d003      	beq.n	800c280 <HAL_DSI_IRQHandler+0xba>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800c278:	6962      	ldr	r2, [r4, #20]
 800c27a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c27e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800c280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c284:	d003      	beq.n	800c28e <HAL_DSI_IRQHandler+0xc8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800c286:	6962      	ldr	r2, [r4, #20]
 800c288:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c28c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800c28e:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800c292:	d003      	beq.n	800c29c <HAL_DSI_IRQHandler+0xd6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800c294:	6963      	ldr	r3, [r4, #20]
 800c296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c29a:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800c29c:	6963      	ldr	r3, [r4, #20]
 800c29e:	b96b      	cbnz	r3, 800c2bc <HAL_DSI_IRQHandler+0xf6>
}
 800c2a0:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800c2a8:	f7f5 ff6e 	bl	8002188 <HAL_DSI_TearingEffectCallback>
 800c2ac:	e798      	b.n	800c1e0 <HAL_DSI_IRQHandler+0x1a>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f7f5 ff97 	bl	80021e8 <HAL_DSI_EndOfRefreshCallback>
 800c2ba:	e79c      	b.n	800c1f6 <HAL_DSI_IRQHandler+0x30>
      HAL_DSI_ErrorCallback(hdsi);
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f7ff ff81 	bl	800c1c4 <HAL_DSI_ErrorCallback>
}
 800c2c2:	e7ed      	b.n	800c2a0 <HAL_DSI_IRQHandler+0xda>

0800c2c4 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c2c4:	7c03      	ldrb	r3, [r0, #16]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d00e      	beq.n	800c2e8 <HAL_DSI_SetGenericVCID+0x24>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	7403      	strb	r3, [r0, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800c2ce:	6802      	ldr	r2, [r0, #0]
 800c2d0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c2d2:	f023 0303 	bic.w	r3, r3, #3
 800c2d6:	6313      	str	r3, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800c2d8:	6802      	ldr	r2, [r0, #0]
 800c2da:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c2e8:	2002      	movs	r0, #2
}
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_DSI_ConfigAdaptedCommandMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c2ec:	7c02      	ldrb	r2, [r0, #16]
 800c2ee:	2a01      	cmp	r2, #1
 800c2f0:	f000 8082 	beq.w	800c3f8 <HAL_DSI_ConfigAdaptedCommandMode+0x10c>
{
 800c2f4:	b430      	push	{r4, r5}
 800c2f6:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	7402      	strb	r2, [r0, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800c2fc:	6800      	ldr	r0, [r0, #0]
 800c2fe:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c300:	f042 0201 	orr.w	r2, r2, #1
 800c304:	6342      	str	r2, [r0, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 800c30c:	f022 0201 	bic.w	r2, r2, #1
 800c310:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800c314:	6818      	ldr	r0, [r3, #0]
 800c316:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 800c31a:	f042 0201 	orr.w	r2, r2, #1
 800c31e:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800c322:	6818      	ldr	r0, [r3, #0]
 800c324:	68c2      	ldr	r2, [r0, #12]
 800c326:	f022 0203 	bic.w	r2, r2, #3
 800c32a:	60c2      	str	r2, [r0, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	68c2      	ldr	r2, [r0, #12]
 800c330:	680c      	ldr	r4, [r1, #0]
 800c332:	4322      	orrs	r2, r4
 800c334:	60c2      	str	r2, [r0, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800c336:	6818      	ldr	r0, [r3, #0]
 800c338:	6942      	ldr	r2, [r0, #20]
 800c33a:	f022 0207 	bic.w	r2, r2, #7
 800c33e:	6142      	str	r2, [r0, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	6944      	ldr	r4, [r0, #20]
 800c344:	69ca      	ldr	r2, [r1, #28]
 800c346:	698d      	ldr	r5, [r1, #24]
 800c348:	432a      	orrs	r2, r5
 800c34a:	694d      	ldr	r5, [r1, #20]
 800c34c:	432a      	orrs	r2, r5
 800c34e:	4322      	orrs	r2, r4
 800c350:	6142      	str	r2, [r0, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	6902      	ldr	r2, [r0, #16]
 800c356:	f022 020f 	bic.w	r2, r2, #15
 800c35a:	6102      	str	r2, [r0, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	6902      	ldr	r2, [r0, #16]
 800c360:	684c      	ldr	r4, [r1, #4]
 800c362:	4322      	orrs	r2, r4
 800c364:	6102      	str	r2, [r0, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800c366:	6818      	ldr	r0, [r3, #0]
 800c368:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 800c36c:	f022 020e 	bic.w	r2, r2, #14
 800c370:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800c374:	6818      	ldr	r0, [r3, #0]
 800c376:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 800c37a:	684c      	ldr	r4, [r1, #4]
 800c37c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800c380:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800c384:	6818      	ldr	r0, [r3, #0]
 800c386:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 800c388:	4a1c      	ldr	r2, [pc, #112]	@ (800c3fc <HAL_DSI_ConfigAdaptedCommandMode+0x110>)
 800c38a:	4022      	ands	r2, r4
 800c38c:	6642      	str	r2, [r0, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800c38e:	6818      	ldr	r0, [r3, #0]
 800c390:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800c392:	688c      	ldr	r4, [r1, #8]
 800c394:	4322      	orrs	r2, r4
 800c396:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800c398:	6818      	ldr	r0, [r3, #0]
 800c39a:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 800c39e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800c3a2:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800c3a6:	6818      	ldr	r0, [r3, #0]
 800c3a8:	f8d0 4400 	ldr.w	r4, [r0, #1024]	@ 0x400
 800c3ac:	68ca      	ldr	r2, [r1, #12]
 800c3ae:	690d      	ldr	r5, [r1, #16]
 800c3b0:	432a      	orrs	r2, r5
 800c3b2:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800c3b4:	432a      	orrs	r2, r5
 800c3b6:	6a0d      	ldr	r5, [r1, #32]
 800c3b8:	432a      	orrs	r2, r5
 800c3ba:	4322      	orrs	r2, r4
 800c3bc:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	6682      	str	r2, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800c3ce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800c3d4:	6819      	ldr	r1, [r3, #0]
 800c3d6:	f8d1 2408 	ldr.w	r2, [r1, #1032]	@ 0x408
 800c3da:	f042 0201 	orr.w	r2, r2, #1
 800c3de:	f8c1 2408 	str.w	r2, [r1, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800c3e2:	6819      	ldr	r1, [r3, #0]
 800c3e4:	f8d1 2408 	ldr.w	r2, [r1, #1032]	@ 0x408
 800c3e8:	f042 0202 	orr.w	r2, r2, #2
 800c3ec:	f8c1 2408 	str.w	r2, [r1, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 800c3f4:	bc30      	pop	{r4, r5}
 800c3f6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c3f8:	2002      	movs	r0, #2
}
 800c3fa:	4770      	bx	lr
 800c3fc:	ffff0000 	.word	0xffff0000

0800c400 <HAL_DSI_ConfigCommand>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c400:	7c03      	ldrb	r3, [r0, #16]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d031      	beq.n	800c46a <HAL_DSI_ConfigCommand+0x6a>
{
 800c406:	b430      	push	{r4, r5}
 800c408:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800c40a:	2301      	movs	r3, #1
 800c40c:	7403      	strb	r3, [r0, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800c40e:	6800      	ldr	r0, [r0, #0]
 800c410:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800c412:	4b17      	ldr	r3, [pc, #92]	@ (800c470 <HAL_DSI_ConfigCommand+0x70>)
 800c414:	4023      	ands	r3, r4
 800c416:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800c418:	6810      	ldr	r0, [r2, #0]
 800c41a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800c41c:	680b      	ldr	r3, [r1, #0]
 800c41e:	684d      	ldr	r5, [r1, #4]
 800c420:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800c422:	688d      	ldr	r5, [r1, #8]
 800c424:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800c426:	68cd      	ldr	r5, [r1, #12]
 800c428:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800c42a:	690d      	ldr	r5, [r1, #16]
 800c42c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800c42e:	694d      	ldr	r5, [r1, #20]
 800c430:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800c432:	698d      	ldr	r5, [r1, #24]
 800c434:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800c436:	69cd      	ldr	r5, [r1, #28]
 800c438:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800c43a:	6a0d      	ldr	r5, [r1, #32]
 800c43c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800c43e:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800c440:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800c442:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800c444:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800c446:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800c448:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800c44a:	4323      	orrs	r3, r4
 800c44c:	6683      	str	r3, [r0, #104]	@ 0x68
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800c44e:	6810      	ldr	r0, [r2, #0]
 800c450:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800c452:	f023 0302 	bic.w	r3, r3, #2
 800c456:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800c458:	6810      	ldr	r0, [r2, #0]
 800c45a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800c45c:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800c45e:	430b      	orrs	r3, r1
 800c460:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c462:	2000      	movs	r0, #0
 800c464:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 800c466:	bc30      	pop	{r4, r5}
 800c468:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c46a:	2002      	movs	r0, #2
}
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	fef080ff 	.word	0xfef080ff

0800c474 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c474:	7c03      	ldrb	r3, [r0, #16]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d00e      	beq.n	800c498 <HAL_DSI_ConfigFlowControl+0x24>
 800c47a:	2301      	movs	r3, #1
 800c47c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800c47e:	6802      	ldr	r2, [r0, #0]
 800c480:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c482:	f023 031f 	bic.w	r3, r3, #31
 800c486:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800c488:	6802      	ldr	r2, [r0, #0]
 800c48a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c48c:	430b      	orrs	r3, r1
 800c48e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c490:	2300      	movs	r3, #0
 800c492:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800c494:	4618      	mov	r0, r3
 800c496:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c498:	2002      	movs	r0, #2
}
 800c49a:	4770      	bx	lr

0800c49c <HAL_DSI_ConfigPhyTimer>:
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c49c:	7c02      	ldrb	r2, [r0, #16]
 800c49e:	2a01      	cmp	r2, #1
 800c4a0:	d03e      	beq.n	800c520 <HAL_DSI_ConfigPhyTimer+0x84>
{
 800c4a2:	b430      	push	{r4, r5}
 800c4a4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	7402      	strb	r2, [r0, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800c4aa:	6808      	ldr	r0, [r1, #0]
 800c4ac:	684a      	ldr	r2, [r1, #4]
 800c4ae:	4290      	cmp	r0, r2
 800c4b0:	bf38      	it	cc
 800c4b2:	4610      	movcc	r0, r2
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800c4b4:	681c      	ldr	r4, [r3, #0]
 800c4b6:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800c4ba:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800c4be:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800c4c2:	681c      	ldr	r4, [r3, #0]
 800c4c4:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800c4c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c4cc:	4302      	orrs	r2, r0
 800c4ce:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800c4d2:	6818      	ldr	r0, [r3, #0]
 800c4d4:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 800c4d8:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800c4dc:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800c4e6:	688a      	ldr	r2, [r1, #8]
 800c4e8:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800c4ea:	68cd      	ldr	r5, [r1, #12]
 800c4ec:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800c4f0:	690d      	ldr	r5, [r1, #16]
 800c4f2:	432a      	orrs	r2, r5
 800c4f4:	4322      	orrs	r2, r4
 800c4f6:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800c4fa:	6818      	ldr	r0, [r3, #0]
 800c4fc:	f8d0 20a4 	ldr.w	r2, [r0, #164]	@ 0xa4
 800c500:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800c504:	f8c0 20a4 	str.w	r2, [r0, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	@ 0xa4
 800c50e:	6949      	ldr	r1, [r1, #20]
 800c510:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c514:	f8c0 20a4 	str.w	r2, [r0, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c518:	2000      	movs	r0, #0
 800c51a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 800c51c:	bc30      	pop	{r4, r5}
 800c51e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c520:	2002      	movs	r0, #2
}
 800c522:	4770      	bx	lr

0800c524 <HAL_DSI_ConfigHostTimeouts>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c524:	7c02      	ldrb	r2, [r0, #16]
 800c526:	2a01      	cmp	r2, #1
 800c528:	d071      	beq.n	800c60e <HAL_DSI_ConfigHostTimeouts+0xea>
{
 800c52a:	b430      	push	{r4, r5}
 800c52c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800c52e:	2201      	movs	r2, #1
 800c530:	7402      	strb	r2, [r0, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800c532:	6800      	ldr	r0, [r0, #0]
 800c534:	6882      	ldr	r2, [r0, #8]
 800c536:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800c53a:	6082      	str	r2, [r0, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800c53c:	6818      	ldr	r0, [r3, #0]
 800c53e:	6882      	ldr	r2, [r0, #8]
 800c540:	680c      	ldr	r4, [r1, #0]
 800c542:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800c546:	6082      	str	r2, [r0, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800c54c:	b292      	uxth	r2, r2
 800c54e:	6782      	str	r2, [r0, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800c550:	6818      	ldr	r0, [r3, #0]
 800c552:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800c554:	684c      	ldr	r4, [r1, #4]
 800c556:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c55a:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800c55c:	681c      	ldr	r4, [r3, #0]
 800c55e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800c560:	4a2c      	ldr	r2, [pc, #176]	@ (800c614 <HAL_DSI_ConfigHostTimeouts+0xf0>)
 800c562:	4010      	ands	r0, r2
 800c564:	67a0      	str	r0, [r4, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800c566:	681c      	ldr	r4, [r3, #0]
 800c568:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800c56a:	688d      	ldr	r5, [r1, #8]
 800c56c:	4328      	orrs	r0, r5
 800c56e:	67a0      	str	r0, [r4, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800c570:	681c      	ldr	r4, [r3, #0]
 800c572:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800c574:	4010      	ands	r0, r2
 800c576:	67e0      	str	r0, [r4, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800c578:	681c      	ldr	r4, [r3, #0]
 800c57a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800c57c:	68cd      	ldr	r5, [r1, #12]
 800c57e:	4328      	orrs	r0, r5
 800c580:	67e0      	str	r0, [r4, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800c582:	681c      	ldr	r4, [r3, #0]
 800c584:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800c588:	4010      	ands	r0, r2
 800c58a:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800c58e:	681c      	ldr	r4, [r3, #0]
 800c590:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800c594:	690d      	ldr	r5, [r1, #16]
 800c596:	4328      	orrs	r0, r5
 800c598:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800c59c:	681c      	ldr	r4, [r3, #0]
 800c59e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800c5a2:	4010      	ands	r0, r2
 800c5a4:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800c5a8:	681c      	ldr	r4, [r3, #0]
 800c5aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800c5ae:	694d      	ldr	r5, [r1, #20]
 800c5b0:	4328      	orrs	r0, r5
 800c5b2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800c5b6:	681c      	ldr	r4, [r3, #0]
 800c5b8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800c5bc:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800c5c0:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800c5c4:	681c      	ldr	r4, [r3, #0]
 800c5c6:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800c5ca:	698d      	ldr	r5, [r1, #24]
 800c5cc:	4328      	orrs	r0, r5
 800c5ce:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800c5d2:	681c      	ldr	r4, [r3, #0]
 800c5d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800c5d8:	4010      	ands	r0, r2
 800c5da:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800c5de:	681c      	ldr	r4, [r3, #0]
 800c5e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800c5e4:	69cd      	ldr	r5, [r1, #28]
 800c5e6:	4328      	orrs	r0, r5
 800c5e8:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800c5ec:	681c      	ldr	r4, [r3, #0]
 800c5ee:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800c5f2:	4002      	ands	r2, r0
 800c5f4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800c5f8:	6818      	ldr	r0, [r3, #0]
 800c5fa:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800c5fe:	6a09      	ldr	r1, [r1, #32]
 800c600:	430a      	orrs	r2, r1
 800c602:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c606:	2000      	movs	r0, #0
 800c608:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 800c60a:	bc30      	pop	{r4, r5}
 800c60c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c60e:	2002      	movs	r0, #2
}
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	ffff0000 	.word	0xffff0000

0800c618 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c618:	7c02      	ldrb	r2, [r0, #16]
 800c61a:	2a01      	cmp	r2, #1
 800c61c:	d021      	beq.n	800c662 <HAL_DSI_Start+0x4a>
{
 800c61e:	b082      	sub	sp, #8
 800c620:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800c622:	2201      	movs	r2, #1
 800c624:	7402      	strb	r2, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800c626:	2000      	movs	r0, #0
 800c628:	9000      	str	r0, [sp, #0]
 800c62a:	6819      	ldr	r1, [r3, #0]
 800c62c:	684a      	ldr	r2, [r1, #4]
 800c62e:	f042 0201 	orr.w	r2, r2, #1
 800c632:	604a      	str	r2, [r1, #4]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	6851      	ldr	r1, [r2, #4]
 800c638:	f001 0101 	and.w	r1, r1, #1
 800c63c:	9100      	str	r1, [sp, #0]
 800c63e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800c640:	9001      	str	r0, [sp, #4]
 800c642:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800c646:	f041 0108 	orr.w	r1, r1, #8
 800c64a:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800c654:	f002 0208 	and.w	r2, r2, #8
 800c658:	9201      	str	r2, [sp, #4]
 800c65a:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c65c:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 800c65e:	b002      	add	sp, #8
 800c660:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c662:	2002      	movs	r0, #2
}
 800c664:	4770      	bx	lr

0800c666 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c666:	7c03      	ldrb	r3, [r0, #16]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d00c      	beq.n	800c686 <HAL_DSI_Refresh+0x20>
 800c66c:	2301      	movs	r3, #1
 800c66e:	7403      	strb	r3, [r0, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800c670:	6802      	ldr	r2, [r0, #0]
 800c672:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 800c676:	f043 0304 	orr.w	r3, r3, #4
 800c67a:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c67e:	2300      	movs	r3, #0
 800c680:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800c682:	4618      	mov	r0, r3
 800c684:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c686:	2002      	movs	r0, #2
}
 800c688:	4770      	bx	lr

0800c68a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800c68a:	b510      	push	{r4, lr}
 800c68c:	b082      	sub	sp, #8
 800c68e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800c690:	7c00      	ldrb	r0, [r0, #16]
 800c692:	2801      	cmp	r0, #1
 800c694:	d00a      	beq.n	800c6ac <HAL_DSI_ShortWrite+0x22>
 800c696:	2001      	movs	r0, #1
 800c698:	7420      	strb	r0, [r4, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800c69a:	9804      	ldr	r0, [sp, #16]
 800c69c:	9000      	str	r0, [sp, #0]
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f7ff fb86 	bl	800bdb0 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	7423      	strb	r3, [r4, #16]

  return status;
}
 800c6a8:	b002      	add	sp, #8
 800c6aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 800c6ac:	2002      	movs	r0, #2
 800c6ae:	e7fb      	b.n	800c6a8 <HAL_DSI_ShortWrite+0x1e>

0800c6b0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800c6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b4:	461d      	mov	r5, r3
 800c6b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800c6ba:	7c03      	ldrb	r3, [r0, #16]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d04f      	beq.n	800c760 <HAL_DSI_LongWrite+0xb0>
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	468a      	mov	sl, r1
 800c6c4:	4617      	mov	r7, r2
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800c6ca:	f7ff f8f9 	bl	800b8c0 <HAL_GetTick>
 800c6ce:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800c6d4:	f012 0f01 	tst.w	r2, #1
 800c6d8:	d10a      	bne.n	800c6f0 <HAL_DSI_LongWrite+0x40>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c6da:	f7ff f8f1 	bl	800b8c0 <HAL_GetTick>
 800c6de:	eba0 0008 	sub.w	r0, r0, r8
 800c6e2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800c6e6:	d9f3      	bls.n	800c6d0 <HAL_DSI_LongWrite+0x20>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	7423      	strb	r3, [r4, #16]

      return HAL_TIMEOUT;
 800c6ec:	2003      	movs	r0, #3
 800c6ee:	e04a      	b.n	800c786 <HAL_DSI_LongWrite+0xd6>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800c6f0:	46a8      	mov	r8, r5
 800c6f2:	2d03      	cmp	r5, #3
 800c6f4:	bf28      	it	cs
 800c6f6:	f04f 0803 	movcs.w	r8, #3

  for (count = 0U; count < nbBytes; count++)
 800c6fa:	2d00      	cmp	r5, #0
 800c6fc:	d045      	beq.n	800c78a <HAL_DSI_LongWrite+0xda>
 800c6fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c700:	1e50      	subs	r0, r2, #1
 800c702:	2200      	movs	r2, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800c704:	3201      	adds	r2, #1
 800c706:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800c70a:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 800c70e:	fa01 f10c 	lsl.w	r1, r1, ip
 800c712:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800c716:	4542      	cmp	r2, r8
 800c718:	d3f4      	bcc.n	800c704 <HAL_DSI_LongWrite+0x54>
  }
  hdsi->Instance->GPDR = fifoword;
 800c71a:	f8c3 9070 	str.w	r9, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800c71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c720:	eb03 0908 	add.w	r9, r3, r8
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800c724:	ebb5 0608 	subs.w	r6, r5, r8
 800c728:	d01f      	beq.n	800c76a <HAL_DSI_LongWrite+0xba>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800c72a:	4630      	mov	r0, r6
 800c72c:	2e04      	cmp	r6, #4
 800c72e:	bf28      	it	cs
 800c730:	2004      	movcs	r0, #4
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
 800c732:	b1be      	cbz	r6, 800c764 <HAL_DSI_LongWrite+0xb4>
 800c734:	f109 32ff 	add.w	r2, r9, #4294967295
    fifoword = 0U;
 800c738:	2300      	movs	r3, #0
    for (count = 0U; count < nbBytes; count++)
 800c73a:	469c      	mov	ip, r3
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800c73c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 800c740:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 800c744:	fa0e fe01 	lsl.w	lr, lr, r1
 800c748:	ea43 030e 	orr.w	r3, r3, lr
    for (count = 0U; count < nbBytes; count++)
 800c74c:	f10c 0c01 	add.w	ip, ip, #1
 800c750:	4560      	cmp	r0, ip
 800c752:	d8f3      	bhi.n	800c73c <HAL_DSI_LongWrite+0x8c>
    }
    hdsi->Instance->GPDR = fifoword;
 800c754:	6822      	ldr	r2, [r4, #0]
 800c756:	6713      	str	r3, [r2, #112]	@ 0x70

    uicounter -= nbBytes;
    pparams += nbBytes;
 800c758:	4481      	add	r9, r0
  while (uicounter != 0U)
 800c75a:	1a36      	subs	r6, r6, r0
 800c75c:	d1e5      	bne.n	800c72a <HAL_DSI_LongWrite+0x7a>
 800c75e:	e004      	b.n	800c76a <HAL_DSI_LongWrite+0xba>
  __HAL_LOCK(hdsi);
 800c760:	2002      	movs	r0, #2
 800c762:	e010      	b.n	800c786 <HAL_DSI_LongWrite+0xd6>
    hdsi->Instance->GPDR = fifoword;
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	2200      	movs	r2, #0
 800c768:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800c76a:	6822      	ldr	r2, [r4, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800c76c:	3501      	adds	r5, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c76e:	ea47 138a 	orr.w	r3, r7, sl, lsl #6
 800c772:	0229      	lsls	r1, r5, #8
 800c774:	b289      	uxth	r1, r1
 800c776:	4319      	orrs	r1, r3
 800c778:	022d      	lsls	r5, r5, #8
 800c77a:	f405 037f 	and.w	r3, r5, #16711680	@ 0xff0000
 800c77e:	430b      	orrs	r3, r1
 800c780:	66d3      	str	r3, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c782:	2000      	movs	r0, #0
 800c784:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800c786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 800c78a:	f8c3 9070 	str.w	r9, [r3, #112]	@ 0x70
  while (uicounter != 0U)
 800c78e:	e7ec      	b.n	800c76a <HAL_DSI_LongWrite+0xba>

0800c790 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	461c      	mov	r4, r3
 800c798:	f8dd 8020 	ldr.w	r8, [sp, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800c79c:	7c03      	ldrb	r3, [r0, #16]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	f000 808f 	beq.w	800c8c2 <HAL_DSI_Read+0x132>
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	460e      	mov	r6, r1
 800c7a8:	4617      	mov	r7, r2
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800c7ae:	2c02      	cmp	r4, #2
 800c7b0:	d811      	bhi.n	800c7d6 <HAL_DSI_Read+0x46>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800c7b2:	f1b8 0f06 	cmp.w	r8, #6
 800c7b6:	d01b      	beq.n	800c7f0 <HAL_DSI_Read+0x60>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800c7b8:	f1b8 0f04 	cmp.w	r8, #4
 800c7bc:	d028      	beq.n	800c810 <HAL_DSI_Read+0x80>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800c7be:	f1b8 0f14 	cmp.w	r8, #20
 800c7c2:	d02b      	beq.n	800c81c <HAL_DSI_Read+0x8c>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800c7c4:	f1b8 0f24 	cmp.w	r8, #36	@ 0x24
 800c7c8:	d032      	beq.n	800c830 <HAL_DSI_Read+0xa0>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	742b      	strb	r3, [r5, #16]

    return HAL_ERROR;
 800c7ce:	2001      	movs	r0, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800c7d0:	b002      	add	sp, #8
 800c7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800c7d6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	b2e3      	uxtb	r3, r4
 800c7de:	2237      	movs	r2, #55	@ 0x37
 800c7e0:	f7ff fae6 	bl	800bdb0 <DSI_ShortWrite>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d0e4      	beq.n	800c7b2 <HAL_DSI_Read+0x22>
      __HAL_UNLOCK(hdsi);
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	742b      	strb	r3, [r5, #16]
      return HAL_ERROR;
 800c7ec:	2001      	movs	r0, #1
 800c7ee:	e7ef      	b.n	800c7d0 <HAL_DSI_Read+0x40>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800c7f0:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f4:	021b      	lsls	r3, r3, #8
 800c7f6:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800c7fa:	f043 0306 	orr.w	r3, r3, #6
 800c7fe:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800c800:	f7ff f85e 	bl	800b8c0 <HAL_GetTick>
 800c804:	4606      	mov	r6, r0
  while (((int32_t)(datasize)) > 0)
 800c806:	2c00      	cmp	r4, #0
 800c808:	dc42      	bgt.n	800c890 <HAL_DSI_Read+0x100>
  __HAL_UNLOCK(hdsi);
 800c80a:	2000      	movs	r0, #0
 800c80c:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800c80e:	e7df      	b.n	800c7d0 <HAL_DSI_Read+0x40>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800c810:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c812:	01b3      	lsls	r3, r6, #6
 800c814:	f043 0304 	orr.w	r3, r3, #4
 800c818:	66d3      	str	r3, [r2, #108]	@ 0x6c
}
 800c81a:	e7f1      	b.n	800c800 <HAL_DSI_Read+0x70>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800c81c:	682a      	ldr	r2, [r5, #0]
 800c81e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c820:	7819      	ldrb	r1, [r3, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c822:	01b3      	lsls	r3, r6, #6
 800c824:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c828:	f043 0314 	orr.w	r3, r3, #20
 800c82c:	66d3      	str	r3, [r2, #108]	@ 0x6c
}
 800c82e:	e7e7      	b.n	800c800 <HAL_DSI_Read+0x70>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800c830:	682a      	ldr	r2, [r5, #0]
 800c832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c834:	7859      	ldrb	r1, [r3, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c836:	01b3      	lsls	r3, r6, #6
 800c838:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800c83c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c83e:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800c840:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c844:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800c848:	66d3      	str	r3, [r2, #108]	@ 0x6c
}
 800c84a:	e7d9      	b.n	800c800 <HAL_DSI_Read+0x70>
      fifoword = hdsi->Instance->GPDR;
 800c84c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800c84e:	4622      	mov	r2, r4
 800c850:	2c04      	cmp	r4, #4
 800c852:	bf28      	it	cs
 800c854:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 800c856:	b304      	cbz	r4, 800c89a <HAL_DSI_Read+0x10a>
 800c858:	463b      	mov	r3, r7
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800c85a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800c85e:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c862:	f803 cb01 	strb.w	ip, [r3], #1
      for (count = 0U; count < nbbytes; count++)
 800c866:	3101      	adds	r1, #1
 800c868:	428a      	cmp	r2, r1
 800c86a:	d8f6      	bhi.n	800c85a <HAL_DSI_Read+0xca>
        pdata++;
 800c86c:	2c00      	cmp	r4, #0
 800c86e:	bf14      	ite	ne
 800c870:	4613      	movne	r3, r2
 800c872:	2301      	moveq	r3, #1
 800c874:	441f      	add	r7, r3
 800c876:	f1c2 0201 	rsb	r2, r2, #1
 800c87a:	bf08      	it	eq
 800c87c:	2200      	moveq	r2, #0
 800c87e:	3c01      	subs	r4, #1
        datasize--;
 800c880:	4414      	add	r4, r2
 800c882:	e00a      	b.n	800c89a <HAL_DSI_Read+0x10a>
      __HAL_UNLOCK(hdsi);
 800c884:	2300      	movs	r3, #0
 800c886:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800c888:	2003      	movs	r0, #3
 800c88a:	e7a1      	b.n	800c7d0 <HAL_DSI_Read+0x40>
  while (((int32_t)(datasize)) > 0)
 800c88c:	2c00      	cmp	r4, #0
 800c88e:	ddbc      	ble.n	800c80a <HAL_DSI_Read+0x7a>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 800c894:	f011 0110 	ands.w	r1, r1, #16
 800c898:	d0d8      	beq.n	800c84c <HAL_DSI_Read+0xbc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c89a:	f7ff f811 	bl	800b8c0 <HAL_GetTick>
 800c89e:	1b80      	subs	r0, r0, r6
 800c8a0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800c8a4:	d8ee      	bhi.n	800c884 <HAL_DSI_Read+0xf4>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800c8a6:	682b      	ldr	r3, [r5, #0]
 800c8a8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800c8aa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800c8ae:	d1ed      	bne.n	800c88c <HAL_DSI_Read+0xfc>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800c8b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c8b4:	f013 0f20 	tst.w	r3, #32
 800c8b8:	d0e8      	beq.n	800c88c <HAL_DSI_Read+0xfc>
        __HAL_UNLOCK(hdsi);
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	742b      	strb	r3, [r5, #16]
        return HAL_ERROR;
 800c8be:	2001      	movs	r0, #1
 800c8c0:	e786      	b.n	800c7d0 <HAL_DSI_Read+0x40>
  __HAL_LOCK(hdsi);
 800c8c2:	2002      	movs	r0, #2
 800c8c4:	e784      	b.n	800c7d0 <HAL_DSI_Read+0x40>

0800c8c6 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800c8c6:	7c03      	ldrb	r3, [r0, #16]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d013      	beq.n	800c8f4 <HAL_DSI_SetLowPowerRXFilter+0x2e>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	7403      	strb	r3, [r0, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800c8d0:	6802      	ldr	r2, [r0, #0]
 800c8d2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	@ 0x41c
 800c8d6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c8da:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800c8de:	6802      	ldr	r2, [r0, #0]
 800c8e0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	@ 0x41c
 800c8e4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800c8e8:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800c8f4:	2002      	movs	r0, #2
}
 800c8f6:	4770      	bx	lr

0800c8f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800c8f8:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800c8fa:	684c      	ldr	r4, [r1, #4]
 800c8fc:	2c00      	cmp	r4, #0
 800c8fe:	d139      	bne.n	800c974 <FDCAN_CopyMessageToRAM+0x7c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 800c900:	690e      	ldr	r6, [r1, #16]
 800c902:	688c      	ldr	r4, [r1, #8]
 800c904:	4326      	orrs	r6, r4
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 800c906:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800c908:	ea46 4684 	orr.w	r6, r6, r4, lsl #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 800c90c:	69cc      	ldr	r4, [r1, #28]
 800c90e:	698d      	ldr	r5, [r1, #24]
 800c910:	4325      	orrs	r5, r4
 800c912:	694c      	ldr	r4, [r1, #20]
 800c914:	4325      	orrs	r5, r4
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800c916:	6a0c      	ldr	r4, [r1, #32]
                 pTxHeader->FDFormat |
 800c918:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));
 800c91c:	68cc      	ldr	r4, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800c91e:	ea45 4504 	orr.w	r5, r5, r4, lsl #16

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800c922:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800c924:	fb04 f303 	mul.w	r3, r4, r3
 800c928:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800c92c:	eb00 0483 	add.w	r4, r0, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800c930:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 800c934:	6065      	str	r5, [r4, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800c936:	68cb      	ldr	r3, [r1, #12]
 800c938:	4813      	ldr	r0, [pc, #76]	@ (800c988 <FDCAN_CopyMessageToRAM+0x90>)
 800c93a:	5cc3      	ldrb	r3, [r0, r3]
 800c93c:	b1cb      	cbz	r3, 800c972 <FDCAN_CopyMessageToRAM+0x7a>
 800c93e:	2000      	movs	r0, #0
 800c940:	4d11      	ldr	r5, [pc, #68]	@ (800c988 <FDCAN_CopyMessageToRAM+0x90>)
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800c942:	eb04 0c00 	add.w	ip, r4, r0
 800c946:	f892 e003 	ldrb.w	lr, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800c94a:	7893      	ldrb	r3, [r2, #2]
 800c94c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800c94e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 800c952:	f892 e000 	ldrb.w	lr, [r2]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800c956:	ea43 030e 	orr.w	r3, r3, lr
 800c95a:	f892 e001 	ldrb.w	lr, [r2, #1]
 800c95e:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800c962:	f8cc 3008 	str.w	r3, [ip, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800c966:	3004      	adds	r0, #4
 800c968:	3204      	adds	r2, #4
 800c96a:	68cb      	ldr	r3, [r1, #12]
 800c96c:	5ceb      	ldrb	r3, [r5, r3]
 800c96e:	4283      	cmp	r3, r0
 800c970:	d8e7      	bhi.n	800c942 <FDCAN_CopyMessageToRAM+0x4a>
    TxAddress++;
  }
}
 800c972:	bd70      	pop	{r4, r5, r6, pc}
                   pTxHeader->TxFrameType |
 800c974:	690c      	ldr	r4, [r1, #16]
 800c976:	680d      	ldr	r5, [r1, #0]
 800c978:	ea44 0605 	orr.w	r6, r4, r5
 800c97c:	688c      	ldr	r4, [r1, #8]
 800c97e:	4326      	orrs	r6, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800c980:	f046 4680 	orr.w	r6, r6, #1073741824	@ 0x40000000
 800c984:	e7c2      	b.n	800c90c <FDCAN_CopyMessageToRAM+0x14>
 800c986:	bf00      	nop
 800c988:	0802db04 	.word	0x0802db04

0800c98c <HAL_FDCAN_Init>:
{
 800c98c:	b530      	push	{r4, r5, lr}
 800c98e:	b095      	sub	sp, #84	@ 0x54
 800c990:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800c992:	224c      	movs	r2, #76	@ 0x4c
 800c994:	494f      	ldr	r1, [pc, #316]	@ (800cad4 <HAL_FDCAN_Init+0x148>)
 800c996:	a801      	add	r0, sp, #4
 800c998:	f01d f997 	bl	8029cca <memcpy>
  if (hfdcan == NULL)
 800c99c:	2c00      	cmp	r4, #0
 800c99e:	f000 8215 	beq.w	800cdcc <HAL_FDCAN_Init+0x440>
  if (hfdcan->Instance == FDCAN1)
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	4b4c      	ldr	r3, [pc, #304]	@ (800cad8 <HAL_FDCAN_Init+0x14c>)
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d020      	beq.n	800c9ec <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800c9aa:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 800c9ae:	b30b      	cbz	r3, 800c9f4 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800c9b0:	6822      	ldr	r2, [r4, #0]
 800c9b2:	6993      	ldr	r3, [r2, #24]
 800c9b4:	f023 0310 	bic.w	r3, r3, #16
 800c9b8:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 800c9ba:	f7fe ff81 	bl	800b8c0 <HAL_GetTick>
 800c9be:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	699a      	ldr	r2, [r3, #24]
 800c9c4:	f012 0f08 	tst.w	r2, #8
 800c9c8:	d01a      	beq.n	800ca00 <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800c9ca:	f7fe ff79 	bl	800b8c0 <HAL_GetTick>
 800c9ce:	1b40      	subs	r0, r0, r5
 800c9d0:	280a      	cmp	r0, #10
 800c9d2:	d9f5      	bls.n	800c9c0 <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800c9d4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800c9d8:	f043 0301 	orr.w	r3, r3, #1
 800c9dc:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 800c9e6:	2001      	movs	r0, #1
}
 800c9e8:	b015      	add	sp, #84	@ 0x54
 800c9ea:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800c9ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c9f0:	6063      	str	r3, [r4, #4]
 800c9f2:	e7da      	b.n	800c9aa <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 800c9f4:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f7f4 fbff 	bl	80011fc <HAL_FDCAN_MspInit>
 800c9fe:	e7d7      	b.n	800c9b0 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800ca00:	699a      	ldr	r2, [r3, #24]
 800ca02:	f042 0201 	orr.w	r2, r2, #1
 800ca06:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 800ca08:	f7fe ff5a 	bl	800b8c0 <HAL_GetTick>
 800ca0c:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	699a      	ldr	r2, [r3, #24]
 800ca12:	f012 0f01 	tst.w	r2, #1
 800ca16:	d10f      	bne.n	800ca38 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800ca18:	f7fe ff52 	bl	800b8c0 <HAL_GetTick>
 800ca1c:	1b40      	subs	r0, r0, r5
 800ca1e:	280a      	cmp	r0, #10
 800ca20:	d9f5      	bls.n	800ca0e <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800ca22:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800ca26:	f043 0301 	orr.w	r3, r3, #1
 800ca2a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 800ca34:	2001      	movs	r0, #1
 800ca36:	e7d7      	b.n	800c9e8 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800ca38:	699a      	ldr	r2, [r3, #24]
 800ca3a:	f042 0202 	orr.w	r2, r2, #2
 800ca3e:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800ca40:	7c23      	ldrb	r3, [r4, #16]
 800ca42:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800ca44:	6822      	ldr	r2, [r4, #0]
 800ca46:	6993      	ldr	r3, [r2, #24]
 800ca48:	bf0c      	ite	eq
 800ca4a:	f023 0340 	biceq.w	r3, r3, #64	@ 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800ca4e:	f043 0340 	orrne.w	r3, r3, #64	@ 0x40
 800ca52:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 800ca54:	7c63      	ldrb	r3, [r4, #17]
 800ca56:	2b01      	cmp	r3, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800ca58:	6822      	ldr	r2, [r4, #0]
 800ca5a:	6993      	ldr	r3, [r2, #24]
 800ca5c:	bf0c      	ite	eq
 800ca5e:	f443 4380 	orreq.w	r3, r3, #16384	@ 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800ca62:	f423 4380 	bicne.w	r3, r3, #16384	@ 0x4000
 800ca66:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 800ca68:	7ca3      	ldrb	r3, [r4, #18]
 800ca6a:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800ca6c:	6822      	ldr	r2, [r4, #0]
 800ca6e:	6993      	ldr	r3, [r2, #24]
 800ca70:	bf0c      	ite	eq
 800ca72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800ca76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca7a:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800ca7c:	6822      	ldr	r2, [r4, #0]
 800ca7e:	6993      	ldr	r3, [r2, #24]
 800ca80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca84:	68a1      	ldr	r1, [r4, #8]
 800ca86:	430b      	orrs	r3, r1
 800ca88:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800ca8a:	6822      	ldr	r2, [r4, #0]
 800ca8c:	6993      	ldr	r3, [r2, #24]
 800ca8e:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 800ca92:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800ca94:	6822      	ldr	r2, [r4, #0]
 800ca96:	6913      	ldr	r3, [r2, #16]
 800ca98:	f023 0310 	bic.w	r3, r3, #16
 800ca9c:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800ca9e:	68e3      	ldr	r3, [r4, #12]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d01b      	beq.n	800cadc <HAL_FDCAN_Init+0x150>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800caa4:	b1fb      	cbz	r3, 800cae6 <HAL_FDCAN_Init+0x15a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	f000 8166 	beq.w	800cd78 <HAL_FDCAN_Init+0x3ec>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800caac:	6822      	ldr	r2, [r4, #0]
 800caae:	6993      	ldr	r3, [r2, #24]
 800cab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cab4:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800cab6:	6822      	ldr	r2, [r4, #0]
 800cab8:	6913      	ldr	r3, [r2, #16]
 800caba:	f043 0310 	orr.w	r3, r3, #16
 800cabe:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800cac0:	68e3      	ldr	r3, [r4, #12]
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d10f      	bne.n	800cae6 <HAL_FDCAN_Init+0x15a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800cac6:	6822      	ldr	r2, [r4, #0]
 800cac8:	6993      	ldr	r3, [r2, #24]
 800caca:	f043 0320 	orr.w	r3, r3, #32
 800cace:	6193      	str	r3, [r2, #24]
 800cad0:	e009      	b.n	800cae6 <HAL_FDCAN_Init+0x15a>
 800cad2:	bf00      	nop
 800cad4:	0802a650 	.word	0x0802a650
 800cad8:	4000a000 	.word	0x4000a000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800cadc:	6822      	ldr	r2, [r4, #0]
 800cade:	6993      	ldr	r3, [r2, #24]
 800cae0:	f043 0304 	orr.w	r3, r3, #4
 800cae4:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800cae6:	6822      	ldr	r2, [r4, #0]
 800cae8:	69a3      	ldr	r3, [r4, #24]
 800caea:	1e59      	subs	r1, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800caec:	69e3      	ldr	r3, [r4, #28]
 800caee:	3b01      	subs	r3, #1
 800caf0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800caf2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800caf6:	6a21      	ldr	r1, [r4, #32]
 800caf8:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800cafa:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800cafc:	6961      	ldr	r1, [r4, #20]
 800cafe:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800cb00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800cb04:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800cb06:	68a3      	ldr	r3, [r4, #8]
 800cb08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb0c:	f000 813a 	beq.w	800cd84 <HAL_FDCAN_Init+0x3f8>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800cb10:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800cb12:	b133      	cbz	r3, 800cb22 <HAL_FDCAN_Init+0x196>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800cb14:	6822      	ldr	r2, [r4, #0]
 800cb16:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800cb1a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800cb1c:	430b      	orrs	r3, r1
 800cb1e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800cb22:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800cb24:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800cb26:	42d3      	cmn	r3, r2
 800cb28:	d00d      	beq.n	800cb46 <HAL_FDCAN_Init+0x1ba>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800cb2a:	6821      	ldr	r1, [r4, #0]
 800cb2c:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 800cb30:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800cb32:	a814      	add	r0, sp, #80	@ 0x50
 800cb34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb38:	f023 0307 	bic.w	r3, r3, #7
 800cb3c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800cb46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb48:	b16b      	cbz	r3, 800cb66 <HAL_FDCAN_Init+0x1da>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800cb4a:	6821      	ldr	r1, [r4, #0]
 800cb4c:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 800cb50:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800cb52:	a814      	add	r0, sp, #80	@ 0x50
 800cb54:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb58:	f023 0307 	bic.w	r3, r3, #7
 800cb5c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800cb66:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800cb68:	b173      	cbz	r3, 800cb88 <HAL_FDCAN_Init+0x1fc>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800cb6a:	6821      	ldr	r1, [r4, #0]
 800cb6c:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 800cb70:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800cb72:	a814      	add	r0, sp, #80	@ 0x50
 800cb74:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb78:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800cb7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb80:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800cb84:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800cb88:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800cb8a:	b173      	cbz	r3, 800cbaa <HAL_FDCAN_Init+0x21e>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800cb8c:	6821      	ldr	r1, [r4, #0]
 800cb8e:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 800cb92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb94:	a814      	add	r0, sp, #80	@ 0x50
 800cb96:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb9a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800cb9e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800cba2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cba6:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 800cbaa:	6822      	ldr	r2, [r4, #0]
 800cbac:	4b88      	ldr	r3, [pc, #544]	@ (800cdd0 <HAL_FDCAN_Init+0x444>)
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	f000 80f9 	beq.w	800cda6 <HAL_FDCAN_Init+0x41a>
  hfdcan->LatestTxFifoQRequest = 0U;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800cbba:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  StartAddress = hfdcan->Init.MessageRAMOffset;
 800cbc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800cbc6:	6820      	ldr	r0, [r4, #0]
 800cbc8:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800cbcc:	4a81      	ldr	r2, [pc, #516]	@ (800cdd4 <HAL_FDCAN_Init+0x448>)
 800cbce:	4011      	ands	r1, r2
 800cbd0:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800cbd4:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800cbd8:	6820      	ldr	r0, [r4, #0]
 800cbda:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800cbde:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800cbe0:	f421 017f 	bic.w	r1, r1, #16711680	@ 0xff0000
 800cbe4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800cbe8:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800cbec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cbee:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800cbf0:	6820      	ldr	r0, [r4, #0]
 800cbf2:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800cbf6:	4011      	ands	r1, r2
 800cbf8:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800cbfc:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800cc00:	6820      	ldr	r0, [r4, #0]
 800cc02:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800cc06:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800cc08:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 800cc0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800cc10:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800cc14:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800cc16:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800cc1a:	6820      	ldr	r0, [r4, #0]
 800cc1c:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 800cc20:	4011      	ands	r1, r2
 800cc22:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800cc26:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800cc2a:	6820      	ldr	r0, [r4, #0]
 800cc2c:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 800cc30:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cc32:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 800cc36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800cc3a:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800cc3e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800cc40:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800cc42:	fb00 3301 	mla	r3, r0, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800cc46:	6820      	ldr	r0, [r4, #0]
 800cc48:	f8d0 10b0 	ldr.w	r1, [r0, #176]	@ 0xb0
 800cc4c:	4011      	ands	r1, r2
 800cc4e:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800cc52:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800cc56:	6820      	ldr	r0, [r4, #0]
 800cc58:	f8d0 10b0 	ldr.w	r1, [r0, #176]	@ 0xb0
 800cc5c:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800cc5e:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 800cc62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800cc66:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800cc6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cc6c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800cc6e:	fb00 3301 	mla	r3, r0, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800cc72:	6820      	ldr	r0, [r4, #0]
 800cc74:	f8d0 10ac 	ldr.w	r1, [r0, #172]	@ 0xac
 800cc78:	4011      	ands	r1, r2
 800cc7a:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800cc7e:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800cc82:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800cc84:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800cc86:	fb00 3301 	mla	r3, r0, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800cc8a:	6820      	ldr	r0, [r4, #0]
 800cc8c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	@ 0xf0
 800cc90:	4011      	ands	r1, r2
 800cc92:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800cc96:	f8c0 10f0 	str.w	r1, [r0, #240]	@ 0xf0
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800cc9a:	6820      	ldr	r0, [r4, #0]
 800cc9c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	@ 0xf0
 800cca0:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800cca2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 800cca6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800ccaa:	f8c0 10f0 	str.w	r1, [r0, #240]	@ 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800ccae:	6825      	ldr	r5, [r4, #0]
 800ccb0:	f8d5 10c0 	ldr.w	r1, [r5, #192]	@ 0xc0
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800ccb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccb6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800ccba:	ea01 0302 	and.w	r3, r1, r2
 800ccbe:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800ccc2:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800ccc6:	6822      	ldr	r2, [r4, #0]
 800ccc8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800cccc:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800ccce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800ccd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ccd6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800ccda:	6822      	ldr	r2, [r4, #0]
 800ccdc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800cce0:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800cce2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800cce6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ccea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800ccee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ccf0:	4a39      	ldr	r2, [pc, #228]	@ (800cdd8 <HAL_FDCAN_Init+0x44c>)
 800ccf2:	441a      	add	r2, r3
 800ccf4:	0092      	lsls	r2, r2, #2
 800ccf6:	66e2      	str	r2, [r4, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800ccf8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ccfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ccfe:	6723      	str	r3, [r4, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800cd00:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800cd02:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cd06:	6763      	str	r3, [r4, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800cd08:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800cd0a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800cd0c:	fb00 f101 	mul.w	r1, r0, r1
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800cd10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd14:	67a3      	str	r3, [r4, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800cd16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cd18:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800cd1a:	fb00 f101 	mul.w	r1, r0, r1
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800cd1e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd22:	67e3      	str	r3, [r4, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800cd24:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800cd26:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800cd28:	fb00 f101 	mul.w	r1, r0, r1
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800cd2c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd30:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800cd34:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800cd36:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cd3a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800cd3e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800cd40:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800cd42:	fb01 f000 	mul.w	r0, r1, r0
 800cd46:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800cd4a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800cd4e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800cd50:	fb00 f101 	mul.w	r1, r0, r1
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800cd54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd58:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800cd5c:	491f      	ldr	r1, [pc, #124]	@ (800cddc <HAL_FDCAN_Init+0x450>)
 800cd5e:	428b      	cmp	r3, r1
 800cd60:	d829      	bhi.n	800cdb6 <HAL_FDCAN_Init+0x42a>
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d225      	bcs.n	800cdb2 <HAL_FDCAN_Init+0x426>
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800cd66:	2100      	movs	r1, #0
 800cd68:	f842 1b04 	str.w	r1, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800cd6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d3f9      	bcc.n	800cd68 <HAL_FDCAN_Init+0x3dc>
  return HAL_OK;
 800cd74:	2000      	movs	r0, #0
 800cd76:	e637      	b.n	800c9e8 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800cd78:	6822      	ldr	r2, [r4, #0]
 800cd7a:	6993      	ldr	r3, [r2, #24]
 800cd7c:	f043 0320 	orr.w	r3, r3, #32
 800cd80:	6193      	str	r3, [r2, #24]
 800cd82:	e6b0      	b.n	800cae6 <HAL_FDCAN_Init+0x15a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800cd84:	6822      	ldr	r2, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800cd86:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cd88:	1e59      	subs	r1, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800cd8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800cd90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800cd94:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800cd96:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800cd98:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800cd9a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cd9c:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800cd9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800cda2:	60d3      	str	r3, [r2, #12]
 800cda4:	e6b4      	b.n	800cb10 <HAL_FDCAN_Init+0x184>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800cda6:	6862      	ldr	r2, [r4, #4]
 800cda8:	6893      	ldr	r3, [r2, #8]
 800cdaa:	f023 0303 	bic.w	r3, r3, #3
 800cdae:	6093      	str	r3, [r2, #8]
 800cdb0:	e700      	b.n	800cbb4 <HAL_FDCAN_Init+0x228>
  return HAL_OK;
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	e618      	b.n	800c9e8 <HAL_FDCAN_Init+0x5c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800cdb6:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800cdba:	f043 0320 	orr.w	r3, r3, #32
 800cdbe:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    return HAL_ERROR;
 800cdc8:	2001      	movs	r0, #1
 800cdca:	e60d      	b.n	800c9e8 <HAL_FDCAN_Init+0x5c>
    return HAL_ERROR;
 800cdcc:	2001      	movs	r0, #1
 800cdce:	e60b      	b.n	800c9e8 <HAL_FDCAN_Init+0x5c>
 800cdd0:	4000a000 	.word	0x4000a000
 800cdd4:	ffff0003 	.word	0xffff0003
 800cdd8:	10002b00 	.word	0x10002b00
 800cddc:	4000d3fc 	.word	0x4000d3fc

0800cde0 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800cde0:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d007      	beq.n	800cdfa <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800cdea:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800cdee:	f043 0304 	orr.w	r3, r3, #4
 800cdf2:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 800cdf6:	2001      	movs	r0, #1
}
 800cdf8:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800ce00:	6802      	ldr	r2, [r0, #0]
 800ce02:	6993      	ldr	r3, [r2, #24]
 800ce04:	f023 0301 	bic.w	r3, r3, #1
 800ce08:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_OK;
 800ce10:	4618      	mov	r0, r3
 800ce12:	4770      	bx	lr

0800ce14 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800ce18:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b02      	cmp	r3, #2
 800ce20:	d12b      	bne.n	800ce7a <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800ce22:	6803      	ldr	r3, [r0, #0]
 800ce24:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ce28:	f010 5f7c 	tst.w	r0, #1056964608	@ 0x3f000000
 800ce2c:	d00c      	beq.n	800ce48 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800ce2e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce32:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 800ce36:	d00f      	beq.n	800ce58 <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800ce38:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800ce3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ce40:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 800ce44:	2001      	movs	r0, #1
 800ce46:	e01f      	b.n	800ce88 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800ce48:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800ce4c:	f043 0320 	orr.w	r3, r3, #32
 800ce50:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 800ce54:	2001      	movs	r0, #1
 800ce56:	e017      	b.n	800ce88 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800ce58:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 800ce5c:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800ce60:	462b      	mov	r3, r5
 800ce62:	4620      	mov	r0, r4
 800ce64:	f7ff fd48 	bl	800c8f8 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	40ab      	lsls	r3, r5
 800ce6e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800ce72:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    return HAL_OK;
 800ce76:	2000      	movs	r0, #0
 800ce78:	e006      	b.n	800ce88 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800ce7a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800ce7e:	f043 0308 	orr.w	r3, r3, #8
 800ce82:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 800ce86:	2001      	movs	r0, #1
}
 800ce88:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ce8c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ce8c:	680b      	ldr	r3, [r1, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f000 80f9 	beq.w	800d086 <HAL_GPIO_Init+0x1fa>
{
 800ce94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce98:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ce9a:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 800ce9e:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cea0:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cea2:	2403      	movs	r4, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cea4:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cea8:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
 800ceac:	e050      	b.n	800cf50 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR;
 800ceae:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ceb0:	fa04 fa0c 	lsl.w	sl, r4, ip
 800ceb4:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ceb8:	68cb      	ldr	r3, [r1, #12]
 800ceba:	fa03 f30c 	lsl.w	r3, r3, ip
 800cebe:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800cec2:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 800cec4:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cec6:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ceca:	684b      	ldr	r3, [r1, #4]
 800cecc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ced0:	4093      	lsls	r3, r2
 800ced2:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 800ced4:	6043      	str	r3, [r0, #4]
 800ced6:	e046      	b.n	800cf66 <HAL_GPIO_Init+0xda>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ced8:	2300      	movs	r3, #0
 800ceda:	fa03 f30b 	lsl.w	r3, r3, fp
 800cede:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cee2:	60bb      	str	r3, [r7, #8]
        temp = EXTI->RTSR1;
 800cee4:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 800cee8:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ceec:	684e      	ldr	r6, [r1, #4]
 800ceee:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 800cef2:	bf0c      	ite	eq
 800cef4:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800cef6:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 800cefa:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->FTSR1;
 800cefe:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cf02:	684e      	ldr	r6, [r1, #4]
 800cf04:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 800cf08:	bf0c      	ite	eq
 800cf0a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800cf0c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 800cf10:	f8ce 3004 	str.w	r3, [lr, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cf14:	f8de 3084 	ldr.w	r3, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cf18:	684e      	ldr	r6, [r1, #4]
 800cf1a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 800cf1e:	bf0c      	ite	eq
 800cf20:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800cf22:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800cf26:	f8ce 3084 	str.w	r3, [lr, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cf2a:	f8de 3080 	ldr.w	r3, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cf2e:	684e      	ldr	r6, [r1, #4]
 800cf30:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~(iocurrent);
 800cf34:	bf0c      	ite	eq
 800cf36:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 800cf38:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800cf3c:	f8ce 7080 	str.w	r7, [lr, #128]	@ 0x80
      }
    }

    position++;
 800cf40:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cf42:	680b      	ldr	r3, [r1, #0]
 800cf44:	f10c 0c02 	add.w	ip, ip, #2
 800cf48:	fa33 f702 	lsrs.w	r7, r3, r2
 800cf4c:	f000 8098 	beq.w	800d080 <HAL_GPIO_Init+0x1f4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cf50:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00U)
 800cf54:	ea17 0903 	ands.w	r9, r7, r3
 800cf58:	d0f2      	beq.n	800cf40 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cf5a:	684b      	ldr	r3, [r1, #4]
 800cf5c:	f003 0303 	and.w	r3, r3, #3
 800cf60:	3b01      	subs	r3, #1
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d9a3      	bls.n	800ceae <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cf66:	684b      	ldr	r3, [r1, #4]
 800cf68:	f003 0303 	and.w	r3, r3, #3
 800cf6c:	2b03      	cmp	r3, #3
 800cf6e:	d020      	beq.n	800cfb2 <HAL_GPIO_Init+0x126>
      temp = GPIOx->PUPDR;
 800cf70:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cf72:	fa04 f30c 	lsl.w	r3, r4, ip
 800cf76:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cf7a:	688b      	ldr	r3, [r1, #8]
 800cf7c:	fa03 f30c 	lsl.w	r3, r3, ip
 800cf80:	433b      	orrs	r3, r7
      GPIOx->PUPDR = temp;
 800cf82:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cf84:	684b      	ldr	r3, [r1, #4]
 800cf86:	f003 0303 	and.w	r3, r3, #3
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d111      	bne.n	800cfb2 <HAL_GPIO_Init+0x126>
        temp = GPIOx->AFR[position >> 3U];
 800cf8e:	08d7      	lsrs	r7, r2, #3
 800cf90:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800cf94:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cf96:	f002 0b07 	and.w	fp, r2, #7
 800cf9a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800cf9e:	fa08 fa0b 	lsl.w	sl, r8, fp
 800cfa2:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cfa6:	690b      	ldr	r3, [r1, #16]
 800cfa8:	fa03 f30b 	lsl.w	r3, r3, fp
 800cfac:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 800cfb0:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 800cfb2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cfb4:	fa04 f30c 	lsl.w	r3, r4, ip
 800cfb8:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cfbc:	684b      	ldr	r3, [r1, #4]
 800cfbe:	f003 0303 	and.w	r3, r3, #3
 800cfc2:	fa03 f30c 	lsl.w	r3, r3, ip
 800cfc6:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800cfc8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cfca:	684b      	ldr	r3, [r1, #4]
 800cfcc:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 800cfd0:	d0b6      	beq.n	800cf40 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cfd2:	4e2d      	ldr	r6, [pc, #180]	@ (800d088 <HAL_GPIO_Init+0x1fc>)
 800cfd4:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 800cfd8:	f043 0302 	orr.w	r3, r3, #2
 800cfdc:	f8c6 30f4 	str.w	r3, [r6, #244]	@ 0xf4
 800cfe0:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 800cfe4:	f003 0302 	and.w	r3, r3, #2
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800cfec:	f022 0703 	bic.w	r7, r2, #3
 800cff0:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 800cff4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800cff8:	68bb      	ldr	r3, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cffa:	f002 0b03 	and.w	fp, r2, #3
 800cffe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800d002:	fa08 fa0b 	lsl.w	sl, r8, fp
 800d006:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d00a:	4b20      	ldr	r3, [pc, #128]	@ (800d08c <HAL_GPIO_Init+0x200>)
 800d00c:	4298      	cmp	r0, r3
 800d00e:	f43f af63 	beq.w	800ced8 <HAL_GPIO_Init+0x4c>
 800d012:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d016:	4298      	cmp	r0, r3
 800d018:	d022      	beq.n	800d060 <HAL_GPIO_Init+0x1d4>
 800d01a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d01e:	4298      	cmp	r0, r3
 800d020:	d020      	beq.n	800d064 <HAL_GPIO_Init+0x1d8>
 800d022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d026:	4298      	cmp	r0, r3
 800d028:	d01e      	beq.n	800d068 <HAL_GPIO_Init+0x1dc>
 800d02a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d02e:	4298      	cmp	r0, r3
 800d030:	d01c      	beq.n	800d06c <HAL_GPIO_Init+0x1e0>
 800d032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d036:	4298      	cmp	r0, r3
 800d038:	d01a      	beq.n	800d070 <HAL_GPIO_Init+0x1e4>
 800d03a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d03e:	4298      	cmp	r0, r3
 800d040:	d018      	beq.n	800d074 <HAL_GPIO_Init+0x1e8>
 800d042:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d046:	4298      	cmp	r0, r3
 800d048:	d016      	beq.n	800d078 <HAL_GPIO_Init+0x1ec>
 800d04a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d04e:	4298      	cmp	r0, r3
 800d050:	d014      	beq.n	800d07c <HAL_GPIO_Init+0x1f0>
 800d052:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d056:	4298      	cmp	r0, r3
 800d058:	bf14      	ite	ne
 800d05a:	230a      	movne	r3, #10
 800d05c:	2309      	moveq	r3, #9
 800d05e:	e73c      	b.n	800ceda <HAL_GPIO_Init+0x4e>
 800d060:	2301      	movs	r3, #1
 800d062:	e73a      	b.n	800ceda <HAL_GPIO_Init+0x4e>
 800d064:	2302      	movs	r3, #2
 800d066:	e738      	b.n	800ceda <HAL_GPIO_Init+0x4e>
 800d068:	2303      	movs	r3, #3
 800d06a:	e736      	b.n	800ceda <HAL_GPIO_Init+0x4e>
 800d06c:	2304      	movs	r3, #4
 800d06e:	e734      	b.n	800ceda <HAL_GPIO_Init+0x4e>
 800d070:	2305      	movs	r3, #5
 800d072:	e732      	b.n	800ceda <HAL_GPIO_Init+0x4e>
 800d074:	2306      	movs	r3, #6
 800d076:	e730      	b.n	800ceda <HAL_GPIO_Init+0x4e>
 800d078:	2307      	movs	r3, #7
 800d07a:	e72e      	b.n	800ceda <HAL_GPIO_Init+0x4e>
 800d07c:	2308      	movs	r3, #8
 800d07e:	e72c      	b.n	800ceda <HAL_GPIO_Init+0x4e>
  }
}
 800d080:	b003      	add	sp, #12
 800d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d086:	4770      	bx	lr
 800d088:	58024400 	.word	0x58024400
 800d08c:	58020000 	.word	0x58020000

0800d090 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d090:	2900      	cmp	r1, #0
 800d092:	f000 80a9 	beq.w	800d1e8 <HAL_GPIO_DeInit+0x158>
{
 800d096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09a:	b083      	sub	sp, #12
 800d09c:	468c      	mov	ip, r1
  uint32_t position = 0x00U;
 800d09e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d0a0:	f04f 0901 	mov.w	r9, #1
 800d0a4:	f8df b148 	ldr.w	fp, [pc, #328]	@ 800d1f0 <HAL_GPIO_DeInit+0x160>
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d0a8:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d0ac:	f04f 0a03 	mov.w	sl, #3
 800d0b0:	e028      	b.n	800d104 <HAL_GPIO_DeInit+0x74>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d0b2:	f04f 0e00 	mov.w	lr, #0
 800d0b6:	fa0e f101 	lsl.w	r1, lr, r1
 800d0ba:	9d01      	ldr	r5, [sp, #4]
 800d0bc:	42a9      	cmp	r1, r5
 800d0be:	d075      	beq.n	800d1ac <HAL_GPIO_DeInit+0x11c>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d0c0:	6804      	ldr	r4, [r0, #0]
 800d0c2:	0059      	lsls	r1, r3, #1
 800d0c4:	fa0a f101 	lsl.w	r1, sl, r1
 800d0c8:	430c      	orrs	r4, r1
 800d0ca:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d0cc:	08dd      	lsrs	r5, r3, #3
 800d0ce:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800d0d2:	6a2e      	ldr	r6, [r5, #32]
 800d0d4:	f003 0407 	and.w	r4, r3, #7
 800d0d8:	00a4      	lsls	r4, r4, #2
 800d0da:	fa08 f404 	lsl.w	r4, r8, r4
 800d0de:	ea26 0404 	bic.w	r4, r6, r4
 800d0e2:	622c      	str	r4, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d0e4:	68c4      	ldr	r4, [r0, #12]
 800d0e6:	ea24 0401 	bic.w	r4, r4, r1
 800d0ea:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d0ec:	6844      	ldr	r4, [r0, #4]
 800d0ee:	ea24 0202 	bic.w	r2, r4, r2
 800d0f2:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d0f4:	6882      	ldr	r2, [r0, #8]
 800d0f6:	ea22 0201 	bic.w	r2, r2, r1
 800d0fa:	6082      	str	r2, [r0, #8]
    }

    position++;
 800d0fc:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800d0fe:	fa3c f203 	lsrs.w	r2, ip, r3
 800d102:	d06e      	beq.n	800d1e2 <HAL_GPIO_DeInit+0x152>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d104:	fa09 f203 	lsl.w	r2, r9, r3
    if (iocurrent != 0x00U)
 800d108:	ea12 060c 	ands.w	r6, r2, ip
 800d10c:	d0f6      	beq.n	800d0fc <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d10e:	f023 0403 	bic.w	r4, r3, #3
 800d112:	445c      	add	r4, fp
 800d114:	68a5      	ldr	r5, [r4, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d116:	f003 0103 	and.w	r1, r3, #3
 800d11a:	0089      	lsls	r1, r1, #2
 800d11c:	fa08 f701 	lsl.w	r7, r8, r1
 800d120:	403d      	ands	r5, r7
 800d122:	9501      	str	r5, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d124:	4d31      	ldr	r5, [pc, #196]	@ (800d1ec <HAL_GPIO_DeInit+0x15c>)
 800d126:	42a8      	cmp	r0, r5
 800d128:	d0c3      	beq.n	800d0b2 <HAL_GPIO_DeInit+0x22>
 800d12a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800d12e:	42a8      	cmp	r0, r5
 800d130:	d024      	beq.n	800d17c <HAL_GPIO_DeInit+0xec>
 800d132:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800d136:	42a8      	cmp	r0, r5
 800d138:	d023      	beq.n	800d182 <HAL_GPIO_DeInit+0xf2>
 800d13a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800d13e:	42a8      	cmp	r0, r5
 800d140:	d022      	beq.n	800d188 <HAL_GPIO_DeInit+0xf8>
 800d142:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800d146:	42a8      	cmp	r0, r5
 800d148:	d021      	beq.n	800d18e <HAL_GPIO_DeInit+0xfe>
 800d14a:	f8df e0a8 	ldr.w	lr, [pc, #168]	@ 800d1f4 <HAL_GPIO_DeInit+0x164>
 800d14e:	4570      	cmp	r0, lr
 800d150:	d020      	beq.n	800d194 <HAL_GPIO_DeInit+0x104>
 800d152:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 800d156:	4570      	cmp	r0, lr
 800d158:	d01f      	beq.n	800d19a <HAL_GPIO_DeInit+0x10a>
 800d15a:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 800d15e:	4570      	cmp	r0, lr
 800d160:	d01e      	beq.n	800d1a0 <HAL_GPIO_DeInit+0x110>
 800d162:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 800d166:	4570      	cmp	r0, lr
 800d168:	d01d      	beq.n	800d1a6 <HAL_GPIO_DeInit+0x116>
 800d16a:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 800d16e:	4570      	cmp	r0, lr
 800d170:	bf14      	ite	ne
 800d172:	f04f 0e0a 	movne.w	lr, #10
 800d176:	f04f 0e09 	moveq.w	lr, #9
 800d17a:	e79c      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
 800d17c:	f04f 0e01 	mov.w	lr, #1
 800d180:	e799      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
 800d182:	f04f 0e02 	mov.w	lr, #2
 800d186:	e796      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
 800d188:	f04f 0e03 	mov.w	lr, #3
 800d18c:	e793      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
 800d18e:	f04f 0e04 	mov.w	lr, #4
 800d192:	e790      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
 800d194:	f04f 0e05 	mov.w	lr, #5
 800d198:	e78d      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
 800d19a:	f04f 0e06 	mov.w	lr, #6
 800d19e:	e78a      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
 800d1a0:	f04f 0e07 	mov.w	lr, #7
 800d1a4:	e787      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
 800d1a6:	f04f 0e08 	mov.w	lr, #8
 800d1aa:	e784      	b.n	800d0b6 <HAL_GPIO_DeInit+0x26>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d1ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1b0:	f8d1 5080 	ldr.w	r5, [r1, #128]	@ 0x80
 800d1b4:	ea25 0506 	bic.w	r5, r5, r6
 800d1b8:	f8c1 5080 	str.w	r5, [r1, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d1bc:	f8d1 5084 	ldr.w	r5, [r1, #132]	@ 0x84
 800d1c0:	ea25 0506 	bic.w	r5, r5, r6
 800d1c4:	f8c1 5084 	str.w	r5, [r1, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800d1c8:	684d      	ldr	r5, [r1, #4]
 800d1ca:	ea25 0506 	bic.w	r5, r5, r6
 800d1ce:	604d      	str	r5, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d1d0:	680d      	ldr	r5, [r1, #0]
 800d1d2:	ea25 0506 	bic.w	r5, r5, r6
 800d1d6:	600d      	str	r5, [r1, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d1d8:	68a1      	ldr	r1, [r4, #8]
 800d1da:	ea21 0107 	bic.w	r1, r1, r7
 800d1de:	60a1      	str	r1, [r4, #8]
 800d1e0:	e76e      	b.n	800d0c0 <HAL_GPIO_DeInit+0x30>
  }
}
 800d1e2:	b003      	add	sp, #12
 800d1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	58020000 	.word	0x58020000
 800d1f0:	58000400 	.word	0x58000400
 800d1f4:	58021400 	.word	0x58021400

0800d1f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d1f8:	6903      	ldr	r3, [r0, #16]
 800d1fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800d1fc:	bf14      	ite	ne
 800d1fe:	2001      	movne	r0, #1
 800d200:	2000      	moveq	r0, #0
 800d202:	4770      	bx	lr

0800d204 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d204:	b10a      	cbz	r2, 800d20a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d206:	6181      	str	r1, [r0, #24]
 800d208:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d20a:	0409      	lsls	r1, r1, #16
 800d20c:	6181      	str	r1, [r0, #24]
  }
}
 800d20e:	4770      	bx	lr

0800d210 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d210:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d212:	ea01 0203 	and.w	r2, r1, r3
 800d216:	ea21 0103 	bic.w	r1, r1, r3
 800d21a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d21e:	6181      	str	r1, [r0, #24]
}
 800d220:	4770      	bx	lr
	...

0800d224 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800d224:	3020      	adds	r0, #32
 800d226:	4b04      	ldr	r3, [pc, #16]	@ (800d238 <HAL_HSEM_FastTake+0x14>)
 800d228:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800d22c:	4b03      	ldr	r3, [pc, #12]	@ (800d23c <HAL_HSEM_FastTake+0x18>)
 800d22e:	1ac0      	subs	r0, r0, r3
 800d230:	bf18      	it	ne
 800d232:	2001      	movne	r0, #1
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	58026400 	.word	0x58026400
 800d23c:	80000300 	.word	0x80000300

0800d240 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800d240:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800d244:	4b01      	ldr	r3, [pc, #4]	@ (800d24c <HAL_HSEM_Release+0xc>)
 800d246:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800d24a:	4770      	bx	lr
 800d24c:	58026400 	.word	0x58026400

0800d250 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d250:	6803      	ldr	r3, [r0, #0]
 800d252:	699a      	ldr	r2, [r3, #24]
 800d254:	f012 0f02 	tst.w	r2, #2
 800d258:	d001      	beq.n	800d25e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d25a:	2200      	movs	r2, #0
 800d25c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d25e:	6803      	ldr	r3, [r0, #0]
 800d260:	699a      	ldr	r2, [r3, #24]
 800d262:	f012 0f01 	tst.w	r2, #1
 800d266:	d103      	bne.n	800d270 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d268:	699a      	ldr	r2, [r3, #24]
 800d26a:	f042 0201 	orr.w	r2, r2, #1
 800d26e:	619a      	str	r2, [r3, #24]
  }
}
 800d270:	4770      	bx	lr

0800d272 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d272:	b430      	push	{r4, r5}
 800d274:	9c02      	ldr	r4, [sp, #8]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d276:	6805      	ldr	r5, [r0, #0]
 800d278:	6868      	ldr	r0, [r5, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d27a:	4323      	orrs	r3, r4
 800d27c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d280:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d284:	430b      	orrs	r3, r1
 800d286:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800d28a:	0d64      	lsrs	r4, r4, #21
 800d28c:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800d290:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 800d294:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 800d298:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 800d29c:	f044 0403 	orr.w	r4, r4, #3
 800d2a0:	ea20 0004 	bic.w	r0, r0, r4
 800d2a4:	4303      	orrs	r3, r0
 800d2a6:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d2a8:	bc30      	pop	{r4, r5}
 800d2aa:	4770      	bx	lr

0800d2ac <I2C_IsErrorOccurred>:
{
 800d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ae:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800d2b0:	6803      	ldr	r3, [r0, #0]
 800d2b2:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d2b4:	f016 0610 	ands.w	r6, r6, #16
 800d2b8:	d079      	beq.n	800d3ae <I2C_IsErrorOccurred+0x102>
 800d2ba:	460d      	mov	r5, r1
 800d2bc:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2be:	2210      	movs	r2, #16
 800d2c0:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800d2c2:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d2c4:	4631      	mov	r1, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d2c6:	6820      	ldr	r0, [r4, #0]
 800d2c8:	6983      	ldr	r3, [r0, #24]
 800d2ca:	f013 0f20 	tst.w	r3, #32
 800d2ce:	d130      	bne.n	800d332 <I2C_IsErrorOccurred+0x86>
 800d2d0:	bb79      	cbnz	r1, 800d332 <I2C_IsErrorOccurred+0x86>
      if (Timeout != HAL_MAX_DELAY)
 800d2d2:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d2d6:	d0f7      	beq.n	800d2c8 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d2d8:	f7fe faf2 	bl	800b8c0 <HAL_GetTick>
 800d2dc:	2100      	movs	r1, #0
 800d2de:	1bc0      	subs	r0, r0, r7
 800d2e0:	42a8      	cmp	r0, r5
 800d2e2:	d801      	bhi.n	800d2e8 <I2C_IsErrorOccurred+0x3c>
 800d2e4:	2d00      	cmp	r5, #0
 800d2e6:	d1ee      	bne.n	800d2c6 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d2e8:	6822      	ldr	r2, [r4, #0]
 800d2ea:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 800d2ec:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800d2f0:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d2f2:	6991      	ldr	r1, [r2, #24]
 800d2f4:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800d2f8:	d004      	beq.n	800d304 <I2C_IsErrorOccurred+0x58>
              (tmp1 != I2C_CR2_STOP) && \
 800d2fa:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 800d2fe:	d101      	bne.n	800d304 <I2C_IsErrorOccurred+0x58>
 800d300:	2b20      	cmp	r3, #32
 800d302:	d10c      	bne.n	800d31e <I2C_IsErrorOccurred+0x72>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	699b      	ldr	r3, [r3, #24]
 800d308:	f013 0f20 	tst.w	r3, #32
 800d30c:	d10f      	bne.n	800d32e <I2C_IsErrorOccurred+0x82>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d30e:	f7fe fad7 	bl	800b8c0 <HAL_GetTick>
 800d312:	1bc0      	subs	r0, r0, r7
 800d314:	2819      	cmp	r0, #25
 800d316:	d9f5      	bls.n	800d304 <I2C_IsErrorOccurred+0x58>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d318:	2620      	movs	r6, #32
              status = HAL_ERROR;
 800d31a:	2101      	movs	r1, #1
 800d31c:	e7d3      	b.n	800d2c6 <I2C_IsErrorOccurred+0x1a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d31e:	6853      	ldr	r3, [r2, #4]
 800d320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d324:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 800d326:	f7fe facb 	bl	800b8c0 <HAL_GetTick>
 800d32a:	4607      	mov	r7, r0
 800d32c:	e7ea      	b.n	800d304 <I2C_IsErrorOccurred+0x58>
 800d32e:	2100      	movs	r1, #0
 800d330:	e7c9      	b.n	800d2c6 <I2C_IsErrorOccurred+0x1a>
    if (status == HAL_OK)
 800d332:	b909      	cbnz	r1, 800d338 <I2C_IsErrorOccurred+0x8c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d334:	2320      	movs	r3, #32
 800d336:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800d338:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800d33c:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800d33e:	6822      	ldr	r2, [r4, #0]
 800d340:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d342:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800d346:	d005      	beq.n	800d354 <I2C_IsErrorOccurred+0xa8>
    error_code |= HAL_I2C_ERROR_BERR;
 800d348:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d34c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d350:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800d352:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d354:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800d358:	d02b      	beq.n	800d3b2 <I2C_IsErrorOccurred+0x106>
    error_code |= HAL_I2C_ERROR_OVR;
 800d35a:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d35e:	6822      	ldr	r2, [r4, #0]
 800d360:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d364:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d366:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800d36a:	d005      	beq.n	800d378 <I2C_IsErrorOccurred+0xcc>
    error_code |= HAL_I2C_ERROR_ARLO;
 800d36c:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d370:	6823      	ldr	r3, [r4, #0]
 800d372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d376:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800d378:	4620      	mov	r0, r4
 800d37a:	f7ff ff69 	bl	800d250 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800d37e:	6822      	ldr	r2, [r4, #0]
 800d380:	6853      	ldr	r3, [r2, #4]
 800d382:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d386:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d38a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d38e:	f023 0301 	bic.w	r3, r3, #1
 800d392:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800d394:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d396:	4333      	orrs	r3, r6
 800d398:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d39a:	2320      	movs	r3, #32
 800d39c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800d3a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800d3aa:	2001      	movs	r0, #1
}
 800d3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	e7c5      	b.n	800d33e <I2C_IsErrorOccurred+0x92>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d3b2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800d3b6:	d1d9      	bne.n	800d36c <I2C_IsErrorOccurred+0xc0>
  if (status != HAL_OK)
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d0f7      	beq.n	800d3ac <I2C_IsErrorOccurred+0x100>
 800d3bc:	e7dc      	b.n	800d378 <I2C_IsErrorOccurred+0xcc>

0800d3be <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800d3be:	b570      	push	{r4, r5, r6, lr}
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	460d      	mov	r5, r1
 800d3c4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	699b      	ldr	r3, [r3, #24]
 800d3ca:	f013 0f02 	tst.w	r3, #2
 800d3ce:	d122      	bne.n	800d416 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	4629      	mov	r1, r5
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f7ff ff69 	bl	800d2ac <I2C_IsErrorOccurred>
 800d3da:	b9f0      	cbnz	r0, 800d41a <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800d3dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d3e0:	d0f1      	beq.n	800d3c6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3e2:	f7fe fa6d 	bl	800b8c0 <HAL_GetTick>
 800d3e6:	1b80      	subs	r0, r0, r6
 800d3e8:	42a8      	cmp	r0, r5
 800d3ea:	d801      	bhi.n	800d3f0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800d3ec:	2d00      	cmp	r5, #0
 800d3ee:	d1ea      	bne.n	800d3c6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	f013 0f02 	tst.w	r3, #2
 800d3f8:	d1e5      	bne.n	800d3c6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d3fc:	f043 0320 	orr.w	r3, r3, #32
 800d400:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d402:	2320      	movs	r3, #32
 800d404:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d408:	2300      	movs	r3, #0
 800d40a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800d40e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800d412:	2001      	movs	r0, #1
 800d414:	e000      	b.n	800d418 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 800d416:	2000      	movs	r0, #0
}
 800d418:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d41a:	2001      	movs	r0, #1
 800d41c:	e7fc      	b.n	800d418 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

0800d41e <I2C_WaitOnFlagUntilTimeout>:
{
 800d41e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d422:	4605      	mov	r5, r0
 800d424:	4688      	mov	r8, r1
 800d426:	4617      	mov	r7, r2
 800d428:	461e      	mov	r6, r3
 800d42a:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d42e:	682b      	ldr	r3, [r5, #0]
 800d430:	699c      	ldr	r4, [r3, #24]
 800d432:	ea38 0404 	bics.w	r4, r8, r4
 800d436:	bf0c      	ite	eq
 800d438:	2301      	moveq	r3, #1
 800d43a:	2300      	movne	r3, #0
 800d43c:	42bb      	cmp	r3, r7
 800d43e:	d127      	bne.n	800d490 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d440:	464a      	mov	r2, r9
 800d442:	4631      	mov	r1, r6
 800d444:	4628      	mov	r0, r5
 800d446:	f7ff ff31 	bl	800d2ac <I2C_IsErrorOccurred>
 800d44a:	bb20      	cbnz	r0, 800d496 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 800d44c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d450:	d0ed      	beq.n	800d42e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d452:	f7fe fa35 	bl	800b8c0 <HAL_GetTick>
 800d456:	eba0 0009 	sub.w	r0, r0, r9
 800d45a:	42b0      	cmp	r0, r6
 800d45c:	d801      	bhi.n	800d462 <I2C_WaitOnFlagUntilTimeout+0x44>
 800d45e:	2e00      	cmp	r6, #0
 800d460:	d1e5      	bne.n	800d42e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	ea38 0303 	bics.w	r3, r8, r3
 800d46a:	bf0c      	ite	eq
 800d46c:	2301      	moveq	r3, #1
 800d46e:	2300      	movne	r3, #0
 800d470:	42bb      	cmp	r3, r7
 800d472:	d1dc      	bne.n	800d42e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d474:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800d476:	f043 0320 	orr.w	r3, r3, #32
 800d47a:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d47c:	2320      	movs	r3, #32
 800d47e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d482:	2300      	movs	r3, #0
 800d484:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800d488:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800d48c:	2001      	movs	r0, #1
 800d48e:	e000      	b.n	800d492 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 800d490:	2000      	movs	r0, #0
}
 800d492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 800d496:	2001      	movs	r0, #1
 800d498:	e7fb      	b.n	800d492 <I2C_WaitOnFlagUntilTimeout+0x74>

0800d49a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49c:	4604      	mov	r4, r0
 800d49e:	460d      	mov	r5, r1
 800d4a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d4a2:	6803      	ldr	r3, [r0, #0]
 800d4a4:	699b      	ldr	r3, [r3, #24]
 800d4a6:	f013 0f20 	tst.w	r3, #32
 800d4aa:	d00b      	beq.n	800d4c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
  return HAL_OK;
 800d4ac:	2700      	movs	r7, #0
 800d4ae:	e027      	b.n	800d500 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d4b0:	6823      	ldr	r3, [r4, #0]
 800d4b2:	699b      	ldr	r3, [r3, #24]
 800d4b4:	f013 0f20 	tst.w	r3, #32
 800d4b8:	d013      	beq.n	800d4e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	699b      	ldr	r3, [r3, #24]
 800d4be:	f013 0f20 	tst.w	r3, #32
 800d4c2:	d11d      	bne.n	800d500 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4c4:	4632      	mov	r2, r6
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f7ff feef 	bl	800d2ac <I2C_IsErrorOccurred>
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	b9a8      	cbnz	r0, 800d4fe <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4d2:	f7fe f9f5 	bl	800b8c0 <HAL_GetTick>
 800d4d6:	1b80      	subs	r0, r0, r6
 800d4d8:	42a8      	cmp	r0, r5
 800d4da:	d8e9      	bhi.n	800d4b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 800d4dc:	2d00      	cmp	r5, #0
 800d4de:	d0e7      	beq.n	800d4b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 800d4e0:	e7eb      	b.n	800d4ba <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d4e4:	f043 0320 	orr.w	r3, r3, #32
 800d4e8:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d4ea:	2320      	movs	r3, #32
 800d4ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800d4f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800d4fa:	2701      	movs	r7, #1
 800d4fc:	e000      	b.n	800d500 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      return HAL_ERROR;
 800d4fe:	2701      	movs	r7, #1
}
 800d500:	4638      	mov	r0, r7
 800d502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d504 <HAL_I2C_MspInit>:
}
 800d504:	4770      	bx	lr
	...

0800d508 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d508:	2800      	cmp	r0, #0
 800d50a:	d055      	beq.n	800d5b8 <HAL_I2C_Init+0xb0>
{
 800d50c:	b510      	push	{r4, lr}
 800d50e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d510:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800d514:	2b00      	cmp	r3, #0
 800d516:	d04a      	beq.n	800d5ae <HAL_I2C_Init+0xa6>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d518:	2324      	movs	r3, #36	@ 0x24
 800d51a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d51e:	6822      	ldr	r2, [r4, #0]
 800d520:	6813      	ldr	r3, [r2, #0]
 800d522:	f023 0301 	bic.w	r3, r3, #1
 800d526:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d528:	6822      	ldr	r2, [r4, #0]
 800d52a:	6863      	ldr	r3, [r4, #4]
 800d52c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800d530:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d532:	6822      	ldr	r2, [r4, #0]
 800d534:	6893      	ldr	r3, [r2, #8]
 800d536:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d53a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d53c:	68e3      	ldr	r3, [r4, #12]
 800d53e:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d540:	6822      	ldr	r2, [r4, #0]
 800d542:	68a3      	ldr	r3, [r4, #8]
 800d544:	bf0c      	ite	eq
 800d546:	f443 4300 	orreq.w	r3, r3, #32768	@ 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d54a:	f443 4304 	orrne.w	r3, r3, #33792	@ 0x8400
 800d54e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d550:	68e3      	ldr	r3, [r4, #12]
 800d552:	2b02      	cmp	r3, #2
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d554:	6822      	ldr	r2, [r4, #0]
 800d556:	6853      	ldr	r3, [r2, #4]
 800d558:	bf0c      	ite	eq
 800d55a:	f443 6300 	orreq.w	r3, r3, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d55e:	f423 6300 	bicne.w	r3, r3, #2048	@ 0x800
 800d562:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d564:	6822      	ldr	r2, [r4, #0]
 800d566:	6851      	ldr	r1, [r2, #4]
 800d568:	4b14      	ldr	r3, [pc, #80]	@ (800d5bc <HAL_I2C_Init+0xb4>)
 800d56a:	430b      	orrs	r3, r1
 800d56c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d56e:	6822      	ldr	r2, [r4, #0]
 800d570:	68d3      	ldr	r3, [r2, #12]
 800d572:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d576:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d578:	6822      	ldr	r2, [r4, #0]
 800d57a:	6923      	ldr	r3, [r4, #16]
 800d57c:	6961      	ldr	r1, [r4, #20]
 800d57e:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d580:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d582:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d586:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d588:	6822      	ldr	r2, [r4, #0]
 800d58a:	69e3      	ldr	r3, [r4, #28]
 800d58c:	6a21      	ldr	r1, [r4, #32]
 800d58e:	430b      	orrs	r3, r1
 800d590:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d592:	6822      	ldr	r2, [r4, #0]
 800d594:	6813      	ldr	r3, [r2, #0]
 800d596:	f043 0301 	orr.w	r3, r3, #1
 800d59a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d59c:	2000      	movs	r0, #0
 800d59e:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d5a0:	2320      	movs	r3, #32
 800d5a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d5a6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5a8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800d5ac:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800d5ae:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800d5b2:	f7ff ffa7 	bl	800d504 <HAL_I2C_MspInit>
 800d5b6:	e7af      	b.n	800d518 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 800d5b8:	2001      	movs	r0, #1
}
 800d5ba:	4770      	bx	lr
 800d5bc:	02008000 	.word	0x02008000

0800d5c0 <HAL_I2C_MspDeInit>:
}
 800d5c0:	4770      	bx	lr

0800d5c2 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800d5c2:	b1a8      	cbz	r0, 800d5f0 <HAL_I2C_DeInit+0x2e>
{
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d5c8:	2324      	movs	r3, #36	@ 0x24
 800d5ca:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d5ce:	6802      	ldr	r2, [r0, #0]
 800d5d0:	6813      	ldr	r3, [r2, #0]
 800d5d2:	f023 0301 	bic.w	r3, r3, #1
 800d5d6:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800d5d8:	f7ff fff2 	bl	800d5c0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5dc:	2000      	movs	r0, #0
 800d5de:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800d5e0:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d5e4:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5e6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  __HAL_UNLOCK(hi2c);
 800d5ea:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800d5ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d5f0:	2001      	movs	r0, #1
}
 800d5f2:	4770      	bx	lr

0800d5f4 <HAL_I2C_Mem_Write>:
{
 800d5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800d600:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d602:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800d606:	b2c9      	uxtb	r1, r1
 800d608:	2920      	cmp	r1, #32
 800d60a:	f040 80e2 	bne.w	800d7d2 <HAL_I2C_Mem_Write+0x1de>
 800d60e:	4604      	mov	r4, r0
 800d610:	4690      	mov	r8, r2
 800d612:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800d614:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d616:	b1cb      	cbz	r3, 800d64c <HAL_I2C_Mem_Write+0x58>
 800d618:	f1ba 0f00 	cmp.w	sl, #0
 800d61c:	d016      	beq.n	800d64c <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 800d61e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d622:	2b01      	cmp	r3, #1
 800d624:	f000 80d9 	beq.w	800d7da <HAL_I2C_Mem_Write+0x1e6>
 800d628:	f04f 0b01 	mov.w	fp, #1
 800d62c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800d630:	f7fe f946 	bl	800b8c0 <HAL_GetTick>
 800d634:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d636:	9000      	str	r0, [sp, #0]
 800d638:	2319      	movs	r3, #25
 800d63a:	465a      	mov	r2, fp
 800d63c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d640:	4620      	mov	r0, r4
 800d642:	f7ff feec 	bl	800d41e <I2C_WaitOnFlagUntilTimeout>
 800d646:	b130      	cbz	r0, 800d656 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 800d648:	2001      	movs	r0, #1
 800d64a:	e0c3      	b.n	800d7d4 <HAL_I2C_Mem_Write+0x1e0>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d64c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d650:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800d652:	2001      	movs	r0, #1
 800d654:	e0be      	b.n	800d7d4 <HAL_I2C_Mem_Write+0x1e0>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d656:	2321      	movs	r3, #33	@ 0x21
 800d658:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d65c:	2340      	movs	r3, #64	@ 0x40
 800d65e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d662:	2300      	movs	r3, #0
 800d664:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800d666:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d668:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d66a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d66e:	6363      	str	r3, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d670:	4b5e      	ldr	r3, [pc, #376]	@ (800d7ec <HAL_I2C_Mem_Write+0x1f8>)
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d678:	fa5f f289 	uxtb.w	r2, r9
 800d67c:	4629      	mov	r1, r5
 800d67e:	4620      	mov	r0, r4
 800d680:	f7ff fdf7 	bl	800d272 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d684:	4632      	mov	r2, r6
 800d686:	4639      	mov	r1, r7
 800d688:	4620      	mov	r0, r4
 800d68a:	f7ff fe98 	bl	800d3be <I2C_WaitOnTXISFlagUntilTimeout>
 800d68e:	bb78      	cbnz	r0, 800d6f0 <HAL_I2C_Mem_Write+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d690:	45d9      	cmp	r9, fp
 800d692:	d11e      	bne.n	800d6d2 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	fa5f f288 	uxtb.w	r2, r8
 800d69a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d69c:	9600      	str	r6, [sp, #0]
 800d69e:	463b      	mov	r3, r7
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	2180      	movs	r1, #128	@ 0x80
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f7ff feba 	bl	800d41e <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d6aa:	bb08      	cbnz	r0, 800d6f0 <HAL_I2C_Mem_Write+0xfc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	2bff      	cmp	r3, #255	@ 0xff
 800d6b2:	d922      	bls.n	800d6fa <HAL_I2C_Mem_Write+0x106>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6b4:	22ff      	movs	r2, #255	@ 0xff
 800d6b6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f7ff fdd5 	bl	800d272 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d6c8:	f04f 0900 	mov.w	r9, #0
 800d6cc:	f04f 0880 	mov.w	r8, #128	@ 0x80
 800d6d0:	e030      	b.n	800d734 <HAL_I2C_Mem_Write+0x140>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800d6d8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6da:	4632      	mov	r2, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f7ff fe6d 	bl	800d3be <I2C_WaitOnTXISFlagUntilTimeout>
 800d6e4:	b920      	cbnz	r0, 800d6f0 <HAL_I2C_Mem_Write+0xfc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d6e6:	6822      	ldr	r2, [r4, #0]
 800d6e8:	fa5f f388 	uxtb.w	r3, r8
 800d6ec:	6293      	str	r3, [r2, #40]	@ 0x28
 800d6ee:	e7d5      	b.n	800d69c <HAL_I2C_Mem_Write+0xa8>
      __HAL_UNLOCK(hi2c);
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800d6f6:	2001      	movs	r0, #1
 800d6f8:	e06c      	b.n	800d7d4 <HAL_I2C_Mem_Write+0x1e0>
      hi2c->XferSize = hi2c->XferCount;
 800d6fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d6fc:	b292      	uxth	r2, r2
 800d6fe:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d700:	2300      	movs	r3, #0
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d708:	b2d2      	uxtb	r2, r2
 800d70a:	4629      	mov	r1, r5
 800d70c:	4620      	mov	r0, r4
 800d70e:	f7ff fdb0 	bl	800d272 <I2C_TransferConfig>
 800d712:	e7d9      	b.n	800d6c8 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = hi2c->XferCount;
 800d714:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d716:	b292      	uxth	r2, r2
 800d718:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d71a:	2300      	movs	r3, #0
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d722:	b2d2      	uxtb	r2, r2
 800d724:	4629      	mov	r1, r5
 800d726:	4620      	mov	r0, r4
 800d728:	f7ff fda3 	bl	800d272 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800d72c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d72e:	b29b      	uxth	r3, r3
 800d730:	2b00      	cmp	r3, #0
 800d732:	d032      	beq.n	800d79a <HAL_I2C_Mem_Write+0x1a6>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d734:	4632      	mov	r2, r6
 800d736:	4639      	mov	r1, r7
 800d738:	4620      	mov	r0, r4
 800d73a:	f7ff fe40 	bl	800d3be <I2C_WaitOnTXISFlagUntilTimeout>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d14d      	bne.n	800d7de <HAL_I2C_Mem_Write+0x1ea>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d746:	7812      	ldrb	r2, [r2, #0]
 800d748:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800d74a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d74c:	3301      	adds	r3, #1
 800d74e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800d750:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d752:	3b01      	subs	r3, #1
 800d754:	b29b      	uxth	r3, r3
 800d756:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800d758:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800d75a:	3b01      	subs	r3, #1
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d760:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d762:	b292      	uxth	r2, r2
 800d764:	2a00      	cmp	r2, #0
 800d766:	d0e1      	beq.n	800d72c <HAL_I2C_Mem_Write+0x138>
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1df      	bne.n	800d72c <HAL_I2C_Mem_Write+0x138>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d76c:	9600      	str	r6, [sp, #0]
 800d76e:	463b      	mov	r3, r7
 800d770:	464a      	mov	r2, r9
 800d772:	4641      	mov	r1, r8
 800d774:	4620      	mov	r0, r4
 800d776:	f7ff fe52 	bl	800d41e <I2C_WaitOnFlagUntilTimeout>
 800d77a:	bb90      	cbnz	r0, 800d7e2 <HAL_I2C_Mem_Write+0x1ee>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d77c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d77e:	b29b      	uxth	r3, r3
 800d780:	2bff      	cmp	r3, #255	@ 0xff
 800d782:	d9c7      	bls.n	800d714 <HAL_I2C_Mem_Write+0x120>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d784:	22ff      	movs	r2, #255	@ 0xff
 800d786:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d788:	2300      	movs	r3, #0
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d790:	4629      	mov	r1, r5
 800d792:	4620      	mov	r0, r4
 800d794:	f7ff fd6d 	bl	800d272 <I2C_TransferConfig>
 800d798:	e7c8      	b.n	800d72c <HAL_I2C_Mem_Write+0x138>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d79a:	4632      	mov	r2, r6
 800d79c:	4639      	mov	r1, r7
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f7ff fe7b 	bl	800d49a <I2C_WaitOnSTOPFlagUntilTimeout>
 800d7a4:	b9f8      	cbnz	r0, 800d7e6 <HAL_I2C_Mem_Write+0x1f2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	2220      	movs	r2, #32
 800d7aa:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d7ac:	6821      	ldr	r1, [r4, #0]
 800d7ae:	684b      	ldr	r3, [r1, #4]
 800d7b0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d7b4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d7b8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d7bc:	f023 0301 	bic.w	r3, r3, #1
 800d7c0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d7c2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800d7cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800d7d0:	e000      	b.n	800d7d4 <HAL_I2C_Mem_Write+0x1e0>
    return HAL_BUSY;
 800d7d2:	2002      	movs	r0, #2
}
 800d7d4:	b003      	add	sp, #12
 800d7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800d7da:	2002      	movs	r0, #2
 800d7dc:	e7fa      	b.n	800d7d4 <HAL_I2C_Mem_Write+0x1e0>
        return HAL_ERROR;
 800d7de:	2001      	movs	r0, #1
 800d7e0:	e7f8      	b.n	800d7d4 <HAL_I2C_Mem_Write+0x1e0>
          return HAL_ERROR;
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	e7f6      	b.n	800d7d4 <HAL_I2C_Mem_Write+0x1e0>
      return HAL_ERROR;
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	e7f4      	b.n	800d7d4 <HAL_I2C_Mem_Write+0x1e0>
 800d7ea:	bf00      	nop
 800d7ec:	80002000 	.word	0x80002000

0800d7f0 <HAL_I2C_Mem_Read>:
{
 800d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	b083      	sub	sp, #12
 800d7f6:	460d      	mov	r5, r1
 800d7f8:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800d7fc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7fe:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800d802:	b2c9      	uxtb	r1, r1
 800d804:	2920      	cmp	r1, #32
 800d806:	f040 80e4 	bne.w	800d9d2 <HAL_I2C_Mem_Read+0x1e2>
 800d80a:	4604      	mov	r4, r0
 800d80c:	4690      	mov	r8, r2
 800d80e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800d810:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d812:	b1cb      	cbz	r3, 800d848 <HAL_I2C_Mem_Read+0x58>
 800d814:	f1ba 0f00 	cmp.w	sl, #0
 800d818:	d016      	beq.n	800d848 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 800d81a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d81e:	2b01      	cmp	r3, #1
 800d820:	f000 80db 	beq.w	800d9da <HAL_I2C_Mem_Read+0x1ea>
 800d824:	f04f 0b01 	mov.w	fp, #1
 800d828:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800d82c:	f7fe f848 	bl	800b8c0 <HAL_GetTick>
 800d830:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d832:	9000      	str	r0, [sp, #0]
 800d834:	2319      	movs	r3, #25
 800d836:	465a      	mov	r2, fp
 800d838:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d83c:	4620      	mov	r0, r4
 800d83e:	f7ff fdee 	bl	800d41e <I2C_WaitOnFlagUntilTimeout>
 800d842:	b130      	cbz	r0, 800d852 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 800d844:	2001      	movs	r0, #1
 800d846:	e0c5      	b.n	800d9d4 <HAL_I2C_Mem_Read+0x1e4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d848:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d84c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800d84e:	2001      	movs	r0, #1
 800d850:	e0c0      	b.n	800d9d4 <HAL_I2C_Mem_Read+0x1e4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d852:	2322      	movs	r3, #34	@ 0x22
 800d854:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d858:	2340      	movs	r3, #64	@ 0x40
 800d85a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d85e:	2300      	movs	r3, #0
 800d860:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800d862:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d864:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d866:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d86a:	6363      	str	r3, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d86c:	4a5f      	ldr	r2, [pc, #380]	@ (800d9ec <HAL_I2C_Mem_Read+0x1fc>)
 800d86e:	9200      	str	r2, [sp, #0]
 800d870:	fa5f f289 	uxtb.w	r2, r9
 800d874:	4629      	mov	r1, r5
 800d876:	4620      	mov	r0, r4
 800d878:	f7ff fcfb 	bl	800d272 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d87c:	4632      	mov	r2, r6
 800d87e:	4639      	mov	r1, r7
 800d880:	4620      	mov	r0, r4
 800d882:	f7ff fd9c 	bl	800d3be <I2C_WaitOnTXISFlagUntilTimeout>
 800d886:	bb88      	cbnz	r0, 800d8ec <HAL_I2C_Mem_Read+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d888:	45d9      	cmp	r9, fp
 800d88a:	d120      	bne.n	800d8ce <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	fa5f f288 	uxtb.w	r2, r8
 800d892:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d894:	9600      	str	r6, [sp, #0]
 800d896:	463b      	mov	r3, r7
 800d898:	2200      	movs	r2, #0
 800d89a:	2140      	movs	r1, #64	@ 0x40
 800d89c:	4620      	mov	r0, r4
 800d89e:	f7ff fdbe 	bl	800d41e <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d8a2:	bb18      	cbnz	r0, 800d8ec <HAL_I2C_Mem_Read+0xfc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d8a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	2bff      	cmp	r3, #255	@ 0xff
 800d8aa:	d924      	bls.n	800d8f6 <HAL_I2C_Mem_Read+0x106>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d8ac:	22ff      	movs	r2, #255	@ 0xff
 800d8ae:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d8b0:	4b4f      	ldr	r3, [pc, #316]	@ (800d9f0 <HAL_I2C_Mem_Read+0x200>)
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f7ff fcd9 	bl	800d272 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d8c0:	f04f 0800 	mov.w	r8, #0
 800d8c4:	f04f 0904 	mov.w	r9, #4
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d8c8:	f04f 0a80 	mov.w	sl, #128	@ 0x80
 800d8cc:	e030      	b.n	800d930 <HAL_I2C_Mem_Read+0x140>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800d8d4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8d6:	4632      	mov	r2, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f7ff fd6f 	bl	800d3be <I2C_WaitOnTXISFlagUntilTimeout>
 800d8e0:	b920      	cbnz	r0, 800d8ec <HAL_I2C_Mem_Read+0xfc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d8e2:	6822      	ldr	r2, [r4, #0]
 800d8e4:	fa5f f388 	uxtb.w	r3, r8
 800d8e8:	6293      	str	r3, [r2, #40]	@ 0x28
 800d8ea:	e7d3      	b.n	800d894 <HAL_I2C_Mem_Read+0xa4>
      __HAL_UNLOCK(hi2c);
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800d8f2:	2001      	movs	r0, #1
 800d8f4:	e06e      	b.n	800d9d4 <HAL_I2C_Mem_Read+0x1e4>
      hi2c->XferSize = hi2c->XferCount;
 800d8f6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d8f8:	b292      	uxth	r2, r2
 800d8fa:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d8fc:	4b3c      	ldr	r3, [pc, #240]	@ (800d9f0 <HAL_I2C_Mem_Read+0x200>)
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d904:	b2d2      	uxtb	r2, r2
 800d906:	4629      	mov	r1, r5
 800d908:	4620      	mov	r0, r4
 800d90a:	f7ff fcb2 	bl	800d272 <I2C_TransferConfig>
 800d90e:	e7d7      	b.n	800d8c0 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = hi2c->XferCount;
 800d910:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d912:	b292      	uxth	r2, r2
 800d914:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d916:	2300      	movs	r3, #0
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d91e:	b2d2      	uxtb	r2, r2
 800d920:	4629      	mov	r1, r5
 800d922:	4620      	mov	r0, r4
 800d924:	f7ff fca5 	bl	800d272 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800d928:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d034      	beq.n	800d99a <HAL_I2C_Mem_Read+0x1aa>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d930:	9600      	str	r6, [sp, #0]
 800d932:	463b      	mov	r3, r7
 800d934:	4642      	mov	r2, r8
 800d936:	4649      	mov	r1, r9
 800d938:	4620      	mov	r0, r4
 800d93a:	f7ff fd70 	bl	800d41e <I2C_WaitOnFlagUntilTimeout>
 800d93e:	2800      	cmp	r0, #0
 800d940:	d14d      	bne.n	800d9de <HAL_I2C_Mem_Read+0x1ee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d946:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d948:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800d94a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d94c:	3301      	adds	r3, #1
 800d94e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800d950:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800d952:	3b01      	subs	r3, #1
 800d954:	b29b      	uxth	r3, r3
 800d956:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800d958:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d95a:	3a01      	subs	r2, #1
 800d95c:	b292      	uxth	r2, r2
 800d95e:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d960:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d962:	b292      	uxth	r2, r2
 800d964:	2a00      	cmp	r2, #0
 800d966:	d0df      	beq.n	800d928 <HAL_I2C_Mem_Read+0x138>
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1dd      	bne.n	800d928 <HAL_I2C_Mem_Read+0x138>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d96c:	9600      	str	r6, [sp, #0]
 800d96e:	463b      	mov	r3, r7
 800d970:	4642      	mov	r2, r8
 800d972:	4651      	mov	r1, sl
 800d974:	4620      	mov	r0, r4
 800d976:	f7ff fd52 	bl	800d41e <I2C_WaitOnFlagUntilTimeout>
 800d97a:	bb90      	cbnz	r0, 800d9e2 <HAL_I2C_Mem_Read+0x1f2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d97c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d97e:	b29b      	uxth	r3, r3
 800d980:	2bff      	cmp	r3, #255	@ 0xff
 800d982:	d9c5      	bls.n	800d910 <HAL_I2C_Mem_Read+0x120>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d984:	22ff      	movs	r2, #255	@ 0xff
 800d986:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d988:	2300      	movs	r3, #0
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d990:	4629      	mov	r1, r5
 800d992:	4620      	mov	r0, r4
 800d994:	f7ff fc6d 	bl	800d272 <I2C_TransferConfig>
 800d998:	e7c6      	b.n	800d928 <HAL_I2C_Mem_Read+0x138>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d99a:	4632      	mov	r2, r6
 800d99c:	4639      	mov	r1, r7
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f7ff fd7b 	bl	800d49a <I2C_WaitOnSTOPFlagUntilTimeout>
 800d9a4:	b9f8      	cbnz	r0, 800d9e6 <HAL_I2C_Mem_Read+0x1f6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d9a6:	6823      	ldr	r3, [r4, #0]
 800d9a8:	2220      	movs	r2, #32
 800d9aa:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d9ac:	6821      	ldr	r1, [r4, #0]
 800d9ae:	684b      	ldr	r3, [r1, #4]
 800d9b0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d9b4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d9b8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d9bc:	f023 0301 	bic.w	r3, r3, #1
 800d9c0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d9c2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800d9cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800d9d0:	e000      	b.n	800d9d4 <HAL_I2C_Mem_Read+0x1e4>
    return HAL_BUSY;
 800d9d2:	2002      	movs	r0, #2
}
 800d9d4:	b003      	add	sp, #12
 800d9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800d9da:	2002      	movs	r0, #2
 800d9dc:	e7fa      	b.n	800d9d4 <HAL_I2C_Mem_Read+0x1e4>
        return HAL_ERROR;
 800d9de:	2001      	movs	r0, #1
 800d9e0:	e7f8      	b.n	800d9d4 <HAL_I2C_Mem_Read+0x1e4>
          return HAL_ERROR;
 800d9e2:	2001      	movs	r0, #1
 800d9e4:	e7f6      	b.n	800d9d4 <HAL_I2C_Mem_Read+0x1e4>
      return HAL_ERROR;
 800d9e6:	2001      	movs	r0, #1
 800d9e8:	e7f4      	b.n	800d9d4 <HAL_I2C_Mem_Read+0x1e4>
 800d9ea:	bf00      	nop
 800d9ec:	80002000 	.word	0x80002000
 800d9f0:	80002400 	.word	0x80002400

0800d9f4 <HAL_I2C_GetState>:
  return hi2c->State;
 800d9f4:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800d9f8:	4770      	bx	lr

0800d9fa <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800d9fa:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800d9fc:	4770      	bx	lr

0800d9fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d9fe:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da00:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800da04:	b2d2      	uxtb	r2, r2
 800da06:	2a20      	cmp	r2, #32
 800da08:	d123      	bne.n	800da52 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da0a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800da0e:	2a01      	cmp	r2, #1
 800da10:	d021      	beq.n	800da56 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800da12:	2201      	movs	r2, #1
 800da14:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da18:	2224      	movs	r2, #36	@ 0x24
 800da1a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da1e:	6800      	ldr	r0, [r0, #0]
 800da20:	6802      	ldr	r2, [r0, #0]
 800da22:	f022 0201 	bic.w	r2, r2, #1
 800da26:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800da28:	6818      	ldr	r0, [r3, #0]
 800da2a:	6802      	ldr	r2, [r0, #0]
 800da2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800da30:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800da32:	6818      	ldr	r0, [r3, #0]
 800da34:	6802      	ldr	r2, [r0, #0]
 800da36:	4311      	orrs	r1, r2
 800da38:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da3a:	6819      	ldr	r1, [r3, #0]
 800da3c:	680a      	ldr	r2, [r1, #0]
 800da3e:	f042 0201 	orr.w	r2, r2, #1
 800da42:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da44:	2220      	movs	r2, #32
 800da46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da4a:	2000      	movs	r0, #0
 800da4c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800da50:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800da52:	2002      	movs	r0, #2
 800da54:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800da56:	2002      	movs	r0, #2
  }
}
 800da58:	4770      	bx	lr

0800da5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800da5a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da5c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800da60:	b2d2      	uxtb	r2, r2
 800da62:	2a20      	cmp	r2, #32
 800da64:	d121      	bne.n	800daaa <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da66:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800da6a:	2a01      	cmp	r2, #1
 800da6c:	d01f      	beq.n	800daae <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800da6e:	2201      	movs	r2, #1
 800da70:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da74:	2224      	movs	r2, #36	@ 0x24
 800da76:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da7a:	6800      	ldr	r0, [r0, #0]
 800da7c:	6802      	ldr	r2, [r0, #0]
 800da7e:	f022 0201 	bic.w	r2, r2, #1
 800da82:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da84:	6818      	ldr	r0, [r3, #0]
 800da86:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da88:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800da8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800da90:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da92:	6819      	ldr	r1, [r3, #0]
 800da94:	680a      	ldr	r2, [r1, #0]
 800da96:	f042 0201 	orr.w	r2, r2, #1
 800da9a:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da9c:	2220      	movs	r2, #32
 800da9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800daa2:	2000      	movs	r0, #0
 800daa4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800daa8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800daaa:	2002      	movs	r0, #2
 800daac:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800daae:	2002      	movs	r0, #2
  }
}
 800dab0:	4770      	bx	lr

0800dab2 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800dab2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dab6:	4606      	mov	r6, r0
 800dab8:	460c      	mov	r4, r1
 800daba:	4615      	mov	r5, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800dabc:	7801      	ldrb	r1, [r0, #0]
 800dabe:	f04f 0e01 	mov.w	lr, #1
  p = 0;
 800dac2:	2200      	movs	r2, #0
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800dac4:	b139      	cbz	r1, 800dad6 <JPEG_Bits_To_SizeCodes+0x24>
 800dac6:	eb04 0c02 	add.w	ip, r4, r2
 800daca:	440a      	add	r2, r1
 800dacc:	18a0      	adds	r0, r4, r2
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800dace:	f80c eb01 	strb.w	lr, [ip], #1
    while (i != 0UL)
 800dad2:	4584      	cmp	ip, r0
 800dad4:	d1fb      	bne.n	800dace <JPEG_Bits_To_SizeCodes+0x1c>
  for (l = 0; l < 16UL; l++)
 800dad6:	f1be 0f10 	cmp.w	lr, #16
 800dada:	d00a      	beq.n	800daf2 <JPEG_Bits_To_SizeCodes+0x40>
    i = (uint32_t)Bits[l];
 800dadc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    if ((p + i) > 256UL)
 800dae0:	f10e 0e01 	add.w	lr, lr, #1
 800dae4:	1888      	adds	r0, r1, r2
 800dae6:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800daea:	d9eb      	bls.n	800dac4 <JPEG_Bits_To_SizeCodes+0x12>
      return HAL_ERROR;
 800daec:	2001      	movs	r0, #1
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800daee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  Huffsize[p] = 0;
 800daf2:	2100      	movs	r1, #0
 800daf4:	54a1      	strb	r1, [r4, r2]
  *LastK = p;
 800daf6:	601a      	str	r2, [r3, #0]
  si = Huffsize[0];
 800daf8:	7820      	ldrb	r0, [r4, #0]
 800dafa:	4602      	mov	r2, r0
  while (Huffsize[p] != 0U)
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d0f6      	beq.n	800daee <JPEG_Bits_To_SizeCodes+0x3c>
  code = 0;
 800db00:	f04f 0900 	mov.w	r9, #0
  p = 0;
 800db04:	4649      	mov	r1, r9
 800db06:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800db0a:	2701      	movs	r7, #1
 800db0c:	e01c      	b.n	800db48 <JPEG_Bits_To_SizeCodes+0x96>
 800db0e:	eb01 0c08 	add.w	ip, r1, r8
 800db12:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
    while (((uint32_t) Huffsize[p]) == si)
 800db16:	464b      	mov	r3, r9
      Huffcode[p] = code;
 800db18:	f84c 3f04 	str.w	r3, [ip, #4]!
      code++;
 800db1c:	461e      	mov	r6, r3
 800db1e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800db20:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 800db24:	4596      	cmp	lr, r2
 800db26:	d0f7      	beq.n	800db18 <JPEG_Bits_To_SizeCodes+0x66>
 800db28:	3101      	adds	r1, #1
 800db2a:	eba1 0109 	sub.w	r1, r1, r9
      p++;
 800db2e:	4431      	add	r1, r6
    if(si > 31UL)
 800db30:	2a1f      	cmp	r2, #31
 800db32:	d80f      	bhi.n	800db54 <JPEG_Bits_To_SizeCodes+0xa2>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800db34:	fa07 f002 	lsl.w	r0, r7, r2
 800db38:	4298      	cmp	r0, r3
 800db3a:	d90d      	bls.n	800db58 <JPEG_Bits_To_SizeCodes+0xa6>
    code <<= 1;
 800db3c:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
 800db40:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
 800db42:	5c60      	ldrb	r0, [r4, r1]
 800db44:	2800      	cmp	r0, #0
 800db46:	d0d2      	beq.n	800daee <JPEG_Bits_To_SizeCodes+0x3c>
    while (((uint32_t) Huffsize[p]) == si)
 800db48:	1860      	adds	r0, r4, r1
 800db4a:	5c63      	ldrb	r3, [r4, r1]
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d0de      	beq.n	800db0e <JPEG_Bits_To_SizeCodes+0x5c>
 800db50:	464b      	mov	r3, r9
 800db52:	e7ed      	b.n	800db30 <JPEG_Bits_To_SizeCodes+0x7e>
      return HAL_ERROR;
 800db54:	2001      	movs	r0, #1
 800db56:	e7ca      	b.n	800daee <JPEG_Bits_To_SizeCodes+0x3c>
      return HAL_ERROR;
 800db58:	2001      	movs	r0, #1
 800db5a:	e7c8      	b.n	800daee <JPEG_Bits_To_SizeCodes+0x3c>

0800db5c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	f5ad 6da2 	sub.w	sp, sp, #1296	@ 0x510
 800db62:	4606      	mov	r6, r0
 800db64:	460c      	mov	r4, r1
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800db66:	f20d 530c 	addw	r3, sp, #1292	@ 0x50c
 800db6a:	aa01      	add	r2, sp, #4
 800db6c:	f50d 6181 	add.w	r1, sp, #1032	@ 0x408
 800db70:	f7ff ff9f 	bl	800dab2 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800db74:	b9d8      	cbnz	r0, 800dbae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800db76:	f8dd 350c 	ldr.w	r3, [sp, #1292]	@ 0x50c
 800db7a:	b1c3      	cbz	r3, 800dbae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
 800db7c:	f106 0c0f 	add.w	ip, r6, #15
 800db80:	f10d 0e04 	add.w	lr, sp, #4
 800db84:	f50d 6181 	add.w	r1, sp, #1032	@ 0x408
 800db88:	330f      	adds	r3, #15
 800db8a:	441e      	add	r6, r3
  {
    l = DC_BitsValsTable->HuffVal[k];
 800db8c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800db90:	2b0b      	cmp	r3, #11
 800db92:	d80b      	bhi.n	800dbac <JPEG_DCHuff_BitsVals_To_SizeCodes+0x50>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800db94:	f85e 5b04 	ldr.w	r5, [lr], #4
 800db98:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800db9c:	60d5      	str	r5, [r2, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800db9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dba2:	3a01      	subs	r2, #1
 800dba4:	54e2      	strb	r2, [r4, r3]
  while (k < lastK)
 800dba6:	45b4      	cmp	ip, r6
 800dba8:	d1f0      	bne.n	800db8c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x30>
 800dbaa:	e000      	b.n	800dbae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800dbac:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800dbae:	f50d 6da2 	add.w	sp, sp, #1296	@ 0x510
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}

0800dbb4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800dbb4:	b530      	push	{r4, r5, lr}
 800dbb6:	b091      	sub	sp, #68	@ 0x44
 800dbb8:	460b      	mov	r3, r1
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800dbba:	6804      	ldr	r4, [r0, #0]
 800dbbc:	f504 61f8 	add.w	r1, r4, #1984	@ 0x7c0
 800dbc0:	428a      	cmp	r2, r1
 800dbc2:	d006      	beq.n	800dbd2 <JPEG_Set_HuffDC_Mem+0x1e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800dbc4:	f504 61fc 	add.w	r1, r4, #2016	@ 0x7e0
 800dbc8:	428a      	cmp	r2, r1
 800dbca:	d005      	beq.n	800dbd8 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 800dbcc:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800dbce:	b011      	add	sp, #68	@ 0x44
 800dbd0:	bd30      	pop	{r4, r5, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800dbd2:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
 800dbd6:	e001      	b.n	800dbdc <JPEG_Set_HuffDC_Mem+0x28>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800dbd8:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800dbdc:	b32b      	cbz	r3, 800dc2a <JPEG_Set_HuffDC_Mem+0x76>
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800dbde:	a901      	add	r1, sp, #4
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7ff ffbb 	bl	800db5c <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d1f1      	bne.n	800dbce <JPEG_Set_HuffDC_Mem+0x1a>
    *addressDef = 0x0FFF0FFF;
 800dbea:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800dbee:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800dbf0:	6063      	str	r3, [r4, #4]
    while (i > 1UL)
 800dbf2:	a901      	add	r1, sp, #4
 800dbf4:	f1a4 0e18 	sub.w	lr, r4, #24
    *addressDef = 0x0FFF0FFF;
 800dbf8:	468c      	mov	ip, r1
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800dbfa:	7aca      	ldrb	r2, [r1, #11]
 800dbfc:	0212      	lsls	r2, r2, #8
 800dbfe:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800dc02:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800dc06:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800dc08:	7a8b      	ldrb	r3, [r1, #10]
 800dc0a:	021b      	lsls	r3, r3, #8
 800dc0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800dc10:	f89c 5034 	ldrb.w	r5, [ip, #52]	@ 0x34
 800dc14:	432b      	orrs	r3, r5
      *address = lsb | (msb << 16);
 800dc16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc1a:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800dc1e:	3902      	subs	r1, #2
 800dc20:	f1ac 0c08 	sub.w	ip, ip, #8
 800dc24:	4574      	cmp	r4, lr
 800dc26:	d1e8      	bne.n	800dbfa <JPEG_Set_HuffDC_Mem+0x46>
 800dc28:	e7d1      	b.n	800dbce <JPEG_Set_HuffDC_Mem+0x1a>
  return HAL_OK;
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	e7cf      	b.n	800dbce <JPEG_Set_HuffDC_Mem+0x1a>

0800dc2e <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800dc2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc32:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 800dc36:	460e      	mov	r6, r1
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800dc38:	6804      	ldr	r4, [r0, #0]
 800dc3a:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d008      	beq.n	800dc54 <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800dc42:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d007      	beq.n	800dc5a <JPEG_Set_HuffAC_Mem+0x2c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 800dc4a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800dc4c:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 800dc50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800dc54:	f204 6444 	addw	r4, r4, #1604	@ 0x644
 800dc58:	e001      	b.n	800dc5e <JPEG_Set_HuffAC_Mem+0x30>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800dc5a:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800dc5e:	2e00      	cmp	r6, #0
 800dc60:	d06e      	beq.n	800dd40 <JPEG_Set_HuffAC_Mem+0x112>
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800dc62:	466b      	mov	r3, sp
 800dc64:	aa42      	add	r2, sp, #264	@ 0x108
 800dc66:	a901      	add	r1, sp, #4
 800dc68:	4630      	mov	r0, r6
 800dc6a:	f7ff ff22 	bl	800dab2 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	d1ec      	bne.n	800dc4c <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
 800dc72:	9b00      	ldr	r3, [sp, #0]
 800dc74:	b37b      	cbz	r3, 800dcd6 <JPEG_Set_HuffAC_Mem+0xa8>
 800dc76:	f106 050f 	add.w	r5, r6, #15
 800dc7a:	f50d 7e84 	add.w	lr, sp, #264	@ 0x108
 800dc7e:	f10d 0c04 	add.w	ip, sp, #4
 800dc82:	330f      	adds	r3, #15
 800dc84:	18f1      	adds	r1, r6, r3
      l = 160; /*l = 0x00 EOB code*/
 800dc86:	f04f 09a0 	mov.w	r9, #160	@ 0xa0
      l = 161;
 800dc8a:	f04f 08a1 	mov.w	r8, #161	@ 0xa1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800dc8e:	f20d 560c 	addw	r6, sp, #1292	@ 0x50c
 800dc92:	e00c      	b.n	800dcae <JPEG_Set_HuffAC_Mem+0x80>
      l = 160; /*l = 0x00 EOB code*/
 800dc94:	464b      	mov	r3, r9
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800dc96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc9a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800dc9e:	f8c2 70a4 	str.w	r7, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800dca2:	f81c 2b01 	ldrb.w	r2, [ip], #1
 800dca6:	3a01      	subs	r2, #1
 800dca8:	54f2      	strb	r2, [r6, r3]
  while (k < lastK)
 800dcaa:	428d      	cmp	r5, r1
 800dcac:	d013      	beq.n	800dcd6 <JPEG_Set_HuffAC_Mem+0xa8>
    l = AC_BitsValsTable->HuffVal[k];
 800dcae:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    if (l == 0UL)
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d0ee      	beq.n	800dc94 <JPEG_Set_HuffAC_Mem+0x66>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800dcb6:	2bf0      	cmp	r3, #240	@ 0xf0
 800dcb8:	d00b      	beq.n	800dcd2 <JPEG_Set_HuffAC_Mem+0xa4>
      lsb = (l & 0x0FUL);
 800dcba:	f003 020f 	and.w	r2, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800dcbe:	3a01      	subs	r2, #1
 800dcc0:	091b      	lsrs	r3, r3, #4
 800dcc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dcc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800dcca:	2ba1      	cmp	r3, #161	@ 0xa1
 800dccc:	d9e3      	bls.n	800dc96 <JPEG_Set_HuffAC_Mem+0x68>
    if (error != HAL_OK)
 800dcce:	2001      	movs	r0, #1
 800dcd0:	e7bc      	b.n	800dc4c <JPEG_Set_HuffAC_Mem+0x1e>
      l = 161;
 800dcd2:	4643      	mov	r3, r8
 800dcd4:	e7df      	b.n	800dc96 <JPEG_Set_HuffAC_Mem+0x68>
      *addressDef = 0x0FFF0FFF;
 800dcd6:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800dcda:	6023      	str	r3, [r4, #0]
 800dcdc:	6063      	str	r3, [r4, #4]
 800dcde:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800dce0:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800dce4:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800dce8:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800dcea:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800dcee:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800dcf0:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800dcf4:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800dcf6:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800dcfa:	61a3      	str	r3, [r4, #24]
    while (i > 1UL)
 800dcfc:	f20d 510c 	addw	r1, sp, #1292	@ 0x50c
 800dd00:	f20d 456a 	addw	r5, sp, #1130	@ 0x46a
 800dd04:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
 800dd08:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
 800dd0c:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800dd10:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
 800dd14:	0212      	lsls	r2, r2, #8
 800dd16:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800dd1a:	f81e 3021 	ldrb.w	r3, [lr, r1, lsl #2]
 800dd1e:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800dd20:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
 800dd24:	021b      	lsls	r3, r3, #8
 800dd26:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800dd2a:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
 800dd2e:	4333      	orrs	r3, r6
      *address = lsb | (msb << 16);
 800dd30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd34:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800dd38:	3902      	subs	r1, #2
 800dd3a:	428d      	cmp	r5, r1
 800dd3c:	d1e8      	bne.n	800dd10 <JPEG_Set_HuffAC_Mem+0xe2>
 800dd3e:	e785      	b.n	800dc4c <JPEG_Set_HuffAC_Mem+0x1e>
  return HAL_OK;
 800dd40:	2000      	movs	r0, #0
 800dd42:	e783      	b.n	800dc4c <JPEG_Set_HuffAC_Mem+0x1e>

0800dd44 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800dd44:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800dd46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800dd4a:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800dd4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800dd4e:	f003 0303 	and.w	r3, r3, #3
 800dd52:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800dd54:	6802      	ldr	r2, [r0, #0]
 800dd56:	6853      	ldr	r3, [r2, #4]
 800dd58:	bf0c      	ite	eq
 800dd5a:	f043 0308 	orreq.w	r3, r3, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800dd5e:	f023 0308 	bicne.w	r3, r3, #8
 800dd62:	6053      	str	r3, [r2, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800dd64:	6802      	ldr	r2, [r0, #0]
 800dd66:	6813      	ldr	r3, [r2, #0]
 800dd68:	f023 0301 	bic.w	r3, r3, #1
 800dd6c:	6013      	str	r3, [r2, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800dd6e:	6802      	ldr	r2, [r0, #0]
 800dd70:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800dd72:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800dd76:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800dd78:	6802      	ldr	r2, [r0, #0]
 800dd7a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800dd7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dd80:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800dd82:	6802      	ldr	r2, [r0, #0]
 800dd84:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800dd86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dd8a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800dd8c:	6802      	ldr	r2, [r0, #0]
 800dd8e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800dd90:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dd94:	6393      	str	r3, [r2, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800dd96:	6802      	ldr	r2, [r0, #0]
 800dd98:	6813      	ldr	r3, [r2, #0]
 800dd9a:	f043 0301 	orr.w	r3, r3, #1
 800dd9e:	6013      	str	r3, [r2, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800dda0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800dda2:	f003 030c 	and.w	r3, r3, #12
 800dda6:	2b08      	cmp	r3, #8
 800dda8:	d005      	beq.n	800ddb6 <JPEG_Init_Process+0x72>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ddaa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ddac:	f003 030c 	and.w	r3, r3, #12
 800ddb0:	2b0c      	cmp	r3, #12
 800ddb2:	d006      	beq.n	800ddc2 <JPEG_Init_Process+0x7e>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ddb4:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800ddb6:	6802      	ldr	r2, [r0, #0]
 800ddb8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ddba:	f043 036e 	orr.w	r3, r3, #110	@ 0x6e
 800ddbe:	6313      	str	r3, [r2, #48]	@ 0x30
 800ddc0:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ddc2:	6802      	ldr	r2, [r0, #0]
 800ddc4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ddc6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ddca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ddcc:	e7f2      	b.n	800ddb4 <JPEG_Init_Process+0x70>
	...

0800ddd0 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ddd0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800ddd2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800ddd4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d349      	bcc.n	800de6e <JPEG_DMA_StartProcess+0x9e>
{
 800ddda:	b530      	push	{r4, r5, lr}
 800dddc:	b083      	sub	sp, #12
 800ddde:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800dde0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dde2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800dde4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dde6:	4283      	cmp	r3, r0
 800dde8:	d343      	bcc.n	800de72 <JPEG_DMA_StartProcess+0xa2>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800ddea:	4b23      	ldr	r3, [pc, #140]	@ (800de78 <JPEG_DMA_StartProcess+0xa8>)
 800ddec:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ddee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ddf0:	4b22      	ldr	r3, [pc, #136]	@ (800de7c <JPEG_DMA_StartProcess+0xac>)
 800ddf2:	654b      	str	r3, [r1, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800ddf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddf6:	4d22      	ldr	r5, [pc, #136]	@ (800de80 <JPEG_DMA_StartProcess+0xb0>)
 800ddf8:	644d      	str	r5, [r1, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ddfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddfc:	654b      	str	r3, [r1, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800ddfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de00:	4920      	ldr	r1, [pc, #128]	@ (800de84 <JPEG_DMA_StartProcess+0xb4>)
 800de02:	6599      	str	r1, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800de04:	b1ea      	cbz	r2, 800de42 <JPEG_DMA_StartProcess+0x72>
 800de06:	b1e0      	cbz	r0, 800de42 <JPEG_DMA_StartProcess+0x72>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800de08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800de0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800de0e:	fb02 3211 	mls	r2, r2, r1, r3
 800de12:	1a9b      	subs	r3, r3, r2
 800de14:	62a3      	str	r3, [r4, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800de16:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800de18:	fbb3 f2f0 	udiv	r2, r3, r0
 800de1c:	fb00 3212 	mls	r2, r0, r2, r3
 800de20:	1a9b      	subs	r3, r3, r2
 800de22:	62e3      	str	r3, [r4, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800de24:	6821      	ldr	r1, [r4, #0]
 800de26:	2201      	movs	r2, #1
 800de28:	9200      	str	r2, [sp, #0]
 800de2a:	69e2      	ldr	r2, [r4, #28]
 800de2c:	3144      	adds	r1, #68	@ 0x44
 800de2e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800de30:	f001 f985 	bl	800f13e <HAL_MDMA_Start_IT>
 800de34:	b158      	cbz	r0, 800de4e <JPEG_DMA_StartProcess+0x7e>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800de36:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800de38:	f043 0304 	orr.w	r3, r3, #4
 800de3c:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800de3e:	2001      	movs	r0, #1
 800de40:	e018      	b.n	800de74 <JPEG_DMA_StartProcess+0xa4>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800de42:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800de44:	f043 0304 	orr.w	r3, r3, #4
 800de48:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800de4a:	2001      	movs	r0, #1
 800de4c:	e012      	b.n	800de74 <JPEG_DMA_StartProcess+0xa4>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800de4e:	6822      	ldr	r2, [r4, #0]
 800de50:	2301      	movs	r3, #1
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800de56:	3240      	adds	r2, #64	@ 0x40
 800de58:	69a1      	ldr	r1, [r4, #24]
 800de5a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800de5c:	f001 f96f 	bl	800f13e <HAL_MDMA_Start_IT>
 800de60:	b140      	cbz	r0, 800de74 <JPEG_DMA_StartProcess+0xa4>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800de62:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800de64:	f043 0304 	orr.w	r3, r3, #4
 800de68:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800de6a:	2001      	movs	r0, #1
 800de6c:	e002      	b.n	800de74 <JPEG_DMA_StartProcess+0xa4>
    return HAL_ERROR;
 800de6e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800de70:	4770      	bx	lr
    return HAL_ERROR;
 800de72:	2001      	movs	r0, #1
}
 800de74:	b003      	add	sp, #12
 800de76:	bd30      	pop	{r4, r5, pc}
 800de78:	0800e453 	.word	0x0800e453
 800de7c:	0800e34d 	.word	0x0800e34d
 800de80:	0800e9d5 	.word	0x0800e9d5
 800de84:	0800e9c1 	.word	0x0800e9c1

0800de88 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 800de88:	2800      	cmp	r0, #0
 800de8a:	f000 812f 	beq.w	800e0ec <HAL_JPEG_Init+0x264>
{
 800de8e:	b510      	push	{r4, lr}
 800de90:	4604      	mov	r4, r0
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800de92:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800de96:	2b00      	cmp	r3, #0
 800de98:	f000 80fa 	beq.w	800e090 <HAL_JPEG_Init+0x208>
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800de9c:	2302      	movs	r3, #2
 800de9e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 800dea2:	6822      	ldr	r2, [r4, #0]
 800dea4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800dea6:	f043 0301 	orr.w	r3, r3, #1
 800deaa:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800deac:	6822      	ldr	r2, [r4, #0]
 800deae:	6813      	ldr	r3, [r2, #0]
 800deb0:	f023 0301 	bic.w	r3, r3, #1
 800deb4:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800deb6:	6822      	ldr	r2, [r4, #0]
 800deb8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800deba:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800debe:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800dec0:	6822      	ldr	r2, [r4, #0]
 800dec2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800dec4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dec8:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800deca:	6822      	ldr	r2, [r4, #0]
 800decc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800dece:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ded2:	6313      	str	r3, [r2, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ded4:	6822      	ldr	r2, [r4, #0]
 800ded6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800ded8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dedc:	6393      	str	r3, [r2, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800dede:	4b84      	ldr	r3, [pc, #528]	@ (800e0f0 <HAL_JPEG_Init+0x268>)
 800dee0:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800dee2:	4b84      	ldr	r3, [pc, #528]	@ (800e0f4 <HAL_JPEG_Init+0x26c>)
 800dee4:	6423      	str	r3, [r4, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800dee6:	2300      	movs	r3, #0
 800dee8:	6463      	str	r3, [r4, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800deea:	64a3      	str	r3, [r4, #72]	@ 0x48
  address = (hjpeg->Instance->DHTMEM + 3);
 800deec:	6823      	ldr	r3, [r4, #0]
 800deee:	f503 715b 	add.w	r1, r3, #876	@ 0x36c
  while (index > 3UL)
 800def2:	4a81      	ldr	r2, [pc, #516]	@ (800e0f8 <HAL_JPEG_Init+0x270>)
 800def4:	f503 7c57 	add.w	ip, r3, #860	@ 0x35c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800def8:	7bd0      	ldrb	r0, [r2, #15]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800defa:	7b93      	ldrb	r3, [r2, #14]
 800defc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800defe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800df02:	7b10      	ldrb	r0, [r2, #12]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800df04:	4303      	orrs	r3, r0
 800df06:	7b50      	ldrb	r0, [r2, #13]
 800df08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800df0c:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800df10:	3a04      	subs	r2, #4
 800df12:	4561      	cmp	r1, ip
 800df14:	d1f0      	bne.n	800def8 <HAL_JPEG_Init+0x70>
  address = (hjpeg->Instance->DHTMEM + 6);
 800df16:	6823      	ldr	r3, [r4, #0]
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800df18:	4a78      	ldr	r2, [pc, #480]	@ (800e0fc <HAL_JPEG_Init+0x274>)
 800df1a:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
 800df1e:	f1a2 3204 	sub.w	r2, r2, #67372036	@ 0x4040404
 800df22:	f8c3 2374 	str.w	r2, [r3, #884]	@ 0x374
 800df26:	f1a2 3204 	sub.w	r2, r2, #67372036	@ 0x4040404
 800df2a:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800df2e:	6823      	ldr	r3, [r4, #0]
 800df30:	f503 7062 	add.w	r0, r3, #904	@ 0x388
  while (index > 3UL)
 800df34:	4a72      	ldr	r2, [pc, #456]	@ (800e100 <HAL_JPEG_Init+0x278>)
 800df36:	f503 7e5e 	add.w	lr, r3, #888	@ 0x378
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800df3a:	4611      	mov	r1, r2
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800df3c:	f891 c00f 	ldrb.w	ip, [r1, #15]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800df40:	7b8b      	ldrb	r3, [r1, #14]
 800df42:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800df44:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800df48:	f891 c00c 	ldrb.w	ip, [r1, #12]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800df4c:	ea43 030c 	orr.w	r3, r3, ip
 800df50:	f891 c00d 	ldrb.w	ip, [r1, #13]
 800df54:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800df58:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800df5c:	3904      	subs	r1, #4
 800df5e:	4570      	cmp	r0, lr
 800df60:	d1ec      	bne.n	800df3c <HAL_JPEG_Init+0xb4>
  address = (hjpeg->Instance->DHTMEM + 51);
 800df62:	6821      	ldr	r1, [r4, #0]
  value = *address & 0xFFFF0000U;
 800df64:	f8d1 342c 	ldr.w	r3, [r1, #1068]	@ 0x42c
 800df68:	4866      	ldr	r0, [pc, #408]	@ (800e104 <HAL_JPEG_Init+0x27c>)
 800df6a:	4018      	ands	r0, r3
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800df6c:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
 800df70:	4303      	orrs	r3, r0
  *address = value;
 800df72:	f8c1 342c 	str.w	r3, [r1, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800df76:	f501 6185 	add.w	r1, r1, #1064	@ 0x428
  while (index > 3UL)
 800df7a:	f1a2 0ca0 	sub.w	ip, r2, #160	@ 0xa0
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800df7e:	f892 00af 	ldrb.w	r0, [r2, #175]	@ 0xaf
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800df82:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800df86:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800df88:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800df8c:	f892 00ac 	ldrb.w	r0, [r2, #172]	@ 0xac
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800df90:	4303      	orrs	r3, r0
 800df92:	f892 00ad 	ldrb.w	r0, [r2, #173]	@ 0xad
 800df96:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800df9a:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800df9e:	3a04      	subs	r2, #4
 800dfa0:	4562      	cmp	r2, ip
 800dfa2:	d1ec      	bne.n	800df7e <HAL_JPEG_Init+0xf6>
  address = (hjpeg->Instance->DHTMEM + 51);
 800dfa4:	6822      	ldr	r2, [r4, #0]
  value = *address & 0x0000FFFFU;
 800dfa6:	f8d2 342c 	ldr.w	r3, [r2, #1068]	@ 0x42c
 800dfaa:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800dfac:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800dfb0:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 55);
 800dfb4:	6823      	ldr	r3, [r4, #0]
  value = *address & 0xFFFF0000U;
 800dfb6:	f8d3 143c 	ldr.w	r1, [r3, #1084]	@ 0x43c
 800dfba:	4a52      	ldr	r2, [pc, #328]	@ (800e104 <HAL_JPEG_Init+0x27c>)
 800dfbc:	4011      	ands	r1, r2
  *address = value;
 800dfbe:	f8c3 143c 	str.w	r1, [r3, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800dfc2:	2101      	movs	r1, #1
 800dfc4:	f8c3 1438 	str.w	r1, [r3, #1080]	@ 0x438
 800dfc8:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
 800dfcc:	f8c3 1434 	str.w	r1, [r3, #1076]	@ 0x434
 800dfd0:	f8c3 1430 	str.w	r1, [r3, #1072]	@ 0x430
  address = (hjpeg->Instance->DHTMEM + 55);
 800dfd4:	6821      	ldr	r1, [r4, #0]
  value = *address & 0x0000FFFFUL;
 800dfd6:	f8d1 343c 	ldr.w	r3, [r1, #1084]	@ 0x43c
 800dfda:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800dfdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800dfe0:	f8c1 343c 	str.w	r3, [r1, #1084]	@ 0x43c
  address = (hjpeg->Instance->DHTMEM + 58);
 800dfe4:	6823      	ldr	r3, [r4, #0]
  value = *address & 0xFFFF0000UL;
 800dfe6:	f8d3 0448 	ldr.w	r0, [r3, #1096]	@ 0x448
 800dfea:	4010      	ands	r0, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800dfec:	f640 310a 	movw	r1, #2826	@ 0xb0a
 800dff0:	4301      	orrs	r1, r0
  *address = value;
 800dff2:	f8c3 1448 	str.w	r1, [r3, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800dff6:	4944      	ldr	r1, [pc, #272]	@ (800e108 <HAL_JPEG_Init+0x280>)
 800dff8:	f8c3 1444 	str.w	r1, [r3, #1092]	@ 0x444
 800dffc:	f1a1 3104 	sub.w	r1, r1, #67372036	@ 0x4040404
 800e000:	f8c3 1440 	str.w	r1, [r3, #1088]	@ 0x440
  address = (hjpeg->Instance->DHTMEM + 58);
 800e004:	6821      	ldr	r1, [r4, #0]
  value = *address & 0x0000FFFFU;
 800e006:	f8d1 3448 	ldr.w	r3, [r1, #1096]	@ 0x448
 800e00a:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800e00c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800e010:	f8c1 3448 	str.w	r3, [r1, #1096]	@ 0x448
  address = (hjpeg->Instance->DHTMEM + 62);
 800e014:	6823      	ldr	r3, [r4, #0]
  value = *address & 0xFFFF0000U;
 800e016:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 800e01a:	4011      	ands	r1, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800e01c:	f247 7202 	movw	r2, #30466	@ 0x7702
 800e020:	430a      	orrs	r2, r1
  *address = value;
 800e022:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800e026:	4a39      	ldr	r2, [pc, #228]	@ (800e10c <HAL_JPEG_Init+0x284>)
 800e028:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
 800e02c:	4a38      	ldr	r2, [pc, #224]	@ (800e110 <HAL_JPEG_Init+0x288>)
 800e02e:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
 800e032:	4a38      	ldr	r2, [pc, #224]	@ (800e114 <HAL_JPEG_Init+0x28c>)
 800e034:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
  address = (hjpeg->Instance->DHTMEM + 62);
 800e038:	6822      	ldr	r2, [r4, #0]
  value = *address & 0x0000FFFFUL;
 800e03a:	f8d2 3458 	ldr.w	r3, [r2, #1112]	@ 0x458
 800e03e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800e040:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800e044:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458
  address = (hjpeg->Instance->DHTMEM + 102);
 800e048:	6821      	ldr	r1, [r4, #0]
 800e04a:	f501 619f 	add.w	r1, r1, #1272	@ 0x4f8
  while (index > 3UL)
 800e04e:	4a32      	ldr	r2, [pc, #200]	@ (800e118 <HAL_JPEG_Init+0x290>)
 800e050:	f1a2 0ca0 	sub.w	ip, r2, #160	@ 0xa0
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e054:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800e058:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
 800e05c:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e05e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800e062:	f892 00ae 	ldrb.w	r0, [r2, #174]	@ 0xae
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800e066:	4303      	orrs	r3, r0
 800e068:	f892 00af 	ldrb.w	r0, [r2, #175]	@ 0xaf
 800e06c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800e070:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800e074:	3a04      	subs	r2, #4
 800e076:	4594      	cmp	ip, r2
 800e078:	d1ec      	bne.n	800e054 <HAL_JPEG_Init+0x1cc>
                              (hjpeg->Instance->HUFFENC_AC0));
 800e07a:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800e07c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e080:	491f      	ldr	r1, [pc, #124]	@ (800e100 <HAL_JPEG_Init+0x278>)
 800e082:	4620      	mov	r0, r4
 800e084:	f7ff fdd3 	bl	800dc2e <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800e088:	b138      	cbz	r0, 800e09a <HAL_JPEG_Init+0x212>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800e08a:	2001      	movs	r0, #1
 800e08c:	6520      	str	r0, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800e08e:	e02c      	b.n	800e0ea <HAL_JPEG_Init+0x262>
    hjpeg->Lock = HAL_UNLOCKED;
 800e090:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800e094:	f7f3 f902 	bl	800129c <HAL_JPEG_MspInit>
 800e098:	e700      	b.n	800de9c <HAL_JPEG_Init+0x14>
                              (hjpeg->Instance->HUFFENC_AC1));
 800e09a:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800e09c:	f502 62cc 	add.w	r2, r2, #1632	@ 0x660
 800e0a0:	491d      	ldr	r1, [pc, #116]	@ (800e118 <HAL_JPEG_Init+0x290>)
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7ff fdc3 	bl	800dc2e <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	d1ee      	bne.n	800e08a <HAL_JPEG_Init+0x202>
                              hjpeg->Instance->HUFFENC_DC0);
 800e0ac:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800e0ae:	f502 62f8 	add.w	r2, r2, #1984	@ 0x7c0
 800e0b2:	4911      	ldr	r1, [pc, #68]	@ (800e0f8 <HAL_JPEG_Init+0x270>)
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f7ff fd7d 	bl	800dbb4 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d1e5      	bne.n	800e08a <HAL_JPEG_Init+0x202>
                              hjpeg->Instance->HUFFENC_DC1);
 800e0be:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800e0c0:	f502 62fc 	add.w	r2, r2, #2016	@ 0x7e0
 800e0c4:	4915      	ldr	r1, [pc, #84]	@ (800e11c <HAL_JPEG_Init+0x294>)
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f7ff fd74 	bl	800dbb4 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d1dc      	bne.n	800e08a <HAL_JPEG_Init+0x202>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800e0d0:	6822      	ldr	r2, [r4, #0]
 800e0d2:	6853      	ldr	r3, [r2, #4]
 800e0d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0d8:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	6223      	str	r3, [r4, #32]
  hjpeg->JpegOutCount = 0;
 800e0de:	6263      	str	r3, [r4, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800e0e6:	6523      	str	r3, [r4, #80]	@ 0x50
  hjpeg->Context = 0;
 800e0e8:	6563      	str	r3, [r4, #84]	@ 0x54
}
 800e0ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e0ec:	2001      	movs	r0, #1
}
 800e0ee:	4770      	bx	lr
 800e0f0:	0802db54 	.word	0x0802db54
 800e0f4:	0802db14 	.word	0x0802db14
 800e0f8:	0802dd58 	.word	0x0802dd58
 800e0fc:	0b0a0908 	.word	0x0b0a0908
 800e100:	0802dc88 	.word	0x0802dc88
 800e104:	ffff0000 	.word	0xffff0000
 800e108:	09080706 	.word	0x09080706
 800e10c:	01000404 	.word	0x01000404
 800e110:	05070403 	.word	0x05070403
 800e114:	04040201 	.word	0x04040201
 800e118:	0802dbd4 	.word	0x0802dbd4
 800e11c:	0802dd3c 	.word	0x0802dd3c

0800e120 <HAL_JPEG_GetInfo>:
  if ((hjpeg == NULL) || (pInfo == NULL))
 800e120:	2800      	cmp	r0, #0
 800e122:	f000 8094 	beq.w	800e24e <HAL_JPEG_GetInfo+0x12e>
{
 800e126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12a:	4689      	mov	r9, r1
 800e12c:	4605      	mov	r5, r0
  if ((hjpeg == NULL) || (pInfo == NULL))
 800e12e:	2900      	cmp	r1, #0
 800e130:	d060      	beq.n	800e1f4 <HAL_JPEG_GetInfo+0xd4>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800e132:	6802      	ldr	r2, [r0, #0]
 800e134:	6853      	ldr	r3, [r2, #4]
 800e136:	f003 0303 	and.w	r3, r3, #3
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d05e      	beq.n	800e1fc <HAL_JPEG_GetInfo+0xdc>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800e13e:	6853      	ldr	r3, [r2, #4]
 800e140:	f013 0303 	ands.w	r3, r3, #3
 800e144:	d005      	beq.n	800e152 <HAL_JPEG_GetInfo+0x32>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800e146:	6853      	ldr	r3, [r2, #4]
 800e148:	f003 0303 	and.w	r3, r3, #3
 800e14c:	2b03      	cmp	r3, #3
 800e14e:	d153      	bne.n	800e1f8 <HAL_JPEG_GetInfo+0xd8>
 800e150:	2330      	movs	r3, #48	@ 0x30
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800e152:	f8c9 3000 	str.w	r3, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800e156:	682a      	ldr	r2, [r5, #0]
 800e158:	6852      	ldr	r2, [r2, #4]
 800e15a:	0c12      	lsrs	r2, r2, #16
 800e15c:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800e160:	682a      	ldr	r2, [r5, #0]
 800e162:	68d2      	ldr	r2, [r2, #12]
 800e164:	0c12      	lsrs	r2, r2, #16
 800e166:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800e16a:	f023 0320 	bic.w	r3, r3, #32
 800e16e:	2b10      	cmp	r3, #16
 800e170:	d04e      	beq.n	800e210 <HAL_JPEG_GetInfo+0xf0>
 800e172:	2300      	movs	r3, #0
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800e174:	f8c9 3004 	str.w	r3, [r9, #4]
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800e178:	682b      	ldr	r3, [r5, #0]

  i = 0;
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800e17a:	4c36      	ldr	r4, [pc, #216]	@ (800e254 <HAL_JPEG_GetInfo+0x134>)
  uint32_t quality = 0;
 800e17c:	f04f 0c00 	mov.w	ip, #0
  i = 0;
 800e180:	46e6      	mov	lr, ip
 800e182:	f103 0850 	add.w	r8, r3, #80	@ 0x50
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800e186:	2664      	movs	r6, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800e188:	f241 3b88 	movw	fp, #5000	@ 0x1388
 800e18c:	e026      	b.n	800e1dc <HAL_JPEG_GetInfo+0xbc>
 800e18e:	2302      	movs	r3, #2
 800e190:	e7f0      	b.n	800e174 <HAL_JPEG_GetInfo+0x54>
        quality += 100UL;
 800e192:	f10c 0c64 	add.w	ip, ip, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800e196:	3208      	adds	r2, #8
 800e198:	3001      	adds	r0, #1
 800e19a:	2a20      	cmp	r2, #32
 800e19c:	d018      	beq.n	800e1d0 <HAL_JPEG_GetInfo+0xb0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800e19e:	fa21 f302 	lsr.w	r3, r1, r2
 800e1a2:	b2db      	uxtb	r3, r3
      if (quantVal == 1UL)
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d0f4      	beq.n	800e192 <HAL_JPEG_GetInfo+0x72>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800e1a8:	fb06 f303 	mul.w	r3, r6, r3
 800e1ac:	f890 a000 	ldrb.w	sl, [r0]
 800e1b0:	6bef      	ldr	r7, [r5, #60]	@ 0x3c
 800e1b2:	f817 a00a 	ldrb.w	sl, [r7, sl]
 800e1b6:	fbb3 f3fa 	udiv	r3, r3, sl
        if (scale <= 100UL)
 800e1ba:	2b64      	cmp	r3, #100	@ 0x64
 800e1bc:	d804      	bhi.n	800e1c8 <HAL_JPEG_GetInfo+0xa8>
          quality += (200UL - scale) / 2UL;
 800e1be:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800e1c2:	eb0c 0c53 	add.w	ip, ip, r3, lsr #1
 800e1c6:	e7e6      	b.n	800e196 <HAL_JPEG_GetInfo+0x76>
          quality += 5000UL / scale;
 800e1c8:	fbbb f3f3 	udiv	r3, fp, r3
 800e1cc:	449c      	add	ip, r3
 800e1ce:	e7e2      	b.n	800e196 <HAL_JPEG_GetInfo+0x76>
        }
      }
    }

    i += 4UL;
 800e1d0:	f10e 0e04 	add.w	lr, lr, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800e1d4:	3404      	adds	r4, #4
 800e1d6:	f1be 0f40 	cmp.w	lr, #64	@ 0x40
 800e1da:	d004      	beq.n	800e1e6 <HAL_JPEG_GetInfo+0xc6>
    quantRow = *tableAddress;
 800e1dc:	f858 100e 	ldr.w	r1, [r8, lr]
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	e7db      	b.n	800e19e <HAL_JPEG_GetInfo+0x7e>
    tableAddress ++;
  }

  return (quality / 64UL);
 800e1e6:	ea4f 139c 	mov.w	r3, ip, lsr #6
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800e1ea:	f8c9 3010 	str.w	r3, [r9, #16]
  return HAL_OK;
 800e1ee:	2000      	movs	r0, #0
}
 800e1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 800e1f4:	2001      	movs	r0, #1
 800e1f6:	e7fb      	b.n	800e1f0 <HAL_JPEG_GetInfo+0xd0>
    return HAL_ERROR;
 800e1f8:	2001      	movs	r0, #1
 800e1fa:	e7f9      	b.n	800e1f0 <HAL_JPEG_GetInfo+0xd0>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800e1fc:	2310      	movs	r3, #16
 800e1fe:	600b      	str	r3, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800e200:	6803      	ldr	r3, [r0, #0]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	0c1b      	lsrs	r3, r3, #16
 800e206:	608b      	str	r3, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800e208:	6803      	ldr	r3, [r0, #0]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	0c1b      	lsrs	r3, r3, #16
 800e20e:	60cb      	str	r3, [r1, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800e210:	6828      	ldr	r0, [r5, #0]
 800e212:	6902      	ldr	r2, [r0, #16]
 800e214:	0913      	lsrs	r3, r2, #4
 800e216:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800e21a:	6941      	ldr	r1, [r0, #20]
 800e21c:	090c      	lsrs	r4, r1, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800e21e:	6980      	ldr	r0, [r0, #24]
 800e220:	0900      	lsrs	r0, r0, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800e222:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 800e226:	f011 0f0f 	tst.w	r1, #15
 800e22a:	bf0c      	ite	eq
 800e22c:	2101      	moveq	r1, #1
 800e22e:	2100      	movne	r1, #0
 800e230:	2a01      	cmp	r2, #1
 800e232:	d101      	bne.n	800e238 <HAL_JPEG_GetInfo+0x118>
 800e234:	2900      	cmp	r1, #0
 800e236:	d1aa      	bne.n	800e18e <HAL_JPEG_GetInfo+0x6e>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800e238:	4323      	orrs	r3, r4
 800e23a:	4303      	orrs	r3, r0
 800e23c:	f013 030f 	ands.w	r3, r3, #15
 800e240:	d098      	beq.n	800e174 <HAL_JPEG_GetInfo+0x54>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800e242:	2a03      	cmp	r2, #3
 800e244:	bf14      	ite	ne
 800e246:	2300      	movne	r3, #0
 800e248:	f001 0301 	andeq.w	r3, r1, #1
 800e24c:	e792      	b.n	800e174 <HAL_JPEG_GetInfo+0x54>
    return HAL_ERROR;
 800e24e:	2001      	movs	r0, #1
}
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	0802db94 	.word	0x0802db94

0800e258 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bf18      	it	ne
 800e25c:	2900      	cmpne	r1, #0
 800e25e:	d03a      	beq.n	800e2d6 <HAL_JPEG_Decode_DMA+0x7e>
{
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	4604      	mov	r4, r0
 800e264:	4618      	mov	r0, r3
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800e266:	b394      	cbz	r4, 800e2ce <HAL_JPEG_Decode_DMA+0x76>
  __HAL_LOCK(hjpeg);
 800e268:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d030      	beq.n	800e2d2 <HAL_JPEG_Decode_DMA+0x7a>
 800e270:	2301      	movs	r3, #1
 800e272:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800e276:	f894 504d 	ldrb.w	r5, [r4, #77]	@ 0x4d
 800e27a:	b2ed      	uxtb	r5, r5
 800e27c:	429d      	cmp	r5, r3
 800e27e:	d004      	beq.n	800e28a <HAL_JPEG_Decode_DMA+0x32>
    __HAL_UNLOCK(hjpeg);
 800e280:	2300      	movs	r3, #0
 800e282:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    return HAL_BUSY;
 800e286:	2002      	movs	r0, #2
 800e288:	e022      	b.n	800e2d0 <HAL_JPEG_Decode_DMA+0x78>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800e28a:	2304      	movs	r3, #4
 800e28c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800e290:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e292:	f023 030f 	bic.w	r3, r3, #15
 800e296:	6563      	str	r3, [r4, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800e298:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e29a:	f043 030e 	orr.w	r3, r3, #14
 800e29e:	6563      	str	r3, [r4, #84]	@ 0x54
    hjpeg->pJpegInBuffPtr = pDataIn;
 800e2a0:	61a1      	str	r1, [r4, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800e2a2:	61e0      	str	r0, [r4, #28]
    hjpeg->InDataLength = InDataLength;
 800e2a4:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 800e2a6:	9b04      	ldr	r3, [sp, #16]
 800e2a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hjpeg->JpegInCount = 0;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	6223      	str	r3, [r4, #32]
    hjpeg->JpegOutCount = 0;
 800e2ae:	6263      	str	r3, [r4, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	f7ff fd47 	bl	800dd44 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f7ff fd8a 	bl	800ddd0 <JPEG_DMA_StartProcess>
 800e2bc:	b140      	cbz	r0, 800e2d0 <HAL_JPEG_Decode_DMA+0x78>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e2be:	2306      	movs	r3, #6
 800e2c0:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
      __HAL_UNLOCK(hjpeg);
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
      return HAL_ERROR;
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	e000      	b.n	800e2d0 <HAL_JPEG_Decode_DMA+0x78>
    return HAL_ERROR;
 800e2ce:	2001      	movs	r0, #1
}
 800e2d0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
 800e2d2:	2002      	movs	r0, #2
 800e2d4:	e7fc      	b.n	800e2d0 <HAL_JPEG_Decode_DMA+0x78>
    return HAL_ERROR;
 800e2d6:	2001      	movs	r0, #1
}
 800e2d8:	4770      	bx	lr

0800e2da <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800e2da:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e2dc:	f003 030c 	and.w	r3, r3, #12
 800e2e0:	2b0c      	cmp	r3, #12
 800e2e2:	d006      	beq.n	800e2f2 <HAL_JPEG_Pause+0x18>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800e2e4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e2e6:	f003 030c 	and.w	r3, r3, #12
 800e2ea:	2b08      	cmp	r3, #8
 800e2ec:	d010      	beq.n	800e310 <HAL_JPEG_Pause+0x36>
}
 800e2ee:	2000      	movs	r0, #0
 800e2f0:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800e2f2:	f011 0f01 	tst.w	r1, #1
 800e2f6:	d003      	beq.n	800e300 <HAL_JPEG_Pause+0x26>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800e2f8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e2fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e2fe:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800e300:	f011 0f02 	tst.w	r1, #2
 800e304:	d0f3      	beq.n	800e2ee <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800e306:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e308:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e30c:	6543      	str	r3, [r0, #84]	@ 0x54
 800e30e:	e7ee      	b.n	800e2ee <HAL_JPEG_Pause+0x14>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800e310:	f011 0201 	ands.w	r2, r1, #1
 800e314:	d004      	beq.n	800e320 <HAL_JPEG_Pause+0x46>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800e316:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e318:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e31c:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800e31e:	2206      	movs	r2, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800e320:	f011 0f02 	tst.w	r1, #2
 800e324:	d005      	beq.n	800e332 <HAL_JPEG_Pause+0x58>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800e326:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e328:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e32c:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800e32e:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800e332:	6801      	ldr	r1, [r0, #0]
 800e334:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800e336:	ea23 0302 	bic.w	r3, r3, r2
 800e33a:	630b      	str	r3, [r1, #48]	@ 0x30
 800e33c:	e7d7      	b.n	800e2ee <HAL_JPEG_Pause+0x14>

0800e33e <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800e33e:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800e340:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800e342:	4770      	bx	lr

0800e344 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800e344:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800e346:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800e348:	4770      	bx	lr

0800e34a <HAL_JPEG_EncodeCpltCallback>:
}
 800e34a:	4770      	bx	lr

0800e34c <JPEG_MDMAErrorCallback>:
{
 800e34c:	b508      	push	{r3, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800e34e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800e350:	6802      	ldr	r2, [r0, #0]
 800e352:	6813      	ldr	r3, [r2, #0]
 800e354:	f023 0301 	bic.w	r3, r3, #1
 800e358:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800e35a:	6802      	ldr	r2, [r0, #0]
 800e35c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800e35e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800e362:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800e364:	2301      	movs	r3, #1
 800e366:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e36a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800e36c:	f043 0304 	orr.w	r3, r3, #4
 800e370:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800e372:	f7f4 fc59 	bl	8002c28 <HAL_JPEG_ErrorCallback>
}
 800e376:	bd08      	pop	{r3, pc}

0800e378 <JPEG_ReadInputData>:
{
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800e37c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e37e:	b339      	cbz	r1, 800e3d0 <JPEG_ReadInputData+0x58>
 800e380:	460d      	mov	r5, r1
 800e382:	b32b      	cbz	r3, 800e3d0 <JPEG_ReadInputData+0x58>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800e384:	6a02      	ldr	r2, [r0, #32]
 800e386:	4293      	cmp	r3, r2
 800e388:	d928      	bls.n	800e3dc <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800e38a:	6a02      	ldr	r2, [r0, #32]
 800e38c:	1a9b      	subs	r3, r3, r2
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800e38e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e390:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800e394:	d121      	bne.n	800e3da <JPEG_ReadInputData+0x62>
 800e396:	b303      	cbz	r3, 800e3da <JPEG_ReadInputData+0x62>
    nb_words = nb_bytes / 4UL;
 800e398:	089e      	lsrs	r6, r3, #2
    if (nb_words >= nbRequestWords)
 800e39a:	ebb5 0f93 	cmp.w	r5, r3, lsr #2
 800e39e:	d82d      	bhi.n	800e3fc <JPEG_ReadInputData+0x84>
      for (index = 0; index < nbRequestWords; index++)
 800e3a0:	2000      	movs	r0, #0
        input_count = hjpeg->JpegInCount;
 800e3a2:	6a26      	ldr	r6, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800e3a4:	69a7      	ldr	r7, [r4, #24]
 800e3a6:	6822      	ldr	r2, [r4, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800e3a8:	19b9      	adds	r1, r7, r6
 800e3aa:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800e3ae:	788b      	ldrb	r3, [r1, #2]
 800e3b0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800e3b2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800e3b6:	5dbe      	ldrb	r6, [r7, r6]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800e3b8:	4333      	orrs	r3, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800e3ba:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800e3bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800e3c0:	6413      	str	r3, [r2, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800e3c2:	6a23      	ldr	r3, [r4, #32]
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	6223      	str	r3, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	4285      	cmp	r5, r0
 800e3cc:	d1e9      	bne.n	800e3a2 <JPEG_ReadInputData+0x2a>
 800e3ce:	e004      	b.n	800e3da <JPEG_ReadInputData+0x62>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f7ff ff81 	bl	800e2da <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800e3d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 800e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800e3dc:	6a02      	ldr	r2, [r0, #32]
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d1fa      	bne.n	800e3d8 <JPEG_ReadInputData+0x60>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800e3e2:	6a01      	ldr	r1, [r0, #32]
 800e3e4:	f7f4 fbac 	bl	8002b40 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800e3e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e3ea:	2b04      	cmp	r3, #4
 800e3ec:	d902      	bls.n	800e3f4 <JPEG_ReadInputData+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800e3ee:	f023 0303 	bic.w	r3, r3, #3
 800e3f2:	62a3      	str	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800e3f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e3fa:	e7c8      	b.n	800e38e <JPEG_ReadInputData+0x16>
      if (nb_words > 0UL)
 800e3fc:	2b03      	cmp	r3, #3
 800e3fe:	d917      	bls.n	800e430 <JPEG_ReadInputData+0xb8>
        for (index = 0; index < nb_words; index++)
 800e400:	2000      	movs	r0, #0
          input_count = hjpeg->JpegInCount;
 800e402:	6a25      	ldr	r5, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800e404:	69a7      	ldr	r7, [r4, #24]
 800e406:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800e408:	197a      	adds	r2, r7, r5
 800e40a:	f892 c001 	ldrb.w	ip, [r2, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800e40e:	7893      	ldrb	r3, [r2, #2]
 800e410:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800e412:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800e416:	5d7d      	ldrb	r5, [r7, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800e418:	432b      	orrs	r3, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800e41a:	78d2      	ldrb	r2, [r2, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800e41c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800e420:	640b      	str	r3, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800e422:	6a23      	ldr	r3, [r4, #32]
 800e424:	3304      	adds	r3, #4
 800e426:	6223      	str	r3, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800e428:	3001      	adds	r0, #1
 800e42a:	4286      	cmp	r6, r0
 800e42c:	d8e9      	bhi.n	800e402 <JPEG_ReadInputData+0x8a>
 800e42e:	e7d4      	b.n	800e3da <JPEG_ReadInputData+0x62>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800e430:	69a6      	ldr	r6, [r4, #24]
        dataword = 0;
 800e432:	2000      	movs	r0, #0
        for (index = 0; index < nb_bytes; index++)
 800e434:	4602      	mov	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800e436:	6a21      	ldr	r1, [r4, #32]
 800e438:	5c71      	ldrb	r1, [r6, r1]
 800e43a:	00d5      	lsls	r5, r2, #3
 800e43c:	40a9      	lsls	r1, r5
 800e43e:	4308      	orrs	r0, r1
          hjpeg->JpegInCount++;
 800e440:	6a21      	ldr	r1, [r4, #32]
 800e442:	3101      	adds	r1, #1
 800e444:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800e446:	3201      	adds	r2, #1
 800e448:	4293      	cmp	r3, r2
 800e44a:	d8f4      	bhi.n	800e436 <JPEG_ReadInputData+0xbe>
        hjpeg->Instance->DIR = dataword;
 800e44c:	6823      	ldr	r3, [r4, #0]
 800e44e:	6418      	str	r0, [r3, #64]	@ 0x40
}
 800e450:	e7c3      	b.n	800e3da <JPEG_ReadInputData+0x62>

0800e452 <JPEG_MDMAInCpltCallback>:
{
 800e452:	b530      	push	{r4, r5, lr}
 800e454:	b083      	sub	sp, #12
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800e456:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800e458:	6822      	ldr	r2, [r4, #0]
 800e45a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800e45c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800e460:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800e462:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e464:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800e468:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800e46c:	041b      	lsls	r3, r3, #16
 800e46e:	0c1b      	lsrs	r3, r3, #16
 800e470:	2b0c      	cmp	r3, #12
 800e472:	d001      	beq.n	800e478 <JPEG_MDMAInCpltCallback+0x26>
}
 800e474:	b003      	add	sp, #12
 800e476:	bd30      	pop	{r4, r5, pc}
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800e478:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e47a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800e47c:	6803      	ldr	r3, [r0, #0]
 800e47e:	695a      	ldr	r2, [r3, #20]
 800e480:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800e484:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e486:	1a9b      	subs	r3, r3, r2
 800e488:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800e48a:	6a21      	ldr	r1, [r4, #32]
 800e48c:	4620      	mov	r0, r4
 800e48e:	f7f4 fb57 	bl	8002b40 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800e492:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e494:	42ab      	cmp	r3, r5
 800e496:	d32a      	bcc.n	800e4ee <JPEG_MDMAInCpltCallback+0x9c>
      if (inXfrSize == 0UL)
 800e498:	b1f5      	cbz	r5, 800e4d8 <JPEG_MDMAInCpltCallback+0x86>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800e49a:	fbb3 f2f5 	udiv	r2, r3, r5
 800e49e:	fb05 3212 	mls	r2, r5, r2, r3
 800e4a2:	1a9b      	subs	r3, r3, r2
 800e4a4:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800e4a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4a8:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800e4ac:	d128      	bne.n	800e500 <JPEG_MDMAInCpltCallback+0xae>
 800e4ae:	b33b      	cbz	r3, 800e500 <JPEG_MDMAInCpltCallback+0xae>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800e4b0:	6822      	ldr	r2, [r4, #0]
 800e4b2:	69a1      	ldr	r1, [r4, #24]
 800e4b4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e4b6:	2501      	movs	r5, #1
 800e4b8:	9500      	str	r5, [sp, #0]
 800e4ba:	3240      	adds	r2, #64	@ 0x40
 800e4bc:	f000 fe3f 	bl	800f13e <HAL_MDMA_Start_IT>
 800e4c0:	b1f0      	cbz	r0, 800e500 <JPEG_MDMAInCpltCallback+0xae>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e4c2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e4c4:	f043 0304 	orr.w	r3, r3, #4
 800e4c8:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e4ca:	2306      	movs	r3, #6
 800e4cc:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f7f4 fba9 	bl	8002c28 <HAL_JPEG_ErrorCallback>
        return;
 800e4d6:	e7cd      	b.n	800e474 <JPEG_MDMAInCpltCallback+0x22>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e4d8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e4da:	f043 0304 	orr.w	r3, r3, #4
 800e4de:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e4e0:	2306      	movs	r3, #6
 800e4e2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f7f4 fb9e 	bl	8002c28 <HAL_JPEG_ErrorCallback>
        return;
 800e4ec:	e7c2      	b.n	800e474 <JPEG_MDMAInCpltCallback+0x22>
    else if (hjpeg->InDataLength > 0UL)
 800e4ee:	b133      	cbz	r3, 800e4fe <JPEG_MDMAInCpltCallback+0xac>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800e4f0:	f013 0f03 	tst.w	r3, #3
 800e4f4:	d00a      	beq.n	800e50c <JPEG_MDMAInCpltCallback+0xba>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800e4f6:	f023 0303 	bic.w	r3, r3, #3
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	e7d2      	b.n	800e4a4 <JPEG_MDMAInCpltCallback+0x52>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800e4fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800e500:	6822      	ldr	r2, [r4, #0]
 800e502:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800e504:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e508:	6313      	str	r3, [r2, #48]	@ 0x30
 800e50a:	e7b3      	b.n	800e474 <JPEG_MDMAInCpltCallback+0x22>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800e50c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e50e:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800e512:	d0cd      	beq.n	800e4b0 <JPEG_MDMAInCpltCallback+0x5e>
 800e514:	e7f4      	b.n	800e500 <JPEG_MDMAInCpltCallback+0xae>

0800e516 <JPEG_StoreOutputData>:
{
 800e516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e518:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800e51a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e51c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e51e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e522:	429a      	cmp	r2, r3
 800e524:	d328      	bcc.n	800e578 <JPEG_StoreOutputData+0x62>
    for (index = 0; index < nbOutputWords; index++)
 800e526:	b1d1      	cbz	r1, 800e55e <JPEG_StoreOutputData+0x48>
 800e528:	2000      	movs	r0, #0
      dataword = hjpeg->Instance->DOR;
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800e52e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e530:	69e5      	ldr	r5, [r4, #28]
 800e532:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800e534:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800e536:	69e2      	ldr	r2, [r4, #28]
 800e538:	442a      	add	r2, r5
 800e53a:	0a1d      	lsrs	r5, r3, #8
 800e53c:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800e53e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800e540:	69e2      	ldr	r2, [r4, #28]
 800e542:	442a      	add	r2, r5
 800e544:	0c1d      	lsrs	r5, r3, #16
 800e546:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800e548:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800e54a:	69e2      	ldr	r2, [r4, #28]
 800e54c:	442a      	add	r2, r5
 800e54e:	0e1b      	lsrs	r3, r3, #24
 800e550:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800e552:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e554:	3304      	adds	r3, #4
 800e556:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800e558:	3001      	adds	r0, #1
 800e55a:	4281      	cmp	r1, r0
 800e55c:	d1e5      	bne.n	800e52a <JPEG_StoreOutputData+0x14>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800e55e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e560:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e562:	429a      	cmp	r2, r3
 800e564:	d000      	beq.n	800e568 <JPEG_StoreOutputData+0x52>
}
 800e566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800e568:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e56a:	69e1      	ldr	r1, [r4, #28]
 800e56c:	4620      	mov	r0, r4
 800e56e:	f7f4 fb05 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	6263      	str	r3, [r4, #36]	@ 0x24
 800e576:	e7f6      	b.n	800e566 <JPEG_StoreOutputData+0x50>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800e578:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d9f3      	bls.n	800e566 <JPEG_StoreOutputData+0x50>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800e57e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e580:	1ad2      	subs	r2, r2, r3
 800e582:	0895      	lsrs	r5, r2, #2
    for (index = 0; index < nb_words; index++)
 800e584:	2a03      	cmp	r2, #3
 800e586:	d91a      	bls.n	800e5be <JPEG_StoreOutputData+0xa8>
 800e588:	2100      	movs	r1, #0
      dataword = hjpeg->Instance->DOR;
 800e58a:	6823      	ldr	r3, [r4, #0]
 800e58c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800e58e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e590:	69e0      	ldr	r0, [r4, #28]
 800e592:	5483      	strb	r3, [r0, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800e594:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e596:	69e2      	ldr	r2, [r4, #28]
 800e598:	4402      	add	r2, r0
 800e59a:	0a18      	lsrs	r0, r3, #8
 800e59c:	7050      	strb	r0, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800e59e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e5a0:	69e2      	ldr	r2, [r4, #28]
 800e5a2:	4402      	add	r2, r0
 800e5a4:	0c18      	lsrs	r0, r3, #16
 800e5a6:	7090      	strb	r0, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800e5a8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e5aa:	69e2      	ldr	r2, [r4, #28]
 800e5ac:	4402      	add	r2, r0
 800e5ae:	0e1b      	lsrs	r3, r3, #24
 800e5b0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800e5b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e5b4:	3304      	adds	r3, #4
 800e5b6:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800e5b8:	3101      	adds	r1, #1
 800e5ba:	428d      	cmp	r5, r1
 800e5bc:	d8e5      	bhi.n	800e58a <JPEG_StoreOutputData+0x74>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800e5be:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e5c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e5c2:	429f      	cmp	r7, r3
 800e5c4:	d02c      	beq.n	800e620 <JPEG_StoreOutputData+0x10a>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800e5c6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800e5c8:	6823      	ldr	r3, [r4, #0]
 800e5ca:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800e5cc:	ebb7 0c05 	subs.w	ip, r7, r5
 800e5d0:	d00e      	beq.n	800e5f0 <JPEG_StoreOutputData+0xda>
 800e5d2:	2100      	movs	r1, #0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800e5d4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e5d6:	69e2      	ldr	r2, [r4, #28]
 800e5d8:	f001 0303 	and.w	r3, r1, #3
 800e5dc:	00db      	lsls	r3, r3, #3
 800e5de:	fa26 f303 	lsr.w	r3, r6, r3
 800e5e2:	5413      	strb	r3, [r2, r0]
        hjpeg->JpegOutCount++;
 800e5e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800e5ea:	3101      	adds	r1, #1
 800e5ec:	458c      	cmp	ip, r1
 800e5ee:	d1f1      	bne.n	800e5d4 <JPEG_StoreOutputData+0xbe>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800e5f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e5f2:	69e1      	ldr	r1, [r4, #28]
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f7f4 fac1 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800e5fe:	1d2b      	adds	r3, r5, #4
 800e600:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800e602:	2b03      	cmp	r3, #3
 800e604:	d8af      	bhi.n	800e566 <JPEG_StoreOutputData+0x50>
 800e606:	00db      	lsls	r3, r3, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800e608:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e60a:	69e1      	ldr	r1, [r4, #28]
 800e60c:	fa26 f003 	lsr.w	r0, r6, r3
 800e610:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
 800e612:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e614:	3201      	adds	r2, #1
 800e616:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800e618:	3308      	adds	r3, #8
 800e61a:	2b20      	cmp	r3, #32
 800e61c:	d1f4      	bne.n	800e608 <JPEG_StoreOutputData+0xf2>
 800e61e:	e7a2      	b.n	800e566 <JPEG_StoreOutputData+0x50>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800e620:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e622:	69e1      	ldr	r1, [r4, #28]
 800e624:	4620      	mov	r0, r4
 800e626:	f7f4 faa9 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800e62a:	2300      	movs	r3, #0
 800e62c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e62e:	e79a      	b.n	800e566 <JPEG_StoreOutputData+0x50>

0800e630 <JPEG_Process>:
{
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800e634:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e636:	f003 0303 	and.w	r3, r3, #3
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	d021      	beq.n	800e682 <JPEG_Process+0x52>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800e63e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e640:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800e644:	d108      	bne.n	800e658 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e64a:	f012 0f02 	tst.w	r2, #2
 800e64e:	d132      	bne.n	800e6b6 <JPEG_Process+0x86>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800e650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e652:	f013 0f04 	tst.w	r3, #4
 800e656:	d133      	bne.n	800e6c0 <JPEG_Process+0x90>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800e658:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e65a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800e65e:	d108      	bne.n	800e672 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e664:	f012 0f08 	tst.w	r2, #8
 800e668:	d12f      	bne.n	800e6ca <JPEG_Process+0x9a>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800e66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e66c:	f013 0f10 	tst.w	r3, #16
 800e670:	d130      	bne.n	800e6d4 <JPEG_Process+0xa4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800e672:	6822      	ldr	r2, [r4, #0]
 800e674:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800e676:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e67a:	2b20      	cmp	r3, #32
 800e67c:	d02f      	beq.n	800e6de <JPEG_Process+0xae>
  return JPEG_PROCESS_ONGOING;
 800e67e:	2000      	movs	r0, #0
}
 800e680:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800e682:	6803      	ldr	r3, [r0, #0]
 800e684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e686:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e68a:	d0d8      	beq.n	800e63e <JPEG_Process+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800e68c:	1d05      	adds	r5, r0, #4
 800e68e:	4629      	mov	r1, r5
 800e690:	f7ff fd46 	bl	800e120 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800e694:	2300      	movs	r3, #0
 800e696:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800e698:	4629      	mov	r1, r5
 800e69a:	4620      	mov	r0, r4
 800e69c:	f7f4 fa0c 	bl	8002ab8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800e6a0:	6822      	ldr	r2, [r4, #0]
 800e6a2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800e6a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6a8:	6313      	str	r3, [r2, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800e6aa:	6822      	ldr	r2, [r4, #0]
 800e6ac:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e6ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6b2:	6393      	str	r3, [r2, #56]	@ 0x38
 800e6b4:	e7c3      	b.n	800e63e <JPEG_Process+0xe>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800e6b6:	2108      	movs	r1, #8
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	f7ff fe5d 	bl	800e378 <JPEG_ReadInputData>
 800e6be:	e7cb      	b.n	800e658 <JPEG_Process+0x28>
      JPEG_ReadInputData(hjpeg, 1);
 800e6c0:	2101      	movs	r1, #1
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f7ff fe58 	bl	800e378 <JPEG_ReadInputData>
 800e6c8:	e7c6      	b.n	800e658 <JPEG_Process+0x28>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800e6ca:	2108      	movs	r1, #8
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f7ff ff22 	bl	800e516 <JPEG_StoreOutputData>
 800e6d2:	e7ce      	b.n	800e672 <JPEG_Process+0x42>
      JPEG_StoreOutputData(hjpeg, 1);
 800e6d4:	2101      	movs	r1, #1
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f7ff ff1d 	bl	800e516 <JPEG_StoreOutputData>
 800e6dc:	e7c9      	b.n	800e672 <JPEG_Process+0x42>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800e6de:	6813      	ldr	r3, [r2, #0]
 800e6e0:	f023 0301 	bic.w	r3, r3, #1
 800e6e4:	6013      	str	r3, [r2, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800e6e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e6e8:	f003 030c 	and.w	r3, r3, #12
 800e6ec:	2b08      	cmp	r3, #8
 800e6ee:	d01a      	beq.n	800e726 <JPEG_Process+0xf6>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800e6f0:	6822      	ldr	r2, [r4, #0]
 800e6f2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e6f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e6f8:	6393      	str	r3, [r2, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800e6fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e6fc:	b9cb      	cbnz	r3, 800e732 <JPEG_Process+0x102>
    tmpContext = hjpeg->Context;
 800e6fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800e700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e702:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
 800e706:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800e708:	2200      	movs	r2, #0
 800e70a:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800e70e:	2201      	movs	r2, #1
 800e710:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800e714:	f003 0303 	and.w	r3, r3, #3
 800e718:	2b02      	cmp	r3, #2
 800e71a:	d012      	beq.n	800e742 <JPEG_Process+0x112>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800e71c:	4620      	mov	r0, r4
 800e71e:	f7ff fe14 	bl	800e34a <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800e722:	2001      	movs	r0, #1
 800e724:	e7ac      	b.n	800e680 <JPEG_Process+0x50>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800e726:	6822      	ldr	r2, [r4, #0]
 800e728:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800e72a:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800e72e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e730:	e7de      	b.n	800e6f0 <JPEG_Process+0xc0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800e732:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e734:	69e1      	ldr	r1, [r4, #28]
 800e736:	4620      	mov	r0, r4
 800e738:	f7f4 fa20 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	6263      	str	r3, [r4, #36]	@ 0x24
 800e740:	e7dd      	b.n	800e6fe <JPEG_Process+0xce>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800e742:	4620      	mov	r0, r4
 800e744:	f7f4 fa72 	bl	8002c2c <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800e748:	2001      	movs	r0, #1
 800e74a:	e799      	b.n	800e680 <JPEG_Process+0x50>

0800e74c <JPEG_DMA_PollResidualData>:
{
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	4604      	mov	r4, r0
 800e750:	2510      	movs	r5, #16
 800e752:	e001      	b.n	800e758 <JPEG_DMA_PollResidualData+0xc>
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800e754:	3d01      	subs	r5, #1
 800e756:	d02a      	beq.n	800e7ae <JPEG_DMA_PollResidualData+0x62>
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800e758:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e75a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800e75e:	d1f9      	bne.n	800e754 <JPEG_DMA_PollResidualData+0x8>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e764:	f012 0f10 	tst.w	r2, #16
 800e768:	d0f4      	beq.n	800e754 <JPEG_DMA_PollResidualData+0x8>
        dataOut = hjpeg->Instance->DOR;
 800e76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800e76c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e76e:	69e1      	ldr	r1, [r4, #28]
 800e770:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800e772:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e774:	69e2      	ldr	r2, [r4, #28]
 800e776:	440a      	add	r2, r1
 800e778:	0a19      	lsrs	r1, r3, #8
 800e77a:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800e77c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e77e:	69e2      	ldr	r2, [r4, #28]
 800e780:	440a      	add	r2, r1
 800e782:	0c19      	lsrs	r1, r3, #16
 800e784:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800e786:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e788:	69e2      	ldr	r2, [r4, #28]
 800e78a:	440a      	add	r2, r1
 800e78c:	0e1b      	lsrs	r3, r3, #24
 800e78e:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800e790:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e792:	3304      	adds	r3, #4
 800e794:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800e796:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e798:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d1da      	bne.n	800e754 <JPEG_DMA_PollResidualData+0x8>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800e79e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e7a0:	69e1      	ldr	r1, [r4, #28]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f7f4 f9ea 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	6263      	str	r3, [r4, #36]	@ 0x24
 800e7ac:	e7d2      	b.n	800e754 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 800e7ae:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e7b4:	f012 0f10 	tst.w	r2, #16
 800e7b8:	d002      	beq.n	800e7c0 <JPEG_DMA_PollResidualData+0x74>
 800e7ba:	f411 5f00 	tst.w	r1, #8192	@ 0x2000
 800e7be:	d117      	bne.n	800e7f0 <JPEG_DMA_PollResidualData+0xa4>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	f022 0201 	bic.w	r2, r2, #1
 800e7c6:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800e7c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e7ca:	b993      	cbnz	r3, 800e7f2 <JPEG_DMA_PollResidualData+0xa6>
    tmpContext = hjpeg->Context;
 800e7cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800e7ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e7d0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
 800e7d4:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800e7dc:	2201      	movs	r2, #1
 800e7de:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800e7e2:	f003 0303 	and.w	r3, r3, #3
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d00b      	beq.n	800e802 <JPEG_DMA_PollResidualData+0xb6>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f7ff fdad 	bl	800e34a <HAL_JPEG_EncodeCpltCallback>
}
 800e7f0:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800e7f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e7f4:	69e1      	ldr	r1, [r4, #28]
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f7f4 f9c0 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	6263      	str	r3, [r4, #36]	@ 0x24
 800e800:	e7e4      	b.n	800e7cc <JPEG_DMA_PollResidualData+0x80>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800e802:	4620      	mov	r0, r4
 800e804:	f7f4 fa12 	bl	8002c2c <HAL_JPEG_DecodeCpltCallback>
 800e808:	e7f2      	b.n	800e7f0 <JPEG_DMA_PollResidualData+0xa4>

0800e80a <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800e80a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e80c:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
 800e810:	f000 808a 	beq.w	800e928 <HAL_JPEG_Resume+0x11e>
{
 800e814:	b530      	push	{r4, r5, lr}
 800e816:	b083      	sub	sp, #12
 800e818:	4604      	mov	r4, r0
 800e81a:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800e81c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e81e:	f003 030c 	and.w	r3, r3, #12
 800e822:	2b0c      	cmp	r3, #12
 800e824:	d007      	beq.n	800e836 <HAL_JPEG_Resume+0x2c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800e826:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e828:	f003 030c 	and.w	r3, r3, #12
 800e82c:	2b08      	cmp	r3, #8
 800e82e:	d064      	beq.n	800e8fa <HAL_JPEG_Resume+0xf0>
  return HAL_OK;
 800e830:	2000      	movs	r0, #0
}
 800e832:	b003      	add	sp, #12
 800e834:	bd30      	pop	{r4, r5, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800e836:	f011 0f01 	tst.w	r1, #1
 800e83a:	d00e      	beq.n	800e85a <HAL_JPEG_Resume+0x50>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800e83c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e83e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e842:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800e844:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800e846:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800e848:	b1f2      	cbz	r2, 800e888 <HAL_JPEG_Resume+0x7e>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800e84a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e84c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e850:	fb02 3211 	mls	r2, r2, r1, r3
 800e854:	1a9b      	subs	r3, r3, r2
 800e856:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800e858:	b9fb      	cbnz	r3, 800e89a <HAL_JPEG_Resume+0x90>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800e85a:	f015 0f02 	tst.w	r5, #2
 800e85e:	d065      	beq.n	800e92c <HAL_JPEG_Resume+0x122>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800e860:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e866:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800e868:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e86a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800e86e:	d126      	bne.n	800e8be <HAL_JPEG_Resume+0xb4>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800e870:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800e872:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800e874:	bb42      	cbnz	r2, 800e8c8 <HAL_JPEG_Resume+0xbe>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e876:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e878:	f043 0304 	orr.w	r3, r3, #4
 800e87c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e87e:	2306      	movs	r3, #6
 800e880:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          return HAL_ERROR;
 800e884:	2001      	movs	r0, #1
 800e886:	e7d4      	b.n	800e832 <HAL_JPEG_Resume+0x28>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e888:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e88a:	f043 0304 	orr.w	r3, r3, #4
 800e88e:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e890:	2306      	movs	r3, #6
 800e892:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        return HAL_ERROR;
 800e896:	2001      	movs	r0, #1
 800e898:	e7cb      	b.n	800e832 <HAL_JPEG_Resume+0x28>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800e89a:	6822      	ldr	r2, [r4, #0]
 800e89c:	2101      	movs	r1, #1
 800e89e:	9100      	str	r1, [sp, #0]
 800e8a0:	3240      	adds	r2, #64	@ 0x40
 800e8a2:	69a1      	ldr	r1, [r4, #24]
 800e8a4:	f000 fc4b 	bl	800f13e <HAL_MDMA_Start_IT>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d0d6      	beq.n	800e85a <HAL_JPEG_Resume+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e8ac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e8ae:	f043 0304 	orr.w	r3, r3, #4
 800e8b2:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e8b4:	2306      	movs	r3, #6
 800e8b6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          return HAL_ERROR;
 800e8ba:	2001      	movs	r0, #1
 800e8bc:	e7b9      	b.n	800e832 <HAL_JPEG_Resume+0x28>
        JPEG_DMA_PollResidualData(hjpeg);
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f7ff ff44 	bl	800e74c <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	e7b4      	b.n	800e832 <HAL_JPEG_Resume+0x28>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800e8c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e8ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8ce:	fb02 3211 	mls	r2, r2, r1, r3
 800e8d2:	1a9b      	subs	r3, r3, r2
 800e8d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800e8d6:	6821      	ldr	r1, [r4, #0]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	9200      	str	r2, [sp, #0]
 800e8dc:	69e2      	ldr	r2, [r4, #28]
 800e8de:	3144      	adds	r1, #68	@ 0x44
 800e8e0:	f000 fc2d 	bl	800f13e <HAL_MDMA_Start_IT>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d0a4      	beq.n	800e832 <HAL_JPEG_Resume+0x28>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800e8e8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e8ea:	f043 0304 	orr.w	r3, r3, #4
 800e8ee:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800e8f0:	2306      	movs	r3, #6
 800e8f2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          return HAL_ERROR;
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	e79b      	b.n	800e832 <HAL_JPEG_Resume+0x28>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800e8fa:	f011 0201 	ands.w	r2, r1, #1
 800e8fe:	d004      	beq.n	800e90a <HAL_JPEG_Resume+0x100>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800e900:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e906:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800e908:	2206      	movs	r2, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800e90a:	f015 0f02 	tst.w	r5, #2
 800e90e:	d005      	beq.n	800e91c <HAL_JPEG_Resume+0x112>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800e910:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e912:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e916:	6563      	str	r3, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800e918:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800e91c:	6821      	ldr	r1, [r4, #0]
 800e91e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800e920:	4313      	orrs	r3, r2
 800e922:	630b      	str	r3, [r1, #48]	@ 0x30
  return HAL_OK;
 800e924:	2000      	movs	r0, #0
 800e926:	e784      	b.n	800e832 <HAL_JPEG_Resume+0x28>
    return HAL_ERROR;
 800e928:	2001      	movs	r0, #1
}
 800e92a:	4770      	bx	lr
  return HAL_OK;
 800e92c:	2000      	movs	r0, #0
 800e92e:	e780      	b.n	800e832 <HAL_JPEG_Resume+0x28>

0800e930 <JPEG_DMA_EndProcess>:
{
 800e930:	b510      	push	{r4, lr}
 800e932:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800e934:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e936:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	695b      	ldr	r3, [r3, #20]
 800e93c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800e940:	1ad3      	subs	r3, r2, r3
 800e942:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800e944:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e946:	429a      	cmp	r2, r3
 800e948:	d01e      	beq.n	800e988 <JPEG_DMA_EndProcess+0x58>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e94e:	f013 0f10 	tst.w	r3, #16
 800e952:	d12c      	bne.n	800e9ae <JPEG_DMA_EndProcess+0x7e>
    if (hjpeg->JpegOutCount > 0UL)
 800e954:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e956:	b9f3      	cbnz	r3, 800e996 <JPEG_DMA_EndProcess+0x66>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800e958:	6822      	ldr	r2, [r4, #0]
 800e95a:	6813      	ldr	r3, [r2, #0]
 800e95c:	f023 0301 	bic.w	r3, r3, #1
 800e960:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800e962:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800e964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e966:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
 800e96a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800e96c:	2200      	movs	r2, #0
 800e96e:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800e972:	2201      	movs	r2, #1
 800e974:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800e978:	f003 0303 	and.w	r3, r3, #3
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d012      	beq.n	800e9a6 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800e980:	4620      	mov	r0, r4
 800e982:	f7ff fce2 	bl	800e34a <HAL_JPEG_EncodeCpltCallback>
 800e986:	e016      	b.n	800e9b6 <JPEG_DMA_EndProcess+0x86>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800e988:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800e98a:	69c1      	ldr	r1, [r0, #28]
 800e98c:	f7f4 f8f6 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800e990:	2300      	movs	r3, #0
 800e992:	6263      	str	r3, [r4, #36]	@ 0x24
 800e994:	e7d9      	b.n	800e94a <JPEG_DMA_EndProcess+0x1a>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800e996:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e998:	69e1      	ldr	r1, [r4, #28]
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7f4 f8ee 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	6263      	str	r3, [r4, #36]	@ 0x24
 800e9a4:	e7d8      	b.n	800e958 <JPEG_DMA_EndProcess+0x28>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7f4 f940 	bl	8002c2c <HAL_JPEG_DecodeCpltCallback>
 800e9ac:	e003      	b.n	800e9b6 <JPEG_DMA_EndProcess+0x86>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800e9ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e9b0:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800e9b4:	d000      	beq.n	800e9b8 <JPEG_DMA_EndProcess+0x88>
}
 800e9b6:	bd10      	pop	{r4, pc}
    JPEG_DMA_PollResidualData(hjpeg);
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f7ff fec7 	bl	800e74c <JPEG_DMA_PollResidualData>
}
 800e9be:	e7fa      	b.n	800e9b6 <JPEG_DMA_EndProcess+0x86>

0800e9c0 <JPEG_MDMAOutAbortCallback>:
{
 800e9c0:	b508      	push	{r3, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800e9c2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800e9c4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e9c6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800e9ca:	d100      	bne.n	800e9ce <JPEG_MDMAOutAbortCallback+0xe>
}
 800e9cc:	bd08      	pop	{r3, pc}
    JPEG_DMA_EndProcess(hjpeg);
 800e9ce:	f7ff ffaf 	bl	800e930 <JPEG_DMA_EndProcess>
}
 800e9d2:	e7fb      	b.n	800e9cc <JPEG_MDMAOutAbortCallback+0xc>

0800e9d4 <JPEG_MDMAOutCpltCallback>:
{
 800e9d4:	b530      	push	{r4, r5, lr}
 800e9d6:	b083      	sub	sp, #12
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800e9d8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800e9da:	6822      	ldr	r2, [r4, #0]
 800e9dc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800e9de:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800e9e2:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800e9e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e9e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800e9ea:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800e9ee:	041b      	lsls	r3, r3, #16
 800e9f0:	0c1b      	lsrs	r3, r3, #16
 800e9f2:	2b0c      	cmp	r3, #12
 800e9f4:	d001      	beq.n	800e9fa <JPEG_MDMAOutCpltCallback+0x26>
}
 800e9f6:	b003      	add	sp, #12
 800e9f8:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9fe:	f013 0f20 	tst.w	r3, #32
 800ea02:	d005      	beq.n	800ea10 <JPEG_MDMAOutCpltCallback+0x3c>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ea04:	6822      	ldr	r2, [r4, #0]
 800ea06:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ea08:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ea0c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ea0e:	e7f2      	b.n	800e9f6 <JPEG_MDMAOutCpltCallback+0x22>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ea10:	6803      	ldr	r3, [r0, #0]
 800ea12:	695a      	ldr	r2, [r3, #20]
 800ea14:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800ea18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ea1a:	1a9b      	subs	r3, r3, r2
 800ea1c:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ea1e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ea20:	69e1      	ldr	r1, [r4, #28]
 800ea22:	4620      	mov	r0, r4
 800ea24:	f7f4 f8aa 	bl	8002b7c <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ea28:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ea2a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800ea2e:	d1e9      	bne.n	800ea04 <JPEG_MDMAOutCpltCallback+0x30>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ea30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ea32:	69e2      	ldr	r2, [r4, #28]
 800ea34:	6821      	ldr	r1, [r4, #0]
 800ea36:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ea38:	2501      	movs	r5, #1
 800ea3a:	9500      	str	r5, [sp, #0]
 800ea3c:	3144      	adds	r1, #68	@ 0x44
 800ea3e:	f000 fb7e 	bl	800f13e <HAL_MDMA_Start_IT>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	d0de      	beq.n	800ea04 <JPEG_MDMAOutCpltCallback+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ea46:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ea48:	f043 0304 	orr.w	r3, r3, #4
 800ea4c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ea4e:	2306      	movs	r3, #6
 800ea50:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800ea54:	4620      	mov	r0, r4
 800ea56:	f7f4 f8e7 	bl	8002c28 <HAL_JPEG_ErrorCallback>
          return;
 800ea5a:	e7cc      	b.n	800e9f6 <JPEG_MDMAOutCpltCallback+0x22>

0800ea5c <HAL_JPEG_IRQHandler>:
{
 800ea5c:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
 800ea5e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800ea62:	3b03      	subs	r3, #3
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d900      	bls.n	800ea6a <HAL_JPEG_IRQHandler+0xe>
}
 800ea68:	bd38      	pop	{r3, r4, r5, pc}
 800ea6a:	4604      	mov	r4, r0
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ea6c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ea6e:	f003 030c 	and.w	r3, r3, #12
 800ea72:	2b08      	cmp	r3, #8
 800ea74:	d030      	beq.n	800ead8 <HAL_JPEG_IRQHandler+0x7c>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ea76:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ea78:	f003 030c 	and.w	r3, r3, #12
 800ea7c:	2b0c      	cmp	r3, #12
 800ea7e:	d1f3      	bne.n	800ea68 <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ea80:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ea82:	f003 0303 	and.w	r3, r3, #3
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d029      	beq.n	800eade <HAL_JPEG_IRQHandler+0x82>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea8e:	f012 0f20 	tst.w	r2, #32
 800ea92:	d0e9      	beq.n	800ea68 <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ea94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ea9a:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	f022 0201 	bic.w	r2, r2, #1
 800eaa2:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800eaa4:	6822      	ldr	r2, [r4, #0]
 800eaa6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800eaa8:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800eaac:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800eaae:	6822      	ldr	r2, [r4, #0]
 800eab0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800eab2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800eab6:	6393      	str	r3, [r2, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800eab8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800eaba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	d026      	beq.n	800eb12 <HAL_JPEG_IRQHandler+0xb6>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800eac4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800eac6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	2b02      	cmp	r3, #2
 800eace:	d023      	beq.n	800eb18 <HAL_JPEG_IRQHandler+0xbc>
      JPEG_DMA_EndProcess(hjpeg);
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7ff ff2d 	bl	800e930 <JPEG_DMA_EndProcess>
}
 800ead6:	e7c7      	b.n	800ea68 <HAL_JPEG_IRQHandler+0xc>
        (void) JPEG_Process(hjpeg);
 800ead8:	f7ff fdaa 	bl	800e630 <JPEG_Process>
 800eadc:	e7c4      	b.n	800ea68 <HAL_JPEG_IRQHandler+0xc>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800eade:	6803      	ldr	r3, [r0, #0]
 800eae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eae2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800eae6:	d0d0      	beq.n	800ea8a <HAL_JPEG_IRQHandler+0x2e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800eae8:	1d05      	adds	r5, r0, #4
 800eaea:	4629      	mov	r1, r5
 800eaec:	f7ff fb18 	bl	800e120 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f7f3 ffde 	bl	8002ab8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800eafc:	6822      	ldr	r2, [r4, #0]
 800eafe:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800eb00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb04:	6313      	str	r3, [r2, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800eb06:	6822      	ldr	r2, [r4, #0]
 800eb08:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800eb0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb0e:	6393      	str	r3, [r2, #56]	@ 0x38
 800eb10:	e7bb      	b.n	800ea8a <HAL_JPEG_IRQHandler+0x2e>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800eb12:	f000 fb6a 	bl	800f1ea <HAL_MDMA_Abort_IT>
 800eb16:	e7d5      	b.n	800eac4 <HAL_JPEG_IRQHandler+0x68>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800eb18:	f000 fb67 	bl	800f1ea <HAL_MDMA_Abort_IT>
 800eb1c:	e7a4      	b.n	800ea68 <HAL_JPEG_IRQHandler+0xc>
	...

0800eb20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800eb20:	b430      	push	{r4, r5}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800eb22:	6804      	ldr	r4, [r0, #0]
 800eb24:	68e3      	ldr	r3, [r4, #12]
 800eb26:	f3c3 4c0b 	ubfx	ip, r3, #16, #12
 800eb2a:	684b      	ldr	r3, [r1, #4]
 800eb2c:	449c      	add	ip, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800eb2e:	01d3      	lsls	r3, r2, #7
 800eb30:	3384      	adds	r3, #132	@ 0x84
 800eb32:	441c      	add	r4, r3
 800eb34:	6862      	ldr	r2, [r4, #4]
 800eb36:	f402 4270 	and.w	r2, r2, #61440	@ 0xf000
 800eb3a:	6062      	str	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800eb3c:	6804      	ldr	r4, [r0, #0]
 800eb3e:	68e2      	ldr	r2, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800eb40:	441c      	add	r4, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800eb42:	f3c2 420b 	ubfx	r2, r2, #16, #12
 800eb46:	680d      	ldr	r5, [r1, #0]
 800eb48:	3501      	adds	r5, #1
 800eb4a:	442a      	add	r2, r5
 800eb4c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800eb50:	6062      	str	r2, [r4, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800eb52:	6802      	ldr	r2, [r0, #0]
 800eb54:	68d4      	ldr	r4, [r2, #12]
 800eb56:	f3c4 0c0a 	ubfx	ip, r4, #0, #11
 800eb5a:	68cc      	ldr	r4, [r1, #12]
 800eb5c:	44a4      	add	ip, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800eb5e:	441a      	add	r2, r3
 800eb60:	6894      	ldr	r4, [r2, #8]
 800eb62:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 800eb66:	6094      	str	r4, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800eb68:	6804      	ldr	r4, [r0, #0]
 800eb6a:	68e5      	ldr	r5, [r4, #12]
 800eb6c:	441c      	add	r4, r3
 800eb6e:	688a      	ldr	r2, [r1, #8]
 800eb70:	3201      	adds	r2, #1
 800eb72:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800eb76:	442a      	add	r2, r5
 800eb78:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800eb7c:	60a2      	str	r2, [r4, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800eb7e:	6802      	ldr	r2, [r0, #0]
 800eb80:	441a      	add	r2, r3
 800eb82:	6914      	ldr	r4, [r2, #16]
 800eb84:	f024 0407 	bic.w	r4, r4, #7
 800eb88:	6114      	str	r4, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800eb8a:	6802      	ldr	r2, [r0, #0]
 800eb8c:	441a      	add	r2, r3
 800eb8e:	690c      	ldr	r4, [r1, #16]
 800eb90:	6114      	str	r4, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800eb92:	6802      	ldr	r2, [r0, #0]
 800eb94:	18d4      	adds	r4, r2, r3
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800eb96:	698d      	ldr	r5, [r1, #24]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800eb98:	f891 2030 	ldrb.w	r2, [r1, #48]	@ 0x30
 800eb9c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800eba0:	f891 5031 	ldrb.w	r5, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800eba4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800eba8:	f891 5032 	ldrb.w	r5, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800ebac:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800ebb0:	61a2      	str	r2, [r4, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ebb2:	6802      	ldr	r2, [r0, #0]
 800ebb4:	441a      	add	r2, r3
 800ebb6:	6954      	ldr	r4, [r2, #20]
 800ebb8:	f024 04ff 	bic.w	r4, r4, #255	@ 0xff
 800ebbc:	6154      	str	r4, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ebbe:	6802      	ldr	r2, [r0, #0]
 800ebc0:	441a      	add	r2, r3
 800ebc2:	694c      	ldr	r4, [r1, #20]
 800ebc4:	6154      	str	r4, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ebc6:	6802      	ldr	r2, [r0, #0]
 800ebc8:	441a      	add	r2, r3
 800ebca:	69d5      	ldr	r5, [r2, #28]
 800ebcc:	4c24      	ldr	r4, [pc, #144]	@ (800ec60 <LTDC_SetConfig+0x140>)
 800ebce:	402c      	ands	r4, r5
 800ebd0:	61d4      	str	r4, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ebd2:	6802      	ldr	r2, [r0, #0]
 800ebd4:	441a      	add	r2, r3
 800ebd6:	69cc      	ldr	r4, [r1, #28]
 800ebd8:	6a0d      	ldr	r5, [r1, #32]
 800ebda:	432c      	orrs	r4, r5
 800ebdc:	61d4      	str	r4, [r2, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800ebde:	6802      	ldr	r2, [r0, #0]
 800ebe0:	441a      	add	r2, r3
 800ebe2:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800ebe4:	6294      	str	r4, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ebe6:	690a      	ldr	r2, [r1, #16]
 800ebe8:	b182      	cbz	r2, 800ec0c <LTDC_SetConfig+0xec>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ebea:	3a01      	subs	r2, #1
 800ebec:	2a06      	cmp	r2, #6
 800ebee:	d805      	bhi.n	800ebfc <LTDC_SetConfig+0xdc>
 800ebf0:	e8df f002 	tbb	[pc, r2]
 800ebf4:	06080634 	.word	0x06080634
 800ebf8:	0404      	.short	0x0404
 800ebfa:	0a          	.byte	0x0a
 800ebfb:	00          	.byte	0x00
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800ebfc:	2401      	movs	r4, #1
 800ebfe:	e006      	b.n	800ec0e <LTDC_SetConfig+0xee>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ec00:	2402      	movs	r4, #2
 800ec02:	e004      	b.n	800ec0e <LTDC_SetConfig+0xee>
 800ec04:	2402      	movs	r4, #2
 800ec06:	e002      	b.n	800ec0e <LTDC_SetConfig+0xee>
 800ec08:	2402      	movs	r4, #2
 800ec0a:	e000      	b.n	800ec0e <LTDC_SetConfig+0xee>
    tmp = 4U;
 800ec0c:	2404      	movs	r4, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ec0e:	6802      	ldr	r2, [r0, #0]
 800ec10:	441a      	add	r2, r3
 800ec12:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800ec14:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 800ec18:	62d5      	str	r5, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800ec1a:	6802      	ldr	r2, [r0, #0]
 800ec1c:	eb02 0c03 	add.w	ip, r2, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ec20:	684a      	ldr	r2, [r1, #4]
 800ec22:	680d      	ldr	r5, [r1, #0]
 800ec24:	1b52      	subs	r2, r2, r5
 800ec26:	fb04 f202 	mul.w	r2, r4, r2
 800ec2a:	3207      	adds	r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800ec2c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800ec2e:	fb05 f404 	mul.w	r4, r5, r4
 800ec32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ec36:	f8cc 202c 	str.w	r2, [ip, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ec3a:	6802      	ldr	r2, [r0, #0]
 800ec3c:	441a      	add	r2, r3
 800ec3e:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 800ec40:	4c08      	ldr	r4, [pc, #32]	@ (800ec64 <LTDC_SetConfig+0x144>)
 800ec42:	402c      	ands	r4, r5
 800ec44:	6314      	str	r4, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ec46:	6802      	ldr	r2, [r0, #0]
 800ec48:	441a      	add	r2, r3
 800ec4a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800ec4c:	6311      	str	r1, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ec4e:	6801      	ldr	r1, [r0, #0]
 800ec50:	58ca      	ldr	r2, [r1, r3]
 800ec52:	f042 0201 	orr.w	r2, r2, #1
 800ec56:	50ca      	str	r2, [r1, r3]
}
 800ec58:	bc30      	pop	{r4, r5}
 800ec5a:	4770      	bx	lr
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ec5c:	2403      	movs	r4, #3
 800ec5e:	e7d6      	b.n	800ec0e <LTDC_SetConfig+0xee>
 800ec60:	fffff8f8 	.word	0xfffff8f8
 800ec64:	fffff800 	.word	0xfffff800

0800ec68 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d059      	beq.n	800ed20 <HAL_LTDC_Init+0xb8>
{
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ec70:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d04e      	beq.n	800ed16 <HAL_LTDC_Init+0xae>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ec78:	2302      	movs	r3, #2
 800ec7a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ec7e:	6822      	ldr	r2, [r4, #0]
 800ec80:	6993      	ldr	r3, [r2, #24]
 800ec82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ec86:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec88:	6822      	ldr	r2, [r4, #0]
 800ec8a:	6991      	ldr	r1, [r2, #24]
 800ec8c:	6863      	ldr	r3, [r4, #4]
 800ec8e:	68a0      	ldr	r0, [r4, #8]
 800ec90:	4303      	orrs	r3, r0
 800ec92:	68e0      	ldr	r0, [r4, #12]
 800ec94:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ec96:	6920      	ldr	r0, [r4, #16]
 800ec98:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec9a:	430b      	orrs	r3, r1
 800ec9c:	6193      	str	r3, [r2, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800ec9e:	6822      	ldr	r2, [r4, #0]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800eca0:	6961      	ldr	r1, [r4, #20]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800eca2:	69a3      	ldr	r3, [r4, #24]
 800eca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800eca8:	6093      	str	r3, [r2, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800ecaa:	6822      	ldr	r2, [r4, #0]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ecac:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800ecae:	6a23      	ldr	r3, [r4, #32]
 800ecb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ecb4:	60d3      	str	r3, [r2, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800ecb6:	6822      	ldr	r2, [r4, #0]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ecb8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800ecba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ecbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ecc0:	6113      	str	r3, [r2, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800ecc2:	6822      	ldr	r2, [r4, #0]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ecc4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800ecc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ecc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800eccc:	6153      	str	r3, [r2, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ecce:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ecd2:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ecd6:	6822      	ldr	r2, [r4, #0]
 800ecd8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ecda:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ecde:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ece0:	6822      	ldr	r2, [r4, #0]
 800ece2:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800ece4:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800ece8:	432b      	orrs	r3, r5
 800ecea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ecee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ecf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ecf4:	6822      	ldr	r2, [r4, #0]
 800ecf6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800ecf8:	f043 0306 	orr.w	r3, r3, #6
 800ecfc:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800ecfe:	6822      	ldr	r2, [r4, #0]
 800ed00:	6993      	ldr	r3, [r2, #24]
 800ed02:	f043 0301 	orr.w	r3, r3, #1
 800ed06:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ed08:	2000      	movs	r0, #0
 800ed0a:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800ed14:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800ed16:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800ed1a:	f7f2 fb49 	bl	80013b0 <HAL_LTDC_MspInit>
 800ed1e:	e7ab      	b.n	800ec78 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800ed20:	2001      	movs	r0, #1
}
 800ed22:	4770      	bx	lr

0800ed24 <HAL_LTDC_ErrorCallback>:
}
 800ed24:	4770      	bx	lr

0800ed26 <HAL_LTDC_LineEventCallback>:
}
 800ed26:	4770      	bx	lr

0800ed28 <HAL_LTDC_ReloadEventCallback>:
}
 800ed28:	4770      	bx	lr

0800ed2a <HAL_LTDC_IRQHandler>:
{
 800ed2a:	b570      	push	{r4, r5, r6, lr}
 800ed2c:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ed2e:	6803      	ldr	r3, [r0, #0]
 800ed30:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ed32:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ed34:	f015 0f04 	tst.w	r5, #4
 800ed38:	d002      	beq.n	800ed40 <HAL_LTDC_IRQHandler+0x16>
 800ed3a:	f016 0f04 	tst.w	r6, #4
 800ed3e:	d112      	bne.n	800ed66 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ed40:	f015 0f02 	tst.w	r5, #2
 800ed44:	d002      	beq.n	800ed4c <HAL_LTDC_IRQHandler+0x22>
 800ed46:	f016 0f02 	tst.w	r6, #2
 800ed4a:	d121      	bne.n	800ed90 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ed4c:	f015 0f01 	tst.w	r5, #1
 800ed50:	d002      	beq.n	800ed58 <HAL_LTDC_IRQHandler+0x2e>
 800ed52:	f016 0f01 	tst.w	r6, #1
 800ed56:	d132      	bne.n	800edbe <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ed58:	f015 0f08 	tst.w	r5, #8
 800ed5c:	d002      	beq.n	800ed64 <HAL_LTDC_IRQHandler+0x3a>
 800ed5e:	f016 0f08 	tst.w	r6, #8
 800ed62:	d13d      	bne.n	800ede0 <HAL_LTDC_IRQHandler+0xb6>
}
 800ed64:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ed66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed68:	f022 0204 	bic.w	r2, r2, #4
 800ed6c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ed6e:	6803      	ldr	r3, [r0, #0]
 800ed70:	2204      	movs	r2, #4
 800ed72:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ed74:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800ed78:	f043 0301 	orr.w	r3, r3, #1
 800ed7c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ed80:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800ed84:	2300      	movs	r3, #0
 800ed86:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800ed8a:	f7ff ffcb 	bl	800ed24 <HAL_LTDC_ErrorCallback>
 800ed8e:	e7d7      	b.n	800ed40 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ed90:	6822      	ldr	r2, [r4, #0]
 800ed92:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800ed94:	f023 0302 	bic.w	r3, r3, #2
 800ed98:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	2202      	movs	r2, #2
 800ed9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800eda0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800eda4:	4313      	orrs	r3, r2
 800eda6:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800edaa:	2304      	movs	r3, #4
 800edac:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800edb0:	2300      	movs	r3, #0
 800edb2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800edb6:	4620      	mov	r0, r4
 800edb8:	f7ff ffb4 	bl	800ed24 <HAL_LTDC_ErrorCallback>
 800edbc:	e7c6      	b.n	800ed4c <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800edbe:	6822      	ldr	r2, [r4, #0]
 800edc0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800edc2:	f023 0301 	bic.w	r3, r3, #1
 800edc6:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800edc8:	6822      	ldr	r2, [r4, #0]
 800edca:	2301      	movs	r3, #1
 800edcc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800edce:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800edd2:	2300      	movs	r3, #0
 800edd4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800edd8:	4620      	mov	r0, r4
 800edda:	f7ff ffa4 	bl	800ed26 <HAL_LTDC_LineEventCallback>
 800edde:	e7bb      	b.n	800ed58 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ede0:	6822      	ldr	r2, [r4, #0]
 800ede2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800ede4:	f023 0308 	bic.w	r3, r3, #8
 800ede8:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800edea:	6823      	ldr	r3, [r4, #0]
 800edec:	2208      	movs	r2, #8
 800edee:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800edf0:	2301      	movs	r3, #1
 800edf2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800edf6:	2300      	movs	r3, #0
 800edf8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800edfc:	4620      	mov	r0, r4
 800edfe:	f7ff ff93 	bl	800ed28 <HAL_LTDC_ReloadEventCallback>
}
 800ee02:	e7af      	b.n	800ed64 <HAL_LTDC_IRQHandler+0x3a>

0800ee04 <HAL_LTDC_ConfigLayer>:
{
 800ee04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800ee06:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d02c      	beq.n	800ee68 <HAL_LTDC_ConfigLayer+0x64>
 800ee0e:	4604      	mov	r4, r0
 800ee10:	460d      	mov	r5, r1
 800ee12:	4616      	mov	r6, r2
 800ee14:	2701      	movs	r7, #1
 800ee16:	f880 70a0 	strb.w	r7, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ee1a:	2302      	movs	r3, #2
 800ee1c:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ee20:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 800ee24:	fb0c 0c02 	mla	ip, ip, r2, r0
 800ee28:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 800ee2c:	468e      	mov	lr, r1
 800ee2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee46:	f8de 3000 	ldr.w	r3, [lr]
 800ee4a:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ee4e:	4632      	mov	r2, r6
 800ee50:	4629      	mov	r1, r5
 800ee52:	4620      	mov	r0, r4
 800ee54:	f7ff fe64 	bl	800eb20 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ee58:	6823      	ldr	r3, [r4, #0]
 800ee5a:	625f      	str	r7, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ee5c:	f884 70a1 	strb.w	r7, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800ee60:	2000      	movs	r0, #0
 800ee62:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 800ee66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800ee68:	2002      	movs	r0, #2
 800ee6a:	e7fc      	b.n	800ee66 <HAL_LTDC_ConfigLayer+0x62>

0800ee6c <HAL_LTDC_SetPitch>:
{
 800ee6c:	4603      	mov	r3, r0
  __HAL_LOCK(hltdc);
 800ee6e:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 800ee72:	2801      	cmp	r0, #1
 800ee74:	d043      	beq.n	800eefe <HAL_LTDC_SetPitch+0x92>
{
 800ee76:	b430      	push	{r4, r5}
  __HAL_LOCK(hltdc);
 800ee78:	2001      	movs	r0, #1
 800ee7a:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ee7e:	2002      	movs	r0, #2
 800ee80:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800ee84:	2034      	movs	r0, #52	@ 0x34
 800ee86:	fb00 3002 	mla	r0, r0, r2, r3
 800ee8a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ee8c:	b188      	cbz	r0, 800eeb2 <HAL_LTDC_SetPitch+0x46>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ee8e:	3801      	subs	r0, #1
 800ee90:	2806      	cmp	r0, #6
 800ee92:	d805      	bhi.n	800eea0 <HAL_LTDC_SetPitch+0x34>
 800ee94:	e8df f000 	tbb	[pc, r0]
 800ee98:	070a0730 	.word	0x070a0730
 800ee9c:	0404      	.short	0x0404
 800ee9e:	0a          	.byte	0x0a
 800ee9f:	00          	.byte	0x00
    tmp = 1U;
 800eea0:	f04f 0c01 	mov.w	ip, #1
 800eea4:	e007      	b.n	800eeb6 <HAL_LTDC_SetPitch+0x4a>
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800eea6:	f04f 0c02 	mov.w	ip, #2
 800eeaa:	e004      	b.n	800eeb6 <HAL_LTDC_SetPitch+0x4a>
 800eeac:	f04f 0c02 	mov.w	ip, #2
 800eeb0:	e001      	b.n	800eeb6 <HAL_LTDC_SetPitch+0x4a>
    tmp = 4U;
 800eeb2:	f04f 0c04 	mov.w	ip, #4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800eeb6:	01d2      	lsls	r2, r2, #7
 800eeb8:	3284      	adds	r2, #132	@ 0x84
 800eeba:	6818      	ldr	r0, [r3, #0]
 800eebc:	4410      	add	r0, r2
 800eebe:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
 800eec0:	4c10      	ldr	r4, [pc, #64]	@ (800ef04 <HAL_LTDC_SetPitch+0x98>)
 800eec2:	402c      	ands	r4, r5
 800eec4:	62c4      	str	r4, [r0, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800eec6:	4810      	ldr	r0, [pc, #64]	@ (800ef08 <HAL_LTDC_SetPitch+0x9c>)
 800eec8:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 800eeca:	f044 0401 	orr.w	r4, r4, #1
 800eece:	6244      	str	r4, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800eed0:	681c      	ldr	r4, [r3, #0]
 800eed2:	4422      	add	r2, r4
 800eed4:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800eed6:	fb01 fc0c 	mul.w	ip, r1, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800eeda:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800eede:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800eee0:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800eee2:	f042 0201 	orr.w	r2, r2, #1
 800eee6:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800eeee:	2000      	movs	r0, #0
 800eef0:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 800eef4:	bc30      	pop	{r4, r5}
 800eef6:	4770      	bx	lr
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800eef8:	f04f 0c03 	mov.w	ip, #3
 800eefc:	e7db      	b.n	800eeb6 <HAL_LTDC_SetPitch+0x4a>
  __HAL_LOCK(hltdc);
 800eefe:	2002      	movs	r0, #2
}
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	e000ffff 	.word	0xe000ffff
 800ef08:	50001000 	.word	0x50001000

0800ef0c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800ef0c:	b470      	push	{r4, r5, r6}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800ef0e:	6805      	ldr	r5, [r0, #0]
 800ef10:	696e      	ldr	r6, [r5, #20]
 800ef12:	4c17      	ldr	r4, [pc, #92]	@ (800ef70 <MDMA_SetConfig+0x64>)
 800ef14:	4034      	ands	r4, r6
 800ef16:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800ef1a:	431c      	orrs	r4, r3
 800ef1c:	616c      	str	r4, [r5, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800ef1e:	6805      	ldr	r5, [r0, #0]
 800ef20:	696b      	ldr	r3, [r5, #20]
 800ef22:	9c03      	ldr	r4, [sp, #12]
 800ef24:	3c01      	subs	r4, #1
 800ef26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef2a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800ef2e:	616b      	str	r3, [r5, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800ef30:	6803      	ldr	r3, [r0, #0]
 800ef32:	241f      	movs	r4, #31
 800ef34:	605c      	str	r4, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800ef36:	6803      	ldr	r3, [r0, #0]
 800ef38:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800ef3a:	6803      	ldr	r3, [r0, #0]
 800ef3c:	6199      	str	r1, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ef3e:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800ef42:	6801      	ldr	r1, [r0, #0]
 800ef44:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800ef46:	bf0c      	ite	eq
 800ef48:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ef4c:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
 800ef50:	628b      	str	r3, [r1, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ef52:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800ef56:	6802      	ldr	r2, [r0, #0]
 800ef58:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800ef5a:	bf0c      	ite	eq
 800ef5c:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800ef60:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800ef64:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800ef66:	6803      	ldr	r3, [r0, #0]
 800ef68:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800ef6a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ef6c:	bc70      	pop	{r4, r5, r6}
 800ef6e:	4770      	bx	lr
 800ef70:	fffe0000 	.word	0xfffe0000

0800ef74 <HAL_MDMA_Init>:
{
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ef78:	f7fc fca2 	bl	800b8c0 <HAL_GetTick>
  if(hmdma == NULL)
 800ef7c:	2c00      	cmp	r4, #0
 800ef7e:	d07e      	beq.n	800f07e <HAL_MDMA_Init+0x10a>
 800ef80:	4605      	mov	r5, r0
  __HAL_UNLOCK(hmdma);
 800ef82:	2300      	movs	r3, #0
 800ef84:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ef88:	2302      	movs	r3, #2
 800ef8a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800ef8e:	6822      	ldr	r2, [r4, #0]
 800ef90:	68d3      	ldr	r3, [r2, #12]
 800ef92:	f023 0301 	bic.w	r3, r3, #1
 800ef96:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ef98:	6823      	ldr	r3, [r4, #0]
 800ef9a:	68da      	ldr	r2, [r3, #12]
 800ef9c:	f012 0f01 	tst.w	r2, #1
 800efa0:	d00b      	beq.n	800efba <HAL_MDMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800efa2:	f7fc fc8d 	bl	800b8c0 <HAL_GetTick>
 800efa6:	1b43      	subs	r3, r0, r5
 800efa8:	2b05      	cmp	r3, #5
 800efaa:	d9f5      	bls.n	800ef98 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800efac:	2340      	movs	r3, #64	@ 0x40
 800efae:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800efb0:	2303      	movs	r3, #3
 800efb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      return HAL_ERROR;
 800efb6:	2001      	movs	r0, #1
 800efb8:	e03e      	b.n	800f038 <HAL_MDMA_Init+0xc4>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800efba:	68e2      	ldr	r2, [r4, #12]
 800efbc:	6921      	ldr	r1, [r4, #16]
 800efbe:	430a      	orrs	r2, r1
 800efc0:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800efc2:	6822      	ldr	r2, [r4, #0]
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800efc4:	6963      	ldr	r3, [r4, #20]
 800efc6:	69a1      	ldr	r1, [r4, #24]
 800efc8:	430b      	orrs	r3, r1
 800efca:	69e1      	ldr	r1, [r4, #28]
 800efcc:	430b      	orrs	r3, r1
 800efce:	6a21      	ldr	r1, [r4, #32]
 800efd0:	430b      	orrs	r3, r1
 800efd2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800efd4:	430b      	orrs	r3, r1
 800efd6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800efd8:	430b      	orrs	r3, r1
 800efda:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800efdc:	430b      	orrs	r3, r1
 800efde:	68a1      	ldr	r1, [r4, #8]
 800efe0:	430b      	orrs	r3, r1
 800efe2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800efe4:	3901      	subs	r1, #1
 800efe6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800efea:	6113      	str	r3, [r2, #16]
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800efec:	6863      	ldr	r3, [r4, #4]
 800efee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eff2:	d022      	beq.n	800f03a <HAL_MDMA_Init+0xc6>
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	2200      	movs	r2, #0
 800eff8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800effa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800effc:	4293      	cmp	r3, r2
 800effe:	db22      	blt.n	800f046 <HAL_MDMA_Init+0xd2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f000:	6822      	ldr	r2, [r4, #0]
 800f002:	b29b      	uxth	r3, r3
 800f004:	6213      	str	r3, [r2, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f006:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f008:	2b00      	cmp	r3, #0
 800f00a:	db27      	blt.n	800f05c <HAL_MDMA_Init+0xe8>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f00c:	6821      	ldr	r1, [r4, #0]
 800f00e:	6a0a      	ldr	r2, [r1, #32]
 800f010:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800f014:	620b      	str	r3, [r1, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f016:	6863      	ldr	r3, [r4, #4]
 800f018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f01c:	d02b      	beq.n	800f076 <HAL_MDMA_Init+0x102>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f01e:	6822      	ldr	r2, [r4, #0]
 800f020:	b2db      	uxtb	r3, r3
 800f022:	6293      	str	r3, [r2, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f024:	6823      	ldr	r3, [r4, #0]
 800f026:	2000      	movs	r0, #0
 800f028:	6258      	str	r0, [r3, #36]	@ 0x24
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f02a:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f02c:	6620      	str	r0, [r4, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f02e:	6660      	str	r0, [r4, #100]	@ 0x64
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f030:	66a0      	str	r0, [r4, #104]	@ 0x68
  hmdma->State = HAL_MDMA_STATE_READY;
 800f032:	2301      	movs	r3, #1
 800f034:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800f038:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f03a:	6822      	ldr	r2, [r4, #0]
 800f03c:	6913      	ldr	r3, [r2, #16]
 800f03e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f042:	6113      	str	r3, [r2, #16]
 800f044:	e7d6      	b.n	800eff4 <HAL_MDMA_Init+0x80>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f046:	6822      	ldr	r2, [r4, #0]
 800f048:	6953      	ldr	r3, [r2, #20]
 800f04a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f04e:	6153      	str	r3, [r2, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f050:	6822      	ldr	r2, [r4, #0]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f052:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f054:	425b      	negs	r3, r3
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f056:	b29b      	uxth	r3, r3
 800f058:	6213      	str	r3, [r2, #32]
 800f05a:	e7d4      	b.n	800f006 <HAL_MDMA_Init+0x92>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f05c:	6822      	ldr	r2, [r4, #0]
 800f05e:	6953      	ldr	r3, [r2, #20]
 800f060:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f064:	6153      	str	r3, [r2, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f066:	6821      	ldr	r1, [r4, #0]
 800f068:	6a0b      	ldr	r3, [r1, #32]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f06a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f06c:	4252      	negs	r2, r2
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f06e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f072:	620b      	str	r3, [r1, #32]
 800f074:	e7cf      	b.n	800f016 <HAL_MDMA_Init+0xa2>
    hmdma->Instance->CTBR = 0;
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	2200      	movs	r2, #0
 800f07a:	629a      	str	r2, [r3, #40]	@ 0x28
 800f07c:	e7d2      	b.n	800f024 <HAL_MDMA_Init+0xb0>
    return HAL_ERROR;
 800f07e:	2001      	movs	r0, #1
 800f080:	e7da      	b.n	800f038 <HAL_MDMA_Init+0xc4>

0800f082 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800f082:	4603      	mov	r3, r0
 800f084:	2800      	cmp	r0, #0
 800f086:	d025      	beq.n	800f0d4 <HAL_MDMA_DeInit+0x52>
  __HAL_MDMA_DISABLE(hmdma);
 800f088:	6801      	ldr	r1, [r0, #0]
 800f08a:	68ca      	ldr	r2, [r1, #12]
 800f08c:	f022 0201 	bic.w	r2, r2, #1
 800f090:	60ca      	str	r2, [r1, #12]
  hmdma->Instance->CCR  = 0;
 800f092:	6802      	ldr	r2, [r0, #0]
 800f094:	2000      	movs	r0, #0
 800f096:	60d0      	str	r0, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	6110      	str	r0, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	6150      	str	r0, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	6190      	str	r0, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	61d0      	str	r0, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	6210      	str	r0, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	6250      	str	r0, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800f0b0:	681a      	ldr	r2, [r3, #0]
 800f0b2:	6290      	str	r0, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	6310      	str	r0, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	6350      	str	r0, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	211f      	movs	r1, #31
 800f0c0:	6051      	str	r1, [r2, #4]
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f0c2:	65d8      	str	r0, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f0c4:	6618      	str	r0, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f0c6:	6658      	str	r0, [r3, #100]	@ 0x64
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f0c8:	6698      	str	r0, [r3, #104]	@ 0x68
  hmdma->State = HAL_MDMA_STATE_RESET;
 800f0ca:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800f0ce:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  return HAL_OK;
 800f0d2:	4770      	bx	lr
    return HAL_ERROR;
 800f0d4:	2001      	movs	r0, #1
}
 800f0d6:	4770      	bx	lr

0800f0d8 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800f0d8:	b368      	cbz	r0, 800f136 <HAL_MDMA_ConfigPostRequestMask+0x5e>
 800f0da:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
 800f0dc:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800f0e0:	2801      	cmp	r0, #1
 800f0e2:	d02a      	beq.n	800f13a <HAL_MDMA_ConfigPostRequestMask+0x62>
 800f0e4:	2001      	movs	r0, #1
 800f0e6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800f0ea:	f893 003d 	ldrb.w	r0, [r3, #61]	@ 0x3d
 800f0ee:	b2c0      	uxtb	r0, r0
 800f0f0:	2801      	cmp	r0, #1
 800f0f2:	d004      	beq.n	800f0fe <HAL_MDMA_ConfigPostRequestMask+0x26>
    status =  HAL_ERROR;
 800f0f4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hmdma);
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800f0fc:	4770      	bx	lr
{
 800f0fe:	b430      	push	{r4, r5}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800f100:	681c      	ldr	r4, [r3, #0]
 800f102:	6925      	ldr	r5, [r4, #16]
 800f104:	f015 4f80 	tst.w	r5, #1073741824	@ 0x40000000
 800f108:	d109      	bne.n	800f11e <HAL_MDMA_ConfigPostRequestMask+0x46>
      hmdma->Instance->CMAR = MaskAddress;
 800f10a:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800f10c:	6818      	ldr	r0, [r3, #0]
 800f10e:	6342      	str	r2, [r0, #52]	@ 0x34
      if(MaskAddress == 0U)
 800f110:	b951      	cbnz	r1, 800f128 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800f112:	6819      	ldr	r1, [r3, #0]
 800f114:	690a      	ldr	r2, [r1, #16]
 800f116:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800f11a:	610a      	str	r2, [r1, #16]
  HAL_StatusTypeDef  status = HAL_OK;
 800f11c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hmdma);
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800f124:	bc30      	pop	{r4, r5}
 800f126:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800f128:	6819      	ldr	r1, [r3, #0]
 800f12a:	690a      	ldr	r2, [r1, #16]
 800f12c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f130:	610a      	str	r2, [r1, #16]
  HAL_StatusTypeDef  status = HAL_OK;
 800f132:	2000      	movs	r0, #0
 800f134:	e7f3      	b.n	800f11e <HAL_MDMA_ConfigPostRequestMask+0x46>
    return HAL_ERROR;
 800f136:	2001      	movs	r0, #1
 800f138:	4770      	bx	lr
  __HAL_LOCK(hmdma);
 800f13a:	2002      	movs	r0, #2
 800f13c:	4770      	bx	lr

0800f13e <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 800f13e:	2800      	cmp	r0, #0
 800f140:	d04f      	beq.n	800f1e2 <HAL_MDMA_Start_IT+0xa4>
{
 800f142:	b530      	push	{r4, r5, lr}
 800f144:	b083      	sub	sp, #12
 800f146:	4604      	mov	r4, r0
  __HAL_LOCK(hmdma);
 800f148:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800f14c:	2801      	cmp	r0, #1
 800f14e:	d04a      	beq.n	800f1e6 <HAL_MDMA_Start_IT+0xa8>
 800f150:	2001      	movs	r0, #1
 800f152:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800f156:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800f15a:	b2c0      	uxtb	r0, r0
 800f15c:	2801      	cmp	r0, #1
 800f15e:	d005      	beq.n	800f16c <HAL_MDMA_Start_IT+0x2e>
    __HAL_UNLOCK(hmdma);
 800f160:	2300      	movs	r3, #0
 800f162:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_BUSY;
 800f166:	2002      	movs	r0, #2
}
 800f168:	b003      	add	sp, #12
 800f16a:	bd30      	pop	{r4, r5, pc}
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800f16c:	2002      	movs	r0, #2
 800f16e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f172:	2000      	movs	r0, #0
 800f174:	66a0      	str	r0, [r4, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800f176:	6825      	ldr	r5, [r4, #0]
 800f178:	68e8      	ldr	r0, [r5, #12]
 800f17a:	f020 0001 	bic.w	r0, r0, #1
 800f17e:	60e8      	str	r0, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800f180:	9806      	ldr	r0, [sp, #24]
 800f182:	9000      	str	r0, [sp, #0]
 800f184:	4620      	mov	r0, r4
 800f186:	f7ff fec1 	bl	800ef0c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800f18a:	6822      	ldr	r2, [r4, #0]
 800f18c:	68d3      	ldr	r3, [r2, #12]
 800f18e:	f043 0306 	orr.w	r3, r3, #6
 800f192:	60d3      	str	r3, [r2, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800f194:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f196:	b123      	cbz	r3, 800f1a2 <HAL_MDMA_Start_IT+0x64>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800f198:	6822      	ldr	r2, [r4, #0]
 800f19a:	68d3      	ldr	r3, [r2, #12]
 800f19c:	f043 0310 	orr.w	r3, r3, #16
 800f1a0:	60d3      	str	r3, [r2, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800f1a2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f1a4:	b123      	cbz	r3, 800f1b0 <HAL_MDMA_Start_IT+0x72>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800f1a6:	6822      	ldr	r2, [r4, #0]
 800f1a8:	68d3      	ldr	r3, [r2, #12]
 800f1aa:	f043 0308 	orr.w	r3, r3, #8
 800f1ae:	60d3      	str	r3, [r2, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800f1b0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f1b2:	b123      	cbz	r3, 800f1be <HAL_MDMA_Start_IT+0x80>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800f1b4:	6822      	ldr	r2, [r4, #0]
 800f1b6:	68d3      	ldr	r3, [r2, #12]
 800f1b8:	f043 0320 	orr.w	r3, r3, #32
 800f1bc:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800f1be:	6822      	ldr	r2, [r4, #0]
 800f1c0:	68d3      	ldr	r3, [r2, #12]
 800f1c2:	f043 0301 	orr.w	r3, r3, #1
 800f1c6:	60d3      	str	r3, [r2, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f1c8:	6863      	ldr	r3, [r4, #4]
 800f1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1ce:	d001      	beq.n	800f1d4 <HAL_MDMA_Start_IT+0x96>
  return HAL_OK;
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	e7c9      	b.n	800f168 <HAL_MDMA_Start_IT+0x2a>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800f1d4:	6822      	ldr	r2, [r4, #0]
 800f1d6:	68d3      	ldr	r3, [r2, #12]
 800f1d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f1dc:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800f1de:	2000      	movs	r0, #0
 800f1e0:	e7c2      	b.n	800f168 <HAL_MDMA_Start_IT+0x2a>
    return HAL_ERROR;
 800f1e2:	2001      	movs	r0, #1
}
 800f1e4:	4770      	bx	lr
  __HAL_LOCK(hmdma);
 800f1e6:	2002      	movs	r0, #2
 800f1e8:	e7be      	b.n	800f168 <HAL_MDMA_Start_IT+0x2a>

0800f1ea <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800f1ea:	b190      	cbz	r0, 800f212 <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800f1ec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d003      	beq.n	800f1fe <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800f1f6:	2380      	movs	r3, #128	@ 0x80
 800f1f8:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800f1fa:	2001      	movs	r0, #1
 800f1fc:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f1fe:	2304      	movs	r3, #4
 800f200:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800f204:	6802      	ldr	r2, [r0, #0]
 800f206:	68d3      	ldr	r3, [r2, #12]
 800f208:	f023 0301 	bic.w	r3, r3, #1
 800f20c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800f20e:	2000      	movs	r0, #0
 800f210:	4770      	bx	lr
    return HAL_ERROR;
 800f212:	2001      	movs	r0, #1
}
 800f214:	4770      	bx	lr
	...

0800f218 <HAL_MDMA_IRQHandler>:
{
 800f218:	b530      	push	{r4, r5, lr}
 800f21a:	b083      	sub	sp, #12
 800f21c:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800f21e:	2300      	movs	r3, #0
 800f220:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800f222:	6801      	ldr	r1, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800f224:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800f228:	6818      	ldr	r0, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800f22a:	4b61      	ldr	r3, [pc, #388]	@ (800f3b0 <HAL_MDMA_IRQHandler+0x198>)
 800f22c:	440b      	add	r3, r1
 800f22e:	f3c3 1384 	ubfx	r3, r3, #6, #5
 800f232:	2201      	movs	r2, #1
 800f234:	fa02 f303 	lsl.w	r3, r2, r3
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800f238:	4203      	tst	r3, r0
 800f23a:	f000 80ab 	beq.w	800f394 <HAL_MDMA_IRQHandler+0x17c>
  uint32_t timeout = SystemCoreClock / 9600U;
 800f23e:	4b5d      	ldr	r3, [pc, #372]	@ (800f3b4 <HAL_MDMA_IRQHandler+0x19c>)
 800f240:	681d      	ldr	r5, [r3, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800f242:	680b      	ldr	r3, [r1, #0]
 800f244:	f013 0f01 	tst.w	r3, #1
 800f248:	d030      	beq.n	800f2ac <HAL_MDMA_IRQHandler+0x94>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800f24a:	68cb      	ldr	r3, [r1, #12]
 800f24c:	f013 0f02 	tst.w	r3, #2
 800f250:	d02c      	beq.n	800f2ac <HAL_MDMA_IRQHandler+0x94>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800f252:	68cb      	ldr	r3, [r1, #12]
 800f254:	f023 0302 	bic.w	r3, r3, #2
 800f258:	60cb      	str	r3, [r1, #12]
      errorFlag = hmdma->Instance->CESR;
 800f25a:	6822      	ldr	r2, [r4, #0]
 800f25c:	6893      	ldr	r3, [r2, #8]
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800f25e:	f013 0f80 	tst.w	r3, #128	@ 0x80
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800f262:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800f264:	bf0c      	ite	eq
 800f266:	f041 0101 	orreq.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800f26a:	f041 0102 	orrne.w	r1, r1, #2
 800f26e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800f270:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800f274:	d003      	beq.n	800f27e <HAL_MDMA_IRQHandler+0x66>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800f276:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800f278:	f041 0104 	orr.w	r1, r1, #4
 800f27c:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800f27e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800f282:	d003      	beq.n	800f28c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800f284:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800f286:	f041 0108 	orr.w	r1, r1, #8
 800f28a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800f28c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800f290:	d003      	beq.n	800f29a <HAL_MDMA_IRQHandler+0x82>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800f292:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800f294:	f041 0110 	orr.w	r1, r1, #16
 800f298:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800f29a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800f29e:	d003      	beq.n	800f2a8 <HAL_MDMA_IRQHandler+0x90>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800f2a0:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800f2a2:	f043 0320 	orr.w	r3, r3, #32
 800f2a6:	66a3      	str	r3, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	6053      	str	r3, [r2, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800f2ac:	6823      	ldr	r3, [r4, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	f012 0f10 	tst.w	r2, #16
 800f2b4:	d009      	beq.n	800f2ca <HAL_MDMA_IRQHandler+0xb2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800f2b6:	68da      	ldr	r2, [r3, #12]
 800f2b8:	f012 0f20 	tst.w	r2, #32
 800f2bc:	d005      	beq.n	800f2ca <HAL_MDMA_IRQHandler+0xb2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800f2be:	2210      	movs	r2, #16
 800f2c0:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800f2c2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f2c4:	b10b      	cbz	r3, 800f2ca <HAL_MDMA_IRQHandler+0xb2>
        hmdma->XferBufferCpltCallback(hmdma);
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800f2ca:	6823      	ldr	r3, [r4, #0]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	f012 0f08 	tst.w	r2, #8
 800f2d2:	d009      	beq.n	800f2e8 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800f2d4:	68da      	ldr	r2, [r3, #12]
 800f2d6:	f012 0f10 	tst.w	r2, #16
 800f2da:	d005      	beq.n	800f2e8 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800f2dc:	2208      	movs	r2, #8
 800f2de:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800f2e0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f2e2:	b10b      	cbz	r3, 800f2e8 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferBlockCpltCallback(hmdma);
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800f2e8:	6823      	ldr	r3, [r4, #0]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	f012 0f04 	tst.w	r2, #4
 800f2f0:	d009      	beq.n	800f306 <HAL_MDMA_IRQHandler+0xee>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800f2f2:	68da      	ldr	r2, [r3, #12]
 800f2f4:	f012 0f08 	tst.w	r2, #8
 800f2f8:	d005      	beq.n	800f306 <HAL_MDMA_IRQHandler+0xee>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800f2fa:	2204      	movs	r2, #4
 800f2fc:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800f2fe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f300:	b10b      	cbz	r3, 800f306 <HAL_MDMA_IRQHandler+0xee>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800f302:	4620      	mov	r0, r4
 800f304:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800f306:	6823      	ldr	r3, [r4, #0]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	f012 0f02 	tst.w	r2, #2
 800f30e:	d019      	beq.n	800f344 <HAL_MDMA_IRQHandler+0x12c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800f310:	68da      	ldr	r2, [r3, #12]
 800f312:	f012 0f04 	tst.w	r2, #4
 800f316:	d015      	beq.n	800f344 <HAL_MDMA_IRQHandler+0x12c>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800f318:	68da      	ldr	r2, [r3, #12]
 800f31a:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800f31e:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800f320:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800f324:	b2db      	uxtb	r3, r3
 800f326:	2b04      	cmp	r3, #4
 800f328:	d036      	beq.n	800f398 <HAL_MDMA_IRQHandler+0x180>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800f32a:	6823      	ldr	r3, [r4, #0]
 800f32c:	2202      	movs	r2, #2
 800f32e:	605a      	str	r2, [r3, #4]
      __HAL_UNLOCK(hmdma);
 800f330:	2300      	movs	r3, #0
 800f332:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800f336:	2301      	movs	r3, #1
 800f338:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800f33c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f33e:	b10b      	cbz	r3, 800f344 <HAL_MDMA_IRQHandler+0x12c>
        hmdma->XferCpltCallback(hmdma);
 800f340:	4620      	mov	r0, r4
 800f342:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800f344:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800f346:	b32b      	cbz	r3, 800f394 <HAL_MDMA_IRQHandler+0x17c>
  uint32_t timeout = SystemCoreClock / 9600U;
 800f348:	4b1b      	ldr	r3, [pc, #108]	@ (800f3b8 <HAL_MDMA_IRQHandler+0x1a0>)
 800f34a:	fba3 3205 	umull	r3, r2, r3, r5
 800f34e:	0a92      	lsrs	r2, r2, #10
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f350:	2304      	movs	r3, #4
 800f352:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800f356:	6821      	ldr	r1, [r4, #0]
 800f358:	68cb      	ldr	r3, [r1, #12]
 800f35a:	f023 0301 	bic.w	r3, r3, #1
 800f35e:	60cb      	str	r3, [r1, #12]
      if (++count > timeout)
 800f360:	9b01      	ldr	r3, [sp, #4]
 800f362:	3301      	adds	r3, #1
 800f364:	9301      	str	r3, [sp, #4]
 800f366:	4293      	cmp	r3, r2
 800f368:	d804      	bhi.n	800f374 <HAL_MDMA_IRQHandler+0x15c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	f013 0f01 	tst.w	r3, #1
 800f372:	d1f5      	bne.n	800f360 <HAL_MDMA_IRQHandler+0x148>
    __HAL_UNLOCK(hmdma);
 800f374:	2300      	movs	r3, #0
 800f376:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	f013 0f01 	tst.w	r3, #1
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f382:	bf14      	ite	ne
 800f384:	2303      	movne	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800f386:	2301      	moveq	r3, #1
 800f388:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800f38c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f38e:	b10b      	cbz	r3, 800f394 <HAL_MDMA_IRQHandler+0x17c>
      hmdma->XferErrorCallback(hmdma);
 800f390:	4620      	mov	r0, r4
 800f392:	4798      	blx	r3
}
 800f394:	b003      	add	sp, #12
 800f396:	bd30      	pop	{r4, r5, pc}
        __HAL_UNLOCK(hmdma);
 800f398:	2300      	movs	r3, #0
 800f39a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800f3a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0f4      	beq.n	800f394 <HAL_MDMA_IRQHandler+0x17c>
          hmdma->XferAbortCallback(hmdma);
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	4798      	blx	r3
 800f3ae:	e7f1      	b.n	800f394 <HAL_MDMA_IRQHandler+0x17c>
 800f3b0:	adffffc0 	.word	0xadffffc0
 800f3b4:	2400006c 	.word	0x2400006c
 800f3b8:	1b4e81b5 	.word	0x1b4e81b5

0800f3bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800f3c0:	4b1f      	ldr	r3, [pc, #124]	@ (800f440 <HAL_PWREx_ConfigSupply+0x84>)
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	f003 0307 	and.w	r3, r3, #7
 800f3c8:	2b06      	cmp	r3, #6
 800f3ca:	d007      	beq.n	800f3dc <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f3cc:	4b1c      	ldr	r3, [pc, #112]	@ (800f440 <HAL_PWREx_ConfigSupply+0x84>)
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f3d4:	1a18      	subs	r0, r3, r0
 800f3d6:	bf18      	it	ne
 800f3d8:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800f3da:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f3dc:	4a18      	ldr	r2, [pc, #96]	@ (800f440 <HAL_PWREx_ConfigSupply+0x84>)
 800f3de:	68d3      	ldr	r3, [r2, #12]
 800f3e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f3e4:	4303      	orrs	r3, r0
 800f3e6:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800f3e8:	f7fc fa6a 	bl	800b8c0 <HAL_GetTick>
 800f3ec:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f3ee:	4e14      	ldr	r6, [pc, #80]	@ (800f440 <HAL_PWREx_ConfigSupply+0x84>)
 800f3f0:	6873      	ldr	r3, [r6, #4]
 800f3f2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800f3f6:	d107      	bne.n	800f408 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f3f8:	f7fc fa62 	bl	800b8c0 <HAL_GetTick>
 800f3fc:	1b43      	subs	r3, r0, r5
 800f3fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f402:	d9f5      	bls.n	800f3f0 <HAL_PWREx_ConfigSupply+0x34>
      return HAL_ERROR;
 800f404:	2001      	movs	r0, #1
 800f406:	e7e8      	b.n	800f3da <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800f408:	f1a4 031d 	sub.w	r3, r4, #29
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d904      	bls.n	800f41a <HAL_PWREx_ConfigSupply+0x5e>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800f410:	3c2d      	subs	r4, #45	@ 0x2d
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800f412:	2c01      	cmp	r4, #1
 800f414:	d901      	bls.n	800f41a <HAL_PWREx_ConfigSupply+0x5e>
  return HAL_OK;
 800f416:	2000      	movs	r0, #0
 800f418:	e7df      	b.n	800f3da <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 800f41a:	f7fc fa51 	bl	800b8c0 <HAL_GetTick>
 800f41e:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f420:	4d07      	ldr	r5, [pc, #28]	@ (800f440 <HAL_PWREx_ConfigSupply+0x84>)
 800f422:	68eb      	ldr	r3, [r5, #12]
 800f424:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800f428:	d107      	bne.n	800f43a <HAL_PWREx_ConfigSupply+0x7e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f42a:	f7fc fa49 	bl	800b8c0 <HAL_GetTick>
 800f42e:	1b00      	subs	r0, r0, r4
 800f430:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800f434:	d9f5      	bls.n	800f422 <HAL_PWREx_ConfigSupply+0x66>
        return HAL_ERROR;
 800f436:	2001      	movs	r0, #1
 800f438:	e7cf      	b.n	800f3da <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 800f43a:	2000      	movs	r0, #0
 800f43c:	e7cd      	b.n	800f3da <HAL_PWREx_ConfigSupply+0x1e>
 800f43e:	bf00      	nop
 800f440:	58024800 	.word	0x58024800

0800f444 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800f444:	b410      	push	{r4}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800f446:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f448:	b113      	cbz	r3, 800f450 <QSPI_Config+0xc>
 800f44a:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800f44e:	d129      	bne.n	800f4a4 <QSPI_Config+0x60>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800f450:	698b      	ldr	r3, [r1, #24]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d076      	beq.n	800f544 <QSPI_Config+0x100>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f456:	6a0c      	ldr	r4, [r1, #32]
 800f458:	2c00      	cmp	r4, #0
 800f45a:	d043      	beq.n	800f4e4 <QSPI_Config+0xa0>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f45c:	6803      	ldr	r3, [r0, #0]
 800f45e:	688c      	ldr	r4, [r1, #8]
 800f460:	61dc      	str	r4, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f462:	69cb      	ldr	r3, [r1, #28]
 800f464:	b31b      	cbz	r3, 800f4ae <QSPI_Config+0x6a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f466:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800f468:	4323      	orrs	r3, r4
 800f46a:	4313      	orrs	r3, r2
 800f46c:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800f46e:	4323      	orrs	r3, r4
 800f470:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800f472:	4323      	orrs	r3, r4
 800f474:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800f476:	4323      	orrs	r3, r4
 800f478:	690c      	ldr	r4, [r1, #16]
 800f47a:	4323      	orrs	r3, r4
 800f47c:	6a0c      	ldr	r4, [r1, #32]
 800f47e:	4323      	orrs	r3, r4
 800f480:	68cc      	ldr	r4, [r1, #12]
 800f482:	4323      	orrs	r3, r4
 800f484:	698c      	ldr	r4, [r1, #24]
 800f486:	4323      	orrs	r3, r4
 800f488:	680c      	ldr	r4, [r1, #0]
 800f48a:	4323      	orrs	r3, r4
 800f48c:	694c      	ldr	r4, [r1, #20]
 800f48e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800f492:	6804      	ldr	r4, [r0, #0]
 800f494:	6163      	str	r3, [r4, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f496:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800f49a:	d020      	beq.n	800f4de <QSPI_Config+0x9a>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f49c:	6803      	ldr	r3, [r0, #0]
 800f49e:	684a      	ldr	r2, [r1, #4]
 800f4a0:	619a      	str	r2, [r3, #24]
 800f4a2:	e01c      	b.n	800f4de <QSPI_Config+0x9a>
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800f4a4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	6804      	ldr	r4, [r0, #0]
 800f4aa:	6123      	str	r3, [r4, #16]
 800f4ac:	e7d0      	b.n	800f450 <QSPI_Config+0xc>
      }
      else
      {
        /*---- Command with instruction and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f4ae:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800f4b0:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800f4b2:	4323      	orrs	r3, r4
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	690a      	ldr	r2, [r1, #16]
 800f4c0:	4313      	orrs	r3, r2
 800f4c2:	6a0a      	ldr	r2, [r1, #32]
 800f4c4:	4313      	orrs	r3, r2
 800f4c6:	698a      	ldr	r2, [r1, #24]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	680a      	ldr	r2, [r1, #0]
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	694a      	ldr	r2, [r1, #20]
 800f4d0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800f4d4:	6802      	ldr	r2, [r0, #0]
 800f4d6:	6153      	str	r3, [r2, #20]
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        /* Clear AR register */
        CLEAR_REG(hqspi->Instance->AR);
 800f4d8:	6803      	ldr	r3, [r0, #0]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800f4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4e2:	4770      	bx	lr
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f4e4:	69cc      	ldr	r4, [r1, #28]
 800f4e6:	b1cc      	cbz	r4, 800f51c <QSPI_Config+0xd8>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f4e8:	4323      	orrs	r3, r4
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800f4ee:	4323      	orrs	r3, r4
 800f4f0:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800f4f2:	4323      	orrs	r3, r4
 800f4f4:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800f4f6:	4323      	orrs	r3, r4
 800f4f8:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800f4fa:	4323      	orrs	r3, r4
 800f4fc:	68cc      	ldr	r4, [r1, #12]
 800f4fe:	4323      	orrs	r3, r4
 800f500:	680c      	ldr	r4, [r1, #0]
 800f502:	4323      	orrs	r3, r4
 800f504:	694c      	ldr	r4, [r1, #20]
 800f506:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800f50a:	6804      	ldr	r4, [r0, #0]
 800f50c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f50e:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800f512:	d0e4      	beq.n	800f4de <QSPI_Config+0x9a>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f514:	6803      	ldr	r3, [r0, #0]
 800f516:	684a      	ldr	r2, [r1, #4]
 800f518:	619a      	str	r2, [r3, #24]
 800f51a:	e7e0      	b.n	800f4de <QSPI_Config+0x9a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f51c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800f51e:	4323      	orrs	r3, r4
 800f520:	431a      	orrs	r2, r3
 800f522:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800f524:	4313      	orrs	r3, r2
 800f526:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800f528:	4313      	orrs	r3, r2
 800f52a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800f52c:	4313      	orrs	r3, r2
 800f52e:	680a      	ldr	r2, [r1, #0]
 800f530:	4313      	orrs	r3, r2
 800f532:	694a      	ldr	r2, [r1, #20]
 800f534:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800f538:	6802      	ldr	r2, [r0, #0]
 800f53a:	6153      	str	r3, [r2, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f53c:	6803      	ldr	r3, [r0, #0]
 800f53e:	2200      	movs	r2, #0
 800f540:	619a      	str	r2, [r3, #24]
 800f542:	e7cc      	b.n	800f4de <QSPI_Config+0x9a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f544:	6a0b      	ldr	r3, [r1, #32]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d038      	beq.n	800f5bc <QSPI_Config+0x178>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f54a:	6803      	ldr	r3, [r0, #0]
 800f54c:	688c      	ldr	r4, [r1, #8]
 800f54e:	61dc      	str	r4, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f550:	69cb      	ldr	r3, [r1, #28]
 800f552:	b1e3      	cbz	r3, 800f58e <QSPI_Config+0x14a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f554:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800f556:	4323      	orrs	r3, r4
 800f558:	4313      	orrs	r3, r2
 800f55a:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800f55c:	4323      	orrs	r3, r4
 800f55e:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800f560:	4323      	orrs	r3, r4
 800f562:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800f564:	4323      	orrs	r3, r4
 800f566:	690c      	ldr	r4, [r1, #16]
 800f568:	4323      	orrs	r3, r4
 800f56a:	6a0c      	ldr	r4, [r1, #32]
 800f56c:	4323      	orrs	r3, r4
 800f56e:	68cc      	ldr	r4, [r1, #12]
 800f570:	4323      	orrs	r3, r4
 800f572:	698c      	ldr	r4, [r1, #24]
 800f574:	4323      	orrs	r3, r4
 800f576:	694c      	ldr	r4, [r1, #20]
 800f578:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800f57c:	6804      	ldr	r4, [r0, #0]
 800f57e:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f580:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800f584:	d0ab      	beq.n	800f4de <QSPI_Config+0x9a>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f586:	6803      	ldr	r3, [r0, #0]
 800f588:	684a      	ldr	r2, [r1, #4]
 800f58a:	619a      	str	r2, [r3, #24]
 800f58c:	e7a7      	b.n	800f4de <QSPI_Config+0x9a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f58e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800f590:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800f592:	4323      	orrs	r3, r4
 800f594:	4313      	orrs	r3, r2
 800f596:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800f598:	4313      	orrs	r3, r2
 800f59a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800f59c:	4313      	orrs	r3, r2
 800f59e:	690a      	ldr	r2, [r1, #16]
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	6a0a      	ldr	r2, [r1, #32]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	698a      	ldr	r2, [r1, #24]
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	694a      	ldr	r2, [r1, #20]
 800f5ac:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800f5b0:	6802      	ldr	r2, [r0, #0]
 800f5b2:	6153      	str	r3, [r2, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f5b4:	6803      	ldr	r3, [r0, #0]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	619a      	str	r2, [r3, #24]
 800f5ba:	e790      	b.n	800f4de <QSPI_Config+0x9a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f5bc:	69cb      	ldr	r3, [r1, #28]
 800f5be:	b1bb      	cbz	r3, 800f5f0 <QSPI_Config+0x1ac>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f5c0:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800f5c2:	4323      	orrs	r3, r4
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800f5c8:	4323      	orrs	r3, r4
 800f5ca:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800f5cc:	4323      	orrs	r3, r4
 800f5ce:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800f5d0:	4323      	orrs	r3, r4
 800f5d2:	68cc      	ldr	r4, [r1, #12]
 800f5d4:	4323      	orrs	r3, r4
 800f5d6:	694c      	ldr	r4, [r1, #20]
 800f5d8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800f5dc:	6804      	ldr	r4, [r0, #0]
 800f5de:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f5e0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800f5e4:	f43f af7b 	beq.w	800f4de <QSPI_Config+0x9a>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f5e8:	6803      	ldr	r3, [r0, #0]
 800f5ea:	684a      	ldr	r2, [r1, #4]
 800f5ec:	619a      	str	r2, [r3, #24]
 800f5ee:	e776      	b.n	800f4de <QSPI_Config+0x9a>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800f5f0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f43f af73 	beq.w	800f4de <QSPI_Config+0x9a>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f5f8:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800f5fa:	4323      	orrs	r3, r4
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800f600:	4313      	orrs	r3, r2
 800f602:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800f604:	4313      	orrs	r3, r2
 800f606:	694a      	ldr	r2, [r1, #20]
 800f608:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800f60c:	6802      	ldr	r2, [r0, #0]
 800f60e:	6153      	str	r3, [r2, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800f610:	6803      	ldr	r3, [r0, #0]
 800f612:	2200      	movs	r2, #0
 800f614:	619a      	str	r2, [r3, #24]
}
 800f616:	e762      	b.n	800f4de <QSPI_Config+0x9a>

0800f618 <QSPI_WaitFlagStateUntilTimeout>:
{
 800f618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f61c:	4680      	mov	r8, r0
 800f61e:	460e      	mov	r6, r1
 800f620:	4615      	mov	r5, r2
 800f622:	4699      	mov	r9, r3
 800f624:	9f08      	ldr	r7, [sp, #32]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f626:	f8d8 2000 	ldr.w	r2, [r8]
 800f62a:	6894      	ldr	r4, [r2, #8]
 800f62c:	4234      	tst	r4, r6
 800f62e:	bf14      	ite	ne
 800f630:	f04f 0c01 	movne.w	ip, #1
 800f634:	f04f 0c00 	moveq.w	ip, #0
 800f638:	45ac      	cmp	ip, r5
 800f63a:	d015      	beq.n	800f668 <QSPI_WaitFlagStateUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800f63c:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f640:	d0f3      	beq.n	800f62a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f642:	f7fc f93d 	bl	800b8c0 <HAL_GetTick>
 800f646:	eba0 0009 	sub.w	r0, r0, r9
 800f64a:	42b8      	cmp	r0, r7
 800f64c:	d801      	bhi.n	800f652 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800f64e:	2f00      	cmp	r7, #0
 800f650:	d1e9      	bne.n	800f626 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f652:	2304      	movs	r3, #4
 800f654:	f888 3041 	strb.w	r3, [r8, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f658:	f8d8 3044 	ldr.w	r3, [r8, #68]	@ 0x44
 800f65c:	f043 0301 	orr.w	r3, r3, #1
 800f660:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
        return HAL_ERROR;
 800f664:	2001      	movs	r0, #1
 800f666:	e000      	b.n	800f66a <QSPI_WaitFlagStateUntilTimeout+0x52>
  return HAL_OK;
 800f668:	2000      	movs	r0, #0
}
 800f66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800f670 <HAL_QSPI_Init>:
{
 800f670:	b570      	push	{r4, r5, r6, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f676:	f7fc f923 	bl	800b8c0 <HAL_GetTick>
  if(hqspi == NULL)
 800f67a:	2c00      	cmp	r4, #0
 800f67c:	d043      	beq.n	800f706 <HAL_QSPI_Init+0x96>
 800f67e:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f680:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800f684:	2b00      	cmp	r3, #0
 800f686:	d037      	beq.n	800f6f8 <HAL_QSPI_Init+0x88>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f688:	6825      	ldr	r5, [r4, #0]
 800f68a:	682a      	ldr	r2, [r5, #0]
 800f68c:	68a1      	ldr	r1, [r4, #8]
 800f68e:	3901      	subs	r1, #1
 800f690:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800f694:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800f698:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f69a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	4633      	mov	r3, r6
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	2120      	movs	r1, #32
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f7ff ffb7 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800f6aa:	bb18      	cbnz	r0, 800f6f4 <HAL_QSPI_Init+0x84>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f6ac:	6821      	ldr	r1, [r4, #0]
 800f6ae:	680d      	ldr	r5, [r1, #0]
 800f6b0:	68e3      	ldr	r3, [r4, #12]
 800f6b2:	69e2      	ldr	r2, [r4, #28]
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	6a22      	ldr	r2, [r4, #32]
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	6862      	ldr	r2, [r4, #4]
 800f6bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f6c0:	4a12      	ldr	r2, [pc, #72]	@ (800f70c <HAL_QSPI_Init+0x9c>)
 800f6c2:	402a      	ands	r2, r5
 800f6c4:	4313      	orrs	r3, r2
 800f6c6:	600b      	str	r3, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f6c8:	6821      	ldr	r1, [r4, #0]
 800f6ca:	684d      	ldr	r5, [r1, #4]
 800f6cc:	6963      	ldr	r3, [r4, #20]
 800f6ce:	69a2      	ldr	r2, [r4, #24]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	6922      	ldr	r2, [r4, #16]
 800f6d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6d8:	4a0d      	ldr	r2, [pc, #52]	@ (800f710 <HAL_QSPI_Init+0xa0>)
 800f6da:	402a      	ands	r2, r5
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800f6e0:	6822      	ldr	r2, [r4, #0]
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	f043 0301 	orr.w	r3, r3, #1
 800f6e8:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	6463      	str	r3, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800f6f4:	b002      	add	sp, #8
 800f6f6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_QSPI_MspInit(hqspi);
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	f7f1 fe99 	bl	8001430 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800f6fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f702:	64a3      	str	r3, [r4, #72]	@ 0x48
}
 800f704:	e7c0      	b.n	800f688 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 800f706:	2001      	movs	r0, #1
 800f708:	e7f4      	b.n	800f6f4 <HAL_QSPI_Init+0x84>
 800f70a:	bf00      	nop
 800f70c:	00ffff2f 	.word	0x00ffff2f
 800f710:	ffe0f8fe 	.word	0xffe0f8fe

0800f714 <HAL_QSPI_Command>:
{
 800f714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f718:	b082      	sub	sp, #8
 800f71a:	4604      	mov	r4, r0
 800f71c:	460f      	mov	r7, r1
 800f71e:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800f720:	f7fc f8ce 	bl	800b8c0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800f724:	f894 c040 	ldrb.w	ip, [r4, #64]	@ 0x40
 800f728:	fa5f fc8c 	uxtb.w	ip, ip
 800f72c:	f1bc 0f01 	cmp.w	ip, #1
 800f730:	d03c      	beq.n	800f7ac <HAL_QSPI_Command+0x98>
 800f732:	4605      	mov	r5, r0
 800f734:	2301      	movs	r3, #1
 800f736:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f73a:	f894 c041 	ldrb.w	ip, [r4, #65]	@ 0x41
 800f73e:	fa5f fc8c 	uxtb.w	ip, ip
 800f742:	459c      	cmp	ip, r3
 800f744:	d008      	beq.n	800f758 <HAL_QSPI_Command+0x44>
    status = HAL_BUSY;
 800f746:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 800f74a:	2300      	movs	r3, #0
 800f74c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800f750:	4640      	mov	r0, r8
 800f752:	b002      	add	sp, #8
 800f754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f758:	2200      	movs	r2, #0
 800f75a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800f75c:	2302      	movs	r3, #2
 800f75e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f762:	9600      	str	r6, [sp, #0]
 800f764:	4603      	mov	r3, r0
 800f766:	2120      	movs	r1, #32
 800f768:	4620      	mov	r0, r4
 800f76a:	f7ff ff55 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800f76e:	4680      	mov	r8, r0
 800f770:	2800      	cmp	r0, #0
 800f772:	d1ea      	bne.n	800f74a <HAL_QSPI_Command+0x36>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f774:	2200      	movs	r2, #0
 800f776:	4639      	mov	r1, r7
 800f778:	4620      	mov	r0, r4
 800f77a:	f7ff fe63 	bl	800f444 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800f77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f780:	b11b      	cbz	r3, 800f78a <HAL_QSPI_Command+0x76>
        hqspi->State = HAL_QSPI_STATE_READY;
 800f782:	2301      	movs	r3, #1
 800f784:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800f788:	e7df      	b.n	800f74a <HAL_QSPI_Command+0x36>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f78a:	9600      	str	r6, [sp, #0]
 800f78c:	462b      	mov	r3, r5
 800f78e:	2201      	movs	r2, #1
 800f790:	2102      	movs	r1, #2
 800f792:	4620      	mov	r0, r4
 800f794:	f7ff ff40 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800f798:	4680      	mov	r8, r0
 800f79a:	2800      	cmp	r0, #0
 800f79c:	d1d5      	bne.n	800f74a <HAL_QSPI_Command+0x36>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	2202      	movs	r2, #2
 800f7a2:	60da      	str	r2, [r3, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800f7aa:	e7ce      	b.n	800f74a <HAL_QSPI_Command+0x36>
  __HAL_LOCK(hqspi);
 800f7ac:	f04f 0802 	mov.w	r8, #2
 800f7b0:	e7ce      	b.n	800f750 <HAL_QSPI_Command+0x3c>

0800f7b2 <HAL_QSPI_Transmit>:
{
 800f7b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	4688      	mov	r8, r1
 800f7bc:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800f7be:	f7fc f87f 	bl	800b8c0 <HAL_GetTick>
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f7c2:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hqspi);
 800f7c4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d057      	beq.n	800f87e <HAL_QSPI_Transmit+0xcc>
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f7d6:	f894 c041 	ldrb.w	ip, [r4, #65]	@ 0x41
 800f7da:	fa5f fc8c 	uxtb.w	ip, ip
 800f7de:	459c      	cmp	ip, r3
 800f7e0:	d008      	beq.n	800f7f4 <HAL_QSPI_Transmit+0x42>
    status = HAL_BUSY;
 800f7e2:	f04f 0c02 	mov.w	ip, #2
  __HAL_UNLOCK(hqspi);
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800f7ec:	4660      	mov	r0, ip
 800f7ee:	b003      	add	sp, #12
 800f7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800f7f8:	f1b8 0f00 	cmp.w	r8, #0
 800f7fc:	d03a      	beq.n	800f874 <HAL_QSPI_Transmit+0xc2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800f7fe:	2312      	movs	r3, #18
 800f800:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	3301      	adds	r3, #1
 800f808:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	3301      	adds	r3, #1
 800f80e:	62a3      	str	r3, [r4, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 800f810:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800f81a:	617b      	str	r3, [r7, #20]
      while(hqspi->TxXferCount > 0U)
 800f81c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f81e:	b1cb      	cbz	r3, 800f854 <HAL_QSPI_Transmit+0xa2>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800f820:	f04f 0901 	mov.w	r9, #1
 800f824:	f04f 0804 	mov.w	r8, #4
 800f828:	9600      	str	r6, [sp, #0]
 800f82a:	462b      	mov	r3, r5
 800f82c:	464a      	mov	r2, r9
 800f82e:	4641      	mov	r1, r8
 800f830:	4620      	mov	r0, r4
 800f832:	f7ff fef1 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800f836:	4684      	mov	ip, r0
 800f838:	b9c0      	cbnz	r0, 800f86c <HAL_QSPI_Transmit+0xba>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f83a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	f887 3020 	strb.w	r3, [r7, #32]
        hqspi->pTxBuffPtr++;
 800f842:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f844:	3301      	adds	r3, #1
 800f846:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800f848:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f84a:	3901      	subs	r1, #1
 800f84c:	62e1      	str	r1, [r4, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 800f84e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f850:	2b00      	cmp	r3, #0
 800f852:	d1e9      	bne.n	800f828 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f854:	9600      	str	r6, [sp, #0]
 800f856:	462b      	mov	r3, r5
 800f858:	2201      	movs	r2, #1
 800f85a:	2102      	movs	r1, #2
 800f85c:	4620      	mov	r0, r4
 800f85e:	f7ff fedb 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800f862:	4684      	mov	ip, r0
 800f864:	b910      	cbnz	r0, 800f86c <HAL_QSPI_Transmit+0xba>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	2202      	movs	r2, #2
 800f86a:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800f86c:	2301      	movs	r3, #1
 800f86e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800f872:	e7b8      	b.n	800f7e6 <HAL_QSPI_Transmit+0x34>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f874:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f876:	f043 0308 	orr.w	r3, r3, #8
 800f87a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800f87c:	e7b3      	b.n	800f7e6 <HAL_QSPI_Transmit+0x34>
  __HAL_LOCK(hqspi);
 800f87e:	f04f 0c02 	mov.w	ip, #2
 800f882:	e7b3      	b.n	800f7ec <HAL_QSPI_Transmit+0x3a>

0800f884 <HAL_QSPI_Receive>:
{
 800f884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f888:	b083      	sub	sp, #12
 800f88a:	4604      	mov	r4, r0
 800f88c:	4688      	mov	r8, r1
 800f88e:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800f890:	f7fc f816 	bl	800b8c0 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f894:	6827      	ldr	r7, [r4, #0]
 800f896:	69ba      	ldr	r2, [r7, #24]
  __HAL_LOCK(hqspi);
 800f898:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d05b      	beq.n	800f95a <HAL_QSPI_Receive+0xd6>
 800f8a2:	4605      	mov	r5, r0
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f8aa:	f894 c041 	ldrb.w	ip, [r4, #65]	@ 0x41
 800f8ae:	fa5f fc8c 	uxtb.w	ip, ip
 800f8b2:	459c      	cmp	ip, r3
 800f8b4:	d008      	beq.n	800f8c8 <HAL_QSPI_Receive+0x44>
    status = HAL_BUSY;
 800f8b6:	f04f 0c02 	mov.w	ip, #2
  __HAL_UNLOCK(hqspi);
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800f8c0:	4660      	mov	r0, ip
 800f8c2:	b003      	add	sp, #12
 800f8c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800f8cc:	f1b8 0f00 	cmp.w	r8, #0
 800f8d0:	d03e      	beq.n	800f950 <HAL_QSPI_Receive+0xcc>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f8d2:	2322      	movs	r3, #34	@ 0x22
 800f8d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	6363      	str	r3, [r4, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 800f8e4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800f8ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f8f2:	617b      	str	r3, [r7, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f8f4:	6823      	ldr	r3, [r4, #0]
 800f8f6:	619a      	str	r2, [r3, #24]
      while(hqspi->RxXferCount > 0U)
 800f8f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f8fa:	b1cb      	cbz	r3, 800f930 <HAL_QSPI_Receive+0xac>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f8fc:	f04f 0901 	mov.w	r9, #1
 800f900:	f04f 0806 	mov.w	r8, #6
 800f904:	9600      	str	r6, [sp, #0]
 800f906:	462b      	mov	r3, r5
 800f908:	464a      	mov	r2, r9
 800f90a:	4641      	mov	r1, r8
 800f90c:	4620      	mov	r0, r4
 800f90e:	f7ff fe83 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800f912:	4684      	mov	ip, r0
 800f914:	b9c0      	cbnz	r0, 800f948 <HAL_QSPI_Receive+0xc4>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f916:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f918:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f91c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f91e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f920:	3301      	adds	r3, #1
 800f922:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800f924:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f926:	3901      	subs	r1, #1
 800f928:	63a1      	str	r1, [r4, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 800f92a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1e9      	bne.n	800f904 <HAL_QSPI_Receive+0x80>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f930:	9600      	str	r6, [sp, #0]
 800f932:	462b      	mov	r3, r5
 800f934:	2201      	movs	r2, #1
 800f936:	2102      	movs	r1, #2
 800f938:	4620      	mov	r0, r4
 800f93a:	f7ff fe6d 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800f93e:	4684      	mov	ip, r0
 800f940:	b910      	cbnz	r0, 800f948 <HAL_QSPI_Receive+0xc4>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f942:	6823      	ldr	r3, [r4, #0]
 800f944:	2202      	movs	r2, #2
 800f946:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800f948:	2301      	movs	r3, #1
 800f94a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800f94e:	e7b4      	b.n	800f8ba <HAL_QSPI_Receive+0x36>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f950:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f952:	f043 0308 	orr.w	r3, r3, #8
 800f956:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800f958:	e7af      	b.n	800f8ba <HAL_QSPI_Receive+0x36>
  __HAL_LOCK(hqspi);
 800f95a:	f04f 0c02 	mov.w	ip, #2
 800f95e:	e7af      	b.n	800f8c0 <HAL_QSPI_Receive+0x3c>

0800f960 <HAL_QSPI_AutoPolling>:
{
 800f960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f964:	b082      	sub	sp, #8
 800f966:	4604      	mov	r4, r0
 800f968:	4688      	mov	r8, r1
 800f96a:	4615      	mov	r5, r2
 800f96c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800f96e:	f7fb ffa7 	bl	800b8c0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800f972:	f894 c040 	ldrb.w	ip, [r4, #64]	@ 0x40
 800f976:	fa5f fc8c 	uxtb.w	ip, ip
 800f97a:	f1bc 0f01 	cmp.w	ip, #1
 800f97e:	d048      	beq.n	800fa12 <HAL_QSPI_AutoPolling+0xb2>
 800f980:	4606      	mov	r6, r0
 800f982:	2301      	movs	r3, #1
 800f984:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f988:	f894 c041 	ldrb.w	ip, [r4, #65]	@ 0x41
 800f98c:	fa5f fc8c 	uxtb.w	ip, ip
 800f990:	459c      	cmp	ip, r3
 800f992:	d006      	beq.n	800f9a2 <HAL_QSPI_AutoPolling+0x42>
    status = HAL_BUSY;
 800f994:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 800f996:	2300      	movs	r3, #0
 800f998:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800f99c:	b002      	add	sp, #8
 800f99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800f9a6:	2342      	movs	r3, #66	@ 0x42
 800f9a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f9ac:	9700      	str	r7, [sp, #0]
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2120      	movs	r1, #32
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f7ff fe30 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d1ec      	bne.n	800f996 <HAL_QSPI_AutoPolling+0x36>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800f9bc:	6823      	ldr	r3, [r4, #0]
 800f9be:	682a      	ldr	r2, [r5, #0]
 800f9c0:	629a      	str	r2, [r3, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	686a      	ldr	r2, [r5, #4]
 800f9c6:	625a      	str	r2, [r3, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800f9c8:	6823      	ldr	r3, [r4, #0]
 800f9ca:	68aa      	ldr	r2, [r5, #8]
 800f9cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800f9ce:	6822      	ldr	r2, [r4, #0]
 800f9d0:	6813      	ldr	r3, [r2, #0]
 800f9d2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800f9d6:	6929      	ldr	r1, [r5, #16]
 800f9d8:	430b      	orrs	r3, r1
 800f9da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f9de:	6013      	str	r3, [r2, #0]
      cmd->NbData = cfg->StatusBytesSize;
 800f9e0:	68eb      	ldr	r3, [r5, #12]
 800f9e2:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800f9e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800f9ea:	4641      	mov	r1, r8
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f7ff fd29 	bl	800f444 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800f9f2:	9700      	str	r7, [sp, #0]
 800f9f4:	4633      	mov	r3, r6
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	2108      	movs	r1, #8
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f7ff fe0c 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d1c8      	bne.n	800f996 <HAL_QSPI_AutoPolling+0x36>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800fa04:	6823      	ldr	r3, [r4, #0]
 800fa06:	2208      	movs	r2, #8
 800fa08:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800fa10:	e7c1      	b.n	800f996 <HAL_QSPI_AutoPolling+0x36>
  __HAL_LOCK(hqspi);
 800fa12:	2002      	movs	r0, #2
 800fa14:	e7c2      	b.n	800f99c <HAL_QSPI_AutoPolling+0x3c>

0800fa16 <HAL_QSPI_MemoryMapped>:
{
 800fa16:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa18:	b083      	sub	sp, #12
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	460e      	mov	r6, r1
 800fa1e:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800fa20:	f7fb ff4e 	bl	800b8c0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800fa24:	f894 c040 	ldrb.w	ip, [r4, #64]	@ 0x40
 800fa28:	fa5f fc8c 	uxtb.w	ip, ip
 800fa2c:	f1bc 0f01 	cmp.w	ip, #1
 800fa30:	d03b      	beq.n	800faaa <HAL_QSPI_MemoryMapped+0x94>
 800fa32:	2301      	movs	r3, #1
 800fa34:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fa38:	f894 c041 	ldrb.w	ip, [r4, #65]	@ 0x41
 800fa3c:	fa5f fc8c 	uxtb.w	ip, ip
 800fa40:	459c      	cmp	ip, r3
 800fa42:	d006      	beq.n	800fa52 <HAL_QSPI_MemoryMapped+0x3c>
    status = HAL_BUSY;
 800fa44:	2702      	movs	r7, #2
  __HAL_UNLOCK(hqspi);
 800fa46:	2300      	movs	r3, #0
 800fa48:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	b003      	add	sp, #12
 800fa50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fa52:	2200      	movs	r2, #0
 800fa54:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800fa56:	2382      	movs	r3, #130	@ 0x82
 800fa58:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800fa5c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	4603      	mov	r3, r0
 800fa62:	2120      	movs	r1, #32
 800fa64:	4620      	mov	r0, r4
 800fa66:	f7ff fdd7 	bl	800f618 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800fa6a:	4607      	mov	r7, r0
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d1ea      	bne.n	800fa46 <HAL_QSPI_MemoryMapped+0x30>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800fa70:	6822      	ldr	r2, [r4, #0]
 800fa72:	6813      	ldr	r3, [r2, #0]
 800fa74:	f023 0308 	bic.w	r3, r3, #8
 800fa78:	6869      	ldr	r1, [r5, #4]
 800fa7a:	430b      	orrs	r3, r1
 800fa7c:	6013      	str	r3, [r2, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800fa7e:	686b      	ldr	r3, [r5, #4]
 800fa80:	2b08      	cmp	r3, #8
 800fa82:	d006      	beq.n	800fa92 <HAL_QSPI_MemoryMapped+0x7c>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800fa84:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800fa88:	4631      	mov	r1, r6
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	f7ff fcda 	bl	800f444 <QSPI_Config>
 800fa90:	e7d9      	b.n	800fa46 <HAL_QSPI_MemoryMapped+0x30>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	682a      	ldr	r2, [r5, #0]
 800fa96:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800fa98:	6823      	ldr	r3, [r4, #0]
 800fa9a:	2210      	movs	r2, #16
 800fa9c:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800fa9e:	6822      	ldr	r2, [r4, #0]
 800faa0:	6813      	ldr	r3, [r2, #0]
 800faa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	e7ec      	b.n	800fa84 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800faaa:	2702      	movs	r7, #2
 800faac:	e7ce      	b.n	800fa4c <HAL_QSPI_MemoryMapped+0x36>
	...

0800fab0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800fab0:	2800      	cmp	r0, #0
 800fab2:	f000 8339 	beq.w	8010128 <HAL_RCC_OscConfig+0x678>
{
 800fab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800faba:	6803      	ldr	r3, [r0, #0]
 800fabc:	f013 0f01 	tst.w	r3, #1
 800fac0:	d025      	beq.n	800fb0e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fac2:	4a94      	ldr	r2, [pc, #592]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fac4:	6913      	ldr	r3, [r2, #16]
 800fac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800faca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800facc:	2b10      	cmp	r3, #16
 800face:	d015      	beq.n	800fafc <HAL_RCC_OscConfig+0x4c>
 800fad0:	2b18      	cmp	r3, #24
 800fad2:	d00f      	beq.n	800faf4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fad4:	6863      	ldr	r3, [r4, #4]
 800fad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fada:	d03f      	beq.n	800fb5c <HAL_RCC_OscConfig+0xac>
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d153      	bne.n	800fb88 <HAL_RCC_OscConfig+0xd8>
 800fae0:	4b8c      	ldr	r3, [pc, #560]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	e038      	b.n	800fb66 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800faf4:	f002 0203 	and.w	r2, r2, #3
 800faf8:	2a02      	cmp	r2, #2
 800fafa:	d1eb      	bne.n	800fad4 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fafc:	4b85      	ldr	r3, [pc, #532]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800fb04:	d003      	beq.n	800fb0e <HAL_RCC_OscConfig+0x5e>
 800fb06:	6863      	ldr	r3, [r4, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f000 830f 	beq.w	801012c <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fb0e:	6823      	ldr	r3, [r4, #0]
 800fb10:	f013 0f02 	tst.w	r3, #2
 800fb14:	f000 80a1 	beq.w	800fc5a <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fb18:	4a7e      	ldr	r2, [pc, #504]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fb1a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800fb1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800fb1e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800fb22:	d05a      	beq.n	800fbda <HAL_RCC_OscConfig+0x12a>
 800fb24:	2b18      	cmp	r3, #24
 800fb26:	d055      	beq.n	800fbd4 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800fb28:	68e2      	ldr	r2, [r4, #12]
 800fb2a:	2a00      	cmp	r2, #0
 800fb2c:	f000 80de 	beq.w	800fcec <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800fb30:	4978      	ldr	r1, [pc, #480]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fb32:	680b      	ldr	r3, [r1, #0]
 800fb34:	f023 0319 	bic.w	r3, r3, #25
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb3c:	f7fb fec0 	bl	800b8c0 <HAL_GetTick>
 800fb40:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fb42:	4e74      	ldr	r6, [pc, #464]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fb44:	6833      	ldr	r3, [r6, #0]
 800fb46:	f013 0f04 	tst.w	r3, #4
 800fb4a:	f040 80ad 	bne.w	800fca8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fb4e:	f7fb feb7 	bl	800b8c0 <HAL_GetTick>
 800fb52:	1b40      	subs	r0, r0, r5
 800fb54:	2802      	cmp	r0, #2
 800fb56:	d9f5      	bls.n	800fb44 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 800fb58:	2003      	movs	r0, #3
 800fb5a:	e2ee      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fb5c:	4a6d      	ldr	r2, [pc, #436]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fb5e:	6813      	ldr	r3, [r2, #0]
 800fb60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fb64:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fb66:	6863      	ldr	r3, [r4, #4]
 800fb68:	b32b      	cbz	r3, 800fbb6 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800fb6a:	f7fb fea9 	bl	800b8c0 <HAL_GetTick>
 800fb6e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fb70:	4e68      	ldr	r6, [pc, #416]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fb72:	6833      	ldr	r3, [r6, #0]
 800fb74:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800fb78:	d1c9      	bne.n	800fb0e <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fb7a:	f7fb fea1 	bl	800b8c0 <HAL_GetTick>
 800fb7e:	1b40      	subs	r0, r0, r5
 800fb80:	2864      	cmp	r0, #100	@ 0x64
 800fb82:	d9f6      	bls.n	800fb72 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 800fb84:	2003      	movs	r0, #3
 800fb86:	e2d8      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fb88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fb8c:	d009      	beq.n	800fba2 <HAL_RCC_OscConfig+0xf2>
 800fb8e:	4b61      	ldr	r3, [pc, #388]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800fb96:	601a      	str	r2, [r3, #0]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800fb9e:	601a      	str	r2, [r3, #0]
 800fba0:	e7e1      	b.n	800fb66 <HAL_RCC_OscConfig+0xb6>
 800fba2:	4b5c      	ldr	r3, [pc, #368]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800fbaa:	601a      	str	r2, [r3, #0]
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800fbb2:	601a      	str	r2, [r3, #0]
 800fbb4:	e7d7      	b.n	800fb66 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 800fbb6:	f7fb fe83 	bl	800b8c0 <HAL_GetTick>
 800fbba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fbbc:	4e55      	ldr	r6, [pc, #340]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fbbe:	6833      	ldr	r3, [r6, #0]
 800fbc0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800fbc4:	d0a3      	beq.n	800fb0e <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fbc6:	f7fb fe7b 	bl	800b8c0 <HAL_GetTick>
 800fbca:	1b40      	subs	r0, r0, r5
 800fbcc:	2864      	cmp	r0, #100	@ 0x64
 800fbce:	d9f6      	bls.n	800fbbe <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800fbd0:	2003      	movs	r0, #3
 800fbd2:	e2b2      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800fbd4:	f012 0f03 	tst.w	r2, #3
 800fbd8:	d1a6      	bne.n	800fb28 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fbda:	4b4e      	ldr	r3, [pc, #312]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f013 0f04 	tst.w	r3, #4
 800fbe2:	d003      	beq.n	800fbec <HAL_RCC_OscConfig+0x13c>
 800fbe4:	68e3      	ldr	r3, [r4, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	f000 82a2 	beq.w	8010130 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800fbec:	4a49      	ldr	r2, [pc, #292]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fbee:	6813      	ldr	r3, [r2, #0]
 800fbf0:	f023 0319 	bic.w	r3, r3, #25
 800fbf4:	68e1      	ldr	r1, [r4, #12]
 800fbf6:	430b      	orrs	r3, r1
 800fbf8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fbfa:	f7fb fe61 	bl	800b8c0 <HAL_GetTick>
 800fbfe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fc00:	4e44      	ldr	r6, [pc, #272]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fc02:	6833      	ldr	r3, [r6, #0]
 800fc04:	f013 0f04 	tst.w	r3, #4
 800fc08:	d106      	bne.n	800fc18 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fc0a:	f7fb fe59 	bl	800b8c0 <HAL_GetTick>
 800fc0e:	1b40      	subs	r0, r0, r5
 800fc10:	2802      	cmp	r0, #2
 800fc12:	d9f6      	bls.n	800fc02 <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 800fc14:	2003      	movs	r0, #3
 800fc16:	e290      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fc18:	f7fb fe6c 	bl	800b8f4 <HAL_GetREVID>
 800fc1c:	f241 0303 	movw	r3, #4099	@ 0x1003
 800fc20:	4298      	cmp	r0, r3
 800fc22:	d812      	bhi.n	800fc4a <HAL_RCC_OscConfig+0x19a>
 800fc24:	6922      	ldr	r2, [r4, #16]
 800fc26:	2a40      	cmp	r2, #64	@ 0x40
 800fc28:	d007      	beq.n	800fc3a <HAL_RCC_OscConfig+0x18a>
 800fc2a:	493a      	ldr	r1, [pc, #232]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fc2c:	684b      	ldr	r3, [r1, #4]
 800fc2e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800fc32:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800fc36:	604b      	str	r3, [r1, #4]
 800fc38:	e00f      	b.n	800fc5a <HAL_RCC_OscConfig+0x1aa>
 800fc3a:	4a36      	ldr	r2, [pc, #216]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fc3c:	6853      	ldr	r3, [r2, #4]
 800fc3e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800fc42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fc46:	6053      	str	r3, [r2, #4]
 800fc48:	e007      	b.n	800fc5a <HAL_RCC_OscConfig+0x1aa>
 800fc4a:	4a32      	ldr	r2, [pc, #200]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fc4c:	6853      	ldr	r3, [r2, #4]
 800fc4e:	6921      	ldr	r1, [r4, #16]
 800fc50:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800fc54:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fc58:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	f013 0f10 	tst.w	r3, #16
 800fc60:	f000 8088 	beq.w	800fd74 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fc64:	4a2b      	ldr	r2, [pc, #172]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fc66:	6913      	ldr	r3, [r2, #16]
 800fc68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800fc6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800fc6e:	2b08      	cmp	r3, #8
 800fc70:	d056      	beq.n	800fd20 <HAL_RCC_OscConfig+0x270>
 800fc72:	2b18      	cmp	r3, #24
 800fc74:	d050      	beq.n	800fd18 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800fc76:	69e3      	ldr	r3, [r4, #28]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 80b8 	beq.w	800fdee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800fc7e:	4a25      	ldr	r2, [pc, #148]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fc80:	6813      	ldr	r3, [r2, #0]
 800fc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc88:	f7fb fe1a 	bl	800b8c0 <HAL_GetTick>
 800fc8c:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fc8e:	4e21      	ldr	r6, [pc, #132]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fc90:	6833      	ldr	r3, [r6, #0]
 800fc92:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800fc96:	f040 8088 	bne.w	800fdaa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800fc9a:	f7fb fe11 	bl	800b8c0 <HAL_GetTick>
 800fc9e:	1b40      	subs	r0, r0, r5
 800fca0:	2802      	cmp	r0, #2
 800fca2:	d9f5      	bls.n	800fc90 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800fca4:	2003      	movs	r0, #3
 800fca6:	e248      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fca8:	f7fb fe24 	bl	800b8f4 <HAL_GetREVID>
 800fcac:	f241 0303 	movw	r3, #4099	@ 0x1003
 800fcb0:	4298      	cmp	r0, r3
 800fcb2:	d812      	bhi.n	800fcda <HAL_RCC_OscConfig+0x22a>
 800fcb4:	6922      	ldr	r2, [r4, #16]
 800fcb6:	2a40      	cmp	r2, #64	@ 0x40
 800fcb8:	d007      	beq.n	800fcca <HAL_RCC_OscConfig+0x21a>
 800fcba:	4916      	ldr	r1, [pc, #88]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fcbc:	684b      	ldr	r3, [r1, #4]
 800fcbe:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800fcc2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800fcc6:	604b      	str	r3, [r1, #4]
 800fcc8:	e7c7      	b.n	800fc5a <HAL_RCC_OscConfig+0x1aa>
 800fcca:	4a12      	ldr	r2, [pc, #72]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fccc:	6853      	ldr	r3, [r2, #4]
 800fcce:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800fcd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fcd6:	6053      	str	r3, [r2, #4]
 800fcd8:	e7bf      	b.n	800fc5a <HAL_RCC_OscConfig+0x1aa>
 800fcda:	4a0e      	ldr	r2, [pc, #56]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fcdc:	6853      	ldr	r3, [r2, #4]
 800fcde:	6921      	ldr	r1, [r4, #16]
 800fce0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800fce4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fce8:	6053      	str	r3, [r2, #4]
 800fcea:	e7b6      	b.n	800fc5a <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 800fcec:	4a09      	ldr	r2, [pc, #36]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fcee:	6813      	ldr	r3, [r2, #0]
 800fcf0:	f023 0301 	bic.w	r3, r3, #1
 800fcf4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fcf6:	f7fb fde3 	bl	800b8c0 <HAL_GetTick>
 800fcfa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fcfc:	4e05      	ldr	r6, [pc, #20]	@ (800fd14 <HAL_RCC_OscConfig+0x264>)
 800fcfe:	6833      	ldr	r3, [r6, #0]
 800fd00:	f013 0f04 	tst.w	r3, #4
 800fd04:	d0a9      	beq.n	800fc5a <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fd06:	f7fb fddb 	bl	800b8c0 <HAL_GetTick>
 800fd0a:	1b40      	subs	r0, r0, r5
 800fd0c:	2802      	cmp	r0, #2
 800fd0e:	d9f6      	bls.n	800fcfe <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800fd10:	2003      	movs	r0, #3
 800fd12:	e212      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 800fd14:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800fd18:	f002 0203 	and.w	r2, r2, #3
 800fd1c:	2a01      	cmp	r2, #1
 800fd1e:	d1aa      	bne.n	800fc76 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800fd20:	4ba1      	ldr	r3, [pc, #644]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800fd28:	d003      	beq.n	800fd32 <HAL_RCC_OscConfig+0x282>
 800fd2a:	69e3      	ldr	r3, [r4, #28]
 800fd2c:	2b80      	cmp	r3, #128	@ 0x80
 800fd2e:	f040 8201 	bne.w	8010134 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fd32:	f7fb fddf 	bl	800b8f4 <HAL_GetREVID>
 800fd36:	f241 0303 	movw	r3, #4099	@ 0x1003
 800fd3a:	4298      	cmp	r0, r3
 800fd3c:	d812      	bhi.n	800fd64 <HAL_RCC_OscConfig+0x2b4>
 800fd3e:	6a22      	ldr	r2, [r4, #32]
 800fd40:	2a20      	cmp	r2, #32
 800fd42:	d007      	beq.n	800fd54 <HAL_RCC_OscConfig+0x2a4>
 800fd44:	4998      	ldr	r1, [pc, #608]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fd46:	684b      	ldr	r3, [r1, #4]
 800fd48:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800fd4c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800fd50:	604b      	str	r3, [r1, #4]
 800fd52:	e00f      	b.n	800fd74 <HAL_RCC_OscConfig+0x2c4>
 800fd54:	4a94      	ldr	r2, [pc, #592]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fd56:	6853      	ldr	r3, [r2, #4]
 800fd58:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800fd5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fd60:	6053      	str	r3, [r2, #4]
 800fd62:	e007      	b.n	800fd74 <HAL_RCC_OscConfig+0x2c4>
 800fd64:	4a90      	ldr	r2, [pc, #576]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fd66:	68d3      	ldr	r3, [r2, #12]
 800fd68:	6a21      	ldr	r1, [r4, #32]
 800fd6a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800fd6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fd72:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fd74:	6823      	ldr	r3, [r4, #0]
 800fd76:	f013 0f08 	tst.w	r3, #8
 800fd7a:	d060      	beq.n	800fe3e <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800fd7c:	6963      	ldr	r3, [r4, #20]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d049      	beq.n	800fe16 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fd82:	4a89      	ldr	r2, [pc, #548]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fd84:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800fd86:	f043 0301 	orr.w	r3, r3, #1
 800fd8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd8c:	f7fb fd98 	bl	800b8c0 <HAL_GetTick>
 800fd90:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fd92:	4e85      	ldr	r6, [pc, #532]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fd94:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800fd96:	f013 0f02 	tst.w	r3, #2
 800fd9a:	d150      	bne.n	800fe3e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fd9c:	f7fb fd90 	bl	800b8c0 <HAL_GetTick>
 800fda0:	1b40      	subs	r0, r0, r5
 800fda2:	2802      	cmp	r0, #2
 800fda4:	d9f6      	bls.n	800fd94 <HAL_RCC_OscConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 800fda6:	2003      	movs	r0, #3
 800fda8:	e1c7      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fdaa:	f7fb fda3 	bl	800b8f4 <HAL_GetREVID>
 800fdae:	f241 0303 	movw	r3, #4099	@ 0x1003
 800fdb2:	4298      	cmp	r0, r3
 800fdb4:	d812      	bhi.n	800fddc <HAL_RCC_OscConfig+0x32c>
 800fdb6:	6a22      	ldr	r2, [r4, #32]
 800fdb8:	2a20      	cmp	r2, #32
 800fdba:	d007      	beq.n	800fdcc <HAL_RCC_OscConfig+0x31c>
 800fdbc:	497a      	ldr	r1, [pc, #488]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fdbe:	684b      	ldr	r3, [r1, #4]
 800fdc0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800fdc4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800fdc8:	604b      	str	r3, [r1, #4]
 800fdca:	e7d3      	b.n	800fd74 <HAL_RCC_OscConfig+0x2c4>
 800fdcc:	4a76      	ldr	r2, [pc, #472]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fdce:	6853      	ldr	r3, [r2, #4]
 800fdd0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800fdd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fdd8:	6053      	str	r3, [r2, #4]
 800fdda:	e7cb      	b.n	800fd74 <HAL_RCC_OscConfig+0x2c4>
 800fddc:	4a72      	ldr	r2, [pc, #456]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fdde:	68d3      	ldr	r3, [r2, #12]
 800fde0:	6a21      	ldr	r1, [r4, #32]
 800fde2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800fde6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fdea:	60d3      	str	r3, [r2, #12]
 800fdec:	e7c2      	b.n	800fd74 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 800fdee:	4a6e      	ldr	r2, [pc, #440]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fdf0:	6813      	ldr	r3, [r2, #0]
 800fdf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fdf6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fdf8:	f7fb fd62 	bl	800b8c0 <HAL_GetTick>
 800fdfc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800fdfe:	4e6a      	ldr	r6, [pc, #424]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fe00:	6833      	ldr	r3, [r6, #0]
 800fe02:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800fe06:	d0b5      	beq.n	800fd74 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800fe08:	f7fb fd5a 	bl	800b8c0 <HAL_GetTick>
 800fe0c:	1b40      	subs	r0, r0, r5
 800fe0e:	2802      	cmp	r0, #2
 800fe10:	d9f6      	bls.n	800fe00 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 800fe12:	2003      	movs	r0, #3
 800fe14:	e191      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fe16:	4a64      	ldr	r2, [pc, #400]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fe18:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800fe1a:	f023 0301 	bic.w	r3, r3, #1
 800fe1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fe20:	f7fb fd4e 	bl	800b8c0 <HAL_GetTick>
 800fe24:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fe26:	4e60      	ldr	r6, [pc, #384]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fe28:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800fe2a:	f013 0f02 	tst.w	r3, #2
 800fe2e:	d006      	beq.n	800fe3e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fe30:	f7fb fd46 	bl	800b8c0 <HAL_GetTick>
 800fe34:	1b40      	subs	r0, r0, r5
 800fe36:	2802      	cmp	r0, #2
 800fe38:	d9f6      	bls.n	800fe28 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 800fe3a:	2003      	movs	r0, #3
 800fe3c:	e17d      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fe3e:	6823      	ldr	r3, [r4, #0]
 800fe40:	f013 0f20 	tst.w	r3, #32
 800fe44:	d029      	beq.n	800fe9a <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800fe46:	69a3      	ldr	r3, [r4, #24]
 800fe48:	b19b      	cbz	r3, 800fe72 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800fe4a:	4a57      	ldr	r2, [pc, #348]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fe4c:	6813      	ldr	r3, [r2, #0]
 800fe4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800fe52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800fe54:	f7fb fd34 	bl	800b8c0 <HAL_GetTick>
 800fe58:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fe5a:	4e53      	ldr	r6, [pc, #332]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fe5c:	6833      	ldr	r3, [r6, #0]
 800fe5e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800fe62:	d11a      	bne.n	800fe9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe64:	f7fb fd2c 	bl	800b8c0 <HAL_GetTick>
 800fe68:	1b40      	subs	r0, r0, r5
 800fe6a:	2802      	cmp	r0, #2
 800fe6c:	d9f6      	bls.n	800fe5c <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 800fe6e:	2003      	movs	r0, #3
 800fe70:	e163      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800fe72:	4a4d      	ldr	r2, [pc, #308]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fe74:	6813      	ldr	r3, [r2, #0]
 800fe76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fe7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800fe7c:	f7fb fd20 	bl	800b8c0 <HAL_GetTick>
 800fe80:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fe82:	4e49      	ldr	r6, [pc, #292]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fe84:	6833      	ldr	r3, [r6, #0]
 800fe86:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800fe8a:	d006      	beq.n	800fe9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe8c:	f7fb fd18 	bl	800b8c0 <HAL_GetTick>
 800fe90:	1b40      	subs	r0, r0, r5
 800fe92:	2802      	cmp	r0, #2
 800fe94:	d9f6      	bls.n	800fe84 <HAL_RCC_OscConfig+0x3d4>
        {
          return HAL_TIMEOUT;
 800fe96:	2003      	movs	r0, #3
 800fe98:	e14f      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	f013 0f04 	tst.w	r3, #4
 800fea0:	d121      	bne.n	800fee6 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fea2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f000 8147 	beq.w	8010138 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800feaa:	4a3f      	ldr	r2, [pc, #252]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800feac:	6912      	ldr	r2, [r2, #16]
 800feae:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800feb2:	2a18      	cmp	r2, #24
 800feb4:	f000 80ee 	beq.w	8010094 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800feb8:	2b02      	cmp	r3, #2
 800feba:	d079      	beq.n	800ffb0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800febc:	4a3a      	ldr	r2, [pc, #232]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800febe:	6813      	ldr	r3, [r2, #0]
 800fec0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fec6:	f7fb fcfb 	bl	800b8c0 <HAL_GetTick>
 800feca:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fecc:	4d36      	ldr	r5, [pc, #216]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800fece:	682b      	ldr	r3, [r5, #0]
 800fed0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800fed4:	f000 80dc 	beq.w	8010090 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fed8:	f7fb fcf2 	bl	800b8c0 <HAL_GetTick>
 800fedc:	1b00      	subs	r0, r0, r4
 800fede:	2802      	cmp	r0, #2
 800fee0:	d9f5      	bls.n	800fece <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 800fee2:	2003      	movs	r0, #3
 800fee4:	e129      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 800fee6:	4a31      	ldr	r2, [pc, #196]	@ (800ffac <HAL_RCC_OscConfig+0x4fc>)
 800fee8:	6813      	ldr	r3, [r2, #0]
 800feea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800feee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800fef0:	f7fb fce6 	bl	800b8c0 <HAL_GetTick>
 800fef4:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fef6:	4e2d      	ldr	r6, [pc, #180]	@ (800ffac <HAL_RCC_OscConfig+0x4fc>)
 800fef8:	6833      	ldr	r3, [r6, #0]
 800fefa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800fefe:	d106      	bne.n	800ff0e <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ff00:	f7fb fcde 	bl	800b8c0 <HAL_GetTick>
 800ff04:	1b40      	subs	r0, r0, r5
 800ff06:	2864      	cmp	r0, #100	@ 0x64
 800ff08:	d9f6      	bls.n	800fef8 <HAL_RCC_OscConfig+0x448>
        return HAL_TIMEOUT;
 800ff0a:	2003      	movs	r0, #3
 800ff0c:	e115      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ff0e:	68a3      	ldr	r3, [r4, #8]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d00a      	beq.n	800ff2a <HAL_RCC_OscConfig+0x47a>
 800ff14:	bb0b      	cbnz	r3, 800ff5a <HAL_RCC_OscConfig+0x4aa>
 800ff16:	4b24      	ldr	r3, [pc, #144]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800ff18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ff1a:	f022 0201 	bic.w	r2, r2, #1
 800ff1e:	671a      	str	r2, [r3, #112]	@ 0x70
 800ff20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ff22:	f022 0204 	bic.w	r2, r2, #4
 800ff26:	671a      	str	r2, [r3, #112]	@ 0x70
 800ff28:	e004      	b.n	800ff34 <HAL_RCC_OscConfig+0x484>
 800ff2a:	4a1f      	ldr	r2, [pc, #124]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800ff2c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800ff2e:	f043 0301 	orr.w	r3, r3, #1
 800ff32:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ff34:	68a3      	ldr	r3, [r4, #8]
 800ff36:	b333      	cbz	r3, 800ff86 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 800ff38:	f7fb fcc2 	bl	800b8c0 <HAL_GetTick>
 800ff3c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ff3e:	4e1a      	ldr	r6, [pc, #104]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff40:	f241 3788 	movw	r7, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ff44:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800ff46:	f013 0f02 	tst.w	r3, #2
 800ff4a:	d1aa      	bne.n	800fea2 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff4c:	f7fb fcb8 	bl	800b8c0 <HAL_GetTick>
 800ff50:	1b40      	subs	r0, r0, r5
 800ff52:	42b8      	cmp	r0, r7
 800ff54:	d9f6      	bls.n	800ff44 <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 800ff56:	2003      	movs	r0, #3
 800ff58:	e0ef      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ff5a:	2b05      	cmp	r3, #5
 800ff5c:	d009      	beq.n	800ff72 <HAL_RCC_OscConfig+0x4c2>
 800ff5e:	4b12      	ldr	r3, [pc, #72]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800ff60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ff62:	f022 0201 	bic.w	r2, r2, #1
 800ff66:	671a      	str	r2, [r3, #112]	@ 0x70
 800ff68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ff6a:	f022 0204 	bic.w	r2, r2, #4
 800ff6e:	671a      	str	r2, [r3, #112]	@ 0x70
 800ff70:	e7e0      	b.n	800ff34 <HAL_RCC_OscConfig+0x484>
 800ff72:	4b0d      	ldr	r3, [pc, #52]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
 800ff74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ff76:	f042 0204 	orr.w	r2, r2, #4
 800ff7a:	671a      	str	r2, [r3, #112]	@ 0x70
 800ff7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ff7e:	f042 0201 	orr.w	r2, r2, #1
 800ff82:	671a      	str	r2, [r3, #112]	@ 0x70
 800ff84:	e7d6      	b.n	800ff34 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 800ff86:	f7fb fc9b 	bl	800b8c0 <HAL_GetTick>
 800ff8a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ff8c:	4e06      	ldr	r6, [pc, #24]	@ (800ffa8 <HAL_RCC_OscConfig+0x4f8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff8e:	f241 3788 	movw	r7, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ff92:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800ff94:	f013 0f02 	tst.w	r3, #2
 800ff98:	d083      	beq.n	800fea2 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff9a:	f7fb fc91 	bl	800b8c0 <HAL_GetTick>
 800ff9e:	1b40      	subs	r0, r0, r5
 800ffa0:	42b8      	cmp	r0, r7
 800ffa2:	d9f6      	bls.n	800ff92 <HAL_RCC_OscConfig+0x4e2>
          return HAL_TIMEOUT;
 800ffa4:	2003      	movs	r0, #3
 800ffa6:	e0c8      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 800ffa8:	58024400 	.word	0x58024400
 800ffac:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 800ffb0:	4a69      	ldr	r2, [pc, #420]	@ (8010158 <HAL_RCC_OscConfig+0x6a8>)
 800ffb2:	6813      	ldr	r3, [r2, #0]
 800ffb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ffb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ffba:	f7fb fc81 	bl	800b8c0 <HAL_GetTick>
 800ffbe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ffc0:	4e65      	ldr	r6, [pc, #404]	@ (8010158 <HAL_RCC_OscConfig+0x6a8>)
 800ffc2:	6833      	ldr	r3, [r6, #0]
 800ffc4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800ffc8:	d006      	beq.n	800ffd8 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ffca:	f7fb fc79 	bl	800b8c0 <HAL_GetTick>
 800ffce:	1b40      	subs	r0, r0, r5
 800ffd0:	2802      	cmp	r0, #2
 800ffd2:	d9f6      	bls.n	800ffc2 <HAL_RCC_OscConfig+0x512>
            return HAL_TIMEOUT;
 800ffd4:	2003      	movs	r0, #3
 800ffd6:	e0b0      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ffd8:	4b5f      	ldr	r3, [pc, #380]	@ (8010158 <HAL_RCC_OscConfig+0x6a8>)
 800ffda:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ffdc:	4a5f      	ldr	r2, [pc, #380]	@ (801015c <HAL_RCC_OscConfig+0x6ac>)
 800ffde:	400a      	ands	r2, r1
 800ffe0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ffe2:	430a      	orrs	r2, r1
 800ffe4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ffe6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ffea:	629a      	str	r2, [r3, #40]	@ 0x28
 800ffec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ffee:	3a01      	subs	r2, #1
 800fff0:	0252      	lsls	r2, r2, #9
 800fff2:	b292      	uxth	r2, r2
 800fff4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fff6:	3901      	subs	r1, #1
 800fff8:	0409      	lsls	r1, r1, #16
 800fffa:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800fffe:	430a      	orrs	r2, r1
 8010000:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010002:	3901      	subs	r1, #1
 8010004:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8010008:	430a      	orrs	r2, r1
 801000a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801000c:	3901      	subs	r1, #1
 801000e:	0609      	lsls	r1, r1, #24
 8010010:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8010014:	430a      	orrs	r2, r1
 8010016:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8010018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801001a:	f022 0201 	bic.w	r2, r2, #1
 801001e:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010020:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8010022:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010024:	4a4e      	ldr	r2, [pc, #312]	@ (8010160 <HAL_RCC_OscConfig+0x6b0>)
 8010026:	4002      	ands	r2, r0
 8010028:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 801002c:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801002e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010030:	f022 020c 	bic.w	r2, r2, #12
 8010034:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8010036:	430a      	orrs	r2, r1
 8010038:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801003a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801003c:	f022 0202 	bic.w	r2, r2, #2
 8010040:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010042:	430a      	orrs	r2, r1
 8010044:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010048:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801004c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801004e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010050:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010054:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010058:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801005c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 801005e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010060:	f042 0201 	orr.w	r2, r2, #1
 8010064:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 801006c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801006e:	f7fb fc27 	bl	800b8c0 <HAL_GetTick>
 8010072:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010074:	4d38      	ldr	r5, [pc, #224]	@ (8010158 <HAL_RCC_OscConfig+0x6a8>)
 8010076:	682b      	ldr	r3, [r5, #0]
 8010078:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801007c:	d106      	bne.n	801008c <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801007e:	f7fb fc1f 	bl	800b8c0 <HAL_GetTick>
 8010082:	1b00      	subs	r0, r0, r4
 8010084:	2802      	cmp	r0, #2
 8010086:	d9f6      	bls.n	8010076 <HAL_RCC_OscConfig+0x5c6>
            return HAL_TIMEOUT;
 8010088:	2003      	movs	r0, #3
 801008a:	e056      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 801008c:	2000      	movs	r0, #0
 801008e:	e054      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 8010090:	2000      	movs	r0, #0
 8010092:	e052      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010094:	4a30      	ldr	r2, [pc, #192]	@ (8010158 <HAL_RCC_OscConfig+0x6a8>)
 8010096:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010098:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801009a:	2b01      	cmp	r3, #1
 801009c:	d04e      	beq.n	801013c <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801009e:	f001 0303 	and.w	r3, r1, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80100a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d14b      	bne.n	8010140 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80100a8:	f3c1 1105 	ubfx	r1, r1, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80100ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80100ae:	4299      	cmp	r1, r3
 80100b0:	d148      	bne.n	8010144 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80100b2:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80100b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80100b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d144      	bne.n	8010148 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80100be:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80100c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80100c4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d140      	bne.n	801014c <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80100ca:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80100ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80100d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d13c      	bne.n	8010150 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80100d6:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80100da:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80100dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80100de:	4298      	cmp	r0, r3
 80100e0:	d138      	bne.n	8010154 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80100e2:	4b1d      	ldr	r3, [pc, #116]	@ (8010158 <HAL_RCC_OscConfig+0x6a8>)
 80100e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100e6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80100ea:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d101      	bne.n	80100f4 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 80100f0:	2000      	movs	r0, #0
 80100f2:	e022      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 80100f4:	4a18      	ldr	r2, [pc, #96]	@ (8010158 <HAL_RCC_OscConfig+0x6a8>)
 80100f6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80100f8:	f023 0301 	bic.w	r3, r3, #1
 80100fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80100fe:	f7fb fbdf 	bl	800b8c0 <HAL_GetTick>
 8010102:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8010104:	f7fb fbdc 	bl	800b8c0 <HAL_GetTick>
 8010108:	42a8      	cmp	r0, r5
 801010a:	d0fb      	beq.n	8010104 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801010c:	4a12      	ldr	r2, [pc, #72]	@ (8010158 <HAL_RCC_OscConfig+0x6a8>)
 801010e:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8010110:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010112:	4b13      	ldr	r3, [pc, #76]	@ (8010160 <HAL_RCC_OscConfig+0x6b0>)
 8010114:	4003      	ands	r3, r0
 8010116:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801011a:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 801011c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 801011e:	f043 0301 	orr.w	r3, r3, #1
 8010122:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 8010124:	2000      	movs	r0, #0
 8010126:	e008      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 8010128:	2001      	movs	r0, #1
}
 801012a:	4770      	bx	lr
        return HAL_ERROR;
 801012c:	2001      	movs	r0, #1
 801012e:	e004      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8010130:	2001      	movs	r0, #1
 8010132:	e002      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8010134:	2001      	movs	r0, #1
 8010136:	e000      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 8010138:	2000      	movs	r0, #0
}
 801013a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 801013c:	2001      	movs	r0, #1
 801013e:	e7fc      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 8010140:	2001      	movs	r0, #1
 8010142:	e7fa      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 8010144:	2001      	movs	r0, #1
 8010146:	e7f8      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 8010148:	2001      	movs	r0, #1
 801014a:	e7f6      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 801014c:	2001      	movs	r0, #1
 801014e:	e7f4      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 8010150:	2001      	movs	r0, #1
 8010152:	e7f2      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 8010154:	2001      	movs	r0, #1
 8010156:	e7f0      	b.n	801013a <HAL_RCC_OscConfig+0x68a>
 8010158:	58024400 	.word	0x58024400
 801015c:	fffffc0c 	.word	0xfffffc0c
 8010160:	ffff0007 	.word	0xffff0007

08010164 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8010164:	b570      	push	{r4, r5, r6, lr}
 8010166:	b088      	sub	sp, #32
 8010168:	460d      	mov	r5, r1
 801016a:	4614      	mov	r4, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 801016c:	bb10      	cbnz	r0, 80101b4 <HAL_RCC_MCOConfig+0x50>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 801016e:	4e23      	ldr	r6, [pc, #140]	@ (80101fc <HAL_RCC_MCOConfig+0x98>)
 8010170:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8010174:	f043 0301 	orr.w	r3, r3, #1
 8010178:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 801017c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8010180:	f003 0301 	and.w	r3, r3, #1
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	9b01      	ldr	r3, [sp, #4]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8010188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801018c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801018e:	2302      	movs	r3, #2
 8010190:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010192:	2303      	movs	r3, #3
 8010194:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010196:	2300      	movs	r3, #0
 8010198:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801019a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 801019c:	a903      	add	r1, sp, #12
 801019e:	4818      	ldr	r0, [pc, #96]	@ (8010200 <HAL_RCC_MCOConfig+0x9c>)
 80101a0:	f7fc fe74 	bl	800ce8c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80101a4:	6933      	ldr	r3, [r6, #16]
 80101a6:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80101aa:	432b      	orrs	r3, r5
 80101ac:	4323      	orrs	r3, r4
 80101ae:	6133      	str	r3, [r6, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80101b0:	b008      	add	sp, #32
 80101b2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80101b4:	4e11      	ldr	r6, [pc, #68]	@ (80101fc <HAL_RCC_MCOConfig+0x98>)
 80101b6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80101ba:	f043 0304 	orr.w	r3, r3, #4
 80101be:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80101c2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80101c6:	f003 0304 	and.w	r3, r3, #4
 80101ca:	9302      	str	r3, [sp, #8]
 80101cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80101ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80101d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101d4:	2302      	movs	r3, #2
 80101d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101d8:	2303      	movs	r3, #3
 80101da:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101dc:	2300      	movs	r3, #0
 80101de:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80101e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80101e2:	a903      	add	r1, sp, #12
 80101e4:	4807      	ldr	r0, [pc, #28]	@ (8010204 <HAL_RCC_MCOConfig+0xa0>)
 80101e6:	f7fc fe51 	bl	800ce8c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80101ea:	6933      	ldr	r3, [r6, #16]
 80101ec:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80101f0:	ea43 0105 	orr.w	r1, r3, r5
 80101f4:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 80101f8:	6131      	str	r1, [r6, #16]
}
 80101fa:	e7d9      	b.n	80101b0 <HAL_RCC_MCOConfig+0x4c>
 80101fc:	58024400 	.word	0x58024400
 8010200:	58020000 	.word	0x58020000
 8010204:	58020800 	.word	0x58020800

08010208 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010208:	4b74      	ldr	r3, [pc, #464]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010210:	2b10      	cmp	r3, #16
 8010212:	f000 80de 	beq.w	80103d2 <HAL_RCC_GetSysClockFreq+0x1ca>
 8010216:	2b18      	cmp	r3, #24
 8010218:	d00f      	beq.n	801023a <HAL_RCC_GetSysClockFreq+0x32>
 801021a:	b10b      	cbz	r3, 8010220 <HAL_RCC_GetSysClockFreq+0x18>
      }

      break;

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801021c:	4870      	ldr	r0, [pc, #448]	@ (80103e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 801021e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010220:	4b6e      	ldr	r3, [pc, #440]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f013 0f20 	tst.w	r3, #32
 8010228:	f000 80d5 	beq.w	80103d6 <HAL_RCC_GetSysClockFreq+0x1ce>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801022c:	4b6b      	ldr	r3, [pc, #428]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8010234:	486b      	ldr	r0, [pc, #428]	@ (80103e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8010236:	40d8      	lsrs	r0, r3
 8010238:	4770      	bx	lr
{
 801023a:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801023c:	4b67      	ldr	r3, [pc, #412]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 801023e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8010240:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8010242:	f3c1 1005 	ubfx	r0, r1, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010246:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34

      if (pllm != 0U)
 801024a:	f411 7f7c 	tst.w	r1, #1008	@ 0x3f0
 801024e:	f000 80a0 	beq.w	8010392 <HAL_RCC_GetSysClockFreq+0x18a>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010252:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010256:	f004 0401 	and.w	r4, r4, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801025a:	fb04 f303 	mul.w	r3, r4, r3
 801025e:	ee07 3a90 	vmov	s15, r3
 8010262:	eef8 7a67 	vcvt.f32.u32	s15, s15
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010266:	f002 0203 	and.w	r2, r2, #3
 801026a:	2a01      	cmp	r2, #1
 801026c:	d066      	beq.n	801033c <HAL_RCC_GetSysClockFreq+0x134>
 801026e:	2a02      	cmp	r2, #2
 8010270:	f000 8092 	beq.w	8010398 <HAL_RCC_GetSysClockFreq+0x190>
 8010274:	b1e2      	cbz	r2, 80102b0 <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010276:	4b59      	ldr	r3, [pc, #356]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8010278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801027a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801027e:	ee07 3a10 	vmov	s14, r3
 8010282:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010286:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80103e8 <HAL_RCC_GetSysClockFreq+0x1e0>
 801028a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801028e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010296:	ee77 7a87 	vadd.f32	s15, s15, s14
 801029a:	ee07 0a10 	vmov	s14, r0
 801029e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80102a2:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 80103ec <HAL_RCC_GetSysClockFreq+0x1e4>
 80102a6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80102aa:	ee67 7a87 	vmul.f32	s15, s15, s14
            break;
 80102ae:	e061      	b.n	8010374 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80102b0:	4b4a      	ldr	r3, [pc, #296]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f013 0f20 	tst.w	r3, #32
 80102b8:	d023      	beq.n	8010302 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80102ba:	4b48      	ldr	r3, [pc, #288]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 80102bc:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80102be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80102c0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80102c4:	4a47      	ldr	r2, [pc, #284]	@ (80103e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80102c6:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80102c8:	ee07 2a10 	vmov	s14, r2
 80102cc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80102d0:	ee07 0a10 	vmov	s14, r0
 80102d4:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80102d8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80102dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102e0:	ee06 3a90 	vmov	s13, r3
 80102e4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80102e8:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 80103e8 <HAL_RCC_GetSysClockFreq+0x1e0>
 80102ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80102f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80102f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010300:	e038      	b.n	8010374 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010302:	4b36      	ldr	r3, [pc, #216]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8010304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801030a:	ee07 3a10 	vmov	s14, r3
 801030e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010312:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80103e8 <HAL_RCC_GetSysClockFreq+0x1e0>
 8010316:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801031a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801031e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010322:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010326:	ee07 0a10 	vmov	s14, r0
 801032a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801032e:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 80103f0 <HAL_RCC_GetSysClockFreq+0x1e8>
 8010332:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010336:	ee67 7a87 	vmul.f32	s15, s15, s14
 801033a:	e01b      	b.n	8010374 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801033c:	4b27      	ldr	r3, [pc, #156]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 801033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010344:	ee07 3a10 	vmov	s14, r3
 8010348:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801034c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80103e8 <HAL_RCC_GetSysClockFreq+0x1e0>
 8010350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801035c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010360:	ee07 0a10 	vmov	s14, r0
 8010364:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8010368:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80103ec <HAL_RCC_GetSysClockFreq+0x1e4>
 801036c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010370:	ee67 7a87 	vmul.f32	s15, s15, s14
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8010374:	4b19      	ldr	r3, [pc, #100]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8010376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010378:	f3c3 2346 	ubfx	r3, r3, #9, #7
 801037c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801037e:	ee07 3a10 	vmov	s14, r3
 8010382:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010386:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801038a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 801038e:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8010392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010396:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010398:	4b10      	ldr	r3, [pc, #64]	@ (80103dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 801039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801039c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103a0:	ee07 3a10 	vmov	s14, r3
 80103a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80103a8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80103e8 <HAL_RCC_GetSysClockFreq+0x1e0>
 80103ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80103b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80103b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103bc:	ee07 0a10 	vmov	s14, r0
 80103c0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80103c4:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80103f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80103c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80103cc:	ee67 7a87 	vmul.f32	s15, s15, s14
            break;
 80103d0:	e7d0      	b.n	8010374 <HAL_RCC_GetSysClockFreq+0x16c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80103d2:	4809      	ldr	r0, [pc, #36]	@ (80103f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80103d4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80103d6:	4803      	ldr	r0, [pc, #12]	@ (80103e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	58024400 	.word	0x58024400
 80103e0:	003d0900 	.word	0x003d0900
 80103e4:	03d09000 	.word	0x03d09000
 80103e8:	39000000 	.word	0x39000000
 80103ec:	4a742400 	.word	0x4a742400
 80103f0:	4c742400 	.word	0x4c742400
 80103f4:	4bbebc20 	.word	0x4bbebc20
 80103f8:	017d7840 	.word	0x017d7840

080103fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80103fc:	2800      	cmp	r0, #0
 80103fe:	f000 80c3 	beq.w	8010588 <HAL_RCC_ClockConfig+0x18c>
{
 8010402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010406:	460d      	mov	r5, r1
 8010408:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801040a:	4b65      	ldr	r3, [pc, #404]	@ (80105a0 <HAL_RCC_ClockConfig+0x1a4>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f003 030f 	and.w	r3, r3, #15
 8010412:	428b      	cmp	r3, r1
 8010414:	d20b      	bcs.n	801042e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010416:	4a62      	ldr	r2, [pc, #392]	@ (80105a0 <HAL_RCC_ClockConfig+0x1a4>)
 8010418:	6813      	ldr	r3, [r2, #0]
 801041a:	f023 030f 	bic.w	r3, r3, #15
 801041e:	430b      	orrs	r3, r1
 8010420:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010422:	6813      	ldr	r3, [r2, #0]
 8010424:	f003 030f 	and.w	r3, r3, #15
 8010428:	428b      	cmp	r3, r1
 801042a:	f040 80af 	bne.w	801058c <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801042e:	6823      	ldr	r3, [r4, #0]
 8010430:	f013 0f04 	tst.w	r3, #4
 8010434:	d00c      	beq.n	8010450 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010436:	6922      	ldr	r2, [r4, #16]
 8010438:	4b5a      	ldr	r3, [pc, #360]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 801043a:	699b      	ldr	r3, [r3, #24]
 801043c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010440:	429a      	cmp	r2, r3
 8010442:	d905      	bls.n	8010450 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010444:	4957      	ldr	r1, [pc, #348]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 8010446:	698b      	ldr	r3, [r1, #24]
 8010448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801044c:	4313      	orrs	r3, r2
 801044e:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	f013 0f08 	tst.w	r3, #8
 8010456:	d00c      	beq.n	8010472 <HAL_RCC_ClockConfig+0x76>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010458:	6962      	ldr	r2, [r4, #20]
 801045a:	4b52      	ldr	r3, [pc, #328]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 801045c:	69db      	ldr	r3, [r3, #28]
 801045e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010462:	429a      	cmp	r2, r3
 8010464:	d905      	bls.n	8010472 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010466:	494f      	ldr	r1, [pc, #316]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 8010468:	69cb      	ldr	r3, [r1, #28]
 801046a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801046e:	4313      	orrs	r3, r2
 8010470:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010472:	6823      	ldr	r3, [r4, #0]
 8010474:	f013 0f10 	tst.w	r3, #16
 8010478:	d00c      	beq.n	8010494 <HAL_RCC_ClockConfig+0x98>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801047a:	69a2      	ldr	r2, [r4, #24]
 801047c:	4b49      	ldr	r3, [pc, #292]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 801047e:	69db      	ldr	r3, [r3, #28]
 8010480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010484:	429a      	cmp	r2, r3
 8010486:	d905      	bls.n	8010494 <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010488:	4946      	ldr	r1, [pc, #280]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 801048a:	69cb      	ldr	r3, [r1, #28]
 801048c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8010490:	4313      	orrs	r3, r2
 8010492:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010494:	6823      	ldr	r3, [r4, #0]
 8010496:	f013 0f20 	tst.w	r3, #32
 801049a:	d00c      	beq.n	80104b6 <HAL_RCC_ClockConfig+0xba>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801049c:	69e2      	ldr	r2, [r4, #28]
 801049e:	4b41      	ldr	r3, [pc, #260]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d905      	bls.n	80104b6 <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80104aa:	493e      	ldr	r1, [pc, #248]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 80104ac:	6a0b      	ldr	r3, [r1, #32]
 80104ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104b2:	4313      	orrs	r3, r2
 80104b4:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80104b6:	6823      	ldr	r3, [r4, #0]
 80104b8:	f013 0f02 	tst.w	r3, #2
 80104bc:	d074      	beq.n	80105a8 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80104be:	68e1      	ldr	r1, [r4, #12]
 80104c0:	4a38      	ldr	r2, [pc, #224]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 80104c2:	6992      	ldr	r2, [r2, #24]
 80104c4:	f002 020f 	and.w	r2, r2, #15
 80104c8:	4291      	cmp	r1, r2
 80104ca:	d965      	bls.n	8010598 <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80104cc:	4a35      	ldr	r2, [pc, #212]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 80104ce:	6993      	ldr	r3, [r2, #24]
 80104d0:	f023 030f 	bic.w	r3, r3, #15
 80104d4:	430b      	orrs	r3, r1
 80104d6:	6193      	str	r3, [r2, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80104d8:	6823      	ldr	r3, [r4, #0]
 80104da:	f013 0f01 	tst.w	r3, #1
 80104de:	d041      	beq.n	8010564 <HAL_RCC_ClockConfig+0x168>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80104e0:	4a30      	ldr	r2, [pc, #192]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 80104e2:	6993      	ldr	r3, [r2, #24]
 80104e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80104e8:	68a1      	ldr	r1, [r4, #8]
 80104ea:	430b      	orrs	r3, r1
 80104ec:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80104ee:	6862      	ldr	r2, [r4, #4]
 80104f0:	2a02      	cmp	r2, #2
 80104f2:	d00a      	beq.n	801050a <HAL_RCC_ClockConfig+0x10e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80104f4:	2a03      	cmp	r2, #3
 80104f6:	d027      	beq.n	8010548 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80104f8:	2a01      	cmp	r2, #1
 80104fa:	d02c      	beq.n	8010556 <HAL_RCC_ClockConfig+0x15a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80104fc:	4b29      	ldr	r3, [pc, #164]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f013 0f04 	tst.w	r3, #4
 8010504:	d106      	bne.n	8010514 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8010506:	2001      	movs	r0, #1
 8010508:	e0c1      	b.n	801068e <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801050a:	4b26      	ldr	r3, [pc, #152]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8010512:	d03d      	beq.n	8010590 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010514:	4923      	ldr	r1, [pc, #140]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 8010516:	690b      	ldr	r3, [r1, #16]
 8010518:	f023 0307 	bic.w	r3, r3, #7
 801051c:	4313      	orrs	r3, r2
 801051e:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8010520:	f7fb f9ce 	bl	800b8c0 <HAL_GetTick>
 8010524:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010526:	4f1f      	ldr	r7, [pc, #124]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010528:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010532:	6862      	ldr	r2, [r4, #4]
 8010534:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8010538:	d014      	beq.n	8010564 <HAL_RCC_ClockConfig+0x168>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801053a:	f7fb f9c1 	bl	800b8c0 <HAL_GetTick>
 801053e:	1b80      	subs	r0, r0, r6
 8010540:	4540      	cmp	r0, r8
 8010542:	d9f3      	bls.n	801052c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8010544:	2003      	movs	r0, #3
 8010546:	e0a2      	b.n	801068e <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010548:	4b16      	ldr	r3, [pc, #88]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8010550:	d1e0      	bne.n	8010514 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8010552:	2001      	movs	r0, #1
 8010554:	e09b      	b.n	801068e <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010556:	4b13      	ldr	r3, [pc, #76]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801055e:	d1d9      	bne.n	8010514 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8010560:	2001      	movs	r0, #1
 8010562:	e094      	b.n	801068e <HAL_RCC_ClockConfig+0x292>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010564:	6823      	ldr	r3, [r4, #0]
 8010566:	f013 0f02 	tst.w	r3, #2
 801056a:	d020      	beq.n	80105ae <HAL_RCC_ClockConfig+0x1b2>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801056c:	68e2      	ldr	r2, [r4, #12]
 801056e:	4b0d      	ldr	r3, [pc, #52]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 8010570:	699b      	ldr	r3, [r3, #24]
 8010572:	f003 030f 	and.w	r3, r3, #15
 8010576:	429a      	cmp	r2, r3
 8010578:	d219      	bcs.n	80105ae <HAL_RCC_ClockConfig+0x1b2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801057a:	490a      	ldr	r1, [pc, #40]	@ (80105a4 <HAL_RCC_ClockConfig+0x1a8>)
 801057c:	698b      	ldr	r3, [r1, #24]
 801057e:	f023 030f 	bic.w	r3, r3, #15
 8010582:	4313      	orrs	r3, r2
 8010584:	618b      	str	r3, [r1, #24]
 8010586:	e012      	b.n	80105ae <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 8010588:	2001      	movs	r0, #1
}
 801058a:	4770      	bx	lr
      return HAL_ERROR;
 801058c:	2001      	movs	r0, #1
 801058e:	e07e      	b.n	801068e <HAL_RCC_ClockConfig+0x292>
        return HAL_ERROR;
 8010590:	2001      	movs	r0, #1
 8010592:	e07c      	b.n	801068e <HAL_RCC_ClockConfig+0x292>
      return HAL_ERROR;
 8010594:	2001      	movs	r0, #1
 8010596:	e07a      	b.n	801068e <HAL_RCC_ClockConfig+0x292>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010598:	f013 0f01 	tst.w	r3, #1
 801059c:	d1a0      	bne.n	80104e0 <HAL_RCC_ClockConfig+0xe4>
 801059e:	e7e5      	b.n	801056c <HAL_RCC_ClockConfig+0x170>
 80105a0:	52002000 	.word	0x52002000
 80105a4:	58024400 	.word	0x58024400
 80105a8:	f013 0f01 	tst.w	r3, #1
 80105ac:	d198      	bne.n	80104e0 <HAL_RCC_ClockConfig+0xe4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80105ae:	4b39      	ldr	r3, [pc, #228]	@ (8010694 <HAL_RCC_ClockConfig+0x298>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f003 030f 	and.w	r3, r3, #15
 80105b6:	42ab      	cmp	r3, r5
 80105b8:	d90a      	bls.n	80105d0 <HAL_RCC_ClockConfig+0x1d4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80105ba:	4a36      	ldr	r2, [pc, #216]	@ (8010694 <HAL_RCC_ClockConfig+0x298>)
 80105bc:	6813      	ldr	r3, [r2, #0]
 80105be:	f023 030f 	bic.w	r3, r3, #15
 80105c2:	432b      	orrs	r3, r5
 80105c4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80105c6:	6813      	ldr	r3, [r2, #0]
 80105c8:	f003 030f 	and.w	r3, r3, #15
 80105cc:	42ab      	cmp	r3, r5
 80105ce:	d1e1      	bne.n	8010594 <HAL_RCC_ClockConfig+0x198>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80105d0:	6823      	ldr	r3, [r4, #0]
 80105d2:	f013 0f04 	tst.w	r3, #4
 80105d6:	d00c      	beq.n	80105f2 <HAL_RCC_ClockConfig+0x1f6>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80105d8:	6922      	ldr	r2, [r4, #16]
 80105da:	4b2f      	ldr	r3, [pc, #188]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 80105dc:	699b      	ldr	r3, [r3, #24]
 80105de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d205      	bcs.n	80105f2 <HAL_RCC_ClockConfig+0x1f6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80105e6:	492c      	ldr	r1, [pc, #176]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 80105e8:	698b      	ldr	r3, [r1, #24]
 80105ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105ee:	4313      	orrs	r3, r2
 80105f0:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80105f2:	6823      	ldr	r3, [r4, #0]
 80105f4:	f013 0f08 	tst.w	r3, #8
 80105f8:	d00c      	beq.n	8010614 <HAL_RCC_ClockConfig+0x218>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80105fa:	6962      	ldr	r2, [r4, #20]
 80105fc:	4b26      	ldr	r3, [pc, #152]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 80105fe:	69db      	ldr	r3, [r3, #28]
 8010600:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010604:	429a      	cmp	r2, r3
 8010606:	d205      	bcs.n	8010614 <HAL_RCC_ClockConfig+0x218>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010608:	4923      	ldr	r1, [pc, #140]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 801060a:	69cb      	ldr	r3, [r1, #28]
 801060c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010610:	4313      	orrs	r3, r2
 8010612:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010614:	6823      	ldr	r3, [r4, #0]
 8010616:	f013 0f10 	tst.w	r3, #16
 801061a:	d00c      	beq.n	8010636 <HAL_RCC_ClockConfig+0x23a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801061c:	69a2      	ldr	r2, [r4, #24]
 801061e:	4b1e      	ldr	r3, [pc, #120]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 8010620:	69db      	ldr	r3, [r3, #28]
 8010622:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010626:	429a      	cmp	r2, r3
 8010628:	d205      	bcs.n	8010636 <HAL_RCC_ClockConfig+0x23a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801062a:	491b      	ldr	r1, [pc, #108]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 801062c:	69cb      	ldr	r3, [r1, #28]
 801062e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8010632:	4313      	orrs	r3, r2
 8010634:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	f013 0f20 	tst.w	r3, #32
 801063c:	d00c      	beq.n	8010658 <HAL_RCC_ClockConfig+0x25c>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801063e:	69e2      	ldr	r2, [r4, #28]
 8010640:	4b15      	ldr	r3, [pc, #84]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 8010642:	6a1b      	ldr	r3, [r3, #32]
 8010644:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010648:	429a      	cmp	r2, r3
 801064a:	d205      	bcs.n	8010658 <HAL_RCC_ClockConfig+0x25c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801064c:	4912      	ldr	r1, [pc, #72]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 801064e:	6a0b      	ldr	r3, [r1, #32]
 8010650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010654:	4313      	orrs	r3, r2
 8010656:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010658:	f7ff fdd6 	bl	8010208 <HAL_RCC_GetSysClockFreq>
 801065c:	490e      	ldr	r1, [pc, #56]	@ (8010698 <HAL_RCC_ClockConfig+0x29c>)
 801065e:	698b      	ldr	r3, [r1, #24]
 8010660:	4a0e      	ldr	r2, [pc, #56]	@ (801069c <HAL_RCC_ClockConfig+0x2a0>)
 8010662:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8010666:	5cd3      	ldrb	r3, [r2, r3]
 8010668:	f003 031f 	and.w	r3, r3, #31
 801066c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801066e:	698b      	ldr	r3, [r1, #24]
 8010670:	f003 030f 	and.w	r3, r3, #15
 8010674:	5cd3      	ldrb	r3, [r2, r3]
 8010676:	f003 031f 	and.w	r3, r3, #31
 801067a:	fa20 f303 	lsr.w	r3, r0, r3
 801067e:	4a08      	ldr	r2, [pc, #32]	@ (80106a0 <HAL_RCC_ClockConfig+0x2a4>)
 8010680:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8010682:	4b08      	ldr	r3, [pc, #32]	@ (80106a4 <HAL_RCC_ClockConfig+0x2a8>)
 8010684:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8010686:	4b08      	ldr	r3, [pc, #32]	@ (80106a8 <HAL_RCC_ClockConfig+0x2ac>)
 8010688:	6818      	ldr	r0, [r3, #0]
 801068a:	f7f1 f873 	bl	8001774 <HAL_InitTick>
}
 801068e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010692:	bf00      	nop
 8010694:	52002000 	.word	0x52002000
 8010698:	58024400 	.word	0x58024400
 801069c:	0802daf4 	.word	0x0802daf4
 80106a0:	24000068 	.word	0x24000068
 80106a4:	2400006c 	.word	0x2400006c
 80106a8:	24000074 	.word	0x24000074

080106ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80106ac:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80106ae:	f7ff fdab 	bl	8010208 <HAL_RCC_GetSysClockFreq>
 80106b2:	4a0b      	ldr	r2, [pc, #44]	@ (80106e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80106b4:	6993      	ldr	r3, [r2, #24]
 80106b6:	490b      	ldr	r1, [pc, #44]	@ (80106e4 <HAL_RCC_GetHCLKFreq+0x38>)
 80106b8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80106bc:	5ccb      	ldrb	r3, [r1, r3]
 80106be:	f003 031f 	and.w	r3, r3, #31
 80106c2:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80106c6:	6992      	ldr	r2, [r2, #24]
 80106c8:	f002 020f 	and.w	r2, r2, #15
 80106cc:	5c88      	ldrb	r0, [r1, r2]
 80106ce:	f000 001f 	and.w	r0, r0, #31
 80106d2:	fa23 f000 	lsr.w	r0, r3, r0
 80106d6:	4a04      	ldr	r2, [pc, #16]	@ (80106e8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80106d8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80106da:	4a04      	ldr	r2, [pc, #16]	@ (80106ec <HAL_RCC_GetHCLKFreq+0x40>)
 80106dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80106de:	bd08      	pop	{r3, pc}
 80106e0:	58024400 	.word	0x58024400
 80106e4:	0802daf4 	.word	0x0802daf4
 80106e8:	24000068 	.word	0x24000068
 80106ec:	2400006c 	.word	0x2400006c

080106f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80106f0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80106f2:	f7ff ffdb 	bl	80106ac <HAL_RCC_GetHCLKFreq>
 80106f6:	4b05      	ldr	r3, [pc, #20]	@ (801070c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80106f8:	69db      	ldr	r3, [r3, #28]
 80106fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80106fe:	4a04      	ldr	r2, [pc, #16]	@ (8010710 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010700:	5cd3      	ldrb	r3, [r2, r3]
 8010702:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010706:	40d8      	lsrs	r0, r3
 8010708:	bd08      	pop	{r3, pc}
 801070a:	bf00      	nop
 801070c:	58024400 	.word	0x58024400
 8010710:	0802daf4 	.word	0x0802daf4

08010714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010714:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010716:	f7ff ffc9 	bl	80106ac <HAL_RCC_GetHCLKFreq>
 801071a:	4b05      	ldr	r3, [pc, #20]	@ (8010730 <HAL_RCC_GetPCLK2Freq+0x1c>)
 801071c:	69db      	ldr	r3, [r3, #28]
 801071e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8010722:	4a04      	ldr	r2, [pc, #16]	@ (8010734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010724:	5cd3      	ldrb	r3, [r2, r3]
 8010726:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801072a:	40d8      	lsrs	r0, r3
 801072c:	bd08      	pop	{r3, pc}
 801072e:	bf00      	nop
 8010730:	58024400 	.word	0x58024400
 8010734:	0802daf4 	.word	0x0802daf4

08010738 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010738:	233f      	movs	r3, #63	@ 0x3f
 801073a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801073c:	4b11      	ldr	r3, [pc, #68]	@ (8010784 <HAL_RCC_GetClockConfig+0x4c>)
 801073e:	691a      	ldr	r2, [r3, #16]
 8010740:	f002 0207 	and.w	r2, r2, #7
 8010744:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8010746:	699a      	ldr	r2, [r3, #24]
 8010748:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 801074c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801074e:	699a      	ldr	r2, [r3, #24]
 8010750:	f002 020f 	and.w	r2, r2, #15
 8010754:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8010756:	699a      	ldr	r2, [r3, #24]
 8010758:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 801075c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801075e:	69da      	ldr	r2, [r3, #28]
 8010760:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8010764:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8010766:	69da      	ldr	r2, [r3, #28]
 8010768:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 801076c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801076e:	6a1b      	ldr	r3, [r3, #32]
 8010770:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8010774:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010776:	4b04      	ldr	r3, [pc, #16]	@ (8010788 <HAL_RCC_GetClockConfig+0x50>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f003 030f 	and.w	r3, r3, #15
 801077e:	600b      	str	r3, [r1, #0]
}
 8010780:	4770      	bx	lr
 8010782:	bf00      	nop
 8010784:	58024400 	.word	0x58024400
 8010788:	52002000 	.word	0x52002000

0801078c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801078e:	4b3e      	ldr	r3, [pc, #248]	@ (8010888 <RCCEx_PLL2_Config+0xfc>)
 8010790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010792:	f003 0303 	and.w	r3, r3, #3
 8010796:	2b03      	cmp	r3, #3
 8010798:	d074      	beq.n	8010884 <RCCEx_PLL2_Config+0xf8>
 801079a:	4606      	mov	r6, r0
 801079c:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801079e:	4a3a      	ldr	r2, [pc, #232]	@ (8010888 <RCCEx_PLL2_Config+0xfc>)
 80107a0:	6813      	ldr	r3, [r2, #0]
 80107a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80107a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80107a8:	f7fb f88a 	bl	800b8c0 <HAL_GetTick>
 80107ac:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80107ae:	4d36      	ldr	r5, [pc, #216]	@ (8010888 <RCCEx_PLL2_Config+0xfc>)
 80107b0:	682b      	ldr	r3, [r5, #0]
 80107b2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80107b6:	d006      	beq.n	80107c6 <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80107b8:	f7fb f882 	bl	800b8c0 <HAL_GetTick>
 80107bc:	1b03      	subs	r3, r0, r4
 80107be:	2b02      	cmp	r3, #2
 80107c0:	d9f6      	bls.n	80107b0 <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 80107c2:	2003      	movs	r0, #3
 80107c4:	e05f      	b.n	8010886 <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80107c6:	4b30      	ldr	r3, [pc, #192]	@ (8010888 <RCCEx_PLL2_Config+0xfc>)
 80107c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80107ca:	6831      	ldr	r1, [r6, #0]
 80107cc:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 80107d0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80107d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80107d6:	68b2      	ldr	r2, [r6, #8]
 80107d8:	3a01      	subs	r2, #1
 80107da:	0252      	lsls	r2, r2, #9
 80107dc:	b292      	uxth	r2, r2
 80107de:	68f1      	ldr	r1, [r6, #12]
 80107e0:	3901      	subs	r1, #1
 80107e2:	0409      	lsls	r1, r1, #16
 80107e4:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80107e8:	430a      	orrs	r2, r1
 80107ea:	6871      	ldr	r1, [r6, #4]
 80107ec:	3901      	subs	r1, #1
 80107ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80107f2:	430a      	orrs	r2, r1
 80107f4:	6931      	ldr	r1, [r6, #16]
 80107f6:	3901      	subs	r1, #1
 80107f8:	0609      	lsls	r1, r1, #24
 80107fa:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80107fe:	430a      	orrs	r2, r1
 8010800:	639a      	str	r2, [r3, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010804:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8010808:	6971      	ldr	r1, [r6, #20]
 801080a:	430a      	orrs	r2, r1
 801080c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801080e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010810:	f022 0220 	bic.w	r2, r2, #32
 8010814:	69b1      	ldr	r1, [r6, #24]
 8010816:	430a      	orrs	r2, r1
 8010818:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801081a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801081c:	f022 0210 	bic.w	r2, r2, #16
 8010820:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010822:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010824:	69f1      	ldr	r1, [r6, #28]
 8010826:	4a19      	ldr	r2, [pc, #100]	@ (801088c <RCCEx_PLL2_Config+0x100>)
 8010828:	4002      	ands	r2, r0
 801082a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 801082e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010832:	f042 0210 	orr.w	r2, r2, #16
 8010836:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010838:	b9c7      	cbnz	r7, 801086c <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801083a:	461a      	mov	r2, r3
 801083c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801083e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010842:	62d3      	str	r3, [r2, #44]	@ 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010844:	4a10      	ldr	r2, [pc, #64]	@ (8010888 <RCCEx_PLL2_Config+0xfc>)
 8010846:	6813      	ldr	r3, [r2, #0]
 8010848:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801084c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801084e:	f7fb f837 	bl	800b8c0 <HAL_GetTick>
 8010852:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010854:	4d0c      	ldr	r5, [pc, #48]	@ (8010888 <RCCEx_PLL2_Config+0xfc>)
 8010856:	682b      	ldr	r3, [r5, #0]
 8010858:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 801085c:	d110      	bne.n	8010880 <RCCEx_PLL2_Config+0xf4>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801085e:	f7fb f82f 	bl	800b8c0 <HAL_GetTick>
 8010862:	1b00      	subs	r0, r0, r4
 8010864:	2802      	cmp	r0, #2
 8010866:	d9f6      	bls.n	8010856 <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 8010868:	2003      	movs	r0, #3
 801086a:	e00c      	b.n	8010886 <RCCEx_PLL2_Config+0xfa>
    else if (Divider == DIVIDER_Q_UPDATE)
 801086c:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801086e:	4a06      	ldr	r2, [pc, #24]	@ (8010888 <RCCEx_PLL2_Config+0xfc>)
 8010870:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010872:	bf0c      	ite	eq
 8010874:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010878:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 801087c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801087e:	e7e1      	b.n	8010844 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8010880:	2000      	movs	r0, #0
 8010882:	e000      	b.n	8010886 <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 8010884:	2001      	movs	r0, #1
}
 8010886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010888:	58024400 	.word	0x58024400
 801088c:	ffff0007 	.word	0xffff0007

08010890 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010892:	4b3e      	ldr	r3, [pc, #248]	@ (801098c <RCCEx_PLL3_Config+0xfc>)
 8010894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010896:	f003 0303 	and.w	r3, r3, #3
 801089a:	2b03      	cmp	r3, #3
 801089c:	d074      	beq.n	8010988 <RCCEx_PLL3_Config+0xf8>
 801089e:	4606      	mov	r6, r0
 80108a0:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80108a2:	4a3a      	ldr	r2, [pc, #232]	@ (801098c <RCCEx_PLL3_Config+0xfc>)
 80108a4:	6813      	ldr	r3, [r2, #0]
 80108a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80108aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80108ac:	f7fb f808 	bl	800b8c0 <HAL_GetTick>
 80108b0:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80108b2:	4d36      	ldr	r5, [pc, #216]	@ (801098c <RCCEx_PLL3_Config+0xfc>)
 80108b4:	682b      	ldr	r3, [r5, #0]
 80108b6:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80108ba:	d006      	beq.n	80108ca <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80108bc:	f7fb f800 	bl	800b8c0 <HAL_GetTick>
 80108c0:	1b03      	subs	r3, r0, r4
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d9f6      	bls.n	80108b4 <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 80108c6:	2003      	movs	r0, #3
 80108c8:	e05f      	b.n	801098a <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80108ca:	4b30      	ldr	r3, [pc, #192]	@ (801098c <RCCEx_PLL3_Config+0xfc>)
 80108cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80108ce:	6831      	ldr	r1, [r6, #0]
 80108d0:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 80108d4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80108d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80108da:	68b2      	ldr	r2, [r6, #8]
 80108dc:	3a01      	subs	r2, #1
 80108de:	0252      	lsls	r2, r2, #9
 80108e0:	b292      	uxth	r2, r2
 80108e2:	68f1      	ldr	r1, [r6, #12]
 80108e4:	3901      	subs	r1, #1
 80108e6:	0409      	lsls	r1, r1, #16
 80108e8:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80108ec:	430a      	orrs	r2, r1
 80108ee:	6871      	ldr	r1, [r6, #4]
 80108f0:	3901      	subs	r1, #1
 80108f2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80108f6:	430a      	orrs	r2, r1
 80108f8:	6931      	ldr	r1, [r6, #16]
 80108fa:	3901      	subs	r1, #1
 80108fc:	0609      	lsls	r1, r1, #24
 80108fe:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8010902:	430a      	orrs	r2, r1
 8010904:	641a      	str	r2, [r3, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010908:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801090c:	6971      	ldr	r1, [r6, #20]
 801090e:	430a      	orrs	r2, r1
 8010910:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010914:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8010918:	69b1      	ldr	r1, [r6, #24]
 801091a:	430a      	orrs	r2, r1
 801091c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801091e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010924:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010926:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8010928:	69f1      	ldr	r1, [r6, #28]
 801092a:	4a19      	ldr	r2, [pc, #100]	@ (8010990 <RCCEx_PLL3_Config+0x100>)
 801092c:	4002      	ands	r2, r0
 801092e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8010932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801093a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801093c:	b9c7      	cbnz	r7, 8010970 <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801093e:	461a      	mov	r2, r3
 8010940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010942:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010946:	62d3      	str	r3, [r2, #44]	@ 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010948:	4a10      	ldr	r2, [pc, #64]	@ (801098c <RCCEx_PLL3_Config+0xfc>)
 801094a:	6813      	ldr	r3, [r2, #0]
 801094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010952:	f7fa ffb5 	bl	800b8c0 <HAL_GetTick>
 8010956:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010958:	4d0c      	ldr	r5, [pc, #48]	@ (801098c <RCCEx_PLL3_Config+0xfc>)
 801095a:	682b      	ldr	r3, [r5, #0]
 801095c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8010960:	d110      	bne.n	8010984 <RCCEx_PLL3_Config+0xf4>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010962:	f7fa ffad 	bl	800b8c0 <HAL_GetTick>
 8010966:	1b00      	subs	r0, r0, r4
 8010968:	2802      	cmp	r0, #2
 801096a:	d9f6      	bls.n	801095a <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 801096c:	2003      	movs	r0, #3
 801096e:	e00c      	b.n	801098a <RCCEx_PLL3_Config+0xfa>
    else if (Divider == DIVIDER_Q_UPDATE)
 8010970:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010972:	4a06      	ldr	r2, [pc, #24]	@ (801098c <RCCEx_PLL3_Config+0xfc>)
 8010974:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010976:	bf0c      	ite	eq
 8010978:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801097c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8010980:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010982:	e7e1      	b.n	8010948 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8010984:	2000      	movs	r0, #0
 8010986:	e000      	b.n	801098a <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 8010988:	2001      	movs	r0, #1
}
 801098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801098c:	58024400 	.word	0x58024400
 8010990:	ffff0007 	.word	0xffff0007

08010994 <HAL_RCCEx_PeriphCLKConfig>:
{
 8010994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010998:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801099a:	6803      	ldr	r3, [r0, #0]
 801099c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80109a0:	d02b      	beq.n	80109fa <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80109a2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80109a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80109a8:	d021      	beq.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80109aa:	d80c      	bhi.n	80109c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80109ac:	b1cb      	cbz	r3, 80109e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80109ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109b2:	d106      	bne.n	80109c2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80109b4:	2102      	movs	r1, #2
 80109b6:	3008      	adds	r0, #8
 80109b8:	f7ff fee8 	bl	801078c <RCCEx_PLL2_Config>
 80109bc:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80109be:	b9ee      	cbnz	r6, 80109fc <HAL_RCCEx_PeriphCLKConfig+0x68>
 80109c0:	e004      	b.n	80109cc <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80109c2:	2601      	movs	r6, #1
 80109c4:	e01a      	b.n	80109fc <HAL_RCCEx_PeriphCLKConfig+0x68>
 80109c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80109ca:	d108      	bne.n	80109de <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80109cc:	4a98      	ldr	r2, [pc, #608]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80109ce:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80109d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80109d4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80109d6:	430b      	orrs	r3, r1
 80109d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80109da:	2600      	movs	r6, #0
 80109dc:	e00e      	b.n	80109fc <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80109de:	2601      	movs	r6, #1
 80109e0:	e00c      	b.n	80109fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80109e2:	4a93      	ldr	r2, [pc, #588]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80109e4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80109e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80109ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80109ec:	e7ee      	b.n	80109cc <HAL_RCCEx_PeriphCLKConfig+0x38>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80109ee:	2102      	movs	r1, #2
 80109f0:	3028      	adds	r0, #40	@ 0x28
 80109f2:	f7ff ff4d 	bl	8010890 <RCCEx_PLL3_Config>
 80109f6:	4606      	mov	r6, r0
        break;
 80109f8:	e7e1      	b.n	80109be <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80109fa:	2600      	movs	r6, #0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80109fc:	6823      	ldr	r3, [r4, #0]
 80109fe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8010a02:	d026      	beq.n	8010a52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch (PeriphClkInit->Sai1ClockSelection)
 8010a04:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8010a06:	2b04      	cmp	r3, #4
 8010a08:	d836      	bhi.n	8010a78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8010a0a:	e8df f003 	tbb	[pc, r3]
 8010a0e:	0a03      	.short	0x0a03
 8010a10:	1811      	.short	0x1811
 8010a12:	18          	.byte	0x18
 8010a13:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a14:	4a86      	ldr	r2, [pc, #536]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010a16:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8010a1e:	4635      	mov	r5, r6
 8010a20:	e00e      	b.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0xac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010a22:	2100      	movs	r1, #0
 8010a24:	f104 0008 	add.w	r0, r4, #8
 8010a28:	f7ff feb0 	bl	801078c <RCCEx_PLL2_Config>
 8010a2c:	4605      	mov	r5, r0
        break;
 8010a2e:	e007      	b.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0xac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010a30:	2100      	movs	r1, #0
 8010a32:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010a36:	f7ff ff2b 	bl	8010890 <RCCEx_PLL3_Config>
 8010a3a:	4605      	mov	r5, r0
        break;
 8010a3c:	e000      	b.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch (PeriphClkInit->Sai1ClockSelection)
 8010a3e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8010a40:	b9ed      	cbnz	r5, 8010a7e <HAL_RCCEx_PeriphCLKConfig+0xea>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010a42:	4a7b      	ldr	r2, [pc, #492]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010a44:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8010a46:	f023 0307 	bic.w	r3, r3, #7
 8010a4a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8010a4c:	430b      	orrs	r3, r1
 8010a4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8010a50:	e000      	b.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8010a52:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010a54:	6823      	ldr	r3, [r4, #0]
 8010a56:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8010a5a:	d022      	beq.n	8010aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai23ClockSelection)
 8010a5c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8010a5e:	2b80      	cmp	r3, #128	@ 0x80
 8010a60:	d03e      	beq.n	8010ae0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8010a62:	d811      	bhi.n	8010a88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8010a64:	b3b3      	cbz	r3, 8010ad4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8010a66:	2b40      	cmp	r3, #64	@ 0x40
 8010a68:	d10b      	bne.n	8010a82 <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	f104 0008 	add.w	r0, r4, #8
 8010a70:	f7ff fe8c 	bl	801078c <RCCEx_PLL2_Config>
 8010a74:	4605      	mov	r5, r0
        break;
 8010a76:	e00c      	b.n	8010a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai1ClockSelection)
 8010a78:	2601      	movs	r6, #1
 8010a7a:	4635      	mov	r5, r6
 8010a7c:	e7ea      	b.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8010a7e:	462e      	mov	r6, r5
 8010a80:	e7e8      	b.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    switch (PeriphClkInit->Sai23ClockSelection)
 8010a82:	2601      	movs	r6, #1
 8010a84:	4635      	mov	r5, r6
 8010a86:	e00c      	b.n	8010aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8010a88:	2bc0      	cmp	r3, #192	@ 0xc0
 8010a8a:	d002      	beq.n	8010a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a90:	d11d      	bne.n	8010ace <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
 8010a92:	bb65      	cbnz	r5, 8010aee <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8010a94:	4a66      	ldr	r2, [pc, #408]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010a96:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8010a98:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8010a9c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8010a9e:	430b      	orrs	r3, r1
 8010aa0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8010aa8:	d035      	beq.n	8010b16 <HAL_RCCEx_PeriphCLKConfig+0x182>
    switch (PeriphClkInit->Sai4AClockSelection)
 8010aaa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8010aae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010ab2:	d04e      	beq.n	8010b52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8010ab4:	d820      	bhi.n	8010af8 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d045      	beq.n	8010b46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8010aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010abe:	d118      	bne.n	8010af2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	f104 0008 	add.w	r0, r4, #8
 8010ac6:	f7ff fe61 	bl	801078c <RCCEx_PLL2_Config>
 8010aca:	4605      	mov	r5, r0
        break;
 8010acc:	e01a      	b.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
 8010ace:	2601      	movs	r6, #1
 8010ad0:	4635      	mov	r5, r6
 8010ad2:	e7e6      	b.n	8010aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010ad4:	4a56      	ldr	r2, [pc, #344]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010ad6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010adc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8010ade:	e7d8      	b.n	8010a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010ae6:	f7ff fed3 	bl	8010890 <RCCEx_PLL3_Config>
 8010aea:	4605      	mov	r5, r0
        break;
 8010aec:	e7d1      	b.n	8010a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010aee:	462e      	mov	r6, r5
 8010af0:	e7d7      	b.n	8010aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8010af2:	2601      	movs	r6, #1
 8010af4:	4635      	mov	r5, r6
 8010af6:	e00e      	b.n	8010b16 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8010af8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010afc:	d002      	beq.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8010afe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010b02:	d11d      	bne.n	8010b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    if (ret == HAL_OK)
 8010b04:	bb65      	cbnz	r5, 8010b60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8010b06:	4a4a      	ldr	r2, [pc, #296]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010b08:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8010b0a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8010b0e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8010b12:	430b      	orrs	r3, r1
 8010b14:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010b16:	6823      	ldr	r3, [r4, #0]
 8010b18:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8010b1c:	d046      	beq.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x218>
    switch (PeriphClkInit->Sai4BClockSelection)
 8010b1e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8010b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010b26:	d039      	beq.n	8010b9c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8010b28:	d81f      	bhi.n	8010b6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8010b2a:	b38b      	cbz	r3, 8010b90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8010b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010b30:	d118      	bne.n	8010b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010b32:	2100      	movs	r1, #0
 8010b34:	f104 0008 	add.w	r0, r4, #8
 8010b38:	f7ff fe28 	bl	801078c <RCCEx_PLL2_Config>
 8010b3c:	4605      	mov	r5, r0
        break;
 8010b3e:	e01a      	b.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    switch (PeriphClkInit->Sai4AClockSelection)
 8010b40:	2601      	movs	r6, #1
 8010b42:	4635      	mov	r5, r6
 8010b44:	e7e7      	b.n	8010b16 <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010b46:	4a3a      	ldr	r2, [pc, #232]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010b48:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8010b50:	e7d8      	b.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010b52:	2100      	movs	r1, #0
 8010b54:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010b58:	f7ff fe9a 	bl	8010890 <RCCEx_PLL3_Config>
 8010b5c:	4605      	mov	r5, r0
        break;
 8010b5e:	e7d1      	b.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8010b60:	462e      	mov	r6, r5
 8010b62:	e7d8      	b.n	8010b16 <HAL_RCCEx_PeriphCLKConfig+0x182>
    switch (PeriphClkInit->Sai4BClockSelection)
 8010b64:	2601      	movs	r6, #1
 8010b66:	4635      	mov	r5, r6
 8010b68:	e020      	b.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x218>
 8010b6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010b6e:	d002      	beq.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8010b70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010b74:	d109      	bne.n	8010b8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    if (ret == HAL_OK)
 8010b76:	b9c5      	cbnz	r5, 8010baa <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010b78:	4a2d      	ldr	r2, [pc, #180]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010b7a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8010b7c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8010b80:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8010b84:	430b      	orrs	r3, r1
 8010b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8010b88:	e010      	b.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x218>
    switch (PeriphClkInit->Sai4BClockSelection)
 8010b8a:	2601      	movs	r6, #1
 8010b8c:	4635      	mov	r5, r6
 8010b8e:	e00d      	b.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x218>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010b90:	4a27      	ldr	r2, [pc, #156]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010b92:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8010b9a:	e7ec      	b.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010b9c:	2100      	movs	r1, #0
 8010b9e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010ba2:	f7ff fe75 	bl	8010890 <RCCEx_PLL3_Config>
 8010ba6:	4605      	mov	r5, r0
        break;
 8010ba8:	e7e5      	b.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8010baa:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8010bb2:	d01b      	beq.n	8010bec <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->QspiClockSelection)
 8010bb4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010bb6:	2b20      	cmp	r3, #32
 8010bb8:	d02d      	beq.n	8010c16 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8010bba:	d813      	bhi.n	8010be4 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8010bbc:	b133      	cbz	r3, 8010bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8010bbe:	2b10      	cmp	r3, #16
 8010bc0:	d10d      	bne.n	8010bde <HAL_RCCEx_PeriphCLKConfig+0x24a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010bc4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010bca:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010bcc:	bb55      	cbnz	r5, 8010c24 <HAL_RCCEx_PeriphCLKConfig+0x290>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010bce:	4a18      	ldr	r2, [pc, #96]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010bd0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8010bd2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8010bd6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8010bd8:	430b      	orrs	r3, r1
 8010bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010bdc:	e006      	b.n	8010bec <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->QspiClockSelection)
 8010bde:	2601      	movs	r6, #1
 8010be0:	4635      	mov	r5, r6
 8010be2:	e003      	b.n	8010bec <HAL_RCCEx_PeriphCLKConfig+0x258>
 8010be4:	2b30      	cmp	r3, #48	@ 0x30
 8010be6:	d0f1      	beq.n	8010bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8010be8:	2601      	movs	r6, #1
 8010bea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010bec:	6823      	ldr	r3, [r4, #0]
 8010bee:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8010bf2:	d02e      	beq.n	8010c52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi123ClockSelection)
 8010bf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010bfa:	d050      	beq.n	8010c9e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8010bfc:	d81a      	bhi.n	8010c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d047      	beq.n	8010c92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8010c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010c06:	d10f      	bne.n	8010c28 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010c08:	2100      	movs	r1, #0
 8010c0a:	f104 0008 	add.w	r0, r4, #8
 8010c0e:	f7ff fdbd 	bl	801078c <RCCEx_PLL2_Config>
 8010c12:	4605      	mov	r5, r0
        break;
 8010c14:	e014      	b.n	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010c16:	2102      	movs	r1, #2
 8010c18:	f104 0008 	add.w	r0, r4, #8
 8010c1c:	f7ff fdb6 	bl	801078c <RCCEx_PLL2_Config>
 8010c20:	4605      	mov	r5, r0
        break;
 8010c22:	e7d3      	b.n	8010bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8010c24:	462e      	mov	r6, r5
 8010c26:	e7e1      	b.n	8010bec <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch (PeriphClkInit->Spi123ClockSelection)
 8010c28:	2601      	movs	r6, #1
 8010c2a:	4635      	mov	r5, r6
 8010c2c:	e011      	b.n	8010c52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8010c2e:	bf00      	nop
 8010c30:	58024400 	.word	0x58024400
 8010c34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010c38:	d002      	beq.n	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8010c3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010c3e:	d125      	bne.n	8010c8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    if (ret == HAL_OK)
 8010c40:	2d00      	cmp	r5, #0
 8010c42:	d133      	bne.n	8010cac <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010c44:	4a90      	ldr	r2, [pc, #576]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010c46:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8010c48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c4c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8010c4e:	430b      	orrs	r3, r1
 8010c50:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8010c58:	d037      	beq.n	8010cca <HAL_RCCEx_PeriphCLKConfig+0x336>
    switch (PeriphClkInit->Spi45ClockSelection)
 8010c5a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8010c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010c60:	d052      	beq.n	8010d08 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8010c62:	d828      	bhi.n	8010cb6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8010c64:	b143      	cbz	r3, 8010c78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8010c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c6a:	d121      	bne.n	8010cb0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010c6c:	2101      	movs	r1, #1
 8010c6e:	f104 0008 	add.w	r0, r4, #8
 8010c72:	f7ff fd8b 	bl	801078c <RCCEx_PLL2_Config>
 8010c76:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8010c78:	2d00      	cmp	r5, #0
 8010c7a:	d14c      	bne.n	8010d16 <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8010c7c:	4a82      	ldr	r2, [pc, #520]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010c7e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8010c80:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8010c84:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8010c86:	430b      	orrs	r3, r1
 8010c88:	6513      	str	r3, [r2, #80]	@ 0x50
 8010c8a:	e01e      	b.n	8010cca <HAL_RCCEx_PeriphCLKConfig+0x336>
    switch (PeriphClkInit->Spi123ClockSelection)
 8010c8c:	2601      	movs	r6, #1
 8010c8e:	4635      	mov	r5, r6
 8010c90:	e7df      	b.n	8010c52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c92:	4a7d      	ldr	r2, [pc, #500]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010c94:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8010c9c:	e7d0      	b.n	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010ca4:	f7ff fdf4 	bl	8010890 <RCCEx_PLL3_Config>
 8010ca8:	4605      	mov	r5, r0
        break;
 8010caa:	e7c9      	b.n	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8010cac:	462e      	mov	r6, r5
 8010cae:	e7d0      	b.n	8010c52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi45ClockSelection)
 8010cb0:	2601      	movs	r6, #1
 8010cb2:	4635      	mov	r5, r6
 8010cb4:	e009      	b.n	8010cca <HAL_RCCEx_PeriphCLKConfig+0x336>
 8010cb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010cba:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8010cbe:	d0db      	beq.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8010cc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010cc4:	d0d8      	beq.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8010cc6:	2601      	movs	r6, #1
 8010cc8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010cca:	6823      	ldr	r3, [r4, #0]
 8010ccc:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8010cd0:	d030      	beq.n	8010d34 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
    switch (PeriphClkInit->Spi6ClockSelection)
 8010cd2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8010cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010cda:	d043      	beq.n	8010d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8010cdc:	d820      	bhi.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8010cde:	b143      	cbz	r3, 8010cf2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8010ce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ce4:	d119      	bne.n	8010d1a <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010ce6:	2101      	movs	r1, #1
 8010ce8:	f104 0008 	add.w	r0, r4, #8
 8010cec:	f7ff fd4e 	bl	801078c <RCCEx_PLL2_Config>
 8010cf0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8010cf2:	2d00      	cmp	r5, #0
 8010cf4:	d13d      	bne.n	8010d72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8010cf6:	4a64      	ldr	r2, [pc, #400]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010cf8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8010cfa:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8010cfe:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8010d02:	430b      	orrs	r3, r1
 8010d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8010d06:	e015      	b.n	8010d34 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010d08:	2101      	movs	r1, #1
 8010d0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010d0e:	f7ff fdbf 	bl	8010890 <RCCEx_PLL3_Config>
 8010d12:	4605      	mov	r5, r0
        break;
 8010d14:	e7b0      	b.n	8010c78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8010d16:	462e      	mov	r6, r5
 8010d18:	e7d7      	b.n	8010cca <HAL_RCCEx_PeriphCLKConfig+0x336>
    switch (PeriphClkInit->Spi6ClockSelection)
 8010d1a:	2601      	movs	r6, #1
 8010d1c:	4635      	mov	r5, r6
 8010d1e:	e009      	b.n	8010d34 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8010d20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010d24:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8010d28:	d0e3      	beq.n	8010cf2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8010d2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010d2e:	d0e0      	beq.n	8010cf2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8010d30:	2601      	movs	r6, #1
 8010d32:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8010d3a:	d01e      	beq.n	8010d7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch (PeriphClkInit->DsiClockSelection)
 8010d3c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010d3e:	b143      	cbz	r3, 8010d52 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8010d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d44:	d117      	bne.n	8010d76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010d46:	2101      	movs	r1, #1
 8010d48:	f104 0008 	add.w	r0, r4, #8
 8010d4c:	f7ff fd1e 	bl	801078c <RCCEx_PLL2_Config>
 8010d50:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8010d52:	bb5d      	cbnz	r5, 8010dac <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8010d54:	4a4c      	ldr	r2, [pc, #304]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010d56:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8010d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d5c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8010d5e:	430b      	orrs	r3, r1
 8010d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010d62:	e00a      	b.n	8010d7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010d64:	2101      	movs	r1, #1
 8010d66:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010d6a:	f7ff fd91 	bl	8010890 <RCCEx_PLL3_Config>
 8010d6e:	4605      	mov	r5, r0
        break;
 8010d70:	e7bf      	b.n	8010cf2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8010d72:	462e      	mov	r6, r5
 8010d74:	e7de      	b.n	8010d34 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
    switch (PeriphClkInit->DsiClockSelection)
 8010d76:	2601      	movs	r6, #1
 8010d78:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8010d80:	d009      	beq.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0x402>
    switch (PeriphClkInit->FdcanClockSelection)
 8010d82:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d88:	d012      	beq.n	8010db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8010d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010d8e:	d01d      	beq.n	8010dcc <HAL_RCCEx_PeriphCLKConfig+0x438>
 8010d90:	b19b      	cbz	r3, 8010dba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8010d92:	2601      	movs	r6, #1
 8010d94:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010d96:	6823      	ldr	r3, [r4, #0]
 8010d98:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8010d9c:	d02c      	beq.n	8010df8 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch (PeriphClkInit->FmcClockSelection)
 8010d9e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8010da0:	2b03      	cmp	r3, #3
 8010da2:	d855      	bhi.n	8010e50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8010da4:	e8df f003 	tbb	[pc, r3]
 8010da8:	204d1b20 	.word	0x204d1b20
 8010dac:	462e      	mov	r6, r5
 8010dae:	e7e4      	b.n	8010d7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010db0:	4a35      	ldr	r2, [pc, #212]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010db2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010dba:	b975      	cbnz	r5, 8010dda <HAL_RCCEx_PeriphCLKConfig+0x446>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010dbc:	4a32      	ldr	r2, [pc, #200]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010dbe:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8010dc0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8010dc4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010dc6:	430b      	orrs	r3, r1
 8010dc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8010dca:	e7e4      	b.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0x402>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010dcc:	2101      	movs	r1, #1
 8010dce:	f104 0008 	add.w	r0, r4, #8
 8010dd2:	f7ff fcdb 	bl	801078c <RCCEx_PLL2_Config>
 8010dd6:	4605      	mov	r5, r0
        break;
 8010dd8:	e7ef      	b.n	8010dba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8010dda:	462e      	mov	r6, r5
 8010ddc:	e7db      	b.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0x402>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010dde:	4a2a      	ldr	r2, [pc, #168]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010de0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8010de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010de6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8010de8:	bbad      	cbnz	r5, 8010e56 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010dea:	4a27      	ldr	r2, [pc, #156]	@ (8010e88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>)
 8010dec:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8010dee:	f023 0303 	bic.w	r3, r3, #3
 8010df2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010df4:	430b      	orrs	r3, r1
 8010df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8010dfe:	d12c      	bne.n	8010e5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010e00:	6823      	ldr	r3, [r4, #0]
 8010e02:	f013 0f01 	tst.w	r3, #1
 8010e06:	f000 80ad 	beq.w	8010f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    switch (PeriphClkInit->Usart16ClockSelection)
 8010e0a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010e0e:	2b28      	cmp	r3, #40	@ 0x28
 8010e10:	f200 80a6 	bhi.w	8010f60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8010e14:	e8df f003 	tbb	[pc, r3]
 8010e18:	a4a4a493 	.word	0xa4a4a493
 8010e1c:	a4a4a4a4 	.word	0xa4a4a4a4
 8010e20:	a4a4a48d 	.word	0xa4a4a48d
 8010e24:	a4a4a4a4 	.word	0xa4a4a4a4
 8010e28:	a4a4a49d 	.word	0xa4a4a49d
 8010e2c:	a4a4a4a4 	.word	0xa4a4a4a4
 8010e30:	a4a4a493 	.word	0xa4a4a493
 8010e34:	a4a4a4a4 	.word	0xa4a4a4a4
 8010e38:	a4a4a493 	.word	0xa4a4a493
 8010e3c:	a4a4a4a4 	.word	0xa4a4a4a4
 8010e40:	93          	.byte	0x93
 8010e41:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010e42:	2102      	movs	r1, #2
 8010e44:	f104 0008 	add.w	r0, r4, #8
 8010e48:	f7ff fca0 	bl	801078c <RCCEx_PLL2_Config>
 8010e4c:	4605      	mov	r5, r0
        break;
 8010e4e:	e7cb      	b.n	8010de8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    switch (PeriphClkInit->FmcClockSelection)
 8010e50:	2601      	movs	r6, #1
 8010e52:	4635      	mov	r5, r6
 8010e54:	e7d0      	b.n	8010df8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8010e56:	462e      	mov	r6, r5
 8010e58:	e7ce      	b.n	8010df8 <HAL_RCCEx_PeriphCLKConfig+0x464>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8010e8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8010e5c:	6813      	ldr	r3, [r2, #0]
 8010e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010e62:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8010e64:	f7fa fd2c 	bl	800b8c0 <HAL_GetTick>
 8010e68:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010e6a:	f8df 8020 	ldr.w	r8, [pc, #32]	@ 8010e8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8010e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8010e72:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8010e76:	d10b      	bne.n	8010e90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010e78:	f7fa fd22 	bl	800b8c0 <HAL_GetTick>
 8010e7c:	1bc0      	subs	r0, r0, r7
 8010e7e:	2864      	cmp	r0, #100	@ 0x64
 8010e80:	d9f5      	bls.n	8010e6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
        ret = HAL_TIMEOUT;
 8010e82:	2603      	movs	r6, #3
 8010e84:	4635      	mov	r5, r6
 8010e86:	e7bb      	b.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8010e88:	58024400 	.word	0x58024400
 8010e8c:	58024800 	.word	0x58024800
    if (ret == HAL_OK)
 8010e90:	2d00      	cmp	r5, #0
 8010e92:	d14c      	bne.n	8010f2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010e94:	4ba2      	ldr	r3, [pc, #648]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8010e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e98:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8010e9c:	4053      	eors	r3, r2
 8010e9e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8010ea2:	d00c      	beq.n	8010ebe <HAL_RCCEx_PeriphCLKConfig+0x52a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010ea4:	4b9e      	ldr	r3, [pc, #632]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8010ea6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010ea8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8010eac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010eae:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8010eb2:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010eb4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010eb6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8010eba:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8010ebc:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010ebe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8010ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ec6:	d014      	beq.n	8010ef2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010ec8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8010ecc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8010ed0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8010ed4:	d021      	beq.n	8010f1a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8010ed6:	4a92      	ldr	r2, [pc, #584]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8010ed8:	6913      	ldr	r3, [r2, #16]
 8010eda:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010ede:	6113      	str	r3, [r2, #16]
 8010ee0:	4a8f      	ldr	r2, [pc, #572]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8010ee2:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8010ee4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8010ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010eec:	430b      	orrs	r3, r1
 8010eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8010ef0:	e786      	b.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        tickstart = HAL_GetTick();
 8010ef2:	f7fa fce5 	bl	800b8c0 <HAL_GetTick>
 8010ef6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010ef8:	f8df 8224 	ldr.w	r8, [pc, #548]	@ 8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010efc:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010f00:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010f04:	f013 0f02 	tst.w	r3, #2
 8010f08:	d1de      	bne.n	8010ec8 <HAL_RCCEx_PeriphCLKConfig+0x534>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010f0a:	f7fa fcd9 	bl	800b8c0 <HAL_GetTick>
 8010f0e:	1bc0      	subs	r0, r0, r7
 8010f10:	4548      	cmp	r0, r9
 8010f12:	d9f5      	bls.n	8010f00 <HAL_RCCEx_PeriphCLKConfig+0x56c>
            ret = HAL_TIMEOUT;
 8010f14:	2603      	movs	r6, #3
 8010f16:	4635      	mov	r5, r6
 8010f18:	e772      	b.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010f1a:	4881      	ldr	r0, [pc, #516]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8010f1c:	6901      	ldr	r1, [r0, #16]
 8010f1e:	4a81      	ldr	r2, [pc, #516]	@ (8011124 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8010f20:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 8010f24:	f421 527c 	bic.w	r2, r1, #16128	@ 0x3f00
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	6103      	str	r3, [r0, #16]
 8010f2c:	e7d8      	b.n	8010ee0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8010f2e:	462e      	mov	r6, r5
 8010f30:	e766      	b.n	8010e00 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010f32:	2101      	movs	r1, #1
 8010f34:	f104 0008 	add.w	r0, r4, #8
 8010f38:	f7ff fc28 	bl	801078c <RCCEx_PLL2_Config>
 8010f3c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8010f3e:	b9ed      	cbnz	r5, 8010f7c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010f40:	4a77      	ldr	r2, [pc, #476]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8010f42:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8010f44:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8010f48:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8010f4c:	430b      	orrs	r3, r1
 8010f4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8010f50:	e008      	b.n	8010f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010f52:	2101      	movs	r1, #1
 8010f54:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010f58:	f7ff fc9a 	bl	8010890 <RCCEx_PLL3_Config>
 8010f5c:	4605      	mov	r5, r0
        break;
 8010f5e:	e7ee      	b.n	8010f3e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch (PeriphClkInit->Usart16ClockSelection)
 8010f60:	2601      	movs	r6, #1
 8010f62:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	f013 0f02 	tst.w	r3, #2
 8010f6a:	d017      	beq.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010f6c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8010f6e:	2b05      	cmp	r3, #5
 8010f70:	d828      	bhi.n	8010fc4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8010f72:	e8df f003 	tbb	[pc, r3]
 8010f76:	050b      	.short	0x050b
 8010f78:	0b0b0b20 	.word	0x0b0b0b20
 8010f7c:	462e      	mov	r6, r5
 8010f7e:	e7f1      	b.n	8010f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010f80:	2101      	movs	r1, #1
 8010f82:	f104 0008 	add.w	r0, r4, #8
 8010f86:	f7ff fc01 	bl	801078c <RCCEx_PLL2_Config>
 8010f8a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8010f8c:	b9ed      	cbnz	r5, 8010fca <HAL_RCCEx_PeriphCLKConfig+0x636>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010f8e:	4a64      	ldr	r2, [pc, #400]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8010f90:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8010f92:	f023 0307 	bic.w	r3, r3, #7
 8010f96:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8010f98:	430b      	orrs	r3, r1
 8010f9a:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010f9c:	6823      	ldr	r3, [r4, #0]
 8010f9e:	f013 0f04 	tst.w	r3, #4
 8010fa2:	d023      	beq.n	8010fec <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010fa4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8010fa8:	2b05      	cmp	r3, #5
 8010faa:	d845      	bhi.n	8011038 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8010fac:	e8df f003 	tbb	[pc, r3]
 8010fb0:	153d0f15 	.word	0x153d0f15
 8010fb4:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010fb6:	2101      	movs	r1, #1
 8010fb8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010fbc:	f7ff fc68 	bl	8010890 <RCCEx_PLL3_Config>
 8010fc0:	4605      	mov	r5, r0
        break;
 8010fc2:	e7e3      	b.n	8010f8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010fc4:	2601      	movs	r6, #1
 8010fc6:	4635      	mov	r5, r6
 8010fc8:	e7e8      	b.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8010fca:	462e      	mov	r6, r5
 8010fcc:	e7e6      	b.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0x608>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010fce:	2101      	movs	r1, #1
 8010fd0:	f104 0008 	add.w	r0, r4, #8
 8010fd4:	f7ff fbda 	bl	801078c <RCCEx_PLL2_Config>
 8010fd8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8010fda:	bb85      	cbnz	r5, 801103e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010fdc:	4a50      	ldr	r2, [pc, #320]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8010fde:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8010fe0:	f023 0307 	bic.w	r3, r3, #7
 8010fe4:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8010fe8:	430b      	orrs	r3, r1
 8010fea:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010fec:	6823      	ldr	r3, [r4, #0]
 8010fee:	f013 0f20 	tst.w	r3, #32
 8010ff2:	d033      	beq.n	801105c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8010ff4:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8010ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010ffc:	d04d      	beq.n	801109a <HAL_RCCEx_PeriphCLKConfig+0x706>
 8010ffe:	d823      	bhi.n	8011048 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8011000:	b143      	cbz	r3, 8011014 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8011002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011006:	d11c      	bne.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011008:	2100      	movs	r1, #0
 801100a:	f104 0008 	add.w	r0, r4, #8
 801100e:	f7ff fbbd 	bl	801078c <RCCEx_PLL2_Config>
 8011012:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8011014:	2d00      	cmp	r5, #0
 8011016:	d147      	bne.n	80110a8 <HAL_RCCEx_PeriphCLKConfig+0x714>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011018:	4a41      	ldr	r2, [pc, #260]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 801101a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 801101c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8011020:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011024:	430b      	orrs	r3, r1
 8011026:	6553      	str	r3, [r2, #84]	@ 0x54
 8011028:	e018      	b.n	801105c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801102a:	2101      	movs	r1, #1
 801102c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011030:	f7ff fc2e 	bl	8010890 <RCCEx_PLL3_Config>
 8011034:	4605      	mov	r5, r0
        break;
 8011036:	e7d0      	b.n	8010fda <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8011038:	2601      	movs	r6, #1
 801103a:	4635      	mov	r5, r6
 801103c:	e7d6      	b.n	8010fec <HAL_RCCEx_PeriphCLKConfig+0x658>
 801103e:	462e      	mov	r6, r5
 8011040:	e7d4      	b.n	8010fec <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8011042:	2601      	movs	r6, #1
 8011044:	4635      	mov	r5, r6
 8011046:	e009      	b.n	801105c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8011048:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801104c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8011050:	d0e0      	beq.n	8011014 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8011052:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011056:	d0dd      	beq.n	8011014 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8011058:	2601      	movs	r6, #1
 801105a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8011062:	d030      	beq.n	80110c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8011064:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8011068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801106c:	d04c      	beq.n	8011108 <HAL_RCCEx_PeriphCLKConfig+0x774>
 801106e:	d820      	bhi.n	80110b2 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8011070:	b143      	cbz	r3, 8011084 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8011072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011076:	d119      	bne.n	80110ac <HAL_RCCEx_PeriphCLKConfig+0x718>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011078:	2100      	movs	r1, #0
 801107a:	f104 0008 	add.w	r0, r4, #8
 801107e:	f7ff fb85 	bl	801078c <RCCEx_PLL2_Config>
 8011082:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8011084:	2d00      	cmp	r5, #0
 8011086:	d146      	bne.n	8011116 <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011088:	4a25      	ldr	r2, [pc, #148]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 801108a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801108c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8011090:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8011094:	430b      	orrs	r3, r1
 8011096:	6593      	str	r3, [r2, #88]	@ 0x58
 8011098:	e015      	b.n	80110c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801109a:	2102      	movs	r1, #2
 801109c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80110a0:	f7ff fbf6 	bl	8010890 <RCCEx_PLL3_Config>
 80110a4:	4605      	mov	r5, r0
        break;
 80110a6:	e7b5      	b.n	8011014 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80110a8:	462e      	mov	r6, r5
 80110aa:	e7d7      	b.n	801105c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80110ac:	2601      	movs	r6, #1
 80110ae:	4635      	mov	r5, r6
 80110b0:	e009      	b.n	80110c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
 80110b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80110b6:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80110ba:	d0e3      	beq.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80110bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80110c0:	d0e0      	beq.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80110c2:	2601      	movs	r6, #1
 80110c4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80110c6:	6823      	ldr	r3, [r4, #0]
 80110c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80110cc:	d036      	beq.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80110ce:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80110d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80110d6:	f000 810b 	beq.w	80112f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80110da:	d825      	bhi.n	8011128 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80110dc:	b143      	cbz	r3, 80110f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80110de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80110e2:	d11a      	bne.n	801111a <HAL_RCCEx_PeriphCLKConfig+0x786>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80110e4:	2100      	movs	r1, #0
 80110e6:	f104 0008 	add.w	r0, r4, #8
 80110ea:	f7ff fb4f 	bl	801078c <RCCEx_PLL2_Config>
 80110ee:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80110f0:	2d00      	cmp	r5, #0
 80110f2:	f040 8104 	bne.w	80112fe <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80110f6:	4a0a      	ldr	r2, [pc, #40]	@ (8011120 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80110f8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80110fa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80110fe:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8011102:	430b      	orrs	r3, r1
 8011104:	6593      	str	r3, [r2, #88]	@ 0x58
 8011106:	e019      	b.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011108:	2102      	movs	r1, #2
 801110a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801110e:	f7ff fbbf 	bl	8010890 <RCCEx_PLL3_Config>
 8011112:	4605      	mov	r5, r0
        break;
 8011114:	e7b6      	b.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8011116:	462e      	mov	r6, r5
 8011118:	e7d5      	b.n	80110c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->Lptim345ClockSelection)
 801111a:	2601      	movs	r6, #1
 801111c:	4635      	mov	r5, r6
 801111e:	e00d      	b.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8011120:	58024400 	.word	0x58024400
 8011124:	00ffffcf 	.word	0x00ffffcf
 8011128:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801112c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8011130:	d0de      	beq.n	80110f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8011132:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011136:	d0db      	beq.n	80110f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8011138:	2601      	movs	r6, #1
 801113a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801113c:	6823      	ldr	r3, [r4, #0]
 801113e:	f013 0f08 	tst.w	r3, #8
 8011142:	d00d      	beq.n	8011160 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8011144:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8011148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801114c:	f000 80d9 	beq.w	8011302 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8011150:	4ab0      	ldr	r2, [pc, #704]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8011152:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8011154:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8011158:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 801115c:	430b      	orrs	r3, r1
 801115e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011160:	6823      	ldr	r3, [r4, #0]
 8011162:	f013 0f10 	tst.w	r3, #16
 8011166:	d00d      	beq.n	8011184 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8011168:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 801116c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011170:	f000 80d0 	beq.w	8011314 <HAL_RCCEx_PeriphCLKConfig+0x980>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011174:	4aa7      	ldr	r2, [pc, #668]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8011176:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8011178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801117c:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8011180:	430b      	orrs	r3, r1
 8011182:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011184:	6823      	ldr	r3, [r4, #0]
 8011186:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801118a:	d00e      	beq.n	80111aa <HAL_RCCEx_PeriphCLKConfig+0x816>
    switch (PeriphClkInit->AdcClockSelection)
 801118c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8011190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011194:	f000 80d7 	beq.w	8011346 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8011198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801119c:	f000 80c9 	beq.w	8011332 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 80c0 	beq.w	8011326 <HAL_RCCEx_PeriphCLKConfig+0x992>
 80111a6:	2601      	movs	r6, #1
 80111a8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80111aa:	6823      	ldr	r3, [r4, #0]
 80111ac:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80111b0:	d00f      	beq.n	80111d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    switch (PeriphClkInit->UsbClockSelection)
 80111b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80111b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80111ba:	f000 80dc 	beq.w	8011376 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80111be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80111c2:	f000 80ce 	beq.w	8011362 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 80111c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80111ca:	f000 80c5 	beq.w	8011358 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 80111ce:	2601      	movs	r6, #1
 80111d0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80111d2:	6823      	ldr	r3, [r4, #0]
 80111d4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80111d8:	d009      	beq.n	80111ee <HAL_RCCEx_PeriphCLKConfig+0x85a>
    switch (PeriphClkInit->SdmmcClockSelection)
 80111da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 80d3 	beq.w	8011388 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 80111e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111e6:	f000 80dd 	beq.w	80113a4 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 80111ea:	2601      	movs	r6, #1
 80111ec:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80111ee:	6823      	ldr	r3, [r4, #0]
 80111f0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80111f4:	f040 80df 	bne.w	80113b6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80111f8:	6823      	ldr	r3, [r4, #0]
 80111fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80111fe:	d00e      	beq.n	801121e <HAL_RCCEx_PeriphCLKConfig+0x88a>
    switch (PeriphClkInit->RngClockSelection)
 8011200:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011208:	f000 80e1 	beq.w	80113ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 801120c:	f240 80dc 	bls.w	80113c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8011210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011218:	f000 80de 	beq.w	80113d8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 801121c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801121e:	6823      	ldr	r3, [r4, #0]
 8011220:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8011224:	d006      	beq.n	8011234 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011226:	4a7b      	ldr	r2, [pc, #492]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8011228:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801122a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801122e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8011230:	430b      	orrs	r3, r1
 8011232:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011234:	6823      	ldr	r3, [r4, #0]
 8011236:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 801123a:	d007      	beq.n	801124c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801123c:	4a75      	ldr	r2, [pc, #468]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 801123e:	6913      	ldr	r3, [r2, #16]
 8011240:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011244:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 8011248:	430b      	orrs	r3, r1
 801124a:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801124c:	6823      	ldr	r3, [r4, #0]
 801124e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8011252:	d006      	beq.n	8011262 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011254:	4a6f      	ldr	r2, [pc, #444]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8011256:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8011258:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801125c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801125e:	430b      	orrs	r3, r1
 8011260:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011268:	d009      	beq.n	801127e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801126a:	4b6a      	ldr	r3, [pc, #424]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 801126c:	691a      	ldr	r2, [r3, #16]
 801126e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011272:	611a      	str	r2, [r3, #16]
 8011274:	691a      	ldr	r2, [r3, #16]
 8011276:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 801127a:	430a      	orrs	r2, r1
 801127c:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801127e:	6823      	ldr	r3, [r4, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	da06      	bge.n	8011292 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011284:	4a63      	ldr	r2, [pc, #396]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8011286:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8011288:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 801128c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801128e:	430b      	orrs	r3, r1
 8011290:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8011298:	d007      	beq.n	80112aa <HAL_RCCEx_PeriphCLKConfig+0x916>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801129a:	4a5e      	ldr	r2, [pc, #376]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 801129c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 801129e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80112a2:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80112a6:	430b      	orrs	r3, r1
 80112a8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80112aa:	6863      	ldr	r3, [r4, #4]
 80112ac:	f013 0f01 	tst.w	r3, #1
 80112b0:	f040 809e 	bne.w	80113f0 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80112b4:	6863      	ldr	r3, [r4, #4]
 80112b6:	f013 0f02 	tst.w	r3, #2
 80112ba:	f040 80a2 	bne.w	8011402 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80112be:	6863      	ldr	r3, [r4, #4]
 80112c0:	f013 0f04 	tst.w	r3, #4
 80112c4:	f040 80a8 	bne.w	8011418 <HAL_RCCEx_PeriphCLKConfig+0xa84>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80112c8:	6863      	ldr	r3, [r4, #4]
 80112ca:	f013 0f08 	tst.w	r3, #8
 80112ce:	f040 80ac 	bne.w	801142a <HAL_RCCEx_PeriphCLKConfig+0xa96>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80112d2:	6863      	ldr	r3, [r4, #4]
 80112d4:	f013 0f10 	tst.w	r3, #16
 80112d8:	f040 80b0 	bne.w	801143c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80112dc:	6863      	ldr	r3, [r4, #4]
 80112de:	f013 0f20 	tst.w	r3, #32
 80112e2:	f040 80b4 	bne.w	801144e <HAL_RCCEx_PeriphCLKConfig+0xaba>
  if (status == HAL_OK)
 80112e6:	1e30      	subs	r0, r6, #0
 80112e8:	bf18      	it	ne
 80112ea:	2001      	movne	r0, #1
}
 80112ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80112f0:	2102      	movs	r1, #2
 80112f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80112f6:	f7ff facb 	bl	8010890 <RCCEx_PLL3_Config>
 80112fa:	4605      	mov	r5, r0
        break;
 80112fc:	e6f8      	b.n	80110f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80112fe:	462e      	mov	r6, r5
 8011300:	e71c      	b.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011302:	2102      	movs	r1, #2
 8011304:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011308:	f7ff fac2 	bl	8010890 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 801130c:	2800      	cmp	r0, #0
 801130e:	bf18      	it	ne
 8011310:	2601      	movne	r6, #1
 8011312:	e71d      	b.n	8011150 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011314:	2102      	movs	r1, #2
 8011316:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801131a:	f7ff fab9 	bl	8010890 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 801131e:	2800      	cmp	r0, #0
 8011320:	bf18      	it	ne
 8011322:	2601      	movne	r6, #1
 8011324:	e726      	b.n	8011174 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011326:	2100      	movs	r1, #0
 8011328:	f104 0008 	add.w	r0, r4, #8
 801132c:	f7ff fa2e 	bl	801078c <RCCEx_PLL2_Config>
 8011330:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8011332:	b97d      	cbnz	r5, 8011354 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011334:	4a37      	ldr	r2, [pc, #220]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8011336:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8011338:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 801133c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8011340:	430b      	orrs	r3, r1
 8011342:	6593      	str	r3, [r2, #88]	@ 0x58
 8011344:	e731      	b.n	80111aa <HAL_RCCEx_PeriphCLKConfig+0x816>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011346:	2102      	movs	r1, #2
 8011348:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801134c:	f7ff faa0 	bl	8010890 <RCCEx_PLL3_Config>
 8011350:	4605      	mov	r5, r0
        break;
 8011352:	e7ee      	b.n	8011332 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8011354:	462e      	mov	r6, r5
 8011356:	e728      	b.n	80111aa <HAL_RCCEx_PeriphCLKConfig+0x816>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011358:	4a2e      	ldr	r2, [pc, #184]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 801135a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 801135c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011360:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8011362:	b97d      	cbnz	r5, 8011384 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011364:	4a2b      	ldr	r2, [pc, #172]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8011366:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8011368:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 801136c:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8011370:	430b      	orrs	r3, r1
 8011372:	6553      	str	r3, [r2, #84]	@ 0x54
 8011374:	e72d      	b.n	80111d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011376:	2101      	movs	r1, #1
 8011378:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801137c:	f7ff fa88 	bl	8010890 <RCCEx_PLL3_Config>
 8011380:	4605      	mov	r5, r0
        break;
 8011382:	e7ee      	b.n	8011362 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8011384:	462e      	mov	r6, r5
 8011386:	e724      	b.n	80111d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011388:	4a22      	ldr	r2, [pc, #136]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 801138a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 801138c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011390:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8011392:	b975      	cbnz	r5, 80113b2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011394:	4a1f      	ldr	r2, [pc, #124]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8011396:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8011398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801139c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 801139e:	430b      	orrs	r3, r1
 80113a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80113a2:	e724      	b.n	80111ee <HAL_RCCEx_PeriphCLKConfig+0x85a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80113a4:	2102      	movs	r1, #2
 80113a6:	f104 0008 	add.w	r0, r4, #8
 80113aa:	f7ff f9ef 	bl	801078c <RCCEx_PLL2_Config>
 80113ae:	4605      	mov	r5, r0
        break;
 80113b0:	e7ef      	b.n	8011392 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80113b2:	462e      	mov	r6, r5
 80113b4:	e71b      	b.n	80111ee <HAL_RCCEx_PeriphCLKConfig+0x85a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80113b6:	2102      	movs	r1, #2
 80113b8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80113bc:	f7ff fa68 	bl	8010890 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 80113c0:	2800      	cmp	r0, #0
 80113c2:	bf18      	it	ne
 80113c4:	2601      	movne	r6, #1
 80113c6:	e717      	b.n	80111f8 <HAL_RCCEx_PeriphCLKConfig+0x864>
    switch (PeriphClkInit->RngClockSelection)
 80113c8:	b133      	cbz	r3, 80113d8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80113ca:	2601      	movs	r6, #1
 80113cc:	e727      	b.n	801121e <HAL_RCCEx_PeriphCLKConfig+0x88a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113ce:	4a11      	ldr	r2, [pc, #68]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80113d0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80113d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80113d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80113d8:	b945      	cbnz	r5, 80113ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80113da:	4a0e      	ldr	r2, [pc, #56]	@ (8011414 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80113dc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80113de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80113e2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80113e6:	430b      	orrs	r3, r1
 80113e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80113ea:	e718      	b.n	801121e <HAL_RCCEx_PeriphCLKConfig+0x88a>
 80113ec:	462e      	mov	r6, r5
 80113ee:	e716      	b.n	801121e <HAL_RCCEx_PeriphCLKConfig+0x88a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80113f0:	2100      	movs	r1, #0
 80113f2:	f104 0008 	add.w	r0, r4, #8
 80113f6:	f7ff f9c9 	bl	801078c <RCCEx_PLL2_Config>
      status = ret;
 80113fa:	2800      	cmp	r0, #0
 80113fc:	bf18      	it	ne
 80113fe:	4606      	movne	r6, r0
 8011400:	e758      	b.n	80112b4 <HAL_RCCEx_PeriphCLKConfig+0x920>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011402:	2101      	movs	r1, #1
 8011404:	f104 0008 	add.w	r0, r4, #8
 8011408:	f7ff f9c0 	bl	801078c <RCCEx_PLL2_Config>
      status = ret;
 801140c:	2800      	cmp	r0, #0
 801140e:	bf18      	it	ne
 8011410:	4606      	movne	r6, r0
 8011412:	e754      	b.n	80112be <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8011414:	58024400 	.word	0x58024400
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011418:	2102      	movs	r1, #2
 801141a:	f104 0008 	add.w	r0, r4, #8
 801141e:	f7ff f9b5 	bl	801078c <RCCEx_PLL2_Config>
      status = ret;
 8011422:	2800      	cmp	r0, #0
 8011424:	bf18      	it	ne
 8011426:	4606      	movne	r6, r0
 8011428:	e74e      	b.n	80112c8 <HAL_RCCEx_PeriphCLKConfig+0x934>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801142a:	2100      	movs	r1, #0
 801142c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011430:	f7ff fa2e 	bl	8010890 <RCCEx_PLL3_Config>
      status = ret;
 8011434:	2800      	cmp	r0, #0
 8011436:	bf18      	it	ne
 8011438:	4606      	movne	r6, r0
 801143a:	e74a      	b.n	80112d2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801143c:	2101      	movs	r1, #1
 801143e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011442:	f7ff fa25 	bl	8010890 <RCCEx_PLL3_Config>
      status = ret;
 8011446:	2800      	cmp	r0, #0
 8011448:	bf18      	it	ne
 801144a:	4606      	movne	r6, r0
 801144c:	e746      	b.n	80112dc <HAL_RCCEx_PeriphCLKConfig+0x948>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801144e:	2102      	movs	r1, #2
 8011450:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011454:	f7ff fa1c 	bl	8010890 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8011458:	2800      	cmp	r0, #0
 801145a:	f43f af44 	beq.w	80112e6 <HAL_RCCEx_PeriphCLKConfig+0x952>
  return HAL_ERROR;
 801145e:	2001      	movs	r0, #1
 8011460:	e744      	b.n	80112ec <HAL_RCCEx_PeriphCLKConfig+0x958>
 8011462:	bf00      	nop

08011464 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8011464:	b308      	cbz	r0, 80114aa <HAL_SDRAM_Init+0x46>
{
 8011466:	b538      	push	{r3, r4, r5, lr}
 8011468:	460d      	mov	r5, r1
 801146a:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 801146c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8011470:	b1b3      	cbz	r3, 80114a0 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011472:	2302      	movs	r3, #2
 8011474:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8011478:	4621      	mov	r1, r4
 801147a:	f851 0b04 	ldr.w	r0, [r1], #4
 801147e:	f000 fa77 	bl	8011970 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8011482:	6862      	ldr	r2, [r4, #4]
 8011484:	4629      	mov	r1, r5
 8011486:	6820      	ldr	r0, [r4, #0]
 8011488:	f000 faaa 	bl	80119e0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801148c:	4a08      	ldr	r2, [pc, #32]	@ (80114b0 <HAL_SDRAM_Init+0x4c>)
 801148e:	6813      	ldr	r3, [r2, #0]
 8011490:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011494:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8011496:	2301      	movs	r3, #1
 8011498:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 801149c:	2000      	movs	r0, #0
}
 801149e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80114a0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80114a4:	f7f0 f890 	bl	80015c8 <HAL_SDRAM_MspInit>
 80114a8:	e7e3      	b.n	8011472 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 80114aa:	2001      	movs	r0, #1
}
 80114ac:	4770      	bx	lr
 80114ae:	bf00      	nop
 80114b0:	52004000 	.word	0x52004000

080114b4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 80114b4:	b510      	push	{r4, lr}
 80114b6:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 80114b8:	f7f0 f918 	bl	80016ec <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 80114bc:	6861      	ldr	r1, [r4, #4]
 80114be:	6820      	ldr	r0, [r4, #0]
 80114c0:	f000 fada 	bl	8011a78 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80114c4:	2000      	movs	r0, #0
 80114c6:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 80114ca:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 80114ce:	bd10      	pop	{r4, pc}

080114d0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80114d0:	b538      	push	{r3, r4, r5, lr}
 80114d2:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80114d4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80114d8:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80114da:	2802      	cmp	r0, #2
 80114dc:	d005      	beq.n	80114ea <HAL_SDRAM_SendCommand+0x1a>
 80114de:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80114e0:	f000 03fb 	and.w	r3, r0, #251	@ 0xfb
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d001      	beq.n	80114ec <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80114e8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80114ea:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80114ec:	2302      	movs	r3, #2
 80114ee:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80114f2:	6820      	ldr	r0, [r4, #0]
 80114f4:	f000 fad0 	bl	8011a98 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80114f8:	682b      	ldr	r3, [r5, #0]
 80114fa:	2b02      	cmp	r3, #2
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80114fc:	bf0c      	ite	eq
 80114fe:	2305      	moveq	r3, #5
      hsdram->State = HAL_SDRAM_STATE_READY;
 8011500:	2301      	movne	r3, #1
 8011502:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 8011506:	2000      	movs	r0, #0
 8011508:	e7ef      	b.n	80114ea <HAL_SDRAM_SendCommand+0x1a>

0801150a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801150a:	b510      	push	{r4, lr}
 801150c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 801150e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8011512:	b2d8      	uxtb	r0, r3
 8011514:	2802      	cmp	r0, #2
 8011516:	d005      	beq.n	8011524 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011518:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801151c:	b2db      	uxtb	r3, r3
 801151e:	2b01      	cmp	r3, #1
 8011520:	d001      	beq.n	8011526 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8011522:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8011524:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011526:	2302      	movs	r3, #2
 8011528:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801152c:	6820      	ldr	r0, [r4, #0]
 801152e:	f000 fac9 	bl	8011ac4 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011532:	2301      	movs	r3, #1
 8011534:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 8011538:	2000      	movs	r0, #0
 801153a:	e7f3      	b.n	8011524 <HAL_SDRAM_ProgramRefreshRate+0x1a>

0801153c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801153c:	4770      	bx	lr
	...

08011540 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011540:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8011544:	b2db      	uxtb	r3, r3
 8011546:	2b01      	cmp	r3, #1
 8011548:	d140      	bne.n	80115cc <HAL_TIM_Base_Start+0x8c>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801154a:	2302      	movs	r3, #2
 801154c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011550:	6802      	ldr	r2, [r0, #0]
 8011552:	4b20      	ldr	r3, [pc, #128]	@ (80115d4 <HAL_TIM_Base_Start+0x94>)
 8011554:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8011558:	bf18      	it	ne
 801155a:	429a      	cmpne	r2, r3
 801155c:	bf0c      	ite	eq
 801155e:	2301      	moveq	r3, #1
 8011560:	2300      	movne	r3, #0
 8011562:	491d      	ldr	r1, [pc, #116]	@ (80115d8 <HAL_TIM_Base_Start+0x98>)
 8011564:	428a      	cmp	r2, r1
 8011566:	bf08      	it	eq
 8011568:	f043 0301 	orreq.w	r3, r3, #1
 801156c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011570:	428a      	cmp	r2, r1
 8011572:	bf08      	it	eq
 8011574:	f043 0301 	orreq.w	r3, r3, #1
 8011578:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801157c:	428a      	cmp	r2, r1
 801157e:	bf08      	it	eq
 8011580:	f043 0301 	orreq.w	r3, r3, #1
 8011584:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8011588:	428a      	cmp	r2, r1
 801158a:	bf08      	it	eq
 801158c:	f043 0301 	orreq.w	r3, r3, #1
 8011590:	f5a1 416c 	sub.w	r1, r1, #60416	@ 0xec00
 8011594:	428a      	cmp	r2, r1
 8011596:	bf08      	it	eq
 8011598:	f043 0301 	orreq.w	r3, r3, #1
 801159c:	b913      	cbnz	r3, 80115a4 <HAL_TIM_Base_Start+0x64>
 801159e:	4b0f      	ldr	r3, [pc, #60]	@ (80115dc <HAL_TIM_Base_Start+0x9c>)
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d10d      	bne.n	80115c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80115a4:	6891      	ldr	r1, [r2, #8]
 80115a6:	4b0e      	ldr	r3, [pc, #56]	@ (80115e0 <HAL_TIM_Base_Start+0xa0>)
 80115a8:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80115aa:	2b06      	cmp	r3, #6
 80115ac:	d010      	beq.n	80115d0 <HAL_TIM_Base_Start+0x90>
 80115ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80115b2:	d00d      	beq.n	80115d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80115b4:	6813      	ldr	r3, [r2, #0]
 80115b6:	f043 0301 	orr.w	r3, r3, #1
 80115ba:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80115bc:	2000      	movs	r0, #0
 80115be:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80115c0:	6813      	ldr	r3, [r2, #0]
 80115c2:	f043 0301 	orr.w	r3, r3, #1
 80115c6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80115c8:	2000      	movs	r0, #0
 80115ca:	4770      	bx	lr
    return HAL_ERROR;
 80115cc:	2001      	movs	r0, #1
 80115ce:	4770      	bx	lr
  return HAL_OK;
 80115d0:	2000      	movs	r0, #0
}
 80115d2:	4770      	bx	lr
 80115d4:	40010000 	.word	0x40010000
 80115d8:	40000400 	.word	0x40000400
 80115dc:	40014000 	.word	0x40014000
 80115e0:	00010007 	.word	0x00010007

080115e4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80115e4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80115e8:	b2db      	uxtb	r3, r3
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d145      	bne.n	801167a <HAL_TIM_Base_Start_IT+0x96>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80115ee:	2302      	movs	r3, #2
 80115f0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80115f4:	6802      	ldr	r2, [r0, #0]
 80115f6:	68d3      	ldr	r3, [r2, #12]
 80115f8:	f043 0301 	orr.w	r3, r3, #1
 80115fc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115fe:	6802      	ldr	r2, [r0, #0]
 8011600:	4b20      	ldr	r3, [pc, #128]	@ (8011684 <HAL_TIM_Base_Start_IT+0xa0>)
 8011602:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8011606:	bf18      	it	ne
 8011608:	429a      	cmpne	r2, r3
 801160a:	bf0c      	ite	eq
 801160c:	2301      	moveq	r3, #1
 801160e:	2300      	movne	r3, #0
 8011610:	491d      	ldr	r1, [pc, #116]	@ (8011688 <HAL_TIM_Base_Start_IT+0xa4>)
 8011612:	428a      	cmp	r2, r1
 8011614:	bf08      	it	eq
 8011616:	f043 0301 	orreq.w	r3, r3, #1
 801161a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801161e:	428a      	cmp	r2, r1
 8011620:	bf08      	it	eq
 8011622:	f043 0301 	orreq.w	r3, r3, #1
 8011626:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801162a:	428a      	cmp	r2, r1
 801162c:	bf08      	it	eq
 801162e:	f043 0301 	orreq.w	r3, r3, #1
 8011632:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8011636:	428a      	cmp	r2, r1
 8011638:	bf08      	it	eq
 801163a:	f043 0301 	orreq.w	r3, r3, #1
 801163e:	f5a1 416c 	sub.w	r1, r1, #60416	@ 0xec00
 8011642:	428a      	cmp	r2, r1
 8011644:	bf08      	it	eq
 8011646:	f043 0301 	orreq.w	r3, r3, #1
 801164a:	b913      	cbnz	r3, 8011652 <HAL_TIM_Base_Start_IT+0x6e>
 801164c:	4b0f      	ldr	r3, [pc, #60]	@ (801168c <HAL_TIM_Base_Start_IT+0xa8>)
 801164e:	429a      	cmp	r2, r3
 8011650:	d10d      	bne.n	801166e <HAL_TIM_Base_Start_IT+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011652:	6891      	ldr	r1, [r2, #8]
 8011654:	4b0e      	ldr	r3, [pc, #56]	@ (8011690 <HAL_TIM_Base_Start_IT+0xac>)
 8011656:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011658:	2b06      	cmp	r3, #6
 801165a:	d010      	beq.n	801167e <HAL_TIM_Base_Start_IT+0x9a>
 801165c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011660:	d00d      	beq.n	801167e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8011662:	6813      	ldr	r3, [r2, #0]
 8011664:	f043 0301 	orr.w	r3, r3, #1
 8011668:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 801166a:	2000      	movs	r0, #0
 801166c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 801166e:	6813      	ldr	r3, [r2, #0]
 8011670:	f043 0301 	orr.w	r3, r3, #1
 8011674:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8011676:	2000      	movs	r0, #0
 8011678:	4770      	bx	lr
    return HAL_ERROR;
 801167a:	2001      	movs	r0, #1
 801167c:	4770      	bx	lr
  return HAL_OK;
 801167e:	2000      	movs	r0, #0
}
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop
 8011684:	40010000 	.word	0x40010000
 8011688:	40000400 	.word	0x40000400
 801168c:	40014000 	.word	0x40014000
 8011690:	00010007 	.word	0x00010007

08011694 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011694:	4770      	bx	lr

08011696 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011696:	4770      	bx	lr

08011698 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011698:	4770      	bx	lr

0801169a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801169a:	4770      	bx	lr

0801169c <HAL_TIM_IRQHandler>:
{
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80116a0:	6803      	ldr	r3, [r0, #0]
 80116a2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80116a4:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80116a6:	f015 0f02 	tst.w	r5, #2
 80116aa:	d010      	beq.n	80116ce <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80116ac:	f016 0f02 	tst.w	r6, #2
 80116b0:	d00d      	beq.n	80116ce <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80116b2:	f06f 0202 	mvn.w	r2, #2
 80116b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80116b8:	2301      	movs	r3, #1
 80116ba:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80116bc:	6803      	ldr	r3, [r0, #0]
 80116be:	699b      	ldr	r3, [r3, #24]
 80116c0:	f013 0f03 	tst.w	r3, #3
 80116c4:	d05e      	beq.n	8011784 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80116c6:	f7ff ffe6 	bl	8011696 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116ca:	2300      	movs	r3, #0
 80116cc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80116ce:	f015 0f04 	tst.w	r5, #4
 80116d2:	d012      	beq.n	80116fa <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80116d4:	f016 0f04 	tst.w	r6, #4
 80116d8:	d00f      	beq.n	80116fa <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80116da:	6823      	ldr	r3, [r4, #0]
 80116dc:	f06f 0204 	mvn.w	r2, #4
 80116e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80116e2:	2302      	movs	r3, #2
 80116e4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80116e6:	6823      	ldr	r3, [r4, #0]
 80116e8:	699b      	ldr	r3, [r3, #24]
 80116ea:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80116ee:	d04f      	beq.n	8011790 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80116f0:	4620      	mov	r0, r4
 80116f2:	f7ff ffd0 	bl	8011696 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116f6:	2300      	movs	r3, #0
 80116f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80116fa:	f015 0f08 	tst.w	r5, #8
 80116fe:	d012      	beq.n	8011726 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8011700:	f016 0f08 	tst.w	r6, #8
 8011704:	d00f      	beq.n	8011726 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8011706:	6823      	ldr	r3, [r4, #0]
 8011708:	f06f 0208 	mvn.w	r2, #8
 801170c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801170e:	2304      	movs	r3, #4
 8011710:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011712:	6823      	ldr	r3, [r4, #0]
 8011714:	69db      	ldr	r3, [r3, #28]
 8011716:	f013 0f03 	tst.w	r3, #3
 801171a:	d040      	beq.n	801179e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 801171c:	4620      	mov	r0, r4
 801171e:	f7ff ffba 	bl	8011696 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011722:	2300      	movs	r3, #0
 8011724:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011726:	f015 0f10 	tst.w	r5, #16
 801172a:	d012      	beq.n	8011752 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801172c:	f016 0f10 	tst.w	r6, #16
 8011730:	d00f      	beq.n	8011752 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011732:	6823      	ldr	r3, [r4, #0]
 8011734:	f06f 0210 	mvn.w	r2, #16
 8011738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801173a:	2308      	movs	r3, #8
 801173c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801173e:	6823      	ldr	r3, [r4, #0]
 8011740:	69db      	ldr	r3, [r3, #28]
 8011742:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8011746:	d031      	beq.n	80117ac <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8011748:	4620      	mov	r0, r4
 801174a:	f7ff ffa4 	bl	8011696 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801174e:	2300      	movs	r3, #0
 8011750:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011752:	f015 0f01 	tst.w	r5, #1
 8011756:	d002      	beq.n	801175e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8011758:	f016 0f01 	tst.w	r6, #1
 801175c:	d12d      	bne.n	80117ba <HAL_TIM_IRQHandler+0x11e>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801175e:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 8011762:	d044      	beq.n	80117ee <HAL_TIM_IRQHandler+0x152>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011764:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8011768:	d12f      	bne.n	80117ca <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801176a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 801176e:	d002      	beq.n	8011776 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011770:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8011774:	d142      	bne.n	80117fc <HAL_TIM_IRQHandler+0x160>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011776:	f015 0f20 	tst.w	r5, #32
 801177a:	d002      	beq.n	8011782 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801177c:	f016 0f20 	tst.w	r6, #32
 8011780:	d144      	bne.n	801180c <HAL_TIM_IRQHandler+0x170>
}
 8011782:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011784:	f7ff ff86 	bl	8011694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011788:	4620      	mov	r0, r4
 801178a:	f7ff ff85 	bl	8011698 <HAL_TIM_PWM_PulseFinishedCallback>
 801178e:	e79c      	b.n	80116ca <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011790:	4620      	mov	r0, r4
 8011792:	f7ff ff7f 	bl	8011694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011796:	4620      	mov	r0, r4
 8011798:	f7ff ff7e 	bl	8011698 <HAL_TIM_PWM_PulseFinishedCallback>
 801179c:	e7ab      	b.n	80116f6 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801179e:	4620      	mov	r0, r4
 80117a0:	f7ff ff78 	bl	8011694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80117a4:	4620      	mov	r0, r4
 80117a6:	f7ff ff77 	bl	8011698 <HAL_TIM_PWM_PulseFinishedCallback>
 80117aa:	e7ba      	b.n	8011722 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80117ac:	4620      	mov	r0, r4
 80117ae:	f7ff ff71 	bl	8011694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80117b2:	4620      	mov	r0, r4
 80117b4:	f7ff ff70 	bl	8011698 <HAL_TIM_PWM_PulseFinishedCallback>
 80117b8:	e7c9      	b.n	801174e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80117ba:	6823      	ldr	r3, [r4, #0]
 80117bc:	f06f 0201 	mvn.w	r2, #1
 80117c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80117c2:	4620      	mov	r0, r4
 80117c4:	f7ef fc64 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
 80117c8:	e7c9      	b.n	801175e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80117ca:	6823      	ldr	r3, [r4, #0]
 80117cc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80117d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80117d2:	4620      	mov	r0, r4
 80117d4:	f000 f8c9 	bl	801196a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80117d8:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80117dc:	d0c5      	beq.n	801176a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80117e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80117e6:	4620      	mov	r0, r4
 80117e8:	f000 f8c0 	bl	801196c <HAL_TIMEx_Break2Callback>
 80117ec:	e7bd      	b.n	801176a <HAL_TIM_IRQHandler+0xce>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80117ee:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80117f2:	d0ba      	beq.n	801176a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80117f4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80117f8:	d0b7      	beq.n	801176a <HAL_TIM_IRQHandler+0xce>
 80117fa:	e7f0      	b.n	80117de <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80117fc:	6823      	ldr	r3, [r4, #0]
 80117fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011802:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8011804:	4620      	mov	r0, r4
 8011806:	f7ff ff48 	bl	801169a <HAL_TIM_TriggerCallback>
 801180a:	e7b4      	b.n	8011776 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801180c:	6823      	ldr	r3, [r4, #0]
 801180e:	f06f 0220 	mvn.w	r2, #32
 8011812:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8011814:	4620      	mov	r0, r4
 8011816:	f000 f8a7 	bl	8011968 <HAL_TIMEx_CommutCallback>
}
 801181a:	e7b2      	b.n	8011782 <HAL_TIM_IRQHandler+0xe6>

0801181c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801181c:	b430      	push	{r4, r5}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801181e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011820:	4a33      	ldr	r2, [pc, #204]	@ (80118f0 <TIM_Base_SetConfig+0xd4>)
 8011822:	4290      	cmp	r0, r2
 8011824:	bf14      	ite	ne
 8011826:	2200      	movne	r2, #0
 8011828:	2201      	moveq	r2, #1
 801182a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801182e:	d035      	beq.n	801189c <TIM_Base_SetConfig+0x80>
 8011830:	bba2      	cbnz	r2, 801189c <TIM_Base_SetConfig+0x80>
 8011832:	4c30      	ldr	r4, [pc, #192]	@ (80118f4 <TIM_Base_SetConfig+0xd8>)
 8011834:	42a0      	cmp	r0, r4
 8011836:	d00b      	beq.n	8011850 <TIM_Base_SetConfig+0x34>
 8011838:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 801183c:	42a0      	cmp	r0, r4
 801183e:	d007      	beq.n	8011850 <TIM_Base_SetConfig+0x34>
 8011840:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8011844:	42a0      	cmp	r0, r4
 8011846:	d003      	beq.n	8011850 <TIM_Base_SetConfig+0x34>
 8011848:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 801184c:	42a0      	cmp	r0, r4
 801184e:	d10a      	bne.n	8011866 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8011854:	684c      	ldr	r4, [r1, #4]
 8011856:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011858:	4c26      	ldr	r4, [pc, #152]	@ (80118f4 <TIM_Base_SetConfig+0xd8>)
 801185a:	42a0      	cmp	r0, r4
 801185c:	d022      	beq.n	80118a4 <TIM_Base_SetConfig+0x88>
 801185e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8011862:	42a0      	cmp	r0, r4
 8011864:	d01e      	beq.n	80118a4 <TIM_Base_SetConfig+0x88>
 8011866:	4c24      	ldr	r4, [pc, #144]	@ (80118f8 <TIM_Base_SetConfig+0xdc>)
 8011868:	42a0      	cmp	r0, r4
 801186a:	d01b      	beq.n	80118a4 <TIM_Base_SetConfig+0x88>
 801186c:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8011870:	42a0      	cmp	r0, r4
 8011872:	d017      	beq.n	80118a4 <TIM_Base_SetConfig+0x88>
 8011874:	4d21      	ldr	r5, [pc, #132]	@ (80118fc <TIM_Base_SetConfig+0xe0>)
 8011876:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 801187a:	42a0      	cmp	r0, r4
 801187c:	bf18      	it	ne
 801187e:	42a8      	cmpne	r0, r5
 8011880:	d010      	beq.n	80118a4 <TIM_Base_SetConfig+0x88>
 8011882:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8011886:	42a0      	cmp	r0, r4
 8011888:	d00c      	beq.n	80118a4 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801188a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801188e:	694a      	ldr	r2, [r1, #20]
 8011890:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011892:	688a      	ldr	r2, [r1, #8]
 8011894:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011896:	680a      	ldr	r2, [r1, #0]
 8011898:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801189a:	e020      	b.n	80118de <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801189c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80118a0:	684c      	ldr	r4, [r1, #4]
 80118a2:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80118a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80118a8:	68cc      	ldr	r4, [r1, #12]
 80118aa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80118ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80118b0:	694c      	ldr	r4, [r1, #20]
 80118b2:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 80118b4:	688c      	ldr	r4, [r1, #8]
 80118b6:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80118b8:	680c      	ldr	r4, [r1, #0]
 80118ba:	6284      	str	r4, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80118bc:	4c10      	ldr	r4, [pc, #64]	@ (8011900 <TIM_Base_SetConfig+0xe4>)
 80118be:	42a0      	cmp	r0, r4
 80118c0:	d00b      	beq.n	80118da <TIM_Base_SetConfig+0xbe>
 80118c2:	b952      	cbnz	r2, 80118da <TIM_Base_SetConfig+0xbe>
 80118c4:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 80118c8:	4a0e      	ldr	r2, [pc, #56]	@ (8011904 <TIM_Base_SetConfig+0xe8>)
 80118ca:	4290      	cmp	r0, r2
 80118cc:	bf18      	it	ne
 80118ce:	42a0      	cmpne	r0, r4
 80118d0:	d003      	beq.n	80118da <TIM_Base_SetConfig+0xbe>
 80118d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80118d6:	4290      	cmp	r0, r2
 80118d8:	d101      	bne.n	80118de <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80118da:	690a      	ldr	r2, [r1, #16]
 80118dc:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80118de:	6802      	ldr	r2, [r0, #0]
 80118e0:	f042 0204 	orr.w	r2, r2, #4
 80118e4:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118e6:	2201      	movs	r2, #1
 80118e8:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 80118ea:	6003      	str	r3, [r0, #0]
}
 80118ec:	bc30      	pop	{r4, r5}
 80118ee:	4770      	bx	lr
 80118f0:	40010000 	.word	0x40010000
 80118f4:	40000400 	.word	0x40000400
 80118f8:	40000c00 	.word	0x40000c00
 80118fc:	40014000 	.word	0x40014000
 8011900:	40010400 	.word	0x40010400
 8011904:	40014400 	.word	0x40014400

08011908 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8011908:	b360      	cbz	r0, 8011964 <HAL_TIM_Base_Init+0x5c>
{
 801190a:	b510      	push	{r4, lr}
 801190c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 801190e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8011912:	b313      	cbz	r3, 801195a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8011914:	2302      	movs	r3, #2
 8011916:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801191a:	4621      	mov	r1, r4
 801191c:	f851 0b04 	ldr.w	r0, [r1], #4
 8011920:	f7ff ff7c 	bl	801181c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011924:	2301      	movs	r3, #1
 8011926:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801192a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 801192e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8011932:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8011936:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801193a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801193e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011942:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8011946:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801194a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 801194e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011952:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8011956:	2000      	movs	r0, #0
}
 8011958:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 801195a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 801195e:	f7ff fded 	bl	801153c <HAL_TIM_Base_MspInit>
 8011962:	e7d7      	b.n	8011914 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8011964:	2001      	movs	r0, #1
}
 8011966:	4770      	bx	lr

08011968 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011968:	4770      	bx	lr

0801196a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801196a:	4770      	bx	lr

0801196c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801196c:	4770      	bx	lr
	...

08011970 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011970:	680b      	ldr	r3, [r1, #0]
 8011972:	b9c3      	cbnz	r3, 80119a6 <FMC_SDRAM_Init+0x36>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011974:	6802      	ldr	r2, [r0, #0]
 8011976:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801197a:	4013      	ands	r3, r2
 801197c:	684a      	ldr	r2, [r1, #4]
 801197e:	4313      	orrs	r3, r2
 8011980:	688a      	ldr	r2, [r1, #8]
 8011982:	4313      	orrs	r3, r2
 8011984:	68ca      	ldr	r2, [r1, #12]
 8011986:	4313      	orrs	r3, r2
 8011988:	690a      	ldr	r2, [r1, #16]
 801198a:	4313      	orrs	r3, r2
 801198c:	694a      	ldr	r2, [r1, #20]
 801198e:	4313      	orrs	r3, r2
 8011990:	698a      	ldr	r2, [r1, #24]
 8011992:	4313      	orrs	r3, r2
 8011994:	69ca      	ldr	r2, [r1, #28]
 8011996:	4313      	orrs	r3, r2
 8011998:	6a0a      	ldr	r2, [r1, #32]
 801199a:	4313      	orrs	r3, r2
 801199c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801199e:	4313      	orrs	r3, r2
 80119a0:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80119a2:	2000      	movs	r0, #0
 80119a4:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80119a6:	6803      	ldr	r3, [r0, #0]
 80119a8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80119ac:	69ca      	ldr	r2, [r1, #28]
 80119ae:	4313      	orrs	r3, r2
 80119b0:	6a0a      	ldr	r2, [r1, #32]
 80119b2:	4313      	orrs	r3, r2
 80119b4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80119b6:	4313      	orrs	r3, r2
 80119b8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80119ba:	6842      	ldr	r2, [r0, #4]
 80119bc:	4b07      	ldr	r3, [pc, #28]	@ (80119dc <FMC_SDRAM_Init+0x6c>)
 80119be:	4013      	ands	r3, r2
 80119c0:	684a      	ldr	r2, [r1, #4]
 80119c2:	4313      	orrs	r3, r2
 80119c4:	688a      	ldr	r2, [r1, #8]
 80119c6:	4313      	orrs	r3, r2
 80119c8:	68ca      	ldr	r2, [r1, #12]
 80119ca:	4313      	orrs	r3, r2
 80119cc:	690a      	ldr	r2, [r1, #16]
 80119ce:	4313      	orrs	r3, r2
 80119d0:	694a      	ldr	r2, [r1, #20]
 80119d2:	4313      	orrs	r3, r2
 80119d4:	698a      	ldr	r2, [r1, #24]
 80119d6:	4313      	orrs	r3, r2
 80119d8:	6043      	str	r3, [r0, #4]
 80119da:	e7e2      	b.n	80119a2 <FMC_SDRAM_Init+0x32>
 80119dc:	ffff8000 	.word	0xffff8000

080119e0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80119e0:	bb02      	cbnz	r2, 8011a24 <FMC_SDRAM_Timing_Init+0x44>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80119e2:	6883      	ldr	r3, [r0, #8]
 80119e4:	684a      	ldr	r2, [r1, #4]
 80119e6:	3a01      	subs	r2, #1
 80119e8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80119ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80119f0:	680a      	ldr	r2, [r1, #0]
 80119f2:	3a01      	subs	r2, #1
 80119f4:	4313      	orrs	r3, r2
 80119f6:	688a      	ldr	r2, [r1, #8]
 80119f8:	3a01      	subs	r2, #1
 80119fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80119fe:	68ca      	ldr	r2, [r1, #12]
 8011a00:	3a01      	subs	r2, #1
 8011a02:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8011a06:	690a      	ldr	r2, [r1, #16]
 8011a08:	3a01      	subs	r2, #1
 8011a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a0e:	694a      	ldr	r2, [r1, #20]
 8011a10:	3a01      	subs	r2, #1
 8011a12:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8011a16:	698a      	ldr	r2, [r1, #24]
 8011a18:	3a01      	subs	r2, #1
 8011a1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011a1e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8011a20:	2000      	movs	r0, #0
 8011a22:	4770      	bx	lr
{
 8011a24:	b410      	push	{r4}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011a26:	6884      	ldr	r4, [r0, #8]
 8011a28:	68cb      	ldr	r3, [r1, #12]
 8011a2a:	1e5a      	subs	r2, r3, #1
 8011a2c:	4b11      	ldr	r3, [pc, #68]	@ (8011a74 <FMC_SDRAM_Timing_Init+0x94>)
 8011a2e:	4023      	ands	r3, r4
 8011a30:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8011a34:	694a      	ldr	r2, [r1, #20]
 8011a36:	3a01      	subs	r2, #1
 8011a38:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8011a3c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011a3e:	68c3      	ldr	r3, [r0, #12]
 8011a40:	684a      	ldr	r2, [r1, #4]
 8011a42:	3a01      	subs	r2, #1
 8011a44:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011a48:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011a4c:	680a      	ldr	r2, [r1, #0]
 8011a4e:	3a01      	subs	r2, #1
 8011a50:	4313      	orrs	r3, r2
 8011a52:	688a      	ldr	r2, [r1, #8]
 8011a54:	3a01      	subs	r2, #1
 8011a56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011a5a:	690a      	ldr	r2, [r1, #16]
 8011a5c:	3a01      	subs	r2, #1
 8011a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a62:	698a      	ldr	r2, [r1, #24]
 8011a64:	3a01      	subs	r2, #1
 8011a66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011a6a:	60c3      	str	r3, [r0, #12]
}
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a72:	4770      	bx	lr
 8011a74:	ff0f0fff 	.word	0xff0f0fff

08011a78 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8011a78:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8011a7a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8011a7e:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 8011a82:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8011a86:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8011a8a:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8011a90:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8011a92:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 8011a94:	4770      	bx	lr
	...

08011a98 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011a98:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011a9a:	6904      	ldr	r4, [r0, #16]
 8011a9c:	680b      	ldr	r3, [r1, #0]
 8011a9e:	684a      	ldr	r2, [r1, #4]
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	68ca      	ldr	r2, [r1, #12]
 8011aa4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8011aa8:	4a05      	ldr	r2, [pc, #20]	@ (8011ac0 <FMC_SDRAM_SendCommand+0x28>)
 8011aaa:	4022      	ands	r2, r4
 8011aac:	4313      	orrs	r3, r2
 8011aae:	688a      	ldr	r2, [r1, #8]
 8011ab0:	3a01      	subs	r2, #1
 8011ab2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8011ab6:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8011ab8:	2000      	movs	r0, #0
 8011aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011abe:	4770      	bx	lr
 8011ac0:	ffc00000 	.word	0xffc00000

08011ac4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8011ac4:	6942      	ldr	r2, [r0, #20]
 8011ac6:	4b03      	ldr	r3, [pc, #12]	@ (8011ad4 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8011ac8:	4013      	ands	r3, r2
 8011aca:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8011ace:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	4770      	bx	lr
 8011ad4:	ffffc001 	.word	0xffffc001

08011ad8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011ad8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8011ada:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011ade:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011ae0:	f002 f826 	bl	8013b30 <xTaskGetSchedulerState>
 8011ae4:	2801      	cmp	r0, #1
 8011ae6:	d100      	bne.n	8011aea <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8011ae8:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8011aea:	f000 fccb 	bl	8012484 <xPortSysTickHandler>
}
 8011aee:	e7fb      	b.n	8011ae8 <SysTick_Handler+0x10>

08011af0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011af0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8011af4:	b92b      	cbnz	r3, 8011b02 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8011af6:	4b06      	ldr	r3, [pc, #24]	@ (8011b10 <osKernelInitialize+0x20>)
 8011af8:	6818      	ldr	r0, [r3, #0]
 8011afa:	b928      	cbnz	r0, 8011b08 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011afc:	2201      	movs	r2, #1
 8011afe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011b00:	4770      	bx	lr
    stat = osErrorISR;
 8011b02:	f06f 0005 	mvn.w	r0, #5
 8011b06:	4770      	bx	lr
    } else {
      stat = osError;
 8011b08:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	24049478 	.word	0x24049478

08011b14 <osKernelStart>:
 8011b14:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b18:	b973      	cbnz	r3, 8011b38 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8011b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8011b44 <osKernelStart+0x30>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	d10d      	bne.n	8011b3e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8011b22:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b24:	2400      	movs	r4, #0
 8011b26:	4b08      	ldr	r3, [pc, #32]	@ (8011b48 <osKernelStart+0x34>)
 8011b28:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011b2a:	4b06      	ldr	r3, [pc, #24]	@ (8011b44 <osKernelStart+0x30>)
 8011b2c:	2202      	movs	r2, #2
 8011b2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011b30:	f001 fe82 	bl	8013838 <vTaskStartScheduler>
      stat = osOK;
 8011b34:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8011b36:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8011b38:	f06f 0005 	mvn.w	r0, #5
 8011b3c:	4770      	bx	lr
      stat = osError;
 8011b3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011b42:	4770      	bx	lr
 8011b44:	24049478 	.word	0x24049478
 8011b48:	e000ed00 	.word	0xe000ed00

08011b4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b4e:	b087      	sub	sp, #28
 8011b50:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011b52:	2200      	movs	r2, #0
 8011b54:	9205      	str	r2, [sp, #20]
 8011b56:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8011b5a:	b320      	cbz	r0, 8011ba6 <osThreadNew+0x5a>
 8011b5c:	bb1b      	cbnz	r3, 8011ba6 <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8011b5e:	2c00      	cmp	r4, #0
 8011b60:	d02e      	beq.n	8011bc0 <osThreadNew+0x74>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8011b62:	69a3      	ldr	r3, [r4, #24]
 8011b64:	b12b      	cbz	r3, 8011b72 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8011b66:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	2b37      	cmp	r3, #55	@ 0x37
 8011b6c:	d902      	bls.n	8011b74 <osThreadNew+0x28>
        return (NULL);
 8011b6e:	2000      	movs	r0, #0
 8011b70:	e01a      	b.n	8011ba8 <osThreadNew+0x5c>
 8011b72:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011b74:	6863      	ldr	r3, [r4, #4]
 8011b76:	f013 0f01 	tst.w	r3, #1
 8011b7a:	d130      	bne.n	8011bde <osThreadNew+0x92>
      }

      if (attr->stack_size > 0U) {
 8011b7c:	6963      	ldr	r3, [r4, #20]
 8011b7e:	b1ab      	cbz	r3, 8011bac <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011b80:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8011b82:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011b86:	68a6      	ldr	r6, [r4, #8]
 8011b88:	b196      	cbz	r6, 8011bb0 <osThreadNew+0x64>
 8011b8a:	68e7      	ldr	r7, [r4, #12]
 8011b8c:	2f5f      	cmp	r7, #95	@ 0x5f
 8011b8e:	d90a      	bls.n	8011ba6 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011b90:	6924      	ldr	r4, [r4, #16]
 8011b92:	b143      	cbz	r3, 8011ba6 <osThreadNew+0x5a>
 8011b94:	b13c      	cbz	r4, 8011ba6 <osThreadNew+0x5a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011b96:	9602      	str	r6, [sp, #8]
 8011b98:	9401      	str	r4, [sp, #4]
 8011b9a:	9500      	str	r5, [sp, #0]
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	4661      	mov	r1, ip
 8011ba0:	f001 fc94 	bl	80134cc <xTaskCreateStatic>
 8011ba4:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011ba6:	9805      	ldr	r0, [sp, #20]
}
 8011ba8:	b007      	add	sp, #28
 8011baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8011bac:	2280      	movs	r2, #128	@ 0x80
 8011bae:	e7e8      	b.n	8011b82 <osThreadNew+0x36>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011bb0:	68e3      	ldr	r3, [r4, #12]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1f7      	bne.n	8011ba6 <osThreadNew+0x5a>
      if (mem == 0) {
 8011bb6:	6923      	ldr	r3, [r4, #16]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d1f4      	bne.n	8011ba6 <osThreadNew+0x5a>
 8011bbc:	4664      	mov	r4, ip
 8011bbe:	e001      	b.n	8011bc4 <osThreadNew+0x78>
    prio  = (UBaseType_t)osPriorityNormal;
 8011bc0:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8011bc2:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011bc4:	ab05      	add	r3, sp, #20
 8011bc6:	9301      	str	r3, [sp, #4]
 8011bc8:	9500      	str	r5, [sp, #0]
 8011bca:	460b      	mov	r3, r1
 8011bcc:	b292      	uxth	r2, r2
 8011bce:	4621      	mov	r1, r4
 8011bd0:	f001 fcb7 	bl	8013542 <xTaskCreate>
 8011bd4:	2801      	cmp	r0, #1
 8011bd6:	d0e6      	beq.n	8011ba6 <osThreadNew+0x5a>
            hTask = NULL;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	9305      	str	r3, [sp, #20]
 8011bdc:	e7e3      	b.n	8011ba6 <osThreadNew+0x5a>
        return (NULL);
 8011bde:	2000      	movs	r0, #0
 8011be0:	e7e2      	b.n	8011ba8 <osThreadNew+0x5c>

08011be2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011be2:	b570      	push	{r4, r5, r6, lr}
 8011be4:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8011be8:	2e00      	cmp	r6, #0
 8011bea:	d136      	bne.n	8011c5a <osMutexNew+0x78>
 8011bec:	4604      	mov	r4, r0
    if (attr != NULL) {
 8011bee:	b378      	cbz	r0, 8011c50 <osMutexNew+0x6e>
      type = attr->attr_bits;
 8011bf0:	6843      	ldr	r3, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011bf2:	f013 0f08 	tst.w	r3, #8
 8011bf6:	d133      	bne.n	8011c60 <osMutexNew+0x7e>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011bf8:	f003 0301 	and.w	r3, r3, #1
 8011bfc:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011bfe:	6881      	ldr	r1, [r0, #8]
 8011c00:	b121      	cbz	r1, 8011c0c <osMutexNew+0x2a>
 8011c02:	68c2      	ldr	r2, [r0, #12]
 8011c04:	2a4f      	cmp	r2, #79	@ 0x4f
 8011c06:	d80d      	bhi.n	8011c24 <osMutexNew+0x42>
  hMutex = NULL;
 8011c08:	2500      	movs	r5, #0
 8011c0a:	e027      	b.n	8011c5c <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8011c0c:	68c2      	ldr	r2, [r0, #12]
 8011c0e:	2a00      	cmp	r2, #0
 8011c10:	d1fa      	bne.n	8011c08 <osMutexNew+0x26>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8011c12:	b1eb      	cbz	r3, 8011c50 <osMutexNew+0x6e>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8011c14:	2004      	movs	r0, #4
 8011c16:	f000 ff80 	bl	8012b1a <xQueueCreateMutex>
 8011c1a:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011c1c:	2d00      	cmp	r5, #0
 8011c1e:	d0f3      	beq.n	8011c08 <osMutexNew+0x26>
        if (attr != NULL) {
 8011c20:	b93c      	cbnz	r4, 8011c32 <osMutexNew+0x50>
 8011c22:	e007      	b.n	8011c34 <osMutexNew+0x52>
          if (rmtx != 0U) {
 8011c24:	b17b      	cbz	r3, 8011c46 <osMutexNew+0x64>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011c26:	2004      	movs	r0, #4
 8011c28:	f000 ff82 	bl	8012b30 <xQueueCreateMutexStatic>
 8011c2c:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8011c2e:	2d00      	cmp	r5, #0
 8011c30:	d0ea      	beq.n	8011c08 <osMutexNew+0x26>
          name = attr->name;
 8011c32:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8011c34:	4621      	mov	r1, r4
 8011c36:	4628      	mov	r0, r5
 8011c38:	f001 fa62 	bl	8013100 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011c3c:	b175      	cbz	r5, 8011c5c <osMutexNew+0x7a>
 8011c3e:	b16e      	cbz	r6, 8011c5c <osMutexNew+0x7a>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011c40:	f045 0501 	orr.w	r5, r5, #1
 8011c44:	e00a      	b.n	8011c5c <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011c46:	2001      	movs	r0, #1
 8011c48:	f000 ff72 	bl	8012b30 <xQueueCreateMutexStatic>
 8011c4c:	4605      	mov	r5, r0
 8011c4e:	e7ee      	b.n	8011c2e <osMutexNew+0x4c>
              hMutex = xSemaphoreCreateMutex ();
 8011c50:	2001      	movs	r0, #1
 8011c52:	f000 ff62 	bl	8012b1a <xQueueCreateMutex>
 8011c56:	4605      	mov	r5, r0
 8011c58:	e7e0      	b.n	8011c1c <osMutexNew+0x3a>
  hMutex = NULL;
 8011c5a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8011c60:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8011c62:	e7fb      	b.n	8011c5c <osMutexNew+0x7a>

08011c64 <osMutexAcquire>:
 8011c64:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8011c68:	bb0a      	cbnz	r2, 8011cae <osMutexAcquire+0x4a>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011c6a:	b510      	push	{r4, lr}
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	460c      	mov	r4, r1
 8011c70:	f020 0001 	bic.w	r0, r0, #1
 8011c74:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d91b      	bls.n	8011cb4 <osMutexAcquire+0x50>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8011c7c:	b159      	cbz	r1, 8011c96 <osMutexAcquire+0x32>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011c7e:	4621      	mov	r1, r4
 8011c80:	f001 f9c8 	bl	8013014 <xQueueTakeMutexRecursive>
 8011c84:	2801      	cmp	r0, #1
 8011c86:	d018      	beq.n	8011cba <osMutexAcquire+0x56>
        if (timeout != 0U) {
          stat = osErrorTimeout;
 8011c88:	2c00      	cmp	r4, #0
 8011c8a:	bf0c      	ite	eq
 8011c8c:	f06f 0002 	mvneq.w	r0, #2
 8011c90:	f06f 0001 	mvnne.w	r0, #1
      }
    }
  }

  return (stat);
}
 8011c94:	bd10      	pop	{r4, pc}
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8011c96:	4621      	mov	r1, r4
 8011c98:	f001 f8e7 	bl	8012e6a <xQueueSemaphoreTake>
 8011c9c:	2801      	cmp	r0, #1
 8011c9e:	d00e      	beq.n	8011cbe <osMutexAcquire+0x5a>
          stat = osErrorTimeout;
 8011ca0:	2c00      	cmp	r4, #0
 8011ca2:	bf0c      	ite	eq
 8011ca4:	f06f 0002 	mvneq.w	r0, #2
 8011ca8:	f06f 0001 	mvnne.w	r0, #1
 8011cac:	e7f2      	b.n	8011c94 <osMutexAcquire+0x30>
    stat = osErrorISR;
 8011cae:	f06f 0005 	mvn.w	r0, #5
}
 8011cb2:	4770      	bx	lr
    stat = osErrorParameter;
 8011cb4:	f06f 0003 	mvn.w	r0, #3
 8011cb8:	e7ec      	b.n	8011c94 <osMutexAcquire+0x30>
  stat = osOK;
 8011cba:	2000      	movs	r0, #0
 8011cbc:	e7ea      	b.n	8011c94 <osMutexAcquire+0x30>
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	e7e8      	b.n	8011c94 <osMutexAcquire+0x30>

08011cc2 <osMutexRelease>:
 8011cc2:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8011cc6:	b9da      	cbnz	r2, 8011d00 <osMutexRelease+0x3e>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011cc8:	b508      	push	{r3, lr}
 8011cca:	4603      	mov	r3, r0
 8011ccc:	f020 0001 	bic.w	r0, r0, #1
 8011cd0:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d916      	bls.n	8011d06 <osMutexRelease+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8011cd8:	b139      	cbz	r1, 8011cea <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011cda:	f000 ff38 	bl	8012b4e <xQueueGiveMutexRecursive>
  stat = osOK;
 8011cde:	2801      	cmp	r0, #1
 8011ce0:	bf14      	ite	ne
 8011ce2:	f06f 0002 	mvnne.w	r0, #2
 8011ce6:	2000      	moveq	r0, #0
      }
    }
  }

  return (stat);
}
 8011ce8:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8011cea:	2300      	movs	r3, #0
 8011cec:	461a      	mov	r2, r3
 8011cee:	4619      	mov	r1, r3
 8011cf0:	f000 fe3b 	bl	801296a <xQueueGenericSend>
  stat = osOK;
 8011cf4:	2801      	cmp	r0, #1
 8011cf6:	bf14      	ite	ne
 8011cf8:	f06f 0002 	mvnne.w	r0, #2
 8011cfc:	2000      	moveq	r0, #0
 8011cfe:	e7f3      	b.n	8011ce8 <osMutexRelease+0x26>
    stat = osErrorISR;
 8011d00:	f06f 0005 	mvn.w	r0, #5
}
 8011d04:	4770      	bx	lr
    stat = osErrorParameter;
 8011d06:	f06f 0003 	mvn.w	r0, #3
 8011d0a:	e7ed      	b.n	8011ce8 <osMutexRelease+0x26>

08011d0c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011d0c:	b570      	push	{r4, r5, r6, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011d14:	bb7b      	cbnz	r3, 8011d76 <osSemaphoreNew+0x6a>
 8011d16:	460e      	mov	r6, r1
 8011d18:	4614      	mov	r4, r2
 8011d1a:	b380      	cbz	r0, 8011d7e <osSemaphoreNew+0x72>
 8011d1c:	4288      	cmp	r0, r1
 8011d1e:	d32e      	bcc.n	8011d7e <osSemaphoreNew+0x72>
    mem = -1;

    if (attr != NULL) {
 8011d20:	b37a      	cbz	r2, 8011d82 <osSemaphoreNew+0x76>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011d22:	6895      	ldr	r5, [r2, #8]
 8011d24:	b125      	cbz	r5, 8011d30 <osSemaphoreNew+0x24>
 8011d26:	68d3      	ldr	r3, [r2, #12]
 8011d28:	2b4f      	cmp	r3, #79	@ 0x4f
 8011d2a:	d839      	bhi.n	8011da0 <osSemaphoreNew+0x94>
  hSemaphore = NULL;
 8011d2c:	2500      	movs	r5, #0
 8011d2e:	e023      	b.n	8011d78 <osSemaphoreNew+0x6c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011d30:	68d3      	ldr	r3, [r2, #12]
 8011d32:	bb0b      	cbnz	r3, 8011d78 <osSemaphoreNew+0x6c>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8011d34:	2801      	cmp	r0, #1
 8011d36:	d126      	bne.n	8011d86 <osSemaphoreNew+0x7a>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011d38:	2203      	movs	r2, #3
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	2001      	movs	r0, #1
 8011d3e:	f000 fdab 	bl	8012898 <xQueueGenericCreate>
 8011d42:	4605      	mov	r5, r0
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011d44:	b31d      	cbz	r5, 8011d8e <osSemaphoreNew+0x82>
 8011d46:	b316      	cbz	r6, 8011d8e <osSemaphoreNew+0x82>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011d48:	2300      	movs	r3, #0
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	4628      	mov	r0, r5
 8011d50:	f000 fe0b 	bl	801296a <xQueueGenericSend>
 8011d54:	2801      	cmp	r0, #1
 8011d56:	d01c      	beq.n	8011d92 <osSemaphoreNew+0x86>
            vSemaphoreDelete (hSemaphore);
 8011d58:	4628      	mov	r0, r5
 8011d5a:	f001 f9fd 	bl	8013158 <vQueueDelete>
            hSemaphore = NULL;
 8011d5e:	2500      	movs	r5, #0
 8011d60:	e00a      	b.n	8011d78 <osSemaphoreNew+0x6c>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011d62:	2303      	movs	r3, #3
 8011d64:	9300      	str	r3, [sp, #0]
 8011d66:	462b      	mov	r3, r5
 8011d68:	2200      	movs	r2, #0
 8011d6a:	4611      	mov	r1, r2
 8011d6c:	2001      	movs	r0, #1
 8011d6e:	f000 fd42 	bl	80127f6 <xQueueGenericCreateStatic>
 8011d72:	4605      	mov	r5, r0
 8011d74:	e7e6      	b.n	8011d44 <osSemaphoreNew+0x38>
  hSemaphore = NULL;
 8011d76:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8011d78:	4628      	mov	r0, r5
 8011d7a:	b002      	add	sp, #8
 8011d7c:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8011d7e:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 8011d80:	e7fa      	b.n	8011d78 <osSemaphoreNew+0x6c>
      if (max_count == 1U) {
 8011d82:	2801      	cmp	r0, #1
 8011d84:	d0d8      	beq.n	8011d38 <osSemaphoreNew+0x2c>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011d86:	4631      	mov	r1, r6
 8011d88:	f000 fdd1 	bl	801292e <xQueueCreateCountingSemaphore>
 8011d8c:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8011d8e:	2d00      	cmp	r5, #0
 8011d90:	d0f2      	beq.n	8011d78 <osSemaphoreNew+0x6c>
        if (attr != NULL) {
 8011d92:	b104      	cbz	r4, 8011d96 <osSemaphoreNew+0x8a>
          name = attr->name;
 8011d94:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8011d96:	4621      	mov	r1, r4
 8011d98:	4628      	mov	r0, r5
 8011d9a:	f001 f9b1 	bl	8013100 <vQueueAddToRegistry>
 8011d9e:	e7eb      	b.n	8011d78 <osSemaphoreNew+0x6c>
      if (max_count == 1U) {
 8011da0:	2801      	cmp	r0, #1
 8011da2:	d0de      	beq.n	8011d62 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011da4:	462a      	mov	r2, r5
 8011da6:	f000 fd9f 	bl	80128e8 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8011daa:	4605      	mov	r5, r0
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d1f1      	bne.n	8011d94 <osSemaphoreNew+0x88>
 8011db0:	e7e2      	b.n	8011d78 <osSemaphoreNew+0x6c>

08011db2 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8011db2:	b338      	cbz	r0, 8011e04 <osSemaphoreAcquire+0x52>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011db4:	b510      	push	{r4, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	460c      	mov	r4, r1
 8011dba:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8011dbe:	b1b3      	cbz	r3, 8011dee <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8011dc0:	bb19      	cbnz	r1, 8011e0a <osSemaphoreAcquire+0x58>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8011dc2:	2100      	movs	r1, #0
 8011dc4:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011dc6:	aa01      	add	r2, sp, #4
 8011dc8:	f001 f944 	bl	8013054 <xQueueReceiveFromISR>
 8011dcc:	2801      	cmp	r0, #1
 8011dce:	d11f      	bne.n	8011e10 <osSemaphoreAcquire+0x5e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8011dd0:	9801      	ldr	r0, [sp, #4]
 8011dd2:	b150      	cbz	r0, 8011dea <osSemaphoreAcquire+0x38>
 8011dd4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011dd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ddc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8011de8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8011dea:	b002      	add	sp, #8
 8011dec:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011dee:	f001 f83c 	bl	8012e6a <xQueueSemaphoreTake>
 8011df2:	2801      	cmp	r0, #1
 8011df4:	d00f      	beq.n	8011e16 <osSemaphoreAcquire+0x64>
        stat = osErrorTimeout;
 8011df6:	2c00      	cmp	r4, #0
 8011df8:	bf0c      	ite	eq
 8011dfa:	f06f 0002 	mvneq.w	r0, #2
 8011dfe:	f06f 0001 	mvnne.w	r0, #1
 8011e02:	e7f2      	b.n	8011dea <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 8011e04:	f06f 0003 	mvn.w	r0, #3
}
 8011e08:	4770      	bx	lr
      stat = osErrorParameter;
 8011e0a:	f06f 0003 	mvn.w	r0, #3
 8011e0e:	e7ec      	b.n	8011dea <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8011e10:	f06f 0002 	mvn.w	r0, #2
 8011e14:	e7e9      	b.n	8011dea <osSemaphoreAcquire+0x38>
  stat = osOK;
 8011e16:	2000      	movs	r0, #0
 8011e18:	e7e7      	b.n	8011dea <osSemaphoreAcquire+0x38>

08011e1a <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8011e1a:	b330      	cbz	r0, 8011e6a <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011e1c:	b500      	push	{lr}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8011e24:	b1a3      	cbz	r3, 8011e50 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 8011e26:	2300      	movs	r3, #0
 8011e28:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e2a:	a901      	add	r1, sp, #4
 8011e2c:	f000 ff14 	bl	8012c58 <xQueueGiveFromISR>
 8011e30:	2801      	cmp	r0, #1
 8011e32:	d11d      	bne.n	8011e70 <osSemaphoreRelease+0x56>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8011e34:	9801      	ldr	r0, [sp, #4]
 8011e36:	b1a8      	cbz	r0, 8011e64 <osSemaphoreRelease+0x4a>
 8011e38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011e44:	f3bf 8f4f 	dsb	sy
 8011e48:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	e009      	b.n	8011e64 <osSemaphoreRelease+0x4a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011e50:	2300      	movs	r3, #0
 8011e52:	461a      	mov	r2, r3
 8011e54:	4619      	mov	r1, r3
 8011e56:	f000 fd88 	bl	801296a <xQueueGenericSend>
  stat = osOK;
 8011e5a:	2801      	cmp	r0, #1
 8011e5c:	bf14      	ite	ne
 8011e5e:	f06f 0002 	mvnne.w	r0, #2
 8011e62:	2000      	moveq	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8011e64:	b003      	add	sp, #12
 8011e66:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 8011e6a:	f06f 0003 	mvn.w	r0, #3
}
 8011e6e:	4770      	bx	lr
      stat = osErrorResource;
 8011e70:	f06f 0002 	mvn.w	r0, #2
 8011e74:	e7f6      	b.n	8011e64 <osSemaphoreRelease+0x4a>

08011e76 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011e76:	b570      	push	{r4, r5, r6, lr}
 8011e78:	b082      	sub	sp, #8
 8011e7a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011e7e:	bb6b      	cbnz	r3, 8011edc <osMessageQueueNew+0x66>
 8011e80:	4614      	mov	r4, r2
 8011e82:	b378      	cbz	r0, 8011ee4 <osMessageQueueNew+0x6e>
 8011e84:	b371      	cbz	r1, 8011ee4 <osMessageQueueNew+0x6e>
    mem = -1;

    if (attr != NULL) {
 8011e86:	b39a      	cbz	r2, 8011ef0 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011e88:	6895      	ldr	r5, [r2, #8]
 8011e8a:	b15d      	cbz	r5, 8011ea4 <osMessageQueueNew+0x2e>
 8011e8c:	68d3      	ldr	r3, [r2, #12]
 8011e8e:	2b4f      	cmp	r3, #79	@ 0x4f
 8011e90:	d92a      	bls.n	8011ee8 <osMessageQueueNew+0x72>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011e92:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011e94:	b352      	cbz	r2, 8011eec <osMessageQueueNew+0x76>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011e96:	fb01 f300 	mul.w	r3, r1, r0
 8011e9a:	6966      	ldr	r6, [r4, #20]
 8011e9c:	429e      	cmp	r6, r3
 8011e9e:	d214      	bcs.n	8011eca <osMessageQueueNew+0x54>
  hQueue = NULL;
 8011ea0:	2500      	movs	r5, #0
 8011ea2:	e01c      	b.n	8011ede <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011ea4:	68d3      	ldr	r3, [r2, #12]
 8011ea6:	b9d3      	cbnz	r3, 8011ede <osMessageQueueNew+0x68>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011ea8:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011eaa:	b9c2      	cbnz	r2, 8011ede <osMessageQueueNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8011eac:	6963      	ldr	r3, [r4, #20]
 8011eae:	b953      	cbnz	r3, 8011ec6 <osMessageQueueNew+0x50>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f000 fcf1 	bl	8012898 <xQueueGenericCreate>
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011eb6:	4605      	mov	r5, r0
 8011eb8:	b188      	cbz	r0, 8011ede <osMessageQueueNew+0x68>
      if (attr != NULL) {
        name = attr->name;
 8011eba:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8011ebc:	4621      	mov	r1, r4
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	f001 f91e 	bl	8013100 <vQueueAddToRegistry>
 8011ec4:	e00b      	b.n	8011ede <osMessageQueueNew+0x68>
  hQueue = NULL;
 8011ec6:	4615      	mov	r5, r2
 8011ec8:	e009      	b.n	8011ede <osMessageQueueNew+0x68>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011eca:	2300      	movs	r3, #0
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	462b      	mov	r3, r5
 8011ed0:	f000 fc91 	bl	80127f6 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8011ed4:	4605      	mov	r5, r0
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d1ef      	bne.n	8011eba <osMessageQueueNew+0x44>
 8011eda:	e000      	b.n	8011ede <osMessageQueueNew+0x68>
  hQueue = NULL;
 8011edc:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8011ede:	4628      	mov	r0, r5
 8011ee0:	b002      	add	sp, #8
 8011ee2:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8011ee4:	2500      	movs	r5, #0
 8011ee6:	e7fa      	b.n	8011ede <osMessageQueueNew+0x68>
 8011ee8:	2500      	movs	r5, #0
 8011eea:	e7f8      	b.n	8011ede <osMessageQueueNew+0x68>
 8011eec:	4615      	mov	r5, r2
  return ((osMessageQueueId_t)hQueue);
 8011eee:	e7f6      	b.n	8011ede <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f000 fcd1 	bl	8012898 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8011ef6:	4605      	mov	r5, r0
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	d0f0      	beq.n	8011ede <osMessageQueueNew+0x68>
 8011efc:	e7de      	b.n	8011ebc <osMessageQueueNew+0x46>

08011efe <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011efe:	b510      	push	{r4, lr}
 8011f00:	b082      	sub	sp, #8
 8011f02:	461c      	mov	r4, r3
 8011f04:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8011f08:	b1eb      	cbz	r3, 8011f46 <osMessageQueuePut+0x48>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011f0a:	3c00      	subs	r4, #0
 8011f0c:	bf18      	it	ne
 8011f0e:	2401      	movne	r4, #1
 8011f10:	2900      	cmp	r1, #0
 8011f12:	bf08      	it	eq
 8011f14:	f044 0401 	orreq.w	r4, r4, #1
 8011f18:	bb2c      	cbnz	r4, 8011f66 <osMessageQueuePut+0x68>
 8011f1a:	b320      	cbz	r0, 8011f66 <osMessageQueuePut+0x68>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011f20:	aa01      	add	r2, sp, #4
 8011f22:	f000 fe34 	bl	8012b8e <xQueueGenericSendFromISR>
 8011f26:	2801      	cmp	r0, #1
 8011f28:	d120      	bne.n	8011f6c <osMessageQueuePut+0x6e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8011f2a:	9801      	ldr	r0, [sp, #4]
 8011f2c:	b1c8      	cbz	r0, 8011f62 <osMessageQueuePut+0x64>
 8011f2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f36:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011f3a:	f3bf 8f4f 	dsb	sy
 8011f3e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8011f42:	2000      	movs	r0, #0
 8011f44:	e00d      	b.n	8011f62 <osMessageQueuePut+0x64>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011f46:	b1a0      	cbz	r0, 8011f72 <osMessageQueuePut+0x74>
 8011f48:	b199      	cbz	r1, 8011f72 <osMessageQueuePut+0x74>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	4622      	mov	r2, r4
 8011f4e:	f000 fd0c 	bl	801296a <xQueueGenericSend>
 8011f52:	2801      	cmp	r0, #1
 8011f54:	d010      	beq.n	8011f78 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
          stat = osErrorTimeout;
 8011f56:	2c00      	cmp	r4, #0
 8011f58:	bf0c      	ite	eq
 8011f5a:	f06f 0002 	mvneq.w	r0, #2
 8011f5e:	f06f 0001 	mvnne.w	r0, #1
      }
    }
  }

  return (stat);
}
 8011f62:	b002      	add	sp, #8
 8011f64:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8011f66:	f06f 0003 	mvn.w	r0, #3
 8011f6a:	e7fa      	b.n	8011f62 <osMessageQueuePut+0x64>
        stat = osErrorResource;
 8011f6c:	f06f 0002 	mvn.w	r0, #2
 8011f70:	e7f7      	b.n	8011f62 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
 8011f72:	f06f 0003 	mvn.w	r0, #3
 8011f76:	e7f4      	b.n	8011f62 <osMessageQueuePut+0x64>
  stat = osOK;
 8011f78:	2000      	movs	r0, #0
 8011f7a:	e7f2      	b.n	8011f62 <osMessageQueuePut+0x64>

08011f7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	461c      	mov	r4, r3
 8011f82:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8011f86:	b1eb      	cbz	r3, 8011fc4 <osMessageQueueGet+0x48>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011f88:	3c00      	subs	r4, #0
 8011f8a:	bf18      	it	ne
 8011f8c:	2401      	movne	r4, #1
 8011f8e:	2900      	cmp	r1, #0
 8011f90:	bf08      	it	eq
 8011f92:	f044 0401 	orreq.w	r4, r4, #1
 8011f96:	bb24      	cbnz	r4, 8011fe2 <osMessageQueueGet+0x66>
 8011f98:	b318      	cbz	r0, 8011fe2 <osMessageQueueGet+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011f9e:	aa01      	add	r2, sp, #4
 8011fa0:	f001 f858 	bl	8013054 <xQueueReceiveFromISR>
 8011fa4:	2801      	cmp	r0, #1
 8011fa6:	d11f      	bne.n	8011fe8 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8011fa8:	9801      	ldr	r0, [sp, #4]
 8011faa:	b1c0      	cbz	r0, 8011fde <osMessageQueueGet+0x62>
 8011fac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8011fc0:	2000      	movs	r0, #0
 8011fc2:	e00c      	b.n	8011fde <osMessageQueueGet+0x62>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011fc4:	b198      	cbz	r0, 8011fee <osMessageQueueGet+0x72>
 8011fc6:	b191      	cbz	r1, 8011fee <osMessageQueueGet+0x72>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011fc8:	4622      	mov	r2, r4
 8011fca:	f000 fe9c 	bl	8012d06 <xQueueReceive>
 8011fce:	2801      	cmp	r0, #1
 8011fd0:	d010      	beq.n	8011ff4 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
          stat = osErrorTimeout;
 8011fd2:	2c00      	cmp	r4, #0
 8011fd4:	bf0c      	ite	eq
 8011fd6:	f06f 0002 	mvneq.w	r0, #2
 8011fda:	f06f 0001 	mvnne.w	r0, #1
      }
    }
  }

  return (stat);
}
 8011fde:	b002      	add	sp, #8
 8011fe0:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8011fe2:	f06f 0003 	mvn.w	r0, #3
 8011fe6:	e7fa      	b.n	8011fde <osMessageQueueGet+0x62>
        stat = osErrorResource;
 8011fe8:	f06f 0002 	mvn.w	r0, #2
 8011fec:	e7f7      	b.n	8011fde <osMessageQueueGet+0x62>
      stat = osErrorParameter;
 8011fee:	f06f 0003 	mvn.w	r0, #3
 8011ff2:	e7f4      	b.n	8011fde <osMessageQueueGet+0x62>
  stat = osOK;
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	e7f2      	b.n	8011fde <osMessageQueueGet+0x62>

08011ff8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011ff8:	4b03      	ldr	r3, [pc, #12]	@ (8012008 <vApplicationGetIdleTaskMemory+0x10>)
 8011ffa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011ffc:	4b03      	ldr	r3, [pc, #12]	@ (801200c <vApplicationGetIdleTaskMemory+0x14>)
 8011ffe:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012000:	2380      	movs	r3, #128	@ 0x80
 8012002:	6013      	str	r3, [r2, #0]
}
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop
 8012008:	24049418 	.word	0x24049418
 801200c:	24049218 	.word	0x24049218

08012010 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012010:	4b03      	ldr	r3, [pc, #12]	@ (8012020 <vApplicationGetTimerTaskMemory+0x10>)
 8012012:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012014:	4b03      	ldr	r3, [pc, #12]	@ (8012024 <vApplicationGetTimerTaskMemory+0x14>)
 8012016:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801201c:	6013      	str	r3, [r2, #0]
}
 801201e:	4770      	bx	lr
 8012020:	240491b8 	.word	0x240491b8
 8012024:	24048db8 	.word	0x24048db8

08012028 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012028:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801202a:	4b15      	ldr	r3, [pc, #84]	@ (8012080 <prvInsertBlockIntoFreeList+0x58>)
 801202c:	461a      	mov	r2, r3
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	4283      	cmp	r3, r0
 8012032:	d3fb      	bcc.n	801202c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012034:	6854      	ldr	r4, [r2, #4]
 8012036:	1911      	adds	r1, r2, r4
 8012038:	4288      	cmp	r0, r1
 801203a:	d00a      	beq.n	8012052 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801203c:	6844      	ldr	r4, [r0, #4]
 801203e:	1901      	adds	r1, r0, r4
 8012040:	428b      	cmp	r3, r1
 8012042:	d010      	beq.n	8012066 <prvInsertBlockIntoFreeList+0x3e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012044:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012046:	4282      	cmp	r2, r0
 8012048:	d000      	beq.n	801204c <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801204a:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801204c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012050:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012052:	6841      	ldr	r1, [r0, #4]
 8012054:	4421      	add	r1, r4
 8012056:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012058:	460c      	mov	r4, r1
 801205a:	4411      	add	r1, r2
 801205c:	428b      	cmp	r3, r1
 801205e:	d001      	beq.n	8012064 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012060:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8012062:	e7f3      	b.n	801204c <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012064:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012066:	4907      	ldr	r1, [pc, #28]	@ (8012084 <prvInsertBlockIntoFreeList+0x5c>)
 8012068:	6809      	ldr	r1, [r1, #0]
 801206a:	428b      	cmp	r3, r1
 801206c:	d005      	beq.n	801207a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	4423      	add	r3, r4
 8012072:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012074:	6813      	ldr	r3, [r2, #0]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	e7e4      	b.n	8012044 <prvInsertBlockIntoFreeList+0x1c>
 801207a:	460b      	mov	r3, r1
 801207c:	e7e2      	b.n	8012044 <prvInsertBlockIntoFreeList+0x1c>
 801207e:	bf00      	nop
 8012080:	24049494 	.word	0x24049494
 8012084:	24049490 	.word	0x24049490

08012088 <pvPortMalloc>:
{
 8012088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801208a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801208c:	f001 fa8c 	bl	80135a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012090:	4b44      	ldr	r3, [pc, #272]	@ (80121a4 <pvPortMalloc+0x11c>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	b1b3      	cbz	r3, 80120c4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012096:	4b44      	ldr	r3, [pc, #272]	@ (80121a8 <pvPortMalloc+0x120>)
 8012098:	681d      	ldr	r5, [r3, #0]
			if( xWantedSize > 0 )
 801209a:	4225      	tst	r5, r4
 801209c:	d17c      	bne.n	8012198 <pvPortMalloc+0x110>
 801209e:	2c00      	cmp	r4, #0
 80120a0:	d07a      	beq.n	8012198 <pvPortMalloc+0x110>
				xWantedSize += xHeapStructSize;
 80120a2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80120a6:	f014 0f07 	tst.w	r4, #7
 80120aa:	d002      	beq.n	80120b2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80120ac:	f022 0207 	bic.w	r2, r2, #7
 80120b0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80120b2:	2a00      	cmp	r2, #0
 80120b4:	d070      	beq.n	8012198 <pvPortMalloc+0x110>
 80120b6:	4b3d      	ldr	r3, [pc, #244]	@ (80121ac <pvPortMalloc+0x124>)
 80120b8:	681e      	ldr	r6, [r3, #0]
 80120ba:	4296      	cmp	r6, r2
 80120bc:	d36c      	bcc.n	8012198 <pvPortMalloc+0x110>
				pxBlock = xStart.pxNextFreeBlock;
 80120be:	493c      	ldr	r1, [pc, #240]	@ (80121b0 <pvPortMalloc+0x128>)
 80120c0:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80120c2:	e026      	b.n	8012112 <pvPortMalloc+0x8a>
	uxAddress = ( size_t ) ucHeap;
 80120c4:	4a3b      	ldr	r2, [pc, #236]	@ (80121b4 <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80120c6:	f012 0f07 	tst.w	r2, #7
 80120ca:	d007      	beq.n	80120dc <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80120cc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80120ce:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80120d2:	4b39      	ldr	r3, [pc, #228]	@ (80121b8 <pvPortMalloc+0x130>)
 80120d4:	4413      	add	r3, r2
 80120d6:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80120d8:	460a      	mov	r2, r1
 80120da:	e000      	b.n	80120de <pvPortMalloc+0x56>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80120dc:	4b36      	ldr	r3, [pc, #216]	@ (80121b8 <pvPortMalloc+0x130>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80120de:	4834      	ldr	r0, [pc, #208]	@ (80121b0 <pvPortMalloc+0x128>)
 80120e0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80120e2:	2100      	movs	r1, #0
 80120e4:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80120e6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80120e8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80120ea:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80120ee:	482d      	ldr	r0, [pc, #180]	@ (80121a4 <pvPortMalloc+0x11c>)
 80120f0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80120f2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80120f4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80120f6:	1a99      	subs	r1, r3, r2
 80120f8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80120fa:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80120fc:	4b2f      	ldr	r3, [pc, #188]	@ (80121bc <pvPortMalloc+0x134>)
 80120fe:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012100:	4b2a      	ldr	r3, [pc, #168]	@ (80121ac <pvPortMalloc+0x124>)
 8012102:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012104:	4b28      	ldr	r3, [pc, #160]	@ (80121a8 <pvPortMalloc+0x120>)
 8012106:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801210a:	601a      	str	r2, [r3, #0]
}
 801210c:	e7c3      	b.n	8012096 <pvPortMalloc+0xe>
 801210e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8012110:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012112:	6863      	ldr	r3, [r4, #4]
 8012114:	4293      	cmp	r3, r2
 8012116:	d202      	bcs.n	801211e <pvPortMalloc+0x96>
 8012118:	6823      	ldr	r3, [r4, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d1f7      	bne.n	801210e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
 801211e:	4b21      	ldr	r3, [pc, #132]	@ (80121a4 <pvPortMalloc+0x11c>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	42a3      	cmp	r3, r4
 8012124:	d038      	beq.n	8012198 <pvPortMalloc+0x110>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012126:	680f      	ldr	r7, [r1, #0]
 8012128:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801212a:	6823      	ldr	r3, [r4, #0]
 801212c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801212e:	6863      	ldr	r3, [r4, #4]
 8012130:	1a9b      	subs	r3, r3, r2
 8012132:	2b10      	cmp	r3, #16
 8012134:	d910      	bls.n	8012158 <pvPortMalloc+0xd0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012136:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012138:	f010 0f07 	tst.w	r0, #7
 801213c:	d008      	beq.n	8012150 <pvPortMalloc+0xc8>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	e7fe      	b.n	801214e <pvPortMalloc+0xc6>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012150:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012152:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012154:	f7ff ff68 	bl	8012028 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012158:	6863      	ldr	r3, [r4, #4]
 801215a:	1af6      	subs	r6, r6, r3
 801215c:	4a13      	ldr	r2, [pc, #76]	@ (80121ac <pvPortMalloc+0x124>)
 801215e:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012160:	4a16      	ldr	r2, [pc, #88]	@ (80121bc <pvPortMalloc+0x134>)
 8012162:	6812      	ldr	r2, [r2, #0]
 8012164:	4296      	cmp	r6, r2
 8012166:	d201      	bcs.n	801216c <pvPortMalloc+0xe4>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012168:	4a14      	ldr	r2, [pc, #80]	@ (80121bc <pvPortMalloc+0x134>)
 801216a:	6016      	str	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801216c:	431d      	orrs	r5, r3
 801216e:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012170:	2300      	movs	r3, #0
 8012172:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8012174:	4a12      	ldr	r2, [pc, #72]	@ (80121c0 <pvPortMalloc+0x138>)
 8012176:	6813      	ldr	r3, [r2, #0]
 8012178:	3301      	adds	r3, #1
 801217a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 801217c:	f001 fabc 	bl	80136f8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012180:	f017 0f07 	tst.w	r7, #7
 8012184:	d00b      	beq.n	801219e <pvPortMalloc+0x116>
 8012186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801218a:	f383 8811 	msr	BASEPRI, r3
 801218e:	f3bf 8f6f 	isb	sy
 8012192:	f3bf 8f4f 	dsb	sy
 8012196:	e7fe      	b.n	8012196 <pvPortMalloc+0x10e>
	( void ) xTaskResumeAll();
 8012198:	f001 faae 	bl	80136f8 <xTaskResumeAll>
 801219c:	2700      	movs	r7, #0
}
 801219e:	4638      	mov	r0, r7
 80121a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121a2:	bf00      	nop
 80121a4:	24049490 	.word	0x24049490
 80121a8:	2404947c 	.word	0x2404947c
 80121ac:	2404948c 	.word	0x2404948c
 80121b0:	24049494 	.word	0x24049494
 80121b4:	2404949c 	.word	0x2404949c
 80121b8:	000186a0 	.word	0x000186a0
 80121bc:	24049488 	.word	0x24049488
 80121c0:	24049484 	.word	0x24049484

080121c4 <vPortFree>:
	if( pv != NULL )
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d033      	beq.n	8012230 <vPortFree+0x6c>
{
 80121c8:	b510      	push	{r4, lr}
 80121ca:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80121cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80121d0:	4a18      	ldr	r2, [pc, #96]	@ (8012234 <vPortFree+0x70>)
 80121d2:	6812      	ldr	r2, [r2, #0]
 80121d4:	4213      	tst	r3, r2
 80121d6:	d108      	bne.n	80121ea <vPortFree+0x26>
 80121d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121dc:	f383 8811 	msr	BASEPRI, r3
 80121e0:	f3bf 8f6f 	isb	sy
 80121e4:	f3bf 8f4f 	dsb	sy
 80121e8:	e7fe      	b.n	80121e8 <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80121ea:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80121ee:	b141      	cbz	r1, 8012202 <vPortFree+0x3e>
 80121f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121f4:	f383 8811 	msr	BASEPRI, r3
 80121f8:	f3bf 8f6f 	isb	sy
 80121fc:	f3bf 8f4f 	dsb	sy
 8012200:	e7fe      	b.n	8012200 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012202:	ea23 0302 	bic.w	r3, r3, r2
 8012206:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801220a:	f001 f9cd 	bl	80135a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801220e:	4a0a      	ldr	r2, [pc, #40]	@ (8012238 <vPortFree+0x74>)
 8012210:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012214:	6811      	ldr	r1, [r2, #0]
 8012216:	440b      	add	r3, r1
 8012218:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801221a:	f1a4 0008 	sub.w	r0, r4, #8
 801221e:	f7ff ff03 	bl	8012028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012222:	4a06      	ldr	r2, [pc, #24]	@ (801223c <vPortFree+0x78>)
 8012224:	6813      	ldr	r3, [r2, #0]
 8012226:	3301      	adds	r3, #1
 8012228:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801222a:	f001 fa65 	bl	80136f8 <xTaskResumeAll>
}
 801222e:	bd10      	pop	{r4, pc}
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	2404947c 	.word	0x2404947c
 8012238:	2404948c 	.word	0x2404948c
 801223c:	24049480 	.word	0x24049480

08012240 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012240:	f100 0308 	add.w	r3, r0, #8
 8012244:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012246:	f04f 32ff 	mov.w	r2, #4294967295
 801224a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801224c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801224e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012250:	2300      	movs	r3, #0
 8012252:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012254:	4770      	bx	lr

08012256 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012256:	2300      	movs	r3, #0
 8012258:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801225a:	4770      	bx	lr

0801225c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801225c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801225e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012260:	689a      	ldr	r2, [r3, #8]
 8012262:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012264:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012266:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012268:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801226a:	6803      	ldr	r3, [r0, #0]
 801226c:	3301      	adds	r3, #1
 801226e:	6003      	str	r3, [r0, #0]
}
 8012270:	4770      	bx	lr

08012272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012272:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012274:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012276:	f1b5 3fff 	cmp.w	r5, #4294967295
 801227a:	d011      	beq.n	80122a0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801227c:	f100 0308 	add.w	r3, r0, #8
 8012280:	461c      	mov	r4, r3
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	42aa      	cmp	r2, r5
 8012288:	d9fa      	bls.n	8012280 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801228e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012290:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012292:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012294:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012296:	6803      	ldr	r3, [r0, #0]
 8012298:	3301      	adds	r3, #1
 801229a:	6003      	str	r3, [r0, #0]
}
 801229c:	bc30      	pop	{r4, r5}
 801229e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80122a0:	6904      	ldr	r4, [r0, #16]
 80122a2:	e7f2      	b.n	801228a <vListInsert+0x18>

080122a4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80122a4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80122a6:	6841      	ldr	r1, [r0, #4]
 80122a8:	6882      	ldr	r2, [r0, #8]
 80122aa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80122ac:	6841      	ldr	r1, [r0, #4]
 80122ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80122b0:	685a      	ldr	r2, [r3, #4]
 80122b2:	4282      	cmp	r2, r0
 80122b4:	d006      	beq.n	80122c4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80122b6:	2200      	movs	r2, #0
 80122b8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	3a01      	subs	r2, #1
 80122be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80122c0:	6818      	ldr	r0, [r3, #0]
}
 80122c2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80122c4:	6882      	ldr	r2, [r0, #8]
 80122c6:	605a      	str	r2, [r3, #4]
 80122c8:	e7f5      	b.n	80122b6 <uxListRemove+0x12>
	...

080122cc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80122cc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80122ce:	2300      	movs	r3, #0
 80122d0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80122d2:	4b0d      	ldr	r3, [pc, #52]	@ (8012308 <prvTaskExitError+0x3c>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122da:	d008      	beq.n	80122ee <prvTaskExitError+0x22>
 80122dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122e0:	f383 8811 	msr	BASEPRI, r3
 80122e4:	f3bf 8f6f 	isb	sy
 80122e8:	f3bf 8f4f 	dsb	sy
 80122ec:	e7fe      	b.n	80122ec <prvTaskExitError+0x20>
 80122ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f2:	f383 8811 	msr	BASEPRI, r3
 80122f6:	f3bf 8f6f 	isb	sy
 80122fa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80122fe:	9b01      	ldr	r3, [sp, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d0fc      	beq.n	80122fe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012304:	b002      	add	sp, #8
 8012306:	4770      	bx	lr
 8012308:	24000078 	.word	0x24000078

0801230c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801230c:	4808      	ldr	r0, [pc, #32]	@ (8012330 <prvPortStartFirstTask+0x24>)
 801230e:	6800      	ldr	r0, [r0, #0]
 8012310:	6800      	ldr	r0, [r0, #0]
 8012312:	f380 8808 	msr	MSP, r0
 8012316:	f04f 0000 	mov.w	r0, #0
 801231a:	f380 8814 	msr	CONTROL, r0
 801231e:	b662      	cpsie	i
 8012320:	b661      	cpsie	f
 8012322:	f3bf 8f4f 	dsb	sy
 8012326:	f3bf 8f6f 	isb	sy
 801232a:	df00      	svc	0
 801232c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801232e:	0000      	.short	0x0000
 8012330:	e000ed08 	.word	0xe000ed08

08012334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012344 <vPortEnableVFP+0x10>
 8012338:	6801      	ldr	r1, [r0, #0]
 801233a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801233e:	6001      	str	r1, [r0, #0]
 8012340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012342:	0000      	.short	0x0000
 8012344:	e000ed88 	.word	0xe000ed88

08012348 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012348:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801234c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012350:	f021 0101 	bic.w	r1, r1, #1
 8012354:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012358:	4b05      	ldr	r3, [pc, #20]	@ (8012370 <pxPortInitialiseStack+0x28>)
 801235a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801235e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012362:	f06f 0302 	mvn.w	r3, #2
 8012366:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801236a:	3844      	subs	r0, #68	@ 0x44
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop
 8012370:	080122cd 	.word	0x080122cd
	...

08012380 <SVC_Handler>:
	__asm volatile (
 8012380:	4b07      	ldr	r3, [pc, #28]	@ (80123a0 <pxCurrentTCBConst2>)
 8012382:	6819      	ldr	r1, [r3, #0]
 8012384:	6808      	ldr	r0, [r1, #0]
 8012386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238a:	f380 8809 	msr	PSP, r0
 801238e:	f3bf 8f6f 	isb	sy
 8012392:	f04f 0000 	mov.w	r0, #0
 8012396:	f380 8811 	msr	BASEPRI, r0
 801239a:	4770      	bx	lr
 801239c:	f3af 8000 	nop.w

080123a0 <pxCurrentTCBConst2>:
 80123a0:	2406207c 	.word	0x2406207c

080123a4 <vPortEnterCritical>:
 80123a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123a8:	f383 8811 	msr	BASEPRI, r3
 80123ac:	f3bf 8f6f 	isb	sy
 80123b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80123b4:	4a0b      	ldr	r2, [pc, #44]	@ (80123e4 <vPortEnterCritical+0x40>)
 80123b6:	6813      	ldr	r3, [r2, #0]
 80123b8:	3301      	adds	r3, #1
 80123ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80123bc:	2b01      	cmp	r3, #1
 80123be:	d000      	beq.n	80123c2 <vPortEnterCritical+0x1e>
}
 80123c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80123c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80123c6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80123ca:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80123ce:	d0f7      	beq.n	80123c0 <vPortEnterCritical+0x1c>
 80123d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123d4:	f383 8811 	msr	BASEPRI, r3
 80123d8:	f3bf 8f6f 	isb	sy
 80123dc:	f3bf 8f4f 	dsb	sy
 80123e0:	e7fe      	b.n	80123e0 <vPortEnterCritical+0x3c>
 80123e2:	bf00      	nop
 80123e4:	24000078 	.word	0x24000078

080123e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80123e8:	4b09      	ldr	r3, [pc, #36]	@ (8012410 <vPortExitCritical+0x28>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	b943      	cbnz	r3, 8012400 <vPortExitCritical+0x18>
 80123ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123f2:	f383 8811 	msr	BASEPRI, r3
 80123f6:	f3bf 8f6f 	isb	sy
 80123fa:	f3bf 8f4f 	dsb	sy
 80123fe:	e7fe      	b.n	80123fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8012400:	3b01      	subs	r3, #1
 8012402:	4a03      	ldr	r2, [pc, #12]	@ (8012410 <vPortExitCritical+0x28>)
 8012404:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012406:	b90b      	cbnz	r3, 801240c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012408:	f383 8811 	msr	BASEPRI, r3
}
 801240c:	4770      	bx	lr
 801240e:	bf00      	nop
 8012410:	24000078 	.word	0x24000078
	...

08012420 <PendSV_Handler>:
	__asm volatile
 8012420:	f3ef 8009 	mrs	r0, PSP
 8012424:	f3bf 8f6f 	isb	sy
 8012428:	4b15      	ldr	r3, [pc, #84]	@ (8012480 <pxCurrentTCBConst>)
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	f01e 0f10 	tst.w	lr, #16
 8012430:	bf08      	it	eq
 8012432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243a:	6010      	str	r0, [r2, #0]
 801243c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012444:	f380 8811 	msr	BASEPRI, r0
 8012448:	f3bf 8f4f 	dsb	sy
 801244c:	f3bf 8f6f 	isb	sy
 8012450:	f001 fa3e 	bl	80138d0 <vTaskSwitchContext>
 8012454:	f04f 0000 	mov.w	r0, #0
 8012458:	f380 8811 	msr	BASEPRI, r0
 801245c:	bc09      	pop	{r0, r3}
 801245e:	6819      	ldr	r1, [r3, #0]
 8012460:	6808      	ldr	r0, [r1, #0]
 8012462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012466:	f01e 0f10 	tst.w	lr, #16
 801246a:	bf08      	it	eq
 801246c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012470:	f380 8809 	msr	PSP, r0
 8012474:	f3bf 8f6f 	isb	sy
 8012478:	4770      	bx	lr
 801247a:	bf00      	nop
 801247c:	f3af 8000 	nop.w

08012480 <pxCurrentTCBConst>:
 8012480:	2406207c 	.word	0x2406207c

08012484 <xPortSysTickHandler>:
{
 8012484:	b508      	push	{r3, lr}
	__asm volatile
 8012486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801248a:	f383 8811 	msr	BASEPRI, r3
 801248e:	f3bf 8f6f 	isb	sy
 8012492:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8012496:	f001 f895 	bl	80135c4 <xTaskIncrementTick>
 801249a:	b128      	cbz	r0, 80124a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801249c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80124a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80124a8:	2300      	movs	r3, #0
 80124aa:	f383 8811 	msr	BASEPRI, r3
}
 80124ae:	bd08      	pop	{r3, pc}

080124b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80124b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80124b4:	2300      	movs	r3, #0
 80124b6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80124b8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80124ba:	4b05      	ldr	r3, [pc, #20]	@ (80124d0 <vPortSetupTimerInterrupt+0x20>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4905      	ldr	r1, [pc, #20]	@ (80124d4 <vPortSetupTimerInterrupt+0x24>)
 80124c0:	fba1 1303 	umull	r1, r3, r1, r3
 80124c4:	099b      	lsrs	r3, r3, #6
 80124c6:	3b01      	subs	r3, #1
 80124c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80124ca:	2307      	movs	r3, #7
 80124cc:	6113      	str	r3, [r2, #16]
}
 80124ce:	4770      	bx	lr
 80124d0:	2400006c 	.word	0x2400006c
 80124d4:	10624dd3 	.word	0x10624dd3

080124d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80124d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80124dc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80124e0:	4b3e      	ldr	r3, [pc, #248]	@ (80125dc <xPortStartScheduler+0x104>)
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d03b      	beq.n	801255e <xPortStartScheduler+0x86>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80124e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80124ea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80124ee:	4b3c      	ldr	r3, [pc, #240]	@ (80125e0 <xPortStartScheduler+0x108>)
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d03d      	beq.n	8012570 <xPortStartScheduler+0x98>
{
 80124f4:	b530      	push	{r4, r5, lr}
 80124f6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80124f8:	4b3a      	ldr	r3, [pc, #232]	@ (80125e4 <xPortStartScheduler+0x10c>)
 80124fa:	781a      	ldrb	r2, [r3, #0]
 80124fc:	b2d2      	uxtb	r2, r2
 80124fe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012500:	22ff      	movs	r2, #255	@ 0xff
 8012502:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	b2db      	uxtb	r3, r3
 8012508:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801250c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012510:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012514:	4a34      	ldr	r2, [pc, #208]	@ (80125e8 <xPortStartScheduler+0x110>)
 8012516:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012518:	4b34      	ldr	r3, [pc, #208]	@ (80125ec <xPortStartScheduler+0x114>)
 801251a:	2207      	movs	r2, #7
 801251c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801251e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012522:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012526:	d011      	beq.n	801254c <xPortStartScheduler+0x74>
 8012528:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801252a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801252e:	005b      	lsls	r3, r3, #1
 8012530:	b2db      	uxtb	r3, r3
 8012532:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012536:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801253a:	4611      	mov	r1, r2
 801253c:	3a01      	subs	r2, #1
 801253e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012542:	d1f2      	bne.n	801252a <xPortStartScheduler+0x52>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012544:	2903      	cmp	r1, #3
 8012546:	d01c      	beq.n	8012582 <xPortStartScheduler+0xaa>
 8012548:	4b28      	ldr	r3, [pc, #160]	@ (80125ec <xPortStartScheduler+0x114>)
 801254a:	6019      	str	r1, [r3, #0]
	__asm volatile
 801254c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012550:	f383 8811 	msr	BASEPRI, r3
 8012554:	f3bf 8f6f 	isb	sy
 8012558:	f3bf 8f4f 	dsb	sy
 801255c:	e7fe      	b.n	801255c <xPortStartScheduler+0x84>
 801255e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012562:	f383 8811 	msr	BASEPRI, r3
 8012566:	f3bf 8f6f 	isb	sy
 801256a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801256e:	e7fe      	b.n	801256e <xPortStartScheduler+0x96>
 8012570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012574:	f383 8811 	msr	BASEPRI, r3
 8012578:	f3bf 8f6f 	isb	sy
 801257c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012580:	e7fe      	b.n	8012580 <xPortStartScheduler+0xa8>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012582:	4b1a      	ldr	r3, [pc, #104]	@ (80125ec <xPortStartScheduler+0x114>)
 8012584:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8012588:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801258a:	9b01      	ldr	r3, [sp, #4]
 801258c:	b2db      	uxtb	r3, r3
 801258e:	4a15      	ldr	r2, [pc, #84]	@ (80125e4 <xPortStartScheduler+0x10c>)
 8012590:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012592:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8012596:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801259a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801259e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80125a2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80125a6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80125aa:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80125ae:	f7ff ff7f 	bl	80124b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80125b2:	2500      	movs	r5, #0
 80125b4:	4b0e      	ldr	r3, [pc, #56]	@ (80125f0 <xPortStartScheduler+0x118>)
 80125b6:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80125b8:	f7ff febc 	bl	8012334 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80125bc:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80125c0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80125c4:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80125c8:	f7ff fea0 	bl	801230c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80125cc:	f001 f980 	bl	80138d0 <vTaskSwitchContext>
	prvTaskExitError();
 80125d0:	f7ff fe7c 	bl	80122cc <prvTaskExitError>
}
 80125d4:	4628      	mov	r0, r5
 80125d6:	b003      	add	sp, #12
 80125d8:	bd30      	pop	{r4, r5, pc}
 80125da:	bf00      	nop
 80125dc:	410fc271 	.word	0x410fc271
 80125e0:	410fc270 	.word	0x410fc270
 80125e4:	e000e400 	.word	0xe000e400
 80125e8:	24061b40 	.word	0x24061b40
 80125ec:	24061b3c 	.word	0x24061b3c
 80125f0:	24000078 	.word	0x24000078

080125f4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80125f4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125f8:	2b0f      	cmp	r3, #15
 80125fa:	d90f      	bls.n	801261c <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125fc:	4a11      	ldr	r2, [pc, #68]	@ (8012644 <vPortValidateInterruptPriority+0x50>)
 80125fe:	5c9b      	ldrb	r3, [r3, r2]
 8012600:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012602:	4a11      	ldr	r2, [pc, #68]	@ (8012648 <vPortValidateInterruptPriority+0x54>)
 8012604:	7812      	ldrb	r2, [r2, #0]
 8012606:	429a      	cmp	r2, r3
 8012608:	d908      	bls.n	801261c <vPortValidateInterruptPriority+0x28>
 801260a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801260e:	f383 8811 	msr	BASEPRI, r3
 8012612:	f3bf 8f6f 	isb	sy
 8012616:	f3bf 8f4f 	dsb	sy
 801261a:	e7fe      	b.n	801261a <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801261c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012620:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8012624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012628:	4a08      	ldr	r2, [pc, #32]	@ (801264c <vPortValidateInterruptPriority+0x58>)
 801262a:	6812      	ldr	r2, [r2, #0]
 801262c:	4293      	cmp	r3, r2
 801262e:	d908      	bls.n	8012642 <vPortValidateInterruptPriority+0x4e>
 8012630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012634:	f383 8811 	msr	BASEPRI, r3
 8012638:	f3bf 8f6f 	isb	sy
 801263c:	f3bf 8f4f 	dsb	sy
 8012640:	e7fe      	b.n	8012640 <vPortValidateInterruptPriority+0x4c>
	}
 8012642:	4770      	bx	lr
 8012644:	e000e3f0 	.word	0xe000e3f0
 8012648:	24061b40 	.word	0x24061b40
 801264c:	24061b3c 	.word	0x24061b3c

08012650 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012650:	b510      	push	{r4, lr}
 8012652:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012654:	f7ff fea6 	bl	80123a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012658:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801265a:	f7ff fec5 	bl	80123e8 <vPortExitCritical>

	return xReturn;
}
 801265e:	fab4 f084 	clz	r0, r4
 8012662:	0940      	lsrs	r0, r0, #5
 8012664:	bd10      	pop	{r4, pc}

08012666 <prvCopyDataToQueue>:
{
 8012666:	b570      	push	{r4, r5, r6, lr}
 8012668:	4604      	mov	r4, r0
 801266a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801266c:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801266e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8012670:	b95a      	cbnz	r2, 801268a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012672:	6803      	ldr	r3, [r0, #0]
 8012674:	b11b      	cbz	r3, 801267e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8012676:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012678:	3601      	adds	r6, #1
 801267a:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 801267c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801267e:	6880      	ldr	r0, [r0, #8]
 8012680:	f001 fab0 	bl	8013be4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012684:	2300      	movs	r3, #0
 8012686:	60a3      	str	r3, [r4, #8]
 8012688:	e7f6      	b.n	8012678 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 801268a:	b96d      	cbnz	r5, 80126a8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801268c:	6840      	ldr	r0, [r0, #4]
 801268e:	f017 fb1c 	bl	8029cca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012692:	6863      	ldr	r3, [r4, #4]
 8012694:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012696:	4413      	add	r3, r2
 8012698:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801269a:	68a2      	ldr	r2, [r4, #8]
 801269c:	4293      	cmp	r3, r2
 801269e:	d319      	bcc.n	80126d4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80126a0:	6823      	ldr	r3, [r4, #0]
 80126a2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80126a4:	4628      	mov	r0, r5
 80126a6:	e7e7      	b.n	8012678 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80126a8:	68c0      	ldr	r0, [r0, #12]
 80126aa:	f017 fb0e 	bl	8029cca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80126ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80126b0:	4251      	negs	r1, r2
 80126b2:	68e3      	ldr	r3, [r4, #12]
 80126b4:	1a9b      	subs	r3, r3, r2
 80126b6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126b8:	6822      	ldr	r2, [r4, #0]
 80126ba:	4293      	cmp	r3, r2
 80126bc:	d202      	bcs.n	80126c4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80126be:	68a3      	ldr	r3, [r4, #8]
 80126c0:	440b      	add	r3, r1
 80126c2:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80126c4:	b10e      	cbz	r6, 80126ca <prvCopyDataToQueue+0x64>
 80126c6:	2d02      	cmp	r5, #2
 80126c8:	d001      	beq.n	80126ce <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 80126ca:	2000      	movs	r0, #0
 80126cc:	e7d4      	b.n	8012678 <prvCopyDataToQueue+0x12>
				--uxMessagesWaiting;
 80126ce:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80126d0:	2000      	movs	r0, #0
 80126d2:	e7d1      	b.n	8012678 <prvCopyDataToQueue+0x12>
 80126d4:	4628      	mov	r0, r5
 80126d6:	e7cf      	b.n	8012678 <prvCopyDataToQueue+0x12>

080126d8 <prvCopyDataFromQueue>:
{
 80126d8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80126da:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80126dc:	b16a      	cbz	r2, 80126fa <prvCopyDataFromQueue+0x22>
{
 80126de:	b510      	push	{r4, lr}
 80126e0:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80126e2:	68d9      	ldr	r1, [r3, #12]
 80126e4:	4411      	add	r1, r2
 80126e6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80126e8:	689c      	ldr	r4, [r3, #8]
 80126ea:	42a1      	cmp	r1, r4
 80126ec:	d301      	bcc.n	80126f2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80126ee:	6819      	ldr	r1, [r3, #0]
 80126f0:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80126f2:	68d9      	ldr	r1, [r3, #12]
 80126f4:	f017 fae9 	bl	8029cca <memcpy>
}
 80126f8:	bd10      	pop	{r4, pc}
 80126fa:	4770      	bx	lr

080126fc <prvUnlockQueue>:
{
 80126fc:	b570      	push	{r4, r5, r6, lr}
 80126fe:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8012700:	f7ff fe50 	bl	80123a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8012704:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8012708:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801270a:	2c00      	cmp	r4, #0
 801270c:	dd0f      	ble.n	801272e <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801270e:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8012712:	e002      	b.n	801271a <prvUnlockQueue+0x1e>
			--cTxLock;
 8012714:	3c01      	subs	r4, #1
 8012716:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012718:	b14c      	cbz	r4, 801272e <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801271a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801271c:	b13b      	cbz	r3, 801272e <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801271e:	4630      	mov	r0, r6
 8012720:	f001 f966 	bl	80139f0 <xTaskRemoveFromEventList>
 8012724:	2800      	cmp	r0, #0
 8012726:	d0f5      	beq.n	8012714 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8012728:	f001 f9f6 	bl	8013b18 <vTaskMissedYield>
 801272c:	e7f2      	b.n	8012714 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 801272e:	23ff      	movs	r3, #255	@ 0xff
 8012730:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8012734:	f7ff fe58 	bl	80123e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8012738:	f7ff fe34 	bl	80123a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801273c:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8012740:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012742:	2c00      	cmp	r4, #0
 8012744:	dd0f      	ble.n	8012766 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012746:	f105 0610 	add.w	r6, r5, #16
 801274a:	e002      	b.n	8012752 <prvUnlockQueue+0x56>
				--cRxLock;
 801274c:	3c01      	subs	r4, #1
 801274e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012750:	b14c      	cbz	r4, 8012766 <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012752:	692b      	ldr	r3, [r5, #16]
 8012754:	b13b      	cbz	r3, 8012766 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012756:	4630      	mov	r0, r6
 8012758:	f001 f94a 	bl	80139f0 <xTaskRemoveFromEventList>
 801275c:	2800      	cmp	r0, #0
 801275e:	d0f5      	beq.n	801274c <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8012760:	f001 f9da 	bl	8013b18 <vTaskMissedYield>
 8012764:	e7f2      	b.n	801274c <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8012766:	23ff      	movs	r3, #255	@ 0xff
 8012768:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 801276c:	f7ff fe3c 	bl	80123e8 <vPortExitCritical>
}
 8012770:	bd70      	pop	{r4, r5, r6, pc}

08012772 <xQueueGenericReset>:
{
 8012772:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8012774:	b1e0      	cbz	r0, 80127b0 <xQueueGenericReset+0x3e>
 8012776:	460d      	mov	r5, r1
 8012778:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801277a:	f7ff fe13 	bl	80123a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801277e:	6822      	ldr	r2, [r4, #0]
 8012780:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8012782:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012784:	fb01 f303 	mul.w	r3, r1, r3
 8012788:	18d0      	adds	r0, r2, r3
 801278a:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801278c:	2000      	movs	r0, #0
 801278e:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012790:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012792:	1a5b      	subs	r3, r3, r1
 8012794:	441a      	add	r2, r3
 8012796:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012798:	23ff      	movs	r3, #255	@ 0xff
 801279a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801279e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80127a2:	b9fd      	cbnz	r5, 80127e4 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127a4:	6923      	ldr	r3, [r4, #16]
 80127a6:	b963      	cbnz	r3, 80127c2 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80127a8:	f7ff fe1e 	bl	80123e8 <vPortExitCritical>
}
 80127ac:	2001      	movs	r0, #1
 80127ae:	bd38      	pop	{r3, r4, r5, pc}
 80127b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127b4:	f383 8811 	msr	BASEPRI, r3
 80127b8:	f3bf 8f6f 	isb	sy
 80127bc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80127c0:	e7fe      	b.n	80127c0 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127c2:	f104 0010 	add.w	r0, r4, #16
 80127c6:	f001 f913 	bl	80139f0 <xTaskRemoveFromEventList>
 80127ca:	2800      	cmp	r0, #0
 80127cc:	d0ec      	beq.n	80127a8 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80127ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80127d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	e7e1      	b.n	80127a8 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80127e4:	f104 0010 	add.w	r0, r4, #16
 80127e8:	f7ff fd2a 	bl	8012240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80127ec:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80127f0:	f7ff fd26 	bl	8012240 <vListInitialise>
 80127f4:	e7d8      	b.n	80127a8 <xQueueGenericReset+0x36>

080127f6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80127f6:	b940      	cbnz	r0, 801280a <xQueueGenericCreateStatic+0x14>
 80127f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127fc:	f383 8811 	msr	BASEPRI, r3
 8012800:	f3bf 8f6f 	isb	sy
 8012804:	f3bf 8f4f 	dsb	sy
 8012808:	e7fe      	b.n	8012808 <xQueueGenericCreateStatic+0x12>
	{
 801280a:	b510      	push	{r4, lr}
 801280c:	b082      	sub	sp, #8
 801280e:	461c      	mov	r4, r3
 8012810:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8012812:	b154      	cbz	r4, 801282a <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012814:	b192      	cbz	r2, 801283c <xQueueGenericCreateStatic+0x46>
 8012816:	b989      	cbnz	r1, 801283c <xQueueGenericCreateStatic+0x46>
 8012818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801281c:	f383 8811 	msr	BASEPRI, r3
 8012820:	f3bf 8f6f 	isb	sy
 8012824:	f3bf 8f4f 	dsb	sy
 8012828:	e7fe      	b.n	8012828 <xQueueGenericCreateStatic+0x32>
 801282a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801282e:	f383 8811 	msr	BASEPRI, r3
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 801283a:	e7fe      	b.n	801283a <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801283c:	b94a      	cbnz	r2, 8012852 <xQueueGenericCreateStatic+0x5c>
 801283e:	b141      	cbz	r1, 8012852 <xQueueGenericCreateStatic+0x5c>
 8012840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012844:	f383 8811 	msr	BASEPRI, r3
 8012848:	f3bf 8f6f 	isb	sy
 801284c:	f3bf 8f4f 	dsb	sy
 8012850:	e7fe      	b.n	8012850 <xQueueGenericCreateStatic+0x5a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012852:	2050      	movs	r0, #80	@ 0x50
 8012854:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012856:	9801      	ldr	r0, [sp, #4]
 8012858:	2850      	cmp	r0, #80	@ 0x50
 801285a:	d008      	beq.n	801286e <xQueueGenericCreateStatic+0x78>
 801285c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012860:	f383 8811 	msr	BASEPRI, r3
 8012864:	f3bf 8f6f 	isb	sy
 8012868:	f3bf 8f4f 	dsb	sy
 801286c:	e7fe      	b.n	801286c <xQueueGenericCreateStatic+0x76>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801286e:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012870:	2001      	movs	r0, #1
 8012872:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012876:	2900      	cmp	r1, #0
 8012878:	bf08      	it	eq
 801287a:	4622      	moveq	r2, r4
 801287c:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801287e:	63e3      	str	r3, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012880:	6421      	str	r1, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012882:	4601      	mov	r1, r0
 8012884:	4620      	mov	r0, r4
 8012886:	f7ff ff74 	bl	8012772 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801288a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801288e:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8012892:	4620      	mov	r0, r4
 8012894:	b002      	add	sp, #8
 8012896:	bd10      	pop	{r4, pc}

08012898 <xQueueGenericCreate>:
	{
 8012898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801289a:	b940      	cbnz	r0, 80128ae <xQueueGenericCreate+0x16>
 801289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128a0:	f383 8811 	msr	BASEPRI, r3
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	e7fe      	b.n	80128ac <xQueueGenericCreate+0x14>
 80128ae:	460d      	mov	r5, r1
 80128b0:	4614      	mov	r4, r2
 80128b2:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128b4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80128b8:	3050      	adds	r0, #80	@ 0x50
 80128ba:	f7ff fbe5 	bl	8012088 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80128be:	4606      	mov	r6, r0
 80128c0:	b170      	cbz	r0, 80128e0 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80128c2:	2300      	movs	r3, #0
 80128c4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80128c8:	b165      	cbz	r5, 80128e4 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80128ca:	f100 0350 	add.w	r3, r0, #80	@ 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80128ce:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80128d0:	63f7      	str	r7, [r6, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80128d2:	6435      	str	r5, [r6, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80128d4:	2101      	movs	r1, #1
 80128d6:	4630      	mov	r0, r6
 80128d8:	f7ff ff4b 	bl	8012772 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80128dc:	f886 404c 	strb.w	r4, [r6, #76]	@ 0x4c
	}
 80128e0:	4630      	mov	r0, r6
 80128e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80128e4:	4603      	mov	r3, r0
 80128e6:	e7f2      	b.n	80128ce <xQueueGenericCreate+0x36>

080128e8 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80128e8:	b940      	cbnz	r0, 80128fc <xQueueCreateCountingSemaphoreStatic+0x14>
 80128ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128ee:	f383 8811 	msr	BASEPRI, r3
 80128f2:	f3bf 8f6f 	isb	sy
 80128f6:	f3bf 8f4f 	dsb	sy
 80128fa:	e7fe      	b.n	80128fa <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 80128fc:	b510      	push	{r4, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8012902:	4288      	cmp	r0, r1
 8012904:	d208      	bcs.n	8012918 <xQueueCreateCountingSemaphoreStatic+0x30>
 8012906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801290a:	f383 8811 	msr	BASEPRI, r3
 801290e:	f3bf 8f6f 	isb	sy
 8012912:	f3bf 8f4f 	dsb	sy
 8012916:	e7fe      	b.n	8012916 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012918:	2302      	movs	r3, #2
 801291a:	9300      	str	r3, [sp, #0]
 801291c:	4613      	mov	r3, r2
 801291e:	2200      	movs	r2, #0
 8012920:	4611      	mov	r1, r2
 8012922:	f7ff ff68 	bl	80127f6 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8012926:	b100      	cbz	r0, 801292a <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012928:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 801292a:	b002      	add	sp, #8
 801292c:	bd10      	pop	{r4, pc}

0801292e <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 801292e:	b940      	cbnz	r0, 8012942 <xQueueCreateCountingSemaphore+0x14>
 8012930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012934:	f383 8811 	msr	BASEPRI, r3
 8012938:	f3bf 8f6f 	isb	sy
 801293c:	f3bf 8f4f 	dsb	sy
 8012940:	e7fe      	b.n	8012940 <xQueueCreateCountingSemaphore+0x12>
	{
 8012942:	b510      	push	{r4, lr}
 8012944:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8012946:	4288      	cmp	r0, r1
 8012948:	d208      	bcs.n	801295c <xQueueCreateCountingSemaphore+0x2e>
 801294a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801294e:	f383 8811 	msr	BASEPRI, r3
 8012952:	f3bf 8f6f 	isb	sy
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	e7fe      	b.n	801295a <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801295c:	2202      	movs	r2, #2
 801295e:	2100      	movs	r1, #0
 8012960:	f7ff ff9a 	bl	8012898 <xQueueGenericCreate>
		if( xHandle != NULL )
 8012964:	b100      	cbz	r0, 8012968 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012966:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8012968:	bd10      	pop	{r4, pc}

0801296a <xQueueGenericSend>:
{
 801296a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801296e:	b085      	sub	sp, #20
 8012970:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8012972:	b188      	cbz	r0, 8012998 <xQueueGenericSend+0x2e>
 8012974:	460e      	mov	r6, r1
 8012976:	461d      	mov	r5, r3
 8012978:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801297a:	b1b1      	cbz	r1, 80129aa <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801297c:	2d02      	cmp	r5, #2
 801297e:	d120      	bne.n	80129c2 <xQueueGenericSend+0x58>
 8012980:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012982:	2b01      	cmp	r3, #1
 8012984:	d01d      	beq.n	80129c2 <xQueueGenericSend+0x58>
 8012986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801298a:	f383 8811 	msr	BASEPRI, r3
 801298e:	f3bf 8f6f 	isb	sy
 8012992:	f3bf 8f4f 	dsb	sy
 8012996:	e7fe      	b.n	8012996 <xQueueGenericSend+0x2c>
 8012998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801299c:	f383 8811 	msr	BASEPRI, r3
 80129a0:	f3bf 8f6f 	isb	sy
 80129a4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80129a8:	e7fe      	b.n	80129a8 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129aa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d0e5      	beq.n	801297c <xQueueGenericSend+0x12>
 80129b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b4:	f383 8811 	msr	BASEPRI, r3
 80129b8:	f3bf 8f6f 	isb	sy
 80129bc:	f3bf 8f4f 	dsb	sy
 80129c0:	e7fe      	b.n	80129c0 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80129c2:	f001 f8b5 	bl	8013b30 <xTaskGetSchedulerState>
 80129c6:	4680      	mov	r8, r0
 80129c8:	b950      	cbnz	r0, 80129e0 <xQueueGenericSend+0x76>
 80129ca:	9b01      	ldr	r3, [sp, #4]
 80129cc:	b153      	cbz	r3, 80129e4 <xQueueGenericSend+0x7a>
 80129ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d2:	f383 8811 	msr	BASEPRI, r3
 80129d6:	f3bf 8f6f 	isb	sy
 80129da:	f3bf 8f4f 	dsb	sy
 80129de:	e7fe      	b.n	80129de <xQueueGenericSend+0x74>
 80129e0:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 80129e4:	2700      	movs	r7, #0
 80129e6:	e03d      	b.n	8012a64 <xQueueGenericSend+0xfa>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80129e8:	462a      	mov	r2, r5
 80129ea:	4631      	mov	r1, r6
 80129ec:	4620      	mov	r0, r4
 80129ee:	f7ff fe3a 	bl	8012666 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80129f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80129f4:	b983      	cbnz	r3, 8012a18 <xQueueGenericSend+0xae>
					else if( xYieldRequired != pdFALSE )
 80129f6:	b148      	cbz	r0, 8012a0c <xQueueGenericSend+0xa2>
						queueYIELD_IF_USING_PREEMPTION();
 80129f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80129fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012a04:	f3bf 8f4f 	dsb	sy
 8012a08:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8012a0c:	f7ff fcec 	bl	80123e8 <vPortExitCritical>
				return pdPASS;
 8012a10:	2001      	movs	r0, #1
}
 8012a12:	b005      	add	sp, #20
 8012a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a18:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8012a1c:	f000 ffe8 	bl	80139f0 <xTaskRemoveFromEventList>
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d0f3      	beq.n	8012a0c <xQueueGenericSend+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8012a24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012a30:	f3bf 8f4f 	dsb	sy
 8012a34:	f3bf 8f6f 	isb	sy
 8012a38:	e7e8      	b.n	8012a0c <xQueueGenericSend+0xa2>
					taskEXIT_CRITICAL();
 8012a3a:	f7ff fcd5 	bl	80123e8 <vPortExitCritical>
					return errQUEUE_FULL;
 8012a3e:	2000      	movs	r0, #0
 8012a40:	e7e7      	b.n	8012a12 <xQueueGenericSend+0xa8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a42:	a802      	add	r0, sp, #8
 8012a44:	f001 f81a 	bl	8013a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a48:	e01a      	b.n	8012a80 <xQueueGenericSend+0x116>
		prvLockQueue( pxQueue );
 8012a4a:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8012a4e:	e023      	b.n	8012a98 <xQueueGenericSend+0x12e>
 8012a50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012a54:	e026      	b.n	8012aa4 <xQueueGenericSend+0x13a>
				prvUnlockQueue( pxQueue );
 8012a56:	4620      	mov	r0, r4
 8012a58:	f7ff fe50 	bl	80126fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a5c:	f000 fe4c 	bl	80136f8 <xTaskResumeAll>
 8012a60:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8012a64:	f7ff fc9e 	bl	80123a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012a68:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012a6a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d3bb      	bcc.n	80129e8 <xQueueGenericSend+0x7e>
 8012a70:	2d02      	cmp	r5, #2
 8012a72:	d0b9      	beq.n	80129e8 <xQueueGenericSend+0x7e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a74:	9b01      	ldr	r3, [sp, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d0df      	beq.n	8012a3a <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 8012a7a:	f1b8 0f00 	cmp.w	r8, #0
 8012a7e:	d0e0      	beq.n	8012a42 <xQueueGenericSend+0xd8>
		taskEXIT_CRITICAL();
 8012a80:	f7ff fcb2 	bl	80123e8 <vPortExitCritical>
		vTaskSuspendAll();
 8012a84:	f000 fd90 	bl	80135a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a88:	f7ff fc8c 	bl	80123a4 <vPortEnterCritical>
 8012a8c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8012a90:	b252      	sxtb	r2, r2
 8012a92:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012a96:	d0d8      	beq.n	8012a4a <xQueueGenericSend+0xe0>
 8012a98:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8012a9c:	b252      	sxtb	r2, r2
 8012a9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012aa2:	d0d5      	beq.n	8012a50 <xQueueGenericSend+0xe6>
 8012aa4:	f7ff fca0 	bl	80123e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012aa8:	a901      	add	r1, sp, #4
 8012aaa:	a802      	add	r0, sp, #8
 8012aac:	f000 fff2 	bl	8013a94 <xTaskCheckForTimeOut>
 8012ab0:	bb00      	cbnz	r0, 8012af4 <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012ab2:	f7ff fc77 	bl	80123a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012ab6:	f8d4 9038 	ldr.w	r9, [r4, #56]	@ 0x38
 8012aba:	f8d4 803c 	ldr.w	r8, [r4, #60]	@ 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8012abe:	f7ff fc93 	bl	80123e8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012ac2:	45c1      	cmp	r9, r8
 8012ac4:	d1c7      	bne.n	8012a56 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012ac6:	9901      	ldr	r1, [sp, #4]
 8012ac8:	f104 0010 	add.w	r0, r4, #16
 8012acc:	f000 ff5a 	bl	8013984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f7ff fe13 	bl	80126fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012ad6:	f000 fe0f 	bl	80136f8 <xTaskResumeAll>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	d1c0      	bne.n	8012a60 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8012ade:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ae6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	f3bf 8f6f 	isb	sy
 8012af2:	e7b5      	b.n	8012a60 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8012af4:	4620      	mov	r0, r4
 8012af6:	f7ff fe01 	bl	80126fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012afa:	f000 fdfd 	bl	80136f8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8012afe:	2000      	movs	r0, #0
 8012b00:	e787      	b.n	8012a12 <xQueueGenericSend+0xa8>

08012b02 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8012b02:	b148      	cbz	r0, 8012b18 <prvInitialiseMutex+0x16>
	{
 8012b04:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012b06:	2100      	movs	r1, #0
 8012b08:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012b0a:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012b0c:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012b0e:	460b      	mov	r3, r1
 8012b10:	460a      	mov	r2, r1
 8012b12:	f7ff ff2a 	bl	801296a <xQueueGenericSend>
	}
 8012b16:	bd08      	pop	{r3, pc}
 8012b18:	4770      	bx	lr

08012b1a <xQueueCreateMutex>:
	{
 8012b1a:	b510      	push	{r4, lr}
 8012b1c:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012b1e:	2100      	movs	r1, #0
 8012b20:	2001      	movs	r0, #1
 8012b22:	f7ff feb9 	bl	8012898 <xQueueGenericCreate>
 8012b26:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012b28:	f7ff ffeb 	bl	8012b02 <prvInitialiseMutex>
	}
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	bd10      	pop	{r4, pc}

08012b30 <xQueueCreateMutexStatic>:
	{
 8012b30:	b510      	push	{r4, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012b36:	9000      	str	r0, [sp, #0]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	4611      	mov	r1, r2
 8012b3c:	2001      	movs	r0, #1
 8012b3e:	f7ff fe5a 	bl	80127f6 <xQueueGenericCreateStatic>
 8012b42:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012b44:	f7ff ffdd 	bl	8012b02 <prvInitialiseMutex>
	}
 8012b48:	4620      	mov	r0, r4
 8012b4a:	b002      	add	sp, #8
 8012b4c:	bd10      	pop	{r4, pc}

08012b4e <xQueueGiveMutexRecursive>:
	{
 8012b4e:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8012b50:	b138      	cbz	r0, 8012b62 <xQueueGiveMutexRecursive+0x14>
 8012b52:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8012b54:	6885      	ldr	r5, [r0, #8]
 8012b56:	f000 ffe5 	bl	8013b24 <xTaskGetCurrentTaskHandle>
 8012b5a:	4285      	cmp	r5, r0
 8012b5c:	d00a      	beq.n	8012b74 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8012b5e:	2000      	movs	r0, #0
	}
 8012b60:	bd38      	pop	{r3, r4, r5, pc}
 8012b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b66:	f383 8811 	msr	BASEPRI, r3
 8012b6a:	f3bf 8f6f 	isb	sy
 8012b6e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8012b72:	e7fe      	b.n	8012b72 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8012b74:	68e3      	ldr	r3, [r4, #12]
 8012b76:	3b01      	subs	r3, #1
 8012b78:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8012b7a:	b10b      	cbz	r3, 8012b80 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8012b7c:	2001      	movs	r0, #1
		return xReturn;
 8012b7e:	e7ef      	b.n	8012b60 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8012b80:	461a      	mov	r2, r3
 8012b82:	4619      	mov	r1, r3
 8012b84:	4620      	mov	r0, r4
 8012b86:	f7ff fef0 	bl	801296a <xQueueGenericSend>
			xReturn = pdPASS;
 8012b8a:	2001      	movs	r0, #1
 8012b8c:	e7e8      	b.n	8012b60 <xQueueGiveMutexRecursive+0x12>

08012b8e <xQueueGenericSendFromISR>:
{
 8012b8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8012b92:	b190      	cbz	r0, 8012bba <xQueueGenericSendFromISR+0x2c>
 8012b94:	460f      	mov	r7, r1
 8012b96:	4616      	mov	r6, r2
 8012b98:	461c      	mov	r4, r3
 8012b9a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b9c:	b1b1      	cbz	r1, 8012bcc <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b9e:	2c02      	cmp	r4, #2
 8012ba0:	d120      	bne.n	8012be4 <xQueueGenericSendFromISR+0x56>
 8012ba2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d01d      	beq.n	8012be4 <xQueueGenericSendFromISR+0x56>
 8012ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bac:	f383 8811 	msr	BASEPRI, r3
 8012bb0:	f3bf 8f6f 	isb	sy
 8012bb4:	f3bf 8f4f 	dsb	sy
 8012bb8:	e7fe      	b.n	8012bb8 <xQueueGenericSendFromISR+0x2a>
 8012bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bbe:	f383 8811 	msr	BASEPRI, r3
 8012bc2:	f3bf 8f6f 	isb	sy
 8012bc6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8012bca:	e7fe      	b.n	8012bca <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012bcc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d0e5      	beq.n	8012b9e <xQueueGenericSendFromISR+0x10>
 8012bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd6:	f383 8811 	msr	BASEPRI, r3
 8012bda:	f3bf 8f6f 	isb	sy
 8012bde:	f3bf 8f4f 	dsb	sy
 8012be2:	e7fe      	b.n	8012be2 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012be4:	f7ff fd06 	bl	80125f4 <vPortValidateInterruptPriority>
	__asm volatile
 8012be8:	f3ef 8811 	mrs	r8, BASEPRI
 8012bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bf0:	f383 8811 	msr	BASEPRI, r3
 8012bf4:	f3bf 8f6f 	isb	sy
 8012bf8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012bfc:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8012bfe:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d306      	bcc.n	8012c12 <xQueueGenericSendFromISR+0x84>
 8012c04:	2c02      	cmp	r4, #2
 8012c06:	d004      	beq.n	8012c12 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8012c08:	2000      	movs	r0, #0
	__asm volatile
 8012c0a:	f388 8811 	msr	BASEPRI, r8
}
 8012c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8012c12:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8012c16:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c1a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012c1c:	4622      	mov	r2, r4
 8012c1e:	4639      	mov	r1, r7
 8012c20:	4628      	mov	r0, r5
 8012c22:	f7ff fd20 	bl	8012666 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8012c26:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012c2a:	d006      	beq.n	8012c3a <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012c2c:	f109 0301 	add.w	r3, r9, #1
 8012c30:	b25b      	sxtb	r3, r3
 8012c32:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8012c36:	2001      	movs	r0, #1
 8012c38:	e7e7      	b.n	8012c0a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c3a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012c3c:	b90b      	cbnz	r3, 8012c42 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8012c3e:	2001      	movs	r0, #1
 8012c40:	e7e3      	b.n	8012c0a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c42:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8012c46:	f000 fed3 	bl	80139f0 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8012c4a:	b11e      	cbz	r6, 8012c54 <xQueueGenericSendFromISR+0xc6>
 8012c4c:	b110      	cbz	r0, 8012c54 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012c4e:	2001      	movs	r0, #1
 8012c50:	6030      	str	r0, [r6, #0]
 8012c52:	e7da      	b.n	8012c0a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8012c54:	2001      	movs	r0, #1
 8012c56:	e7d8      	b.n	8012c0a <xQueueGenericSendFromISR+0x7c>

08012c58 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8012c58:	b168      	cbz	r0, 8012c76 <xQueueGiveFromISR+0x1e>
{
 8012c5a:	b570      	push	{r4, r5, r6, lr}
 8012c5c:	460c      	mov	r4, r1
 8012c5e:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8012c60:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8012c62:	b18b      	cbz	r3, 8012c88 <xQueueGiveFromISR+0x30>
	__asm volatile
 8012c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c68:	f383 8811 	msr	BASEPRI, r3
 8012c6c:	f3bf 8f6f 	isb	sy
 8012c70:	f3bf 8f4f 	dsb	sy
 8012c74:	e7fe      	b.n	8012c74 <xQueueGiveFromISR+0x1c>
 8012c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c7a:	f383 8811 	msr	BASEPRI, r3
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8012c86:	e7fe      	b.n	8012c86 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012c88:	6803      	ldr	r3, [r0, #0]
 8012c8a:	b1eb      	cbz	r3, 8012cc8 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c8c:	f7ff fcb2 	bl	80125f4 <vPortValidateInterruptPriority>
	__asm volatile
 8012c90:	f3ef 8611 	mrs	r6, BASEPRI
 8012c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c98:	f383 8811 	msr	BASEPRI, r3
 8012c9c:	f3bf 8f6f 	isb	sy
 8012ca0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ca4:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012ca6:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d926      	bls.n	8012cfa <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8012cac:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8012cb0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012cb2:	3201      	adds	r2, #1
 8012cb4:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8012cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cba:	d011      	beq.n	8012ce0 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	b25b      	sxtb	r3, r3
 8012cc0:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8012cc4:	2001      	movs	r0, #1
 8012cc6:	e019      	b.n	8012cfc <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012cc8:	6883      	ldr	r3, [r0, #8]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d0de      	beq.n	8012c8c <xQueueGiveFromISR+0x34>
	__asm volatile
 8012cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cd2:	f383 8811 	msr	BASEPRI, r3
 8012cd6:	f3bf 8f6f 	isb	sy
 8012cda:	f3bf 8f4f 	dsb	sy
 8012cde:	e7fe      	b.n	8012cde <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ce0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012ce2:	b90b      	cbnz	r3, 8012ce8 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8012ce4:	2001      	movs	r0, #1
 8012ce6:	e009      	b.n	8012cfc <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ce8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8012cec:	f000 fe80 	bl	80139f0 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8012cf0:	b13c      	cbz	r4, 8012d02 <xQueueGiveFromISR+0xaa>
 8012cf2:	b130      	cbz	r0, 8012d02 <xQueueGiveFromISR+0xaa>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012cf4:	2001      	movs	r0, #1
 8012cf6:	6020      	str	r0, [r4, #0]
 8012cf8:	e000      	b.n	8012cfc <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8012cfa:	2000      	movs	r0, #0
	__asm volatile
 8012cfc:	f386 8811 	msr	BASEPRI, r6
}
 8012d00:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8012d02:	2001      	movs	r0, #1
 8012d04:	e7fa      	b.n	8012cfc <xQueueGiveFromISR+0xa4>

08012d06 <xQueueReceive>:
{
 8012d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8012d0e:	b188      	cbz	r0, 8012d34 <xQueueReceive+0x2e>
 8012d10:	460e      	mov	r6, r1
 8012d12:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d14:	b1b9      	cbz	r1, 8012d46 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d16:	f000 ff0b 	bl	8013b30 <xTaskGetSchedulerState>
 8012d1a:	4680      	mov	r8, r0
 8012d1c:	b9f8      	cbnz	r0, 8012d5e <xQueueReceive+0x58>
 8012d1e:	9b01      	ldr	r3, [sp, #4]
 8012d20:	b1fb      	cbz	r3, 8012d62 <xQueueReceive+0x5c>
	__asm volatile
 8012d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d26:	f383 8811 	msr	BASEPRI, r3
 8012d2a:	f3bf 8f6f 	isb	sy
 8012d2e:	f3bf 8f4f 	dsb	sy
 8012d32:	e7fe      	b.n	8012d32 <xQueueReceive+0x2c>
 8012d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8012d44:	e7fe      	b.n	8012d44 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d46:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d0e4      	beq.n	8012d16 <xQueueReceive+0x10>
 8012d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d50:	f383 8811 	msr	BASEPRI, r3
 8012d54:	f3bf 8f6f 	isb	sy
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	e7fe      	b.n	8012d5c <xQueueReceive+0x56>
 8012d5e:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8012d62:	2700      	movs	r7, #0
 8012d64:	e03e      	b.n	8012de4 <xQueueReceive+0xde>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d66:	4631      	mov	r1, r6
 8012d68:	4620      	mov	r0, r4
 8012d6a:	f7ff fcb5 	bl	80126d8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d6e:	3d01      	subs	r5, #1
 8012d70:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d72:	6923      	ldr	r3, [r4, #16]
 8012d74:	b92b      	cbnz	r3, 8012d82 <xQueueReceive+0x7c>
				taskEXIT_CRITICAL();
 8012d76:	f7ff fb37 	bl	80123e8 <vPortExitCritical>
				return pdPASS;
 8012d7a:	2001      	movs	r0, #1
}
 8012d7c:	b004      	add	sp, #16
 8012d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d82:	f104 0010 	add.w	r0, r4, #16
 8012d86:	f000 fe33 	bl	80139f0 <xTaskRemoveFromEventList>
 8012d8a:	2800      	cmp	r0, #0
 8012d8c:	d0f3      	beq.n	8012d76 <xQueueReceive+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 8012d8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d96:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012d9a:	f3bf 8f4f 	dsb	sy
 8012d9e:	f3bf 8f6f 	isb	sy
 8012da2:	e7e8      	b.n	8012d76 <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 8012da4:	f7ff fb20 	bl	80123e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8012da8:	2000      	movs	r0, #0
 8012daa:	e7e7      	b.n	8012d7c <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012dac:	a802      	add	r0, sp, #8
 8012dae:	f000 fe65 	bl	8013a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012db2:	e022      	b.n	8012dfa <xQueueReceive+0xf4>
		prvLockQueue( pxQueue );
 8012db4:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8012db8:	e02b      	b.n	8012e12 <xQueueReceive+0x10c>
 8012dba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012dbe:	e02e      	b.n	8012e1e <xQueueReceive+0x118>
				prvUnlockQueue( pxQueue );
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f7ff fc9b 	bl	80126fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012dc6:	f000 fc97 	bl	80136f8 <xTaskResumeAll>
 8012dca:	e009      	b.n	8012de0 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8012dcc:	4620      	mov	r0, r4
 8012dce:	f7ff fc95 	bl	80126fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012dd2:	f000 fc91 	bl	80136f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f7ff fc3a 	bl	8012650 <prvIsQueueEmpty>
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	d142      	bne.n	8012e66 <xQueueReceive+0x160>
 8012de0:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8012de4:	f7ff fade 	bl	80123a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012de8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012dea:	2d00      	cmp	r5, #0
 8012dec:	d1bb      	bne.n	8012d66 <xQueueReceive+0x60>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012dee:	9b01      	ldr	r3, [sp, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d0d7      	beq.n	8012da4 <xQueueReceive+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 8012df4:	f1b8 0f00 	cmp.w	r8, #0
 8012df8:	d0d8      	beq.n	8012dac <xQueueReceive+0xa6>
		taskEXIT_CRITICAL();
 8012dfa:	f7ff faf5 	bl	80123e8 <vPortExitCritical>
		vTaskSuspendAll();
 8012dfe:	f000 fbd3 	bl	80135a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e02:	f7ff facf 	bl	80123a4 <vPortEnterCritical>
 8012e06:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012e0a:	b25b      	sxtb	r3, r3
 8012e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e10:	d0d0      	beq.n	8012db4 <xQueueReceive+0xae>
 8012e12:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012e16:	b25b      	sxtb	r3, r3
 8012e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e1c:	d0cd      	beq.n	8012dba <xQueueReceive+0xb4>
 8012e1e:	f7ff fae3 	bl	80123e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012e22:	a901      	add	r1, sp, #4
 8012e24:	a802      	add	r0, sp, #8
 8012e26:	f000 fe35 	bl	8013a94 <xTaskCheckForTimeOut>
 8012e2a:	2800      	cmp	r0, #0
 8012e2c:	d1ce      	bne.n	8012dcc <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f7ff fc0e 	bl	8012650 <prvIsQueueEmpty>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d0c3      	beq.n	8012dc0 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012e38:	9901      	ldr	r1, [sp, #4]
 8012e3a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8012e3e:	f000 fda1 	bl	8013984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012e42:	4620      	mov	r0, r4
 8012e44:	f7ff fc5a 	bl	80126fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012e48:	f000 fc56 	bl	80136f8 <xTaskResumeAll>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	d1c7      	bne.n	8012de0 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8012e50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e58:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012e5c:	f3bf 8f4f 	dsb	sy
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	e7bc      	b.n	8012de0 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8012e66:	2000      	movs	r0, #0
 8012e68:	e788      	b.n	8012d7c <xQueueReceive+0x76>

08012e6a <xQueueSemaphoreTake>:
{
 8012e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e6c:	b085      	sub	sp, #20
 8012e6e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8012e70:	b158      	cbz	r0, 8012e8a <xQueueSemaphoreTake+0x20>
 8012e72:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e74:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8012e76:	b18b      	cbz	r3, 8012e9c <xQueueSemaphoreTake+0x32>
 8012e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e7c:	f383 8811 	msr	BASEPRI, r3
 8012e80:	f3bf 8f6f 	isb	sy
 8012e84:	f3bf 8f4f 	dsb	sy
 8012e88:	e7fe      	b.n	8012e88 <xQueueSemaphoreTake+0x1e>
 8012e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e8e:	f383 8811 	msr	BASEPRI, r3
 8012e92:	f3bf 8f6f 	isb	sy
 8012e96:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8012e9a:	e7fe      	b.n	8012e9a <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012e9c:	f000 fe48 	bl	8013b30 <xTaskGetSchedulerState>
 8012ea0:	4607      	mov	r7, r0
 8012ea2:	b950      	cbnz	r0, 8012eba <xQueueSemaphoreTake+0x50>
 8012ea4:	9b01      	ldr	r3, [sp, #4]
 8012ea6:	b163      	cbz	r3, 8012ec2 <xQueueSemaphoreTake+0x58>
 8012ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eac:	f383 8811 	msr	BASEPRI, r3
 8012eb0:	f3bf 8f6f 	isb	sy
 8012eb4:	f3bf 8f4f 	dsb	sy
 8012eb8:	e7fe      	b.n	8012eb8 <xQueueSemaphoreTake+0x4e>
 8012eba:	2600      	movs	r6, #0
 8012ebc:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 8012ebe:	2500      	movs	r5, #0
 8012ec0:	e053      	b.n	8012f6a <xQueueSemaphoreTake+0x100>
 8012ec2:	4606      	mov	r6, r0
 8012ec4:	e7fb      	b.n	8012ebe <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012ec6:	3b01      	subs	r3, #1
 8012ec8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012eca:	6823      	ldr	r3, [r4, #0]
 8012ecc:	b13b      	cbz	r3, 8012ede <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ece:	6923      	ldr	r3, [r4, #16]
 8012ed0:	b94b      	cbnz	r3, 8012ee6 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 8012ed2:	f7ff fa89 	bl	80123e8 <vPortExitCritical>
				return pdPASS;
 8012ed6:	2601      	movs	r6, #1
}
 8012ed8:	4630      	mov	r0, r6
 8012eda:	b005      	add	sp, #20
 8012edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012ede:	f000 ff17 	bl	8013d10 <pvTaskIncrementMutexHeldCount>
 8012ee2:	60a0      	str	r0, [r4, #8]
 8012ee4:	e7f3      	b.n	8012ece <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ee6:	f104 0010 	add.w	r0, r4, #16
 8012eea:	f000 fd81 	bl	80139f0 <xTaskRemoveFromEventList>
 8012eee:	2800      	cmp	r0, #0
 8012ef0:	d0ef      	beq.n	8012ed2 <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 8012ef2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012efa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012efe:	f3bf 8f4f 	dsb	sy
 8012f02:	f3bf 8f6f 	isb	sy
 8012f06:	e7e4      	b.n	8012ed2 <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012f08:	b146      	cbz	r6, 8012f1c <xQueueSemaphoreTake+0xb2>
 8012f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f0e:	f383 8811 	msr	BASEPRI, r3
 8012f12:	f3bf 8f6f 	isb	sy
 8012f16:	f3bf 8f4f 	dsb	sy
 8012f1a:	e7fe      	b.n	8012f1a <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 8012f1c:	f7ff fa64 	bl	80123e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8012f20:	e7da      	b.n	8012ed8 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f22:	a802      	add	r0, sp, #8
 8012f24:	f000 fdaa 	bl	8013a7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f28:	e029      	b.n	8012f7e <xQueueSemaphoreTake+0x114>
		prvLockQueue( pxQueue );
 8012f2a:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8012f2e:	e032      	b.n	8012f96 <xQueueSemaphoreTake+0x12c>
 8012f30:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8012f34:	e035      	b.n	8012fa2 <xQueueSemaphoreTake+0x138>
						taskENTER_CRITICAL();
 8012f36:	f7ff fa35 	bl	80123a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012f3a:	68a0      	ldr	r0, [r4, #8]
 8012f3c:	f000 fe08 	bl	8013b50 <xTaskPriorityInherit>
 8012f40:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8012f42:	f7ff fa51 	bl	80123e8 <vPortExitCritical>
 8012f46:	e03c      	b.n	8012fc2 <xQueueSemaphoreTake+0x158>
				prvUnlockQueue( pxQueue );
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f7ff fbd7 	bl	80126fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f4e:	f000 fbd3 	bl	80136f8 <xTaskResumeAll>
 8012f52:	e009      	b.n	8012f68 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 8012f54:	4620      	mov	r0, r4
 8012f56:	f7ff fbd1 	bl	80126fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f5a:	f000 fbcd 	bl	80136f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f5e:	4620      	mov	r0, r4
 8012f60:	f7ff fb76 	bl	8012650 <prvIsQueueEmpty>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	d143      	bne.n	8012ff0 <xQueueSemaphoreTake+0x186>
 8012f68:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8012f6a:	f7ff fa1b 	bl	80123a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012f6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d1a8      	bne.n	8012ec6 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f74:	9b01      	ldr	r3, [sp, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d0c6      	beq.n	8012f08 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 8012f7a:	2f00      	cmp	r7, #0
 8012f7c:	d0d1      	beq.n	8012f22 <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 8012f7e:	f7ff fa33 	bl	80123e8 <vPortExitCritical>
		vTaskSuspendAll();
 8012f82:	f000 fb11 	bl	80135a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f86:	f7ff fa0d 	bl	80123a4 <vPortEnterCritical>
 8012f8a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012f8e:	b25b      	sxtb	r3, r3
 8012f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f94:	d0c9      	beq.n	8012f2a <xQueueSemaphoreTake+0xc0>
 8012f96:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012f9a:	b25b      	sxtb	r3, r3
 8012f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa0:	d0c6      	beq.n	8012f30 <xQueueSemaphoreTake+0xc6>
 8012fa2:	f7ff fa21 	bl	80123e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012fa6:	a901      	add	r1, sp, #4
 8012fa8:	a802      	add	r0, sp, #8
 8012faa:	f000 fd73 	bl	8013a94 <xTaskCheckForTimeOut>
 8012fae:	2800      	cmp	r0, #0
 8012fb0:	d1d0      	bne.n	8012f54 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f7ff fb4c 	bl	8012650 <prvIsQueueEmpty>
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d0c5      	beq.n	8012f48 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012fbc:	6823      	ldr	r3, [r4, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d0b9      	beq.n	8012f36 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012fc2:	9901      	ldr	r1, [sp, #4]
 8012fc4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8012fc8:	f000 fcdc 	bl	8013984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012fcc:	4620      	mov	r0, r4
 8012fce:	f7ff fb95 	bl	80126fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012fd2:	f000 fb91 	bl	80136f8 <xTaskResumeAll>
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	d1c6      	bne.n	8012f68 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 8012fda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fe2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012fe6:	f3bf 8f4f 	dsb	sy
 8012fea:	f3bf 8f6f 	isb	sy
 8012fee:	e7bb      	b.n	8012f68 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8012ff0:	2e00      	cmp	r6, #0
 8012ff2:	f43f af71 	beq.w	8012ed8 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 8012ff6:	f7ff f9d5 	bl	80123a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012ffa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012ffc:	b119      	cbz	r1, 8013006 <xQueueSemaphoreTake+0x19c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012ffe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013000:	6819      	ldr	r1, [r3, #0]
 8013002:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013006:	68a0      	ldr	r0, [r4, #8]
 8013008:	f000 fe32 	bl	8013c70 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801300c:	f7ff f9ec 	bl	80123e8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8013010:	2600      	movs	r6, #0
 8013012:	e761      	b.n	8012ed8 <xQueueSemaphoreTake+0x6e>

08013014 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8013014:	b180      	cbz	r0, 8013038 <xQueueTakeMutexRecursive+0x24>
	{
 8013016:	b570      	push	{r4, r5, r6, lr}
 8013018:	460c      	mov	r4, r1
 801301a:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801301c:	6886      	ldr	r6, [r0, #8]
 801301e:	f000 fd81 	bl	8013b24 <xTaskGetCurrentTaskHandle>
 8013022:	4286      	cmp	r6, r0
 8013024:	d011      	beq.n	801304a <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8013026:	4621      	mov	r1, r4
 8013028:	4628      	mov	r0, r5
 801302a:	f7ff ff1e 	bl	8012e6a <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 801302e:	b180      	cbz	r0, 8013052 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8013030:	68eb      	ldr	r3, [r5, #12]
 8013032:	3301      	adds	r3, #1
 8013034:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8013036:	e00c      	b.n	8013052 <xQueueTakeMutexRecursive+0x3e>
 8013038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801303c:	f383 8811 	msr	BASEPRI, r3
 8013040:	f3bf 8f6f 	isb	sy
 8013044:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8013048:	e7fe      	b.n	8013048 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801304a:	68eb      	ldr	r3, [r5, #12]
 801304c:	3301      	adds	r3, #1
 801304e:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8013050:	2001      	movs	r0, #1
	}
 8013052:	bd70      	pop	{r4, r5, r6, pc}

08013054 <xQueueReceiveFromISR>:
{
 8013054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013058:	b1b0      	cbz	r0, 8013088 <xQueueReceiveFromISR+0x34>
 801305a:	460d      	mov	r5, r1
 801305c:	4690      	mov	r8, r2
 801305e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013060:	b1d9      	cbz	r1, 801309a <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013062:	f7ff fac7 	bl	80125f4 <vPortValidateInterruptPriority>
	__asm volatile
 8013066:	f3ef 8711 	mrs	r7, BASEPRI
 801306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801306e:	f383 8811 	msr	BASEPRI, r3
 8013072:	f3bf 8f6f 	isb	sy
 8013076:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801307a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801307c:	b9ce      	cbnz	r6, 80130b2 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 801307e:	2000      	movs	r0, #0
	__asm volatile
 8013080:	f387 8811 	msr	BASEPRI, r7
}
 8013084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8013088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801308c:	f383 8811 	msr	BASEPRI, r3
 8013090:	f3bf 8f6f 	isb	sy
 8013094:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8013098:	e7fe      	b.n	8013098 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801309a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801309c:	2b00      	cmp	r3, #0
 801309e:	d0e0      	beq.n	8013062 <xQueueReceiveFromISR+0xe>
 80130a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130a4:	f383 8811 	msr	BASEPRI, r3
 80130a8:	f3bf 8f6f 	isb	sy
 80130ac:	f3bf 8f4f 	dsb	sy
 80130b0:	e7fe      	b.n	80130b0 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80130b2:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 80130b6:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80130ba:	4629      	mov	r1, r5
 80130bc:	4620      	mov	r0, r4
 80130be:	f7ff fb0b 	bl	80126d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80130c2:	1e73      	subs	r3, r6, #1
 80130c4:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80130c6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80130ca:	d006      	beq.n	80130da <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80130cc:	f109 0301 	add.w	r3, r9, #1
 80130d0:	b25b      	sxtb	r3, r3
 80130d2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 80130d6:	2001      	movs	r0, #1
 80130d8:	e7d2      	b.n	8013080 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80130da:	6923      	ldr	r3, [r4, #16]
 80130dc:	b90b      	cbnz	r3, 80130e2 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80130de:	2001      	movs	r0, #1
 80130e0:	e7ce      	b.n	8013080 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130e2:	f104 0010 	add.w	r0, r4, #16
 80130e6:	f000 fc83 	bl	80139f0 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80130ea:	f1b8 0f00 	cmp.w	r8, #0
 80130ee:	d004      	beq.n	80130fa <xQueueReceiveFromISR+0xa6>
 80130f0:	b118      	cbz	r0, 80130fa <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80130f2:	2001      	movs	r0, #1
 80130f4:	f8c8 0000 	str.w	r0, [r8]
 80130f8:	e7c2      	b.n	8013080 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80130fa:	2001      	movs	r0, #1
 80130fc:	e7c0      	b.n	8013080 <xQueueReceiveFromISR+0x2c>
	...

08013100 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013100:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013102:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013104:	4c08      	ldr	r4, [pc, #32]	@ (8013128 <vQueueAddToRegistry+0x28>)
 8013106:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 801310a:	b12a      	cbz	r2, 8013118 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801310c:	3301      	adds	r3, #1
 801310e:	2b08      	cmp	r3, #8
 8013110:	d1f9      	bne.n	8013106 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013116:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013118:	4a03      	ldr	r2, [pc, #12]	@ (8013128 <vQueueAddToRegistry+0x28>)
 801311a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801311e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013122:	6050      	str	r0, [r2, #4]
				break;
 8013124:	e7f5      	b.n	8013112 <vQueueAddToRegistry+0x12>
 8013126:	bf00      	nop
 8013128:	24061b44 	.word	0x24061b44

0801312c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801312c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801312e:	4908      	ldr	r1, [pc, #32]	@ (8013150 <vQueueUnregisterQueue+0x24>)
 8013130:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8013134:	4282      	cmp	r2, r0
 8013136:	d003      	beq.n	8013140 <vQueueUnregisterQueue+0x14>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013138:	3301      	adds	r3, #1
 801313a:	2b08      	cmp	r3, #8
 801313c:	d1f8      	bne.n	8013130 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801313e:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013140:	4a04      	ldr	r2, [pc, #16]	@ (8013154 <vQueueUnregisterQueue+0x28>)
 8013142:	2100      	movs	r1, #0
 8013144:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013148:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801314c:	6051      	str	r1, [r2, #4]
				break;
 801314e:	4770      	bx	lr
 8013150:	24061b48 	.word	0x24061b48
 8013154:	24061b44 	.word	0x24061b44

08013158 <vQueueDelete>:
	configASSERT( pxQueue );
 8013158:	b138      	cbz	r0, 801316a <vQueueDelete+0x12>
{
 801315a:	b510      	push	{r4, lr}
 801315c:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 801315e:	f7ff ffe5 	bl	801312c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013162:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8013166:	b14b      	cbz	r3, 801317c <vQueueDelete+0x24>
}
 8013168:	bd10      	pop	{r4, pc}
 801316a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801316e:	f383 8811 	msr	BASEPRI, r3
 8013172:	f3bf 8f6f 	isb	sy
 8013176:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801317a:	e7fe      	b.n	801317a <vQueueDelete+0x22>
			vPortFree( pxQueue );
 801317c:	4620      	mov	r0, r4
 801317e:	f7ff f821 	bl	80121c4 <vPortFree>
}
 8013182:	e7f1      	b.n	8013168 <vQueueDelete+0x10>

08013184 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013184:	b570      	push	{r4, r5, r6, lr}
 8013186:	4604      	mov	r4, r0
 8013188:	460d      	mov	r5, r1
 801318a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801318c:	f7ff f90a 	bl	80123a4 <vPortEnterCritical>
 8013190:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013194:	b25b      	sxtb	r3, r3
 8013196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801319a:	d00d      	beq.n	80131b8 <vQueueWaitForMessageRestricted+0x34>
 801319c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80131a0:	b25b      	sxtb	r3, r3
 80131a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a6:	d00b      	beq.n	80131c0 <vQueueWaitForMessageRestricted+0x3c>
 80131a8:	f7ff f91e 	bl	80123e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80131ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80131ae:	b15b      	cbz	r3, 80131c8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80131b0:	4620      	mov	r0, r4
 80131b2:	f7ff faa3 	bl	80126fc <prvUnlockQueue>
	}
 80131b6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80131b8:	2300      	movs	r3, #0
 80131ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80131be:	e7ed      	b.n	801319c <vQueueWaitForMessageRestricted+0x18>
 80131c0:	2300      	movs	r3, #0
 80131c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80131c6:	e7ef      	b.n	80131a8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80131c8:	4632      	mov	r2, r6
 80131ca:	4629      	mov	r1, r5
 80131cc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80131d0:	f000 fbf0 	bl	80139b4 <vTaskPlaceOnEventListRestricted>
 80131d4:	e7ec      	b.n	80131b0 <vQueueWaitForMessageRestricted+0x2c>
	...

080131d8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131d8:	4b08      	ldr	r3, [pc, #32]	@ (80131fc <prvResetNextTaskUnblockTime+0x24>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	b923      	cbnz	r3, 80131ea <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80131e0:	4b07      	ldr	r3, [pc, #28]	@ (8013200 <prvResetNextTaskUnblockTime+0x28>)
 80131e2:	f04f 32ff 	mov.w	r2, #4294967295
 80131e6:	601a      	str	r2, [r3, #0]
 80131e8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131ea:	4b04      	ldr	r3, [pc, #16]	@ (80131fc <prvResetNextTaskUnblockTime+0x24>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	685a      	ldr	r2, [r3, #4]
 80131f4:	4b02      	ldr	r3, [pc, #8]	@ (8013200 <prvResetNextTaskUnblockTime+0x28>)
 80131f6:	601a      	str	r2, [r3, #0]
	}
}
 80131f8:	4770      	bx	lr
 80131fa:	bf00      	nop
 80131fc:	24061bf0 	.word	0x24061bf0
 8013200:	24061b88 	.word	0x24061b88

08013204 <prvInitialiseNewTask>:
{
 8013204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013208:	4606      	mov	r6, r0
 801320a:	4689      	mov	r9, r1
 801320c:	461f      	mov	r7, r3
 801320e:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8013212:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013214:	0095      	lsls	r5, r2, #2
 8013216:	462a      	mov	r2, r5
 8013218:	21a5      	movs	r1, #165	@ 0xa5
 801321a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801321c:	f016 fc74 	bl	8029b08 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013220:	3d04      	subs	r5, #4
 8013222:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013224:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013226:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 801322a:	f1b9 0f00 	cmp.w	r9, #0
 801322e:	d039      	beq.n	80132a4 <prvInitialiseNewTask+0xa0>
 8013230:	f109 3cff 	add.w	ip, r9, #4294967295
 8013234:	f104 0e33 	add.w	lr, r4, #51	@ 0x33
 8013238:	f109 010f 	add.w	r1, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801323c:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8013240:	f80e 2f01 	strb.w	r2, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8013244:	b10a      	cbz	r2, 801324a <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013246:	458c      	cmp	ip, r1
 8013248:	d1f8      	bne.n	801323c <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801324a:	2300      	movs	r3, #0
 801324c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013250:	9b08      	ldr	r3, [sp, #32]
 8013252:	2b37      	cmp	r3, #55	@ 0x37
 8013254:	bf28      	it	cs
 8013256:	2337      	movcs	r3, #55	@ 0x37
 8013258:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 801325a:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801325c:	64e3      	str	r3, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801325e:	f04f 0a00 	mov.w	sl, #0
 8013262:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013266:	1d20      	adds	r0, r4, #4
 8013268:	f7fe fff5 	bl	8012256 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801326c:	f104 0018 	add.w	r0, r4, #24
 8013270:	f7fe fff1 	bl	8012256 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013274:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013276:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
 801327a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801327c:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 801327e:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8013282:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013286:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801328a:	463a      	mov	r2, r7
 801328c:	4631      	mov	r1, r6
 801328e:	4628      	mov	r0, r5
 8013290:	f7ff f85a 	bl	8012348 <pxPortInitialiseStack>
 8013294:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8013296:	f1b8 0f00 	cmp.w	r8, #0
 801329a:	d001      	beq.n	80132a0 <prvInitialiseNewTask+0x9c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801329c:	f8c8 4000 	str.w	r4, [r8]
}
 80132a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80132a4:	2300      	movs	r3, #0
 80132a6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80132aa:	e7d1      	b.n	8013250 <prvInitialiseNewTask+0x4c>

080132ac <prvAddNewTaskToReadyList>:
{
 80132ac:	b570      	push	{r4, r5, r6, lr}
 80132ae:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80132b0:	f7ff f878 	bl	80123a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80132b4:	4a30      	ldr	r2, [pc, #192]	@ (8013378 <prvAddNewTaskToReadyList+0xcc>)
 80132b6:	6813      	ldr	r3, [r2, #0]
 80132b8:	3301      	adds	r3, #1
 80132ba:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80132bc:	4b2f      	ldr	r3, [pc, #188]	@ (801337c <prvAddNewTaskToReadyList+0xd0>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	b15b      	cbz	r3, 80132da <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80132c2:	4b2f      	ldr	r3, [pc, #188]	@ (8013380 <prvAddNewTaskToReadyList+0xd4>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	b96b      	cbnz	r3, 80132e4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80132c8:	4b2c      	ldr	r3, [pc, #176]	@ (801337c <prvAddNewTaskToReadyList+0xd0>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132ce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d807      	bhi.n	80132e4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80132d4:	4b29      	ldr	r3, [pc, #164]	@ (801337c <prvAddNewTaskToReadyList+0xd0>)
 80132d6:	601d      	str	r5, [r3, #0]
 80132d8:	e004      	b.n	80132e4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80132da:	4b28      	ldr	r3, [pc, #160]	@ (801337c <prvAddNewTaskToReadyList+0xd0>)
 80132dc:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80132de:	6813      	ldr	r3, [r2, #0]
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	d029      	beq.n	8013338 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80132e4:	4a27      	ldr	r2, [pc, #156]	@ (8013384 <prvAddNewTaskToReadyList+0xd8>)
 80132e6:	6813      	ldr	r3, [r2, #0]
 80132e8:	3301      	adds	r3, #1
 80132ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80132ec:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80132ee:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80132f0:	4b25      	ldr	r3, [pc, #148]	@ (8013388 <prvAddNewTaskToReadyList+0xdc>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	4298      	cmp	r0, r3
 80132f6:	d901      	bls.n	80132fc <prvAddNewTaskToReadyList+0x50>
 80132f8:	4b23      	ldr	r3, [pc, #140]	@ (8013388 <prvAddNewTaskToReadyList+0xdc>)
 80132fa:	6018      	str	r0, [r3, #0]
 80132fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013300:	1d29      	adds	r1, r5, #4
 8013302:	4b22      	ldr	r3, [pc, #136]	@ (801338c <prvAddNewTaskToReadyList+0xe0>)
 8013304:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013308:	f7fe ffa8 	bl	801225c <vListInsertEnd>
	taskEXIT_CRITICAL();
 801330c:	f7ff f86c 	bl	80123e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8013310:	4b1b      	ldr	r3, [pc, #108]	@ (8013380 <prvAddNewTaskToReadyList+0xd4>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	b17b      	cbz	r3, 8013336 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013316:	4b19      	ldr	r3, [pc, #100]	@ (801337c <prvAddNewTaskToReadyList+0xd0>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801331c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801331e:	429a      	cmp	r2, r3
 8013320:	d209      	bcs.n	8013336 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8013322:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801332a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	f3bf 8f6f 	isb	sy
}
 8013336:	bd70      	pop	{r4, r5, r6, pc}
 8013338:	4c14      	ldr	r4, [pc, #80]	@ (801338c <prvAddNewTaskToReadyList+0xe0>)
 801333a:	f504 668c 	add.w	r6, r4, #1120	@ 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801333e:	4620      	mov	r0, r4
 8013340:	f7fe ff7e 	bl	8012240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013344:	3414      	adds	r4, #20
 8013346:	42b4      	cmp	r4, r6
 8013348:	d1f9      	bne.n	801333e <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 801334a:	4e11      	ldr	r6, [pc, #68]	@ (8013390 <prvAddNewTaskToReadyList+0xe4>)
 801334c:	4630      	mov	r0, r6
 801334e:	f7fe ff77 	bl	8012240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013352:	4c10      	ldr	r4, [pc, #64]	@ (8013394 <prvAddNewTaskToReadyList+0xe8>)
 8013354:	4620      	mov	r0, r4
 8013356:	f7fe ff73 	bl	8012240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801335a:	480f      	ldr	r0, [pc, #60]	@ (8013398 <prvAddNewTaskToReadyList+0xec>)
 801335c:	f7fe ff70 	bl	8012240 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8013360:	480e      	ldr	r0, [pc, #56]	@ (801339c <prvAddNewTaskToReadyList+0xf0>)
 8013362:	f7fe ff6d 	bl	8012240 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8013366:	480e      	ldr	r0, [pc, #56]	@ (80133a0 <prvAddNewTaskToReadyList+0xf4>)
 8013368:	f7fe ff6a 	bl	8012240 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801336c:	4b0d      	ldr	r3, [pc, #52]	@ (80133a4 <prvAddNewTaskToReadyList+0xf8>)
 801336e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013370:	4b0d      	ldr	r3, [pc, #52]	@ (80133a8 <prvAddNewTaskToReadyList+0xfc>)
 8013372:	601c      	str	r4, [r3, #0]
}
 8013374:	e7b6      	b.n	80132e4 <prvAddNewTaskToReadyList+0x38>
 8013376:	bf00      	nop
 8013378:	24061ba8 	.word	0x24061ba8
 801337c:	2406207c 	.word	0x2406207c
 8013380:	24061b9c 	.word	0x24061b9c
 8013384:	24061b8c 	.word	0x24061b8c
 8013388:	24061ba0 	.word	0x24061ba0
 801338c:	24061c1c 	.word	0x24061c1c
 8013390:	24061c08 	.word	0x24061c08
 8013394:	24061bf4 	.word	0x24061bf4
 8013398:	24061bd8 	.word	0x24061bd8
 801339c:	24061bc4 	.word	0x24061bc4
 80133a0:	24061bac 	.word	0x24061bac
 80133a4:	24061bf0 	.word	0x24061bf0
 80133a8:	24061bec 	.word	0x24061bec

080133ac <prvDeleteTCB>:
	{
 80133ac:	b510      	push	{r4, lr}
 80133ae:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80133b0:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80133b4:	b163      	cbz	r3, 80133d0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d011      	beq.n	80133de <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80133ba:	2b02      	cmp	r3, #2
 80133bc:	d00e      	beq.n	80133dc <prvDeleteTCB+0x30>
 80133be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	e7fe      	b.n	80133ce <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80133d0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80133d2:	f7fe fef7 	bl	80121c4 <vPortFree>
				vPortFree( pxTCB );
 80133d6:	4620      	mov	r0, r4
 80133d8:	f7fe fef4 	bl	80121c4 <vPortFree>
	}
 80133dc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80133de:	f7fe fef1 	bl	80121c4 <vPortFree>
 80133e2:	e7fb      	b.n	80133dc <prvDeleteTCB+0x30>

080133e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	4604      	mov	r4, r0
 80133e8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80133ea:	4b17      	ldr	r3, [pc, #92]	@ (8013448 <prvAddCurrentTaskToDelayedList+0x64>)
 80133ec:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80133ee:	4b17      	ldr	r3, [pc, #92]	@ (801344c <prvAddCurrentTaskToDelayedList+0x68>)
 80133f0:	6818      	ldr	r0, [r3, #0]
 80133f2:	3004      	adds	r0, #4
 80133f4:	f7fe ff56 	bl	80122a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80133f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80133fc:	d100      	bne.n	8013400 <prvAddCurrentTaskToDelayedList+0x1c>
 80133fe:	b96d      	cbnz	r5, 801341c <prvAddCurrentTaskToDelayedList+0x38>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013400:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013402:	4b12      	ldr	r3, [pc, #72]	@ (801344c <prvAddCurrentTaskToDelayedList+0x68>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8013408:	42a6      	cmp	r6, r4
 801340a:	d90e      	bls.n	801342a <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801340c:	4b10      	ldr	r3, [pc, #64]	@ (8013450 <prvAddCurrentTaskToDelayedList+0x6c>)
 801340e:	6818      	ldr	r0, [r3, #0]
 8013410:	4b0e      	ldr	r3, [pc, #56]	@ (801344c <prvAddCurrentTaskToDelayedList+0x68>)
 8013412:	6819      	ldr	r1, [r3, #0]
 8013414:	3104      	adds	r1, #4
 8013416:	f7fe ff2c 	bl	8012272 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801341a:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801341c:	4b0b      	ldr	r3, [pc, #44]	@ (801344c <prvAddCurrentTaskToDelayedList+0x68>)
 801341e:	6819      	ldr	r1, [r3, #0]
 8013420:	3104      	adds	r1, #4
 8013422:	480c      	ldr	r0, [pc, #48]	@ (8013454 <prvAddCurrentTaskToDelayedList+0x70>)
 8013424:	f7fe ff1a 	bl	801225c <vListInsertEnd>
 8013428:	e7f7      	b.n	801341a <prvAddCurrentTaskToDelayedList+0x36>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801342a:	4b0b      	ldr	r3, [pc, #44]	@ (8013458 <prvAddCurrentTaskToDelayedList+0x74>)
 801342c:	6818      	ldr	r0, [r3, #0]
 801342e:	4b07      	ldr	r3, [pc, #28]	@ (801344c <prvAddCurrentTaskToDelayedList+0x68>)
 8013430:	6819      	ldr	r1, [r3, #0]
 8013432:	3104      	adds	r1, #4
 8013434:	f7fe ff1d 	bl	8012272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013438:	4b08      	ldr	r3, [pc, #32]	@ (801345c <prvAddCurrentTaskToDelayedList+0x78>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	42a3      	cmp	r3, r4
 801343e:	d9ec      	bls.n	801341a <prvAddCurrentTaskToDelayedList+0x36>
					xNextTaskUnblockTime = xTimeToWake;
 8013440:	4b06      	ldr	r3, [pc, #24]	@ (801345c <prvAddCurrentTaskToDelayedList+0x78>)
 8013442:	601c      	str	r4, [r3, #0]
}
 8013444:	e7e9      	b.n	801341a <prvAddCurrentTaskToDelayedList+0x36>
 8013446:	bf00      	nop
 8013448:	24061ba4 	.word	0x24061ba4
 801344c:	2406207c 	.word	0x2406207c
 8013450:	24061bec 	.word	0x24061bec
 8013454:	24061bac 	.word	0x24061bac
 8013458:	24061bf0 	.word	0x24061bf0
 801345c:	24061b88 	.word	0x24061b88

08013460 <prvIdleTask>:
{
 8013460:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013462:	4c16      	ldr	r4, [pc, #88]	@ (80134bc <prvIdleTask+0x5c>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013464:	4f16      	ldr	r7, [pc, #88]	@ (80134c0 <prvIdleTask+0x60>)
				--uxCurrentNumberOfTasks;
 8013466:	4e17      	ldr	r6, [pc, #92]	@ (80134c4 <prvIdleTask+0x64>)
 8013468:	e00b      	b.n	8013482 <prvIdleTask+0x22>
				taskYIELD();
 801346a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801346e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013472:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8013476:	f3bf 8f4f 	dsb	sy
 801347a:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 801347e:	f7ed f93b 	bl	80006f8 <vApplicationIdleHook>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013482:	6823      	ldr	r3, [r4, #0]
 8013484:	b1a3      	cbz	r3, 80134b0 <prvIdleTask+0x50>
			taskENTER_CRITICAL();
 8013486:	f7fe ff8d 	bl	80123a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801348e:	1d28      	adds	r0, r5, #4
 8013490:	f7fe ff08 	bl	80122a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013494:	6833      	ldr	r3, [r6, #0]
 8013496:	3b01      	subs	r3, #1
 8013498:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 801349a:	6823      	ldr	r3, [r4, #0]
 801349c:	3b01      	subs	r3, #1
 801349e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80134a0:	f7fe ffa2 	bl	80123e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80134a4:	4628      	mov	r0, r5
 80134a6:	f7ff ff81 	bl	80133ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80134aa:	6823      	ldr	r3, [r4, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d1ea      	bne.n	8013486 <prvIdleTask+0x26>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80134b0:	4b05      	ldr	r3, [pc, #20]	@ (80134c8 <prvIdleTask+0x68>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d8d8      	bhi.n	801346a <prvIdleTask+0xa>
 80134b8:	e7e1      	b.n	801347e <prvIdleTask+0x1e>
 80134ba:	bf00      	nop
 80134bc:	24061bc0 	.word	0x24061bc0
 80134c0:	24061bc4 	.word	0x24061bc4
 80134c4:	24061ba8 	.word	0x24061ba8
 80134c8:	24061c1c 	.word	0x24061c1c

080134cc <xTaskCreateStatic>:
	{
 80134cc:	b530      	push	{r4, r5, lr}
 80134ce:	b087      	sub	sp, #28
 80134d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80134d2:	b17c      	cbz	r4, 80134f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80134d4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80134d6:	b1b5      	cbz	r5, 8013506 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80134d8:	2560      	movs	r5, #96	@ 0x60
 80134da:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80134dc:	9d04      	ldr	r5, [sp, #16]
 80134de:	2d60      	cmp	r5, #96	@ 0x60
 80134e0:	d01a      	beq.n	8013518 <xTaskCreateStatic+0x4c>
 80134e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134e6:	f383 8811 	msr	BASEPRI, r3
 80134ea:	f3bf 8f6f 	isb	sy
 80134ee:	f3bf 8f4f 	dsb	sy
 80134f2:	e7fe      	b.n	80134f2 <xTaskCreateStatic+0x26>
 80134f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134f8:	f383 8811 	msr	BASEPRI, r3
 80134fc:	f3bf 8f6f 	isb	sy
 8013500:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8013504:	e7fe      	b.n	8013504 <xTaskCreateStatic+0x38>
 8013506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801350a:	f383 8811 	msr	BASEPRI, r3
 801350e:	f3bf 8f6f 	isb	sy
 8013512:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8013516:	e7fe      	b.n	8013516 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013518:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801351a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801351c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801351e:	2402      	movs	r4, #2
 8013520:	f885 405d 	strb.w	r4, [r5, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013524:	2400      	movs	r4, #0
 8013526:	9403      	str	r4, [sp, #12]
 8013528:	9502      	str	r5, [sp, #8]
 801352a:	ac05      	add	r4, sp, #20
 801352c:	9401      	str	r4, [sp, #4]
 801352e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013530:	9400      	str	r4, [sp, #0]
 8013532:	f7ff fe67 	bl	8013204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013536:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8013538:	f7ff feb8 	bl	80132ac <prvAddNewTaskToReadyList>
	}
 801353c:	9805      	ldr	r0, [sp, #20]
 801353e:	b007      	add	sp, #28
 8013540:	bd30      	pop	{r4, r5, pc}

08013542 <xTaskCreate>:
	{
 8013542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013546:	b085      	sub	sp, #20
 8013548:	4607      	mov	r7, r0
 801354a:	4688      	mov	r8, r1
 801354c:	4614      	mov	r4, r2
 801354e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013550:	0090      	lsls	r0, r2, #2
 8013552:	f7fe fd99 	bl	8012088 <pvPortMalloc>
			if( pxStack != NULL )
 8013556:	b308      	cbz	r0, 801359c <xTaskCreate+0x5a>
 8013558:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801355a:	2060      	movs	r0, #96	@ 0x60
 801355c:	f7fe fd94 	bl	8012088 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8013560:	4605      	mov	r5, r0
 8013562:	b1a8      	cbz	r0, 8013590 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8013564:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013568:	2300      	movs	r3, #0
 801356a:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801356e:	9303      	str	r3, [sp, #12]
 8013570:	9002      	str	r0, [sp, #8]
 8013572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013574:	9301      	str	r3, [sp, #4]
 8013576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	4633      	mov	r3, r6
 801357c:	4622      	mov	r2, r4
 801357e:	4641      	mov	r1, r8
 8013580:	4638      	mov	r0, r7
 8013582:	f7ff fe3f 	bl	8013204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013586:	4628      	mov	r0, r5
 8013588:	f7ff fe90 	bl	80132ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801358c:	2001      	movs	r0, #1
 801358e:	e007      	b.n	80135a0 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8013590:	4648      	mov	r0, r9
 8013592:	f7fe fe17 	bl	80121c4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013596:	f04f 30ff 	mov.w	r0, #4294967295
 801359a:	e001      	b.n	80135a0 <xTaskCreate+0x5e>
 801359c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80135a0:	b005      	add	sp, #20
 80135a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080135a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80135a8:	4a02      	ldr	r2, [pc, #8]	@ (80135b4 <vTaskSuspendAll+0xc>)
 80135aa:	6813      	ldr	r3, [r2, #0]
 80135ac:	3301      	adds	r3, #1
 80135ae:	6013      	str	r3, [r2, #0]
}
 80135b0:	4770      	bx	lr
 80135b2:	bf00      	nop
 80135b4:	24061b84 	.word	0x24061b84

080135b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80135b8:	4b01      	ldr	r3, [pc, #4]	@ (80135c0 <xTaskGetTickCount+0x8>)
 80135ba:	6818      	ldr	r0, [r3, #0]
}
 80135bc:	4770      	bx	lr
 80135be:	bf00      	nop
 80135c0:	24061ba4 	.word	0x24061ba4

080135c4 <xTaskIncrementTick>:
{
 80135c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80135c8:	4b40      	ldr	r3, [pc, #256]	@ (80136cc <xTaskIncrementTick+0x108>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d174      	bne.n	80136ba <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80135d0:	4b3f      	ldr	r3, [pc, #252]	@ (80136d0 <xTaskIncrementTick+0x10c>)
 80135d2:	681e      	ldr	r6, [r3, #0]
 80135d4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80135d6:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80135d8:	b9c6      	cbnz	r6, 801360c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 80135da:	4b3e      	ldr	r3, [pc, #248]	@ (80136d4 <xTaskIncrementTick+0x110>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	b143      	cbz	r3, 80135f4 <xTaskIncrementTick+0x30>
 80135e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135e6:	f383 8811 	msr	BASEPRI, r3
 80135ea:	f3bf 8f6f 	isb	sy
 80135ee:	f3bf 8f4f 	dsb	sy
 80135f2:	e7fe      	b.n	80135f2 <xTaskIncrementTick+0x2e>
 80135f4:	4a37      	ldr	r2, [pc, #220]	@ (80136d4 <xTaskIncrementTick+0x110>)
 80135f6:	6811      	ldr	r1, [r2, #0]
 80135f8:	4b37      	ldr	r3, [pc, #220]	@ (80136d8 <xTaskIncrementTick+0x114>)
 80135fa:	6818      	ldr	r0, [r3, #0]
 80135fc:	6010      	str	r0, [r2, #0]
 80135fe:	6019      	str	r1, [r3, #0]
 8013600:	4a36      	ldr	r2, [pc, #216]	@ (80136dc <xTaskIncrementTick+0x118>)
 8013602:	6813      	ldr	r3, [r2, #0]
 8013604:	3301      	adds	r3, #1
 8013606:	6013      	str	r3, [r2, #0]
 8013608:	f7ff fde6 	bl	80131d8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801360c:	4b34      	ldr	r3, [pc, #208]	@ (80136e0 <xTaskIncrementTick+0x11c>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	42b3      	cmp	r3, r6
 8013612:	d840      	bhi.n	8013696 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013614:	4b2f      	ldr	r3, [pc, #188]	@ (80136d4 <xTaskIncrementTick+0x110>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	b13b      	cbz	r3, 801362c <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 801361c:	2500      	movs	r5, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801361e:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 80136d4 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8013622:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 80136f4 <xTaskIncrementTick+0x130>
 8013626:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80136e8 <xTaskIncrementTick+0x124>
 801362a:	e01b      	b.n	8013664 <xTaskIncrementTick+0xa0>
BaseType_t xSwitchRequired = pdFALSE;
 801362c:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801362e:	4b2c      	ldr	r3, [pc, #176]	@ (80136e0 <xTaskIncrementTick+0x11c>)
 8013630:	f04f 32ff 	mov.w	r2, #4294967295
 8013634:	601a      	str	r2, [r3, #0]
					break;
 8013636:	e02f      	b.n	8013698 <xTaskIncrementTick+0xd4>
						xNextTaskUnblockTime = xItemValue;
 8013638:	4a29      	ldr	r2, [pc, #164]	@ (80136e0 <xTaskIncrementTick+0x11c>)
 801363a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801363c:	e02c      	b.n	8013698 <xTaskIncrementTick+0xd4>
					prvAddTaskToReadyList( pxTCB );
 801363e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013642:	4639      	mov	r1, r7
 8013644:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8013648:	f7fe fe08 	bl	801225c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801364c:	4b25      	ldr	r3, [pc, #148]	@ (80136e4 <xTaskIncrementTick+0x120>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8013654:	429a      	cmp	r2, r3
 8013656:	bf28      	it	cs
 8013658:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801365a:	f8d8 3000 	ldr.w	r3, [r8]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d0e4      	beq.n	801362e <xTaskIncrementTick+0x6a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013664:	f8d8 3000 	ldr.w	r3, [r8]
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801366c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 801366e:	429e      	cmp	r6, r3
 8013670:	d3e2      	bcc.n	8013638 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013672:	1d27      	adds	r7, r4, #4
 8013674:	4638      	mov	r0, r7
 8013676:	f7fe fe15 	bl	80122a4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801367a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801367c:	b11b      	cbz	r3, 8013686 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801367e:	f104 0018 	add.w	r0, r4, #24
 8013682:	f7fe fe0f 	bl	80122a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013686:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013688:	f8d9 3000 	ldr.w	r3, [r9]
 801368c:	4298      	cmp	r0, r3
 801368e:	d9d6      	bls.n	801363e <xTaskIncrementTick+0x7a>
 8013690:	f8c9 0000 	str.w	r0, [r9]
 8013694:	e7d3      	b.n	801363e <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8013696:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013698:	4b12      	ldr	r3, [pc, #72]	@ (80136e4 <xTaskIncrementTick+0x120>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801369e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	4a10      	ldr	r2, [pc, #64]	@ (80136e8 <xTaskIncrementTick+0x124>)
 80136a6:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 80136a8:	2b02      	cmp	r3, #2
 80136aa:	bf28      	it	cs
 80136ac:	2501      	movcs	r5, #1
			if( xYieldPending != pdFALSE )
 80136ae:	4b0f      	ldr	r3, [pc, #60]	@ (80136ec <xTaskIncrementTick+0x128>)
 80136b0:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	bf18      	it	ne
 80136b6:	2501      	movne	r5, #1
 80136b8:	e004      	b.n	80136c4 <xTaskIncrementTick+0x100>
		++xPendedTicks;
 80136ba:	4a0d      	ldr	r2, [pc, #52]	@ (80136f0 <xTaskIncrementTick+0x12c>)
 80136bc:	6813      	ldr	r3, [r2, #0]
 80136be:	3301      	adds	r3, #1
 80136c0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80136c2:	2500      	movs	r5, #0
}
 80136c4:	4628      	mov	r0, r5
 80136c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ca:	bf00      	nop
 80136cc:	24061b84 	.word	0x24061b84
 80136d0:	24061ba4 	.word	0x24061ba4
 80136d4:	24061bf0 	.word	0x24061bf0
 80136d8:	24061bec 	.word	0x24061bec
 80136dc:	24061b90 	.word	0x24061b90
 80136e0:	24061b88 	.word	0x24061b88
 80136e4:	2406207c 	.word	0x2406207c
 80136e8:	24061c1c 	.word	0x24061c1c
 80136ec:	24061b94 	.word	0x24061b94
 80136f0:	24061b98 	.word	0x24061b98
 80136f4:	24061ba0 	.word	0x24061ba0

080136f8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80136f8:	4b37      	ldr	r3, [pc, #220]	@ (80137d8 <xTaskResumeAll+0xe0>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	b943      	cbnz	r3, 8013710 <xTaskResumeAll+0x18>
 80136fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013702:	f383 8811 	msr	BASEPRI, r3
 8013706:	f3bf 8f6f 	isb	sy
 801370a:	f3bf 8f4f 	dsb	sy
 801370e:	e7fe      	b.n	801370e <xTaskResumeAll+0x16>
{
 8013710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8013714:	f7fe fe46 	bl	80123a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8013718:	4b2f      	ldr	r3, [pc, #188]	@ (80137d8 <xTaskResumeAll+0xe0>)
 801371a:	681a      	ldr	r2, [r3, #0]
 801371c:	3a01      	subs	r2, #1
 801371e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d14f      	bne.n	80137c6 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013726:	4b2d      	ldr	r3, [pc, #180]	@ (80137dc <xTaskResumeAll+0xe4>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d051      	beq.n	80137d2 <xTaskResumeAll+0xda>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801372e:	4b2c      	ldr	r3, [pc, #176]	@ (80137e0 <xTaskResumeAll+0xe8>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	b343      	cbz	r3, 8013786 <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013734:	4e2a      	ldr	r6, [pc, #168]	@ (80137e0 <xTaskResumeAll+0xe8>)
					prvAddTaskToReadyList( pxTCB );
 8013736:	4f2b      	ldr	r7, [pc, #172]	@ (80137e4 <xTaskResumeAll+0xec>)
 8013738:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 80137f4 <xTaskResumeAll+0xfc>
 801373c:	e001      	b.n	8013742 <xTaskResumeAll+0x4a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801373e:	6833      	ldr	r3, [r6, #0]
 8013740:	b1fb      	cbz	r3, 8013782 <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013742:	68f3      	ldr	r3, [r6, #12]
 8013744:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013746:	f104 0018 	add.w	r0, r4, #24
 801374a:	f7fe fdab 	bl	80122a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801374e:	1d25      	adds	r5, r4, #4
 8013750:	4628      	mov	r0, r5
 8013752:	f7fe fda7 	bl	80122a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013756:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	4298      	cmp	r0, r3
 801375c:	d900      	bls.n	8013760 <xTaskResumeAll+0x68>
 801375e:	6038      	str	r0, [r7, #0]
 8013760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013764:	4629      	mov	r1, r5
 8013766:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801376a:	f7fe fd77 	bl	801225c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801376e:	4b1e      	ldr	r3, [pc, #120]	@ (80137e8 <xTaskResumeAll+0xf0>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013776:	429a      	cmp	r2, r3
 8013778:	d3e1      	bcc.n	801373e <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 801377a:	4b1c      	ldr	r3, [pc, #112]	@ (80137ec <xTaskResumeAll+0xf4>)
 801377c:	2201      	movs	r2, #1
 801377e:	601a      	str	r2, [r3, #0]
 8013780:	e7dd      	b.n	801373e <xTaskResumeAll+0x46>
					prvResetNextTaskUnblockTime();
 8013782:	f7ff fd29 	bl	80131d8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013786:	4b1a      	ldr	r3, [pc, #104]	@ (80137f0 <xTaskResumeAll+0xf8>)
 8013788:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 801378a:	b16c      	cbz	r4, 80137a8 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 801378c:	4e17      	ldr	r6, [pc, #92]	@ (80137ec <xTaskResumeAll+0xf4>)
 801378e:	2501      	movs	r5, #1
 8013790:	e001      	b.n	8013796 <xTaskResumeAll+0x9e>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013792:	3c01      	subs	r4, #1
 8013794:	d005      	beq.n	80137a2 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
 8013796:	f7ff ff15 	bl	80135c4 <xTaskIncrementTick>
 801379a:	2800      	cmp	r0, #0
 801379c:	d0f9      	beq.n	8013792 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
 801379e:	6035      	str	r5, [r6, #0]
 80137a0:	e7f7      	b.n	8013792 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 80137a2:	4b13      	ldr	r3, [pc, #76]	@ (80137f0 <xTaskResumeAll+0xf8>)
 80137a4:	2200      	movs	r2, #0
 80137a6:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 80137a8:	4b10      	ldr	r3, [pc, #64]	@ (80137ec <xTaskResumeAll+0xf4>)
 80137aa:	681c      	ldr	r4, [r3, #0]
 80137ac:	b164      	cbz	r4, 80137c8 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 80137ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80137b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80137c2:	2401      	movs	r4, #1
 80137c4:	e000      	b.n	80137c8 <xTaskResumeAll+0xd0>
BaseType_t xAlreadyYielded = pdFALSE;
 80137c6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80137c8:	f7fe fe0e 	bl	80123e8 <vPortExitCritical>
}
 80137cc:	4620      	mov	r0, r4
 80137ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 80137d2:	2400      	movs	r4, #0
 80137d4:	e7f8      	b.n	80137c8 <xTaskResumeAll+0xd0>
 80137d6:	bf00      	nop
 80137d8:	24061b84 	.word	0x24061b84
 80137dc:	24061ba8 	.word	0x24061ba8
 80137e0:	24061bd8 	.word	0x24061bd8
 80137e4:	24061ba0 	.word	0x24061ba0
 80137e8:	2406207c 	.word	0x2406207c
 80137ec:	24061b94 	.word	0x24061b94
 80137f0:	24061b98 	.word	0x24061b98
 80137f4:	24061c1c 	.word	0x24061c1c

080137f8 <vTaskSetApplicationTaskTag>:
	{
 80137f8:	b538      	push	{r3, r4, r5, lr}
 80137fa:	460c      	mov	r4, r1
		if( xTask == NULL )
 80137fc:	4605      	mov	r5, r0
 80137fe:	b128      	cbz	r0, 801380c <vTaskSetApplicationTaskTag+0x14>
		taskENTER_CRITICAL();
 8013800:	f7fe fdd0 	bl	80123a4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8013804:	656c      	str	r4, [r5, #84]	@ 0x54
		taskEXIT_CRITICAL();
 8013806:	f7fe fdef 	bl	80123e8 <vPortExitCritical>
	}
 801380a:	bd38      	pop	{r3, r4, r5, pc}
			xTCB = ( TCB_t * ) pxCurrentTCB;
 801380c:	4b01      	ldr	r3, [pc, #4]	@ (8013814 <vTaskSetApplicationTaskTag+0x1c>)
 801380e:	681d      	ldr	r5, [r3, #0]
 8013810:	e7f6      	b.n	8013800 <vTaskSetApplicationTaskTag+0x8>
 8013812:	bf00      	nop
 8013814:	2406207c 	.word	0x2406207c

08013818 <xTaskCallApplicationTaskHook>:
	{
 8013818:	b508      	push	{r3, lr}
		if( xTask == NULL )
 801381a:	4603      	mov	r3, r0
 801381c:	b120      	cbz	r0, 8013828 <xTaskCallApplicationTaskHook+0x10>
		if( xTCB->pxTaskTag != NULL )
 801381e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013820:	b12b      	cbz	r3, 801382e <xTaskCallApplicationTaskHook+0x16>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8013822:	4608      	mov	r0, r1
 8013824:	4798      	blx	r3
	}
 8013826:	bd08      	pop	{r3, pc}
			xTCB = pxCurrentTCB;
 8013828:	4b02      	ldr	r3, [pc, #8]	@ (8013834 <xTaskCallApplicationTaskHook+0x1c>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	e7f7      	b.n	801381e <xTaskCallApplicationTaskHook+0x6>
			xReturn = pdFAIL;
 801382e:	2000      	movs	r0, #0
		return xReturn;
 8013830:	e7f9      	b.n	8013826 <xTaskCallApplicationTaskHook+0xe>
 8013832:	bf00      	nop
 8013834:	2406207c 	.word	0x2406207c

08013838 <vTaskStartScheduler>:
{
 8013838:	b510      	push	{r4, lr}
 801383a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801383c:	2400      	movs	r4, #0
 801383e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013840:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013842:	aa07      	add	r2, sp, #28
 8013844:	a906      	add	r1, sp, #24
 8013846:	a805      	add	r0, sp, #20
 8013848:	f7fe fbd6 	bl	8011ff8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801384c:	9b05      	ldr	r3, [sp, #20]
 801384e:	9302      	str	r3, [sp, #8]
 8013850:	9b06      	ldr	r3, [sp, #24]
 8013852:	9301      	str	r3, [sp, #4]
 8013854:	9400      	str	r4, [sp, #0]
 8013856:	4623      	mov	r3, r4
 8013858:	9a07      	ldr	r2, [sp, #28]
 801385a:	4917      	ldr	r1, [pc, #92]	@ (80138b8 <vTaskStartScheduler+0x80>)
 801385c:	4817      	ldr	r0, [pc, #92]	@ (80138bc <vTaskStartScheduler+0x84>)
 801385e:	f7ff fe35 	bl	80134cc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8013862:	b338      	cbz	r0, 80138b4 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8013864:	f000 fabe 	bl	8013de4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8013868:	2801      	cmp	r0, #1
 801386a:	d00b      	beq.n	8013884 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801386c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013870:	d120      	bne.n	80138b4 <vTaskStartScheduler+0x7c>
 8013872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013876:	f383 8811 	msr	BASEPRI, r3
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	f3bf 8f4f 	dsb	sy
 8013882:	e7fe      	b.n	8013882 <vTaskStartScheduler+0x4a>
 8013884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013888:	f383 8811 	msr	BASEPRI, r3
 801388c:	f3bf 8f6f 	isb	sy
 8013890:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8013894:	4b0a      	ldr	r3, [pc, #40]	@ (80138c0 <vTaskStartScheduler+0x88>)
 8013896:	f04f 32ff 	mov.w	r2, #4294967295
 801389a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801389c:	4b09      	ldr	r3, [pc, #36]	@ (80138c4 <vTaskStartScheduler+0x8c>)
 801389e:	2201      	movs	r2, #1
 80138a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80138a2:	4621      	mov	r1, r4
 80138a4:	4b08      	ldr	r3, [pc, #32]	@ (80138c8 <vTaskStartScheduler+0x90>)
 80138a6:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 80138a8:	4b08      	ldr	r3, [pc, #32]	@ (80138cc <vTaskStartScheduler+0x94>)
 80138aa:	6818      	ldr	r0, [r3, #0]
 80138ac:	f7ff ffb4 	bl	8013818 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 80138b0:	f7fe fe12 	bl	80124d8 <xPortStartScheduler>
}
 80138b4:	b008      	add	sp, #32
 80138b6:	bd10      	pop	{r4, pc}
 80138b8:	0802dd74 	.word	0x0802dd74
 80138bc:	08013461 	.word	0x08013461
 80138c0:	24061b88 	.word	0x24061b88
 80138c4:	24061b9c 	.word	0x24061b9c
 80138c8:	24061ba4 	.word	0x24061ba4
 80138cc:	2406207c 	.word	0x2406207c

080138d0 <vTaskSwitchContext>:
{
 80138d0:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80138d2:	4b27      	ldr	r3, [pc, #156]	@ (8013970 <vTaskSwitchContext+0xa0>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	b11b      	cbz	r3, 80138e0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80138d8:	4b26      	ldr	r3, [pc, #152]	@ (8013974 <vTaskSwitchContext+0xa4>)
 80138da:	2201      	movs	r2, #1
 80138dc:	601a      	str	r2, [r3, #0]
}
 80138de:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 80138e0:	4b24      	ldr	r3, [pc, #144]	@ (8013974 <vTaskSwitchContext+0xa4>)
 80138e2:	2200      	movs	r2, #0
 80138e4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80138e6:	4b24      	ldr	r3, [pc, #144]	@ (8013978 <vTaskSwitchContext+0xa8>)
 80138e8:	6818      	ldr	r0, [r3, #0]
 80138ea:	2101      	movs	r1, #1
 80138ec:	f7ff ff94 	bl	8013818 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138f0:	4b22      	ldr	r3, [pc, #136]	@ (801397c <vTaskSwitchContext+0xac>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80138f8:	0092      	lsls	r2, r2, #2
 80138fa:	4921      	ldr	r1, [pc, #132]	@ (8013980 <vTaskSwitchContext+0xb0>)
 80138fc:	588a      	ldr	r2, [r1, r2]
 80138fe:	b98a      	cbnz	r2, 8013924 <vTaskSwitchContext+0x54>
 8013900:	b13b      	cbz	r3, 8013912 <vTaskSwitchContext+0x42>
 8013902:	3b01      	subs	r3, #1
 8013904:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013908:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801390c:	b952      	cbnz	r2, 8013924 <vTaskSwitchContext+0x54>
 801390e:	2b00      	cmp	r3, #0
 8013910:	d1f7      	bne.n	8013902 <vTaskSwitchContext+0x32>
 8013912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	e7fe      	b.n	8013922 <vTaskSwitchContext+0x52>
 8013924:	4a16      	ldr	r2, [pc, #88]	@ (8013980 <vTaskSwitchContext+0xb0>)
 8013926:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801392a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801392e:	6848      	ldr	r0, [r1, #4]
 8013930:	6840      	ldr	r0, [r0, #4]
 8013932:	6048      	str	r0, [r1, #4]
 8013934:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8013938:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801393c:	3208      	adds	r2, #8
 801393e:	4290      	cmp	r0, r2
 8013940:	d00f      	beq.n	8013962 <vTaskSwitchContext+0x92>
 8013942:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8013946:	4a0e      	ldr	r2, [pc, #56]	@ (8013980 <vTaskSwitchContext+0xb0>)
 8013948:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801394c:	6852      	ldr	r2, [r2, #4]
 801394e:	68d1      	ldr	r1, [r2, #12]
 8013950:	4a09      	ldr	r2, [pc, #36]	@ (8013978 <vTaskSwitchContext+0xa8>)
 8013952:	6011      	str	r1, [r2, #0]
 8013954:	4909      	ldr	r1, [pc, #36]	@ (801397c <vTaskSwitchContext+0xac>)
 8013956:	600b      	str	r3, [r1, #0]
		traceTASK_SWITCHED_IN();
 8013958:	6810      	ldr	r0, [r2, #0]
 801395a:	2100      	movs	r1, #0
 801395c:	f7ff ff5c 	bl	8013818 <xTaskCallApplicationTaskHook>
}
 8013960:	e7bd      	b.n	80138de <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013962:	6840      	ldr	r0, [r0, #4]
 8013964:	4a06      	ldr	r2, [pc, #24]	@ (8013980 <vTaskSwitchContext+0xb0>)
 8013966:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801396a:	6050      	str	r0, [r2, #4]
 801396c:	e7e9      	b.n	8013942 <vTaskSwitchContext+0x72>
 801396e:	bf00      	nop
 8013970:	24061b84 	.word	0x24061b84
 8013974:	24061b94 	.word	0x24061b94
 8013978:	2406207c 	.word	0x2406207c
 801397c:	24061ba0 	.word	0x24061ba0
 8013980:	24061c1c 	.word	0x24061c1c

08013984 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8013984:	b158      	cbz	r0, 801399e <vTaskPlaceOnEventList+0x1a>
{
 8013986:	b510      	push	{r4, lr}
 8013988:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801398a:	4a09      	ldr	r2, [pc, #36]	@ (80139b0 <vTaskPlaceOnEventList+0x2c>)
 801398c:	6811      	ldr	r1, [r2, #0]
 801398e:	3118      	adds	r1, #24
 8013990:	f7fe fc6f 	bl	8012272 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013994:	2101      	movs	r1, #1
 8013996:	4620      	mov	r0, r4
 8013998:	f7ff fd24 	bl	80133e4 <prvAddCurrentTaskToDelayedList>
}
 801399c:	bd10      	pop	{r4, pc}
 801399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139a2:	f383 8811 	msr	BASEPRI, r3
 80139a6:	f3bf 8f6f 	isb	sy
 80139aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80139ae:	e7fe      	b.n	80139ae <vTaskPlaceOnEventList+0x2a>
 80139b0:	2406207c 	.word	0x2406207c

080139b4 <vTaskPlaceOnEventListRestricted>:
	{
 80139b4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80139b6:	b178      	cbz	r0, 80139d8 <vTaskPlaceOnEventListRestricted+0x24>
 80139b8:	460d      	mov	r5, r1
 80139ba:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80139bc:	4a0b      	ldr	r2, [pc, #44]	@ (80139ec <vTaskPlaceOnEventListRestricted+0x38>)
 80139be:	6811      	ldr	r1, [r2, #0]
 80139c0:	3118      	adds	r1, #24
 80139c2:	f7fe fc4b 	bl	801225c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80139c6:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80139c8:	4621      	mov	r1, r4
 80139ca:	bf0c      	ite	eq
 80139cc:	4628      	moveq	r0, r5
 80139ce:	f04f 30ff 	movne.w	r0, #4294967295
 80139d2:	f7ff fd07 	bl	80133e4 <prvAddCurrentTaskToDelayedList>
	}
 80139d6:	bd38      	pop	{r3, r4, r5, pc}
 80139d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139dc:	f383 8811 	msr	BASEPRI, r3
 80139e0:	f3bf 8f6f 	isb	sy
 80139e4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80139e8:	e7fe      	b.n	80139e8 <vTaskPlaceOnEventListRestricted+0x34>
 80139ea:	bf00      	nop
 80139ec:	2406207c 	.word	0x2406207c

080139f0 <xTaskRemoveFromEventList>:
{
 80139f0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139f2:	68c3      	ldr	r3, [r0, #12]
 80139f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80139f6:	b324      	cbz	r4, 8013a42 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80139f8:	f104 0518 	add.w	r5, r4, #24
 80139fc:	4628      	mov	r0, r5
 80139fe:	f7fe fc51 	bl	80122a4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a02:	4b18      	ldr	r3, [pc, #96]	@ (8013a64 <xTaskRemoveFromEventList+0x74>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	bb2b      	cbnz	r3, 8013a54 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013a08:	1d25      	adds	r5, r4, #4
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	f7fe fc4a 	bl	80122a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013a10:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013a12:	4b15      	ldr	r3, [pc, #84]	@ (8013a68 <xTaskRemoveFromEventList+0x78>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	4298      	cmp	r0, r3
 8013a18:	d901      	bls.n	8013a1e <xTaskRemoveFromEventList+0x2e>
 8013a1a:	4b13      	ldr	r3, [pc, #76]	@ (8013a68 <xTaskRemoveFromEventList+0x78>)
 8013a1c:	6018      	str	r0, [r3, #0]
 8013a1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013a22:	4629      	mov	r1, r5
 8013a24:	4b11      	ldr	r3, [pc, #68]	@ (8013a6c <xTaskRemoveFromEventList+0x7c>)
 8013a26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013a2a:	f7fe fc17 	bl	801225c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013a2e:	4b10      	ldr	r3, [pc, #64]	@ (8013a70 <xTaskRemoveFromEventList+0x80>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d911      	bls.n	8013a5e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8013a3a:	2001      	movs	r0, #1
 8013a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8013a74 <xTaskRemoveFromEventList+0x84>)
 8013a3e:	6018      	str	r0, [r3, #0]
}
 8013a40:	bd38      	pop	{r3, r4, r5, pc}
 8013a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a46:	f383 8811 	msr	BASEPRI, r3
 8013a4a:	f3bf 8f6f 	isb	sy
 8013a4e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8013a52:	e7fe      	b.n	8013a52 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013a54:	4629      	mov	r1, r5
 8013a56:	4808      	ldr	r0, [pc, #32]	@ (8013a78 <xTaskRemoveFromEventList+0x88>)
 8013a58:	f7fe fc00 	bl	801225c <vListInsertEnd>
 8013a5c:	e7e7      	b.n	8013a2e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8013a5e:	2000      	movs	r0, #0
	return xReturn;
 8013a60:	e7ee      	b.n	8013a40 <xTaskRemoveFromEventList+0x50>
 8013a62:	bf00      	nop
 8013a64:	24061b84 	.word	0x24061b84
 8013a68:	24061ba0 	.word	0x24061ba0
 8013a6c:	24061c1c 	.word	0x24061c1c
 8013a70:	2406207c 	.word	0x2406207c
 8013a74:	24061b94 	.word	0x24061b94
 8013a78:	24061bd8 	.word	0x24061bd8

08013a7c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013a7c:	4b03      	ldr	r3, [pc, #12]	@ (8013a8c <vTaskInternalSetTimeOutState+0x10>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013a82:	4b03      	ldr	r3, [pc, #12]	@ (8013a90 <vTaskInternalSetTimeOutState+0x14>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	6043      	str	r3, [r0, #4]
}
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop
 8013a8c:	24061b90 	.word	0x24061b90
 8013a90:	24061ba4 	.word	0x24061ba4

08013a94 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8013a94:	b1d0      	cbz	r0, 8013acc <xTaskCheckForTimeOut+0x38>
{
 8013a96:	b570      	push	{r4, r5, r6, lr}
 8013a98:	460c      	mov	r4, r1
 8013a9a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8013a9c:	b1f9      	cbz	r1, 8013ade <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8013a9e:	f7fe fc81 	bl	80123a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8013aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8013b10 <xTaskCheckForTimeOut+0x7c>)
 8013aa4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8013aa6:	6823      	ldr	r3, [r4, #0]
 8013aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aac:	d028      	beq.n	8013b00 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013aae:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013ab0:	4818      	ldr	r0, [pc, #96]	@ (8013b14 <xTaskCheckForTimeOut+0x80>)
 8013ab2:	6800      	ldr	r0, [r0, #0]
 8013ab4:	682e      	ldr	r6, [r5, #0]
 8013ab6:	4286      	cmp	r6, r0
 8013ab8:	d001      	beq.n	8013abe <xTaskCheckForTimeOut+0x2a>
 8013aba:	4291      	cmp	r1, r2
 8013abc:	d925      	bls.n	8013b0a <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013abe:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013ac0:	4283      	cmp	r3, r0
 8013ac2:	d815      	bhi.n	8013af0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8013ac8:	2401      	movs	r4, #1
 8013aca:	e01a      	b.n	8013b02 <xTaskCheckForTimeOut+0x6e>
 8013acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ad0:	f383 8811 	msr	BASEPRI, r3
 8013ad4:	f3bf 8f6f 	isb	sy
 8013ad8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8013adc:	e7fe      	b.n	8013adc <xTaskCheckForTimeOut+0x48>
 8013ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ae2:	f383 8811 	msr	BASEPRI, r3
 8013ae6:	f3bf 8f6f 	isb	sy
 8013aea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8013aee:	e7fe      	b.n	8013aee <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8013af0:	1a9b      	subs	r3, r3, r2
 8013af2:	440b      	add	r3, r1
 8013af4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013af6:	4628      	mov	r0, r5
 8013af8:	f7ff ffc0 	bl	8013a7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013afc:	2400      	movs	r4, #0
 8013afe:	e000      	b.n	8013b02 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8013b00:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8013b02:	f7fe fc71 	bl	80123e8 <vPortExitCritical>
}
 8013b06:	4620      	mov	r0, r4
 8013b08:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8013b0a:	2401      	movs	r4, #1
 8013b0c:	e7f9      	b.n	8013b02 <xTaskCheckForTimeOut+0x6e>
 8013b0e:	bf00      	nop
 8013b10:	24061ba4 	.word	0x24061ba4
 8013b14:	24061b90 	.word	0x24061b90

08013b18 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8013b18:	4b01      	ldr	r3, [pc, #4]	@ (8013b20 <vTaskMissedYield+0x8>)
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	601a      	str	r2, [r3, #0]
}
 8013b1e:	4770      	bx	lr
 8013b20:	24061b94 	.word	0x24061b94

08013b24 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8013b24:	4b01      	ldr	r3, [pc, #4]	@ (8013b2c <xTaskGetCurrentTaskHandle+0x8>)
 8013b26:	6818      	ldr	r0, [r3, #0]
	}
 8013b28:	4770      	bx	lr
 8013b2a:	bf00      	nop
 8013b2c:	2406207c 	.word	0x2406207c

08013b30 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8013b30:	4b05      	ldr	r3, [pc, #20]	@ (8013b48 <xTaskGetSchedulerState+0x18>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	b133      	cbz	r3, 8013b44 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b36:	4b05      	ldr	r3, [pc, #20]	@ (8013b4c <xTaskGetSchedulerState+0x1c>)
 8013b38:	6818      	ldr	r0, [r3, #0]
 8013b3a:	fab0 f080 	clz	r0, r0
 8013b3e:	0940      	lsrs	r0, r0, #5
 8013b40:	0040      	lsls	r0, r0, #1
 8013b42:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013b44:	2001      	movs	r0, #1
	}
 8013b46:	4770      	bx	lr
 8013b48:	24061b9c 	.word	0x24061b9c
 8013b4c:	24061b84 	.word	0x24061b84

08013b50 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d03f      	beq.n	8013bd4 <xTaskPriorityInherit+0x84>
	{
 8013b54:	b538      	push	{r3, r4, r5, lr}
 8013b56:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013b58:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8013bd8 <xTaskPriorityInherit+0x88>)
 8013b5c:	6812      	ldr	r2, [r2, #0]
 8013b5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013b60:	4293      	cmp	r3, r2
 8013b62:	d22e      	bcs.n	8013bc2 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013b64:	6982      	ldr	r2, [r0, #24]
 8013b66:	2a00      	cmp	r2, #0
 8013b68:	db05      	blt.n	8013b76 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8013bd8 <xTaskPriorityInherit+0x88>)
 8013b6c:	6812      	ldr	r2, [r2, #0]
 8013b6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013b70:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8013b74:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013b76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013b7a:	4a18      	ldr	r2, [pc, #96]	@ (8013bdc <xTaskPriorityInherit+0x8c>)
 8013b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013b80:	6962      	ldr	r2, [r4, #20]
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d005      	beq.n	8013b92 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013b86:	4b14      	ldr	r3, [pc, #80]	@ (8013bd8 <xTaskPriorityInherit+0x88>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8013b8e:	2001      	movs	r0, #1
 8013b90:	e01f      	b.n	8013bd2 <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b92:	1d25      	adds	r5, r4, #4
 8013b94:	4628      	mov	r0, r5
 8013b96:	f7fe fb85 	bl	80122a4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8013bd8 <xTaskPriorityInherit+0x88>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013ba0:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8013be0 <xTaskPriorityInherit+0x90>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	4298      	cmp	r0, r3
 8013ba8:	d901      	bls.n	8013bae <xTaskPriorityInherit+0x5e>
 8013baa:	4b0d      	ldr	r3, [pc, #52]	@ (8013be0 <xTaskPriorityInherit+0x90>)
 8013bac:	6018      	str	r0, [r3, #0]
 8013bae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013bb2:	4629      	mov	r1, r5
 8013bb4:	4b09      	ldr	r3, [pc, #36]	@ (8013bdc <xTaskPriorityInherit+0x8c>)
 8013bb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013bba:	f7fe fb4f 	bl	801225c <vListInsertEnd>
				xReturn = pdTRUE;
 8013bbe:	2001      	movs	r0, #1
 8013bc0:	e007      	b.n	8013bd2 <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013bc2:	4b05      	ldr	r3, [pc, #20]	@ (8013bd8 <xTaskPriorityInherit+0x88>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8013bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bca:	4298      	cmp	r0, r3
 8013bcc:	bf2c      	ite	cs
 8013bce:	2000      	movcs	r0, #0
 8013bd0:	2001      	movcc	r0, #1
	}
 8013bd2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8013bd4:	2000      	movs	r0, #0
	}
 8013bd6:	4770      	bx	lr
 8013bd8:	2406207c 	.word	0x2406207c
 8013bdc:	24061c1c 	.word	0x24061c1c
 8013be0:	24061ba0 	.word	0x24061ba0

08013be4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8013be4:	2800      	cmp	r0, #0
 8013be6:	d03b      	beq.n	8013c60 <xTaskPriorityDisinherit+0x7c>
	{
 8013be8:	b538      	push	{r3, r4, r5, lr}
 8013bea:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8013bec:	4b1d      	ldr	r3, [pc, #116]	@ (8013c64 <xTaskPriorityDisinherit+0x80>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4283      	cmp	r3, r0
 8013bf2:	d008      	beq.n	8013c06 <xTaskPriorityDisinherit+0x22>
 8013bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bf8:	f383 8811 	msr	BASEPRI, r3
 8013bfc:	f3bf 8f6f 	isb	sy
 8013c00:	f3bf 8f4f 	dsb	sy
 8013c04:	e7fe      	b.n	8013c04 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8013c06:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8013c08:	b943      	cbnz	r3, 8013c1c <xTaskPriorityDisinherit+0x38>
 8013c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c0e:	f383 8811 	msr	BASEPRI, r3
 8013c12:	f3bf 8f6f 	isb	sy
 8013c16:	f3bf 8f4f 	dsb	sy
 8013c1a:	e7fe      	b.n	8013c1a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8013c1c:	3b01      	subs	r3, #1
 8013c1e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013c20:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8013c22:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013c24:	4291      	cmp	r1, r2
 8013c26:	d000      	beq.n	8013c2a <xTaskPriorityDisinherit+0x46>
 8013c28:	b10b      	cbz	r3, 8013c2e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8013c2a:	2000      	movs	r0, #0
	}
 8013c2c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c2e:	1d05      	adds	r5, r0, #4
 8013c30:	4628      	mov	r0, r5
 8013c32:	f7fe fb37 	bl	80122a4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013c36:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8013c38:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c3a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8013c3e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8013c40:	4b09      	ldr	r3, [pc, #36]	@ (8013c68 <xTaskPriorityDisinherit+0x84>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	4298      	cmp	r0, r3
 8013c46:	d901      	bls.n	8013c4c <xTaskPriorityDisinherit+0x68>
 8013c48:	4b07      	ldr	r3, [pc, #28]	@ (8013c68 <xTaskPriorityDisinherit+0x84>)
 8013c4a:	6018      	str	r0, [r3, #0]
 8013c4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013c50:	4629      	mov	r1, r5
 8013c52:	4b06      	ldr	r3, [pc, #24]	@ (8013c6c <xTaskPriorityDisinherit+0x88>)
 8013c54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013c58:	f7fe fb00 	bl	801225c <vListInsertEnd>
					xReturn = pdTRUE;
 8013c5c:	2001      	movs	r0, #1
 8013c5e:	e7e5      	b.n	8013c2c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8013c60:	2000      	movs	r0, #0
	}
 8013c62:	4770      	bx	lr
 8013c64:	2406207c 	.word	0x2406207c
 8013c68:	24061ba0 	.word	0x24061ba0
 8013c6c:	24061c1c 	.word	0x24061c1c

08013c70 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d046      	beq.n	8013d02 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8013c74:	b538      	push	{r3, r4, r5, lr}
 8013c76:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8013c78:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8013c7a:	b943      	cbnz	r3, 8013c8e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8013c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c80:	f383 8811 	msr	BASEPRI, r3
 8013c84:	f3bf 8f6f 	isb	sy
 8013c88:	f3bf 8f4f 	dsb	sy
 8013c8c:	e7fe      	b.n	8013c8c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013c8e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8013c90:	4291      	cmp	r1, r2
 8013c92:	bf38      	it	cc
 8013c94:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013c96:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d101      	bne.n	8013ca0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8013c9c:	428a      	cmp	r2, r1
 8013c9e:	d100      	bne.n	8013ca2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8013ca0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8013ca2:	4b18      	ldr	r3, [pc, #96]	@ (8013d04 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	4283      	cmp	r3, r0
 8013ca8:	d022      	beq.n	8013cf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8013caa:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013cac:	6983      	ldr	r3, [r0, #24]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	db02      	blt.n	8013cb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cb2:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 8013cb6:	6181      	str	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013cb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8013cbc:	4b12      	ldr	r3, [pc, #72]	@ (8013d08 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8013cbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013cc2:	6962      	ldr	r2, [r4, #20]
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d1eb      	bne.n	8013ca0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013cc8:	1d25      	adds	r5, r4, #4
 8013cca:	4628      	mov	r0, r5
 8013ccc:	f7fe faea 	bl	80122a4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8013cd0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8013d0c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	4298      	cmp	r0, r3
 8013cd8:	d901      	bls.n	8013cde <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8013cda:	4b0c      	ldr	r3, [pc, #48]	@ (8013d0c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8013cdc:	6018      	str	r0, [r3, #0]
 8013cde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013ce2:	4629      	mov	r1, r5
 8013ce4:	4b08      	ldr	r3, [pc, #32]	@ (8013d08 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8013ce6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013cea:	f7fe fab7 	bl	801225c <vListInsertEnd>
	}
 8013cee:	e7d7      	b.n	8013ca0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8013cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cf4:	f383 8811 	msr	BASEPRI, r3
 8013cf8:	f3bf 8f6f 	isb	sy
 8013cfc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8013d00:	e7fe      	b.n	8013d00 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8013d02:	4770      	bx	lr
 8013d04:	2406207c 	.word	0x2406207c
 8013d08:	24061c1c 	.word	0x24061c1c
 8013d0c:	24061ba0 	.word	0x24061ba0

08013d10 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8013d10:	4b05      	ldr	r3, [pc, #20]	@ (8013d28 <pvTaskIncrementMutexHeldCount+0x18>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	b123      	cbz	r3, 8013d20 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8013d16:	4b04      	ldr	r3, [pc, #16]	@ (8013d28 <pvTaskIncrementMutexHeldCount+0x18>)
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8013d1c:	3301      	adds	r3, #1
 8013d1e:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8013d20:	4b01      	ldr	r3, [pc, #4]	@ (8013d28 <pvTaskIncrementMutexHeldCount+0x18>)
 8013d22:	6818      	ldr	r0, [r3, #0]
	}
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	2406207c 	.word	0x2406207c

08013d2c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013d2c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013d2e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d30:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013d32:	4291      	cmp	r1, r2
 8013d34:	d80c      	bhi.n	8013d50 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d36:	1ad2      	subs	r2, r2, r3
 8013d38:	6983      	ldr	r3, [r0, #24]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d301      	bcc.n	8013d42 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013d3e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8013d40:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013d42:	1d01      	adds	r1, r0, #4
 8013d44:	4b09      	ldr	r3, [pc, #36]	@ (8013d6c <prvInsertTimerInActiveList+0x40>)
 8013d46:	6818      	ldr	r0, [r3, #0]
 8013d48:	f7fe fa93 	bl	8012272 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	e7f7      	b.n	8013d40 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d203      	bcs.n	8013d5c <prvInsertTimerInActiveList+0x30>
 8013d54:	4299      	cmp	r1, r3
 8013d56:	d301      	bcc.n	8013d5c <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 8013d58:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8013d5a:	e7f1      	b.n	8013d40 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d5c:	1d01      	adds	r1, r0, #4
 8013d5e:	4b04      	ldr	r3, [pc, #16]	@ (8013d70 <prvInsertTimerInActiveList+0x44>)
 8013d60:	6818      	ldr	r0, [r3, #0]
 8013d62:	f7fe fa86 	bl	8012272 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8013d66:	2000      	movs	r0, #0
 8013d68:	e7ea      	b.n	8013d40 <prvInsertTimerInActiveList+0x14>
 8013d6a:	bf00      	nop
 8013d6c:	2406217c 	.word	0x2406217c
 8013d70:	24062180 	.word	0x24062180

08013d74 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013d74:	b530      	push	{r4, r5, lr}
 8013d76:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013d78:	f7fe fb14 	bl	80123a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013d7c:	4b11      	ldr	r3, [pc, #68]	@ (8013dc4 <prvCheckForValidListAndQueue+0x50>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	b11b      	cbz	r3, 8013d8a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d82:	f7fe fb31 	bl	80123e8 <vPortExitCritical>
}
 8013d86:	b003      	add	sp, #12
 8013d88:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8013d8a:	4d0f      	ldr	r5, [pc, #60]	@ (8013dc8 <prvCheckForValidListAndQueue+0x54>)
 8013d8c:	4628      	mov	r0, r5
 8013d8e:	f7fe fa57 	bl	8012240 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013d92:	4c0e      	ldr	r4, [pc, #56]	@ (8013dcc <prvCheckForValidListAndQueue+0x58>)
 8013d94:	4620      	mov	r0, r4
 8013d96:	f7fe fa53 	bl	8012240 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8013dd0 <prvCheckForValidListAndQueue+0x5c>)
 8013d9c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8013dd4 <prvCheckForValidListAndQueue+0x60>)
 8013da0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013da2:	2300      	movs	r3, #0
 8013da4:	9300      	str	r3, [sp, #0]
 8013da6:	4b0c      	ldr	r3, [pc, #48]	@ (8013dd8 <prvCheckForValidListAndQueue+0x64>)
 8013da8:	4a0c      	ldr	r2, [pc, #48]	@ (8013ddc <prvCheckForValidListAndQueue+0x68>)
 8013daa:	2110      	movs	r1, #16
 8013dac:	200a      	movs	r0, #10
 8013dae:	f7fe fd22 	bl	80127f6 <xQueueGenericCreateStatic>
 8013db2:	4b04      	ldr	r3, [pc, #16]	@ (8013dc4 <prvCheckForValidListAndQueue+0x50>)
 8013db4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8013db6:	2800      	cmp	r0, #0
 8013db8:	d0e3      	beq.n	8013d82 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013dba:	4909      	ldr	r1, [pc, #36]	@ (8013de0 <prvCheckForValidListAndQueue+0x6c>)
 8013dbc:	f7ff f9a0 	bl	8013100 <vQueueAddToRegistry>
 8013dc0:	e7df      	b.n	8013d82 <prvCheckForValidListAndQueue+0xe>
 8013dc2:	bf00      	nop
 8013dc4:	24062178 	.word	0x24062178
 8013dc8:	24062198 	.word	0x24062198
 8013dcc:	24062184 	.word	0x24062184
 8013dd0:	24062180 	.word	0x24062180
 8013dd4:	2406217c 	.word	0x2406217c
 8013dd8:	24062080 	.word	0x24062080
 8013ddc:	240620d0 	.word	0x240620d0
 8013de0:	0802dd7c 	.word	0x0802dd7c

08013de4 <xTimerCreateTimerTask>:
{
 8013de4:	b510      	push	{r4, lr}
 8013de6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8013de8:	f7ff ffc4 	bl	8013d74 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8013dec:	4b12      	ldr	r3, [pc, #72]	@ (8013e38 <xTimerCreateTimerTask+0x54>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	b1cb      	cbz	r3, 8013e26 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013df2:	2400      	movs	r4, #0
 8013df4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013df6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013df8:	aa07      	add	r2, sp, #28
 8013dfa:	a906      	add	r1, sp, #24
 8013dfc:	a805      	add	r0, sp, #20
 8013dfe:	f7fe f907 	bl	8012010 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013e02:	9b05      	ldr	r3, [sp, #20]
 8013e04:	9302      	str	r3, [sp, #8]
 8013e06:	9b06      	ldr	r3, [sp, #24]
 8013e08:	9301      	str	r3, [sp, #4]
 8013e0a:	2302      	movs	r3, #2
 8013e0c:	9300      	str	r3, [sp, #0]
 8013e0e:	4623      	mov	r3, r4
 8013e10:	9a07      	ldr	r2, [sp, #28]
 8013e12:	490a      	ldr	r1, [pc, #40]	@ (8013e3c <xTimerCreateTimerTask+0x58>)
 8013e14:	480a      	ldr	r0, [pc, #40]	@ (8013e40 <xTimerCreateTimerTask+0x5c>)
 8013e16:	f7ff fb59 	bl	80134cc <xTaskCreateStatic>
 8013e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8013e44 <xTimerCreateTimerTask+0x60>)
 8013e1c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8013e1e:	b110      	cbz	r0, 8013e26 <xTimerCreateTimerTask+0x42>
}
 8013e20:	2001      	movs	r0, #1
 8013e22:	b008      	add	sp, #32
 8013e24:	bd10      	pop	{r4, pc}
 8013e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e2a:	f383 8811 	msr	BASEPRI, r3
 8013e2e:	f3bf 8f6f 	isb	sy
 8013e32:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8013e36:	e7fe      	b.n	8013e36 <xTimerCreateTimerTask+0x52>
 8013e38:	24062178 	.word	0x24062178
 8013e3c:	0802dd84 	.word	0x0802dd84
 8013e40:	08013f51 	.word	0x08013f51
 8013e44:	24062174 	.word	0x24062174

08013e48 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8013e48:	b1d8      	cbz	r0, 8013e82 <xTimerGenericCommand+0x3a>
 8013e4a:	469c      	mov	ip, r3
 8013e4c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8013e4e:	4815      	ldr	r0, [pc, #84]	@ (8013ea4 <xTimerGenericCommand+0x5c>)
 8013e50:	6800      	ldr	r0, [r0, #0]
 8013e52:	b328      	cbz	r0, 8013ea0 <xTimerGenericCommand+0x58>
{
 8013e54:	b500      	push	{lr}
 8013e56:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8013e58:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013e5a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013e5c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013e5e:	2905      	cmp	r1, #5
 8013e60:	dc18      	bgt.n	8013e94 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013e62:	f7ff fe65 	bl	8013b30 <xTaskGetSchedulerState>
 8013e66:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013e68:	f04f 0300 	mov.w	r3, #0
 8013e6c:	bf0c      	ite	eq
 8013e6e:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013e70:	461a      	movne	r2, r3
 8013e72:	4669      	mov	r1, sp
 8013e74:	480b      	ldr	r0, [pc, #44]	@ (8013ea4 <xTimerGenericCommand+0x5c>)
 8013e76:	6800      	ldr	r0, [r0, #0]
 8013e78:	f7fe fd77 	bl	801296a <xQueueGenericSend>
}
 8013e7c:	b005      	add	sp, #20
 8013e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e86:	f383 8811 	msr	BASEPRI, r3
 8013e8a:	f3bf 8f6f 	isb	sy
 8013e8e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8013e92:	e7fe      	b.n	8013e92 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013e94:	2300      	movs	r3, #0
 8013e96:	4662      	mov	r2, ip
 8013e98:	4669      	mov	r1, sp
 8013e9a:	f7fe fe78 	bl	8012b8e <xQueueGenericSendFromISR>
 8013e9e:	e7ed      	b.n	8013e7c <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8013ea0:	2000      	movs	r0, #0
}
 8013ea2:	4770      	bx	lr
 8013ea4:	24062178 	.word	0x24062178

08013ea8 <prvSampleTimeNow>:
{
 8013ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013eac:	b083      	sub	sp, #12
 8013eae:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 8013eb0:	f7ff fb82 	bl	80135b8 <xTaskGetTickCount>
 8013eb4:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
 8013eb6:	4b23      	ldr	r3, [pc, #140]	@ (8013f44 <prvSampleTimeNow+0x9c>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	4283      	cmp	r3, r0
 8013ebc:	d808      	bhi.n	8013ed0 <prvSampleTimeNow+0x28>
 8013ebe:	2300      	movs	r3, #0
		*pxTimerListsWereSwitched = pdTRUE;
 8013ec0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
 8013ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8013f44 <prvSampleTimeNow+0x9c>)
 8013ec6:	601f      	str	r7, [r3, #0]
}
 8013ec8:	4638      	mov	r0, r7
 8013eca:	b003      	add	sp, #12
 8013ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013ed0:	4e1d      	ldr	r6, [pc, #116]	@ (8013f48 <prvSampleTimeNow+0xa0>)
 8013ed2:	6833      	ldr	r3, [r6, #0]
 8013ed4:	681a      	ldr	r2, [r3, #0]
 8013ed6:	b36a      	cbz	r2, 8013f34 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ed8:	68db      	ldr	r3, [r3, #12]
 8013eda:	f8d3 9000 	ldr.w	r9, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ede:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013ee0:	1d25      	adds	r5, r4, #4
 8013ee2:	4628      	mov	r0, r5
 8013ee4:	f7fe f9de 	bl	80122a4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013ee8:	6a23      	ldr	r3, [r4, #32]
 8013eea:	4620      	mov	r0, r4
 8013eec:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013eee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013ef2:	f013 0f04 	tst.w	r3, #4
 8013ef6:	d0ec      	beq.n	8013ed2 <prvSampleTimeNow+0x2a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013ef8:	69a3      	ldr	r3, [r4, #24]
 8013efa:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8013efc:	4599      	cmp	r9, r3
 8013efe:	d207      	bcs.n	8013f10 <prvSampleTimeNow+0x68>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013f00:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013f02:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013f04:	4629      	mov	r1, r5
 8013f06:	4b10      	ldr	r3, [pc, #64]	@ (8013f48 <prvSampleTimeNow+0xa0>)
 8013f08:	6818      	ldr	r0, [r3, #0]
 8013f0a:	f7fe f9b2 	bl	8012272 <vListInsert>
 8013f0e:	e7e0      	b.n	8013ed2 <prvSampleTimeNow+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013f10:	2100      	movs	r1, #0
 8013f12:	9100      	str	r1, [sp, #0]
 8013f14:	460b      	mov	r3, r1
 8013f16:	464a      	mov	r2, r9
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f7ff ff95 	bl	8013e48 <xTimerGenericCommand>
				configASSERT( xResult );
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d1d7      	bne.n	8013ed2 <prvSampleTimeNow+0x2a>
 8013f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f26:	f383 8811 	msr	BASEPRI, r3
 8013f2a:	f3bf 8f6f 	isb	sy
 8013f2e:	f3bf 8f4f 	dsb	sy
 8013f32:	e7fe      	b.n	8013f32 <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 8013f34:	4a05      	ldr	r2, [pc, #20]	@ (8013f4c <prvSampleTimeNow+0xa4>)
 8013f36:	6810      	ldr	r0, [r2, #0]
 8013f38:	4903      	ldr	r1, [pc, #12]	@ (8013f48 <prvSampleTimeNow+0xa0>)
 8013f3a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8013f3c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8013f3e:	2301      	movs	r3, #1
 8013f40:	e7be      	b.n	8013ec0 <prvSampleTimeNow+0x18>
 8013f42:	bf00      	nop
 8013f44:	24062170 	.word	0x24062170
 8013f48:	24062180 	.word	0x24062180
 8013f4c:	2406217c 	.word	0x2406217c

08013f50 <prvTimerTask>:
{
 8013f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f54:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013f56:	4e78      	ldr	r6, [pc, #480]	@ (8014138 <prvTimerTask+0x1e8>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013f58:	f8df 81e4 	ldr.w	r8, [pc, #484]	@ 8014140 <prvTimerTask+0x1f0>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013f5c:	4d77      	ldr	r5, [pc, #476]	@ (801413c <prvTimerTask+0x1ec>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013f5e:	6833      	ldr	r3, [r6, #0]
 8013f60:	681f      	ldr	r7, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013f62:	2f00      	cmp	r7, #0
 8013f64:	f000 80da 	beq.w	801411c <prvTimerTask+0x1cc>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013f68:	68db      	ldr	r3, [r3, #12]
 8013f6a:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8013f6c:	f7ff fb1c 	bl	80135a8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f70:	a804      	add	r0, sp, #16
 8013f72:	f7ff ff99 	bl	8013ea8 <prvSampleTimeNow>
 8013f76:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8013f78:	9a04      	ldr	r2, [sp, #16]
 8013f7a:	2a00      	cmp	r2, #0
 8013f7c:	f040 80d8 	bne.w	8014130 <prvTimerTask+0x1e0>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013f80:	42b8      	cmp	r0, r7
 8013f82:	d213      	bcs.n	8013fac <prvTimerTask+0x5c>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013f84:	1b39      	subs	r1, r7, r4
 8013f86:	6828      	ldr	r0, [r5, #0]
 8013f88:	f7ff f8fc 	bl	8013184 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013f8c:	f7ff fbb4 	bl	80136f8 <xTaskResumeAll>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	f040 80cf 	bne.w	8014134 <prvTimerTask+0x1e4>
					portYIELD_WITHIN_API();
 8013f96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8013f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	f3bf 8f6f 	isb	sy
 8013faa:	e0c3      	b.n	8014134 <prvTimerTask+0x1e4>
				( void ) xTaskResumeAll();
 8013fac:	f7ff fba4 	bl	80136f8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fb0:	6833      	ldr	r3, [r6, #0]
 8013fb2:	68db      	ldr	r3, [r3, #12]
 8013fb4:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013fb8:	f109 0004 	add.w	r0, r9, #4
 8013fbc:	f7fe f972 	bl	80122a4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013fc0:	f899 3028 	ldrb.w	r3, [r9, #40]	@ 0x28
 8013fc4:	f013 0f04 	tst.w	r3, #4
 8013fc8:	d108      	bne.n	8013fdc <prvTimerTask+0x8c>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013fca:	f023 0301 	bic.w	r3, r3, #1
 8013fce:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013fd2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013fd6:	4648      	mov	r0, r9
 8013fd8:	4798      	blx	r3
}
 8013fda:	e0ab      	b.n	8014134 <prvTimerTask+0x1e4>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013fdc:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8013fe0:	463b      	mov	r3, r7
 8013fe2:	4622      	mov	r2, r4
 8013fe4:	4439      	add	r1, r7
 8013fe6:	4648      	mov	r0, r9
 8013fe8:	f7ff fea0 	bl	8013d2c <prvInsertTimerInActiveList>
 8013fec:	2800      	cmp	r0, #0
 8013fee:	d0f0      	beq.n	8013fd2 <prvTimerTask+0x82>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	9100      	str	r1, [sp, #0]
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	463a      	mov	r2, r7
 8013ff8:	4648      	mov	r0, r9
 8013ffa:	f7ff ff25 	bl	8013e48 <xTimerGenericCommand>
			configASSERT( xResult );
 8013ffe:	2800      	cmp	r0, #0
 8014000:	d1e7      	bne.n	8013fd2 <prvTimerTask+0x82>
 8014002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014006:	f383 8811 	msr	BASEPRI, r3
 801400a:	f3bf 8f6f 	isb	sy
 801400e:	f3bf 8f4f 	dsb	sy
 8014012:	e7fe      	b.n	8014012 <prvTimerTask+0xc2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014014:	f8d8 3000 	ldr.w	r3, [r8]
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	fab2 f282 	clz	r2, r2
 801401e:	0952      	lsrs	r2, r2, #5
 8014020:	e7b0      	b.n	8013f84 <prvTimerTask+0x34>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014022:	9907      	ldr	r1, [sp, #28]
 8014024:	9806      	ldr	r0, [sp, #24]
 8014026:	9b05      	ldr	r3, [sp, #20]
 8014028:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801402a:	9b04      	ldr	r3, [sp, #16]
 801402c:	2b00      	cmp	r3, #0
 801402e:	da09      	bge.n	8014044 <prvTimerTask+0xf4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014030:	4622      	mov	r2, r4
 8014032:	a904      	add	r1, sp, #16
 8014034:	6828      	ldr	r0, [r5, #0]
 8014036:	f7fe fe66 	bl	8012d06 <xQueueReceive>
 801403a:	2800      	cmp	r0, #0
 801403c:	d08f      	beq.n	8013f5e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801403e:	9b04      	ldr	r3, [sp, #16]
 8014040:	2b00      	cmp	r3, #0
 8014042:	dbee      	blt.n	8014022 <prvTimerTask+0xd2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014044:	9f06      	ldr	r7, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	b113      	cbz	r3, 8014050 <prvTimerTask+0x100>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801404a:	1d38      	adds	r0, r7, #4
 801404c:	f7fe f92a 	bl	80122a4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014050:	a803      	add	r0, sp, #12
 8014052:	f7ff ff29 	bl	8013ea8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8014056:	9b04      	ldr	r3, [sp, #16]
 8014058:	2b09      	cmp	r3, #9
 801405a:	d8e9      	bhi.n	8014030 <prvTimerTask+0xe0>
 801405c:	e8df f003 	tbb	[pc, r3]
 8014060:	30050505 	.word	0x30050505
 8014064:	05055037 	.word	0x05055037
 8014068:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801406a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801406e:	f043 0301 	orr.w	r3, r3, #1
 8014072:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014076:	9b05      	ldr	r3, [sp, #20]
 8014078:	69b9      	ldr	r1, [r7, #24]
 801407a:	4602      	mov	r2, r0
 801407c:	4419      	add	r1, r3
 801407e:	4638      	mov	r0, r7
 8014080:	f7ff fe54 	bl	8013d2c <prvInsertTimerInActiveList>
 8014084:	2800      	cmp	r0, #0
 8014086:	d0d3      	beq.n	8014030 <prvTimerTask+0xe0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014088:	6a3b      	ldr	r3, [r7, #32]
 801408a:	4638      	mov	r0, r7
 801408c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801408e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014092:	f013 0f04 	tst.w	r3, #4
 8014096:	d0cb      	beq.n	8014030 <prvTimerTask+0xe0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014098:	69ba      	ldr	r2, [r7, #24]
 801409a:	2100      	movs	r1, #0
 801409c:	9100      	str	r1, [sp, #0]
 801409e:	460b      	mov	r3, r1
 80140a0:	9805      	ldr	r0, [sp, #20]
 80140a2:	4402      	add	r2, r0
 80140a4:	4638      	mov	r0, r7
 80140a6:	f7ff fecf 	bl	8013e48 <xTimerGenericCommand>
							configASSERT( xResult );
 80140aa:	2800      	cmp	r0, #0
 80140ac:	d1c0      	bne.n	8014030 <prvTimerTask+0xe0>
 80140ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140b2:	f383 8811 	msr	BASEPRI, r3
 80140b6:	f3bf 8f6f 	isb	sy
 80140ba:	f3bf 8f4f 	dsb	sy
 80140be:	e7fe      	b.n	80140be <prvTimerTask+0x16e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80140c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80140c4:	f023 0301 	bic.w	r3, r3, #1
 80140c8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 80140cc:	e7b0      	b.n	8014030 <prvTimerTask+0xe0>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80140ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80140d2:	f043 0301 	orr.w	r3, r3, #1
 80140d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80140da:	9905      	ldr	r1, [sp, #20]
 80140dc:	61b9      	str	r1, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80140de:	b131      	cbz	r1, 80140ee <prvTimerTask+0x19e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80140e0:	4603      	mov	r3, r0
 80140e2:	4602      	mov	r2, r0
 80140e4:	4401      	add	r1, r0
 80140e6:	4638      	mov	r0, r7
 80140e8:	f7ff fe20 	bl	8013d2c <prvInsertTimerInActiveList>
					break;
 80140ec:	e7a0      	b.n	8014030 <prvTimerTask+0xe0>
 80140ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140f2:	f383 8811 	msr	BASEPRI, r3
 80140f6:	f3bf 8f6f 	isb	sy
 80140fa:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80140fe:	e7fe      	b.n	80140fe <prvTimerTask+0x1ae>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014100:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014104:	f013 0f02 	tst.w	r3, #2
 8014108:	d004      	beq.n	8014114 <prvTimerTask+0x1c4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801410a:	f023 0301 	bic.w	r3, r3, #1
 801410e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8014112:	e78d      	b.n	8014030 <prvTimerTask+0xe0>
							vPortFree( pxTimer );
 8014114:	4638      	mov	r0, r7
 8014116:	f7fe f855 	bl	80121c4 <vPortFree>
 801411a:	e789      	b.n	8014030 <prvTimerTask+0xe0>
	vTaskSuspendAll();
 801411c:	f7ff fa44 	bl	80135a8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014120:	a804      	add	r0, sp, #16
 8014122:	f7ff fec1 	bl	8013ea8 <prvSampleTimeNow>
 8014126:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8014128:	9b04      	ldr	r3, [sp, #16]
 801412a:	2b00      	cmp	r3, #0
 801412c:	f43f af72 	beq.w	8014014 <prvTimerTask+0xc4>
			( void ) xTaskResumeAll();
 8014130:	f7ff fae2 	bl	80136f8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014134:	2400      	movs	r4, #0
}
 8014136:	e77b      	b.n	8014030 <prvTimerTask+0xe0>
 8014138:	24062180 	.word	0x24062180
 801413c:	24062178 	.word	0x24062178
 8014140:	2406217c 	.word	0x2406217c

08014144 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014144:	8880      	ldrh	r0, [r0, #4]
 8014146:	4770      	bx	lr

08014148 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014148:	b570      	push	{r4, r5, r6, lr}
 801414a:	6803      	ldr	r3, [r0, #0]
 801414c:	460c      	mov	r4, r1
 801414e:	2100      	movs	r1, #0
 8014150:	4605      	mov	r5, r0
 8014152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014154:	4798      	blx	r3
 8014156:	4606      	mov	r6, r0
 8014158:	682b      	ldr	r3, [r5, #0]
 801415a:	4628      	mov	r0, r5
 801415c:	1ba4      	subs	r4, r4, r6
 801415e:	6a1b      	ldr	r3, [r3, #32]
 8014160:	b2a4      	uxth	r4, r4
 8014162:	4798      	blx	r3
 8014164:	fbb4 f0f0 	udiv	r0, r4, r0
 8014168:	bd70      	pop	{r4, r5, r6, pc}

0801416a <_ZN8touchgfx17AbstractPartition5clearEv>:
 801416a:	2300      	movs	r3, #0
 801416c:	8083      	strh	r3, [r0, #4]
 801416e:	4770      	bx	lr

08014170 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014170:	b510      	push	{r4, lr}
 8014172:	6803      	ldr	r3, [r0, #0]
 8014174:	4604      	mov	r4, r0
 8014176:	8881      	ldrh	r1, [r0, #4]
 8014178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801417a:	4798      	blx	r3
 801417c:	88a3      	ldrh	r3, [r4, #4]
 801417e:	3301      	adds	r3, #1
 8014180:	80a3      	strh	r3, [r4, #4]
 8014182:	bd10      	pop	{r4, pc}

08014184 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014184:	6803      	ldr	r3, [r0, #0]
 8014186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014188:	4718      	bx	r3

0801418a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801418a:	4770      	bx	lr

0801418c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801418c:	4a02      	ldr	r2, [pc, #8]	@ (8014198 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801418e:	6002      	str	r2, [r0, #0]
 8014190:	2200      	movs	r2, #0
 8014192:	8082      	strh	r2, [r0, #4]
 8014194:	4770      	bx	lr
 8014196:	bf00      	nop
 8014198:	0802dd94 	.word	0x0802dd94

0801419c <_ZN8touchgfx9Container13getFirstChildEv>:
 801419c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801419e:	4770      	bx	lr

080141a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80141a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80141a2:	2000      	movs	r0, #0
 80141a4:	b12b      	cbz	r3, 80141b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80141a6:	b920      	cbnz	r0, 80141b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80141a8:	1a5a      	subs	r2, r3, r1
 80141aa:	699b      	ldr	r3, [r3, #24]
 80141ac:	4250      	negs	r0, r2
 80141ae:	4150      	adcs	r0, r2
 80141b0:	e7f8      	b.n	80141a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80141b2:	4770      	bx	lr

080141b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80141b4:	2300      	movs	r3, #0
 80141b6:	6148      	str	r0, [r1, #20]
 80141b8:	618b      	str	r3, [r1, #24]
 80141ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80141bc:	b913      	cbnz	r3, 80141c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80141be:	6281      	str	r1, [r0, #40]	@ 0x28
 80141c0:	4770      	bx	lr
 80141c2:	4613      	mov	r3, r2
 80141c4:	699a      	ldr	r2, [r3, #24]
 80141c6:	2a00      	cmp	r2, #0
 80141c8:	d1fb      	bne.n	80141c2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80141ca:	6199      	str	r1, [r3, #24]
 80141cc:	4770      	bx	lr

080141ce <_ZN8touchgfx9Container9removeAllEv>:
 80141ce:	2200      	movs	r2, #0
 80141d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80141d2:	b123      	cbz	r3, 80141de <_ZN8touchgfx9Container9removeAllEv+0x10>
 80141d4:	6999      	ldr	r1, [r3, #24]
 80141d6:	6281      	str	r1, [r0, #40]	@ 0x28
 80141d8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80141dc:	e7f8      	b.n	80141d0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80141de:	4770      	bx	lr

080141e0 <_ZN8touchgfx9Container6unlinkEv>:
 80141e0:	2300      	movs	r3, #0
 80141e2:	6283      	str	r3, [r0, #40]	@ 0x28
 80141e4:	4770      	bx	lr

080141e6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80141e6:	2200      	movs	r2, #0
 80141e8:	8002      	strh	r2, [r0, #0]
 80141ea:	8042      	strh	r2, [r0, #2]
 80141ec:	8082      	strh	r2, [r0, #4]
 80141ee:	80c2      	strh	r2, [r0, #6]
 80141f0:	4770      	bx	lr

080141f2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80141f2:	b570      	push	{r4, r5, r6, lr}
 80141f4:	460d      	mov	r5, r1
 80141f6:	4616      	mov	r6, r2
 80141f8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80141fa:	b13c      	cbz	r4, 801420c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80141fc:	6823      	ldr	r3, [r4, #0]
 80141fe:	4620      	mov	r0, r4
 8014200:	4632      	mov	r2, r6
 8014202:	4629      	mov	r1, r5
 8014204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014206:	4798      	blx	r3
 8014208:	69a4      	ldr	r4, [r4, #24]
 801420a:	e7f6      	b.n	80141fa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801420c:	bd70      	pop	{r4, r5, r6, pc}

0801420e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801420e:	b538      	push	{r3, r4, r5, lr}
 8014210:	460d      	mov	r5, r1
 8014212:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014214:	b134      	cbz	r4, 8014224 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014216:	682b      	ldr	r3, [r5, #0]
 8014218:	4621      	mov	r1, r4
 801421a:	4628      	mov	r0, r5
 801421c:	689b      	ldr	r3, [r3, #8]
 801421e:	4798      	blx	r3
 8014220:	69a4      	ldr	r4, [r4, #24]
 8014222:	e7f7      	b.n	8014214 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014224:	bd38      	pop	{r3, r4, r5, pc}

08014226 <_ZN8touchgfx9ContainerD1Ev>:
 8014226:	4770      	bx	lr

08014228 <_ZN8touchgfx9ContainerD0Ev>:
 8014228:	b510      	push	{r4, lr}
 801422a:	4604      	mov	r4, r0
 801422c:	212c      	movs	r1, #44	@ 0x2c
 801422e:	f014 fe57 	bl	8028ee0 <_ZdlPvj>
 8014232:	4620      	mov	r0, r4
 8014234:	bd10      	pop	{r4, pc}

08014236 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014236:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014238:	b19b      	cbz	r3, 8014262 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801423a:	428b      	cmp	r3, r1
 801423c:	d109      	bne.n	8014252 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801423e:	699a      	ldr	r2, [r3, #24]
 8014240:	2100      	movs	r1, #0
 8014242:	6159      	str	r1, [r3, #20]
 8014244:	6282      	str	r2, [r0, #40]	@ 0x28
 8014246:	b902      	cbnz	r2, 801424a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014248:	4770      	bx	lr
 801424a:	6199      	str	r1, [r3, #24]
 801424c:	4770      	bx	lr
 801424e:	4613      	mov	r3, r2
 8014250:	b13a      	cbz	r2, 8014262 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014252:	699a      	ldr	r2, [r3, #24]
 8014254:	428a      	cmp	r2, r1
 8014256:	d1fa      	bne.n	801424e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014258:	698a      	ldr	r2, [r1, #24]
 801425a:	619a      	str	r2, [r3, #24]
 801425c:	2300      	movs	r3, #0
 801425e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014262:	4770      	bx	lr

08014264 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014264:	b410      	push	{r4}
 8014266:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014268:	4604      	mov	r4, r0
 801426a:	b92b      	cbnz	r3, 8014278 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801426c:	6803      	ldr	r3, [r0, #0]
 801426e:	4611      	mov	r1, r2
 8014270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014276:	4718      	bx	r3
 8014278:	b941      	cbnz	r1, 801428c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801427a:	6193      	str	r3, [r2, #24]
 801427c:	6282      	str	r2, [r0, #40]	@ 0x28
 801427e:	6154      	str	r4, [r2, #20]
 8014280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014284:	4770      	bx	lr
 8014286:	4603      	mov	r3, r0
 8014288:	2800      	cmp	r0, #0
 801428a:	d0f9      	beq.n	8014280 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801428c:	4299      	cmp	r1, r3
 801428e:	6998      	ldr	r0, [r3, #24]
 8014290:	d1f9      	bne.n	8014286 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014292:	6190      	str	r0, [r2, #24]
 8014294:	618a      	str	r2, [r1, #24]
 8014296:	e7f2      	b.n	801427e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08014298 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801429c:	461f      	mov	r7, r3
 801429e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80142a2:	460d      	mov	r5, r1
 80142a4:	4616      	mov	r6, r2
 80142a6:	b103      	cbz	r3, 80142aa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80142a8:	6038      	str	r0, [r7, #0]
 80142aa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80142ac:	b314      	cbz	r4, 80142f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80142ae:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80142b2:	b1eb      	cbz	r3, 80142f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80142b8:	428d      	cmp	r5, r1
 80142ba:	db19      	blt.n	80142f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142bc:	b289      	uxth	r1, r1
 80142be:	8923      	ldrh	r3, [r4, #8]
 80142c0:	440b      	add	r3, r1
 80142c2:	b21b      	sxth	r3, r3
 80142c4:	429d      	cmp	r5, r3
 80142c6:	da13      	bge.n	80142f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80142cc:	4296      	cmp	r6, r2
 80142ce:	db0f      	blt.n	80142f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142d0:	b292      	uxth	r2, r2
 80142d2:	8963      	ldrh	r3, [r4, #10]
 80142d4:	4413      	add	r3, r2
 80142d6:	b21b      	sxth	r3, r3
 80142d8:	429e      	cmp	r6, r3
 80142da:	da09      	bge.n	80142f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142dc:	6823      	ldr	r3, [r4, #0]
 80142de:	1ab2      	subs	r2, r6, r2
 80142e0:	1a69      	subs	r1, r5, r1
 80142e2:	4620      	mov	r0, r4
 80142e4:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80142e8:	b212      	sxth	r2, r2
 80142ea:	463b      	mov	r3, r7
 80142ec:	b209      	sxth	r1, r1
 80142ee:	47c0      	blx	r8
 80142f0:	69a4      	ldr	r4, [r4, #24]
 80142f2:	e7db      	b.n	80142ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80142f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80142f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142fc:	4c6d      	ldr	r4, [pc, #436]	@ (80144b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80142fe:	b0a1      	sub	sp, #132	@ 0x84
 8014300:	4606      	mov	r6, r0
 8014302:	6824      	ldr	r4, [r4, #0]
 8014304:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8014306:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 801430a:	2400      	movs	r4, #0
 801430c:	9303      	str	r3, [sp, #12]
 801430e:	802c      	strh	r4, [r5, #0]
 8014310:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8014312:	802c      	strh	r4, [r5, #0]
 8014314:	601c      	str	r4, [r3, #0]
 8014316:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801431a:	f7ff ffbd 	bl	8014298 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801431e:	f1b9 0f03 	cmp.w	r9, #3
 8014322:	f340 80c1 	ble.w	80144a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8014326:	4631      	mov	r1, r6
 8014328:	a80c      	add	r0, sp, #48	@ 0x30
 801432a:	f007 ff61 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801432e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8014332:	9306      	str	r3, [sp, #24]
 8014334:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014338:	9307      	str	r3, [sp, #28]
 801433a:	9b03      	ldr	r3, [sp, #12]
 801433c:	f8d3 a000 	ldr.w	sl, [r3]
 8014340:	f1ba 0f00 	cmp.w	sl, #0
 8014344:	f000 80b3 	beq.w	80144ae <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8014348:	4651      	mov	r1, sl
 801434a:	a810      	add	r0, sp, #64	@ 0x40
 801434c:	f007 ff50 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014350:	2002      	movs	r0, #2
 8014352:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8014356:	9b01      	ldr	r3, [sp, #4]
 8014358:	9a06      	ldr	r2, [sp, #24]
 801435a:	fb91 f1f0 	sdiv	r1, r1, r0
 801435e:	189d      	adds	r5, r3, r2
 8014360:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8014364:	9a07      	ldr	r2, [sp, #28]
 8014366:	4419      	add	r1, r3
 8014368:	9b02      	ldr	r3, [sp, #8]
 801436a:	4413      	add	r3, r2
 801436c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8014370:	1a6d      	subs	r5, r5, r1
 8014372:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8014376:	fb92 f2f0 	sdiv	r2, r2, r0
 801437a:	440a      	add	r2, r1
 801437c:	1a9b      	subs	r3, r3, r2
 801437e:	435b      	muls	r3, r3
 8014380:	fb05 3505 	mla	r5, r5, r5, r3
 8014384:	4f4c      	ldr	r7, [pc, #304]	@ (80144b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8014386:	ac10      	add	r4, sp, #64	@ 0x40
 8014388:	f1b9 0f0c 	cmp.w	r9, #12
 801438c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801438e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014390:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014394:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014398:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801439c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80143a0:	f04f 0303 	mov.w	r3, #3
 80143a4:	bfd8      	it	le
 80143a6:	f109 32ff 	addle.w	r2, r9, #4294967295
 80143aa:	f04f 0400 	mov.w	r4, #0
 80143ae:	f8cd 9000 	str.w	r9, [sp]
 80143b2:	bfcc      	ite	gt
 80143b4:	4698      	movgt	r8, r3
 80143b6:	fb92 f8f3 	sdivle	r8, r2, r3
 80143ba:	1c63      	adds	r3, r4, #1
 80143bc:	aa10      	add	r2, sp, #64	@ 0x40
 80143be:	f004 0401 	and.w	r4, r4, #1
 80143c2:	f04f 0b00 	mov.w	fp, #0
 80143c6:	9308      	str	r3, [sp, #32]
 80143c8:	9b00      	ldr	r3, [sp, #0]
 80143ca:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80143ce:	fb93 f3f8 	sdiv	r3, r3, r8
 80143d2:	3404      	adds	r4, #4
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	9304      	str	r3, [sp, #16]
 80143d8:	9a04      	ldr	r2, [sp, #16]
 80143da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80143de:	fb13 f302 	smulbb	r3, r3, r2
 80143e2:	9a01      	ldr	r2, [sp, #4]
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	1899      	adds	r1, r3, r2
 80143e8:	9305      	str	r3, [sp, #20]
 80143ea:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80143ee:	b209      	sxth	r1, r1
 80143f0:	4299      	cmp	r1, r3
 80143f2:	db4d      	blt.n	8014490 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80143f4:	8932      	ldrh	r2, [r6, #8]
 80143f6:	4413      	add	r3, r2
 80143f8:	b21b      	sxth	r3, r3
 80143fa:	4299      	cmp	r1, r3
 80143fc:	da48      	bge.n	8014490 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80143fe:	9b04      	ldr	r3, [sp, #16]
 8014400:	6827      	ldr	r7, [r4, #0]
 8014402:	fb17 f703 	smulbb	r7, r7, r3
 8014406:	9b02      	ldr	r3, [sp, #8]
 8014408:	b2bf      	uxth	r7, r7
 801440a:	18fa      	adds	r2, r7, r3
 801440c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014410:	b212      	sxth	r2, r2
 8014412:	429a      	cmp	r2, r3
 8014414:	db3c      	blt.n	8014490 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014416:	8970      	ldrh	r0, [r6, #10]
 8014418:	4403      	add	r3, r0
 801441a:	b21b      	sxth	r3, r3
 801441c:	429a      	cmp	r2, r3
 801441e:	da37      	bge.n	8014490 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014420:	2300      	movs	r3, #0
 8014422:	4630      	mov	r0, r6
 8014424:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014426:	ab0b      	add	r3, sp, #44	@ 0x2c
 8014428:	f7ff ff36 	bl	8014298 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801442c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801442e:	b37a      	cbz	r2, 8014490 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014430:	4552      	cmp	r2, sl
 8014432:	d02d      	beq.n	8014490 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014434:	4611      	mov	r1, r2
 8014436:	a80e      	add	r0, sp, #56	@ 0x38
 8014438:	9209      	str	r2, [sp, #36]	@ 0x24
 801443a:	f007 fed9 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801443e:	f04f 0e02 	mov.w	lr, #2
 8014442:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8014446:	9a06      	ldr	r2, [sp, #24]
 8014448:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801444c:	9b01      	ldr	r3, [sp, #4]
 801444e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8014452:	4413      	add	r3, r2
 8014454:	9a07      	ldr	r2, [sp, #28]
 8014456:	fb91 f1fe 	sdiv	r1, r1, lr
 801445a:	fb9c fcfe 	sdiv	ip, ip, lr
 801445e:	4401      	add	r1, r0
 8014460:	1a58      	subs	r0, r3, r1
 8014462:	9b02      	ldr	r3, [sp, #8]
 8014464:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8014468:	4413      	add	r3, r2
 801446a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801446c:	448c      	add	ip, r1
 801446e:	eba3 030c 	sub.w	r3, r3, ip
 8014472:	435b      	muls	r3, r3
 8014474:	fb00 3300 	mla	r3, r0, r0, r3
 8014478:	42ab      	cmp	r3, r5
 801447a:	d208      	bcs.n	801448e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801447c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801447e:	461d      	mov	r5, r3
 8014480:	9803      	ldr	r0, [sp, #12]
 8014482:	6001      	str	r1, [r0, #0]
 8014484:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8014486:	9805      	ldr	r0, [sp, #20]
 8014488:	8008      	strh	r0, [r1, #0]
 801448a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801448c:	800f      	strh	r7, [r1, #0]
 801448e:	4692      	mov	sl, r2
 8014490:	f10b 0b01 	add.w	fp, fp, #1
 8014494:	3408      	adds	r4, #8
 8014496:	f1bb 0f04 	cmp.w	fp, #4
 801449a:	d19d      	bne.n	80143d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801449c:	9b00      	ldr	r3, [sp, #0]
 801449e:	9c08      	ldr	r4, [sp, #32]
 80144a0:	444b      	add	r3, r9
 80144a2:	4544      	cmp	r4, r8
 80144a4:	9300      	str	r3, [sp, #0]
 80144a6:	d188      	bne.n	80143ba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80144a8:	b021      	add	sp, #132	@ 0x84
 80144aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ae:	f04f 35ff 	mov.w	r5, #4294967295
 80144b2:	e767      	b.n	8014384 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80144b4:	240621b8 	.word	0x240621b8
 80144b8:	0802a69c 	.word	0x0802a69c

080144bc <_ZN8touchgfx4RectaNERKS0_>:
 80144bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144c0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80144c4:	888c      	ldrh	r4, [r1, #4]
 80144c6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80144ca:	443c      	add	r4, r7
 80144cc:	b2a4      	uxth	r4, r4
 80144ce:	fa0f f884 	sxth.w	r8, r4
 80144d2:	45c1      	cmp	r9, r8
 80144d4:	da2f      	bge.n	8014536 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80144d6:	8882      	ldrh	r2, [r0, #4]
 80144d8:	444a      	add	r2, r9
 80144da:	b292      	uxth	r2, r2
 80144dc:	fa0f fe82 	sxth.w	lr, r2
 80144e0:	4577      	cmp	r7, lr
 80144e2:	da28      	bge.n	8014536 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80144e4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80144e8:	88cb      	ldrh	r3, [r1, #6]
 80144ea:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80144ee:	442b      	add	r3, r5
 80144f0:	b21b      	sxth	r3, r3
 80144f2:	429e      	cmp	r6, r3
 80144f4:	da1f      	bge.n	8014536 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80144f6:	88c3      	ldrh	r3, [r0, #6]
 80144f8:	4433      	add	r3, r6
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	fa0f fc83 	sxth.w	ip, r3
 8014500:	4565      	cmp	r5, ip
 8014502:	da18      	bge.n	8014536 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014504:	454f      	cmp	r7, r9
 8014506:	bfb8      	it	lt
 8014508:	464f      	movlt	r7, r9
 801450a:	42b5      	cmp	r5, r6
 801450c:	bfb8      	it	lt
 801450e:	4635      	movlt	r5, r6
 8014510:	45f0      	cmp	r8, lr
 8014512:	bfd8      	it	le
 8014514:	4622      	movle	r2, r4
 8014516:	1bd2      	subs	r2, r2, r7
 8014518:	8082      	strh	r2, [r0, #4]
 801451a:	884a      	ldrh	r2, [r1, #2]
 801451c:	88c9      	ldrh	r1, [r1, #6]
 801451e:	8007      	strh	r7, [r0, #0]
 8014520:	440a      	add	r2, r1
 8014522:	8045      	strh	r5, [r0, #2]
 8014524:	b292      	uxth	r2, r2
 8014526:	b211      	sxth	r1, r2
 8014528:	458c      	cmp	ip, r1
 801452a:	bfa8      	it	ge
 801452c:	4613      	movge	r3, r2
 801452e:	1b5b      	subs	r3, r3, r5
 8014530:	80c3      	strh	r3, [r0, #6]
 8014532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014536:	2300      	movs	r3, #0
 8014538:	8003      	strh	r3, [r0, #0]
 801453a:	8043      	strh	r3, [r0, #2]
 801453c:	8083      	strh	r3, [r0, #4]
 801453e:	80c3      	strh	r3, [r0, #6]
 8014540:	e7f7      	b.n	8014532 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014542 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014542:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	dd06      	ble.n	8014558 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801454a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801454e:	2800      	cmp	r0, #0
 8014550:	bfcc      	ite	gt
 8014552:	2000      	movgt	r0, #0
 8014554:	2001      	movle	r0, #1
 8014556:	4770      	bx	lr
 8014558:	2001      	movs	r0, #1
 801455a:	4770      	bx	lr

0801455c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014560:	2300      	movs	r3, #0
 8014562:	4604      	mov	r4, r0
 8014564:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014566:	8003      	strh	r3, [r0, #0]
 8014568:	8043      	strh	r3, [r0, #2]
 801456a:	8083      	strh	r3, [r0, #4]
 801456c:	80c3      	strh	r3, [r0, #6]
 801456e:	2d00      	cmp	r5, #0
 8014570:	d040      	beq.n	80145f4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014572:	1d28      	adds	r0, r5, #4
 8014574:	f7ff ffe5 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014578:	b988      	cbnz	r0, 801459e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801457a:	4620      	mov	r0, r4
 801457c:	f7ff ffe1 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014580:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014584:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014588:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801458c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014590:	b138      	cbz	r0, 80145a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014592:	8022      	strh	r2, [r4, #0]
 8014594:	8063      	strh	r3, [r4, #2]
 8014596:	f8a4 e004 	strh.w	lr, [r4, #4]
 801459a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801459e:	69ad      	ldr	r5, [r5, #24]
 80145a0:	e7e5      	b.n	801456e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80145a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80145a6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80145aa:	4290      	cmp	r0, r2
 80145ac:	4607      	mov	r7, r0
 80145ae:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80145b2:	460e      	mov	r6, r1
 80145b4:	bfa8      	it	ge
 80145b6:	4617      	movge	r7, r2
 80145b8:	4299      	cmp	r1, r3
 80145ba:	4472      	add	r2, lr
 80145bc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80145c0:	bfa8      	it	ge
 80145c2:	461e      	movge	r6, r3
 80145c4:	4440      	add	r0, r8
 80145c6:	4471      	add	r1, lr
 80145c8:	4463      	add	r3, ip
 80145ca:	b200      	sxth	r0, r0
 80145cc:	8027      	strh	r7, [r4, #0]
 80145ce:	b212      	sxth	r2, r2
 80145d0:	8066      	strh	r6, [r4, #2]
 80145d2:	b209      	sxth	r1, r1
 80145d4:	b21b      	sxth	r3, r3
 80145d6:	4290      	cmp	r0, r2
 80145d8:	bfac      	ite	ge
 80145da:	ebc7 0200 	rsbge	r2, r7, r0
 80145de:	ebc7 0202 	rsblt	r2, r7, r2
 80145e2:	4299      	cmp	r1, r3
 80145e4:	bfac      	ite	ge
 80145e6:	ebc6 0301 	rsbge	r3, r6, r1
 80145ea:	ebc6 0303 	rsblt	r3, r6, r3
 80145ee:	80a2      	strh	r2, [r4, #4]
 80145f0:	80e3      	strh	r3, [r4, #6]
 80145f2:	e7d4      	b.n	801459e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80145f4:	4620      	mov	r0, r4
 80145f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145fa <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80145fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80145fe:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014602:	b383      	cbz	r3, 8014666 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014604:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014606:	b374      	cbz	r4, 8014666 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014608:	f9b1 5000 	ldrsh.w	r5, [r1]
 801460c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014610:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014614:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014618:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801461c:	b303      	cbz	r3, 8014660 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801461e:	4668      	mov	r0, sp
 8014620:	1d21      	adds	r1, r4, #4
 8014622:	f8ad 5000 	strh.w	r5, [sp]
 8014626:	f8ad 6002 	strh.w	r6, [sp, #2]
 801462a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801462e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014632:	f7ff ff43 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8014636:	4668      	mov	r0, sp
 8014638:	f7ff ff83 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801463c:	b980      	cbnz	r0, 8014660 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801463e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014642:	4669      	mov	r1, sp
 8014644:	88a2      	ldrh	r2, [r4, #4]
 8014646:	4620      	mov	r0, r4
 8014648:	1a9b      	subs	r3, r3, r2
 801464a:	88e2      	ldrh	r2, [r4, #6]
 801464c:	f8ad 3000 	strh.w	r3, [sp]
 8014650:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014654:	1a9b      	subs	r3, r3, r2
 8014656:	f8ad 3002 	strh.w	r3, [sp, #2]
 801465a:	6823      	ldr	r3, [r4, #0]
 801465c:	689b      	ldr	r3, [r3, #8]
 801465e:	4798      	blx	r3
 8014660:	69a4      	ldr	r4, [r4, #24]
 8014662:	2c00      	cmp	r4, #0
 8014664:	d1d8      	bne.n	8014618 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014666:	b002      	add	sp, #8
 8014668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801466c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801466c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801466e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014672:	460d      	mov	r5, r1
 8014674:	4616      	mov	r6, r2
 8014676:	b323      	cbz	r3, 80146c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014678:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801467a:	b314      	cbz	r4, 80146c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801467c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014680:	b1eb      	cbz	r3, 80146be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014682:	6828      	ldr	r0, [r5, #0]
 8014684:	466b      	mov	r3, sp
 8014686:	6869      	ldr	r1, [r5, #4]
 8014688:	c303      	stmia	r3!, {r0, r1}
 801468a:	4668      	mov	r0, sp
 801468c:	1d21      	adds	r1, r4, #4
 801468e:	f7ff ff15 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8014692:	4668      	mov	r0, sp
 8014694:	f7ff ff55 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014698:	b988      	cbnz	r0, 80146be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801469a:	f8bd 3000 	ldrh.w	r3, [sp]
 801469e:	4669      	mov	r1, sp
 80146a0:	88a2      	ldrh	r2, [r4, #4]
 80146a2:	4620      	mov	r0, r4
 80146a4:	1a9b      	subs	r3, r3, r2
 80146a6:	88e2      	ldrh	r2, [r4, #6]
 80146a8:	f8ad 3000 	strh.w	r3, [sp]
 80146ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80146b0:	1a9b      	subs	r3, r3, r2
 80146b2:	4632      	mov	r2, r6
 80146b4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80146b8:	6823      	ldr	r3, [r4, #0]
 80146ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80146bc:	4798      	blx	r3
 80146be:	69a4      	ldr	r4, [r4, #24]
 80146c0:	e7db      	b.n	801467a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80146c2:	b002      	add	sp, #8
 80146c4:	bd70      	pop	{r4, r5, r6, pc}

080146c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80146c6:	6803      	ldr	r3, [r0, #0]
 80146c8:	b513      	push	{r0, r1, r4, lr}
 80146ca:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80146ce:	2300      	movs	r3, #0
 80146d0:	e9cd 3300 	strd	r3, r3, [sp]
 80146d4:	466b      	mov	r3, sp
 80146d6:	47a0      	blx	r4
 80146d8:	b002      	add	sp, #8
 80146da:	bd10      	pop	{r4, pc}

080146dc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80146dc:	2301      	movs	r3, #1
 80146de:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80146e2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80146e6:	4770      	bx	lr

080146e8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80146e8:	2301      	movs	r3, #1
 80146ea:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80146ee:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80146f2:	4770      	bx	lr

080146f4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80146f4:	6843      	ldr	r3, [r0, #4]
 80146f6:	2201      	movs	r2, #1
 80146f8:	725a      	strb	r2, [r3, #9]
 80146fa:	6840      	ldr	r0, [r0, #4]
 80146fc:	6803      	ldr	r3, [r0, #0]
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	4718      	bx	r3

08014702 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014702:	6840      	ldr	r0, [r0, #4]
 8014704:	6803      	ldr	r3, [r0, #0]
 8014706:	689b      	ldr	r3, [r3, #8]
 8014708:	4718      	bx	r3

0801470a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801470a:	b530      	push	{r4, r5, lr}
 801470c:	b08b      	sub	sp, #44	@ 0x2c
 801470e:	6804      	ldr	r4, [r0, #0]
 8014710:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8014714:	9509      	str	r5, [sp, #36]	@ 0x24
 8014716:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801471a:	9508      	str	r5, [sp, #32]
 801471c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8014720:	9507      	str	r5, [sp, #28]
 8014722:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8014726:	9506      	str	r5, [sp, #24]
 8014728:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801472c:	9505      	str	r5, [sp, #20]
 801472e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8014732:	9504      	str	r5, [sp, #16]
 8014734:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8014738:	9503      	str	r5, [sp, #12]
 801473a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 801473e:	9502      	str	r5, [sp, #8]
 8014740:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8014744:	e9cd 3500 	strd	r3, r5, [sp]
 8014748:	4613      	mov	r3, r2
 801474a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 801474c:	2200      	movs	r2, #0
 801474e:	47a0      	blx	r4
 8014750:	b00b      	add	sp, #44	@ 0x2c
 8014752:	bd30      	pop	{r4, r5, pc}

08014754 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014754:	4b04      	ldr	r3, [pc, #16]	@ (8014768 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	b123      	cbz	r3, 8014764 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801475a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 801475e:	f080 0001 	eor.w	r0, r0, #1
 8014762:	4770      	bx	lr
 8014764:	2001      	movs	r0, #1
 8014766:	4770      	bx	lr
 8014768:	240621b6 	.word	0x240621b6

0801476c <_ZN8touchgfx3HAL8endFrameEv>:
 801476c:	b510      	push	{r4, lr}
 801476e:	4604      	mov	r4, r0
 8014770:	6840      	ldr	r0, [r0, #4]
 8014772:	6803      	ldr	r3, [r0, #0]
 8014774:	689b      	ldr	r3, [r3, #8]
 8014776:	4798      	blx	r3
 8014778:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 801477c:	b113      	cbz	r3, 8014784 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801477e:	2301      	movs	r3, #1
 8014780:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014784:	bd10      	pop	{r4, pc}

08014786 <_ZN8touchgfx3HAL10initializeEv>:
 8014786:	b510      	push	{r4, lr}
 8014788:	4604      	mov	r4, r0
 801478a:	f7ee fc37 	bl	8002ffc <_ZN8touchgfx10OSWrappers10initializeEv>
 801478e:	f7ed fa93 	bl	8001cb8 <_ZN8touchgfx4GPIO4initEv>
 8014792:	6860      	ldr	r0, [r4, #4]
 8014794:	6803      	ldr	r3, [r0, #0]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	4798      	blx	r3
 801479a:	68e0      	ldr	r0, [r4, #12]
 801479c:	6803      	ldr	r3, [r0, #0]
 801479e:	689b      	ldr	r3, [r3, #8]
 80147a0:	4798      	blx	r3
 80147a2:	6823      	ldr	r3, [r4, #0]
 80147a4:	4620      	mov	r0, r4
 80147a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ac:	4718      	bx	r3
	...

080147b0 <_ZN8touchgfx3HAL4tickEv>:
 80147b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80147b2:	6803      	ldr	r3, [r0, #0]
 80147b4:	4604      	mov	r4, r0
 80147b6:	4d5b      	ldr	r5, [pc, #364]	@ (8014924 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80147b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80147bc:	4798      	blx	r3
 80147be:	2800      	cmp	r0, #0
 80147c0:	f000 8095 	beq.w	80148ee <_ZN8touchgfx3HAL4tickEv+0x13e>
 80147c4:	2001      	movs	r0, #1
 80147c6:	2600      	movs	r6, #0
 80147c8:	f7ed f9bc 	bl	8001b44 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80147cc:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80147d0:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80147d4:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80147d8:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80147dc:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80147e0:	b133      	cbz	r3, 80147f0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80147e2:	6823      	ldr	r3, [r4, #0]
 80147e4:	4620      	mov	r0, r4
 80147e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80147ea:	4798      	blx	r3
 80147ec:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80147f0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80147f4:	2601      	movs	r6, #1
 80147f6:	6862      	ldr	r2, [r4, #4]
 80147f8:	f083 0301 	eor.w	r3, r3, #1
 80147fc:	702e      	strb	r6, [r5, #0]
 80147fe:	7253      	strb	r3, [r2, #9]
 8014800:	f006 fbc8 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8014804:	6803      	ldr	r3, [r0, #0]
 8014806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014808:	4798      	blx	r3
 801480a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801480e:	b90b      	cbnz	r3, 8014814 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014810:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8014814:	f006 fbbe 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 8014818:	6803      	ldr	r3, [r0, #0]
 801481a:	695b      	ldr	r3, [r3, #20]
 801481c:	4798      	blx	r3
 801481e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014820:	6803      	ldr	r3, [r0, #0]
 8014822:	691b      	ldr	r3, [r3, #16]
 8014824:	4798      	blx	r3
 8014826:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801482a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 801482e:	3b01      	subs	r3, #1
 8014830:	b2db      	uxtb	r3, r3
 8014832:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014836:	b10a      	cbz	r2, 801483c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014838:	2b00      	cmp	r3, #0
 801483a:	d1eb      	bne.n	8014814 <_ZN8touchgfx3HAL4tickEv+0x64>
 801483c:	4a3a      	ldr	r2, [pc, #232]	@ (8014928 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801483e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014842:	7813      	ldrb	r3, [r2, #0]
 8014844:	3301      	adds	r3, #1
 8014846:	b25b      	sxtb	r3, r3
 8014848:	4299      	cmp	r1, r3
 801484a:	7013      	strb	r3, [r2, #0]
 801484c:	dc10      	bgt.n	8014870 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801484e:	2300      	movs	r3, #0
 8014850:	68e0      	ldr	r0, [r4, #12]
 8014852:	a902      	add	r1, sp, #8
 8014854:	7013      	strb	r3, [r2, #0]
 8014856:	aa03      	add	r2, sp, #12
 8014858:	6803      	ldr	r3, [r0, #0]
 801485a:	68db      	ldr	r3, [r3, #12]
 801485c:	4798      	blx	r3
 801485e:	6823      	ldr	r3, [r4, #0]
 8014860:	2800      	cmp	r0, #0
 8014862:	d050      	beq.n	8014906 <_ZN8touchgfx3HAL4tickEv+0x156>
 8014864:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014868:	4620      	mov	r0, r4
 801486a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801486e:	4798      	blx	r3
 8014870:	2300      	movs	r3, #0
 8014872:	6960      	ldr	r0, [r4, #20]
 8014874:	f88d 3007 	strb.w	r3, [sp, #7]
 8014878:	b158      	cbz	r0, 8014892 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801487a:	6803      	ldr	r3, [r0, #0]
 801487c:	f10d 0107 	add.w	r1, sp, #7
 8014880:	68db      	ldr	r3, [r3, #12]
 8014882:	4798      	blx	r3
 8014884:	b128      	cbz	r0, 8014892 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014886:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014888:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801488c:	6803      	ldr	r3, [r0, #0]
 801488e:	68db      	ldr	r3, [r3, #12]
 8014890:	4798      	blx	r3
 8014892:	f104 001c 	add.w	r0, r4, #28
 8014896:	f013 fd07 	bl	80282a8 <_ZN8touchgfx8Gestures4tickEv>
 801489a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 801489e:	b30b      	cbz	r3, 80148e4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80148a0:	6920      	ldr	r0, [r4, #16]
 80148a2:	6803      	ldr	r3, [r0, #0]
 80148a4:	691b      	ldr	r3, [r3, #16]
 80148a6:	4798      	blx	r3
 80148a8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80148aa:	4606      	mov	r6, r0
 80148ac:	b903      	cbnz	r3, 80148b0 <_ZN8touchgfx3HAL4tickEv+0x100>
 80148ae:	6760      	str	r0, [r4, #116]	@ 0x74
 80148b0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80148b2:	4a1e      	ldr	r2, [pc, #120]	@ (801492c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80148b4:	1af3      	subs	r3, r6, r3
 80148b6:	4293      	cmp	r3, r2
 80148b8:	d914      	bls.n	80148e4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80148ba:	6920      	ldr	r0, [r4, #16]
 80148bc:	6803      	ldr	r3, [r0, #0]
 80148be:	699b      	ldr	r3, [r3, #24]
 80148c0:	4798      	blx	r3
 80148c2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80148c4:	2264      	movs	r2, #100	@ 0x64
 80148c6:	1af3      	subs	r3, r6, r3
 80148c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80148cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80148d0:	2800      	cmp	r0, #0
 80148d2:	dc1d      	bgt.n	8014910 <_ZN8touchgfx3HAL4tickEv+0x160>
 80148d4:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80148d8:	6920      	ldr	r0, [r4, #16]
 80148da:	2100      	movs	r1, #0
 80148dc:	6803      	ldr	r3, [r0, #0]
 80148de:	69db      	ldr	r3, [r3, #28]
 80148e0:	4798      	blx	r3
 80148e2:	6766      	str	r6, [r4, #116]	@ 0x74
 80148e4:	f006 fb56 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 80148e8:	6803      	ldr	r3, [r0, #0]
 80148ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148ec:	4798      	blx	r3
 80148ee:	6823      	ldr	r3, [r4, #0]
 80148f0:	4620      	mov	r0, r4
 80148f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80148f6:	4798      	blx	r3
 80148f8:	2001      	movs	r0, #1
 80148fa:	f7ed f95b 	bl	8001bb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80148fe:	2300      	movs	r3, #0
 8014900:	702b      	strb	r3, [r5, #0]
 8014902:	b004      	add	sp, #16
 8014904:	bd70      	pop	{r4, r5, r6, pc}
 8014906:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801490a:	4620      	mov	r0, r4
 801490c:	4798      	blx	r3
 801490e:	e7af      	b.n	8014870 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014910:	2863      	cmp	r0, #99	@ 0x63
 8014912:	bfcb      	itete	gt
 8014914:	2300      	movgt	r3, #0
 8014916:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801491a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 801491e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014922:	e7d9      	b.n	80148d8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8014924:	240621bc 	.word	0x240621bc
 8014928:	240621bd 	.word	0x240621bd
 801492c:	05f5e100 	.word	0x05f5e100

08014930 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014930:	b510      	push	{r4, lr}
 8014932:	4604      	mov	r4, r0
 8014934:	f7ee fb96 	bl	8003064 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014938:	2200      	movs	r2, #0
 801493a:	6863      	ldr	r3, [r4, #4]
 801493c:	729a      	strb	r2, [r3, #10]
 801493e:	bd10      	pop	{r4, pc}

08014940 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014940:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014942:	301c      	adds	r0, #28
 8014944:	f013 bcae 	b.w	80282a4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014948 <_ZN8touchgfx3HAL5touchEll>:
 8014948:	b530      	push	{r4, r5, lr}
 801494a:	b087      	sub	sp, #28
 801494c:	4604      	mov	r4, r0
 801494e:	a804      	add	r0, sp, #16
 8014950:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014954:	f006 f8e8 	bl	801ab28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014958:	9b04      	ldr	r3, [sp, #16]
 801495a:	a906      	add	r1, sp, #24
 801495c:	a803      	add	r0, sp, #12
 801495e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014962:	9b05      	ldr	r3, [sp, #20]
 8014964:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014968:	f006 f930 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801496c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8014970:	f104 001c 	add.w	r0, r4, #28
 8014974:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014978:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801497c:	b189      	cbz	r1, 80149a2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801497e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8014982:	9300      	str	r3, [sp, #0]
 8014984:	4613      	mov	r3, r2
 8014986:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 801498a:	462a      	mov	r2, r5
 801498c:	f013 fc9a 	bl	80282c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014990:	b128      	cbz	r0, 801499e <_ZN8touchgfx3HAL5touchEll+0x56>
 8014992:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014996:	6623      	str	r3, [r4, #96]	@ 0x60
 8014998:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801499c:	6663      	str	r3, [r4, #100]	@ 0x64
 801499e:	b007      	add	sp, #28
 80149a0:	bd30      	pop	{r4, r5, pc}
 80149a2:	f013 fccf 	bl	8028344 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80149a6:	2301      	movs	r3, #1
 80149a8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80149ac:	e7f1      	b.n	8014992 <_ZN8touchgfx3HAL5touchEll+0x4a>

080149ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80149ae:	b510      	push	{r4, lr}
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d046      	beq.n	8014a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80149b4:	ea81 0002 	eor.w	r0, r1, r2
 80149b8:	07c4      	lsls	r4, r0, #31
 80149ba:	d508      	bpl.n	80149ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80149bc:	440b      	add	r3, r1
 80149be:	3a01      	subs	r2, #1
 80149c0:	428b      	cmp	r3, r1
 80149c2:	d93e      	bls.n	8014a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80149c4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80149c8:	f801 0b01 	strb.w	r0, [r1], #1
 80149cc:	e7f8      	b.n	80149c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80149ce:	07d0      	lsls	r0, r2, #31
 80149d0:	bf42      	ittt	mi
 80149d2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80149d6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80149da:	f801 0b01 	strbmi.w	r0, [r1], #1
 80149de:	2b01      	cmp	r3, #1
 80149e0:	d911      	bls.n	8014a06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80149e2:	ea81 0402 	eor.w	r4, r1, r2
 80149e6:	4610      	mov	r0, r2
 80149e8:	07a4      	lsls	r4, r4, #30
 80149ea:	d022      	beq.n	8014a32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80149ec:	f023 0401 	bic.w	r4, r3, #1
 80149f0:	440c      	add	r4, r1
 80149f2:	428c      	cmp	r4, r1
 80149f4:	4602      	mov	r2, r0
 80149f6:	d904      	bls.n	8014a02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80149f8:	8812      	ldrh	r2, [r2, #0]
 80149fa:	3002      	adds	r0, #2
 80149fc:	f821 2b02 	strh.w	r2, [r1], #2
 8014a00:	e7f7      	b.n	80149f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014a02:	f003 0301 	and.w	r3, r3, #1
 8014a06:	f023 0003 	bic.w	r0, r3, #3
 8014a0a:	4408      	add	r0, r1
 8014a0c:	4288      	cmp	r0, r1
 8014a0e:	4614      	mov	r4, r2
 8014a10:	d904      	bls.n	8014a1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014a12:	6824      	ldr	r4, [r4, #0]
 8014a14:	3204      	adds	r2, #4
 8014a16:	f841 4b04 	str.w	r4, [r1], #4
 8014a1a:	e7f7      	b.n	8014a0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014a1c:	f003 0303 	and.w	r3, r3, #3
 8014a20:	3a01      	subs	r2, #1
 8014a22:	440b      	add	r3, r1
 8014a24:	428b      	cmp	r3, r1
 8014a26:	d90c      	bls.n	8014a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014a28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014a2c:	f801 0b01 	strb.w	r0, [r1], #1
 8014a30:	e7f8      	b.n	8014a24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014a32:	0790      	lsls	r0, r2, #30
 8014a34:	d0e7      	beq.n	8014a06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014a36:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014a3a:	3b02      	subs	r3, #2
 8014a3c:	f821 0b02 	strh.w	r0, [r1], #2
 8014a40:	e7e1      	b.n	8014a06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014a42:	2001      	movs	r0, #1
 8014a44:	bd10      	pop	{r4, pc}

08014a46 <_ZN8touchgfx3HAL7noTouchEv>:
 8014a46:	b510      	push	{r4, lr}
 8014a48:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	b153      	cbz	r3, 8014a66 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014a50:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8014a54:	2101      	movs	r1, #1
 8014a56:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8014a5a:	301c      	adds	r0, #28
 8014a5c:	f013 fc72 	bl	8028344 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014a60:	2300      	movs	r3, #0
 8014a62:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014a66:	bd10      	pop	{r4, pc}

08014a68 <_ZN8touchgfx8Drawable5setXYEss>:
 8014a68:	b570      	push	{r4, r5, r6, lr}
 8014a6a:	6803      	ldr	r3, [r0, #0]
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	4615      	mov	r5, r2
 8014a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a72:	4798      	blx	r3
 8014a74:	6823      	ldr	r3, [r4, #0]
 8014a76:	4629      	mov	r1, r5
 8014a78:	4620      	mov	r0, r4
 8014a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a80:	4718      	bx	r3
	...

08014a84 <_ZN8touchgfx3HAL3lcdEv>:
 8014a84:	4b04      	ldr	r3, [pc, #16]	@ (8014a98 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8014a8c:	b10a      	cbz	r2, 8014a92 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8014a8e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8014a90:	b900      	cbnz	r0, 8014a94 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8014a92:	6898      	ldr	r0, [r3, #8]
 8014a94:	4770      	bx	lr
 8014a96:	bf00      	nop
 8014a98:	240621b8 	.word	0x240621b8

08014a9c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014aa0:	b085      	sub	sp, #20
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	4699      	mov	r9, r3
 8014aa8:	ad04      	add	r5, sp, #16
 8014aaa:	460f      	mov	r7, r1
 8014aac:	4690      	mov	r8, r2
 8014aae:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014ab2:	69a0      	ldr	r0, [r4, #24]
 8014ab4:	6806      	ldr	r6, [r0, #0]
 8014ab6:	9501      	str	r5, [sp, #4]
 8014ab8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8014abc:	9500      	str	r5, [sp, #0]
 8014abe:	6835      	ldr	r5, [r6, #0]
 8014ac0:	47a8      	blx	r5
 8014ac2:	4d10      	ldr	r5, [pc, #64]	@ (8014b04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014ac4:	4606      	mov	r6, r0
 8014ac6:	f8a5 9000 	strh.w	r9, [r5]
 8014aca:	f7ff ffdb 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 8014ace:	6803      	ldr	r3, [r0, #0]
 8014ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ad2:	4798      	blx	r3
 8014ad4:	b128      	cbz	r0, 8014ae2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8014ad6:	2801      	cmp	r0, #1
 8014ad8:	d00b      	beq.n	8014af2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8014ada:	4630      	mov	r0, r6
 8014adc:	b005      	add	sp, #20
 8014ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ae2:	882b      	ldrh	r3, [r5, #0]
 8014ae4:	fb08 7203 	mla	r2, r8, r3, r7
 8014ae8:	9b03      	ldr	r3, [sp, #12]
 8014aea:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014aee:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014af0:	e7f3      	b.n	8014ada <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014af2:	882a      	ldrh	r2, [r5, #0]
 8014af4:	9b03      	ldr	r3, [sp, #12]
 8014af6:	fb08 7202 	mla	r2, r8, r2, r7
 8014afa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014afe:	1a9a      	subs	r2, r3, r2
 8014b00:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8014b02:	e7ea      	b.n	8014ada <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014b04:	240621b2 	.word	0x240621b2

08014b08 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b0a:	b08b      	sub	sp, #44	@ 0x2c
 8014b0c:	4617      	mov	r7, r2
 8014b0e:	4604      	mov	r4, r0
 8014b10:	460e      	mov	r6, r1
 8014b12:	461d      	mov	r5, r3
 8014b14:	f7ff ffb6 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 8014b18:	6803      	ldr	r3, [r0, #0]
 8014b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b1c:	4798      	blx	r3
 8014b1e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014b22:	9007      	str	r0, [sp, #28]
 8014b24:	4631      	mov	r1, r6
 8014b26:	6822      	ldr	r2, [r4, #0]
 8014b28:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8014b60 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014b2e:	4620      	mov	r0, r4
 8014b30:	881b      	ldrh	r3, [r3, #0]
 8014b32:	9306      	str	r3, [sp, #24]
 8014b34:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014b38:	9305      	str	r3, [sp, #20]
 8014b3a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8014b3e:	9304      	str	r3, [sp, #16]
 8014b40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014b44:	9303      	str	r3, [sp, #12]
 8014b46:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014b4a:	9302      	str	r3, [sp, #8]
 8014b4c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014b50:	e9cd 5300 	strd	r5, r3, [sp]
 8014b54:	463b      	mov	r3, r7
 8014b56:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8014b58:	2200      	movs	r2, #0
 8014b5a:	47a8      	blx	r5
 8014b5c:	b00b      	add	sp, #44	@ 0x2c
 8014b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b60:	240621b2 	.word	0x240621b2

08014b64 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b68:	4698      	mov	r8, r3
 8014b6a:	6803      	ldr	r3, [r0, #0]
 8014b6c:	b08b      	sub	sp, #44	@ 0x2c
 8014b6e:	4617      	mov	r7, r2
 8014b70:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8014b72:	460e      	mov	r6, r1
 8014b74:	4b13      	ldr	r3, [pc, #76]	@ (8014bc4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014b76:	4604      	mov	r4, r0
 8014b78:	f8b3 9000 	ldrh.w	r9, [r3]
 8014b7c:	f7ff ff82 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 8014b80:	6803      	ldr	r3, [r0, #0]
 8014b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b84:	4798      	blx	r3
 8014b86:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	4631      	mov	r1, r6
 8014b8e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014b92:	2302      	movs	r3, #2
 8014b94:	4620      	mov	r0, r4
 8014b96:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	9305      	str	r3, [sp, #20]
 8014b9e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014ba2:	9304      	str	r3, [sp, #16]
 8014ba4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8014ba8:	9303      	str	r3, [sp, #12]
 8014baa:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014bae:	9302      	str	r3, [sp, #8]
 8014bb0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014bb4:	e9cd 8300 	strd	r8, r3, [sp]
 8014bb8:	463b      	mov	r3, r7
 8014bba:	47a8      	blx	r5
 8014bbc:	b00b      	add	sp, #44	@ 0x2c
 8014bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bc2:	bf00      	nop
 8014bc4:	240621b2 	.word	0x240621b2

08014bc8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8014bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bcc:	4698      	mov	r8, r3
 8014bce:	6803      	ldr	r3, [r0, #0]
 8014bd0:	b087      	sub	sp, #28
 8014bd2:	460e      	mov	r6, r1
 8014bd4:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8014bd6:	4617      	mov	r7, r2
 8014bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8014c18 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8014bda:	4604      	mov	r4, r0
 8014bdc:	f8b3 9000 	ldrh.w	r9, [r3]
 8014be0:	f7ff ff50 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 8014be4:	6803      	ldr	r3, [r0, #0]
 8014be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014be8:	4798      	blx	r3
 8014bea:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8014bee:	463a      	mov	r2, r7
 8014bf0:	4631      	mov	r1, r6
 8014bf2:	f8cd 900c 	str.w	r9, [sp, #12]
 8014bf6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014bfa:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8014bfe:	4620      	mov	r0, r4
 8014c00:	9302      	str	r3, [sp, #8]
 8014c02:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8014c06:	9301      	str	r3, [sp, #4]
 8014c08:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8014c0c:	9300      	str	r3, [sp, #0]
 8014c0e:	4643      	mov	r3, r8
 8014c10:	47a8      	blx	r5
 8014c12:	b007      	add	sp, #28
 8014c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c18:	240621b2 	.word	0x240621b2

08014c1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c20:	4604      	mov	r4, r0
 8014c22:	b08f      	sub	sp, #60	@ 0x3c
 8014c24:	4610      	mov	r0, r2
 8014c26:	460d      	mov	r5, r1
 8014c28:	4691      	mov	r9, r2
 8014c2a:	461e      	mov	r6, r3
 8014c2c:	f009 f9ee 	bl	801e00c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014c30:	2800      	cmp	r0, #0
 8014c32:	f000 809d 	beq.w	8014d70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014c36:	6823      	ldr	r3, [r4, #0]
 8014c38:	4620      	mov	r0, r4
 8014c3a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8014dd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014c3e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8014c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c44:	4798      	blx	r3
 8014c46:	6823      	ldr	r3, [r4, #0]
 8014c48:	4620      	mov	r0, r4
 8014c4a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8014dd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c50:	4798      	blx	r3
 8014c52:	f8bb 3000 	ldrh.w	r3, [fp]
 8014c56:	4f5c      	ldr	r7, [pc, #368]	@ (8014dc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014c58:	9301      	str	r3, [sp, #4]
 8014c5a:	f8ba 3000 	ldrh.w	r3, [sl]
 8014c5e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014c62:	4640      	mov	r0, r8
 8014c64:	9302      	str	r3, [sp, #8]
 8014c66:	883b      	ldrh	r3, [r7, #0]
 8014c68:	9303      	str	r3, [sp, #12]
 8014c6a:	4b58      	ldr	r3, [pc, #352]	@ (8014dcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014c6c:	881a      	ldrh	r2, [r3, #0]
 8014c6e:	9305      	str	r3, [sp, #20]
 8014c70:	9204      	str	r2, [sp, #16]
 8014c72:	f009 fb1b 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014c76:	8038      	strh	r0, [r7, #0]
 8014c78:	4640      	mov	r0, r8
 8014c7a:	f009 fb4b 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014c7e:	9b05      	ldr	r3, [sp, #20]
 8014c80:	b280      	uxth	r0, r0
 8014c82:	8018      	strh	r0, [r3, #0]
 8014c84:	4b52      	ldr	r3, [pc, #328]	@ (8014dd0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d174      	bne.n	8014d76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014c8c:	883b      	ldrh	r3, [r7, #0]
 8014c8e:	f8aa 0000 	strh.w	r0, [sl]
 8014c92:	f8ab 3000 	strh.w	r3, [fp]
 8014c96:	4648      	mov	r0, r9
 8014c98:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8014c9c:	f009 f9b6 	bl	801e00c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8014ca6:	4611      	mov	r1, r2
 8014ca8:	4628      	mov	r0, r5
 8014caa:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014cae:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014cb2:	f7ff fed9 	bl	8014a68 <_ZN8touchgfx8Drawable5setXYEss>
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8014cbc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014cc0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	dd5c      	ble.n	8014d82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014cc8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	dd58      	ble.n	8014d82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014cd0:	462a      	mov	r2, r5
 8014cd2:	ab0a      	add	r3, sp, #40	@ 0x28
 8014cd4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014cd8:	6851      	ldr	r1, [r2, #4]
 8014cda:	c303      	stmia	r3!, {r0, r1}
 8014cdc:	4631      	mov	r1, r6
 8014cde:	a80a      	add	r0, sp, #40	@ 0x28
 8014ce0:	f7ff fbec 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8014ce4:	4b38      	ldr	r3, [pc, #224]	@ (8014dc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014ce6:	2100      	movs	r1, #0
 8014ce8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014cec:	4b37      	ldr	r3, [pc, #220]	@ (8014dcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014cee:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8014cf2:	aa0a      	add	r2, sp, #40	@ 0x28
 8014cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014cf8:	910c      	str	r1, [sp, #48]	@ 0x30
 8014cfa:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8014cfe:	ab08      	add	r3, sp, #32
 8014d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d04:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	a90c      	add	r1, sp, #48	@ 0x30
 8014d0c:	f7ff fbd6 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8014d10:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d13c      	bne.n	8014d90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014d16:	2000      	movs	r0, #0
 8014d18:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8014d1c:	2600      	movs	r6, #0
 8014d1e:	696b      	ldr	r3, [r5, #20]
 8014d20:	a908      	add	r1, sp, #32
 8014d22:	682a      	ldr	r2, [r5, #0]
 8014d24:	4628      	mov	r0, r5
 8014d26:	9305      	str	r3, [sp, #20]
 8014d28:	616e      	str	r6, [r5, #20]
 8014d2a:	6892      	ldr	r2, [r2, #8]
 8014d2c:	4790      	blx	r2
 8014d2e:	9b05      	ldr	r3, [sp, #20]
 8014d30:	4652      	mov	r2, sl
 8014d32:	4649      	mov	r1, r9
 8014d34:	616b      	str	r3, [r5, #20]
 8014d36:	4628      	mov	r0, r5
 8014d38:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8014d3c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8014d40:	f7ff fe92 	bl	8014a68 <_ZN8touchgfx8Drawable5setXYEss>
 8014d44:	9a01      	ldr	r2, [sp, #4]
 8014d46:	4b23      	ldr	r3, [pc, #140]	@ (8014dd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014d48:	4620      	mov	r0, r4
 8014d4a:	801a      	strh	r2, [r3, #0]
 8014d4c:	9a02      	ldr	r2, [sp, #8]
 8014d4e:	4b22      	ldr	r3, [pc, #136]	@ (8014dd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014d50:	801a      	strh	r2, [r3, #0]
 8014d52:	9a03      	ldr	r2, [sp, #12]
 8014d54:	4b1c      	ldr	r3, [pc, #112]	@ (8014dc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014d56:	801a      	strh	r2, [r3, #0]
 8014d58:	4b1c      	ldr	r3, [pc, #112]	@ (8014dcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014d5a:	9a04      	ldr	r2, [sp, #16]
 8014d5c:	801a      	strh	r2, [r3, #0]
 8014d5e:	6823      	ldr	r3, [r4, #0]
 8014d60:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8014d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d66:	4798      	blx	r3
 8014d68:	6823      	ldr	r3, [r4, #0]
 8014d6a:	4620      	mov	r0, r4
 8014d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d6e:	4798      	blx	r3
 8014d70:	b00f      	add	sp, #60	@ 0x3c
 8014d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d76:	883b      	ldrh	r3, [r7, #0]
 8014d78:	f8ab 0000 	strh.w	r0, [fp]
 8014d7c:	f8aa 3000 	strh.w	r3, [sl]
 8014d80:	e789      	b.n	8014c96 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014d82:	462a      	mov	r2, r5
 8014d84:	ab0a      	add	r3, sp, #40	@ 0x28
 8014d86:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014d8a:	6851      	ldr	r1, [r2, #4]
 8014d8c:	c303      	stmia	r3!, {r0, r1}
 8014d8e:	e7a9      	b.n	8014ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014d90:	a807      	add	r0, sp, #28
 8014d92:	f009 fc01 	bl	801e598 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014d96:	4606      	mov	r6, r0
 8014d98:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8014d9a:	6803      	ldr	r3, [r0, #0]
 8014d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d9e:	4798      	blx	r3
 8014da0:	4286      	cmp	r6, r0
 8014da2:	d1b8      	bne.n	8014d16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8014da4:	f7ff fe6e 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 8014da8:	6803      	ldr	r3, [r0, #0]
 8014daa:	4606      	mov	r6, r0
 8014dac:	a807      	add	r0, sp, #28
 8014dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014db0:	9305      	str	r3, [sp, #20]
 8014db2:	f009 fbf1 	bl	801e598 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014db6:	9b05      	ldr	r3, [sp, #20]
 8014db8:	4601      	mov	r1, r0
 8014dba:	4630      	mov	r0, r6
 8014dbc:	4798      	blx	r3
 8014dbe:	f080 0001 	eor.w	r0, r0, #1
 8014dc2:	b2c0      	uxtb	r0, r0
 8014dc4:	e7a8      	b.n	8014d18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8014dc6:	bf00      	nop
 8014dc8:	240621ac 	.word	0x240621ac
 8014dcc:	240621ae 	.word	0x240621ae
 8014dd0:	240621b0 	.word	0x240621b0
 8014dd4:	240621b2 	.word	0x240621b2
 8014dd8:	240621b4 	.word	0x240621b4

08014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8014ddc:	4b07      	ldr	r3, [pc, #28]	@ (8014dfc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8014dde:	b510      	push	{r4, lr}
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	4604      	mov	r4, r0
 8014de4:	b13b      	cbz	r3, 8014df6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014de6:	6803      	ldr	r3, [r0, #0]
 8014de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dea:	4798      	blx	r3
 8014dec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014dee:	4283      	cmp	r3, r0
 8014df0:	d101      	bne.n	8014df6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014df2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8014df4:	bd10      	pop	{r4, pc}
 8014df6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014df8:	e7fc      	b.n	8014df4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014dfa:	bf00      	nop
 8014dfc:	240621b6 	.word	0x240621b6

08014e00 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e04:	461d      	mov	r5, r3
 8014e06:	b08a      	sub	sp, #40	@ 0x28
 8014e08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e0c:	4690      	mov	r8, r2
 8014e0e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8014e12:	2400      	movs	r4, #0
 8014e14:	4607      	mov	r7, r0
 8014e16:	fb06 8505 	mla	r5, r6, r5, r8
 8014e1a:	9404      	str	r4, [sp, #16]
 8014e1c:	f88d 4020 	strb.w	r4, [sp, #32]
 8014e20:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014e24:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014e28:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014e2c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014e30:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014e34:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014e38:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e3c:	f7ff ffce 	bl	8014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014e40:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014e44:	6878      	ldr	r0, [r7, #4]
 8014e46:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014e4a:	a901      	add	r1, sp, #4
 8014e4c:	9505      	str	r5, [sp, #20]
 8014e4e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014e52:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8014e56:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8014e5a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8014e5e:	6803      	ldr	r3, [r0, #0]
 8014e60:	685b      	ldr	r3, [r3, #4]
 8014e62:	4798      	blx	r3
 8014e64:	b00a      	add	sp, #40	@ 0x28
 8014e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e6a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014e6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e6e:	b08b      	sub	sp, #44	@ 0x2c
 8014e70:	2400      	movs	r4, #0
 8014e72:	4691      	mov	r9, r2
 8014e74:	461d      	mov	r5, r3
 8014e76:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8014e7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014e7e:	4688      	mov	r8, r1
 8014e80:	4607      	mov	r7, r0
 8014e82:	9404      	str	r4, [sp, #16]
 8014e84:	fb06 9505 	mla	r5, r6, r5, r9
 8014e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014e8c:	f7ff ffa6 	bl	8014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014e90:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014e94:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014e9e:	a901      	add	r1, sp, #4
 8014ea0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014ea4:	9505      	str	r5, [sp, #20]
 8014ea6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014eaa:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014eae:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014eb2:	f8cd 8010 	str.w	r8, [sp, #16]
 8014eb6:	f8ad 4020 	strh.w	r4, [sp, #32]
 8014eba:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014ebe:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8014ec2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8014ec6:	6803      	ldr	r3, [r0, #0]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	4798      	blx	r3
 8014ecc:	b00b      	add	sp, #44	@ 0x2c
 8014ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014ed4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ed8:	b08a      	sub	sp, #40	@ 0x28
 8014eda:	4698      	mov	r8, r3
 8014edc:	2300      	movs	r3, #0
 8014ede:	4606      	mov	r6, r0
 8014ee0:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8014ee4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8014ee8:	2d0b      	cmp	r5, #11
 8014eea:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8014eee:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8014ef2:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8014ef6:	9304      	str	r3, [sp, #16]
 8014ef8:	d137      	bne.n	8014f6a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8014efa:	2380      	movs	r3, #128	@ 0x80
 8014efc:	f88d 0020 	strb.w	r0, [sp, #32]
 8014f00:	4630      	mov	r0, r6
 8014f02:	9203      	str	r2, [sp, #12]
 8014f04:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014f08:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014f0c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014f10:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014f14:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014f18:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014f1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f20:	f7ff ff5c 	bl	8014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f24:	2c0b      	cmp	r4, #11
 8014f26:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8014f2a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014f2e:	bf94      	ite	ls
 8014f30:	4b19      	ldrls	r3, [pc, #100]	@ (8014f98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014f32:	2100      	movhi	r1, #0
 8014f34:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8014f38:	bf98      	it	ls
 8014f3a:	5d19      	ldrbls	r1, [r3, r4]
 8014f3c:	fb02 8307 	mla	r3, r2, r7, r8
 8014f40:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014f44:	10c9      	asrs	r1, r1, #3
 8014f46:	fb01 0003 	mla	r0, r1, r3, r0
 8014f4a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8014f4e:	a901      	add	r1, sp, #4
 8014f50:	9005      	str	r0, [sp, #20]
 8014f52:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8014f56:	2300      	movs	r3, #0
 8014f58:	6870      	ldr	r0, [r6, #4]
 8014f5a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014f5e:	6803      	ldr	r3, [r0, #0]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	4798      	blx	r3
 8014f64:	b00a      	add	sp, #40	@ 0x28
 8014f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f6a:	2d02      	cmp	r5, #2
 8014f6c:	d109      	bne.n	8014f82 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8014f6e:	28ff      	cmp	r0, #255	@ 0xff
 8014f70:	d105      	bne.n	8014f7e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014f72:	f1bc 0f00 	cmp.w	ip, #0
 8014f76:	bf14      	ite	ne
 8014f78:	2340      	movne	r3, #64	@ 0x40
 8014f7a:	2320      	moveq	r3, #32
 8014f7c:	e7be      	b.n	8014efc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f7e:	2340      	movs	r3, #64	@ 0x40
 8014f80:	e7bc      	b.n	8014efc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f82:	28ff      	cmp	r0, #255	@ 0xff
 8014f84:	d105      	bne.n	8014f92 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014f86:	f1bc 0f00 	cmp.w	ip, #0
 8014f8a:	bf14      	ite	ne
 8014f8c:	2304      	movne	r3, #4
 8014f8e:	2301      	moveq	r3, #1
 8014f90:	e7b4      	b.n	8014efc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f92:	2304      	movs	r3, #4
 8014f94:	e7b2      	b.n	8014efc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f96:	bf00      	nop
 8014f98:	0802de50 	.word	0x0802de50

08014f9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa0:	b08b      	sub	sp, #44	@ 0x2c
 8014fa2:	461d      	mov	r5, r3
 8014fa4:	2400      	movs	r4, #0
 8014fa6:	4688      	mov	r8, r1
 8014fa8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8014fac:	4693      	mov	fp, r2
 8014fae:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8014fb2:	4607      	mov	r7, r0
 8014fb4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8014fb8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8014fbc:	9404      	str	r4, [sp, #16]
 8014fbe:	bf14      	ite	ne
 8014fc0:	2308      	movne	r3, #8
 8014fc2:	2302      	moveq	r3, #2
 8014fc4:	fb05 b50a 	mla	r5, r5, sl, fp
 8014fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014fcc:	f7ff ff06 	bl	8014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014fd0:	2e0b      	cmp	r6, #11
 8014fd2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8014fd6:	a901      	add	r1, sp, #4
 8014fd8:	bf98      	it	ls
 8014fda:	4b13      	ldrls	r3, [pc, #76]	@ (8015028 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014fdc:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014fe0:	bf98      	it	ls
 8014fe2:	5d9c      	ldrbls	r4, [r3, r6]
 8014fe4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8014fe8:	10e4      	asrs	r4, r4, #3
 8014fea:	f8cd 8010 	str.w	r8, [sp, #16]
 8014fee:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014ff2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8014ff6:	fb04 0405 	mla	r4, r4, r5, r0
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015000:	2300      	movs	r3, #0
 8015002:	9405      	str	r4, [sp, #20]
 8015004:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015008:	f88d 9020 	strb.w	r9, [sp, #32]
 801500c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8015010:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015014:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8015018:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 801501c:	6803      	ldr	r3, [r0, #0]
 801501e:	685b      	ldr	r3, [r3, #4]
 8015020:	4798      	blx	r3
 8015022:	b00b      	add	sp, #44	@ 0x2c
 8015024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015028:	0802de50 	.word	0x0802de50

0801502c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015030:	461e      	mov	r6, r3
 8015032:	4b0a      	ldr	r3, [pc, #40]	@ (801505c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015034:	460f      	mov	r7, r1
 8015036:	4690      	mov	r8, r2
 8015038:	881d      	ldrh	r5, [r3, #0]
 801503a:	f7ff fd23 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 801503e:	6803      	ldr	r3, [r0, #0]
 8015040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015042:	4798      	blx	r3
 8015044:	280b      	cmp	r0, #11
 8015046:	bf96      	itet	ls
 8015048:	4b05      	ldrls	r3, [pc, #20]	@ (8015060 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801504a:	2400      	movhi	r4, #0
 801504c:	5c1c      	ldrbls	r4, [r3, r0]
 801504e:	fb08 7005 	mla	r0, r8, r5, r7
 8015052:	10e4      	asrs	r4, r4, #3
 8015054:	fb04 6000 	mla	r0, r4, r0, r6
 8015058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801505c:	240621b2 	.word	0x240621b2
 8015060:	0802de50 	.word	0x0802de50

08015064 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015066:	b08b      	sub	sp, #44	@ 0x2c
 8015068:	461f      	mov	r7, r3
 801506a:	4604      	mov	r4, r0
 801506c:	4616      	mov	r6, r2
 801506e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8015072:	2500      	movs	r5, #0
 8015074:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015078:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801507c:	9504      	str	r5, [sp, #16]
 801507e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015082:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015086:	f8ad 301a 	strh.w	r3, [sp, #26]
 801508a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801508e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015092:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015096:	f88d 3020 	strb.w	r3, [sp, #32]
 801509a:	f7ff fe9f 	bl	8014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801509e:	463a      	mov	r2, r7
 80150a0:	4631      	mov	r1, r6
 80150a2:	4603      	mov	r3, r0
 80150a4:	4620      	mov	r0, r4
 80150a6:	f7ff ffc1 	bl	801502c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80150aa:	4b0e      	ldr	r3, [pc, #56]	@ (80150e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80150ac:	9005      	str	r0, [sp, #20]
 80150ae:	881b      	ldrh	r3, [r3, #0]
 80150b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80150b4:	f7ff fce6 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 80150b8:	6803      	ldr	r3, [r0, #0]
 80150ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150bc:	4798      	blx	r3
 80150be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80150c0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80150c4:	a901      	add	r1, sp, #4
 80150c6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80150ca:	9304      	str	r3, [sp, #16]
 80150cc:	6860      	ldr	r0, [r4, #4]
 80150ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80150d2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80150d6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80150da:	6803      	ldr	r3, [r0, #0]
 80150dc:	685b      	ldr	r3, [r3, #4]
 80150de:	4798      	blx	r3
 80150e0:	b00b      	add	sp, #44	@ 0x2c
 80150e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150e4:	240621b2 	.word	0x240621b2

080150e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80150e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ea:	b08d      	sub	sp, #52	@ 0x34
 80150ec:	2501      	movs	r5, #1
 80150ee:	4604      	mov	r4, r0
 80150f0:	466b      	mov	r3, sp
 80150f2:	9503      	str	r5, [sp, #12]
 80150f4:	e883 0006 	stmia.w	r3, {r1, r2}
 80150f8:	2300      	movs	r3, #0
 80150fa:	f8bd 6000 	ldrh.w	r6, [sp]
 80150fe:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015102:	9306      	str	r3, [sp, #24]
 8015104:	6803      	ldr	r3, [r0, #0]
 8015106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015108:	4798      	blx	r3
 801510a:	463a      	mov	r2, r7
 801510c:	4631      	mov	r1, r6
 801510e:	4603      	mov	r3, r0
 8015110:	4620      	mov	r0, r4
 8015112:	f7ff ff8b 	bl	801502c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015116:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015118:	9004      	str	r0, [sp, #16]
 801511a:	9307      	str	r3, [sp, #28]
 801511c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015120:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015124:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015128:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801512c:	4b0e      	ldr	r3, [pc, #56]	@ (8015168 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801512e:	881b      	ldrh	r3, [r3, #0]
 8015130:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015134:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015138:	f7ff fca4 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 801513c:	6803      	ldr	r3, [r0, #0]
 801513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015140:	4798      	blx	r3
 8015142:	23ff      	movs	r3, #255	@ 0xff
 8015144:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015148:	a903      	add	r1, sp, #12
 801514a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801514e:	6860      	ldr	r0, [r4, #4]
 8015150:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015154:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015158:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801515c:	6803      	ldr	r3, [r0, #0]
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	4798      	blx	r3
 8015162:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8015164:	b00d      	add	sp, #52	@ 0x34
 8015166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015168:	240621b2 	.word	0x240621b2

0801516c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015170:	b08c      	sub	sp, #48	@ 0x30
 8015172:	461e      	mov	r6, r3
 8015174:	2300      	movs	r3, #0
 8015176:	4604      	mov	r4, r0
 8015178:	466d      	mov	r5, sp
 801517a:	9306      	str	r3, [sp, #24]
 801517c:	6803      	ldr	r3, [r0, #0]
 801517e:	e885 0006 	stmia.w	r5, {r1, r2}
 8015182:	2501      	movs	r5, #1
 8015184:	f8bd 7000 	ldrh.w	r7, [sp]
 8015188:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801518c:	9503      	str	r5, [sp, #12]
 801518e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015190:	4798      	blx	r3
 8015192:	4642      	mov	r2, r8
 8015194:	4639      	mov	r1, r7
 8015196:	4603      	mov	r3, r0
 8015198:	4620      	mov	r0, r4
 801519a:	f7ff ff47 	bl	801502c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801519e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80151a2:	9004      	str	r0, [sp, #16]
 80151a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80151a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80151ac:	9607      	str	r6, [sp, #28]
 80151ae:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80151b2:	4b10      	ldr	r3, [pc, #64]	@ (80151f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80151b4:	881b      	ldrh	r3, [r3, #0]
 80151b6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80151ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80151bc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80151c0:	f7ff fc60 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 80151c4:	6803      	ldr	r3, [r0, #0]
 80151c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151c8:	4798      	blx	r3
 80151ca:	23ff      	movs	r3, #255	@ 0xff
 80151cc:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80151d0:	a903      	add	r1, sp, #12
 80151d2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80151d6:	6860      	ldr	r0, [r4, #4]
 80151d8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80151dc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80151e0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80151e4:	6803      	ldr	r3, [r0, #0]
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	4798      	blx	r3
 80151ea:	4630      	mov	r0, r6
 80151ec:	b00c      	add	sp, #48	@ 0x30
 80151ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f2:	bf00      	nop
 80151f4:	240621b2 	.word	0x240621b2

080151f8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80151f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151fa:	b085      	sub	sp, #20
 80151fc:	4605      	mov	r5, r0
 80151fe:	ac02      	add	r4, sp, #8
 8015200:	e884 0006 	stmia.w	r4, {r1, r2}
 8015204:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015208:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801520c:	f7ff fde6 	bl	8014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015210:	4631      	mov	r1, r6
 8015212:	4603      	mov	r3, r0
 8015214:	463a      	mov	r2, r7
 8015216:	4628      	mov	r0, r5
 8015218:	f7ff ff08 	bl	801502c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801521c:	4a05      	ldr	r2, [pc, #20]	@ (8015234 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801521e:	682b      	ldr	r3, [r5, #0]
 8015220:	8812      	ldrh	r2, [r2, #0]
 8015222:	9200      	str	r2, [sp, #0]
 8015224:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8015226:	4603      	mov	r3, r0
 8015228:	4628      	mov	r0, r5
 801522a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801522e:	47b0      	blx	r6
 8015230:	b005      	add	sp, #20
 8015232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015234:	240621b2 	.word	0x240621b2

08015238 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015238:	b570      	push	{r4, r5, r6, lr}
 801523a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801523e:	4604      	mov	r4, r0
 8015240:	b19b      	cbz	r3, 801526a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015242:	2002      	movs	r0, #2
 8015244:	f7ec fcee 	bl	8001c24 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015248:	2300      	movs	r3, #0
 801524a:	4620      	mov	r0, r4
 801524c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8015250:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8015254:	6823      	ldr	r3, [r4, #0]
 8015256:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801525a:	f7ff fdbf 	bl	8014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801525e:	4601      	mov	r1, r0
 8015260:	4620      	mov	r0, r4
 8015262:	462b      	mov	r3, r5
 8015264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015268:	4718      	bx	r3
 801526a:	bd70      	pop	{r4, r5, r6, pc}

0801526c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801526c:	b570      	push	{r4, r5, r6, lr}
 801526e:	4605      	mov	r5, r0
 8015270:	460c      	mov	r4, r1
 8015272:	2003      	movs	r0, #3
 8015274:	b149      	cbz	r1, 801528a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8015276:	f7ec fc65 	bl	8001b44 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801527a:	6928      	ldr	r0, [r5, #16]
 801527c:	b168      	cbz	r0, 801529a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801527e:	6803      	ldr	r3, [r0, #0]
 8015280:	2101      	movs	r1, #1
 8015282:	695b      	ldr	r3, [r3, #20]
 8015284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015288:	4718      	bx	r3
 801528a:	f7ec fc93 	bl	8001bb4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801528e:	6928      	ldr	r0, [r5, #16]
 8015290:	b118      	cbz	r0, 801529a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8015292:	6803      	ldr	r3, [r0, #0]
 8015294:	4621      	mov	r1, r4
 8015296:	695b      	ldr	r3, [r3, #20]
 8015298:	e7f4      	b.n	8015284 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801529a:	bd70      	pop	{r4, r5, r6, pc}

0801529c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801529c:	b538      	push	{r3, r4, r5, lr}
 801529e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80152a2:	4604      	mov	r4, r0
 80152a4:	460d      	mov	r5, r1
 80152a6:	428b      	cmp	r3, r1
 80152a8:	d006      	beq.n	80152b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80152aa:	6803      	ldr	r3, [r0, #0]
 80152ac:	b929      	cbnz	r1, 80152ba <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80152ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80152b2:	4798      	blx	r3
 80152b4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80152b8:	bd38      	pop	{r3, r4, r5, pc}
 80152ba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80152be:	e7f8      	b.n	80152b2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080152c0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80152c0:	4b0d      	ldr	r3, [pc, #52]	@ (80152f8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80152c2:	b510      	push	{r4, lr}
 80152c4:	781b      	ldrb	r3, [r3, #0]
 80152c6:	4604      	mov	r4, r0
 80152c8:	b95b      	cbnz	r3, 80152e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80152ca:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80152ce:	2b02      	cmp	r3, #2
 80152d0:	d007      	beq.n	80152e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80152d2:	6840      	ldr	r0, [r0, #4]
 80152d4:	f000 f91a 	bl	801550c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80152d8:	b118      	cbz	r0, 80152e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80152da:	6862      	ldr	r2, [r4, #4]
 80152dc:	7a53      	ldrb	r3, [r2, #9]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d0fc      	beq.n	80152dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80152e2:	f7ed feb5 	bl	8003050 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80152e6:	4620      	mov	r0, r4
 80152e8:	2100      	movs	r1, #0
 80152ea:	f7ff ffd7 	bl	801529c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80152ee:	4620      	mov	r0, r4
 80152f0:	f7ff fd74 	bl	8014ddc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80152f4:	bd10      	pop	{r4, pc}
 80152f6:	bf00      	nop
 80152f8:	240621b6 	.word	0x240621b6

080152fc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80152fc:	b570      	push	{r4, r5, r6, lr}
 80152fe:	4604      	mov	r4, r0
 8015300:	6803      	ldr	r3, [r0, #0]
 8015302:	b919      	cbnz	r1, 801530c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8015304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801530a:	4718      	bx	r3
 801530c:	2200      	movs	r2, #0
 801530e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8015312:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8015316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015318:	4798      	blx	r3
 801531a:	6863      	ldr	r3, [r4, #4]
 801531c:	2101      	movs	r1, #1
 801531e:	4605      	mov	r5, r0
 8015320:	4620      	mov	r0, r4
 8015322:	7299      	strb	r1, [r3, #10]
 8015324:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8015328:	f7ff ffb8 	bl	801529c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801532c:	4628      	mov	r0, r5
 801532e:	bd70      	pop	{r4, r5, r6, pc}

08015330 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015330:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015334:	1a13      	subs	r3, r2, r0
 8015336:	4258      	negs	r0, r3
 8015338:	4158      	adcs	r0, r3
 801533a:	4770      	bx	lr

0801533c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801533c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015340:	1a9b      	subs	r3, r3, r2
 8015342:	2b00      	cmp	r3, #0
 8015344:	bfdc      	itt	le
 8015346:	6882      	ldrle	r2, [r0, #8]
 8015348:	189b      	addle	r3, r3, r2
 801534a:	2b01      	cmp	r3, #1
 801534c:	bfcc      	ite	gt
 801534e:	2000      	movgt	r0, #0
 8015350:	2001      	movle	r0, #1
 8015352:	4770      	bx	lr

08015354 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015354:	6902      	ldr	r2, [r0, #16]
 8015356:	6843      	ldr	r3, [r0, #4]
 8015358:	2024      	movs	r0, #36	@ 0x24
 801535a:	fb00 3002 	mla	r0, r0, r2, r3
 801535e:	4770      	bx	lr

08015360 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015360:	6803      	ldr	r3, [r0, #0]
 8015362:	691b      	ldr	r3, [r3, #16]
 8015364:	4718      	bx	r3

08015366 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015366:	2301      	movs	r3, #1
 8015368:	b570      	push	{r4, r5, r6, lr}
 801536a:	7203      	strb	r3, [r0, #8]
 801536c:	4604      	mov	r4, r0
 801536e:	6840      	ldr	r0, [r0, #4]
 8015370:	6803      	ldr	r3, [r0, #0]
 8015372:	699b      	ldr	r3, [r3, #24]
 8015374:	4798      	blx	r3
 8015376:	6803      	ldr	r3, [r0, #0]
 8015378:	4605      	mov	r5, r0
 801537a:	2b40      	cmp	r3, #64	@ 0x40
 801537c:	d00c      	beq.n	8015398 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801537e:	d810      	bhi.n	80153a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015380:	2b04      	cmp	r3, #4
 8015382:	d01d      	beq.n	80153c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015384:	d804      	bhi.n	8015390 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015386:	2b01      	cmp	r3, #1
 8015388:	d006      	beq.n	8015398 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801538a:	2b02      	cmp	r3, #2
 801538c:	d02c      	beq.n	80153e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801538e:	bd70      	pop	{r4, r5, r6, pc}
 8015390:	2b08      	cmp	r3, #8
 8015392:	d01d      	beq.n	80153d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015394:	2b20      	cmp	r3, #32
 8015396:	d1fa      	bne.n	801538e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015398:	6823      	ldr	r3, [r4, #0]
 801539a:	4620      	mov	r0, r4
 801539c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801539e:	4798      	blx	r3
 80153a0:	e013      	b.n	80153ca <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80153a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80153a6:	d0f7      	beq.n	8015398 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80153a8:	d804      	bhi.n	80153b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80153aa:	2b80      	cmp	r3, #128	@ 0x80
 80153ac:	d0f4      	beq.n	8015398 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80153ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80153b2:	e7f0      	b.n	8015396 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80153b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80153b8:	d0ee      	beq.n	8015398 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80153ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80153be:	e7e5      	b.n	801538c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80153c0:	6823      	ldr	r3, [r4, #0]
 80153c2:	7f01      	ldrb	r1, [r0, #28]
 80153c4:	4620      	mov	r0, r4
 80153c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153c8:	4798      	blx	r3
 80153ca:	6823      	ldr	r3, [r4, #0]
 80153cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153ce:	e006      	b.n	80153de <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80153d0:	6823      	ldr	r3, [r4, #0]
 80153d2:	7f01      	ldrb	r1, [r0, #28]
 80153d4:	4620      	mov	r0, r4
 80153d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153d8:	4798      	blx	r3
 80153da:	6823      	ldr	r3, [r4, #0]
 80153dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80153de:	4629      	mov	r1, r5
 80153e0:	4620      	mov	r0, r4
 80153e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153e6:	4718      	bx	r3
 80153e8:	6823      	ldr	r3, [r4, #0]
 80153ea:	4620      	mov	r0, r4
 80153ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153ee:	4798      	blx	r3
 80153f0:	e7f3      	b.n	80153da <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080153f2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80153f2:	4770      	bx	lr

080153f4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80153f4:	4770      	bx	lr

080153f6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80153f6:	4770      	bx	lr

080153f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80153f8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80153fc:	b510      	push	{r4, lr}
 80153fe:	1ad2      	subs	r2, r2, r3
 8015400:	2a00      	cmp	r2, #0
 8015402:	bfdc      	itt	le
 8015404:	6884      	ldrle	r4, [r0, #8]
 8015406:	1912      	addle	r2, r2, r4
 8015408:	2a01      	cmp	r2, #1
 801540a:	dd16      	ble.n	801543a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801540c:	6842      	ldr	r2, [r0, #4]
 801540e:	2424      	movs	r4, #36	@ 0x24
 8015410:	fb04 2303 	mla	r3, r4, r3, r2
 8015414:	f101 0220 	add.w	r2, r1, #32
 8015418:	f851 4b04 	ldr.w	r4, [r1], #4
 801541c:	4291      	cmp	r1, r2
 801541e:	f843 4b04 	str.w	r4, [r3], #4
 8015422:	d1f9      	bne.n	8015418 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8015424:	780a      	ldrb	r2, [r1, #0]
 8015426:	701a      	strb	r2, [r3, #0]
 8015428:	68c3      	ldr	r3, [r0, #12]
 801542a:	6882      	ldr	r2, [r0, #8]
 801542c:	f3bf 8f5b 	dmb	ish
 8015430:	3301      	adds	r3, #1
 8015432:	429a      	cmp	r2, r3
 8015434:	bfd8      	it	le
 8015436:	1a9b      	suble	r3, r3, r2
 8015438:	60c3      	str	r3, [r0, #12]
 801543a:	bd10      	pop	{r4, pc}

0801543c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801543c:	6903      	ldr	r3, [r0, #16]
 801543e:	6882      	ldr	r2, [r0, #8]
 8015440:	f3bf 8f5b 	dmb	ish
 8015444:	3301      	adds	r3, #1
 8015446:	429a      	cmp	r2, r3
 8015448:	bfd8      	it	le
 801544a:	1a9b      	suble	r3, r3, r2
 801544c:	6103      	str	r3, [r0, #16]
 801544e:	4770      	bx	lr

08015450 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015450:	b570      	push	{r4, r5, r6, lr}
 8015452:	4604      	mov	r4, r0
 8015454:	460e      	mov	r6, r1
 8015456:	6860      	ldr	r0, [r4, #4]
 8015458:	6803      	ldr	r3, [r0, #0]
 801545a:	685b      	ldr	r3, [r3, #4]
 801545c:	4798      	blx	r3
 801545e:	2800      	cmp	r0, #0
 8015460:	d1f9      	bne.n	8015456 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015462:	4d0d      	ldr	r5, [pc, #52]	@ (8015498 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015464:	6828      	ldr	r0, [r5, #0]
 8015466:	6803      	ldr	r3, [r0, #0]
 8015468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801546a:	4798      	blx	r3
 801546c:	f7ed fe02 	bl	8003074 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015470:	6828      	ldr	r0, [r5, #0]
 8015472:	2101      	movs	r1, #1
 8015474:	f7ff ff12 	bl	801529c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015478:	6860      	ldr	r0, [r4, #4]
 801547a:	4631      	mov	r1, r6
 801547c:	6803      	ldr	r3, [r0, #0]
 801547e:	689b      	ldr	r3, [r3, #8]
 8015480:	4798      	blx	r3
 8015482:	6823      	ldr	r3, [r4, #0]
 8015484:	4620      	mov	r0, r4
 8015486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015488:	4798      	blx	r3
 801548a:	6828      	ldr	r0, [r5, #0]
 801548c:	6803      	ldr	r3, [r0, #0]
 801548e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015494:	4718      	bx	r3
 8015496:	bf00      	nop
 8015498:	240621b8 	.word	0x240621b8

0801549c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801549c:	b508      	push	{r3, lr}
 801549e:	f7ed fdd7 	bl	8003050 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80154a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80154a6:	f7ed bddd 	b.w	8003064 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080154aa <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80154aa:	b510      	push	{r4, lr}
 80154ac:	4604      	mov	r4, r0
 80154ae:	2114      	movs	r1, #20
 80154b0:	f013 fd16 	bl	8028ee0 <_ZdlPvj>
 80154b4:	4620      	mov	r0, r4
 80154b6:	bd10      	pop	{r4, pc}

080154b8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80154b8:	b570      	push	{r4, r5, r6, lr}
 80154ba:	4604      	mov	r4, r0
 80154bc:	6840      	ldr	r0, [r0, #4]
 80154be:	6803      	ldr	r3, [r0, #0]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	4798      	blx	r3
 80154c4:	4605      	mov	r5, r0
 80154c6:	b930      	cbnz	r0, 80154d6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80154c8:	7a23      	ldrb	r3, [r4, #8]
 80154ca:	b123      	cbz	r3, 80154d6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80154cc:	6860      	ldr	r0, [r4, #4]
 80154ce:	6803      	ldr	r3, [r0, #0]
 80154d0:	695b      	ldr	r3, [r3, #20]
 80154d2:	4798      	blx	r3
 80154d4:	7225      	strb	r5, [r4, #8]
 80154d6:	6860      	ldr	r0, [r4, #4]
 80154d8:	6803      	ldr	r3, [r0, #0]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4798      	blx	r3
 80154de:	b928      	cbnz	r0, 80154ec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80154e0:	6823      	ldr	r3, [r4, #0]
 80154e2:	4620      	mov	r0, r4
 80154e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154ea:	4718      	bx	r3
 80154ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154f0:	f7ed bdca 	b.w	8003088 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080154f4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80154f4:	b510      	push	{r4, lr}
 80154f6:	6082      	str	r2, [r0, #8]
 80154f8:	2200      	movs	r2, #0
 80154fa:	4c03      	ldr	r4, [pc, #12]	@ (8015508 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80154fc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015500:	e9c0 4100 	strd	r4, r1, [r0]
 8015504:	bd10      	pop	{r4, pc}
 8015506:	bf00      	nop
 8015508:	0802de64 	.word	0x0802de64

0801550c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801550c:	6840      	ldr	r0, [r0, #4]
 801550e:	6803      	ldr	r3, [r0, #0]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	4718      	bx	r3

08015514 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8015514:	2300      	movs	r3, #0
 8015516:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8015518:	8503      	strh	r3, [r0, #40]	@ 0x28
 801551a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 801551c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801551e:	6980      	ldr	r0, [r0, #24]
 8015520:	b110      	cbz	r0, 8015528 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8015522:	6803      	ldr	r3, [r0, #0]
 8015524:	691b      	ldr	r3, [r3, #16]
 8015526:	4718      	bx	r3
 8015528:	4770      	bx	lr

0801552a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801552a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 801552e:	4770      	bx	lr

08015530 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8015530:	b538      	push	{r3, r4, r5, lr}
 8015532:	0e0b      	lsrs	r3, r1, #24
 8015534:	4604      	mov	r4, r0
 8015536:	460d      	mov	r5, r1
 8015538:	7783      	strb	r3, [r0, #30]
 801553a:	6803      	ldr	r3, [r0, #0]
 801553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801553e:	4798      	blx	r3
 8015540:	6803      	ldr	r3, [r0, #0]
 8015542:	4629      	mov	r1, r5
 8015544:	689b      	ldr	r3, [r3, #8]
 8015546:	4798      	blx	r3
 8015548:	6823      	ldr	r3, [r4, #0]
 801554a:	4620      	mov	r0, r4
 801554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801554e:	4798      	blx	r3
 8015550:	61a0      	str	r0, [r4, #24]
 8015552:	bd38      	pop	{r3, r4, r5, pc}

08015554 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8015554:	7741      	strb	r1, [r0, #29]
 8015556:	4770      	bx	lr

08015558 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8015558:	b530      	push	{r4, r5, lr}
 801555a:	460d      	mov	r5, r1
 801555c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8015560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015568:	682b      	ldr	r3, [r5, #0]
 801556a:	6023      	str	r3, [r4, #0]
 801556c:	bd30      	pop	{r4, r5, pc}

0801556e <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 801556e:	b538      	push	{r3, r4, r5, lr}
 8015570:	4604      	mov	r4, r0
 8015572:	1d03      	adds	r3, r0, #4
 8015574:	6808      	ldr	r0, [r1, #0]
 8015576:	2500      	movs	r5, #0
 8015578:	6849      	ldr	r1, [r1, #4]
 801557a:	c303      	stmia	r3!, {r0, r1}
 801557c:	6813      	ldr	r3, [r2, #0]
 801557e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8015582:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8015586:	6853      	ldr	r3, [r2, #4]
 8015588:	61a5      	str	r5, [r4, #24]
 801558a:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 801558e:	f007 f89b 	bl	801c6c8 <_ZN8touchgfx9Matrix3x35resetEv>
 8015592:	23ff      	movs	r3, #255	@ 0xff
 8015594:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8015598:	7763      	strb	r3, [r4, #29]
 801559a:	77a3      	strb	r3, [r4, #30]
 801559c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80155a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80155a2:	2301      	movs	r3, #1
 80155a4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80155a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080155ac <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 80155ac:	ee70 7a41 	vsub.f32	s15, s0, s2
 80155b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80155b8:	4605      	mov	r5, r0
 80155ba:	ed2d 8b0a 	vpush	{d8-d12}
 80155be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155c2:	b086      	sub	sp, #24
 80155c4:	eeb0 ba40 	vmov.f32	s22, s0
 80155c8:	6802      	ldr	r2, [r0, #0]
 80155ca:	eef0 ba60 	vmov.f32	s23, s1
 80155ce:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 80155d2:	eef0 aa41 	vmov.f32	s21, s2
 80155d6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80155d8:	eeb0 aa61 	vmov.f32	s20, s3
 80155dc:	eeb0 ca42 	vmov.f32	s24, s4
 80155e0:	eef0 ca62 	vmov.f32	s25, s5
 80155e4:	d112      	bne.n	801560c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80155e6:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80155ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80155ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155f2:	d10b      	bne.n	801560c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80155f4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80155f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80155fa:	3901      	subs	r1, #1
 80155fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8015600:	b006      	add	sp, #24
 8015602:	ecbd 8b0a 	vpop	{d8-d12}
 8015606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801560a:	4710      	bx	r2
 801560c:	23ff      	movs	r3, #255	@ 0xff
 801560e:	4628      	mov	r0, r5
 8015610:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8015614:	77ab      	strb	r3, [r5, #30]
 8015616:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8015618:	4798      	blx	r3
 801561a:	eeb0 0a4b 	vmov.f32	s0, s22
 801561e:	eef0 0a6b 	vmov.f32	s1, s23
 8015622:	4604      	mov	r4, r0
 8015624:	4640      	mov	r0, r8
 8015626:	f007 f8fe 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801562a:	eef0 8a40 	vmov.f32	s17, s0
 801562e:	ed8d 0a00 	vstr	s0, [sp]
 8015632:	eeb0 0a6a 	vmov.f32	s0, s21
 8015636:	eef0 9a60 	vmov.f32	s19, s1
 801563a:	edcd 0a01 	vstr	s1, [sp, #4]
 801563e:	4640      	mov	r0, r8
 8015640:	eef0 0a4a 	vmov.f32	s1, s20
 8015644:	f007 f8ef 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015648:	eef4 8a40 	vcmp.f32	s17, s0
 801564c:	eeb0 8a40 	vmov.f32	s16, s0
 8015650:	ed8d 0a02 	vstr	s0, [sp, #8]
 8015654:	eeb0 9a60 	vmov.f32	s18, s1
 8015658:	edcd 0a03 	vstr	s1, [sp, #12]
 801565c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015660:	eef4 9a60 	vcmp.f32	s19, s1
 8015664:	bf0c      	ite	eq
 8015666:	2301      	moveq	r3, #1
 8015668:	2300      	movne	r3, #0
 801566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566e:	eef4 8a40 	vcmp.f32	s17, s0
 8015672:	7463      	strb	r3, [r4, #17]
 8015674:	bf0c      	ite	eq
 8015676:	2301      	moveq	r3, #1
 8015678:	2300      	movne	r3, #0
 801567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801567e:	74a3      	strb	r3, [r4, #18]
 8015680:	d024      	beq.n	80156cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8015682:	eef4 9a60 	vcmp.f32	s19, s1
 8015686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801568a:	d01f      	beq.n	80156cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801568c:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8015690:	4640      	mov	r0, r8
 8015692:	ee7a aacb 	vsub.f32	s21, s21, s22
 8015696:	eeb0 0a4b 	vmov.f32	s0, s22
 801569a:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 801569e:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 80156a2:	eef0 0a6b 	vmov.f32	s1, s23
 80156a6:	eea7 0acc 	vfms.f32	s0, s15, s24
 80156aa:	eeec 0a87 	vfma.f32	s1, s25, s14
 80156ae:	f007 f8ba 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80156b2:	ed8d 0a04 	vstr	s0, [sp, #16]
 80156b6:	ee30 0a68 	vsub.f32	s0, s0, s17
 80156ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80156be:	edcd 0a05 	vstr	s1, [sp, #20]
 80156c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c6:	d121      	bne.n	801570c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 80156c8:	2301      	movs	r3, #1
 80156ca:	74a3      	strb	r3, [r4, #18]
 80156cc:	7c63      	ldrb	r3, [r4, #17]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d051      	beq.n	8015776 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 80156d2:	ee39 7a69 	vsub.f32	s14, s18, s19
 80156d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80157cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80156da:	eef4 9ac9 	vcmpe.f32	s19, s18
 80156de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80156e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156e6:	edc4 7a08 	vstr	s15, [r4, #32]
 80156ea:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80156ee:	ee17 3a90 	vmov	r3, s15
 80156f2:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 80156f6:	b21a      	sxth	r2, r3
 80156f8:	ee17 3a90 	vmov	r3, s15
 80156fc:	bf48      	it	mi
 80156fe:	8122      	strhmi	r2, [r4, #8]
 8015700:	b21b      	sxth	r3, r3
 8015702:	bf56      	itet	pl
 8015704:	80e2      	strhpl	r2, [r4, #6]
 8015706:	80e3      	strhmi	r3, [r4, #6]
 8015708:	8123      	strhpl	r3, [r4, #8]
 801570a:	e02c      	b.n	8015766 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801570c:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8015710:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8015714:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015718:	edc4 7a05 	vstr	s15, [r4, #20]
 801571c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015720:	d102      	bne.n	8015728 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8015722:	2301      	movs	r3, #1
 8015724:	7463      	strb	r3, [r4, #17]
 8015726:	e7d1      	b.n	80156cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8015728:	eeb0 7a69 	vmov.f32	s14, s19
 801572c:	ee39 9a69 	vsub.f32	s18, s18, s19
 8015730:	ee38 8a68 	vsub.f32	s16, s16, s17
 8015734:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8015738:	ed84 7a06 	vstr	s14, [r4, #24]
 801573c:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8015740:	ee38 8a47 	vsub.f32	s16, s16, s14
 8015744:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80157d0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8015748:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801574c:	ed84 8a07 	vstr	s16, [r4, #28]
 8015750:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015758:	edc4 7a08 	vstr	s15, [r4, #32]
 801575c:	d503      	bpl.n	8015766 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801575e:	eeb1 8a48 	vneg.f32	s16, s16
 8015762:	ed84 8a07 	vstr	s16, [r4, #28]
 8015766:	60e7      	str	r7, [r4, #12]
 8015768:	7426      	strb	r6, [r4, #16]
 801576a:	61ac      	str	r4, [r5, #24]
 801576c:	b006      	add	sp, #24
 801576e:	ecbd 8b0a 	vpop	{d8-d12}
 8015772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015776:	7ca3      	ldrb	r3, [r4, #18]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d0f4      	beq.n	8015766 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801577c:	ee38 7a68 	vsub.f32	s14, s16, s17
 8015780:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80157cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8015784:	eef4 8ac8 	vcmpe.f32	s17, s16
 8015788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015790:	edc4 7a08 	vstr	s15, [r4, #32]
 8015794:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015798:	ee17 3a90 	vmov	r3, s15
 801579c:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80157a0:	b21a      	sxth	r2, r3
 80157a2:	ee17 3a90 	vmov	r3, s15
 80157a6:	bf48      	it	mi
 80157a8:	8122      	strhmi	r2, [r4, #8]
 80157aa:	b21b      	sxth	r3, r3
 80157ac:	bf56      	itet	pl
 80157ae:	80e2      	strhpl	r2, [r4, #6]
 80157b0:	80e3      	strhmi	r3, [r4, #6]
 80157b2:	8123      	strhpl	r3, [r4, #8]
 80157b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80157b8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80157bc:	1a9b      	subs	r3, r3, r2
 80157be:	ee07 3a90 	vmov	s15, r3
 80157c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157c6:	edc4 7a07 	vstr	s15, [r4, #28]
 80157ca:	e7cc      	b.n	8015766 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80157cc:	447ffffe 	.word	0x447ffffe
 80157d0:	44800000 	.word	0x44800000

080157d4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80157d4:	b510      	push	{r4, lr}
 80157d6:	ed2d 8b02 	vpush	{d8}
 80157da:	eef0 8a62 	vmov.f32	s17, s5
 80157de:	2100      	movs	r1, #0
 80157e0:	4604      	mov	r4, r0
 80157e2:	eeb0 8a42 	vmov.f32	s16, s4
 80157e6:	f013 f8ed 	bl	80289c4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80157ea:	eef0 7a68 	vmov.f32	s15, s17
 80157ee:	6823      	ldr	r3, [r4, #0]
 80157f0:	4620      	mov	r0, r4
 80157f2:	689b      	ldr	r3, [r3, #8]
 80157f4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80157f8:	ee17 2a90 	vmov	r2, s15
 80157fc:	eef0 7a48 	vmov.f32	s15, s16
 8015800:	ecbd 8b02 	vpop	{d8}
 8015804:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801580c:	ee17 1a90 	vmov	r1, s15
 8015810:	4718      	bx	r3

08015812 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8015812:	b510      	push	{r4, lr}
 8015814:	ed2d 8b02 	vpush	{d8}
 8015818:	eef0 8a63 	vmov.f32	s17, s7
 801581c:	2100      	movs	r1, #0
 801581e:	4604      	mov	r4, r0
 8015820:	eeb0 8a43 	vmov.f32	s16, s6
 8015824:	f013 f990 	bl	8028b48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8015828:	eef0 7a68 	vmov.f32	s15, s17
 801582c:	6823      	ldr	r3, [r4, #0]
 801582e:	4620      	mov	r0, r4
 8015830:	689b      	ldr	r3, [r3, #8]
 8015832:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015836:	ee17 2a90 	vmov	r2, s15
 801583a:	eef0 7a48 	vmov.f32	s15, s16
 801583e:	ecbd 8b02 	vpop	{d8}
 8015842:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801584a:	ee17 1a90 	vmov	r1, s15
 801584e:	4718      	bx	r3

08015850 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8015850:	b513      	push	{r0, r1, r4, lr}
 8015852:	4604      	mov	r4, r0
 8015854:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8015856:	f006 ffe6 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801585a:	eef0 7a60 	vmov.f32	s15, s1
 801585e:	4620      	mov	r0, r4
 8015860:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015864:	ee17 2a90 	vmov	r2, s15
 8015868:	eef0 7a40 	vmov.f32	s15, s0
 801586c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015870:	ee17 1a90 	vmov	r1, s15
 8015874:	b002      	add	sp, #8
 8015876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801587a:	f012 bffd 	b.w	8028878 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801587e:	b513      	push	{r0, r1, r4, lr}
 8015880:	4604      	mov	r4, r0
 8015882:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8015884:	f006 ffcf 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015888:	eef0 7a60 	vmov.f32	s15, s1
 801588c:	4620      	mov	r0, r4
 801588e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015892:	ee17 2a90 	vmov	r2, s15
 8015896:	eef0 7a40 	vmov.f32	s15, s0
 801589a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801589e:	ee17 1a90 	vmov	r1, s15
 80158a2:	b002      	add	sp, #8
 80158a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158a8:	f013 b833 	b.w	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080158ac <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80158ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158ae:	2400      	movs	r4, #0
 80158b0:	9f07      	ldr	r7, [sp, #28]
 80158b2:	f04f 0e01 	mov.w	lr, #1
 80158b6:	4626      	mov	r6, r4
 80158b8:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80158bc:	4463      	add	r3, ip
 80158be:	4563      	cmp	r3, ip
 80158c0:	d02d      	beq.n	801591e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80158c2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80158c6:	2d06      	cmp	r5, #6
 80158c8:	d8f9      	bhi.n	80158be <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80158ca:	fa0e f505 	lsl.w	r5, lr, r5
 80158ce:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80158d2:	d10d      	bne.n	80158f0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80158d4:	f015 0f10 	tst.w	r5, #16
 80158d8:	d117      	bne.n	801590a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80158da:	072d      	lsls	r5, r5, #28
 80158dc:	d5ef      	bpl.n	80158be <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80158de:	3801      	subs	r0, #1
 80158e0:	b91e      	cbnz	r6, 80158ea <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80158e2:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80158e6:	682d      	ldr	r5, [r5, #0]
 80158e8:	600d      	str	r5, [r1, #0]
 80158ea:	b96c      	cbnz	r4, 8015908 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80158ec:	2601      	movs	r6, #1
 80158ee:	e7e6      	b.n	80158be <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80158f0:	b926      	cbnz	r6, 80158fc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 80158f2:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 80158f6:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80158fa:	600b      	str	r3, [r1, #0]
 80158fc:	b924      	cbnz	r4, 8015908 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80158fe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8015902:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015906:	6013      	str	r3, [r2, #0]
 8015908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801590a:	3801      	subs	r0, #1
 801590c:	b91c      	cbnz	r4, 8015916 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801590e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8015912:	6824      	ldr	r4, [r4, #0]
 8015914:	6014      	str	r4, [r2, #0]
 8015916:	2e00      	cmp	r6, #0
 8015918:	d1f6      	bne.n	8015908 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801591a:	2401      	movs	r4, #1
 801591c:	e7cf      	b.n	80158be <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801591e:	b90e      	cbnz	r6, 8015924 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8015920:	2300      	movs	r3, #0
 8015922:	600b      	str	r3, [r1, #0]
 8015924:	2c00      	cmp	r4, #0
 8015926:	d1ef      	bne.n	8015908 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015928:	2300      	movs	r3, #0
 801592a:	e7ec      	b.n	8015906 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801592c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801592c:	b538      	push	{r3, r4, r5, lr}
 801592e:	ed2d 8b0a 	vpush	{d8-d12}
 8015932:	eef0 ba40 	vmov.f32	s23, s0
 8015936:	4604      	mov	r4, r0
 8015938:	eeb0 ca60 	vmov.f32	s24, s1
 801593c:	460d      	mov	r5, r1
 801593e:	eef0 aa41 	vmov.f32	s21, s2
 8015942:	eeb0 ba61 	vmov.f32	s22, s3
 8015946:	eeb0 9a42 	vmov.f32	s18, s4
 801594a:	eef0 9a62 	vmov.f32	s19, s5
 801594e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8015952:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8015956:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801595a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801595e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8015962:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8015966:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801596a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801596e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8015972:	f013 fadf 	bl	8028f34 <sqrtf>
 8015976:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801597e:	d12e      	bne.n	80159de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8015980:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8015984:	ee39 7acb 	vsub.f32	s14, s19, s22
 8015988:	eeb0 8a6a 	vmov.f32	s16, s21
 801598c:	eef0 8a4b 	vmov.f32	s17, s22
 8015990:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8015994:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8015998:	eea7 8a0a 	vfma.f32	s16, s14, s20
 801599c:	eee7 8aca 	vfms.f32	s17, s15, s20
 80159a0:	2d02      	cmp	r5, #2
 80159a2:	dc2f      	bgt.n	8015a04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80159a4:	3501      	adds	r5, #1
 80159a6:	eef0 1a4b 	vmov.f32	s3, s22
 80159aa:	eeb0 1a6a 	vmov.f32	s2, s21
 80159ae:	4620      	mov	r0, r4
 80159b0:	4629      	mov	r1, r5
 80159b2:	eef0 2a68 	vmov.f32	s5, s17
 80159b6:	eeb0 2a48 	vmov.f32	s4, s16
 80159ba:	eef0 0a4c 	vmov.f32	s1, s24
 80159be:	eeb0 0a6b 	vmov.f32	s0, s23
 80159c2:	f7ff ffb3 	bl	801592c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80159c6:	eef0 0a68 	vmov.f32	s1, s17
 80159ca:	eeb0 0a48 	vmov.f32	s0, s16
 80159ce:	4620      	mov	r0, r4
 80159d0:	f7ff ff55 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80159d4:	eeb0 ba68 	vmov.f32	s22, s17
 80159d8:	eef0 aa48 	vmov.f32	s21, s16
 80159dc:	e7b9      	b.n	8015952 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80159de:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80159e2:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80159e6:	ee78 8acc 	vsub.f32	s17, s17, s24
 80159ea:	ee28 7a27 	vmul.f32	s14, s16, s15
 80159ee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80159f2:	ee87 8a00 	vdiv.f32	s16, s14, s0
 80159f6:	eec7 8a80 	vdiv.f32	s17, s15, s0
 80159fa:	ee3b 8a88 	vadd.f32	s16, s23, s16
 80159fe:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8015a02:	e7cd      	b.n	80159a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8015a04:	eef0 0a68 	vmov.f32	s1, s17
 8015a08:	4620      	mov	r0, r4
 8015a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8015a0e:	f7ff ff36 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015a12:	ecbd 8b0a 	vpop	{d8-d12}
 8015a16:	bd38      	pop	{r3, r4, r5, pc}

08015a18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8015a18:	b510      	push	{r4, lr}
 8015a1a:	ed2d 8b0a 	vpush	{d8-d12}
 8015a1e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8015a22:	4604      	mov	r4, r0
 8015a24:	eeb0 ca40 	vmov.f32	s24, s0
 8015a28:	2b02      	cmp	r3, #2
 8015a2a:	eeb0 9a60 	vmov.f32	s18, s1
 8015a2e:	eef0 9a41 	vmov.f32	s19, s2
 8015a32:	eef0 8a61 	vmov.f32	s17, s3
 8015a36:	eeb0 ba42 	vmov.f32	s22, s4
 8015a3a:	eef0 ba62 	vmov.f32	s23, s5
 8015a3e:	eeb0 aa43 	vmov.f32	s20, s6
 8015a42:	eef0 aa63 	vmov.f32	s21, s7
 8015a46:	eeb0 8a44 	vmov.f32	s16, s8
 8015a4a:	eef0 ca64 	vmov.f32	s25, s9
 8015a4e:	d12c      	bne.n	8015aaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8015a50:	eef0 0a62 	vmov.f32	s1, s5
 8015a54:	eeb0 0a42 	vmov.f32	s0, s4
 8015a58:	f7ff ff11 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015a5c:	ee79 9acb 	vsub.f32	s19, s19, s22
 8015a60:	ee7a caec 	vsub.f32	s25, s21, s25
 8015a64:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8015a68:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8015a6c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8015a70:	ee28 8a88 	vmul.f32	s16, s17, s16
 8015a74:	eef4 9ac8 	vcmpe.f32	s19, s16
 8015a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a7c:	db0f      	blt.n	8015a9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8015a7e:	2101      	movs	r1, #1
 8015a80:	eef0 2a6a 	vmov.f32	s5, s21
 8015a84:	eeb0 2a4a 	vmov.f32	s4, s20
 8015a88:	4620      	mov	r0, r4
 8015a8a:	eef0 1a6b 	vmov.f32	s3, s23
 8015a8e:	eeb0 1a4b 	vmov.f32	s2, s22
 8015a92:	eef0 0a49 	vmov.f32	s1, s18
 8015a96:	eeb0 0a4c 	vmov.f32	s0, s24
 8015a9a:	f7ff ff47 	bl	801592c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8015a9e:	eef0 0a6a 	vmov.f32	s1, s21
 8015aa2:	4620      	mov	r0, r4
 8015aa4:	eeb0 0a4a 	vmov.f32	s0, s20
 8015aa8:	e035      	b.n	8015b16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8015aaa:	2b01      	cmp	r3, #1
 8015aac:	d138      	bne.n	8015b20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015aae:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8015ab2:	ee33 6a48 	vsub.f32	s12, s6, s16
 8015ab6:	ee71 7a42 	vsub.f32	s15, s2, s4
 8015aba:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8015abe:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8015ac2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015ac6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ace:	d027      	beq.n	8015b20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015ad0:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8015ad4:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8015ad8:	eea4 8a83 	vfma.f32	s16, s9, s6
 8015adc:	eee1 8a22 	vfma.f32	s17, s2, s5
 8015ae0:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8015ae4:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8015ae8:	eee6 7a28 	vfma.f32	s15, s12, s17
 8015aec:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8015af0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8015af4:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8015af8:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8015afc:	ee3c ca40 	vsub.f32	s24, s24, s0
 8015b00:	ee39 9a60 	vsub.f32	s18, s18, s1
 8015b04:	ee29 9a09 	vmul.f32	s18, s18, s18
 8015b08:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8015b0c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b14:	db04      	blt.n	8015b20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015b16:	f7ff feb2 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b1a:	ecbd 8b0a 	vpop	{d8-d12}
 8015b1e:	bd10      	pop	{r4, pc}
 8015b20:	eef0 0a6b 	vmov.f32	s1, s23
 8015b24:	4620      	mov	r0, r4
 8015b26:	eeb0 0a4b 	vmov.f32	s0, s22
 8015b2a:	f7ff fea8 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b2e:	e7b6      	b.n	8015a9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08015b30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8015b30:	b510      	push	{r4, lr}
 8015b32:	ed2d 8b0c 	vpush	{d8-d13}
 8015b36:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	eeb0 9a40 	vmov.f32	s18, s0
 8015b40:	eef0 9a60 	vmov.f32	s19, s1
 8015b44:	eef0 aa41 	vmov.f32	s21, s2
 8015b48:	eeb0 ba61 	vmov.f32	s22, s3
 8015b4c:	b933      	cbnz	r3, 8015b5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8015b4e:	f7ff fe96 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b52:	eef0 0a4b 	vmov.f32	s1, s22
 8015b56:	eeb0 0a6a 	vmov.f32	s0, s21
 8015b5a:	e015      	b.n	8015b88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8015b5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015b60:	2b02      	cmp	r3, #2
 8015b62:	ee71 8a40 	vsub.f32	s17, s2, s0
 8015b66:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8015b6a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015b6e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015b72:	d10f      	bne.n	8015b94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8015b74:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8015b78:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015b7c:	f7ff fe7f 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b80:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8015b84:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8015b88:	4620      	mov	r0, r4
 8015b8a:	f7ff fe78 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b8e:	ecbd 8b0c 	vpop	{d8-d13}
 8015b92:	bd10      	pop	{r4, pc}
 8015b94:	f7ff fe73 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b98:	eef0 0a69 	vmov.f32	s1, s19
 8015b9c:	eeb0 0a49 	vmov.f32	s0, s18
 8015ba0:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8015cd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8015ba4:	eeb1 aa68 	vneg.f32	s20, s17
 8015ba8:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8015cd4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8015bac:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015bb6:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8015cd8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8015bba:	eddf ca48 	vldr	s25, [pc, #288]	@ 8015cdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8015bbe:	ed9f da48 	vldr	s26, [pc, #288]	@ 8015ce0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8015bc2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8015bc6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8015bca:	f7ff fe58 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015bce:	eef0 0a69 	vmov.f32	s1, s19
 8015bd2:	eeb0 0a49 	vmov.f32	s0, s18
 8015bd6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8015ce4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8015bda:	4620      	mov	r0, r4
 8015bdc:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015be0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015be4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8015be8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015bec:	f7ff fe47 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015bf0:	eef0 0a69 	vmov.f32	s1, s19
 8015bf4:	eeb0 0a49 	vmov.f32	s0, s18
 8015bf8:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8015ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015c02:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015c06:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8015c0a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8015c0e:	f7ff fe36 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c12:	eef0 0a69 	vmov.f32	s1, s19
 8015c16:	eeb0 0a49 	vmov.f32	s0, s18
 8015c1a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8015cec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8015c1e:	4620      	mov	r0, r4
 8015c20:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015c24:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015c28:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8015c2c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8015c30:	f7ff fe25 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c34:	ee79 0a88 	vadd.f32	s1, s19, s16
 8015c38:	ee39 0a28 	vadd.f32	s0, s18, s17
 8015c3c:	4620      	mov	r0, r4
 8015c3e:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8015c42:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015c46:	f7ff fe1a 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c4a:	eef0 0a69 	vmov.f32	s1, s19
 8015c4e:	eeb0 0a49 	vmov.f32	s0, s18
 8015c52:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8015cf0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8015c56:	4620      	mov	r0, r4
 8015c58:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015c5c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015c60:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8015c64:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8015c68:	f7ff fe09 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c6c:	eef0 0a69 	vmov.f32	s1, s19
 8015c70:	eeb0 0a49 	vmov.f32	s0, s18
 8015c74:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8015cf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8015c78:	4620      	mov	r0, r4
 8015c7a:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015c7e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015c82:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8015c86:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8015c8a:	f7ff fdf8 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015c8e:	eef0 0a69 	vmov.f32	s1, s19
 8015c92:	eeb0 0a49 	vmov.f32	s0, s18
 8015c96:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8015cf8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015ca0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015ca4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8015ca8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015cac:	f7ff fde7 	bl	801587e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015cb0:	eef0 0a69 	vmov.f32	s1, s19
 8015cb4:	eeb0 0a49 	vmov.f32	s0, s18
 8015cb8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8015cfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015cc2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015cc6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8015cca:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8015cce:	e73e      	b.n	8015b4e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8015cd0:	3d23d70a 	.word	0x3d23d70a
 8015cd4:	3e8f5c29 	.word	0x3e8f5c29
 8015cd8:	3f19999a 	.word	0x3f19999a
 8015cdc:	3f4ccccd 	.word	0x3f4ccccd
 8015ce0:	3f75c28f 	.word	0x3f75c28f
 8015ce4:	3e4ccccd 	.word	0x3e4ccccd
 8015ce8:	3ecccccd 	.word	0x3ecccccd
 8015cec:	3f3851ec 	.word	0x3f3851ec
 8015cf0:	3fa3d70a 	.word	0x3fa3d70a
 8015cf4:	3fcccccd 	.word	0x3fcccccd
 8015cf8:	3fe66666 	.word	0x3fe66666
 8015cfc:	3ffae148 	.word	0x3ffae148

08015d00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8015d00:	b570      	push	{r4, r5, r6, lr}
 8015d02:	ed2d 8b06 	vpush	{d8-d10}
 8015d06:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8015d0a:	eef0 aa40 	vmov.f32	s21, s0
 8015d0e:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8015d12:	4604      	mov	r4, r0
 8015d14:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8015d18:	ee30 9a49 	vsub.f32	s18, s0, s18
 8015d1c:	eeb0 aa60 	vmov.f32	s20, s1
 8015d20:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015d24:	eea9 0a09 	vfma.f32	s0, s18, s18
 8015d28:	f013 f904 	bl	8028f34 <sqrtf>
 8015d2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d34:	dd36      	ble.n	8015da4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8015d36:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8015d3a:	2600      	movs	r6, #0
 8015d3c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8015d40:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8015d44:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8015d48:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8015d4c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8015d50:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8015d54:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8015d58:	ee70 9a28 	vadd.f32	s19, s0, s17
 8015d5c:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8015d60:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8015d64:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8015d68:	b1fd      	cbz	r5, 8015daa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8015d6a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8015d6e:	eef0 0a49 	vmov.f32	s1, s18
 8015d72:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8015d76:	eeb0 0a69 	vmov.f32	s0, s19
 8015d7a:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8015d7e:	4620      	mov	r0, r4
 8015d80:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8015d84:	f7ff fd64 	bl	8015850 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8015d88:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8015d8c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8015d90:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8015d94:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8015d98:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8015d9c:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8015da0:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8015da4:	ecbd 8b06 	vpop	{d8-d10}
 8015da8:	bd70      	pop	{r4, r5, r6, pc}
 8015daa:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8015dae:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8015db2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8015db6:	b16b      	cbz	r3, 8015dd4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8015db8:	eef0 1a49 	vmov.f32	s3, s18
 8015dbc:	4620      	mov	r0, r4
 8015dbe:	eeb0 1a69 	vmov.f32	s2, s19
 8015dc2:	eef0 0a62 	vmov.f32	s1, s5
 8015dc6:	eeb0 0a42 	vmov.f32	s0, s4
 8015dca:	f7ff feb1 	bl	8015b30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015dce:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8015dd2:	e7db      	b.n	8015d8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8015dd4:	eef0 4a48 	vmov.f32	s9, s16
 8015dd8:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8015ddc:	eeb0 4a68 	vmov.f32	s8, s17
 8015de0:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8015de4:	eef0 3a49 	vmov.f32	s7, s18
 8015de8:	4620      	mov	r0, r4
 8015dea:	eeb0 3a69 	vmov.f32	s6, s19
 8015dee:	f7ff fe13 	bl	8015a18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8015df2:	e7cb      	b.n	8015d8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08015df4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8015df4:	ee07 2a90 	vmov	s15, r2
 8015df8:	ee07 1a10 	vmov	s14, r1
 8015dfc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015e00:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8015e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8015e04:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8015e08:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015e0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015e10:	f7ff bf76 	b.w	8015d00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015e14:	3d000000 	.word	0x3d000000

08015e18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8015e18:	b538      	push	{r3, r4, r5, lr}
 8015e1a:	ed2d 8b02 	vpush	{d8}
 8015e1e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8015e22:	4604      	mov	r4, r0
 8015e24:	b31d      	cbz	r5, 8015e6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8015e26:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8015e2a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8015e2e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8015e32:	ee78 8a67 	vsub.f32	s17, s16, s15
 8015e36:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015e3a:	eef0 0a68 	vmov.f32	s1, s17
 8015e3e:	f7ff fd07 	bl	8015850 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8015e42:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8015e46:	eef0 1a48 	vmov.f32	s3, s16
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	eeb0 0a41 	vmov.f32	s0, s2
 8015e50:	eef0 0a68 	vmov.f32	s1, s17
 8015e54:	f7ff fe6c 	bl	8015b30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015e58:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8015e5c:	eef0 1a68 	vmov.f32	s3, s17
 8015e60:	4620      	mov	r0, r4
 8015e62:	eef0 0a48 	vmov.f32	s1, s16
 8015e66:	eeb0 0a41 	vmov.f32	s0, s2
 8015e6a:	f7ff fe61 	bl	8015b30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015e6e:	4628      	mov	r0, r5
 8015e70:	ecbd 8b02 	vpop	{d8}
 8015e74:	bd38      	pop	{r3, r4, r5, pc}

08015e76 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8015e76:	b510      	push	{r4, lr}
 8015e78:	ed2d 8b02 	vpush	{d8}
 8015e7c:	4604      	mov	r4, r0
 8015e7e:	eeb0 8a40 	vmov.f32	s16, s0
 8015e82:	eef0 8a60 	vmov.f32	s17, s1
 8015e86:	f7ff ffc7 	bl	8015e18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8015e8a:	b9d0      	cbnz	r0, 8015ec2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8015e8c:	4620      	mov	r0, r4
 8015e8e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8015e92:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8015e96:	eef0 0a68 	vmov.f32	s1, s17
 8015e9a:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8015e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8015ea2:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8015ea6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8015eaa:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8015eae:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8015eb2:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8015eb6:	f7ff fdaf 	bl	8015a18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8015eba:	2001      	movs	r0, #1
 8015ebc:	ecbd 8b02 	vpop	{d8}
 8015ec0:	bd10      	pop	{r4, pc}
 8015ec2:	2000      	movs	r0, #0
 8015ec4:	e7fa      	b.n	8015ebc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08015ec6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8015ec6:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8015eca:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8015ece:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8015ed2:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8015ed6:	f7ff be2b 	b.w	8015b30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08015edc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8015edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee0:	b089      	sub	sp, #36	@ 0x24
 8015ee2:	461c      	mov	r4, r3
 8015ee4:	4682      	mov	sl, r0
 8015ee6:	4615      	mov	r5, r2
 8015ee8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015eec:	f10d 0820 	add.w	r8, sp, #32
 8015ef0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015ef2:	9304      	str	r3, [sp, #16]
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	9105      	str	r1, [sp, #20]
 8015ef8:	9306      	str	r3, [sp, #24]
 8015efa:	f848 3d04 	str.w	r3, [r8, #-4]!
 8015efe:	9b04      	ldr	r3, [sp, #16]
 8015f00:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8015f04:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8015f08:	9b05      	ldr	r3, [sp, #20]
 8015f0a:	429d      	cmp	r5, r3
 8015f0c:	d96d      	bls.n	8015fea <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8015f0e:	3d01      	subs	r5, #1
 8015f10:	f819 3005 	ldrb.w	r3, [r9, r5]
 8015f14:	2b06      	cmp	r3, #6
 8015f16:	d8f7      	bhi.n	8015f08 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8015f18:	a201      	add	r2, pc, #4	@ (adr r2, 8015f20 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8015f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f1e:	bf00      	nop
 8015f20:	08015f3f 	.word	0x08015f3f
 8015f24:	08015f09 	.word	0x08015f09
 8015f28:	08015f3d 	.word	0x08015f3d
 8015f2c:	08015f61 	.word	0x08015f61
 8015f30:	08015f61 	.word	0x08015f61
 8015f34:	08015f65 	.word	0x08015f65
 8015f38:	08015fa5 	.word	0x08015fa5
 8015f3c:	3c02      	subs	r4, #2
 8015f3e:	4650      	mov	r0, sl
 8015f40:	9400      	str	r4, [sp, #0]
 8015f42:	462b      	mov	r3, r5
 8015f44:	4642      	mov	r2, r8
 8015f46:	a906      	add	r1, sp, #24
 8015f48:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8015f4c:	f7ff fcae 	bl	80158ac <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8015f50:	eddd 0a07 	vldr	s1, [sp, #28]
 8015f54:	ed9d 0a06 	vldr	s0, [sp, #24]
 8015f58:	4630      	mov	r0, r6
 8015f5a:	f7ff fed1 	bl	8015d00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015f5e:	e7d3      	b.n	8015f08 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8015f60:	3c01      	subs	r4, #1
 8015f62:	e7ec      	b.n	8015f3e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8015f64:	f1a4 0b04 	sub.w	fp, r4, #4
 8015f68:	3c02      	subs	r4, #2
 8015f6a:	4650      	mov	r0, sl
 8015f6c:	462b      	mov	r3, r5
 8015f6e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8015f72:	f8cd b000 	str.w	fp, [sp]
 8015f76:	4642      	mov	r2, r8
 8015f78:	a906      	add	r1, sp, #24
 8015f7a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8015f7e:	f7ff fc95 	bl	80158ac <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8015f82:	eddd 2a07 	vldr	s5, [sp, #28]
 8015f86:	ed9d 2a06 	vldr	s4, [sp, #24]
 8015f8a:	4630      	mov	r0, r6
 8015f8c:	ed54 1a01 	vldr	s3, [r4, #-4]
 8015f90:	ed14 1a02 	vldr	s2, [r4, #-8]
 8015f94:	edd4 0a01 	vldr	s1, [r4, #4]
 8015f98:	ed94 0a00 	vldr	s0, [r4]
 8015f9c:	f7ff fc1a 	bl	80157d4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8015fa0:	465c      	mov	r4, fp
 8015fa2:	e7b1      	b.n	8015f08 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8015fa4:	f1a4 0b06 	sub.w	fp, r4, #6
 8015fa8:	3c02      	subs	r4, #2
 8015faa:	4650      	mov	r0, sl
 8015fac:	462b      	mov	r3, r5
 8015fae:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8015fb2:	f8cd b000 	str.w	fp, [sp]
 8015fb6:	4642      	mov	r2, r8
 8015fb8:	a906      	add	r1, sp, #24
 8015fba:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8015fbe:	f7ff fc75 	bl	80158ac <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8015fc2:	eddd 3a07 	vldr	s7, [sp, #28]
 8015fc6:	ed9d 3a06 	vldr	s6, [sp, #24]
 8015fca:	4630      	mov	r0, r6
 8015fcc:	ed54 2a03 	vldr	s5, [r4, #-12]
 8015fd0:	ed14 2a04 	vldr	s4, [r4, #-16]
 8015fd4:	ed54 1a01 	vldr	s3, [r4, #-4]
 8015fd8:	ed14 1a02 	vldr	s2, [r4, #-8]
 8015fdc:	edd4 0a01 	vldr	s1, [r4, #4]
 8015fe0:	ed94 0a00 	vldr	s0, [r4]
 8015fe4:	f7ff fc15 	bl	8015812 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8015fe8:	e7da      	b.n	8015fa0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8015fea:	9b04      	ldr	r3, [sp, #16]
 8015fec:	b113      	cbz	r3, 8015ff4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8015fee:	4630      	mov	r0, r6
 8015ff0:	f7ff ff69 	bl	8015ec6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8015ff4:	b009      	add	sp, #36	@ 0x24
 8015ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ffa:	bf00      	nop

08015ffc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8015ffc:	eef0 7a60 	vmov.f32	s15, s1
 8016000:	6803      	ldr	r3, [r0, #0]
 8016002:	689b      	ldr	r3, [r3, #8]
 8016004:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016008:	ee17 2a90 	vmov	r2, s15
 801600c:	eef0 7a40 	vmov.f32	s15, s0
 8016010:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016014:	ee17 1a90 	vmov	r1, s15
 8016018:	4718      	bx	r3
	...

0801601c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 801601c:	4b04      	ldr	r3, [pc, #16]	@ (8016030 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801601e:	b510      	push	{r4, lr}
 8016020:	4604      	mov	r4, r0
 8016022:	f840 3b14 	str.w	r3, [r0], #20
 8016026:	f002 fc17 	bl	8018858 <_ZN8touchgfx7OutlineD1Ev>
 801602a:	4620      	mov	r0, r4
 801602c:	bd10      	pop	{r4, pc}
 801602e:	bf00      	nop
 8016030:	0802e7b8 	.word	0x0802e7b8

08016034 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8016034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016038:	ed2d 8b04 	vpush	{d8-d9}
 801603c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8016040:	b0b5      	sub	sp, #212	@ 0xd4
 8016042:	4605      	mov	r5, r0
 8016044:	468b      	mov	fp, r1
 8016046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801604a:	9206      	str	r2, [sp, #24]
 801604c:	461e      	mov	r6, r3
 801604e:	2400      	movs	r4, #0
 8016050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016054:	f240 814f 	bls.w	80162f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8016058:	23ff      	movs	r3, #255	@ 0xff
 801605a:	1d02      	adds	r2, r0, #4
 801605c:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 80162fc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8016060:	f04f 0800 	mov.w	r8, #0
 8016064:	9300      	str	r3, [sp, #0]
 8016066:	af08      	add	r7, sp, #32
 8016068:	6981      	ldr	r1, [r0, #24]
 801606a:	a808      	add	r0, sp, #32
 801606c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801606e:	eef0 9a49 	vmov.f32	s19, s18
 8016072:	f012 fab5 	bl	80285e0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016076:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 801607a:	4ba1      	ldr	r3, [pc, #644]	@ (8016300 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 801607c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8016080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016084:	2201      	movs	r2, #1
 8016086:	9308      	str	r3, [sp, #32]
 8016088:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 801608c:	edd5 6a08 	vldr	s13, [r5, #32]
 8016090:	eeb0 8a49 	vmov.f32	s16, s18
 8016094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016098:	9325      	str	r3, [sp, #148]	@ 0x94
 801609a:	f04f 0300 	mov.w	r3, #0
 801609e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 80160a2:	7f6a      	ldrb	r2, [r5, #29]
 80160a4:	eef0 8a49 	vmov.f32	s17, s18
 80160a8:	bf48      	it	mi
 80160aa:	eef1 7a67 	vnegmi.f32	s15, s15
 80160ae:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 80160b2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 80160b6:	46c1      	mov	r9, r8
 80160b8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80160bc:	f04f 0a01 	mov.w	sl, #1
 80160c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80160c4:	7fab      	ldrb	r3, [r5, #30]
 80160c6:	942a      	str	r4, [sp, #168]	@ 0xa8
 80160c8:	435a      	muls	r2, r3
 80160ca:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 80160ce:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80160d2:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 80160d6:	1c53      	adds	r3, r2, #1
 80160d8:	942b      	str	r4, [sp, #172]	@ 0xac
 80160da:	942c      	str	r4, [sp, #176]	@ 0xb0
 80160dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80160e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80160e4:	942d      	str	r4, [sp, #180]	@ 0xb4
 80160e6:	942e      	str	r4, [sp, #184]	@ 0xb8
 80160e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80160ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160f0:	942f      	str	r4, [sp, #188]	@ 0xbc
 80160f2:	9430      	str	r4, [sp, #192]	@ 0xc0
 80160f4:	9431      	str	r4, [sp, #196]	@ 0xc4
 80160f6:	9432      	str	r4, [sp, #200]	@ 0xc8
 80160f8:	9433      	str	r4, [sp, #204]	@ 0xcc
 80160fa:	4644      	mov	r4, r8
 80160fc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8016100:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8016104:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8016108:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 801610c:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8016110:	9b06      	ldr	r3, [sp, #24]
 8016112:	454b      	cmp	r3, r9
 8016114:	f000 80cc 	beq.w	80162b0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8016118:	f109 0301 	add.w	r3, r9, #1
 801611c:	9305      	str	r3, [sp, #20]
 801611e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016122:	2b06      	cmp	r3, #6
 8016124:	d839      	bhi.n	801619a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016126:	e8df f003 	tbb	[pc, r3]
 801612a:	3b04      	.short	0x3b04
 801612c:	817c6f60 	.word	0x817c6f60
 8016130:	a0          	.byte	0xa0
 8016131:	00          	.byte	0x00
 8016132:	45c1      	cmp	r9, r8
 8016134:	d92b      	bls.n	801618e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8016136:	eef0 0a49 	vmov.f32	s1, s18
 801613a:	4638      	mov	r0, r7
 801613c:	eeb0 0a69 	vmov.f32	s0, s19
 8016140:	f7ff fdde 	bl	8015d00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016144:	4638      	mov	r0, r7
 8016146:	f7ff fe67 	bl	8015e18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801614a:	4681      	mov	r9, r0
 801614c:	b9f8      	cbnz	r0, 801618e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801614e:	eef0 0a49 	vmov.f32	s1, s18
 8016152:	4638      	mov	r0, r7
 8016154:	eeb0 0a69 	vmov.f32	s0, s19
 8016158:	f7ff fe8d 	bl	8015e76 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 801615c:	4628      	mov	r0, r5
 801615e:	4623      	mov	r3, r4
 8016160:	9a05      	ldr	r2, [sp, #20]
 8016162:	4641      	mov	r1, r8
 8016164:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8016168:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 801616c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016170:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8016174:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8016178:	e9cd b600 	strd	fp, r6, [sp]
 801617c:	f7ff feae 	bl	8015edc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016180:	eef0 0a49 	vmov.f32	s1, s18
 8016184:	eeb0 0a69 	vmov.f32	s0, s19
 8016188:	4638      	mov	r0, r7
 801618a:	f7ff fe74 	bl	8015e76 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 801618e:	eeb0 8a49 	vmov.f32	s16, s18
 8016192:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016196:	eef0 8a69 	vmov.f32	s17, s19
 801619a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801619e:	e7b7      	b.n	8016110 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 80161a0:	45c1      	cmp	r9, r8
 80161a2:	d90d      	bls.n	80161c0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80161a4:	4638      	mov	r0, r7
 80161a6:	f7ff fe37 	bl	8015e18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80161aa:	b948      	cbnz	r0, 80161c0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80161ac:	4623      	mov	r3, r4
 80161ae:	464a      	mov	r2, r9
 80161b0:	4641      	mov	r1, r8
 80161b2:	4628      	mov	r0, r5
 80161b4:	e9cd a702 	strd	sl, r7, [sp, #8]
 80161b8:	e9cd b600 	strd	fp, r6, [sp]
 80161bc:	f7ff fe8e 	bl	8015edc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80161c0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80161c4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80161c8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80161cc:	3402      	adds	r4, #2
 80161ce:	edd3 8a00 	vldr	s17, [r3]
 80161d2:	46c8      	mov	r8, r9
 80161d4:	ed93 8a01 	vldr	s16, [r3, #4]
 80161d8:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80161dc:	eef0 9a68 	vmov.f32	s19, s17
 80161e0:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 80161e4:	eeb0 9a48 	vmov.f32	s18, s16
 80161e8:	e7d7      	b.n	801619a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80161ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80161ee:	4638      	mov	r0, r7
 80161f0:	3402      	adds	r4, #2
 80161f2:	edd3 8a00 	vldr	s17, [r3]
 80161f6:	ed93 8a01 	vldr	s16, [r3, #4]
 80161fa:	eeb0 0a68 	vmov.f32	s0, s17
 80161fe:	eef0 0a48 	vmov.f32	s1, s16
 8016202:	f7ff fd7d 	bl	8015d00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016206:	e7c8      	b.n	801619a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016208:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801620c:	edd3 8a00 	vldr	s17, [r3]
 8016210:	eef0 0a48 	vmov.f32	s1, s16
 8016214:	4638      	mov	r0, r7
 8016216:	eeb0 0a68 	vmov.f32	s0, s17
 801621a:	3401      	adds	r4, #1
 801621c:	f7ff fd70 	bl	8015d00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8016220:	e7bb      	b.n	801619a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016222:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016226:	ed93 8a00 	vldr	s16, [r3]
 801622a:	e7f1      	b.n	8016210 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 801622c:	00a3      	lsls	r3, r4, #2
 801622e:	eef0 0a48 	vmov.f32	s1, s16
 8016232:	eeb0 0a68 	vmov.f32	s0, s17
 8016236:	4638      	mov	r0, r7
 8016238:	f103 0208 	add.w	r2, r3, #8
 801623c:	f103 090c 	add.w	r9, r3, #12
 8016240:	4433      	add	r3, r6
 8016242:	3404      	adds	r4, #4
 8016244:	4432      	add	r2, r6
 8016246:	44b1      	add	r9, r6
 8016248:	edd3 1a01 	vldr	s3, [r3, #4]
 801624c:	ed92 2a00 	vldr	s4, [r2]
 8016250:	edd9 2a00 	vldr	s5, [r9]
 8016254:	ed93 1a00 	vldr	s2, [r3]
 8016258:	9207      	str	r2, [sp, #28]
 801625a:	f7ff fabb 	bl	80157d4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801625e:	9a07      	ldr	r2, [sp, #28]
 8016260:	ed99 8a00 	vldr	s16, [r9]
 8016264:	edd2 8a00 	vldr	s17, [r2]
 8016268:	e797      	b.n	801619a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801626a:	00a3      	lsls	r3, r4, #2
 801626c:	eef0 0a48 	vmov.f32	s1, s16
 8016270:	eeb0 0a68 	vmov.f32	s0, s17
 8016274:	4638      	mov	r0, r7
 8016276:	f103 0210 	add.w	r2, r3, #16
 801627a:	f103 0914 	add.w	r9, r3, #20
 801627e:	4433      	add	r3, r6
 8016280:	3406      	adds	r4, #6
 8016282:	4432      	add	r2, r6
 8016284:	44b1      	add	r9, r6
 8016286:	edd3 2a03 	vldr	s5, [r3, #12]
 801628a:	ed92 3a00 	vldr	s6, [r2]
 801628e:	edd9 3a00 	vldr	s7, [r9]
 8016292:	ed93 2a02 	vldr	s4, [r3, #8]
 8016296:	edd3 1a01 	vldr	s3, [r3, #4]
 801629a:	ed93 1a00 	vldr	s2, [r3]
 801629e:	9207      	str	r2, [sp, #28]
 80162a0:	f7ff fab7 	bl	8015812 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80162a4:	9a07      	ldr	r2, [sp, #28]
 80162a6:	ed99 8a00 	vldr	s16, [r9]
 80162aa:	edd2 8a00 	vldr	s17, [r2]
 80162ae:	e774      	b.n	801619a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80162b0:	9b06      	ldr	r3, [sp, #24]
 80162b2:	af08      	add	r7, sp, #32
 80162b4:	4543      	cmp	r3, r8
 80162b6:	d90f      	bls.n	80162d8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80162b8:	4638      	mov	r0, r7
 80162ba:	f7ff fdad 	bl	8015e18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80162be:	b958      	cbnz	r0, 80162d8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80162c0:	2301      	movs	r3, #1
 80162c2:	9703      	str	r7, [sp, #12]
 80162c4:	f8cd b000 	str.w	fp, [sp]
 80162c8:	4641      	mov	r1, r8
 80162ca:	9a06      	ldr	r2, [sp, #24]
 80162cc:	4628      	mov	r0, r5
 80162ce:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80162d2:	4623      	mov	r3, r4
 80162d4:	f7ff fe02 	bl	8015edc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80162d8:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80162dc:	4638      	mov	r0, r7
 80162de:	f012 fa13 	bl	8028708 <_ZN8touchgfx6Canvas6renderEh>
 80162e2:	4604      	mov	r4, r0
 80162e4:	4638      	mov	r0, r7
 80162e6:	f7ff fe99 	bl	801601c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80162ea:	4620      	mov	r0, r4
 80162ec:	b035      	add	sp, #212	@ 0xd4
 80162ee:	ecbd 8b04 	vpop	{d8-d9}
 80162f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f6:	2401      	movs	r4, #1
 80162f8:	e7f7      	b.n	80162ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 80162fa:	bf00      	nop
 80162fc:	00000000 	.word	0x00000000
 8016300:	0802de88 	.word	0x0802de88

08016304 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8016304:	b510      	push	{r4, lr}
 8016306:	4604      	mov	r4, r0
 8016308:	f7ff fe88 	bl	801601c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801630c:	21b0      	movs	r1, #176	@ 0xb0
 801630e:	4620      	mov	r0, r4
 8016310:	f012 fde6 	bl	8028ee0 <_ZdlPvj>
 8016314:	4620      	mov	r0, r4
 8016316:	bd10      	pop	{r4, pc}

08016318 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8016318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801631c:	4698      	mov	r8, r3
 801631e:	23ff      	movs	r3, #255	@ 0xff
 8016320:	4607      	mov	r7, r0
 8016322:	4689      	mov	r9, r1
 8016324:	4692      	mov	sl, r2
 8016326:	1d02      	adds	r2, r0, #4
 8016328:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801632c:	2400      	movs	r4, #0
 801632e:	44ca      	add	sl, r9
 8016330:	ed2d 8b06 	vpush	{d8-d10}
 8016334:	b0aa      	sub	sp, #168	@ 0xa8
 8016336:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 801653c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801633a:	9300      	str	r3, [sp, #0]
 801633c:	eef0 8a48 	vmov.f32	s17, s16
 8016340:	6981      	ldr	r1, [r0, #24]
 8016342:	a80d      	add	r0, sp, #52	@ 0x34
 8016344:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8016346:	f012 f94b 	bl	80285e0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801634a:	7f3b      	ldrb	r3, [r7, #28]
 801634c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 801653c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8016350:	4628      	mov	r0, r5
 8016352:	1e5a      	subs	r2, r3, #1
 8016354:	eeb0 0a60 	vmov.f32	s0, s1
 8016358:	4253      	negs	r3, r2
 801635a:	4153      	adcs	r3, r2
 801635c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8016360:	f006 fa61 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016364:	eeb0 9a40 	vmov.f32	s18, s0
 8016368:	eef0 9a60 	vmov.f32	s19, s1
 801636c:	45ca      	cmp	sl, r9
 801636e:	f000 80cd 	beq.w	801650c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8016372:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016376:	2b06      	cmp	r3, #6
 8016378:	d8f8      	bhi.n	801636c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801637a:	e8df f003 	tbb	[pc, r3]
 801637e:	0804      	.short	0x0804
 8016380:	58533f2a 	.word	0x58533f2a
 8016384:	8a          	.byte	0x8a
 8016385:	00          	.byte	0x00
 8016386:	a80d      	add	r0, sp, #52	@ 0x34
 8016388:	f012 f99c 	bl	80286c4 <_ZN8touchgfx6Canvas5closeEv>
 801638c:	e7ee      	b.n	801636c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801638e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016392:	4628      	mov	r0, r5
 8016394:	ed93 8a01 	vldr	s16, [r3, #4]
 8016398:	edd3 8a00 	vldr	s17, [r3]
 801639c:	eef0 0a48 	vmov.f32	s1, s16
 80163a0:	eeb0 0a68 	vmov.f32	s0, s17
 80163a4:	f006 fa3f 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80163a8:	a80d      	add	r0, sp, #52	@ 0x34
 80163aa:	eef0 7a60 	vmov.f32	s15, s1
 80163ae:	eeb0 9a40 	vmov.f32	s18, s0
 80163b2:	eef0 9a60 	vmov.f32	s19, s1
 80163b6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80163ba:	ee17 2a90 	vmov	r2, s15
 80163be:	eef0 7a40 	vmov.f32	s15, s0
 80163c2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80163c6:	ee17 1a90 	vmov	r1, s15
 80163ca:	f012 fa55 	bl	8028878 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80163ce:	3402      	adds	r4, #2
 80163d0:	e7cc      	b.n	801636c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80163d2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80163d6:	4628      	mov	r0, r5
 80163d8:	edd3 8a00 	vldr	s17, [r3]
 80163dc:	ed93 8a01 	vldr	s16, [r3, #4]
 80163e0:	eeb0 0a68 	vmov.f32	s0, s17
 80163e4:	eef0 0a48 	vmov.f32	s1, s16
 80163e8:	f006 fa1d 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80163ec:	a80d      	add	r0, sp, #52	@ 0x34
 80163ee:	eeb0 9a40 	vmov.f32	s18, s0
 80163f2:	eef0 9a60 	vmov.f32	s19, s1
 80163f6:	f7ff fe01 	bl	8015ffc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80163fa:	e7e8      	b.n	80163ce <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 80163fc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016400:	edd3 8a00 	vldr	s17, [r3]
 8016404:	eef0 0a48 	vmov.f32	s1, s16
 8016408:	4628      	mov	r0, r5
 801640a:	eeb0 0a68 	vmov.f32	s0, s17
 801640e:	3401      	adds	r4, #1
 8016410:	f006 fa09 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016414:	a80d      	add	r0, sp, #52	@ 0x34
 8016416:	eef0 9a60 	vmov.f32	s19, s1
 801641a:	eeb0 9a40 	vmov.f32	s18, s0
 801641e:	f7ff fded 	bl	8015ffc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8016422:	e7a3      	b.n	801636c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016424:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016428:	ed93 8a00 	vldr	s16, [r3]
 801642c:	e7ea      	b.n	8016404 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801642e:	1ca3      	adds	r3, r4, #2
 8016430:	4628      	mov	r0, r5
 8016432:	3404      	adds	r4, #4
 8016434:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8016438:	ed53 0a01 	vldr	s1, [r3, #-4]
 801643c:	ed13 0a02 	vldr	s0, [r3, #-8]
 8016440:	edd3 8a00 	vldr	s17, [r3]
 8016444:	ed93 8a01 	vldr	s16, [r3, #4]
 8016448:	f006 f9ed 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801644c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8016450:	eeb0 0a68 	vmov.f32	s0, s17
 8016454:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8016458:	eef0 0a48 	vmov.f32	s1, s16
 801645c:	4628      	mov	r0, r5
 801645e:	f006 f9e2 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016462:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8016466:	eef0 2a60 	vmov.f32	s5, s1
 801646a:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 801646e:	eeb0 2a40 	vmov.f32	s4, s0
 8016472:	a80d      	add	r0, sp, #52	@ 0x34
 8016474:	eeb0 aa40 	vmov.f32	s20, s0
 8016478:	eef0 aa60 	vmov.f32	s21, s1
 801647c:	eeb0 0a49 	vmov.f32	s0, s18
 8016480:	eef0 0a69 	vmov.f32	s1, s19
 8016484:	f7ff f9a6 	bl	80157d4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016488:	eef0 9a6a 	vmov.f32	s19, s21
 801648c:	eeb0 9a4a 	vmov.f32	s18, s20
 8016490:	e76c      	b.n	801636c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016492:	1d26      	adds	r6, r4, #4
 8016494:	4628      	mov	r0, r5
 8016496:	3406      	adds	r4, #6
 8016498:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801649c:	ed56 0a03 	vldr	s1, [r6, #-12]
 80164a0:	ed16 0a04 	vldr	s0, [r6, #-16]
 80164a4:	edd6 8a00 	vldr	s17, [r6]
 80164a8:	ed96 8a01 	vldr	s16, [r6, #4]
 80164ac:	f006 f9bb 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164b0:	ed8d 0a07 	vstr	s0, [sp, #28]
 80164b4:	4628      	mov	r0, r5
 80164b6:	ed16 0a02 	vldr	s0, [r6, #-8]
 80164ba:	edcd 0a08 	vstr	s1, [sp, #32]
 80164be:	ed56 0a01 	vldr	s1, [r6, #-4]
 80164c2:	f006 f9b0 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164c6:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80164ca:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80164ce:	eeb0 0a68 	vmov.f32	s0, s17
 80164d2:	eef0 0a48 	vmov.f32	s1, s16
 80164d6:	4628      	mov	r0, r5
 80164d8:	f006 f9a5 	bl	801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164dc:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 80164e0:	eeb0 3a40 	vmov.f32	s6, s0
 80164e4:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 80164e8:	eef0 3a60 	vmov.f32	s7, s1
 80164ec:	eddd 1a08 	vldr	s3, [sp, #32]
 80164f0:	eeb0 aa40 	vmov.f32	s20, s0
 80164f4:	ed9d 1a07 	vldr	s2, [sp, #28]
 80164f8:	eef0 aa60 	vmov.f32	s21, s1
 80164fc:	a80d      	add	r0, sp, #52	@ 0x34
 80164fe:	eef0 0a69 	vmov.f32	s1, s19
 8016502:	eeb0 0a49 	vmov.f32	s0, s18
 8016506:	f7ff f984 	bl	8015812 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801650a:	e7bd      	b.n	8016488 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801650c:	7f7b      	ldrb	r3, [r7, #29]
 801650e:	a80d      	add	r0, sp, #52	@ 0x34
 8016510:	7fb9      	ldrb	r1, [r7, #30]
 8016512:	4359      	muls	r1, r3
 8016514:	1c4b      	adds	r3, r1, #1
 8016516:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801651a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801651e:	f012 f8f3 	bl	8028708 <_ZN8touchgfx6Canvas6renderEh>
 8016522:	4b07      	ldr	r3, [pc, #28]	@ (8016540 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8016524:	4604      	mov	r4, r0
 8016526:	a812      	add	r0, sp, #72	@ 0x48
 8016528:	930d      	str	r3, [sp, #52]	@ 0x34
 801652a:	f002 f995 	bl	8018858 <_ZN8touchgfx7OutlineD1Ev>
 801652e:	4620      	mov	r0, r4
 8016530:	b02a      	add	sp, #168	@ 0xa8
 8016532:	ecbd 8b06 	vpop	{d8-d10}
 8016536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801653a:	bf00      	nop
 801653c:	00000000 	.word	0x00000000
 8016540:	0802e7b8 	.word	0x0802e7b8

08016544 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8016544:	b410      	push	{r4}
 8016546:	7f04      	ldrb	r4, [r0, #28]
 8016548:	b11c      	cbz	r4, 8016552 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801654a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801654e:	f7ff bee3 	b.w	8016318 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8016552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016556:	f7ff bd6d 	b.w	8016034 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0801655a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801655a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801655e:	4691      	mov	r9, r2
 8016560:	4602      	mov	r2, r0
 8016562:	4606      	mov	r6, r0
 8016564:	4688      	mov	r8, r1
 8016566:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801656a:	469a      	mov	sl, r3
 801656c:	ab02      	add	r3, sp, #8
 801656e:	af02      	add	r7, sp, #8
 8016570:	6851      	ldr	r1, [r2, #4]
 8016572:	c303      	stmia	r3!, {r0, r1}
 8016574:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016578:	2b00      	cmp	r3, #0
 801657a:	dd2f      	ble.n	80165dc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801657c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8016580:	2c00      	cmp	r4, #0
 8016582:	dd2b      	ble.n	80165dc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8016584:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016588:	441c      	add	r4, r3
 801658a:	b2a4      	uxth	r4, r4
 801658c:	b225      	sxth	r5, r4
 801658e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016592:	42ab      	cmp	r3, r5
 8016594:	da22      	bge.n	80165dc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8016596:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016598:	464a      	mov	r2, r9
 801659a:	9701      	str	r7, [sp, #4]
 801659c:	4641      	mov	r1, r8
 801659e:	9300      	str	r3, [sp, #0]
 80165a0:	4630      	mov	r0, r6
 80165a2:	4653      	mov	r3, sl
 80165a4:	f7ff ffce 	bl	8016544 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80165a8:	b940      	cbnz	r0, 80165bc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80165aa:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80165ae:	2b01      	cmp	r3, #1
 80165b0:	d004      	beq.n	80165bc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80165b2:	3301      	adds	r3, #1
 80165b4:	105b      	asrs	r3, r3, #1
 80165b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80165ba:	e7ec      	b.n	8016596 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 80165bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80165c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80165c4:	4413      	add	r3, r2
 80165c6:	b29b      	uxth	r3, r3
 80165c8:	441a      	add	r2, r3
 80165ca:	f8ad 300a 	strh.w	r3, [sp, #10]
 80165ce:	b212      	sxth	r2, r2
 80165d0:	4295      	cmp	r5, r2
 80165d2:	dadc      	bge.n	801658e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80165d4:	1ae3      	subs	r3, r4, r3
 80165d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80165da:	e7d8      	b.n	801658e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80165dc:	b004      	add	sp, #16
 80165de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080165e2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80165e2:	0c0b      	lsrs	r3, r1, #16
 80165e4:	60c1      	str	r1, [r0, #12]
 80165e6:	7481      	strb	r1, [r0, #18]
 80165e8:	7403      	strb	r3, [r0, #16]
 80165ea:	0a0b      	lsrs	r3, r1, #8
 80165ec:	7443      	strb	r3, [r0, #17]
 80165ee:	4770      	bx	lr

080165f0 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80165f0:	f1a0 0008 	sub.w	r0, r0, #8
 80165f4:	e7f5      	b.n	80165e2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

080165f8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80165f8:	b508      	push	{r3, lr}
 80165fa:	4b05      	ldr	r3, [pc, #20]	@ (8016610 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80165fc:	6818      	ldr	r0, [r3, #0]
 80165fe:	6803      	ldr	r3, [r0, #0]
 8016600:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016604:	4798      	blx	r3
 8016606:	1e43      	subs	r3, r0, #1
 8016608:	4258      	negs	r0, r3
 801660a:	4158      	adcs	r0, r3
 801660c:	bd08      	pop	{r3, pc}
 801660e:	bf00      	nop
 8016610:	240621b8 	.word	0x240621b8

08016614 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8016614:	4770      	bx	lr

08016616 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8016616:	3808      	subs	r0, #8
 8016618:	4770      	bx	lr

0801661a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801661a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801661e:	b410      	push	{r4}
 8016620:	188c      	adds	r4, r1, r2
 8016622:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016626:	68c2      	ldr	r2, [r0, #12]
 8016628:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801662c:	4620      	mov	r0, r4
 801662e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016632:	f7ed b827 	b.w	8003684 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08016636 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8016636:	f7ec bffb 	b.w	8003630 <_ZN8touchgfx5paint8tearDownEv>

0801663a <_ZN8touchgfx13PainterRGB888D0Ev>:
 801663a:	b510      	push	{r4, lr}
 801663c:	4604      	mov	r4, r0
 801663e:	2114      	movs	r1, #20
 8016640:	f012 fc4e 	bl	8028ee0 <_ZdlPvj>
 8016644:	4620      	mov	r0, r4
 8016646:	bd10      	pop	{r4, pc}

08016648 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8016648:	f1a0 0008 	sub.w	r0, r0, #8
 801664c:	e7f5      	b.n	801663a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08016650 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8016650:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016658:	4411      	add	r1, r2
 801665a:	7c42      	ldrb	r2, [r0, #17]
 801665c:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8016660:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8016664:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8016668:	2a00      	cmp	r2, #0
 801666a:	f000 8084 	beq.w	8016776 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 801666e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016672:	ed90 7a08 	vldr	s14, [r0, #32]
 8016676:	42a2      	cmp	r2, r4
 8016678:	68c3      	ldr	r3, [r0, #12]
 801667a:	db20      	blt.n	80166be <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 801667c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016680:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8016684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016688:	bfc8      	it	gt
 801668a:	2200      	movgt	r2, #0
 801668c:	589a      	ldr	r2, [r3, r2]
 801668e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016692:	7c03      	ldrb	r3, [r0, #16]
 8016694:	fa5f fc82 	uxtb.w	ip, r2
 8016698:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801669c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80166a0:	440e      	add	r6, r1
 80166a2:	b36b      	cbz	r3, 8016700 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80166a4:	2dff      	cmp	r5, #255	@ 0xff
 80166a6:	d12b      	bne.n	8016700 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80166a8:	42b1      	cmp	r1, r6
 80166aa:	f080 8204 	bcs.w	8016ab6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80166ae:	f881 c000 	strb.w	ip, [r1]
 80166b2:	3103      	adds	r1, #3
 80166b4:	f801 7c02 	strb.w	r7, [r1, #-2]
 80166b8:	f801 4c01 	strb.w	r4, [r1, #-1]
 80166bc:	e7f4      	b.n	80166a8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 80166be:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80166c2:	42a7      	cmp	r7, r4
 80166c4:	dc08      	bgt.n	80166d8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 80166c6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80166ca:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80166ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d2:	bfd8      	it	le
 80166d4:	2200      	movle	r2, #0
 80166d6:	e7d9      	b.n	801668c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80166d8:	1aa2      	subs	r2, r4, r2
 80166da:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80166de:	ee07 2a90 	vmov	s15, r2
 80166e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80166ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166f2:	ee17 2a90 	vmov	r2, s15
 80166f6:	bfd8      	it	le
 80166f8:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 80166fc:	0092      	lsls	r2, r2, #2
 80166fe:	e7c5      	b.n	801668c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8016700:	0e12      	lsrs	r2, r2, #24
 8016702:	4355      	muls	r5, r2
 8016704:	1c6a      	adds	r2, r5, #1
 8016706:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801670a:	122d      	asrs	r5, r5, #8
 801670c:	43e8      	mvns	r0, r5
 801670e:	b2ad      	uxth	r5, r5
 8016710:	fb1c fc05 	smulbb	ip, ip, r5
 8016714:	b2c0      	uxtb	r0, r0
 8016716:	fb17 f705 	smulbb	r7, r7, r5
 801671a:	fb14 f505 	smulbb	r5, r4, r5
 801671e:	fa1f fc8c 	uxth.w	ip, ip
 8016722:	b2bf      	uxth	r7, r7
 8016724:	b2ad      	uxth	r5, r5
 8016726:	428e      	cmp	r6, r1
 8016728:	f101 0303 	add.w	r3, r1, #3
 801672c:	f240 81c3 	bls.w	8016ab6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8016730:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8016734:	fb02 c200 	mla	r2, r2, r0, ip
 8016738:	b292      	uxth	r2, r2
 801673a:	1c51      	adds	r1, r2, #1
 801673c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016740:	1212      	asrs	r2, r2, #8
 8016742:	f803 2c03 	strb.w	r2, [r3, #-3]
 8016746:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801674a:	fb02 7200 	mla	r2, r2, r0, r7
 801674e:	b292      	uxth	r2, r2
 8016750:	1c51      	adds	r1, r2, #1
 8016752:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016756:	1212      	asrs	r2, r2, #8
 8016758:	f803 2c02 	strb.w	r2, [r3, #-2]
 801675c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8016760:	fb02 5200 	mla	r2, r2, r0, r5
 8016764:	b292      	uxth	r2, r2
 8016766:	1c51      	adds	r1, r2, #1
 8016768:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801676c:	4619      	mov	r1, r3
 801676e:	1212      	asrs	r2, r2, #8
 8016770:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016774:	e7d7      	b.n	8016726 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8016776:	7c82      	ldrb	r2, [r0, #18]
 8016778:	2a00      	cmp	r2, #0
 801677a:	d047      	beq.n	801680c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 801677c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016780:	ee07 2a10 	vmov	s14, r2
 8016784:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016788:	ee07 3a90 	vmov	s15, r3
 801678c:	461a      	mov	r2, r3
 801678e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016792:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801679a:	f200 808e 	bhi.w	80168ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 801679e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80167a2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80167a6:	68c7      	ldr	r7, [r0, #12]
 80167a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80167ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167b0:	ee06 6a90 	vmov	s13, r6
 80167b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80167b8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80167bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c0:	bf4a      	itet	mi
 80167c2:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 80167c6:	4634      	movpl	r4, r6
 80167c8:	ee17 4a90 	vmovmi	r4, s15
 80167cc:	edd0 7a08 	vldr	s15, [r0, #32]
 80167d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80167d4:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80167d8:	448e      	add	lr, r1
 80167da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167de:	bfc8      	it	gt
 80167e0:	2200      	movgt	r2, #0
 80167e2:	58bf      	ldr	r7, [r7, r2]
 80167e4:	7c02      	ldrb	r2, [r0, #16]
 80167e6:	fa5f f987 	uxtb.w	r9, r7
 80167ea:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80167ee:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80167f2:	b31a      	cbz	r2, 801683c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80167f4:	2dff      	cmp	r5, #255	@ 0xff
 80167f6:	d121      	bne.n	801683c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80167f8:	4571      	cmp	r1, lr
 80167fa:	d25d      	bcs.n	80168b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80167fc:	f881 9000 	strb.w	r9, [r1]
 8016800:	3103      	adds	r1, #3
 8016802:	f801 8c02 	strb.w	r8, [r1, #-2]
 8016806:	f801 cc01 	strb.w	ip, [r1, #-1]
 801680a:	e7f5      	b.n	80167f8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 801680c:	ee07 4a90 	vmov	s15, r4
 8016810:	ed90 7a06 	vldr	s14, [r0, #24]
 8016814:	edd0 6a05 	vldr	s13, [r0, #20]
 8016818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801681c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016820:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016824:	edd0 7a08 	vldr	s15, [r0, #32]
 8016828:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016830:	bf44      	itt	mi
 8016832:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8016836:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801683a:	e7a5      	b.n	8016788 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 801683c:	0e3f      	lsrs	r7, r7, #24
 801683e:	436f      	muls	r7, r5
 8016840:	1c7a      	adds	r2, r7, #1
 8016842:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8016846:	1212      	asrs	r2, r2, #8
 8016848:	ea6f 0a02 	mvn.w	sl, r2
 801684c:	b292      	uxth	r2, r2
 801684e:	fb19 f902 	smulbb	r9, r9, r2
 8016852:	fa5f fa8a 	uxtb.w	sl, sl
 8016856:	fb18 f802 	smulbb	r8, r8, r2
 801685a:	fb1c fc02 	smulbb	ip, ip, r2
 801685e:	fa1f f989 	uxth.w	r9, r9
 8016862:	fa1f f888 	uxth.w	r8, r8
 8016866:	fa1f fc8c 	uxth.w	ip, ip
 801686a:	458e      	cmp	lr, r1
 801686c:	f101 0203 	add.w	r2, r1, #3
 8016870:	d922      	bls.n	80168b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8016872:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8016876:	fb01 910a 	mla	r1, r1, sl, r9
 801687a:	b289      	uxth	r1, r1
 801687c:	1c4f      	adds	r7, r1, #1
 801687e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016882:	1209      	asrs	r1, r1, #8
 8016884:	f802 1c03 	strb.w	r1, [r2, #-3]
 8016888:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801688c:	fb01 810a 	mla	r1, r1, sl, r8
 8016890:	b289      	uxth	r1, r1
 8016892:	1c4f      	adds	r7, r1, #1
 8016894:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016898:	1209      	asrs	r1, r1, #8
 801689a:	f802 1c02 	strb.w	r1, [r2, #-2]
 801689e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80168a2:	fb01 c10a 	mla	r1, r1, sl, ip
 80168a6:	b289      	uxth	r1, r1
 80168a8:	1c4f      	adds	r7, r1, #1
 80168aa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80168ae:	1209      	asrs	r1, r1, #8
 80168b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80168b4:	4611      	mov	r1, r2
 80168b6:	e7d8      	b.n	801686a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 80168b8:	191a      	adds	r2, r3, r4
 80168ba:	4433      	add	r3, r6
 80168bc:	b21b      	sxth	r3, r3
 80168be:	4293      	cmp	r3, r2
 80168c0:	f340 80f9 	ble.w	8016ab6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80168c4:	edd0 7a07 	vldr	s15, [r0, #28]
 80168c8:	ee06 2a90 	vmov	s13, r2
 80168cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80168d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80168d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80168d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168dc:	f340 80b0 	ble.w	8016a40 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 80168e0:	ee06 3a10 	vmov	s12, r3
 80168e4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80168e8:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8016abc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 80168ec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80168f0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80168f4:	ed90 6a08 	vldr	s12, [r0, #32]
 80168f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168fc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8016900:	bfd6      	itet	le
 8016902:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8016906:	469c      	movgt	ip, r3
 8016908:	ee17 ca90 	vmovle	ip, s15
 801690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016910:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8016ac0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8016914:	ebac 0202 	sub.w	r2, ip, r2
 8016918:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801691c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016920:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016924:	188c      	adds	r4, r1, r2
 8016926:	7c02      	ldrb	r2, [r0, #16]
 8016928:	b1d2      	cbz	r2, 8016960 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801692a:	2dff      	cmp	r5, #255	@ 0xff
 801692c:	d118      	bne.n	8016960 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801692e:	42a1      	cmp	r1, r4
 8016930:	d261      	bcs.n	80169f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8016932:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016936:	68c6      	ldr	r6, [r0, #12]
 8016938:	3103      	adds	r1, #3
 801693a:	ee17 7a10 	vmov	r7, s14
 801693e:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8016942:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8016946:	f801 6c03 	strb.w	r6, [r1, #-3]
 801694a:	7856      	ldrb	r6, [r2, #1]
 801694c:	f801 6c02 	strb.w	r6, [r1, #-2]
 8016950:	7892      	ldrb	r2, [r2, #2]
 8016952:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016956:	ed90 7a08 	vldr	s14, [r0, #32]
 801695a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801695e:	e7e6      	b.n	801692e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8016960:	68c2      	ldr	r2, [r0, #12]
 8016962:	428c      	cmp	r4, r1
 8016964:	f101 0e03 	add.w	lr, r1, #3
 8016968:	d945      	bls.n	80169f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801696a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801696e:	ee17 9a10 	vmov	r9, s14
 8016972:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8016976:	f898 7003 	ldrb.w	r7, [r8, #3]
 801697a:	fb07 f605 	mul.w	r6, r7, r5
 801697e:	1c77      	adds	r7, r6, #1
 8016980:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8016984:	123f      	asrs	r7, r7, #8
 8016986:	b2b9      	uxth	r1, r7
 8016988:	43ff      	mvns	r7, r7
 801698a:	b2fe      	uxtb	r6, r7
 801698c:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8016990:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8016994:	fb19 f906 	smulbb	r9, r9, r6
 8016998:	fb07 9701 	mla	r7, r7, r1, r9
 801699c:	b2bf      	uxth	r7, r7
 801699e:	f107 0901 	add.w	r9, r7, #1
 80169a2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80169a6:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80169aa:	fb19 f906 	smulbb	r9, r9, r6
 80169ae:	123f      	asrs	r7, r7, #8
 80169b0:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80169b4:	f898 7001 	ldrb.w	r7, [r8, #1]
 80169b8:	fb07 9701 	mla	r7, r7, r1, r9
 80169bc:	b2bf      	uxth	r7, r7
 80169be:	f107 0901 	add.w	r9, r7, #1
 80169c2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80169c6:	123f      	asrs	r7, r7, #8
 80169c8:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80169cc:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80169d0:	f898 8002 	ldrb.w	r8, [r8, #2]
 80169d4:	fb17 f606 	smulbb	r6, r7, r6
 80169d8:	fb08 6601 	mla	r6, r8, r1, r6
 80169dc:	b2b6      	uxth	r6, r6
 80169de:	1c71      	adds	r1, r6, #1
 80169e0:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80169e4:	4671      	mov	r1, lr
 80169e6:	1236      	asrs	r6, r6, #8
 80169e8:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80169ec:	ed90 7a08 	vldr	s14, [r0, #32]
 80169f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80169f4:	e7b5      	b.n	8016962 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80169f6:	4563      	cmp	r3, ip
 80169f8:	dd5d      	ble.n	8016ab6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80169fa:	edd0 7a08 	vldr	s15, [r0, #32]
 80169fe:	eba3 030c 	sub.w	r3, r3, ip
 8016a02:	68c4      	ldr	r4, [r0, #12]
 8016a04:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8016a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a10:	7c00      	ldrb	r0, [r0, #16]
 8016a12:	440b      	add	r3, r1
 8016a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a18:	bfd8      	it	le
 8016a1a:	2200      	movle	r2, #0
 8016a1c:	58a2      	ldr	r2, [r4, r2]
 8016a1e:	b2d4      	uxtb	r4, r2
 8016a20:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8016a24:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8016a28:	b160      	cbz	r0, 8016a44 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8016a2a:	2dff      	cmp	r5, #255	@ 0xff
 8016a2c:	d10a      	bne.n	8016a44 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8016a2e:	4299      	cmp	r1, r3
 8016a30:	d241      	bcs.n	8016ab6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8016a32:	700c      	strb	r4, [r1, #0]
 8016a34:	3103      	adds	r1, #3
 8016a36:	f801 cc02 	strb.w	ip, [r1, #-2]
 8016a3a:	f801 7c01 	strb.w	r7, [r1, #-1]
 8016a3e:	e7f6      	b.n	8016a2e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8016a40:	4694      	mov	ip, r2
 8016a42:	e7da      	b.n	80169fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8016a44:	0e12      	lsrs	r2, r2, #24
 8016a46:	436a      	muls	r2, r5
 8016a48:	1c55      	adds	r5, r2, #1
 8016a4a:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8016a4e:	122d      	asrs	r5, r5, #8
 8016a50:	43ee      	mvns	r6, r5
 8016a52:	b2ad      	uxth	r5, r5
 8016a54:	fb14 f405 	smulbb	r4, r4, r5
 8016a58:	b2f6      	uxtb	r6, r6
 8016a5a:	fb1c f005 	smulbb	r0, ip, r5
 8016a5e:	fb17 f505 	smulbb	r5, r7, r5
 8016a62:	b2a4      	uxth	r4, r4
 8016a64:	b280      	uxth	r0, r0
 8016a66:	b2ad      	uxth	r5, r5
 8016a68:	428b      	cmp	r3, r1
 8016a6a:	f101 0203 	add.w	r2, r1, #3
 8016a6e:	d922      	bls.n	8016ab6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8016a70:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8016a74:	fb01 4106 	mla	r1, r1, r6, r4
 8016a78:	b289      	uxth	r1, r1
 8016a7a:	1c4f      	adds	r7, r1, #1
 8016a7c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016a80:	1209      	asrs	r1, r1, #8
 8016a82:	f802 1c03 	strb.w	r1, [r2, #-3]
 8016a86:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8016a8a:	fb01 0106 	mla	r1, r1, r6, r0
 8016a8e:	b289      	uxth	r1, r1
 8016a90:	1c4f      	adds	r7, r1, #1
 8016a92:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016a96:	1209      	asrs	r1, r1, #8
 8016a98:	f802 1c02 	strb.w	r1, [r2, #-2]
 8016a9c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8016aa0:	fb01 5106 	mla	r1, r1, r6, r5
 8016aa4:	b289      	uxth	r1, r1
 8016aa6:	1c4f      	adds	r7, r1, #1
 8016aa8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016aac:	1209      	asrs	r1, r1, #8
 8016aae:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016ab2:	4611      	mov	r1, r2
 8016ab4:	e7d8      	b.n	8016a68 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8016ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aba:	bf00      	nop
 8016abc:	447ffffe 	.word	0x447ffffe
 8016ac0:	00000000 	.word	0x00000000

08016ac4 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8016ac4:	4770      	bx	lr

08016ac6 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8016ac6:	4770      	bx	lr

08016ac8 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8016ac8:	b510      	push	{r4, lr}
 8016aca:	4604      	mov	r4, r0
 8016acc:	2124      	movs	r1, #36	@ 0x24
 8016ace:	f012 fa07 	bl	8028ee0 <_ZdlPvj>
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	bd10      	pop	{r4, pc}

08016ad6 <_ZN8touchgfx6CircleD1Ev>:
 8016ad6:	4770      	bx	lr

08016ad8 <_ZN8touchgfx6CircleD0Ev>:
 8016ad8:	b510      	push	{r4, lr}
 8016ada:	4604      	mov	r4, r0
 8016adc:	2148      	movs	r1, #72	@ 0x48
 8016ade:	f012 f9ff 	bl	8028ee0 <_ZdlPvj>
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	bd10      	pop	{r4, pc}

08016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016ae6:	b507      	push	{r0, r1, r2, lr}
 8016ae8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8016aec:	ab01      	add	r3, sp, #4
 8016aee:	6809      	ldr	r1, [r1, #0]
 8016af0:	6800      	ldr	r0, [r0, #0]
 8016af2:	f005 ffd3 	bl	801ca9c <_ZN8touchgfx6muldivElllRl>
 8016af6:	b003      	add	sp, #12
 8016af8:	f85d fb04 	ldr.w	pc, [sp], #4

08016afc <_ZN8touchgfx7CWRUtil4sineEi>:
 8016afc:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8016b00:	fb90 f2f3 	sdiv	r2, r0, r3
 8016b04:	fb02 0013 	mls	r0, r2, r3, r0
 8016b08:	2800      	cmp	r0, #0
 8016b0a:	bfb8      	it	lt
 8016b0c:	18c0      	addlt	r0, r0, r3
 8016b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8016b38 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8016b10:	285a      	cmp	r0, #90	@ 0x5a
 8016b12:	dc02      	bgt.n	8016b1a <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8016b14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016b18:	4770      	bx	lr
 8016b1a:	28b4      	cmp	r0, #180	@ 0xb4
 8016b1c:	dc02      	bgt.n	8016b24 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8016b1e:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 8016b22:	e7f7      	b.n	8016b14 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8016b24:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8016b28:	bfd4      	ite	le
 8016b2a:	38b4      	suble	r0, #180	@ 0xb4
 8016b2c:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 8016b30:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016b34:	4240      	negs	r0, r0
 8016b36:	4770      	bx	lr
 8016b38:	0802df38 	.word	0x0802df38

08016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8016b3c:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8016b40:	fb90 f2f3 	sdiv	r2, r0, r3
 8016b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b46:	fb02 0013 	mls	r0, r2, r3, r0
 8016b4a:	2800      	cmp	r0, #0
 8016b4c:	bfb8      	it	lt
 8016b4e:	18c0      	addlt	r0, r0, r3
 8016b50:	1144      	asrs	r4, r0, #5
 8016b52:	f000 061f 	and.w	r6, r0, #31
 8016b56:	4620      	mov	r0, r4
 8016b58:	f7ff ffd0 	bl	8016afc <_ZN8touchgfx7CWRUtil4sineEi>
 8016b5c:	4605      	mov	r5, r0
 8016b5e:	b90e      	cbnz	r6, 8016b64 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8016b60:	b002      	add	sp, #8
 8016b62:	bd70      	pop	{r4, r5, r6, pc}
 8016b64:	1c60      	adds	r0, r4, #1
 8016b66:	f7ff ffc9 	bl	8016afc <_ZN8touchgfx7CWRUtil4sineEi>
 8016b6a:	ab01      	add	r3, sp, #4
 8016b6c:	2220      	movs	r2, #32
 8016b6e:	4631      	mov	r1, r6
 8016b70:	1b40      	subs	r0, r0, r5
 8016b72:	f005 ff93 	bl	801ca9c <_ZN8touchgfx6muldivElllRl>
 8016b76:	4428      	add	r0, r5
 8016b78:	e7f2      	b.n	8016b60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8016b7a:	b508      	push	{r3, lr}
 8016b7c:	f5c0 6034 	rsb	r0, r0, #2880	@ 0xb40
 8016b80:	f7ff ffdc 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016b84:	bd08      	pop	{r3, pc}
	...

08016b88 <_ZN8touchgfx6CircleC1Ev>:
 8016b88:	b510      	push	{r4, lr}
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	f000 fcfc 	bl	8017588 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016b90:	4b08      	ldr	r3, [pc, #32]	@ (8016bb4 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8016b92:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 8016b96:	4620      	mov	r0, r4
 8016b98:	6023      	str	r3, [r4, #0]
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8016ba0:	f24b 4205 	movw	r2, #46085	@ 0xb405
 8016ba4:	60a3      	str	r3, [r4, #8]
 8016ba6:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 8016baa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8016bae:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
 8016bb2:	bd10      	pop	{r4, pc}
 8016bb4:	0802dff8 	.word	0x0802dff8

08016bb8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8016bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bbc:	428a      	cmp	r2, r1
 8016bbe:	4680      	mov	r8, r0
 8016bc0:	4610      	mov	r0, r2
 8016bc2:	4699      	mov	r9, r3
 8016bc4:	bfaa      	itet	ge
 8016bc6:	460a      	movge	r2, r1
 8016bc8:	460b      	movlt	r3, r1
 8016bca:	4603      	movge	r3, r0
 8016bcc:	b085      	sub	sp, #20
 8016bce:	f8d8 4040 	ldr.w	r4, [r8, #64]	@ 0x40
 8016bd2:	f108 0a34 	add.w	sl, r8, #52	@ 0x34
 8016bd6:	1a99      	subs	r1, r3, r2
 8016bd8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016bda:	f5b1 5f34 	cmp.w	r1, #11520	@ 0x2d00
 8016bde:	bfa4      	itt	ge
 8016be0:	f44f 5334 	movge.w	r3, #11520	@ 0x2d00
 8016be4:	2200      	movge	r2, #0
 8016be6:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	@ 0x38
 8016bea:	9300      	str	r3, [sp, #0]
 8016bec:	f102 0b01 	add.w	fp, r2, #1
 8016bf0:	2c00      	cmp	r4, #0
 8016bf2:	f040 80ae 	bne.w	8016d52 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 8016bf6:	4610      	mov	r0, r2
 8016bf8:	9201      	str	r2, [sp, #4]
 8016bfa:	f7ff ff9f 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016bfe:	a903      	add	r1, sp, #12
 8016c00:	9003      	str	r0, [sp, #12]
 8016c02:	4650      	mov	r0, sl
 8016c04:	f7ff ff6f 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c08:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8016c0c:	9a01      	ldr	r2, [sp, #4]
 8016c0e:	4408      	add	r0, r1
 8016c10:	f8d9 1000 	ldr.w	r1, [r9]
 8016c14:	4281      	cmp	r1, r0
 8016c16:	bfc8      	it	gt
 8016c18:	f8c9 0000 	strgt.w	r0, [r9]
 8016c1c:	6839      	ldr	r1, [r7, #0]
 8016c1e:	4288      	cmp	r0, r1
 8016c20:	bfc8      	it	gt
 8016c22:	6038      	strgt	r0, [r7, #0]
 8016c24:	4610      	mov	r0, r2
 8016c26:	f7ff ffa8 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016c2a:	a903      	add	r1, sp, #12
 8016c2c:	9003      	str	r0, [sp, #12]
 8016c2e:	4650      	mov	r0, sl
 8016c30:	f7ff ff59 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c34:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8016c38:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 8016c3c:	1a10      	subs	r0, r2, r0
 8016c3e:	6832      	ldr	r2, [r6, #0]
 8016c40:	4282      	cmp	r2, r0
 8016c42:	bfc8      	it	gt
 8016c44:	6030      	strgt	r0, [r6, #0]
 8016c46:	682a      	ldr	r2, [r5, #0]
 8016c48:	4290      	cmp	r0, r2
 8016c4a:	fb9b f2f1 	sdiv	r2, fp, r1
 8016c4e:	fb01 b212 	mls	r2, r1, r2, fp
 8016c52:	bfc8      	it	gt
 8016c54:	6028      	strgt	r0, [r5, #0]
 8016c56:	1a8a      	subs	r2, r1, r2
 8016c58:	fb92 f0f1 	sdiv	r0, r2, r1
 8016c5c:	fb01 2210 	mls	r2, r1, r0, r2
 8016c60:	4493      	add	fp, r2
 8016c62:	9b00      	ldr	r3, [sp, #0]
 8016c64:	455b      	cmp	r3, fp
 8016c66:	db2a      	blt.n	8016cbe <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 8016c68:	4658      	mov	r0, fp
 8016c6a:	f7ff ff67 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016c6e:	a903      	add	r1, sp, #12
 8016c70:	9003      	str	r0, [sp, #12]
 8016c72:	4650      	mov	r0, sl
 8016c74:	f7ff ff37 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c78:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8016c7c:	4410      	add	r0, r2
 8016c7e:	f8d9 2000 	ldr.w	r2, [r9]
 8016c82:	4282      	cmp	r2, r0
 8016c84:	bfc8      	it	gt
 8016c86:	f8c9 0000 	strgt.w	r0, [r9]
 8016c8a:	683a      	ldr	r2, [r7, #0]
 8016c8c:	4290      	cmp	r0, r2
 8016c8e:	bfc8      	it	gt
 8016c90:	6038      	strgt	r0, [r7, #0]
 8016c92:	4658      	mov	r0, fp
 8016c94:	f7ff ff71 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016c98:	a903      	add	r1, sp, #12
 8016c9a:	9003      	str	r0, [sp, #12]
 8016c9c:	4650      	mov	r0, sl
 8016c9e:	f7ff ff22 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016ca2:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8016ca6:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 8016caa:	1a10      	subs	r0, r2, r0
 8016cac:	6832      	ldr	r2, [r6, #0]
 8016cae:	4282      	cmp	r2, r0
 8016cb0:	bfc8      	it	gt
 8016cb2:	6030      	strgt	r0, [r6, #0]
 8016cb4:	682a      	ldr	r2, [r5, #0]
 8016cb6:	4290      	cmp	r0, r2
 8016cb8:	bfc8      	it	gt
 8016cba:	6028      	strgt	r0, [r5, #0]
 8016cbc:	e7d1      	b.n	8016c62 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 8016cbe:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 8016cc2:	9b00      	ldr	r3, [sp, #0]
 8016cc4:	455b      	cmp	r3, fp
 8016cc6:	dd27      	ble.n	8016d18 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7ff ff37 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016cce:	a903      	add	r1, sp, #12
 8016cd0:	9003      	str	r0, [sp, #12]
 8016cd2:	4650      	mov	r0, sl
 8016cd4:	f7ff ff07 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016cd8:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8016cdc:	4410      	add	r0, r2
 8016cde:	f8d9 2000 	ldr.w	r2, [r9]
 8016ce2:	4282      	cmp	r2, r0
 8016ce4:	bfc8      	it	gt
 8016ce6:	f8c9 0000 	strgt.w	r0, [r9]
 8016cea:	683a      	ldr	r2, [r7, #0]
 8016cec:	4290      	cmp	r0, r2
 8016cee:	bfc8      	it	gt
 8016cf0:	6038      	strgt	r0, [r7, #0]
 8016cf2:	9800      	ldr	r0, [sp, #0]
 8016cf4:	f7ff ff41 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016cf8:	a903      	add	r1, sp, #12
 8016cfa:	9003      	str	r0, [sp, #12]
 8016cfc:	4650      	mov	r0, sl
 8016cfe:	f7ff fef2 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d02:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8016d06:	1a10      	subs	r0, r2, r0
 8016d08:	6832      	ldr	r2, [r6, #0]
 8016d0a:	4282      	cmp	r2, r0
 8016d0c:	bfc8      	it	gt
 8016d0e:	6030      	strgt	r0, [r6, #0]
 8016d10:	682a      	ldr	r2, [r5, #0]
 8016d12:	4290      	cmp	r0, r2
 8016d14:	bfc8      	it	gt
 8016d16:	6028      	strgt	r0, [r5, #0]
 8016d18:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8016d1c:	f8d9 1000 	ldr.w	r1, [r9]
 8016d20:	4291      	cmp	r1, r2
 8016d22:	bfc8      	it	gt
 8016d24:	f8c9 2000 	strgt.w	r2, [r9]
 8016d28:	683a      	ldr	r2, [r7, #0]
 8016d2a:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	bfb8      	it	lt
 8016d32:	603b      	strlt	r3, [r7, #0]
 8016d34:	6832      	ldr	r2, [r6, #0]
 8016d36:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	bfc8      	it	gt
 8016d3e:	6033      	strgt	r3, [r6, #0]
 8016d40:	682a      	ldr	r2, [r5, #0]
 8016d42:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8016d46:	429a      	cmp	r2, r3
 8016d48:	da00      	bge.n	8016d4c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8016d4a:	602b      	str	r3, [r5, #0]
 8016d4c:	b005      	add	sp, #20
 8016d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d52:	2002      	movs	r0, #2
 8016d54:	3401      	adds	r4, #1
 8016d56:	9201      	str	r2, [sp, #4]
 8016d58:	fb94 f4f0 	sdiv	r4, r4, r0
 8016d5c:	4610      	mov	r0, r2
 8016d5e:	f7ff feed 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016d62:	a903      	add	r1, sp, #12
 8016d64:	9003      	str	r0, [sp, #12]
 8016d66:	4650      	mov	r0, sl
 8016d68:	f7ff febd 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d6c:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8016d70:	9a01      	ldr	r2, [sp, #4]
 8016d72:	4408      	add	r0, r1
 8016d74:	f8d9 1000 	ldr.w	r1, [r9]
 8016d78:	1b03      	subs	r3, r0, r4
 8016d7a:	4420      	add	r0, r4
 8016d7c:	4299      	cmp	r1, r3
 8016d7e:	bfc8      	it	gt
 8016d80:	f8c9 3000 	strgt.w	r3, [r9]
 8016d84:	6839      	ldr	r1, [r7, #0]
 8016d86:	428b      	cmp	r3, r1
 8016d88:	bfc8      	it	gt
 8016d8a:	603b      	strgt	r3, [r7, #0]
 8016d8c:	f8d9 1000 	ldr.w	r1, [r9]
 8016d90:	4281      	cmp	r1, r0
 8016d92:	bfc8      	it	gt
 8016d94:	f8c9 0000 	strgt.w	r0, [r9]
 8016d98:	6839      	ldr	r1, [r7, #0]
 8016d9a:	4288      	cmp	r0, r1
 8016d9c:	bfc8      	it	gt
 8016d9e:	6038      	strgt	r0, [r7, #0]
 8016da0:	4610      	mov	r0, r2
 8016da2:	f7ff feea 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016da6:	a903      	add	r1, sp, #12
 8016da8:	9003      	str	r0, [sp, #12]
 8016daa:	4650      	mov	r0, sl
 8016dac:	f7ff fe9b 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016db0:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8016db4:	1a10      	subs	r0, r2, r0
 8016db6:	6832      	ldr	r2, [r6, #0]
 8016db8:	1b01      	subs	r1, r0, r4
 8016dba:	4420      	add	r0, r4
 8016dbc:	428a      	cmp	r2, r1
 8016dbe:	bfc8      	it	gt
 8016dc0:	6031      	strgt	r1, [r6, #0]
 8016dc2:	682a      	ldr	r2, [r5, #0]
 8016dc4:	4291      	cmp	r1, r2
 8016dc6:	bfc8      	it	gt
 8016dc8:	6029      	strgt	r1, [r5, #0]
 8016dca:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 8016dce:	6832      	ldr	r2, [r6, #0]
 8016dd0:	4282      	cmp	r2, r0
 8016dd2:	bfc8      	it	gt
 8016dd4:	6030      	strgt	r0, [r6, #0]
 8016dd6:	682a      	ldr	r2, [r5, #0]
 8016dd8:	4290      	cmp	r0, r2
 8016dda:	fb9b f2f1 	sdiv	r2, fp, r1
 8016dde:	fb01 b212 	mls	r2, r1, r2, fp
 8016de2:	bfc8      	it	gt
 8016de4:	6028      	strgt	r0, [r5, #0]
 8016de6:	1a8a      	subs	r2, r1, r2
 8016de8:	fb92 f0f1 	sdiv	r0, r2, r1
 8016dec:	fb01 2210 	mls	r2, r1, r0, r2
 8016df0:	4493      	add	fp, r2
 8016df2:	9b00      	ldr	r3, [sp, #0]
 8016df4:	455b      	cmp	r3, fp
 8016df6:	db40      	blt.n	8016e7a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 8016df8:	4658      	mov	r0, fp
 8016dfa:	f7ff fe9f 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016dfe:	a903      	add	r1, sp, #12
 8016e00:	9003      	str	r0, [sp, #12]
 8016e02:	4650      	mov	r0, sl
 8016e04:	f7ff fe6f 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e08:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8016e0c:	4410      	add	r0, r2
 8016e0e:	f8d9 2000 	ldr.w	r2, [r9]
 8016e12:	1b01      	subs	r1, r0, r4
 8016e14:	4420      	add	r0, r4
 8016e16:	428a      	cmp	r2, r1
 8016e18:	bfc8      	it	gt
 8016e1a:	f8c9 1000 	strgt.w	r1, [r9]
 8016e1e:	683a      	ldr	r2, [r7, #0]
 8016e20:	4291      	cmp	r1, r2
 8016e22:	bfc8      	it	gt
 8016e24:	6039      	strgt	r1, [r7, #0]
 8016e26:	f8d9 2000 	ldr.w	r2, [r9]
 8016e2a:	4282      	cmp	r2, r0
 8016e2c:	bfc8      	it	gt
 8016e2e:	f8c9 0000 	strgt.w	r0, [r9]
 8016e32:	683a      	ldr	r2, [r7, #0]
 8016e34:	4290      	cmp	r0, r2
 8016e36:	bfc8      	it	gt
 8016e38:	6038      	strgt	r0, [r7, #0]
 8016e3a:	4658      	mov	r0, fp
 8016e3c:	f7ff fe9d 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016e40:	a903      	add	r1, sp, #12
 8016e42:	9003      	str	r0, [sp, #12]
 8016e44:	4650      	mov	r0, sl
 8016e46:	f7ff fe4e 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e4a:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8016e4e:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 8016e52:	1a10      	subs	r0, r2, r0
 8016e54:	6832      	ldr	r2, [r6, #0]
 8016e56:	1b01      	subs	r1, r0, r4
 8016e58:	4420      	add	r0, r4
 8016e5a:	428a      	cmp	r2, r1
 8016e5c:	bfc8      	it	gt
 8016e5e:	6031      	strgt	r1, [r6, #0]
 8016e60:	682a      	ldr	r2, [r5, #0]
 8016e62:	4291      	cmp	r1, r2
 8016e64:	bfc8      	it	gt
 8016e66:	6029      	strgt	r1, [r5, #0]
 8016e68:	6832      	ldr	r2, [r6, #0]
 8016e6a:	4282      	cmp	r2, r0
 8016e6c:	bfc8      	it	gt
 8016e6e:	6030      	strgt	r0, [r6, #0]
 8016e70:	682a      	ldr	r2, [r5, #0]
 8016e72:	4290      	cmp	r0, r2
 8016e74:	bfc8      	it	gt
 8016e76:	6028      	strgt	r0, [r5, #0]
 8016e78:	e7bb      	b.n	8016df2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 8016e7a:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 8016e7e:	9b00      	ldr	r3, [sp, #0]
 8016e80:	455b      	cmp	r3, fp
 8016e82:	f77f af63 	ble.w	8016d4c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8016e86:	4618      	mov	r0, r3
 8016e88:	f7ff fe58 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016e8c:	a903      	add	r1, sp, #12
 8016e8e:	9003      	str	r0, [sp, #12]
 8016e90:	4650      	mov	r0, sl
 8016e92:	f7ff fe28 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e96:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8016e9a:	4410      	add	r0, r2
 8016e9c:	f8d9 2000 	ldr.w	r2, [r9]
 8016ea0:	1b01      	subs	r1, r0, r4
 8016ea2:	4420      	add	r0, r4
 8016ea4:	428a      	cmp	r2, r1
 8016ea6:	bfc8      	it	gt
 8016ea8:	f8c9 1000 	strgt.w	r1, [r9]
 8016eac:	683a      	ldr	r2, [r7, #0]
 8016eae:	4291      	cmp	r1, r2
 8016eb0:	bfc8      	it	gt
 8016eb2:	6039      	strgt	r1, [r7, #0]
 8016eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8016eb8:	4282      	cmp	r2, r0
 8016eba:	bfc8      	it	gt
 8016ebc:	f8c9 0000 	strgt.w	r0, [r9]
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	4298      	cmp	r0, r3
 8016ec4:	bfc8      	it	gt
 8016ec6:	6038      	strgt	r0, [r7, #0]
 8016ec8:	9800      	ldr	r0, [sp, #0]
 8016eca:	f7ff fe56 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016ece:	a903      	add	r1, sp, #12
 8016ed0:	9003      	str	r0, [sp, #12]
 8016ed2:	4650      	mov	r0, sl
 8016ed4:	f7ff fe07 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016ed8:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8016edc:	6832      	ldr	r2, [r6, #0]
 8016ede:	1a18      	subs	r0, r3, r0
 8016ee0:	1b03      	subs	r3, r0, r4
 8016ee2:	4404      	add	r4, r0
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	bfc8      	it	gt
 8016ee8:	6033      	strgt	r3, [r6, #0]
 8016eea:	682a      	ldr	r2, [r5, #0]
 8016eec:	4293      	cmp	r3, r2
 8016eee:	bfc8      	it	gt
 8016ef0:	602b      	strgt	r3, [r5, #0]
 8016ef2:	6833      	ldr	r3, [r6, #0]
 8016ef4:	42a3      	cmp	r3, r4
 8016ef6:	bfc8      	it	gt
 8016ef8:	6034      	strgt	r4, [r6, #0]
 8016efa:	682b      	ldr	r3, [r5, #0]
 8016efc:	429c      	cmp	r4, r3
 8016efe:	bfc8      	it	gt
 8016f00:	602c      	strgt	r4, [r5, #0]
 8016f02:	e723      	b.n	8016d4c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

08016f04 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8016f04:	b530      	push	{r4, r5, lr}
 8016f06:	4604      	mov	r4, r0
 8016f08:	4608      	mov	r0, r1
 8016f0a:	4611      	mov	r1, r2
 8016f0c:	461a      	mov	r2, r3
 8016f0e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016f12:	b089      	sub	sp, #36	@ 0x24
 8016f14:	2500      	movs	r5, #0
 8016f16:	015b      	lsls	r3, r3, #5
 8016f18:	9505      	str	r5, [sp, #20]
 8016f1a:	9304      	str	r3, [sp, #16]
 8016f1c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016f20:	015b      	lsls	r3, r3, #5
 8016f22:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8016f26:	ab07      	add	r3, sp, #28
 8016f28:	2520      	movs	r5, #32
 8016f2a:	9302      	str	r3, [sp, #8]
 8016f2c:	ab06      	add	r3, sp, #24
 8016f2e:	9301      	str	r3, [sp, #4]
 8016f30:	ab05      	add	r3, sp, #20
 8016f32:	9300      	str	r3, [sp, #0]
 8016f34:	ab04      	add	r3, sp, #16
 8016f36:	f7ff fe3f 	bl	8016bb8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8016f3a:	9a04      	ldr	r2, [sp, #16]
 8016f3c:	9805      	ldr	r0, [sp, #20]
 8016f3e:	9b06      	ldr	r3, [sp, #24]
 8016f40:	9907      	ldr	r1, [sp, #28]
 8016f42:	fb92 f2f5 	sdiv	r2, r2, r5
 8016f46:	fb90 f0f5 	sdiv	r0, r0, r5
 8016f4a:	fb93 f3f5 	sdiv	r3, r3, r5
 8016f4e:	fb91 f1f5 	sdiv	r1, r1, r5
 8016f52:	b292      	uxth	r2, r2
 8016f54:	3002      	adds	r0, #2
 8016f56:	b29b      	uxth	r3, r3
 8016f58:	3102      	adds	r1, #2
 8016f5a:	1a80      	subs	r0, r0, r2
 8016f5c:	3a01      	subs	r2, #1
 8016f5e:	1ac9      	subs	r1, r1, r3
 8016f60:	3b01      	subs	r3, #1
 8016f62:	80a0      	strh	r0, [r4, #4]
 8016f64:	4620      	mov	r0, r4
 8016f66:	8022      	strh	r2, [r4, #0]
 8016f68:	8063      	strh	r3, [r4, #2]
 8016f6a:	80e1      	strh	r1, [r4, #6]
 8016f6c:	b009      	add	sp, #36	@ 0x24
 8016f6e:	bd30      	pop	{r4, r5, pc}

08016f70 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8016f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f74:	e9d0 650e 	ldrd	r6, r5, [r0, #56]	@ 0x38
 8016f78:	468a      	mov	sl, r1
 8016f7a:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	@ 0x2c
 8016f7e:	42b5      	cmp	r5, r6
 8016f80:	f9b0 b030 	ldrsh.w	fp, [r0, #48]	@ 0x30
 8016f84:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8016f86:	b0af      	sub	sp, #188	@ 0xbc
 8016f88:	bfa4      	itt	ge
 8016f8a:	462b      	movge	r3, r5
 8016f8c:	4635      	movge	r5, r6
 8016f8e:	4604      	mov	r4, r0
 8016f90:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8016f92:	bfa8      	it	ge
 8016f94:	461e      	movge	r6, r3
 8016f96:	1b73      	subs	r3, r6, r5
 8016f98:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8016f9c:	f04f 0320 	mov.w	r3, #32
 8016fa0:	bfa4      	itt	ge
 8016fa2:	f44f 5634 	movge.w	r6, #11520	@ 0x2d00
 8016fa6:	2500      	movge	r5, #0
 8016fa8:	fb99 f9f3 	sdiv	r9, r9, r3
 8016fac:	fb9b fbf3 	sdiv	fp, fp, r3
 8016fb0:	2900      	cmp	r1, #0
 8016fb2:	f000 80fb 	beq.w	80171ac <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x23c>
 8016fb6:	f9ba 0000 	ldrsh.w	r0, [sl]
 8016fba:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8016fbe:	eba9 0700 	sub.w	r7, r9, r0
 8016fc2:	ebab 0803 	sub.w	r8, fp, r3
 8016fc6:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 8016fca:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 8016fce:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 8016fd2:	4407      	add	r7, r0
 8016fd4:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 8016fd8:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 8016fdc:	f8ba 8006 	ldrh.w	r8, [sl, #6]
 8016fe0:	b23f      	sxth	r7, r7
 8016fe2:	4498      	add	r8, r3
 8016fe4:	2302      	movs	r3, #2
 8016fe6:	eba9 0707 	sub.w	r7, r9, r7
 8016fea:	fa0f f888 	sxth.w	r8, r8
 8016fee:	9303      	str	r3, [sp, #12]
 8016ff0:	2f00      	cmp	r7, #0
 8016ff2:	ebab 0808 	sub.w	r8, fp, r8
 8016ff6:	bfb8      	it	lt
 8016ff8:	427f      	neglt	r7, r7
 8016ffa:	f1b8 0f00 	cmp.w	r8, #0
 8016ffe:	bfb8      	it	lt
 8017000:	f1c8 0800 	rsblt	r8, r8, #0
 8017004:	45bc      	cmp	ip, r7
 8017006:	bfcc      	ite	gt
 8017008:	f10c 0701 	addgt.w	r7, ip, #1
 801700c:	3701      	addle	r7, #1
 801700e:	4540      	cmp	r0, r8
 8017010:	bfc8      	it	gt
 8017012:	f100 0801 	addgt.w	r8, r0, #1
 8017016:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 801701a:	bfd8      	it	le
 801701c:	f108 0801 	addle.w	r8, r8, #1
 8017020:	3001      	adds	r0, #1
 8017022:	fb08 f808 	mul.w	r8, r8, r8
 8017026:	1040      	asrs	r0, r0, #1
 8017028:	fb07 8707 	mla	r7, r7, r7, r8
 801702c:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8017030:	fb91 f1f3 	sdiv	r1, r1, r3
 8017034:	1a52      	subs	r2, r2, r1
 8017036:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017038:	f7ff fd60 	bl	8016afc <_ZN8touchgfx7CWRUtil4sineEi>
 801703c:	a92e      	add	r1, sp, #184	@ 0xb8
 801703e:	f841 0d74 	str.w	r0, [r1, #-116]!
 8017042:	a80f      	add	r0, sp, #60	@ 0x3c
 8017044:	f7ff fd4f 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017048:	f04f 0c20 	mov.w	ip, #32
 801704c:	9b03      	ldr	r3, [sp, #12]
 801704e:	fb90 f0fc 	sdiv	r0, r0, ip
 8017052:	4340      	muls	r0, r0
 8017054:	4287      	cmp	r7, r0
 8017056:	da04      	bge.n	8017062 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf2>
 8017058:	2401      	movs	r4, #1
 801705a:	4620      	mov	r0, r4
 801705c:	b02f      	add	sp, #188	@ 0xbc
 801705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017062:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8017064:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8017066:	fb91 f2f3 	sdiv	r2, r1, r3
 801706a:	4402      	add	r2, r0
 801706c:	fb92 f2fc 	sdiv	r2, r2, ip
 8017070:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017074:	3201      	adds	r2, #1
 8017076:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801707a:	4352      	muls	r2, r2
 801707c:	440b      	add	r3, r1
 801707e:	b21b      	sxth	r3, r3
 8017080:	454b      	cmp	r3, r9
 8017082:	bfa8      	it	ge
 8017084:	464b      	movge	r3, r9
 8017086:	428b      	cmp	r3, r1
 8017088:	bfac      	ite	ge
 801708a:	eba9 0903 	subge.w	r9, r9, r3
 801708e:	eba9 0901 	sublt.w	r9, r9, r1
 8017092:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8017096:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 801709a:	440b      	add	r3, r1
 801709c:	b21b      	sxth	r3, r3
 801709e:	455b      	cmp	r3, fp
 80170a0:	bfa8      	it	ge
 80170a2:	465b      	movge	r3, fp
 80170a4:	428b      	cmp	r3, r1
 80170a6:	bfac      	ite	ge
 80170a8:	ebab 0b03 	subge.w	fp, fp, r3
 80170ac:	ebab 0b01 	sublt.w	fp, fp, r1
 80170b0:	fb0b fb0b 	mul.w	fp, fp, fp
 80170b4:	fb09 b909 	mla	r9, r9, r9, fp
 80170b8:	4591      	cmp	r9, r2
 80170ba:	dccd      	bgt.n	8017058 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 80170bc:	f10d 093c 	add.w	r9, sp, #60	@ 0x3c
 80170c0:	4621      	mov	r1, r4
 80170c2:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 80170c4:	4648      	mov	r0, r9
 80170c6:	f005 f893 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	4620      	mov	r0, r4
 80170ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80170d0:	4798      	blx	r3
 80170d2:	4653      	mov	r3, sl
 80170d4:	9000      	str	r0, [sp, #0]
 80170d6:	464a      	mov	r2, r9
 80170d8:	4639      	mov	r1, r7
 80170da:	a811      	add	r0, sp, #68	@ 0x44
 80170dc:	f011 fa80 	bl	80285e0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80170e0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80170e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80170e4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80170e6:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80170ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80170ec:	dd07      	ble.n	80170fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18e>
 80170ee:	2102      	movs	r1, #2
 80170f0:	fb93 f3f1 	sdiv	r3, r3, r1
 80170f4:	4413      	add	r3, r2
 80170f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80170f8:	fb93 f3f1 	sdiv	r3, r3, r1
 80170fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80170fe:	f04f 0a02 	mov.w	sl, #2
 8017102:	4628      	mov	r0, r5
 8017104:	f894 7044 	ldrb.w	r7, [r4, #68]	@ 0x44
 8017108:	f10d 08b8 	add.w	r8, sp, #184	@ 0xb8
 801710c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8017110:	017f      	lsls	r7, r7, #5
 8017112:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017116:	930d      	str	r3, [sp, #52]	@ 0x34
 8017118:	f7ff fd10 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801711c:	4649      	mov	r1, r9
 801711e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017120:	a80d      	add	r0, sp, #52	@ 0x34
 8017122:	f7ff fce0 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017126:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017128:	fb90 f0fa 	sdiv	r0, r0, sl
 801712c:	eb00 0b03 	add.w	fp, r0, r3
 8017130:	4628      	mov	r0, r5
 8017132:	f7ff fd22 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017136:	f848 0d80 	str.w	r0, [r8, #-128]!
 801713a:	a80d      	add	r0, sp, #52	@ 0x34
 801713c:	4641      	mov	r1, r8
 801713e:	f7ff fcd2 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017142:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017144:	4659      	mov	r1, fp
 8017146:	fb90 f0fa 	sdiv	r0, r0, sl
 801714a:	1a12      	subs	r2, r2, r0
 801714c:	a811      	add	r0, sp, #68	@ 0x44
 801714e:	f011 fb93 	bl	8028878 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017152:	f105 0a20 	add.w	sl, r5, #32
 8017156:	bb67      	cbnz	r7, 80171b2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 8017158:	46ab      	mov	fp, r5
 801715a:	45b2      	cmp	sl, r6
 801715c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801715e:	dc33      	bgt.n	80171c8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x258>
 8017160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017162:	4650      	mov	r0, sl
 8017164:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8017168:	920d      	str	r2, [sp, #52]	@ 0x34
 801716a:	f7ff fce7 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801716e:	4641      	mov	r1, r8
 8017170:	900e      	str	r0, [sp, #56]	@ 0x38
 8017172:	a80d      	add	r0, sp, #52	@ 0x34
 8017174:	f7ff fcb7 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017178:	2302      	movs	r3, #2
 801717a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801717c:	fb90 f0f3 	sdiv	r0, r0, r3
 8017180:	eb00 0b02 	add.w	fp, r0, r2
 8017184:	4650      	mov	r0, sl
 8017186:	f7ff fcf8 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801718a:	4649      	mov	r1, r9
 801718c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801718e:	a80d      	add	r0, sp, #52	@ 0x34
 8017190:	f7ff fca9 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017194:	2302      	movs	r3, #2
 8017196:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017198:	4659      	mov	r1, fp
 801719a:	46d3      	mov	fp, sl
 801719c:	44ba      	add	sl, r7
 801719e:	fb90 f0f3 	sdiv	r0, r0, r3
 80171a2:	1a12      	subs	r2, r2, r0
 80171a4:	a811      	add	r0, sp, #68	@ 0x44
 80171a6:	f011 fbb4 	bl	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80171aa:	e7d6      	b.n	801715a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 80171ac:	fb92 f2f3 	sdiv	r2, r2, r3
 80171b0:	e75e      	b.n	8017070 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x100>
 80171b2:	fb9a f2f7 	sdiv	r2, sl, r7
 80171b6:	fb07 a212 	mls	r2, r7, r2, sl
 80171ba:	1aba      	subs	r2, r7, r2
 80171bc:	fb92 f1f7 	sdiv	r1, r2, r7
 80171c0:	fb07 2211 	mls	r2, r7, r1, r2
 80171c4:	4492      	add	sl, r2
 80171c6:	e7c7      	b.n	8017158 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 80171c8:	455e      	cmp	r6, fp
 80171ca:	dd23      	ble.n	8017214 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 80171cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80171ce:	f04f 0a02 	mov.w	sl, #2
 80171d2:	4630      	mov	r0, r6
 80171d4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80171d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80171da:	f7ff fcaf 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80171de:	4641      	mov	r1, r8
 80171e0:	900e      	str	r0, [sp, #56]	@ 0x38
 80171e2:	a80d      	add	r0, sp, #52	@ 0x34
 80171e4:	f7ff fc7f 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80171e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80171ea:	fb90 f0fa 	sdiv	r0, r0, sl
 80171ee:	4403      	add	r3, r0
 80171f0:	4630      	mov	r0, r6
 80171f2:	9303      	str	r3, [sp, #12]
 80171f4:	f7ff fcc1 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80171f8:	4649      	mov	r1, r9
 80171fa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80171fc:	a80d      	add	r0, sp, #52	@ 0x34
 80171fe:	f7ff fc72 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017202:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017204:	9b03      	ldr	r3, [sp, #12]
 8017206:	fb90 f0fa 	sdiv	r0, r0, sl
 801720a:	4619      	mov	r1, r3
 801720c:	1a12      	subs	r2, r2, r0
 801720e:	a811      	add	r0, sp, #68	@ 0x44
 8017210:	f011 fb7f 	bl	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017214:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017216:	b99b      	cbnz	r3, 8017240 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2d0>
 8017218:	1b75      	subs	r5, r6, r5
 801721a:	f5b5 5f34 	cmp.w	r5, #11520	@ 0x2d00
 801721e:	da04      	bge.n	801722a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8017220:	a811      	add	r0, sp, #68	@ 0x44
 8017222:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8017226:	f011 fb74 	bl	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801722a:	21ff      	movs	r1, #255	@ 0xff
 801722c:	a811      	add	r0, sp, #68	@ 0x44
 801722e:	f011 fa6b 	bl	8028708 <_ZN8touchgfx6Canvas6renderEh>
 8017232:	4604      	mov	r4, r0
 8017234:	4b89      	ldr	r3, [pc, #548]	@ (801745c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4ec>)
 8017236:	a816      	add	r0, sp, #88	@ 0x58
 8017238:	9311      	str	r3, [sp, #68]	@ 0x44
 801723a:	f001 fb0d 	bl	8018858 <_ZN8touchgfx7OutlineD1Ev>
 801723e:	e70c      	b.n	801705a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 8017240:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	@ 0x5c
 8017244:	429a      	cmp	r2, r3
 8017246:	f0c0 8107 	bcc.w	8017458 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e8>
 801724a:	1b73      	subs	r3, r6, r5
 801724c:	f894 a045 	ldrb.w	sl, [r4, #69]	@ 0x45
 8017250:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8017254:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8017258:	9303      	str	r3, [sp, #12]
 801725a:	da43      	bge.n	80172e4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 801725c:	4630      	mov	r0, r6
 801725e:	f7ff fc6d 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017262:	4649      	mov	r1, r9
 8017264:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017266:	a80b      	add	r0, sp, #44	@ 0x2c
 8017268:	f7ff fc3d 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801726c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801726e:	18c3      	adds	r3, r0, r3
 8017270:	4630      	mov	r0, r6
 8017272:	9305      	str	r3, [sp, #20]
 8017274:	f7ff fc81 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017278:	4649      	mov	r1, r9
 801727a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801727c:	a80b      	add	r0, sp, #44	@ 0x2c
 801727e:	f7ff fc32 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017282:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017284:	f506 52b4 	add.w	r2, r6, #5760	@ 0x1680
 8017288:	1a1b      	subs	r3, r3, r0
 801728a:	9206      	str	r2, [sp, #24]
 801728c:	9304      	str	r3, [sp, #16]
 801728e:	eb06 030a 	add.w	r3, r6, sl
 8017292:	9a06      	ldr	r2, [sp, #24]
 8017294:	4293      	cmp	r3, r2
 8017296:	da25      	bge.n	80172e4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 8017298:	4618      	mov	r0, r3
 801729a:	9308      	str	r3, [sp, #32]
 801729c:	f7ff fc4e 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80172a0:	4649      	mov	r1, r9
 80172a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80172a4:	a80c      	add	r0, sp, #48	@ 0x30
 80172a6:	f7ff fc1e 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80172aa:	2202      	movs	r2, #2
 80172ac:	9b05      	ldr	r3, [sp, #20]
 80172ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80172b0:	fb90 f0f2 	sdiv	r0, r0, r2
 80172b4:	18c3      	adds	r3, r0, r3
 80172b6:	9307      	str	r3, [sp, #28]
 80172b8:	9b08      	ldr	r3, [sp, #32]
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7ff fc5d 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80172c0:	a92e      	add	r1, sp, #184	@ 0xb8
 80172c2:	f841 0d80 	str.w	r0, [r1, #-128]!
 80172c6:	a80c      	add	r0, sp, #48	@ 0x30
 80172c8:	f7ff fc0d 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80172cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172ce:	9b04      	ldr	r3, [sp, #16]
 80172d0:	9907      	ldr	r1, [sp, #28]
 80172d2:	fb90 f2f2 	sdiv	r2, r0, r2
 80172d6:	a811      	add	r0, sp, #68	@ 0x44
 80172d8:	1a9a      	subs	r2, r3, r2
 80172da:	f011 fb1a 	bl	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80172de:	9b08      	ldr	r3, [sp, #32]
 80172e0:	4453      	add	r3, sl
 80172e2:	e7d6      	b.n	8017292 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x322>
 80172e4:	455e      	cmp	r6, fp
 80172e6:	dd25      	ble.n	8017334 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c4>
 80172e8:	4630      	mov	r0, r6
 80172ea:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 80172ee:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80172f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80172f4:	f7ff fc22 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80172f8:	4641      	mov	r1, r8
 80172fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80172fc:	a80d      	add	r0, sp, #52	@ 0x34
 80172fe:	f7ff fbf2 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017302:	2202      	movs	r2, #2
 8017304:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017306:	9204      	str	r2, [sp, #16]
 8017308:	fb90 f0f2 	sdiv	r0, r0, r2
 801730c:	eb00 0903 	add.w	r9, r0, r3
 8017310:	4630      	mov	r0, r6
 8017312:	f7ff fc32 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017316:	a92e      	add	r1, sp, #184	@ 0xb8
 8017318:	f841 0d7c 	str.w	r0, [r1, #-124]!
 801731c:	a80d      	add	r0, sp, #52	@ 0x34
 801731e:	f7ff fbe2 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017322:	9a04      	ldr	r2, [sp, #16]
 8017324:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017326:	4649      	mov	r1, r9
 8017328:	fb90 f2f2 	sdiv	r2, r0, r2
 801732c:	a811      	add	r0, sp, #68	@ 0x44
 801732e:	1a9a      	subs	r2, r3, r2
 8017330:	f011 faef 	bl	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017334:	46d9      	mov	r9, fp
 8017336:	2602      	movs	r6, #2
 8017338:	45a9      	cmp	r9, r5
 801733a:	db25      	blt.n	8017388 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x418>
 801733c:	4648      	mov	r0, r9
 801733e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8017342:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017346:	930d      	str	r3, [sp, #52]	@ 0x34
 8017348:	f7ff fbf8 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801734c:	4641      	mov	r1, r8
 801734e:	900e      	str	r0, [sp, #56]	@ 0x38
 8017350:	a80d      	add	r0, sp, #52	@ 0x34
 8017352:	f7ff fbc8 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017356:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017358:	fb90 f0f6 	sdiv	r0, r0, r6
 801735c:	eb00 0b03 	add.w	fp, r0, r3
 8017360:	4648      	mov	r0, r9
 8017362:	f7ff fc0a 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017366:	a90f      	add	r1, sp, #60	@ 0x3c
 8017368:	900f      	str	r0, [sp, #60]	@ 0x3c
 801736a:	a80d      	add	r0, sp, #52	@ 0x34
 801736c:	f7ff fbbb 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017370:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017372:	4659      	mov	r1, fp
 8017374:	46cb      	mov	fp, r9
 8017376:	eba9 0907 	sub.w	r9, r9, r7
 801737a:	fb90 f0f6 	sdiv	r0, r0, r6
 801737e:	1a12      	subs	r2, r2, r0
 8017380:	a811      	add	r0, sp, #68	@ 0x44
 8017382:	f011 fac6 	bl	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017386:	e7d7      	b.n	8017338 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c8>
 8017388:	455d      	cmp	r5, fp
 801738a:	da22      	bge.n	80173d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x462>
 801738c:	2602      	movs	r6, #2
 801738e:	4628      	mov	r0, r5
 8017390:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8017394:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017398:	930d      	str	r3, [sp, #52]	@ 0x34
 801739a:	f7ff fbcf 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801739e:	4641      	mov	r1, r8
 80173a0:	900e      	str	r0, [sp, #56]	@ 0x38
 80173a2:	a80d      	add	r0, sp, #52	@ 0x34
 80173a4:	f7ff fb9f 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80173a8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80173aa:	fb90 f0f6 	sdiv	r0, r0, r6
 80173ae:	4407      	add	r7, r0
 80173b0:	4628      	mov	r0, r5
 80173b2:	f7ff fbe2 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80173b6:	a92e      	add	r1, sp, #184	@ 0xb8
 80173b8:	f841 0d7c 	str.w	r0, [r1, #-124]!
 80173bc:	a80d      	add	r0, sp, #52	@ 0x34
 80173be:	f7ff fb92 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80173c2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80173c4:	4639      	mov	r1, r7
 80173c6:	fb90 f0f6 	sdiv	r0, r0, r6
 80173ca:	1a12      	subs	r2, r2, r0
 80173cc:	a811      	add	r0, sp, #68	@ 0x44
 80173ce:	f011 faa0 	bl	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80173d2:	9b03      	ldr	r3, [sp, #12]
 80173d4:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 80173d8:	f6bf af27 	bge.w	801722a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 80173dc:	ae2e      	add	r6, sp, #184	@ 0xb8
 80173de:	4628      	mov	r0, r5
 80173e0:	f7ff fbac 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80173e4:	f04f 0b02 	mov.w	fp, #2
 80173e8:	f846 0d7c 	str.w	r0, [r6, #-124]!
 80173ec:	a80b      	add	r0, sp, #44	@ 0x2c
 80173ee:	4631      	mov	r1, r6
 80173f0:	f7ff fb79 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80173f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80173f6:	eb00 0903 	add.w	r9, r0, r3
 80173fa:	4628      	mov	r0, r5
 80173fc:	f7ff fbbd 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017400:	4631      	mov	r1, r6
 8017402:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017404:	a80b      	add	r0, sp, #44	@ 0x2c
 8017406:	f7ff fb6e 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801740a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801740c:	f5a5 54b4 	sub.w	r4, r5, #5760	@ 0x1680
 8017410:	eba3 0800 	sub.w	r8, r3, r0
 8017414:	4454      	add	r4, sl
 8017416:	42a5      	cmp	r5, r4
 8017418:	f77f af07 	ble.w	801722a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 801741c:	4620      	mov	r0, r4
 801741e:	f7ff fb8d 	bl	8016b3c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017422:	4631      	mov	r1, r6
 8017424:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017426:	a80c      	add	r0, sp, #48	@ 0x30
 8017428:	f7ff fb5d 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801742c:	fb90 f0fb 	sdiv	r0, r0, fp
 8017430:	eb00 0709 	add.w	r7, r0, r9
 8017434:	4620      	mov	r0, r4
 8017436:	f7ff fba0 	bl	8016b7a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801743a:	a90e      	add	r1, sp, #56	@ 0x38
 801743c:	900e      	str	r0, [sp, #56]	@ 0x38
 801743e:	a80c      	add	r0, sp, #48	@ 0x30
 8017440:	f7ff fb51 	bl	8016ae6 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017444:	4639      	mov	r1, r7
 8017446:	4454      	add	r4, sl
 8017448:	fb90 f2fb 	sdiv	r2, r0, fp
 801744c:	a811      	add	r0, sp, #68	@ 0x44
 801744e:	eba8 0202 	sub.w	r2, r8, r2
 8017452:	f011 fa5e 	bl	8028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017456:	e7de      	b.n	8017416 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4a6>
 8017458:	2400      	movs	r4, #0
 801745a:	e6eb      	b.n	8017234 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2c4>
 801745c:	0802e7b8 	.word	0x0802e7b8

08017460 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8017460:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017462:	6803      	ldr	r3, [r0, #0]
 8017464:	460d      	mov	r5, r1
 8017466:	4604      	mov	r4, r0
 8017468:	4601      	mov	r1, r0
 801746a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801746c:	a802      	add	r0, sp, #8
 801746e:	4798      	blx	r3
 8017470:	6828      	ldr	r0, [r5, #0]
 8017472:	6869      	ldr	r1, [r5, #4]
 8017474:	466b      	mov	r3, sp
 8017476:	c303      	stmia	r3!, {r0, r1}
 8017478:	4668      	mov	r0, sp
 801747a:	4619      	mov	r1, r3
 801747c:	f7fd f81e 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8017480:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017482:	b188      	cbz	r0, 80174a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017484:	6803      	ldr	r3, [r0, #0]
 8017486:	1d21      	adds	r1, r4, #4
 8017488:	68db      	ldr	r3, [r3, #12]
 801748a:	4798      	blx	r3
 801748c:	b160      	cbz	r0, 80174a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801748e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017492:	2b00      	cmp	r3, #0
 8017494:	dd08      	ble.n	80174a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017496:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801749a:	2d00      	cmp	r5, #0
 801749c:	dd04      	ble.n	80174a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801749e:	4a2b      	ldr	r2, [pc, #172]	@ (801754c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80174a0:	7812      	ldrb	r2, [r2, #0]
 80174a2:	b11a      	cbz	r2, 80174ac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80174a4:	2a01      	cmp	r2, #1
 80174a6:	d029      	beq.n	80174fc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80174a8:	b004      	add	sp, #16
 80174aa:	bd70      	pop	{r4, r5, r6, pc}
 80174ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80174b0:	441d      	add	r5, r3
 80174b2:	b2ad      	uxth	r5, r5
 80174b4:	b22e      	sxth	r6, r5
 80174b6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80174ba:	42b3      	cmp	r3, r6
 80174bc:	daf4      	bge.n	80174a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80174be:	6823      	ldr	r3, [r4, #0]
 80174c0:	4669      	mov	r1, sp
 80174c2:	4620      	mov	r0, r4
 80174c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174c6:	4798      	blx	r3
 80174c8:	b940      	cbnz	r0, 80174dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80174ca:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80174ce:	2b01      	cmp	r3, #1
 80174d0:	d004      	beq.n	80174dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80174d2:	3301      	adds	r3, #1
 80174d4:	105b      	asrs	r3, r3, #1
 80174d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80174da:	e7f0      	b.n	80174be <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80174dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80174e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80174e4:	4413      	add	r3, r2
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	441a      	add	r2, r3
 80174ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80174ee:	b212      	sxth	r2, r2
 80174f0:	4296      	cmp	r6, r2
 80174f2:	dae0      	bge.n	80174b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80174f4:	1aeb      	subs	r3, r5, r3
 80174f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80174fa:	e7dc      	b.n	80174b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80174fc:	f8bd 5000 	ldrh.w	r5, [sp]
 8017500:	441d      	add	r5, r3
 8017502:	b2ad      	uxth	r5, r5
 8017504:	b22e      	sxth	r6, r5
 8017506:	f9bd 3000 	ldrsh.w	r3, [sp]
 801750a:	42b3      	cmp	r3, r6
 801750c:	dacc      	bge.n	80174a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801750e:	6823      	ldr	r3, [r4, #0]
 8017510:	4669      	mov	r1, sp
 8017512:	4620      	mov	r0, r4
 8017514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017516:	4798      	blx	r3
 8017518:	b940      	cbnz	r0, 801752c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801751a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801751e:	2b01      	cmp	r3, #1
 8017520:	d004      	beq.n	801752c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8017522:	3301      	adds	r3, #1
 8017524:	105b      	asrs	r3, r3, #1
 8017526:	f8ad 3004 	strh.w	r3, [sp, #4]
 801752a:	e7f0      	b.n	801750e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801752c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017530:	f8bd 3000 	ldrh.w	r3, [sp]
 8017534:	4413      	add	r3, r2
 8017536:	b29b      	uxth	r3, r3
 8017538:	441a      	add	r2, r3
 801753a:	f8ad 3000 	strh.w	r3, [sp]
 801753e:	b212      	sxth	r2, r2
 8017540:	4296      	cmp	r6, r2
 8017542:	dae0      	bge.n	8017506 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8017544:	1aeb      	subs	r3, r5, r3
 8017546:	f8ad 3004 	strh.w	r3, [sp, #4]
 801754a:	e7dc      	b.n	8017506 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801754c:	240621b0 	.word	0x240621b0

08017550 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8017550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017552:	6803      	ldr	r3, [r0, #0]
 8017554:	4604      	mov	r4, r0
 8017556:	4601      	mov	r1, r0
 8017558:	4668      	mov	r0, sp
 801755a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801755c:	4798      	blx	r3
 801755e:	2100      	movs	r1, #0
 8017560:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017564:	4668      	mov	r0, sp
 8017566:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801756a:	9102      	str	r1, [sp, #8]
 801756c:	a902      	add	r1, sp, #8
 801756e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017572:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017576:	f7fc ffa1 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 801757a:	6823      	ldr	r3, [r4, #0]
 801757c:	4669      	mov	r1, sp
 801757e:	4620      	mov	r0, r4
 8017580:	691b      	ldr	r3, [r3, #16]
 8017582:	4798      	blx	r3
 8017584:	b004      	add	sp, #16
 8017586:	bd10      	pop	{r4, pc}

08017588 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017588:	2101      	movs	r1, #1
 801758a:	2200      	movs	r2, #0
 801758c:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8017590:	490a      	ldr	r1, [pc, #40]	@ (80175bc <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8017592:	8082      	strh	r2, [r0, #4]
 8017594:	6001      	str	r1, [r0, #0]
 8017596:	21ff      	movs	r1, #255	@ 0xff
 8017598:	80c2      	strh	r2, [r0, #6]
 801759a:	8102      	strh	r2, [r0, #8]
 801759c:	8142      	strh	r2, [r0, #10]
 801759e:	8182      	strh	r2, [r0, #12]
 80175a0:	81c2      	strh	r2, [r0, #14]
 80175a2:	8202      	strh	r2, [r0, #16]
 80175a4:	8242      	strh	r2, [r0, #18]
 80175a6:	61c2      	str	r2, [r0, #28]
 80175a8:	8402      	strh	r2, [r0, #32]
 80175aa:	8442      	strh	r2, [r0, #34]	@ 0x22
 80175ac:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80175b0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80175b4:	6282      	str	r2, [r0, #40]	@ 0x28
 80175b6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80175ba:	4770      	bx	lr
 80175bc:	0802e070 	.word	0x0802e070

080175c0 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80175c0:	b508      	push	{r3, lr}
 80175c2:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80175c6:	b10b      	cbz	r3, 80175cc <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 80175c8:	f7ec fa80 	bl	8003acc <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80175cc:	bd08      	pop	{r3, pc}

080175ce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 80175ce:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80175d2:	4770      	bx	lr

080175d4 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 80175d4:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80175d8:	4770      	bx	lr

080175da <_ZN8touchgfx13ScalableImageD1Ev>:
 80175da:	4770      	bx	lr

080175dc <_ZN8touchgfx13ScalableImageD0Ev>:
 80175dc:	b510      	push	{r4, lr}
 80175de:	4604      	mov	r4, r0
 80175e0:	212c      	movs	r1, #44	@ 0x2c
 80175e2:	f011 fc7d 	bl	8028ee0 <_ZdlPvj>
 80175e6:	4620      	mov	r0, r4
 80175e8:	bd10      	pop	{r4, pc}

080175ea <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 80175ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175ec:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80175f0:	b085      	sub	sp, #20
 80175f2:	4604      	mov	r4, r0
 80175f4:	460d      	mov	r5, r1
 80175f6:	2bff      	cmp	r3, #255	@ 0xff
 80175f8:	d128      	bne.n	801764c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80175fa:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 80175fe:	4668      	mov	r0, sp
 8017600:	4631      	mov	r1, r6
 8017602:	f006 febb 	bl	801e37c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017606:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 801760a:	4630      	mov	r0, r6
 801760c:	f006 fe4e 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017610:	4287      	cmp	r7, r0
 8017612:	d11b      	bne.n	801764c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8017614:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8017618:	4630      	mov	r0, r6
 801761a:	f006 fe7b 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801761e:	4287      	cmp	r7, r0
 8017620:	d114      	bne.n	801764c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8017622:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8017626:	2100      	movs	r1, #0
 8017628:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801762c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017630:	466b      	mov	r3, sp
 8017632:	9102      	str	r1, [sp, #8]
 8017634:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017638:	cb03      	ldmia	r3!, {r0, r1}
 801763a:	6020      	str	r0, [r4, #0]
 801763c:	4620      	mov	r0, r4
 801763e:	6061      	str	r1, [r4, #4]
 8017640:	4619      	mov	r1, r3
 8017642:	f7fc ff3b 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8017646:	4620      	mov	r0, r4
 8017648:	b005      	add	sp, #20
 801764a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801764c:	2300      	movs	r3, #0
 801764e:	8023      	strh	r3, [r4, #0]
 8017650:	8063      	strh	r3, [r4, #2]
 8017652:	80a3      	strh	r3, [r4, #4]
 8017654:	80e3      	strh	r3, [r4, #6]
 8017656:	e7f6      	b.n	8017646 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

08017658 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8017658:	b538      	push	{r3, r4, r5, lr}
 801765a:	2300      	movs	r3, #0
 801765c:	2501      	movs	r5, #1
 801765e:	4604      	mov	r4, r0
 8017660:	8083      	strh	r3, [r0, #4]
 8017662:	80c3      	strh	r3, [r0, #6]
 8017664:	8103      	strh	r3, [r0, #8]
 8017666:	8143      	strh	r3, [r0, #10]
 8017668:	8183      	strh	r3, [r0, #12]
 801766a:	81c3      	strh	r3, [r0, #14]
 801766c:	8203      	strh	r3, [r0, #16]
 801766e:	8243      	strh	r3, [r0, #18]
 8017670:	61c3      	str	r3, [r0, #28]
 8017672:	8403      	strh	r3, [r0, #32]
 8017674:	8443      	strh	r3, [r0, #34]	@ 0x22
 8017676:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 801767a:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 801767e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8017682:	4b07      	ldr	r3, [pc, #28]	@ (80176a0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8017684:	6003      	str	r3, [r0, #0]
 8017686:	880b      	ldrh	r3, [r1, #0]
 8017688:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801768a:	23ff      	movs	r3, #255	@ 0xff
 801768c:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8017690:	f000 ff7d 	bl	801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017694:	4b03      	ldr	r3, [pc, #12]	@ (80176a4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8017696:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 801769a:	4620      	mov	r0, r4
 801769c:	6023      	str	r3, [r4, #0]
 801769e:	bd38      	pop	{r3, r4, r5, pc}
 80176a0:	0802e340 	.word	0x0802e340
 80176a4:	0802e0e8 	.word	0x0802e0e8

080176a8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 80176a8:	4603      	mov	r3, r0
 80176aa:	3026      	adds	r0, #38	@ 0x26
 80176ac:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80176b0:	b90b      	cbnz	r3, 80176b6 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 80176b2:	f005 b965 	b.w	801c980 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80176b6:	f005 b973 	b.w	801c9a0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080176bc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80176bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176c0:	4604      	mov	r4, r0
 80176c2:	b0b3      	sub	sp, #204	@ 0xcc
 80176c4:	469b      	mov	fp, r3
 80176c6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80176ca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80176ce:	2500      	movs	r5, #0
 80176d0:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 80176d4:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 80176d8:	ab11      	add	r3, sp, #68	@ 0x44
 80176da:	9206      	str	r2, [sp, #24]
 80176dc:	4618      	mov	r0, r3
 80176de:	9511      	str	r5, [sp, #68]	@ 0x44
 80176e0:	9307      	str	r3, [sp, #28]
 80176e2:	ad13      	add	r5, sp, #76	@ 0x4c
 80176e4:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 80176e8:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 80176ec:	f7fc fee6 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 80176f0:	9b07      	ldr	r3, [sp, #28]
 80176f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80176f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80176fa:	6821      	ldr	r1, [r4, #0]
 80176fc:	4620      	mov	r0, r4
 80176fe:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8017700:	4629      	mov	r1, r5
 8017702:	47b0      	blx	r6
 8017704:	4621      	mov	r1, r4
 8017706:	a815      	add	r0, sp, #84	@ 0x54
 8017708:	1d26      	adds	r6, r4, #4
 801770a:	f004 fd71 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801770e:	a815      	add	r0, sp, #84	@ 0x54
 8017710:	f003 fa8a 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017714:	9b07      	ldr	r3, [sp, #28]
 8017716:	4631      	mov	r1, r6
 8017718:	4618      	mov	r0, r3
 801771a:	f003 fac9 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801771e:	4628      	mov	r0, r5
 8017720:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8017724:	f003 fa80 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017728:	4628      	mov	r0, r5
 801772a:	f006 feb1 	bl	801e490 <_ZNK8touchgfx6Bitmap7getDataEv>
 801772e:	9007      	str	r0, [sp, #28]
 8017730:	2800      	cmp	r0, #0
 8017732:	f000 80ce 	beq.w	80178d2 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 8017736:	f8db 200c 	ldr.w	r2, [fp, #12]
 801773a:	a809      	add	r0, sp, #36	@ 0x24
 801773c:	f8db 1000 	ldr.w	r1, [fp]
 8017740:	920c      	str	r2, [sp, #48]	@ 0x30
 8017742:	f8da 2000 	ldr.w	r2, [sl]
 8017746:	9109      	str	r1, [sp, #36]	@ 0x24
 8017748:	920d      	str	r2, [sp, #52]	@ 0x34
 801774a:	f8da 2004 	ldr.w	r2, [sl, #4]
 801774e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8017752:	920e      	str	r2, [sp, #56]	@ 0x38
 8017754:	f8da 2008 	ldr.w	r2, [sl, #8]
 8017758:	910a      	str	r1, [sp, #40]	@ 0x28
 801775a:	920f      	str	r2, [sp, #60]	@ 0x3c
 801775c:	f8db 1008 	ldr.w	r1, [fp, #8]
 8017760:	f8da 200c 	ldr.w	r2, [sl, #12]
 8017764:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017766:	a90d      	add	r1, sp, #52	@ 0x34
 8017768:	9210      	str	r2, [sp, #64]	@ 0x40
 801776a:	4632      	mov	r2, r6
 801776c:	f003 fa84 	bl	801ac78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017770:	4632      	mov	r2, r6
 8017772:	a90e      	add	r1, sp, #56	@ 0x38
 8017774:	a80a      	add	r0, sp, #40	@ 0x28
 8017776:	f003 fa7f 	bl	801ac78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801777a:	4632      	mov	r2, r6
 801777c:	a90f      	add	r1, sp, #60	@ 0x3c
 801777e:	a80b      	add	r0, sp, #44	@ 0x2c
 8017780:	f003 fa7a 	bl	801ac78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017784:	4632      	mov	r2, r6
 8017786:	a910      	add	r1, sp, #64	@ 0x40
 8017788:	a80c      	add	r0, sp, #48	@ 0x30
 801778a:	f003 fa75 	bl	801ac78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801778e:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8017792:	ed97 3a00 	vldr	s6, [r7]
 8017796:	eef0 6a67 	vmov.f32	s13, s15
 801779a:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801779e:	edd7 4a01 	vldr	s9, [r7, #4]
 80177a2:	eeb0 7a67 	vmov.f32	s14, s15
 80177a6:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 80177aa:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80177ae:	ed99 2a00 	vldr	s4, [r9]
 80177b2:	eeb0 6a67 	vmov.f32	s12, s15
 80177b6:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 80177ba:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80177be:	edd8 2a00 	vldr	s5, [r8]
 80177c2:	edd9 3a01 	vldr	s7, [r9, #4]
 80177c6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80177ca:	ed98 4a01 	vldr	s8, [r8, #4]
 80177ce:	ed99 5a02 	vldr	s10, [r9, #8]
 80177d2:	edd8 5a02 	vldr	s11, [r8, #8]
 80177d6:	ee16 6a10 	vmov	r6, s12
 80177da:	eeb0 6a67 	vmov.f32	s12, s15
 80177de:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80177e2:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80177e6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80177ea:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80177ee:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 80177f2:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 80177f6:	ee16 0a10 	vmov	r0, s12
 80177fa:	eeb0 6a67 	vmov.f32	s12, s15
 80177fe:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8017802:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 8017806:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801780a:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 801780e:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8017812:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 8017816:	ee16 1a10 	vmov	r1, s12
 801781a:	eeb0 6a67 	vmov.f32	s12, s15
 801781e:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8017822:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 8017826:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801782a:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 801782e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8017832:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8017836:	68ff      	ldr	r7, [r7, #12]
 8017838:	ee16 2a10 	vmov	r2, s12
 801783c:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8017840:	9624      	str	r6, [sp, #144]	@ 0x90
 8017842:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017846:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 801784a:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 801784e:	4628      	mov	r0, r5
 8017850:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 8017854:	9b06      	ldr	r3, [sp, #24]
 8017856:	922d      	str	r2, [sp, #180]	@ 0xb4
 8017858:	4a1f      	ldr	r2, [pc, #124]	@ (80178d8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 801785a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801785c:	8812      	ldrh	r2, [r2, #0]
 801785e:	9b07      	ldr	r3, [sp, #28]
 8017860:	9218      	str	r2, [sp, #96]	@ 0x60
 8017862:	9319      	str	r3, [sp, #100]	@ 0x64
 8017864:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 8017868:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 801786c:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8017870:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8017874:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8017878:	9731      	str	r7, [sp, #196]	@ 0xc4
 801787a:	f006 fe39 	bl	801e4f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801787e:	901a      	str	r0, [sp, #104]	@ 0x68
 8017880:	4628      	mov	r0, r5
 8017882:	f006 fd13 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017886:	901b      	str	r0, [sp, #108]	@ 0x6c
 8017888:	4628      	mov	r0, r5
 801788a:	f006 fd43 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801788e:	901c      	str	r0, [sp, #112]	@ 0x70
 8017890:	4628      	mov	r0, r5
 8017892:	f006 fd0b 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017896:	4b11      	ldr	r3, [pc, #68]	@ (80178dc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8017898:	901d      	str	r0, [sp, #116]	@ 0x74
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80178a0:	b10a      	cbz	r2, 80178a6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 80178a2:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80178a4:	b905      	cbnz	r5, 80178a8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 80178a6:	689d      	ldr	r5, [r3, #8]
 80178a8:	682b      	ldr	r3, [r5, #0]
 80178aa:	4620      	mov	r0, r4
 80178ac:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80178ae:	f7ff fefb 	bl	80176a8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 80178b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80178b6:	aa1e      	add	r2, sp, #120	@ 0x78
 80178b8:	a917      	add	r1, sp, #92	@ 0x5c
 80178ba:	9304      	str	r3, [sp, #16]
 80178bc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80178c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80178c4:	ab13      	add	r3, sp, #76	@ 0x4c
 80178c6:	4628      	mov	r0, r5
 80178c8:	9301      	str	r3, [sp, #4]
 80178ca:	ab15      	add	r3, sp, #84	@ 0x54
 80178cc:	9300      	str	r3, [sp, #0]
 80178ce:	ab19      	add	r3, sp, #100	@ 0x64
 80178d0:	47b0      	blx	r6
 80178d2:	b033      	add	sp, #204	@ 0xcc
 80178d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178d8:	240621b2 	.word	0x240621b2
 80178dc:	240621b8 	.word	0x240621b8

080178e0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 80178e0:	b570      	push	{r4, r5, r6, lr}
 80178e2:	ed2d 8b04 	vpush	{d8-d9}
 80178e6:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80178ea:	b098      	sub	sp, #96	@ 0x60
 80178ec:	4604      	mov	r4, r0
 80178ee:	460e      	mov	r6, r1
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d065      	beq.n	80179c0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 80178f4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80178f8:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80178fc:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 80179dc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8017900:	ee09 3a10 	vmov	s18, r3
 8017904:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017908:	4628      	mov	r0, r5
 801790a:	ee08 3a90 	vmov	s17, r3
 801790e:	4b34      	ldr	r3, [pc, #208]	@ (80179e0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8017910:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8017914:	930c      	str	r3, [sp, #48]	@ 0x30
 8017916:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801791a:	930d      	str	r3, [sp, #52]	@ 0x34
 801791c:	930e      	str	r3, [sp, #56]	@ 0x38
 801791e:	ee39 9a08 	vadd.f32	s18, s18, s16
 8017922:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017924:	f006 fcc2 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017928:	ee07 0a90 	vmov	s15, r0
 801792c:	4628      	mov	r0, r5
 801792e:	ee78 8a88 	vadd.f32	s17, s17, s16
 8017932:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8017936:	f006 fced 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801793a:	4b2a      	ldr	r3, [pc, #168]	@ (80179e4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 801793c:	ee07 0a90 	vmov	s15, r0
 8017940:	781b      	ldrb	r3, [r3, #0]
 8017942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017946:	eef0 7a48 	vmov.f32	s15, s16
 801794a:	2b01      	cmp	r3, #1
 801794c:	d13c      	bne.n	80179c8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 801794e:	eef0 6a69 	vmov.f32	s13, s19
 8017952:	ee19 3a90 	vmov	r3, s19
 8017956:	eeb0 6a47 	vmov.f32	s12, s14
 801795a:	eef0 5a47 	vmov.f32	s11, s14
 801795e:	eef0 9a48 	vmov.f32	s19, s16
 8017962:	eeb0 7a48 	vmov.f32	s14, s16
 8017966:	9314      	str	r3, [sp, #80]	@ 0x50
 8017968:	ab14      	add	r3, sp, #80	@ 0x50
 801796a:	2200      	movs	r2, #0
 801796c:	4631      	mov	r1, r6
 801796e:	9303      	str	r3, [sp, #12]
 8017970:	ab10      	add	r3, sp, #64	@ 0x40
 8017972:	4620      	mov	r0, r4
 8017974:	edcd 7a04 	vstr	s15, [sp, #16]
 8017978:	9302      	str	r3, [sp, #8]
 801797a:	ab0c      	add	r3, sp, #48	@ 0x30
 801797c:	ed8d 9a05 	vstr	s18, [sp, #20]
 8017980:	9301      	str	r3, [sp, #4]
 8017982:	ab08      	add	r3, sp, #32
 8017984:	ed8d 9a06 	vstr	s18, [sp, #24]
 8017988:	9300      	str	r3, [sp, #0]
 801798a:	ab04      	add	r3, sp, #16
 801798c:	edcd 7a07 	vstr	s15, [sp, #28]
 8017990:	edcd 7a08 	vstr	s15, [sp, #32]
 8017994:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 8017998:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 801799c:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 80179a0:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 80179a4:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 80179a8:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 80179ac:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 80179b0:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 80179b4:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 80179b8:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 80179bc:	f7ff fe7e 	bl	80176bc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 80179c0:	b018      	add	sp, #96	@ 0x60
 80179c2:	ecbd 8b04 	vpop	{d8-d9}
 80179c6:	bd70      	pop	{r4, r5, r6, pc}
 80179c8:	eef0 6a47 	vmov.f32	s13, s14
 80179cc:	ee18 3a10 	vmov	r3, s16
 80179d0:	eef0 5a69 	vmov.f32	s11, s19
 80179d4:	eeb0 6a48 	vmov.f32	s12, s16
 80179d8:	e7c5      	b.n	8017966 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 80179da:	bf00      	nop
 80179dc:	00000000 	.word	0x00000000
 80179e0:	42c80000 	.word	0x42c80000
 80179e4:	240621b0 	.word	0x240621b0

080179e8 <_ZN8touchgfx8TextArea8setWidthEs>:
 80179e8:	b530      	push	{r4, r5, lr}
 80179ea:	b085      	sub	sp, #20
 80179ec:	6803      	ldr	r3, [r0, #0]
 80179ee:	4604      	mov	r4, r0
 80179f0:	8101      	strh	r1, [r0, #8]
 80179f2:	466d      	mov	r5, sp
 80179f4:	4601      	mov	r1, r0
 80179f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80179fa:	343c      	adds	r4, #60	@ 0x3c
 80179fc:	4628      	mov	r0, r5
 80179fe:	4798      	blx	r3
 8017a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017a08:	b005      	add	sp, #20
 8017a0a:	bd30      	pop	{r4, r5, pc}

08017a0c <_ZN8touchgfx8TextArea9setHeightEs>:
 8017a0c:	b530      	push	{r4, r5, lr}
 8017a0e:	b085      	sub	sp, #20
 8017a10:	6803      	ldr	r3, [r0, #0]
 8017a12:	4604      	mov	r4, r0
 8017a14:	8141      	strh	r1, [r0, #10]
 8017a16:	466d      	mov	r5, sp
 8017a18:	4601      	mov	r1, r0
 8017a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017a1e:	343c      	adds	r4, #60	@ 0x3c
 8017a20:	4628      	mov	r0, r5
 8017a22:	4798      	blx	r3
 8017a24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017a28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017a2c:	b005      	add	sp, #20
 8017a2e:	bd30      	pop	{r4, r5, pc}

08017a30 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017a30:	2200      	movs	r2, #0
 8017a32:	8002      	strh	r2, [r0, #0]
 8017a34:	8042      	strh	r2, [r0, #2]
 8017a36:	8082      	strh	r2, [r0, #4]
 8017a38:	80c2      	strh	r2, [r0, #6]
 8017a3a:	4770      	bx	lr

08017a3c <_ZN8touchgfx8TextArea8setAlphaEh>:
 8017a3c:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
 8017a40:	4770      	bx	lr
	...

08017a44 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8017a44:	b570      	push	{r4, r5, r6, lr}
 8017a46:	6803      	ldr	r3, [r0, #0]
 8017a48:	4604      	mov	r4, r0
 8017a4a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017a4c:	460d      	mov	r5, r1
 8017a4e:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8017a50:	4b08      	ldr	r3, [pc, #32]	@ (8017a74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017a58:	4b07      	ldr	r3, [pc, #28]	@ (8017a78 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017a60:	6803      	ldr	r3, [r0, #0]
 8017a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a64:	4798      	blx	r3
 8017a66:	1a29      	subs	r1, r5, r0
 8017a68:	4633      	mov	r3, r6
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	b209      	sxth	r1, r1
 8017a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a72:	4718      	bx	r3
 8017a74:	24062210 	.word	0x24062210
 8017a78:	24062218 	.word	0x24062218

08017a7c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017a7c:	b570      	push	{r4, r5, r6, lr}
 8017a7e:	6803      	ldr	r3, [r0, #0]
 8017a80:	4604      	mov	r4, r0
 8017a82:	4615      	mov	r5, r2
 8017a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a86:	4798      	blx	r3
 8017a88:	6823      	ldr	r3, [r4, #0]
 8017a8a:	4629      	mov	r1, r5
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a94:	4718      	bx	r3

08017a96 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8017a96:	2000      	movs	r0, #0
 8017a98:	4770      	bx	lr

08017a9a <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8017a9a:	2000      	movs	r0, #0
 8017a9c:	4770      	bx	lr
	...

08017aa0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017aa0:	4b07      	ldr	r3, [pc, #28]	@ (8017ac0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8017aa2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017aa4:	881b      	ldrh	r3, [r3, #0]
 8017aa6:	4293      	cmp	r3, r2
 8017aa8:	bf81      	itttt	hi
 8017aaa:	4b06      	ldrhi	r3, [pc, #24]	@ (8017ac4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017aac:	681b      	ldrhi	r3, [r3, #0]
 8017aae:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8017ab2:	7858      	ldrbhi	r0, [r3, #1]
 8017ab4:	bf8c      	ite	hi
 8017ab6:	f000 0003 	andhi.w	r0, r0, #3
 8017aba:	2000      	movls	r0, #0
 8017abc:	4770      	bx	lr
 8017abe:	bf00      	nop
 8017ac0:	24062214 	.word	0x24062214
 8017ac4:	24062210 	.word	0x24062210

08017ac8 <_ZN8touchgfx8TextAreaD1Ev>:
 8017ac8:	4770      	bx	lr
	...

08017acc <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8017acc:	4b11      	ldr	r3, [pc, #68]	@ (8017b14 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8017ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ad2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017ad4:	4604      	mov	r4, r0
 8017ad6:	881b      	ldrh	r3, [r3, #0]
 8017ad8:	428b      	cmp	r3, r1
 8017ada:	d918      	bls.n	8017b0e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017adc:	6803      	ldr	r3, [r0, #0]
 8017ade:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8017ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8017b18 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017ae2:	6818      	ldr	r0, [r3, #0]
 8017ae4:	f7f1 fb24 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8017ae8:	6823      	ldr	r3, [r4, #0]
 8017aea:	4606      	mov	r6, r0
 8017aec:	4620      	mov	r0, r4
 8017aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017af0:	4798      	blx	r3
 8017af2:	6823      	ldr	r3, [r4, #0]
 8017af4:	4607      	mov	r7, r0
 8017af6:	4620      	mov	r0, r4
 8017af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017afc:	4798      	blx	r3
 8017afe:	463a      	mov	r2, r7
 8017b00:	4603      	mov	r3, r0
 8017b02:	4631      	mov	r1, r6
 8017b04:	4620      	mov	r0, r4
 8017b06:	46ac      	mov	ip, r5
 8017b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b0c:	4760      	bx	ip
 8017b0e:	2000      	movs	r0, #0
 8017b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b14:	24062214 	.word	0x24062214
 8017b18:	2406221c 	.word	0x2406221c

08017b1c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017b1c:	4b18      	ldr	r3, [pc, #96]	@ (8017b80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017b1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017b22:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017b24:	4604      	mov	r4, r0
 8017b26:	881b      	ldrh	r3, [r3, #0]
 8017b28:	428b      	cmp	r3, r1
 8017b2a:	d926      	bls.n	8017b7a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017b2c:	4b15      	ldr	r3, [pc, #84]	@ (8017b84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017b34:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017b38:	4b13      	ldr	r3, [pc, #76]	@ (8017b88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017b3a:	7855      	ldrb	r5, [r2, #1]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8017b42:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017b46:	6833      	ldr	r3, [r6, #0]
 8017b48:	69df      	ldr	r7, [r3, #28]
 8017b4a:	4b10      	ldr	r3, [pc, #64]	@ (8017b8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017b4c:	6818      	ldr	r0, [r3, #0]
 8017b4e:	f7f1 faef 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8017b52:	6823      	ldr	r3, [r4, #0]
 8017b54:	4680      	mov	r8, r0
 8017b56:	4620      	mov	r0, r4
 8017b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017b5a:	4798      	blx	r3
 8017b5c:	6823      	ldr	r3, [r4, #0]
 8017b5e:	4681      	mov	r9, r0
 8017b60:	4620      	mov	r0, r4
 8017b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b66:	4798      	blx	r3
 8017b68:	464b      	mov	r3, r9
 8017b6a:	9000      	str	r0, [sp, #0]
 8017b6c:	4642      	mov	r2, r8
 8017b6e:	4629      	mov	r1, r5
 8017b70:	4630      	mov	r0, r6
 8017b72:	47b8      	blx	r7
 8017b74:	b003      	add	sp, #12
 8017b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	e7fa      	b.n	8017b74 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017b7e:	bf00      	nop
 8017b80:	24062214 	.word	0x24062214
 8017b84:	24062210 	.word	0x24062210
 8017b88:	24062218 	.word	0x24062218
 8017b8c:	2406221c 	.word	0x2406221c

08017b90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017b90:	b40e      	push	{r1, r2, r3}
 8017b92:	4b30      	ldr	r3, [pc, #192]	@ (8017c54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b98:	881a      	ldrh	r2, [r3, #0]
 8017b9a:	b09d      	sub	sp, #116	@ 0x74
 8017b9c:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d954      	bls.n	8017c4e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017ba4:	aa26      	add	r2, sp, #152	@ 0x98
 8017ba6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8017c58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017baa:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8017c5c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017bae:	9202      	str	r2, [sp, #8]
 8017bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8017bb4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8017bbc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017bc0:	682b      	ldr	r3, [r5, #0]
 8017bc2:	4628      	mov	r0, r5
 8017bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bc6:	4798      	blx	r3
 8017bc8:	4606      	mov	r6, r0
 8017bca:	b207      	sxth	r7, r0
 8017bcc:	a803      	add	r0, sp, #12
 8017bce:	f005 fa9f 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 8017bd2:	682b      	ldr	r3, [r5, #0]
 8017bd4:	4628      	mov	r0, r5
 8017bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017bd8:	4798      	blx	r3
 8017bda:	682b      	ldr	r3, [r5, #0]
 8017bdc:	4682      	mov	sl, r0
 8017bde:	4628      	mov	r0, r5
 8017be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017be2:	4798      	blx	r3
 8017be4:	4653      	mov	r3, sl
 8017be6:	9000      	str	r0, [sp, #0]
 8017be8:	a803      	add	r0, sp, #12
 8017bea:	9a02      	ldr	r2, [sp, #8]
 8017bec:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8017bee:	f005 faea 	bl	801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017bf2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017bf4:	f8d9 3000 	ldr.w	r3, [r9]
 8017bf8:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8017bfc:	8925      	ldrh	r5, [r4, #8]
 8017bfe:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8017c02:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017c06:	eba5 050c 	sub.w	r5, r5, ip
 8017c0a:	784a      	ldrb	r2, [r1, #1]
 8017c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8017c10:	b22d      	sxth	r5, r5
 8017c12:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8017c16:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017c1a:	9500      	str	r5, [sp, #0]
 8017c1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017c20:	a803      	add	r0, sp, #12
 8017c22:	f002 fd07 	bl	801a634 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017c26:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8017c2a:	b203      	sxth	r3, r0
 8017c2c:	18b9      	adds	r1, r7, r2
 8017c2e:	2900      	cmp	r1, #0
 8017c30:	dd0b      	ble.n	8017c4a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8017c32:	3b01      	subs	r3, #1
 8017c34:	fb13 f302 	smulbb	r3, r3, r2
 8017c38:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017c3c:	b21f      	sxth	r7, r3
 8017c3e:	4638      	mov	r0, r7
 8017c40:	b01d      	add	sp, #116	@ 0x74
 8017c42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c46:	b003      	add	sp, #12
 8017c48:	4770      	bx	lr
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	dcf7      	bgt.n	8017c3e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017c4e:	2700      	movs	r7, #0
 8017c50:	e7f5      	b.n	8017c3e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017c52:	bf00      	nop
 8017c54:	24062214 	.word	0x24062214
 8017c58:	24062210 	.word	0x24062210
 8017c5c:	24062218 	.word	0x24062218

08017c60 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017c60:	4bbd      	ldr	r3, [pc, #756]	@ (8017f58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8017c62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c66:	460c      	mov	r4, r1
 8017c68:	881b      	ldrh	r3, [r3, #0]
 8017c6a:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8017c6c:	b0a9      	sub	sp, #164	@ 0xa4
 8017c6e:	4680      	mov	r8, r0
 8017c70:	428b      	cmp	r3, r1
 8017c72:	d809      	bhi.n	8017c88 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8017c74:	2300      	movs	r3, #0
 8017c76:	f04f 32ff 	mov.w	r2, #4294967295
 8017c7a:	6083      	str	r3, [r0, #8]
 8017c7c:	e9c0 3200 	strd	r3, r2, [r0]
 8017c80:	4640      	mov	r0, r8
 8017c82:	b029      	add	sp, #164	@ 0xa4
 8017c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c88:	4eb4      	ldr	r6, [pc, #720]	@ (8017f5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8017c8a:	6833      	ldr	r3, [r6, #0]
 8017c8c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017c90:	4bb3      	ldr	r3, [pc, #716]	@ (8017f60 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017c98:	4bb2      	ldr	r3, [pc, #712]	@ (8017f64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8017c9a:	6818      	ldr	r0, [r3, #0]
 8017c9c:	f7f1 fa48 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8017ca0:	682b      	ldr	r3, [r5, #0]
 8017ca2:	4681      	mov	r9, r0
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ca8:	4798      	blx	r3
 8017caa:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8017cac:	b203      	sxth	r3, r0
 8017cae:	4682      	mov	sl, r0
 8017cb0:	4407      	add	r7, r0
 8017cb2:	a80f      	add	r0, sp, #60	@ 0x3c
 8017cb4:	9304      	str	r3, [sp, #16]
 8017cb6:	b2bb      	uxth	r3, r7
 8017cb8:	9303      	str	r3, [sp, #12]
 8017cba:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	f040 80a5 	bne.w	8017e0e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8017cc4:	f005 fa24 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 8017cc8:	682b      	ldr	r3, [r5, #0]
 8017cca:	4628      	mov	r0, r5
 8017ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017cce:	4798      	blx	r3
 8017cd0:	682b      	ldr	r3, [r5, #0]
 8017cd2:	4606      	mov	r6, r0
 8017cd4:	4628      	mov	r0, r5
 8017cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017cd8:	4798      	blx	r3
 8017cda:	6823      	ldr	r3, [r4, #0]
 8017cdc:	4607      	mov	r7, r0
 8017cde:	4620      	mov	r0, r4
 8017ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017ce2:	4798      	blx	r3
 8017ce4:	6823      	ldr	r3, [r4, #0]
 8017ce6:	4683      	mov	fp, r0
 8017ce8:	4620      	mov	r0, r4
 8017cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017cee:	4798      	blx	r3
 8017cf0:	463b      	mov	r3, r7
 8017cf2:	4649      	mov	r1, r9
 8017cf4:	4632      	mov	r2, r6
 8017cf6:	2600      	movs	r6, #0
 8017cf8:	e9cd b000 	strd	fp, r0, [sp]
 8017cfc:	a80f      	add	r0, sp, #60	@ 0x3c
 8017cfe:	4637      	mov	r7, r6
 8017d00:	f005 fa76 	bl	801d1f0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017d04:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017d08:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8017f5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8017d0c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017d10:	bf0c      	ite	eq
 8017d12:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8017d16:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8017d1a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017d1c:	4629      	mov	r1, r5
 8017d1e:	f8db 3000 	ldr.w	r3, [fp]
 8017d22:	a80f      	add	r0, sp, #60	@ 0x3c
 8017d24:	3701      	adds	r7, #1
 8017d26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017d2a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017d2e:	b2bf      	uxth	r7, r7
 8017d30:	785b      	ldrb	r3, [r3, #1]
 8017d32:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017d36:	f002 f984 	bl	801a042 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017d3a:	9b03      	ldr	r3, [sp, #12]
 8017d3c:	4286      	cmp	r6, r0
 8017d3e:	eba9 0903 	sub.w	r9, r9, r3
 8017d42:	bfb8      	it	lt
 8017d44:	4606      	movlt	r6, r0
 8017d46:	a80f      	add	r0, sp, #60	@ 0x3c
 8017d48:	fa0f f989 	sxth.w	r9, r9
 8017d4c:	b236      	sxth	r6, r6
 8017d4e:	f005 fa06 	bl	801d15e <_ZN8touchgfx12TextProvider11endOfStringEv>
 8017d52:	b918      	cbnz	r0, 8017d5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017d54:	7a2b      	ldrb	r3, [r5, #8]
 8017d56:	444b      	add	r3, r9
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	dcde      	bgt.n	8017d1a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8017d5c:	9b03      	ldr	r3, [sp, #12]
 8017d5e:	4620      	mov	r0, r4
 8017d60:	9a04      	ldr	r2, [sp, #16]
 8017d62:	fb13 f707 	smulbb	r7, r3, r7
 8017d66:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017d68:	f895 9009 	ldrb.w	r9, [r5, #9]
 8017d6c:	1aff      	subs	r7, r7, r3
 8017d6e:	b2bf      	uxth	r7, r7
 8017d70:	b23b      	sxth	r3, r7
 8017d72:	429a      	cmp	r2, r3
 8017d74:	bfa8      	it	ge
 8017d76:	4657      	movge	r7, sl
 8017d78:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017d7c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017d80:	6823      	ldr	r3, [r4, #0]
 8017d82:	444f      	add	r7, r9
 8017d84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d86:	bf08      	it	eq
 8017d88:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8017d8c:	fa1f f987 	uxth.w	r9, r7
 8017d90:	bf18      	it	ne
 8017d92:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8017d96:	4798      	blx	r3
 8017d98:	2801      	cmp	r0, #1
 8017d9a:	fa0f f789 	sxth.w	r7, r9
 8017d9e:	b2b3      	uxth	r3, r6
 8017da0:	f000 80e2 	beq.w	8017f68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8017da4:	2802      	cmp	r0, #2
 8017da6:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8017daa:	f000 80e3 	beq.w	8017f74 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8017dae:	7aea      	ldrb	r2, [r5, #11]
 8017db0:	b236      	sxth	r6, r6
 8017db2:	7b2d      	ldrb	r5, [r5, #12]
 8017db4:	1ab6      	subs	r6, r6, r2
 8017db6:	442a      	add	r2, r5
 8017db8:	fa1f fa86 	uxth.w	sl, r6
 8017dbc:	4413      	add	r3, r2
 8017dbe:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8017dc2:	fa0f fb8a 	sxth.w	fp, sl
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	2a02      	cmp	r2, #2
 8017dca:	b21e      	sxth	r6, r3
 8017dcc:	f000 80d6 	beq.w	8017f7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8017dd0:	2a03      	cmp	r2, #3
 8017dd2:	f000 80de 	beq.w	8017f92 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8017dd6:	2a01      	cmp	r2, #1
 8017dd8:	f040 80e6 	bne.w	8017fa8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8017ddc:	8925      	ldrh	r5, [r4, #8]
 8017dde:	4633      	mov	r3, r6
 8017de0:	463e      	mov	r6, r7
 8017de2:	eba5 0909 	sub.w	r9, r5, r9
 8017de6:	461f      	mov	r7, r3
 8017de8:	465d      	mov	r5, fp
 8017dea:	fa0f fb89 	sxth.w	fp, r9
 8017dee:	4b5d      	ldr	r3, [pc, #372]	@ (8017f64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8017df0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8017df2:	6818      	ldr	r0, [r3, #0]
 8017df4:	f7f1 f99c 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8017df8:	f8a8 b000 	strh.w	fp, [r8]
 8017dfc:	f8a8 5002 	strh.w	r5, [r8, #2]
 8017e00:	f8a8 6004 	strh.w	r6, [r8, #4]
 8017e04:	f8a8 7006 	strh.w	r7, [r8, #6]
 8017e08:	f8c8 0008 	str.w	r0, [r8, #8]
 8017e0c:	e738      	b.n	8017c80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8017e0e:	f005 f97f 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 8017e12:	682b      	ldr	r3, [r5, #0]
 8017e14:	4628      	mov	r0, r5
 8017e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e18:	4798      	blx	r3
 8017e1a:	682b      	ldr	r3, [r5, #0]
 8017e1c:	4607      	mov	r7, r0
 8017e1e:	4628      	mov	r0, r5
 8017e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e22:	4798      	blx	r3
 8017e24:	6823      	ldr	r3, [r4, #0]
 8017e26:	4683      	mov	fp, r0
 8017e28:	4620      	mov	r0, r4
 8017e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e2c:	4798      	blx	r3
 8017e2e:	6822      	ldr	r2, [r4, #0]
 8017e30:	9005      	str	r0, [sp, #20]
 8017e32:	4620      	mov	r0, r4
 8017e34:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8017e38:	4790      	blx	r2
 8017e3a:	9b05      	ldr	r3, [sp, #20]
 8017e3c:	463a      	mov	r2, r7
 8017e3e:	4649      	mov	r1, r9
 8017e40:	9001      	str	r0, [sp, #4]
 8017e42:	a80f      	add	r0, sp, #60	@ 0x3c
 8017e44:	9300      	str	r3, [sp, #0]
 8017e46:	465b      	mov	r3, fp
 8017e48:	f005 f9d2 	bl	801d1f0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017e4c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017e50:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8017e54:	af0f      	add	r7, sp, #60	@ 0x3c
 8017e56:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017e5a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017e5e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8017e60:	bf0a      	itet	eq
 8017e62:	464a      	moveq	r2, r9
 8017e64:	461a      	movne	r2, r3
 8017e66:	4699      	moveq	r9, r3
 8017e68:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8017e6c:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8017e70:	1ad2      	subs	r2, r2, r3
 8017e72:	6833      	ldr	r3, [r6, #0]
 8017e74:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8017e78:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017e7c:	7859      	ldrb	r1, [r3, #1]
 8017e7e:	2300      	movs	r3, #0
 8017e80:	9707      	str	r7, [sp, #28]
 8017e82:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8017e86:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017e8a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8017e8e:	f88d 1020 	strb.w	r1, [sp, #32]
 8017e92:	9509      	str	r5, [sp, #36]	@ 0x24
 8017e94:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017e98:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8017e9c:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8017ea0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017ea4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8017ea8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017eac:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8017eb0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017eb4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8017eb8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017ebc:	b350      	cbz	r0, 8017f14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017ebe:	682b      	ldr	r3, [r5, #0]
 8017ec0:	4628      	mov	r0, r5
 8017ec2:	695b      	ldr	r3, [r3, #20]
 8017ec4:	4798      	blx	r3
 8017ec6:	4607      	mov	r7, r0
 8017ec8:	b320      	cbz	r0, 8017f14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ecc:	4639      	mov	r1, r7
 8017ece:	6803      	ldr	r3, [r0, #0]
 8017ed0:	68db      	ldr	r3, [r3, #12]
 8017ed2:	4798      	blx	r3
 8017ed4:	4606      	mov	r6, r0
 8017ed6:	b1e8      	cbz	r0, 8017f14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017ed8:	7b43      	ldrb	r3, [r0, #13]
 8017eda:	7a82      	ldrb	r2, [r0, #10]
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017ee2:	4313      	orrs	r3, r2
 8017ee4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8017ee8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8017eec:	2b06      	cmp	r3, #6
 8017eee:	d111      	bne.n	8017f14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017ef0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ef2:	4632      	mov	r2, r6
 8017ef4:	4639      	mov	r1, r7
 8017ef6:	6803      	ldr	r3, [r0, #0]
 8017ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017efa:	4798      	blx	r3
 8017efc:	7b73      	ldrb	r3, [r6, #13]
 8017efe:	005b      	lsls	r3, r3, #1
 8017f00:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017f04:	7ab3      	ldrb	r3, [r6, #10]
 8017f06:	4313      	orrs	r3, r2
 8017f08:	4418      	add	r0, r3
 8017f0a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8017f0e:	4418      	add	r0, r3
 8017f10:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8017f14:	2600      	movs	r6, #0
 8017f16:	4637      	mov	r7, r6
 8017f18:	a806      	add	r0, sp, #24
 8017f1a:	3701      	adds	r7, #1
 8017f1c:	f002 fa87 	bl	801a42e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017f20:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8017f24:	9b03      	ldr	r3, [sp, #12]
 8017f26:	b2bf      	uxth	r7, r7
 8017f28:	4286      	cmp	r6, r0
 8017f2a:	eba9 0903 	sub.w	r9, r9, r3
 8017f2e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017f32:	bfb8      	it	lt
 8017f34:	4606      	movlt	r6, r0
 8017f36:	fa0f f989 	sxth.w	r9, r9
 8017f3a:	b236      	sxth	r6, r6
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	f43f af0d 	beq.w	8017d5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017f42:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	f47f af08 	bne.w	8017d5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017f4c:	7a2b      	ldrb	r3, [r5, #8]
 8017f4e:	444b      	add	r3, r9
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	dce1      	bgt.n	8017f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8017f54:	e702      	b.n	8017d5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017f56:	bf00      	nop
 8017f58:	24062214 	.word	0x24062214
 8017f5c:	24062210 	.word	0x24062210
 8017f60:	24062218 	.word	0x24062218
 8017f64:	2406221c 	.word	0x2406221c
 8017f68:	ebaa 0606 	sub.w	r6, sl, r6
 8017f6c:	2002      	movs	r0, #2
 8017f6e:	fb96 f6f0 	sdiv	r6, r6, r0
 8017f72:	e71c      	b.n	8017dae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017f74:	441e      	add	r6, r3
 8017f76:	ebaa 0606 	sub.w	r6, sl, r6
 8017f7a:	e718      	b.n	8017dae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017f7c:	8925      	ldrh	r5, [r4, #8]
 8017f7e:	1aed      	subs	r5, r5, r3
 8017f80:	eba5 050a 	sub.w	r5, r5, sl
 8017f84:	fa0f fb85 	sxth.w	fp, r5
 8017f88:	8965      	ldrh	r5, [r4, #10]
 8017f8a:	eba5 0509 	sub.w	r5, r5, r9
 8017f8e:	b22d      	sxth	r5, r5
 8017f90:	e72d      	b.n	8017dee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017f92:	8965      	ldrh	r5, [r4, #10]
 8017f94:	f04f 0b00 	mov.w	fp, #0
 8017f98:	1aed      	subs	r5, r5, r3
 8017f9a:	4633      	mov	r3, r6
 8017f9c:	463e      	mov	r6, r7
 8017f9e:	eba5 050a 	sub.w	r5, r5, sl
 8017fa2:	461f      	mov	r7, r3
 8017fa4:	b22d      	sxth	r5, r5
 8017fa6:	e722      	b.n	8017dee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017fa8:	2500      	movs	r5, #0
 8017faa:	e720      	b.n	8017dee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08017fac <_ZN8touchgfx8TextAreaD0Ev>:
 8017fac:	b510      	push	{r4, lr}
 8017fae:	4604      	mov	r4, r0
 8017fb0:	2148      	movs	r1, #72	@ 0x48
 8017fb2:	f010 ff95 	bl	8028ee0 <_ZdlPvj>
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	bd10      	pop	{r4, pc}
	...

08017fbc <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8017fbc:	b513      	push	{r0, r1, r4, lr}
 8017fbe:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8017fc2:	4604      	mov	r4, r0
 8017fc4:	b1fb      	cbz	r3, 8018006 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017fc6:	4b16      	ldr	r3, [pc, #88]	@ (8018020 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8017fc8:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017fca:	881b      	ldrh	r3, [r3, #0]
 8017fcc:	428b      	cmp	r3, r1
 8017fce:	d91a      	bls.n	8018006 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017fd0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	dd16      	ble.n	8018006 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017fd8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	dd12      	ble.n	8018006 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017fe0:	4b10      	ldr	r3, [pc, #64]	@ (8018024 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8017fe2:	6818      	ldr	r0, [r3, #0]
 8017fe4:	f7f1 f8a4 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8017fe8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8017fec:	6822      	ldr	r2, [r4, #0]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	db06      	blt.n	8018000 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8017ff2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	db02      	blt.n	8018000 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8017ffa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017ffc:	4298      	cmp	r0, r3
 8017ffe:	d004      	beq.n	801800a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8018000:	6953      	ldr	r3, [r2, #20]
 8018002:	4620      	mov	r0, r4
 8018004:	4798      	blx	r3
 8018006:	b002      	add	sp, #8
 8018008:	bd10      	pop	{r4, pc}
 801800a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 801800e:	466b      	mov	r3, sp
 8018010:	6912      	ldr	r2, [r2, #16]
 8018012:	c903      	ldmia	r1, {r0, r1}
 8018014:	e883 0003 	stmia.w	r3, {r0, r1}
 8018018:	4619      	mov	r1, r3
 801801a:	4620      	mov	r0, r4
 801801c:	4790      	blx	r2
 801801e:	e7f2      	b.n	8018006 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018020:	24062214 	.word	0x24062214
 8018024:	2406221c 	.word	0x2406221c

08018028 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018028:	4b45      	ldr	r3, [pc, #276]	@ (8018140 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801802a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801802e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8018030:	b08e      	sub	sp, #56	@ 0x38
 8018032:	881b      	ldrh	r3, [r3, #0]
 8018034:	4604      	mov	r4, r0
 8018036:	4293      	cmp	r3, r2
 8018038:	d97e      	bls.n	8018138 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801803a:	6808      	ldr	r0, [r1, #0]
 801803c:	ab05      	add	r3, sp, #20
 801803e:	6849      	ldr	r1, [r1, #4]
 8018040:	4d40      	ldr	r5, [pc, #256]	@ (8018144 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8018042:	c303      	stmia	r3!, {r0, r1}
 8018044:	4611      	mov	r1, r2
 8018046:	6828      	ldr	r0, [r5, #0]
 8018048:	f7f1 f872 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 801804c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8018050:	2b00      	cmp	r3, #0
 8018052:	db11      	blt.n	8018078 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018054:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8018058:	2b00      	cmp	r3, #0
 801805a:	db0d      	blt.n	8018078 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801805c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801805e:	4298      	cmp	r0, r3
 8018060:	d10a      	bne.n	8018078 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018062:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8018066:	ab09      	add	r3, sp, #36	@ 0x24
 8018068:	e892 0003 	ldmia.w	r2, {r0, r1}
 801806c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018070:	4619      	mov	r1, r3
 8018072:	a805      	add	r0, sp, #20
 8018074:	f7fc fa22 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8018078:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801807c:	2b00      	cmp	r3, #0
 801807e:	dd5b      	ble.n	8018138 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018080:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8018084:	2b00      	cmp	r3, #0
 8018086:	dd57      	ble.n	8018138 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018088:	4f2f      	ldr	r7, [pc, #188]	@ (8018148 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801808a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801808c:	683b      	ldr	r3, [r7, #0]
 801808e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018092:	4b2e      	ldr	r3, [pc, #184]	@ (801814c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801809a:	2e00      	cmp	r6, #0
 801809c:	d04c      	beq.n	8018138 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801809e:	6823      	ldr	r3, [r4, #0]
 80180a0:	4620      	mov	r0, r4
 80180a2:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 80180a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80180a8:	4798      	blx	r3
 80180aa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 80180b2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80180b6:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 80180ba:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80180be:	785b      	ldrb	r3, [r3, #1]
 80180c0:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 80180c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80180c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80180ca:	9609      	str	r6, [sp, #36]	@ 0x24
 80180cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80180d0:	4b1f      	ldr	r3, [pc, #124]	@ (8018150 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80180d2:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80180dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80180de:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80180e2:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80180e6:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80180ea:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80180ee:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80180f2:	b10a      	cbz	r2, 80180f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80180f4:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80180f6:	b906      	cbnz	r6, 80180fa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80180f8:	689e      	ldr	r6, [r3, #8]
 80180fa:	af07      	add	r7, sp, #28
 80180fc:	4621      	mov	r1, r4
 80180fe:	4638      	mov	r0, r7
 8018100:	f004 f876 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018104:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8018106:	6828      	ldr	r0, [r5, #0]
 8018108:	f7f1 f812 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 801810c:	6823      	ldr	r3, [r4, #0]
 801810e:	4605      	mov	r5, r0
 8018110:	4620      	mov	r0, r4
 8018112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018114:	4798      	blx	r3
 8018116:	6823      	ldr	r3, [r4, #0]
 8018118:	4680      	mov	r8, r0
 801811a:	4620      	mov	r0, r4
 801811c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018120:	4798      	blx	r3
 8018122:	ab09      	add	r3, sp, #36	@ 0x24
 8018124:	9501      	str	r5, [sp, #4]
 8018126:	9300      	str	r3, [sp, #0]
 8018128:	ab05      	add	r3, sp, #20
 801812a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801812e:	4630      	mov	r0, r6
 8018130:	e897 0006 	ldmia.w	r7, {r1, r2}
 8018134:	f7f0 ffa8 	bl	8009088 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018138:	b00e      	add	sp, #56	@ 0x38
 801813a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801813e:	bf00      	nop
 8018140:	24062214 	.word	0x24062214
 8018144:	2406221c 	.word	0x2406221c
 8018148:	24062210 	.word	0x24062210
 801814c:	24062218 	.word	0x24062218
 8018150:	240621b8 	.word	0x240621b8

08018154 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8018154:	b570      	push	{r4, r5, r6, lr}
 8018156:	6803      	ldr	r3, [r0, #0]
 8018158:	4604      	mov	r4, r0
 801815a:	4615      	mov	r5, r2
 801815c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801815e:	4798      	blx	r3
 8018160:	6823      	ldr	r3, [r4, #0]
 8018162:	4629      	mov	r1, r5
 8018164:	4620      	mov	r0, r4
 8018166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801816c:	4718      	bx	r3
	...

08018170 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018170:	b538      	push	{r3, r4, r5, lr}
 8018172:	4b0e      	ldr	r3, [pc, #56]	@ (80181ac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8018174:	4604      	mov	r4, r0
 8018176:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8018178:	881b      	ldrh	r3, [r3, #0]
 801817a:	429a      	cmp	r2, r3
 801817c:	d214      	bcs.n	80181a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801817e:	6803      	ldr	r3, [r0, #0]
 8018180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018182:	4798      	blx	r3
 8018184:	6823      	ldr	r3, [r4, #0]
 8018186:	4605      	mov	r5, r0
 8018188:	4620      	mov	r0, r4
 801818a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801818c:	4798      	blx	r3
 801818e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018192:	b22d      	sxth	r5, r5
 8018194:	4601      	mov	r1, r0
 8018196:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801819a:	bf06      	itte	eq
 801819c:	4602      	moveq	r2, r0
 801819e:	4629      	moveq	r1, r5
 80181a0:	462a      	movne	r2, r5
 80181a2:	4620      	mov	r0, r4
 80181a4:	f7ff ffd6 	bl	8018154 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80181a8:	bd38      	pop	{r3, r4, r5, pc}
 80181aa:	bf00      	nop
 80181ac:	24062214 	.word	0x24062214

080181b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80181b0:	b530      	push	{r4, r5, lr}
 80181b2:	888b      	ldrh	r3, [r1, #4]
 80181b4:	b085      	sub	sp, #20
 80181b6:	4604      	mov	r4, r0
 80181b8:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80181ba:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80181be:	b923      	cbnz	r3, 80181ca <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80181c0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80181c4:	b90b      	cbnz	r3, 80181ca <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80181c6:	f7ff ffd3 	bl	8018170 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80181ca:	6823      	ldr	r3, [r4, #0]
 80181cc:	466d      	mov	r5, sp
 80181ce:	4621      	mov	r1, r4
 80181d0:	343c      	adds	r4, #60	@ 0x3c
 80181d2:	4628      	mov	r0, r5
 80181d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80181d8:	4798      	blx	r3
 80181da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80181de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80181e2:	b005      	add	sp, #20
 80181e4:	bd30      	pop	{r4, r5, pc}

080181e6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80181e6:	2300      	movs	r3, #0
 80181e8:	8083      	strh	r3, [r0, #4]
 80181ea:	80c3      	strh	r3, [r0, #6]
 80181ec:	8003      	strh	r3, [r0, #0]
 80181ee:	8043      	strh	r3, [r0, #2]
 80181f0:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80181f4:	2bff      	cmp	r3, #255	@ 0xff
 80181f6:	bf01      	itttt	eq
 80181f8:	890b      	ldrheq	r3, [r1, #8]
 80181fa:	8083      	strheq	r3, [r0, #4]
 80181fc:	894b      	ldrheq	r3, [r1, #10]
 80181fe:	80c3      	strheq	r3, [r0, #6]
 8018200:	4770      	bx	lr
	...

08018204 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018206:	4604      	mov	r4, r0
 8018208:	466b      	mov	r3, sp
 801820a:	6808      	ldr	r0, [r1, #0]
 801820c:	6849      	ldr	r1, [r1, #4]
 801820e:	c303      	stmia	r3!, {r0, r1}
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	4669      	mov	r1, sp
 8018214:	4620      	mov	r0, r4
 8018216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018218:	4798      	blx	r3
 801821a:	4b08      	ldr	r3, [pc, #32]	@ (801823c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018222:	b10a      	cbz	r2, 8018228 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018224:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8018226:	b900      	cbnz	r0, 801822a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018228:	6898      	ldr	r0, [r3, #8]
 801822a:	6803      	ldr	r3, [r0, #0]
 801822c:	4669      	mov	r1, sp
 801822e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018230:	6a1d      	ldr	r5, [r3, #32]
 8018232:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8018236:	47a8      	blx	r5
 8018238:	b003      	add	sp, #12
 801823a:	bd30      	pop	{r4, r5, pc}
 801823c:	240621b8 	.word	0x240621b8

08018240 <_ZN8touchgfx3BoxD1Ev>:
 8018240:	4770      	bx	lr

08018242 <_ZN8touchgfx3BoxD0Ev>:
 8018242:	b510      	push	{r4, lr}
 8018244:	4604      	mov	r4, r0
 8018246:	212c      	movs	r1, #44	@ 0x2c
 8018248:	f010 fe4a 	bl	8028ee0 <_ZdlPvj>
 801824c:	4620      	mov	r0, r4
 801824e:	bd10      	pop	{r4, pc}

08018250 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8018250:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8018254:	b12a      	cbz	r2, 8018262 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018256:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801825a:	b112      	cbz	r2, 8018262 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801825c:	6803      	ldr	r3, [r0, #0]
 801825e:	695b      	ldr	r3, [r3, #20]
 8018260:	4718      	bx	r3
 8018262:	4770      	bx	lr

08018264 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8018264:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8018268:	4770      	bx	lr

0801826a <_ZN8touchgfx6ButtonD1Ev>:
 801826a:	4770      	bx	lr

0801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801826c:	b570      	push	{r4, r5, r6, lr}
 801826e:	880b      	ldrh	r3, [r1, #0]
 8018270:	4605      	mov	r5, r0
 8018272:	4604      	mov	r4, r0
 8018274:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8018276:	8813      	ldrh	r3, [r2, #0]
 8018278:	f825 3f30 	strh.w	r3, [r5, #48]!
 801827c:	4628      	mov	r0, r5
 801827e:	f006 f815 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018282:	4606      	mov	r6, r0
 8018284:	4628      	mov	r0, r5
 8018286:	f006 f845 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801828a:	6823      	ldr	r3, [r4, #0]
 801828c:	4605      	mov	r5, r0
 801828e:	4631      	mov	r1, r6
 8018290:	4620      	mov	r0, r4
 8018292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018294:	4798      	blx	r3
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	4629      	mov	r1, r5
 801829a:	4620      	mov	r0, r4
 801829c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801829e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182a2:	4718      	bx	r3

080182a4 <_ZN8touchgfx6ButtonD0Ev>:
 80182a4:	b510      	push	{r4, lr}
 80182a6:	4604      	mov	r4, r0
 80182a8:	2134      	movs	r1, #52	@ 0x34
 80182aa:	f010 fe19 	bl	8028ee0 <_ZdlPvj>
 80182ae:	4620      	mov	r0, r4
 80182b0:	bd10      	pop	{r4, pc}

080182b2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80182b2:	b510      	push	{r4, lr}
 80182b4:	4604      	mov	r4, r0
 80182b6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80182b8:	b150      	cbz	r0, 80182d0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80182ba:	6803      	ldr	r3, [r0, #0]
 80182bc:	68db      	ldr	r3, [r3, #12]
 80182be:	4798      	blx	r3
 80182c0:	b130      	cbz	r0, 80182d0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80182c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80182c4:	4621      	mov	r1, r4
 80182c6:	6803      	ldr	r3, [r0, #0]
 80182c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182cc:	689b      	ldr	r3, [r3, #8]
 80182ce:	4718      	bx	r3
 80182d0:	bd10      	pop	{r4, pc}

080182d2 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80182d2:	b510      	push	{r4, lr}
 80182d4:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 80182d8:	4604      	mov	r4, r0
 80182da:	2bff      	cmp	r3, #255	@ 0xff
 80182dc:	d006      	beq.n	80182ec <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80182de:	2300      	movs	r3, #0
 80182e0:	8003      	strh	r3, [r0, #0]
 80182e2:	8043      	strh	r3, [r0, #2]
 80182e4:	8083      	strh	r3, [r0, #4]
 80182e6:	80c3      	strh	r3, [r0, #6]
 80182e8:	4620      	mov	r0, r4
 80182ea:	bd10      	pop	{r4, pc}
 80182ec:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80182f0:	b11b      	cbz	r3, 80182fa <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80182f2:	3130      	adds	r1, #48	@ 0x30
 80182f4:	f006 f842 	bl	801e37c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80182f8:	e7f6      	b.n	80182e8 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80182fa:	312e      	adds	r1, #46	@ 0x2e
 80182fc:	e7fa      	b.n	80182f4 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08018300 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8018300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018304:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8018308:	b08a      	sub	sp, #40	@ 0x28
 801830a:	4604      	mov	r4, r0
 801830c:	4688      	mov	r8, r1
 801830e:	2b00      	cmp	r3, #0
 8018310:	d066      	beq.n	80183e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8018312:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8018314:	a805      	add	r0, sp, #20
 8018316:	f8ad 3014 	strh.w	r3, [sp, #20]
 801831a:	f005 ffc7 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801831e:	4607      	mov	r7, r0
 8018320:	a805      	add	r0, sp, #20
 8018322:	f005 fff7 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018326:	f9b8 6000 	ldrsh.w	r6, [r8]
 801832a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801832e:	2300      	movs	r3, #0
 8018330:	4432      	add	r2, r6
 8018332:	9306      	str	r3, [sp, #24]
 8018334:	b292      	uxth	r2, r2
 8018336:	fa0f fc82 	sxth.w	ip, r2
 801833a:	459c      	cmp	ip, r3
 801833c:	dd52      	ble.n	80183e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801833e:	42b7      	cmp	r7, r6
 8018340:	dd50      	ble.n	80183e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018342:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8018346:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801834a:	442b      	add	r3, r5
 801834c:	b29b      	uxth	r3, r3
 801834e:	b219      	sxth	r1, r3
 8018350:	2900      	cmp	r1, #0
 8018352:	dd47      	ble.n	80183e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018354:	42a8      	cmp	r0, r5
 8018356:	dd45      	ble.n	80183e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018358:	4567      	cmp	r7, ip
 801835a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801835e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8018362:	bfb8      	it	lt
 8018364:	b2ba      	uxthlt	r2, r7
 8018366:	4288      	cmp	r0, r1
 8018368:	f8ad 6018 	strh.w	r6, [sp, #24]
 801836c:	bfb8      	it	lt
 801836e:	b283      	uxthlt	r3, r0
 8018370:	1b92      	subs	r2, r2, r6
 8018372:	f8ad 501a 	strh.w	r5, [sp, #26]
 8018376:	1b5b      	subs	r3, r3, r5
 8018378:	f8ad 201c 	strh.w	r2, [sp, #28]
 801837c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018380:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018388:	429a      	cmp	r2, r3
 801838a:	d026      	beq.n	80183da <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801838c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018390:	2b00      	cmp	r3, #0
 8018392:	dd22      	ble.n	80183da <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018394:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018398:	2b00      	cmp	r3, #0
 801839a:	dd1e      	ble.n	80183da <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801839c:	2300      	movs	r3, #0
 801839e:	a908      	add	r1, sp, #32
 80183a0:	4620      	mov	r0, r4
 80183a2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80183a6:	6823      	ldr	r3, [r4, #0]
 80183a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183aa:	4798      	blx	r3
 80183ac:	4b0f      	ldr	r3, [pc, #60]	@ (80183ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80183b4:	b10a      	cbz	r2, 80183ba <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80183b6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80183b8:	b900      	cbnz	r0, 80183bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80183ba:	6898      	ldr	r0, [r3, #8]
 80183bc:	2501      	movs	r5, #1
 80183be:	6801      	ldr	r1, [r0, #0]
 80183c0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80183c4:	9502      	str	r5, [sp, #8]
 80183c6:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 80183ca:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80183ce:	9401      	str	r4, [sp, #4]
 80183d0:	ac06      	add	r4, sp, #24
 80183d2:	9400      	str	r4, [sp, #0]
 80183d4:	688c      	ldr	r4, [r1, #8]
 80183d6:	a905      	add	r1, sp, #20
 80183d8:	47a0      	blx	r4
 80183da:	b00a      	add	sp, #40	@ 0x28
 80183dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183e0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80183e2:	e797      	b.n	8018314 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80183e4:	2300      	movs	r3, #0
 80183e6:	9307      	str	r3, [sp, #28]
 80183e8:	e7ca      	b.n	8018380 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80183ea:	bf00      	nop
 80183ec:	240621b8 	.word	0x240621b8

080183f0 <_ZNK8touchgfx6Button17invalidateContentEv>:
 80183f0:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 80183f4:	b12a      	cbz	r2, 8018402 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80183f6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80183fa:	b112      	cbz	r2, 8018402 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80183fc:	6803      	ldr	r3, [r0, #0]
 80183fe:	695b      	ldr	r3, [r3, #20]
 8018400:	4718      	bx	r3
 8018402:	4770      	bx	lr

08018404 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_>:
 8018404:	4770      	bx	lr

08018406 <_ZN8touchgfx14ButtonWithIconD1Ev>:
 8018406:	4770      	bx	lr

08018408 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 8018408:	b510      	push	{r4, lr}
 801840a:	4604      	mov	r4, r0
 801840c:	213c      	movs	r1, #60	@ 0x3c
 801840e:	f010 fd67 	bl	8028ee0 <_ZdlPvj>
 8018412:	4620      	mov	r0, r4
 8018414:	bd10      	pop	{r4, pc}

08018416 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8018416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801841a:	461c      	mov	r4, r3
 801841c:	4606      	mov	r6, r0
 801841e:	9f06      	ldr	r7, [sp, #24]
 8018420:	f7ff ff24 	bl	801826c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8018424:	8823      	ldrh	r3, [r4, #0]
 8018426:	f04f 0802 	mov.w	r8, #2
 801842a:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 801842e:	4638      	mov	r0, r7
 8018430:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8018432:	883b      	ldrh	r3, [r7, #0]
 8018434:	fb95 f5f8 	sdiv	r5, r5, r8
 8018438:	86f3      	strh	r3, [r6, #54]	@ 0x36
 801843a:	b2ad      	uxth	r5, r5
 801843c:	f005 ff36 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018440:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8018444:	fb90 f0f8 	sdiv	r0, r0, r8
 8018448:	1a2d      	subs	r5, r5, r0
 801844a:	4638      	mov	r0, r7
 801844c:	fb94 f4f8 	sdiv	r4, r4, r8
 8018450:	8735      	strh	r5, [r6, #56]	@ 0x38
 8018452:	b2a4      	uxth	r4, r4
 8018454:	f005 ff5e 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018458:	fb90 f0f8 	sdiv	r0, r0, r8
 801845c:	1a24      	subs	r4, r4, r0
 801845e:	8774      	strh	r4, [r6, #58]	@ 0x3a
 8018460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018464 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8018464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018468:	4604      	mov	r4, r0
 801846a:	b08c      	sub	sp, #48	@ 0x30
 801846c:	460d      	mov	r5, r1
 801846e:	f7ff ff47 	bl	8018300 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8018472:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018476:	2b00      	cmp	r3, #0
 8018478:	d05d      	beq.n	8018536 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd2>
 801847a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801847c:	a805      	add	r0, sp, #20
 801847e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018482:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	@ 0x38
 8018486:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	@ 0x3a
 801848a:	f005 ff0f 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801848e:	4606      	mov	r6, r0
 8018490:	a805      	add	r0, sp, #20
 8018492:	f005 ff3f 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018496:	6869      	ldr	r1, [r5, #4]
 8018498:	f8ad 001e 	strh.w	r0, [sp, #30]
 801849c:	ab08      	add	r3, sp, #32
 801849e:	6828      	ldr	r0, [r5, #0]
 80184a0:	ad08      	add	r5, sp, #32
 80184a2:	f8ad 8018 	strh.w	r8, [sp, #24]
 80184a6:	f8ad 701a 	strh.w	r7, [sp, #26]
 80184aa:	f8ad 601c 	strh.w	r6, [sp, #28]
 80184ae:	c303      	stmia	r3!, {r0, r1}
 80184b0:	a906      	add	r1, sp, #24
 80184b2:	4628      	mov	r0, r5
 80184b4:	f7fc f802 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 80184b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80184bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d035      	beq.n	8018530 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80184c4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	dd31      	ble.n	8018530 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80184cc:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	dd2d      	ble.n	8018530 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80184d4:	2300      	movs	r3, #0
 80184d6:	a90a      	add	r1, sp, #40	@ 0x28
 80184d8:	4620      	mov	r0, r4
 80184da:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80184de:	6823      	ldr	r3, [r4, #0]
 80184e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184e2:	4798      	blx	r3
 80184e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80184e8:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 80184ea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80184ee:	1a9b      	subs	r3, r3, r2
 80184f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80184f4:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 80184f6:	1ac9      	subs	r1, r1, r3
 80184f8:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 80184fc:	490f      	ldr	r1, [pc, #60]	@ (801853c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd8>)
 80184fe:	6809      	ldr	r1, [r1, #0]
 8018500:	f891 0058 	ldrb.w	r0, [r1, #88]	@ 0x58
 8018504:	b108      	cbz	r0, 801850a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 8018506:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 8018508:	b900      	cbnz	r0, 801850c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa8>
 801850a:	6888      	ldr	r0, [r1, #8]
 801850c:	f8bd 102a 	ldrh.w	r1, [sp, #42]	@ 0x2a
 8018510:	2601      	movs	r6, #1
 8018512:	440b      	add	r3, r1
 8018514:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8018518:	440a      	add	r2, r1
 801851a:	6801      	ldr	r1, [r0, #0]
 801851c:	9602      	str	r6, [sp, #8]
 801851e:	b21b      	sxth	r3, r3
 8018520:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8018524:	b212      	sxth	r2, r2
 8018526:	e9cd 5400 	strd	r5, r4, [sp]
 801852a:	688c      	ldr	r4, [r1, #8]
 801852c:	a905      	add	r1, sp, #20
 801852e:	47a0      	blx	r4
 8018530:	b00c      	add	sp, #48	@ 0x30
 8018532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018536:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018538:	e7a0      	b.n	801847c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x18>
 801853a:	bf00      	nop
 801853c:	240621b8 	.word	0x240621b8

08018540 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8018540:	2101      	movs	r1, #1
 8018542:	2200      	movs	r2, #0
 8018544:	b510      	push	{r4, lr}
 8018546:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801854a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801854e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018552:	4c0d      	ldr	r4, [pc, #52]	@ (8018588 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 8018554:	8082      	strh	r2, [r0, #4]
 8018556:	80c2      	strh	r2, [r0, #6]
 8018558:	8102      	strh	r2, [r0, #8]
 801855a:	8142      	strh	r2, [r0, #10]
 801855c:	8182      	strh	r2, [r0, #12]
 801855e:	81c2      	strh	r2, [r0, #14]
 8018560:	8202      	strh	r2, [r0, #16]
 8018562:	8242      	strh	r2, [r0, #18]
 8018564:	61c2      	str	r2, [r0, #28]
 8018566:	8402      	strh	r2, [r0, #32]
 8018568:	8442      	strh	r2, [r0, #34]	@ 0x22
 801856a:	6282      	str	r2, [r0, #40]	@ 0x28
 801856c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8018570:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8018572:	8601      	strh	r1, [r0, #48]	@ 0x30
 8018574:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8018578:	6004      	str	r4, [r0, #0]
 801857a:	8681      	strh	r1, [r0, #52]	@ 0x34
 801857c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801857e:	8702      	strh	r2, [r0, #56]	@ 0x38
 8018580:	8742      	strh	r2, [r0, #58]	@ 0x3a
 8018582:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018586:	bd10      	pop	{r4, pc}
 8018588:	0802e2c8 	.word	0x0802e2c8

0801858c <_ZN8touchgfx5ImageD1Ev>:
 801858c:	4770      	bx	lr

0801858e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801858e:	b570      	push	{r4, r5, r6, lr}
 8018590:	880b      	ldrh	r3, [r1, #0]
 8018592:	460d      	mov	r5, r1
 8018594:	4604      	mov	r4, r0
 8018596:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018598:	4608      	mov	r0, r1
 801859a:	f005 fe87 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 801859e:	4606      	mov	r6, r0
 80185a0:	4628      	mov	r0, r5
 80185a2:	f005 feb7 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80185a6:	6823      	ldr	r3, [r4, #0]
 80185a8:	4605      	mov	r5, r0
 80185aa:	4631      	mov	r1, r6
 80185ac:	4620      	mov	r0, r4
 80185ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185b0:	4798      	blx	r3
 80185b2:	6823      	ldr	r3, [r4, #0]
 80185b4:	4629      	mov	r1, r5
 80185b6:	4620      	mov	r0, r4
 80185b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185be:	4718      	bx	r3

080185c0 <_ZN8touchgfx5ImageD0Ev>:
 80185c0:	b510      	push	{r4, lr}
 80185c2:	4604      	mov	r4, r0
 80185c4:	212c      	movs	r1, #44	@ 0x2c
 80185c6:	f010 fc8b 	bl	8028ee0 <_ZdlPvj>
 80185ca:	4620      	mov	r0, r4
 80185cc:	bd10      	pop	{r4, pc}

080185ce <_ZNK8touchgfx5Image12getSolidRectEv>:
 80185ce:	b510      	push	{r4, lr}
 80185d0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80185d4:	4604      	mov	r4, r0
 80185d6:	2bff      	cmp	r3, #255	@ 0xff
 80185d8:	d006      	beq.n	80185e8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80185da:	2300      	movs	r3, #0
 80185dc:	8003      	strh	r3, [r0, #0]
 80185de:	8043      	strh	r3, [r0, #2]
 80185e0:	8083      	strh	r3, [r0, #4]
 80185e2:	80c3      	strh	r3, [r0, #6]
 80185e4:	4620      	mov	r0, r4
 80185e6:	bd10      	pop	{r4, pc}
 80185e8:	3126      	adds	r1, #38	@ 0x26
 80185ea:	f005 fec7 	bl	801e37c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80185ee:	e7f9      	b.n	80185e4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080185f0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80185f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185f4:	4604      	mov	r4, r0
 80185f6:	b088      	sub	sp, #32
 80185f8:	2500      	movs	r5, #0
 80185fa:	460f      	mov	r7, r1
 80185fc:	f854 3b26 	ldr.w	r3, [r4], #38
 8018600:	a904      	add	r1, sp, #16
 8018602:	4606      	mov	r6, r0
 8018604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018606:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801860a:	4798      	blx	r3
 801860c:	4620      	mov	r0, r4
 801860e:	f005 fe4d 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018612:	4680      	mov	r8, r0
 8018614:	4620      	mov	r0, r4
 8018616:	f005 fe7d 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801861a:	9506      	str	r5, [sp, #24]
 801861c:	ad06      	add	r5, sp, #24
 801861e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018622:	4639      	mov	r1, r7
 8018624:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018628:	4628      	mov	r0, r5
 801862a:	f7fb ff47 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 801862e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018632:	2b00      	cmp	r3, #0
 8018634:	dd19      	ble.n	801866a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018636:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801863a:	2b00      	cmp	r3, #0
 801863c:	dd15      	ble.n	801866a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801863e:	4b0c      	ldr	r3, [pc, #48]	@ (8018670 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018646:	b10a      	cbz	r2, 801864c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018648:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801864a:	b900      	cbnz	r0, 801864e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801864c:	6898      	ldr	r0, [r3, #8]
 801864e:	2701      	movs	r7, #1
 8018650:	6801      	ldr	r1, [r0, #0]
 8018652:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018656:	9702      	str	r7, [sp, #8]
 8018658:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 801865c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018660:	e9cd 5600 	strd	r5, r6, [sp]
 8018664:	688d      	ldr	r5, [r1, #8]
 8018666:	4621      	mov	r1, r4
 8018668:	47a8      	blx	r5
 801866a:	b008      	add	sp, #32
 801866c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018670:	240621b8 	.word	0x240621b8

08018674 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8018674:	4770      	bx	lr

08018676 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8018676:	b510      	push	{r4, lr}
 8018678:	4604      	mov	r4, r0
 801867a:	2148      	movs	r1, #72	@ 0x48
 801867c:	f010 fc30 	bl	8028ee0 <_ZdlPvj>
 8018680:	4620      	mov	r0, r4
 8018682:	bd10      	pop	{r4, pc}

08018684 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8018684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018688:	b08d      	sub	sp, #52	@ 0x34
 801868a:	4604      	mov	r4, r0
 801868c:	460f      	mov	r7, r1
 801868e:	f7ff fe37 	bl	8018300 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8018692:	4a55      	ldr	r2, [pc, #340]	@ (80187e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8018694:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018696:	8812      	ldrh	r2, [r2, #0]
 8018698:	429a      	cmp	r2, r3
 801869a:	f240 8082 	bls.w	80187a2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801869e:	4d53      	ldr	r5, [pc, #332]	@ (80187ec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 80186a0:	682a      	ldr	r2, [r5, #0]
 80186a2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80186a6:	4b52      	ldr	r3, [pc, #328]	@ (80187f0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80186ae:	2200      	movs	r2, #0
 80186b0:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 80186b4:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80186b8:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80186bc:	2a03      	cmp	r2, #3
 80186be:	d811      	bhi.n	80186e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80186c0:	e8df f002 	tbb	[pc, r2]
 80186c4:	89727902 	.word	0x89727902
 80186c8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80186cc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80186d0:	1ad2      	subs	r2, r2, r3
 80186d2:	2002      	movs	r0, #2
 80186d4:	f8ad 1010 	strh.w	r1, [sp, #16]
 80186d8:	f8ad 3012 	strh.w	r3, [sp, #18]
 80186dc:	fb92 f2f0 	sdiv	r2, r2, r0
 80186e0:	f8ad 200e 	strh.w	r2, [sp, #14]
 80186e4:	f10d 080c 	add.w	r8, sp, #12
 80186e8:	f10d 0914 	add.w	r9, sp, #20
 80186ec:	e898 0003 	ldmia.w	r8, {r0, r1}
 80186f0:	e889 0003 	stmia.w	r9, {r0, r1}
 80186f4:	4639      	mov	r1, r7
 80186f6:	4648      	mov	r0, r9
 80186f8:	f7fb fee0 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 80186fc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018700:	2b00      	cmp	r3, #0
 8018702:	dd4e      	ble.n	80187a2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8018704:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8018708:	2b00      	cmp	r3, #0
 801870a:	dd4a      	ble.n	80187a2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801870c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018710:	4641      	mov	r1, r8
 8018712:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018716:	4620      	mov	r0, r4
 8018718:	1a9b      	subs	r3, r3, r2
 801871a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801871e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018722:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018726:	1a9b      	subs	r3, r3, r2
 8018728:	f8ad 3016 	strh.w	r3, [sp, #22]
 801872c:	6823      	ldr	r3, [r4, #0]
 801872e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018730:	4798      	blx	r3
 8018732:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018736:	2b00      	cmp	r3, #0
 8018738:	d053      	beq.n	80187e2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 801873a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801873c:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 801873e:	682b      	ldr	r3, [r5, #0]
 8018740:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8018744:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018748:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 801874c:	785b      	ldrb	r3, [r3, #1]
 801874e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018750:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8018754:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018758:	9607      	str	r6, [sp, #28]
 801875a:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 801875e:	2300      	movs	r3, #0
 8018760:	f88d 5020 	strb.w	r5, [sp, #32]
 8018764:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8018768:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 801876c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8018770:	4b20      	ldr	r3, [pc, #128]	@ (80187f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8018772:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801877c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018780:	b10a      	cbz	r2, 8018786 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8018782:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018784:	b904      	cbnz	r4, 8018788 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8018786:	689c      	ldr	r4, [r3, #8]
 8018788:	4b1b      	ldr	r3, [pc, #108]	@ (80187f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801878a:	6818      	ldr	r0, [r3, #0]
 801878c:	f7f0 fcd0 	bl	8009130 <_ZNK8touchgfx5Texts7getTextEt>
 8018790:	ab07      	add	r3, sp, #28
 8018792:	9001      	str	r0, [sp, #4]
 8018794:	4620      	mov	r0, r4
 8018796:	9300      	str	r3, [sp, #0]
 8018798:	464b      	mov	r3, r9
 801879a:	e898 0006 	ldmia.w	r8, {r1, r2}
 801879e:	f7f0 fc73 	bl	8009088 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80187a2:	b00d      	add	sp, #52	@ 0x34
 80187a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187a8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80187ac:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80187b0:	1ad2      	subs	r2, r2, r3
 80187b2:	3201      	adds	r2, #1
 80187b4:	e78d      	b.n	80186d2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80187b6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80187ba:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80187be:	1ad2      	subs	r2, r2, r3
 80187c0:	3201      	adds	r2, #1
 80187c2:	2002      	movs	r0, #2
 80187c4:	f8ad 3010 	strh.w	r3, [sp, #16]
 80187c8:	f8ad 1012 	strh.w	r1, [sp, #18]
 80187cc:	fb92 f2f0 	sdiv	r2, r2, r0
 80187d0:	f8ad 200c 	strh.w	r2, [sp, #12]
 80187d4:	e786      	b.n	80186e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80187d6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80187da:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80187de:	1ad2      	subs	r2, r2, r3
 80187e0:	e7ef      	b.n	80187c2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80187e2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80187e4:	e7aa      	b.n	801873c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80187e6:	bf00      	nop
 80187e8:	24062214 	.word	0x24062214
 80187ec:	24062210 	.word	0x24062210
 80187f0:	24062218 	.word	0x24062218
 80187f4:	240621b8 	.word	0x240621b8
 80187f8:	2406221c 	.word	0x2406221c

080187fc <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80187fc:	2101      	movs	r1, #1
 80187fe:	2200      	movs	r2, #0
 8018800:	b510      	push	{r4, lr}
 8018802:	4c13      	ldr	r4, [pc, #76]	@ (8018850 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8018804:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8018808:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801880c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018810:	6004      	str	r4, [r0, #0]
 8018812:	4c10      	ldr	r4, [pc, #64]	@ (8018854 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8018814:	8082      	strh	r2, [r0, #4]
 8018816:	80c2      	strh	r2, [r0, #6]
 8018818:	8102      	strh	r2, [r0, #8]
 801881a:	8142      	strh	r2, [r0, #10]
 801881c:	8182      	strh	r2, [r0, #12]
 801881e:	81c2      	strh	r2, [r0, #14]
 8018820:	8202      	strh	r2, [r0, #16]
 8018822:	8242      	strh	r2, [r0, #18]
 8018824:	61c2      	str	r2, [r0, #28]
 8018826:	8402      	strh	r2, [r0, #32]
 8018828:	8442      	strh	r2, [r0, #34]	@ 0x22
 801882a:	6282      	str	r2, [r0, #40]	@ 0x28
 801882c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8018830:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8018832:	8601      	strh	r1, [r0, #48]	@ 0x30
 8018834:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8018838:	6344      	str	r4, [r0, #52]	@ 0x34
 801883a:	8701      	strh	r1, [r0, #56]	@ 0x38
 801883c:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8018840:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8018844:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018848:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801884c:	bd10      	pop	{r4, pc}
 801884e:	bf00      	nop
 8018850:	0802e3ac 	.word	0x0802e3ac
 8018854:	0802c65c 	.word	0x0802c65c

08018858 <_ZN8touchgfx7OutlineD1Ev>:
 8018858:	4770      	bx	lr

0801885a <_ZN8touchgfx7OutlineD0Ev>:
 801885a:	b510      	push	{r4, lr}
 801885c:	4604      	mov	r4, r0
 801885e:	2130      	movs	r1, #48	@ 0x30
 8018860:	f010 fb3e 	bl	8028ee0 <_ZdlPvj>
 8018864:	4620      	mov	r0, r4
 8018866:	bd10      	pop	{r4, pc}

08018868 <_ZN8touchgfx7Outline5resetEv>:
 8018868:	b510      	push	{r4, lr}
 801886a:	4604      	mov	r4, r0
 801886c:	f000 fe86 	bl	801957c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8018870:	60e0      	str	r0, [r4, #12]
 8018872:	f000 fe89 	bl	8019588 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8018876:	68e3      	ldr	r3, [r4, #12]
 8018878:	08c0      	lsrs	r0, r0, #3
 801887a:	2200      	movs	r2, #0
 801887c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8018880:	6123      	str	r3, [r4, #16]
 8018882:	3801      	subs	r0, #1
 8018884:	60a2      	str	r2, [r4, #8]
 8018886:	6060      	str	r0, [r4, #4]
 8018888:	8019      	strh	r1, [r3, #0]
 801888a:	8059      	strh	r1, [r3, #2]
 801888c:	809a      	strh	r2, [r3, #4]
 801888e:	80da      	strh	r2, [r3, #6]
 8018890:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018892:	f023 0301 	bic.w	r3, r3, #1
 8018896:	f043 0302 	orr.w	r3, r3, #2
 801889a:	6263      	str	r3, [r4, #36]	@ 0x24
 801889c:	bd10      	pop	{r4, pc}
	...

080188a0 <_ZN8touchgfx7OutlineC1Ev>:
 80188a0:	4b0a      	ldr	r3, [pc, #40]	@ (80188cc <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80188a2:	b510      	push	{r4, lr}
 80188a4:	6003      	str	r3, [r0, #0]
 80188a6:	2300      	movs	r3, #0
 80188a8:	4604      	mov	r4, r0
 80188aa:	6243      	str	r3, [r0, #36]	@ 0x24
 80188ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80188b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80188b4:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80188b8:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80188bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80188c0:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80188c4:	f7ff ffd0 	bl	8018868 <_ZN8touchgfx7Outline5resetEv>
 80188c8:	4620      	mov	r0, r4
 80188ca:	bd10      	pop	{r4, pc}
 80188cc:	0802e420 	.word	0x0802e420

080188d0 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80188d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	b093      	sub	sp, #76	@ 0x4c
 80188d6:	1156      	asrs	r6, r2, #5
 80188d8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80188da:	9305      	str	r3, [sp, #20]
 80188dc:	1153      	asrs	r3, r2, #5
 80188de:	f004 051f 	and.w	r5, r4, #31
 80188e2:	9303      	str	r3, [sp, #12]
 80188e4:	1163      	asrs	r3, r4, #5
 80188e6:	9504      	str	r5, [sp, #16]
 80188e8:	1165      	asrs	r5, r4, #5
 80188ea:	9306      	str	r3, [sp, #24]
 80188ec:	f002 031f 	and.w	r3, r2, #31
 80188f0:	42ae      	cmp	r6, r5
 80188f2:	f040 80f4 	bne.w	8018ade <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80188f6:	9c04      	ldr	r4, [sp, #16]
 80188f8:	9a05      	ldr	r2, [sp, #20]
 80188fa:	42a3      	cmp	r3, r4
 80188fc:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8018900:	6902      	ldr	r2, [r0, #16]
 8018902:	d125      	bne.n	8018950 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8018904:	f9b2 3000 	ldrsh.w	r3, [r2]
 8018908:	459e      	cmp	lr, r3
 801890a:	d103      	bne.n	8018914 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801890c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018910:	429e      	cmp	r6, r3
 8018912:	d035      	beq.n	8018980 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018914:	88d1      	ldrh	r1, [r2, #6]
 8018916:	8893      	ldrh	r3, [r2, #4]
 8018918:	430b      	orrs	r3, r1
 801891a:	d010      	beq.n	801893e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801891c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018920:	2b00      	cmp	r3, #0
 8018922:	db0c      	blt.n	801893e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018924:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018926:	428b      	cmp	r3, r1
 8018928:	da09      	bge.n	801893e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801892a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801892e:	428b      	cmp	r3, r1
 8018930:	f103 0301 	add.w	r3, r3, #1
 8018934:	bf38      	it	cc
 8018936:	3208      	addcc	r2, #8
 8018938:	6083      	str	r3, [r0, #8]
 801893a:	bf38      	it	cc
 801893c:	6102      	strcc	r2, [r0, #16]
 801893e:	6903      	ldr	r3, [r0, #16]
 8018940:	9a03      	ldr	r2, [sp, #12]
 8018942:	f8a3 e000 	strh.w	lr, [r3]
 8018946:	805a      	strh	r2, [r3, #2]
 8018948:	2200      	movs	r2, #0
 801894a:	809a      	strh	r2, [r3, #4]
 801894c:	80da      	strh	r2, [r3, #6]
 801894e:	e017      	b.n	8018980 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018950:	9c05      	ldr	r4, [sp, #20]
 8018952:	114e      	asrs	r6, r1, #5
 8018954:	f001 0c1f 	and.w	ip, r1, #31
 8018958:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801895c:	f004 041f 	and.w	r4, r4, #31
 8018960:	4576      	cmp	r6, lr
 8018962:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8018966:	9402      	str	r4, [sp, #8]
 8018968:	9c04      	ldr	r4, [sp, #16]
 801896a:	eba4 0403 	sub.w	r4, r4, r3
 801896e:	d10a      	bne.n	8018986 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8018970:	9b02      	ldr	r3, [sp, #8]
 8018972:	44a0      	add	r8, r4
 8018974:	449c      	add	ip, r3
 8018976:	f8a2 8004 	strh.w	r8, [r2, #4]
 801897a:	fb04 a40c 	mla	r4, r4, ip, sl
 801897e:	80d4      	strh	r4, [r2, #6]
 8018980:	b013      	add	sp, #76	@ 0x4c
 8018982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018986:	9d05      	ldr	r5, [sp, #20]
 8018988:	1a69      	subs	r1, r5, r1
 801898a:	bf51      	iteee	pl
 801898c:	f1cc 0520 	rsbpl	r5, ip, #32
 8018990:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018994:	4249      	negmi	r1, r1
 8018996:	2500      	movmi	r5, #0
 8018998:	bf5d      	ittte	pl
 801899a:	436c      	mulpl	r4, r5
 801899c:	2520      	movpl	r5, #32
 801899e:	f04f 0901 	movpl.w	r9, #1
 80189a2:	f04f 39ff 	movmi.w	r9, #4294967295
 80189a6:	9501      	str	r5, [sp, #4]
 80189a8:	9f01      	ldr	r7, [sp, #4]
 80189aa:	444e      	add	r6, r9
 80189ac:	fb94 f5f1 	sdiv	r5, r4, r1
 80189b0:	fb01 4415 	mls	r4, r1, r5, r4
 80189b4:	44bc      	add	ip, r7
 80189b6:	2c00      	cmp	r4, #0
 80189b8:	bfbc      	itt	lt
 80189ba:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80189be:	1864      	addlt	r4, r4, r1
 80189c0:	44a8      	add	r8, r5
 80189c2:	fb05 ac0c 	mla	ip, r5, ip, sl
 80189c6:	f8a2 8004 	strh.w	r8, [r2, #4]
 80189ca:	f8a2 c006 	strh.w	ip, [r2, #6]
 80189ce:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80189d2:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80189d6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80189da:	ea58 0202 	orrs.w	r2, r8, r2
 80189de:	d011      	beq.n	8018a04 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80189e0:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80189e4:	f1b8 0f00 	cmp.w	r8, #0
 80189e8:	db0c      	blt.n	8018a04 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80189ea:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80189ec:	4590      	cmp	r8, r2
 80189ee:	da09      	bge.n	8018a04 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80189f0:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80189f4:	4590      	cmp	r8, r2
 80189f6:	bf3c      	itt	cc
 80189f8:	f10c 0208 	addcc.w	r2, ip, #8
 80189fc:	6102      	strcc	r2, [r0, #16]
 80189fe:	f108 0201 	add.w	r2, r8, #1
 8018a02:	6082      	str	r2, [r0, #8]
 8018a04:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018a08:	2700      	movs	r7, #0
 8018a0a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018a0e:	45b6      	cmp	lr, r6
 8018a10:	f8ac 6000 	strh.w	r6, [ip]
 8018a14:	442b      	add	r3, r5
 8018a16:	f8ac 2002 	strh.w	r2, [ip, #2]
 8018a1a:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018a1e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018a22:	d04b      	beq.n	8018abc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8018a24:	9f04      	ldr	r7, [sp, #16]
 8018a26:	1a64      	subs	r4, r4, r1
 8018a28:	f04f 0a00 	mov.w	sl, #0
 8018a2c:	1aff      	subs	r7, r7, r3
 8018a2e:	443d      	add	r5, r7
 8018a30:	016d      	lsls	r5, r5, #5
 8018a32:	fb95 f8f1 	sdiv	r8, r5, r1
 8018a36:	fb01 5518 	mls	r5, r1, r8, r5
 8018a3a:	2d00      	cmp	r5, #0
 8018a3c:	bfbc      	itt	lt
 8018a3e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018a42:	186d      	addlt	r5, r5, r1
 8018a44:	f108 0701 	add.w	r7, r8, #1
 8018a48:	9703      	str	r7, [sp, #12]
 8018a4a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018a4e:	1964      	adds	r4, r4, r5
 8018a50:	444e      	add	r6, r9
 8018a52:	bf54      	ite	pl
 8018a54:	9f03      	ldrpl	r7, [sp, #12]
 8018a56:	4647      	movmi	r7, r8
 8018a58:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018a5c:	bf58      	it	pl
 8018a5e:	1a64      	subpl	r4, r4, r1
 8018a60:	443b      	add	r3, r7
 8018a62:	44bb      	add	fp, r7
 8018a64:	f8ac b004 	strh.w	fp, [ip, #4]
 8018a68:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018a6c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018a70:	f8ac b006 	strh.w	fp, [ip, #6]
 8018a74:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018a78:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018a7c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018a80:	ea5b 0707 	orrs.w	r7, fp, r7
 8018a84:	d011      	beq.n	8018aaa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018a86:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018a8a:	f1bb 0f00 	cmp.w	fp, #0
 8018a8e:	db0c      	blt.n	8018aaa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018a90:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018a92:	45bb      	cmp	fp, r7
 8018a94:	da09      	bge.n	8018aaa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018a96:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018a9a:	45bb      	cmp	fp, r7
 8018a9c:	bf3c      	itt	cc
 8018a9e:	f10c 0708 	addcc.w	r7, ip, #8
 8018aa2:	6107      	strcc	r7, [r0, #16]
 8018aa4:	f10b 0701 	add.w	r7, fp, #1
 8018aa8:	6087      	str	r7, [r0, #8]
 8018aaa:	6907      	ldr	r7, [r0, #16]
 8018aac:	45b6      	cmp	lr, r6
 8018aae:	803e      	strh	r6, [r7, #0]
 8018ab0:	807a      	strh	r2, [r7, #2]
 8018ab2:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018ab6:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018aba:	d1c6      	bne.n	8018a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8018abc:	9a04      	ldr	r2, [sp, #16]
 8018abe:	1ad3      	subs	r3, r2, r3
 8018ac0:	6902      	ldr	r2, [r0, #16]
 8018ac2:	8891      	ldrh	r1, [r2, #4]
 8018ac4:	88d6      	ldrh	r6, [r2, #6]
 8018ac6:	4419      	add	r1, r3
 8018ac8:	8091      	strh	r1, [r2, #4]
 8018aca:	9902      	ldr	r1, [sp, #8]
 8018acc:	f101 0c20 	add.w	ip, r1, #32
 8018ad0:	9901      	ldr	r1, [sp, #4]
 8018ad2:	ebac 0c01 	sub.w	ip, ip, r1
 8018ad6:	fb03 630c 	mla	r3, r3, ip, r6
 8018ada:	80d3      	strh	r3, [r2, #6]
 8018adc:	e750      	b.n	8018980 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018ade:	9d05      	ldr	r5, [sp, #20]
 8018ae0:	1aa2      	subs	r2, r4, r2
 8018ae2:	eba5 0501 	sub.w	r5, r5, r1
 8018ae6:	9202      	str	r2, [sp, #8]
 8018ae8:	9508      	str	r5, [sp, #32]
 8018aea:	f140 8128 	bpl.w	8018d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8018aee:	9a03      	ldr	r2, [sp, #12]
 8018af0:	2a00      	cmp	r2, #0
 8018af2:	f6ff af45 	blt.w	8018980 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018af6:	9a02      	ldr	r2, [sp, #8]
 8018af8:	f04f 34ff 	mov.w	r4, #4294967295
 8018afc:	4252      	negs	r2, r2
 8018afe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018b00:	2400      	movs	r4, #0
 8018b02:	9202      	str	r2, [sp, #8]
 8018b04:	9a06      	ldr	r2, [sp, #24]
 8018b06:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8018b0a:	9206      	str	r2, [sp, #24]
 8018b0c:	462a      	mov	r2, r5
 8018b0e:	435a      	muls	r2, r3
 8018b10:	9401      	str	r4, [sp, #4]
 8018b12:	9c02      	ldr	r4, [sp, #8]
 8018b14:	9d02      	ldr	r5, [sp, #8]
 8018b16:	fb92 f4f4 	sdiv	r4, r2, r4
 8018b1a:	fb05 2214 	mls	r2, r5, r4, r2
 8018b1e:	2a00      	cmp	r2, #0
 8018b20:	9207      	str	r2, [sp, #28]
 8018b22:	bfbc      	itt	lt
 8018b24:	1952      	addlt	r2, r2, r5
 8018b26:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018b2a:	6905      	ldr	r5, [r0, #16]
 8018b2c:	bfb8      	it	lt
 8018b2e:	9207      	strlt	r2, [sp, #28]
 8018b30:	eb04 0901 	add.w	r9, r4, r1
 8018b34:	9a01      	ldr	r2, [sp, #4]
 8018b36:	ea4f 1669 	mov.w	r6, r9, asr #5
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	f040 8111 	bne.w	8018d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8018b40:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018b44:	429e      	cmp	r6, r3
 8018b46:	d104      	bne.n	8018b52 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8018b48:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018b4c:	9a03      	ldr	r2, [sp, #12]
 8018b4e:	429a      	cmp	r2, r3
 8018b50:	d01b      	beq.n	8018b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018b52:	88ea      	ldrh	r2, [r5, #6]
 8018b54:	88ab      	ldrh	r3, [r5, #4]
 8018b56:	4313      	orrs	r3, r2
 8018b58:	d010      	beq.n	8018b7c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018b5a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018b5e:	2a00      	cmp	r2, #0
 8018b60:	db0c      	blt.n	8018b7c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018b62:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018b64:	429a      	cmp	r2, r3
 8018b66:	da09      	bge.n	8018b7c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018b68:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018b6c:	429a      	cmp	r2, r3
 8018b6e:	f102 0201 	add.w	r2, r2, #1
 8018b72:	bf38      	it	cc
 8018b74:	3508      	addcc	r5, #8
 8018b76:	6082      	str	r2, [r0, #8]
 8018b78:	bf38      	it	cc
 8018b7a:	6105      	strcc	r5, [r0, #16]
 8018b7c:	6903      	ldr	r3, [r0, #16]
 8018b7e:	9a03      	ldr	r2, [sp, #12]
 8018b80:	801e      	strh	r6, [r3, #0]
 8018b82:	805a      	strh	r2, [r3, #2]
 8018b84:	2200      	movs	r2, #0
 8018b86:	809a      	strh	r2, [r3, #4]
 8018b88:	80da      	strh	r2, [r3, #6]
 8018b8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b8c:	9a03      	ldr	r2, [sp, #12]
 8018b8e:	6901      	ldr	r1, [r0, #16]
 8018b90:	441a      	add	r2, r3
 8018b92:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018b96:	42b3      	cmp	r3, r6
 8018b98:	d103      	bne.n	8018ba2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8018b9a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018b9e:	429a      	cmp	r2, r3
 8018ba0:	d01a      	beq.n	8018bd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8018ba2:	88cc      	ldrh	r4, [r1, #6]
 8018ba4:	888b      	ldrh	r3, [r1, #4]
 8018ba6:	4323      	orrs	r3, r4
 8018ba8:	d010      	beq.n	8018bcc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018baa:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018bae:	2c00      	cmp	r4, #0
 8018bb0:	db0c      	blt.n	8018bcc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018bb2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018bb4:	429c      	cmp	r4, r3
 8018bb6:	da09      	bge.n	8018bcc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018bb8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018bbc:	429c      	cmp	r4, r3
 8018bbe:	f104 0401 	add.w	r4, r4, #1
 8018bc2:	bf38      	it	cc
 8018bc4:	3108      	addcc	r1, #8
 8018bc6:	6084      	str	r4, [r0, #8]
 8018bc8:	bf38      	it	cc
 8018bca:	6101      	strcc	r1, [r0, #16]
 8018bcc:	6903      	ldr	r3, [r0, #16]
 8018bce:	2100      	movs	r1, #0
 8018bd0:	801e      	strh	r6, [r3, #0]
 8018bd2:	805a      	strh	r2, [r3, #2]
 8018bd4:	8099      	strh	r1, [r3, #4]
 8018bd6:	80d9      	strh	r1, [r3, #6]
 8018bd8:	9b06      	ldr	r3, [sp, #24]
 8018bda:	4293      	cmp	r3, r2
 8018bdc:	f000 8082 	beq.w	8018ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8018be0:	9b08      	ldr	r3, [sp, #32]
 8018be2:	9902      	ldr	r1, [sp, #8]
 8018be4:	015b      	lsls	r3, r3, #5
 8018be6:	9c02      	ldr	r4, [sp, #8]
 8018be8:	fb93 f1f1 	sdiv	r1, r3, r1
 8018bec:	fb04 3311 	mls	r3, r4, r1, r3
 8018bf0:	9103      	str	r1, [sp, #12]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	9308      	str	r3, [sp, #32]
 8018bf6:	da04      	bge.n	8018c02 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8018bf8:	1e4b      	subs	r3, r1, #1
 8018bfa:	9303      	str	r3, [sp, #12]
 8018bfc:	9b08      	ldr	r3, [sp, #32]
 8018bfe:	4423      	add	r3, r4
 8018c00:	9308      	str	r3, [sp, #32]
 8018c02:	9b07      	ldr	r3, [sp, #28]
 8018c04:	464f      	mov	r7, r9
 8018c06:	9902      	ldr	r1, [sp, #8]
 8018c08:	2600      	movs	r6, #0
 8018c0a:	1a5b      	subs	r3, r3, r1
 8018c0c:	9307      	str	r3, [sp, #28]
 8018c0e:	9b01      	ldr	r3, [sp, #4]
 8018c10:	f1c3 0320 	rsb	r3, r3, #32
 8018c14:	930e      	str	r3, [sp, #56]	@ 0x38
 8018c16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018c18:	9b01      	ldr	r3, [sp, #4]
 8018c1a:	1a5b      	subs	r3, r3, r1
 8018c1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8018c1e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8018c22:	185b      	adds	r3, r3, r1
 8018c24:	bf58      	it	pl
 8018c26:	9902      	ldrpl	r1, [sp, #8]
 8018c28:	9307      	str	r3, [sp, #28]
 8018c2a:	bf57      	itett	pl
 8018c2c:	1a5b      	subpl	r3, r3, r1
 8018c2e:	9903      	ldrmi	r1, [sp, #12]
 8018c30:	9307      	strpl	r3, [sp, #28]
 8018c32:	9b03      	ldrpl	r3, [sp, #12]
 8018c34:	bf58      	it	pl
 8018c36:	1c59      	addpl	r1, r3, #1
 8018c38:	2a00      	cmp	r2, #0
 8018c3a:	4489      	add	r9, r1
 8018c3c:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018c40:	db2e      	blt.n	8018ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018c42:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018c44:	4293      	cmp	r3, r2
 8018c46:	dd2b      	ble.n	8018ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018c48:	9c01      	ldr	r4, [sp, #4]
 8018c4a:	6905      	ldr	r5, [r0, #16]
 8018c4c:	46a0      	mov	r8, r4
 8018c4e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018c50:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8018c54:	45a0      	cmp	r8, r4
 8018c56:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8018c5a:	f040 814c 	bne.w	8018ef6 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8018c5e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018c62:	4551      	cmp	r1, sl
 8018c64:	d103      	bne.n	8018c6e <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8018c66:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018c6a:	4291      	cmp	r1, r2
 8018c6c:	d018      	beq.n	8018ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018c6e:	ea5c 010e 	orrs.w	r1, ip, lr
 8018c72:	d00f      	beq.n	8018c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018c74:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018c78:	2900      	cmp	r1, #0
 8018c7a:	db0b      	blt.n	8018c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018c7c:	428b      	cmp	r3, r1
 8018c7e:	dd09      	ble.n	8018c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018c80:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8018c84:	4299      	cmp	r1, r3
 8018c86:	f101 0101 	add.w	r1, r1, #1
 8018c8a:	bf38      	it	cc
 8018c8c:	3508      	addcc	r5, #8
 8018c8e:	6081      	str	r1, [r0, #8]
 8018c90:	bf38      	it	cc
 8018c92:	6105      	strcc	r5, [r0, #16]
 8018c94:	6903      	ldr	r3, [r0, #16]
 8018c96:	f8a3 a000 	strh.w	sl, [r3]
 8018c9a:	805a      	strh	r2, [r3, #2]
 8018c9c:	809e      	strh	r6, [r3, #4]
 8018c9e:	80de      	strh	r6, [r3, #6]
 8018ca0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ca2:	6901      	ldr	r1, [r0, #16]
 8018ca4:	441a      	add	r2, r3
 8018ca6:	88cc      	ldrh	r4, [r1, #6]
 8018ca8:	888b      	ldrh	r3, [r1, #4]
 8018caa:	4323      	orrs	r3, r4
 8018cac:	d010      	beq.n	8018cd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018cae:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018cb2:	2c00      	cmp	r4, #0
 8018cb4:	db0c      	blt.n	8018cd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018cb6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018cb8:	429c      	cmp	r4, r3
 8018cba:	da09      	bge.n	8018cd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018cbc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018cc0:	429c      	cmp	r4, r3
 8018cc2:	f104 0401 	add.w	r4, r4, #1
 8018cc6:	bf38      	it	cc
 8018cc8:	3108      	addcc	r1, #8
 8018cca:	6084      	str	r4, [r0, #8]
 8018ccc:	bf38      	it	cc
 8018cce:	6101      	strcc	r1, [r0, #16]
 8018cd0:	6903      	ldr	r3, [r0, #16]
 8018cd2:	464f      	mov	r7, r9
 8018cd4:	f8a3 a000 	strh.w	sl, [r3]
 8018cd8:	805a      	strh	r2, [r3, #2]
 8018cda:	809e      	strh	r6, [r3, #4]
 8018cdc:	80de      	strh	r6, [r3, #6]
 8018cde:	9b06      	ldr	r3, [sp, #24]
 8018ce0:	4293      	cmp	r3, r2
 8018ce2:	d19c      	bne.n	8018c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8018ce4:	9b01      	ldr	r3, [sp, #4]
 8018ce6:	6907      	ldr	r7, [r0, #16]
 8018ce8:	f1c3 0620 	rsb	r6, r3, #32
 8018cec:	9b05      	ldr	r3, [sp, #20]
 8018cee:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8018cf2:	9b04      	ldr	r3, [sp, #16]
 8018cf4:	429e      	cmp	r6, r3
 8018cf6:	f040 81c7 	bne.w	8019088 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8018cfa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018cfe:	459e      	cmp	lr, r3
 8018d00:	d104      	bne.n	8018d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8018d02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018d06:	429a      	cmp	r2, r3
 8018d08:	f43f ae3a 	beq.w	8018980 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018d0c:	88f9      	ldrh	r1, [r7, #6]
 8018d0e:	88bb      	ldrh	r3, [r7, #4]
 8018d10:	430b      	orrs	r3, r1
 8018d12:	d010      	beq.n	8018d36 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018d14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	db0c      	blt.n	8018d36 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018d1c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018d1e:	428b      	cmp	r3, r1
 8018d20:	da09      	bge.n	8018d36 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018d22:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018d26:	428b      	cmp	r3, r1
 8018d28:	f103 0301 	add.w	r3, r3, #1
 8018d2c:	bf38      	it	cc
 8018d2e:	3708      	addcc	r7, #8
 8018d30:	6083      	str	r3, [r0, #8]
 8018d32:	bf38      	it	cc
 8018d34:	6107      	strcc	r7, [r0, #16]
 8018d36:	6903      	ldr	r3, [r0, #16]
 8018d38:	f8a3 e000 	strh.w	lr, [r3]
 8018d3c:	e603      	b.n	8018946 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8018d3e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018d40:	9c03      	ldr	r4, [sp, #12]
 8018d42:	42a2      	cmp	r2, r4
 8018d44:	f6ff ae1c 	blt.w	8018980 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018d48:	9c06      	ldr	r4, [sp, #24]
 8018d4a:	42a2      	cmp	r2, r4
 8018d4c:	9c08      	ldr	r4, [sp, #32]
 8018d4e:	bfbc      	itt	lt
 8018d50:	3201      	addlt	r2, #1
 8018d52:	9206      	strlt	r2, [sp, #24]
 8018d54:	f1c3 0220 	rsb	r2, r3, #32
 8018d58:	4362      	muls	r2, r4
 8018d5a:	2401      	movs	r4, #1
 8018d5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018d5e:	2420      	movs	r4, #32
 8018d60:	e6d6      	b.n	8018b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8018d62:	ea4f 1861 	mov.w	r8, r1, asr #5
 8018d66:	f009 021f 	and.w	r2, r9, #31
 8018d6a:	f001 011f 	and.w	r1, r1, #31
 8018d6e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8018d72:	920c      	str	r2, [sp, #48]	@ 0x30
 8018d74:	45b0      	cmp	r8, r6
 8018d76:	9a01      	ldr	r2, [sp, #4]
 8018d78:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8018d7c:	eba2 0203 	sub.w	r2, r2, r3
 8018d80:	d108      	bne.n	8018d94 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8018d82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018d84:	4496      	add	lr, r2
 8018d86:	4419      	add	r1, r3
 8018d88:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018d8c:	fb02 a101 	mla	r1, r2, r1, sl
 8018d90:	80e9      	strh	r1, [r5, #6]
 8018d92:	e6fa      	b.n	8018b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018d94:	2c00      	cmp	r4, #0
 8018d96:	f2c0 80a7 	blt.w	8018ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8018d9a:	2701      	movs	r7, #1
 8018d9c:	f1c1 0c20 	rsb	ip, r1, #32
 8018da0:	970a      	str	r7, [sp, #40]	@ 0x28
 8018da2:	2720      	movs	r7, #32
 8018da4:	fb02 f20c 	mul.w	r2, r2, ip
 8018da8:	9709      	str	r7, [sp, #36]	@ 0x24
 8018daa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018dac:	fb92 fcf4 	sdiv	ip, r2, r4
 8018db0:	fb04 221c 	mls	r2, r4, ip, r2
 8018db4:	4439      	add	r1, r7
 8018db6:	2a00      	cmp	r2, #0
 8018db8:	bfbc      	itt	lt
 8018dba:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8018dbe:	1912      	addlt	r2, r2, r4
 8018dc0:	fb0c a101 	mla	r1, ip, r1, sl
 8018dc4:	44e6      	add	lr, ip
 8018dc6:	80e9      	strh	r1, [r5, #6]
 8018dc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018dca:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018dce:	eb08 0501 	add.w	r5, r8, r1
 8018dd2:	6901      	ldr	r1, [r0, #16]
 8018dd4:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8018dd8:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8018ddc:	ea58 070e 	orrs.w	r7, r8, lr
 8018de0:	d010      	beq.n	8018e04 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018de2:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8018de6:	f1be 0f00 	cmp.w	lr, #0
 8018dea:	db0b      	blt.n	8018e04 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018dec:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018dee:	45be      	cmp	lr, r7
 8018df0:	da08      	bge.n	8018e04 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018df2:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018df6:	45be      	cmp	lr, r7
 8018df8:	bf3c      	itt	cc
 8018dfa:	3108      	addcc	r1, #8
 8018dfc:	6101      	strcc	r1, [r0, #16]
 8018dfe:	f10e 0101 	add.w	r1, lr, #1
 8018e02:	6081      	str	r1, [r0, #8]
 8018e04:	6901      	ldr	r1, [r0, #16]
 8018e06:	f04f 0e00 	mov.w	lr, #0
 8018e0a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8018e0e:	42ae      	cmp	r6, r5
 8018e10:	800d      	strh	r5, [r1, #0]
 8018e12:	4463      	add	r3, ip
 8018e14:	f8a1 8002 	strh.w	r8, [r1, #2]
 8018e18:	f8a1 e004 	strh.w	lr, [r1, #4]
 8018e1c:	f8a1 e006 	strh.w	lr, [r1, #6]
 8018e20:	d053      	beq.n	8018eca <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8018e22:	9901      	ldr	r1, [sp, #4]
 8018e24:	1b12      	subs	r2, r2, r4
 8018e26:	1ac9      	subs	r1, r1, r3
 8018e28:	4461      	add	r1, ip
 8018e2a:	0149      	lsls	r1, r1, #5
 8018e2c:	fb91 fef4 	sdiv	lr, r1, r4
 8018e30:	fb04 111e 	mls	r1, r4, lr, r1
 8018e34:	2900      	cmp	r1, #0
 8018e36:	bfbc      	itt	lt
 8018e38:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8018e3c:	1909      	addlt	r1, r1, r4
 8018e3e:	f10e 0701 	add.w	r7, lr, #1
 8018e42:	970d      	str	r7, [sp, #52]	@ 0x34
 8018e44:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8018e48:	1852      	adds	r2, r2, r1
 8018e4a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018e4c:	bf54      	ite	pl
 8018e4e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8018e52:	46f4      	movmi	ip, lr
 8018e54:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8018e58:	bf58      	it	pl
 8018e5a:	1b12      	subpl	r2, r2, r4
 8018e5c:	4463      	add	r3, ip
 8018e5e:	443d      	add	r5, r7
 8018e60:	44e3      	add	fp, ip
 8018e62:	f8aa b004 	strh.w	fp, [sl, #4]
 8018e66:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8018e6a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8018e6e:	f8aa b006 	strh.w	fp, [sl, #6]
 8018e72:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018e76:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018e7a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8018e7e:	ea5b 070a 	orrs.w	r7, fp, sl
 8018e82:	d014      	beq.n	8018eae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018e84:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8018e88:	f1ba 0f00 	cmp.w	sl, #0
 8018e8c:	db0f      	blt.n	8018eae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018e8e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018e90:	45ba      	cmp	sl, r7
 8018e92:	da0c      	bge.n	8018eae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018e94:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8018e98:	45ba      	cmp	sl, r7
 8018e9a:	f10a 0a01 	add.w	sl, sl, #1
 8018e9e:	bf38      	it	cc
 8018ea0:	f10c 0c08 	addcc.w	ip, ip, #8
 8018ea4:	f8c0 a008 	str.w	sl, [r0, #8]
 8018ea8:	bf38      	it	cc
 8018eaa:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8018eae:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018eb2:	f04f 0700 	mov.w	r7, #0
 8018eb6:	42ae      	cmp	r6, r5
 8018eb8:	f8ac 5000 	strh.w	r5, [ip]
 8018ebc:	f8ac 8002 	strh.w	r8, [ip, #2]
 8018ec0:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018ec4:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018ec8:	d1bc      	bne.n	8018e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8018eca:	6904      	ldr	r4, [r0, #16]
 8018ecc:	9a01      	ldr	r2, [sp, #4]
 8018ece:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018ed0:	1ad3      	subs	r3, r2, r3
 8018ed2:	88a2      	ldrh	r2, [r4, #4]
 8018ed4:	3120      	adds	r1, #32
 8018ed6:	441a      	add	r2, r3
 8018ed8:	80a2      	strh	r2, [r4, #4]
 8018eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018edc:	1a89      	subs	r1, r1, r2
 8018ede:	88e2      	ldrh	r2, [r4, #6]
 8018ee0:	fb03 2301 	mla	r3, r3, r1, r2
 8018ee4:	80e3      	strh	r3, [r4, #6]
 8018ee6:	e650      	b.n	8018b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018ee8:	f04f 37ff 	mov.w	r7, #4294967295
 8018eec:	434a      	muls	r2, r1
 8018eee:	4264      	negs	r4, r4
 8018ef0:	970a      	str	r7, [sp, #40]	@ 0x28
 8018ef2:	2700      	movs	r7, #0
 8018ef4:	e758      	b.n	8018da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8018ef6:	ea4f 1867 	mov.w	r8, r7, asr #5
 8018efa:	f009 031f 	and.w	r3, r9, #31
 8018efe:	f007 071f 	and.w	r7, r7, #31
 8018f02:	fa1f fc8c 	uxth.w	ip, ip
 8018f06:	45d0      	cmp	r8, sl
 8018f08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018f0a:	fa1f fe8e 	uxth.w	lr, lr
 8018f0e:	d10a      	bne.n	8018f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8018f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018f12:	449c      	add	ip, r3
 8018f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f16:	441f      	add	r7, r3
 8018f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018f1a:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018f1e:	fb03 e707 	mla	r7, r3, r7, lr
 8018f22:	80ef      	strh	r7, [r5, #6]
 8018f24:	e6bc      	b.n	8018ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018f26:	2900      	cmp	r1, #0
 8018f28:	f2c0 80a6 	blt.w	8019078 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8018f2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018f2e:	f1c7 0320 	rsb	r3, r7, #32
 8018f32:	4363      	muls	r3, r4
 8018f34:	2401      	movs	r4, #1
 8018f36:	940d      	str	r4, [sp, #52]	@ 0x34
 8018f38:	2420      	movs	r4, #32
 8018f3a:	940c      	str	r4, [sp, #48]	@ 0x30
 8018f3c:	fb93 f4f1 	sdiv	r4, r3, r1
 8018f40:	fb01 3b14 	mls	fp, r1, r4, r3
 8018f44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f46:	f1bb 0f00 	cmp.w	fp, #0
 8018f4a:	441f      	add	r7, r3
 8018f4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018f4e:	bfbc      	itt	lt
 8018f50:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018f54:	448b      	addlt	fp, r1
 8018f56:	fb04 e707 	mla	r7, r4, r7, lr
 8018f5a:	44a4      	add	ip, r4
 8018f5c:	80ef      	strh	r7, [r5, #6]
 8018f5e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018f62:	eb08 0503 	add.w	r5, r8, r3
 8018f66:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018f6a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8018f6e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018f72:	ea5e 0307 	orrs.w	r3, lr, r7
 8018f76:	d011      	beq.n	8018f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018f78:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8018f7c:	f1be 0f00 	cmp.w	lr, #0
 8018f80:	db0c      	blt.n	8018f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018f82:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018f84:	45be      	cmp	lr, r7
 8018f86:	da09      	bge.n	8018f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018f88:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018f8c:	45be      	cmp	lr, r7
 8018f8e:	bf3c      	itt	cc
 8018f90:	f10c 0708 	addcc.w	r7, ip, #8
 8018f94:	6107      	strcc	r7, [r0, #16]
 8018f96:	f10e 0701 	add.w	r7, lr, #1
 8018f9a:	6087      	str	r7, [r0, #8]
 8018f9c:	6907      	ldr	r7, [r0, #16]
 8018f9e:	b213      	sxth	r3, r2
 8018fa0:	4555      	cmp	r5, sl
 8018fa2:	9310      	str	r3, [sp, #64]	@ 0x40
 8018fa4:	807b      	strh	r3, [r7, #2]
 8018fa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fa8:	803d      	strh	r5, [r7, #0]
 8018faa:	80be      	strh	r6, [r7, #4]
 8018fac:	eb04 0c03 	add.w	ip, r4, r3
 8018fb0:	80fe      	strh	r6, [r7, #6]
 8018fb2:	d050      	beq.n	8019056 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8018fb4:	9b01      	ldr	r3, [sp, #4]
 8018fb6:	eba3 070c 	sub.w	r7, r3, ip
 8018fba:	ebab 0301 	sub.w	r3, fp, r1
 8018fbe:	443c      	add	r4, r7
 8018fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8018fc2:	0164      	lsls	r4, r4, #5
 8018fc4:	fb94 f8f1 	sdiv	r8, r4, r1
 8018fc8:	fb01 4418 	mls	r4, r1, r8, r4
 8018fcc:	2c00      	cmp	r4, #0
 8018fce:	bfbc      	itt	lt
 8018fd0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018fd4:	1864      	addlt	r4, r4, r1
 8018fd6:	f108 0701 	add.w	r7, r8, #1
 8018fda:	9711      	str	r7, [sp, #68]	@ 0x44
 8018fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fde:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018fe2:	191b      	adds	r3, r3, r4
 8018fe4:	f8be b004 	ldrh.w	fp, [lr, #4]
 8018fe8:	bf54      	ite	pl
 8018fea:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8018fec:	4647      	movmi	r7, r8
 8018fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ff0:	bf58      	it	pl
 8018ff2:	1a5b      	subpl	r3, r3, r1
 8018ff4:	44bb      	add	fp, r7
 8018ff6:	44bc      	add	ip, r7
 8018ff8:	bf58      	it	pl
 8018ffa:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8018ffc:	f8ae b004 	strh.w	fp, [lr, #4]
 8019000:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019004:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019008:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801900a:	f8ae b006 	strh.w	fp, [lr, #6]
 801900e:	443d      	add	r5, r7
 8019010:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019014:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019018:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801901c:	ea5b 0307 	orrs.w	r3, fp, r7
 8019020:	d011      	beq.n	8019046 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019022:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8019026:	f1bb 0f00 	cmp.w	fp, #0
 801902a:	db0c      	blt.n	8019046 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801902c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801902e:	45bb      	cmp	fp, r7
 8019030:	da09      	bge.n	8019046 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019032:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019036:	45bb      	cmp	fp, r7
 8019038:	bf3c      	itt	cc
 801903a:	f10e 0708 	addcc.w	r7, lr, #8
 801903e:	6107      	strcc	r7, [r0, #16]
 8019040:	f10b 0701 	add.w	r7, fp, #1
 8019044:	6087      	str	r7, [r0, #8]
 8019046:	6907      	ldr	r7, [r0, #16]
 8019048:	4555      	cmp	r5, sl
 801904a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801904c:	803d      	strh	r5, [r7, #0]
 801904e:	807b      	strh	r3, [r7, #2]
 8019050:	80be      	strh	r6, [r7, #4]
 8019052:	80fe      	strh	r6, [r7, #6]
 8019054:	d1c2      	bne.n	8018fdc <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8019056:	9b01      	ldr	r3, [sp, #4]
 8019058:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801905a:	eba3 0c0c 	sub.w	ip, r3, ip
 801905e:	6903      	ldr	r3, [r0, #16]
 8019060:	3720      	adds	r7, #32
 8019062:	8899      	ldrh	r1, [r3, #4]
 8019064:	4461      	add	r1, ip
 8019066:	8099      	strh	r1, [r3, #4]
 8019068:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801906a:	1a7f      	subs	r7, r7, r1
 801906c:	88d9      	ldrh	r1, [r3, #6]
 801906e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8019072:	f8a3 c006 	strh.w	ip, [r3, #6]
 8019076:	e613      	b.n	8018ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019078:	f04f 34ff 	mov.w	r4, #4294967295
 801907c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801907e:	4249      	negs	r1, r1
 8019080:	940d      	str	r4, [sp, #52]	@ 0x34
 8019082:	2400      	movs	r4, #0
 8019084:	437b      	muls	r3, r7
 8019086:	e758      	b.n	8018f3a <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8019088:	9905      	ldr	r1, [sp, #20]
 801908a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801908e:	f009 0c1f 	and.w	ip, r9, #31
 8019092:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8019096:	f001 011f 	and.w	r1, r1, #31
 801909a:	45f3      	cmp	fp, lr
 801909c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80190a0:	9102      	str	r1, [sp, #8]
 80190a2:	9904      	ldr	r1, [sp, #16]
 80190a4:	eba1 0406 	sub.w	r4, r1, r6
 80190a8:	d108      	bne.n	80190bc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80190aa:	9b02      	ldr	r3, [sp, #8]
 80190ac:	44a0      	add	r8, r4
 80190ae:	449c      	add	ip, r3
 80190b0:	f8a7 8004 	strh.w	r8, [r7, #4]
 80190b4:	fb04 a40c 	mla	r4, r4, ip, sl
 80190b8:	80fc      	strh	r4, [r7, #6]
 80190ba:	e461      	b.n	8018980 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80190bc:	9905      	ldr	r1, [sp, #20]
 80190be:	ebb1 0109 	subs.w	r1, r1, r9
 80190c2:	bf51      	iteee	pl
 80190c4:	f1cc 0520 	rsbpl	r5, ip, #32
 80190c8:	fb04 f40c 	mulmi.w	r4, r4, ip
 80190cc:	4249      	negmi	r1, r1
 80190ce:	2500      	movmi	r5, #0
 80190d0:	bf5d      	ittte	pl
 80190d2:	436c      	mulpl	r4, r5
 80190d4:	2520      	movpl	r5, #32
 80190d6:	f04f 0901 	movpl.w	r9, #1
 80190da:	f04f 39ff 	movmi.w	r9, #4294967295
 80190de:	9501      	str	r5, [sp, #4]
 80190e0:	9b01      	ldr	r3, [sp, #4]
 80190e2:	fb94 f5f1 	sdiv	r5, r4, r1
 80190e6:	fb01 4415 	mls	r4, r1, r5, r4
 80190ea:	449c      	add	ip, r3
 80190ec:	eb0b 0309 	add.w	r3, fp, r9
 80190f0:	2c00      	cmp	r4, #0
 80190f2:	bfbc      	itt	lt
 80190f4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80190f8:	1864      	addlt	r4, r4, r1
 80190fa:	44a8      	add	r8, r5
 80190fc:	fb05 ac0c 	mla	ip, r5, ip, sl
 8019100:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019104:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019108:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801910c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8019110:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019114:	ea58 0707 	orrs.w	r7, r8, r7
 8019118:	d011      	beq.n	801913e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801911a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801911e:	f1b8 0f00 	cmp.w	r8, #0
 8019122:	db0c      	blt.n	801913e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019124:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8019126:	45b8      	cmp	r8, r7
 8019128:	da09      	bge.n	801913e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801912a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801912e:	45b8      	cmp	r8, r7
 8019130:	bf3c      	itt	cc
 8019132:	f10c 0708 	addcc.w	r7, ip, #8
 8019136:	6107      	strcc	r7, [r0, #16]
 8019138:	f108 0701 	add.w	r7, r8, #1
 801913c:	6087      	str	r7, [r0, #8]
 801913e:	6907      	ldr	r7, [r0, #16]
 8019140:	f04f 0c00 	mov.w	ip, #0
 8019144:	b212      	sxth	r2, r2
 8019146:	459e      	cmp	lr, r3
 8019148:	803b      	strh	r3, [r7, #0]
 801914a:	442e      	add	r6, r5
 801914c:	807a      	strh	r2, [r7, #2]
 801914e:	f8a7 c004 	strh.w	ip, [r7, #4]
 8019152:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019156:	d04b      	beq.n	80191f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8019158:	9f04      	ldr	r7, [sp, #16]
 801915a:	1a64      	subs	r4, r4, r1
 801915c:	f04f 0a00 	mov.w	sl, #0
 8019160:	1bbf      	subs	r7, r7, r6
 8019162:	443d      	add	r5, r7
 8019164:	016d      	lsls	r5, r5, #5
 8019166:	fb95 f8f1 	sdiv	r8, r5, r1
 801916a:	fb01 5518 	mls	r5, r1, r8, r5
 801916e:	4565      	cmp	r5, ip
 8019170:	bfbc      	itt	lt
 8019172:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019176:	186d      	addlt	r5, r5, r1
 8019178:	f108 0701 	add.w	r7, r8, #1
 801917c:	9703      	str	r7, [sp, #12]
 801917e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019182:	1964      	adds	r4, r4, r5
 8019184:	444b      	add	r3, r9
 8019186:	bf54      	ite	pl
 8019188:	9f03      	ldrpl	r7, [sp, #12]
 801918a:	4647      	movmi	r7, r8
 801918c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019190:	bf58      	it	pl
 8019192:	1a64      	subpl	r4, r4, r1
 8019194:	443e      	add	r6, r7
 8019196:	44bb      	add	fp, r7
 8019198:	f8ac b004 	strh.w	fp, [ip, #4]
 801919c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80191a0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80191a4:	f8ac b006 	strh.w	fp, [ip, #6]
 80191a8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80191ac:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80191b0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80191b4:	ea5b 0707 	orrs.w	r7, fp, r7
 80191b8:	d011      	beq.n	80191de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80191ba:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80191be:	f1bb 0f00 	cmp.w	fp, #0
 80191c2:	db0c      	blt.n	80191de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80191c4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80191c6:	45bb      	cmp	fp, r7
 80191c8:	da09      	bge.n	80191de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80191ca:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80191ce:	45bb      	cmp	fp, r7
 80191d0:	bf3c      	itt	cc
 80191d2:	f10c 0708 	addcc.w	r7, ip, #8
 80191d6:	6107      	strcc	r7, [r0, #16]
 80191d8:	f10b 0701 	add.w	r7, fp, #1
 80191dc:	6087      	str	r7, [r0, #8]
 80191de:	6907      	ldr	r7, [r0, #16]
 80191e0:	459e      	cmp	lr, r3
 80191e2:	803b      	strh	r3, [r7, #0]
 80191e4:	807a      	strh	r2, [r7, #2]
 80191e6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80191ea:	f8a7 a006 	strh.w	sl, [r7, #6]
 80191ee:	d1c6      	bne.n	801917e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80191f0:	9b04      	ldr	r3, [sp, #16]
 80191f2:	1b9e      	subs	r6, r3, r6
 80191f4:	6903      	ldr	r3, [r0, #16]
 80191f6:	889a      	ldrh	r2, [r3, #4]
 80191f8:	4432      	add	r2, r6
 80191fa:	809a      	strh	r2, [r3, #4]
 80191fc:	9a02      	ldr	r2, [sp, #8]
 80191fe:	f102 0c20 	add.w	ip, r2, #32
 8019202:	9a01      	ldr	r2, [sp, #4]
 8019204:	ebac 0c02 	sub.w	ip, ip, r2
 8019208:	88da      	ldrh	r2, [r3, #6]
 801920a:	fb06 260c 	mla	r6, r6, ip, r2
 801920e:	80de      	strh	r6, [r3, #6]
 8019210:	f7ff bbb6 	b.w	8018980 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08019214 <_ZN8touchgfx7Outline6lineToEii>:
 8019214:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019216:	079b      	lsls	r3, r3, #30
 8019218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801921a:	460e      	mov	r6, r1
 801921c:	4615      	mov	r5, r2
 801921e:	d511      	bpl.n	8019244 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019220:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8019224:	ea86 0701 	eor.w	r7, r6, r1
 8019228:	ea85 0302 	eor.w	r3, r5, r2
 801922c:	433b      	orrs	r3, r7
 801922e:	d009      	beq.n	8019244 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019230:	4633      	mov	r3, r6
 8019232:	9500      	str	r5, [sp, #0]
 8019234:	f7ff fb4c 	bl	80188d0 <_ZN8touchgfx7Outline10renderLineEiiii>
 8019238:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801923a:	f043 0301 	orr.w	r3, r3, #1
 801923e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8019242:	6243      	str	r3, [r0, #36]	@ 0x24
 8019244:	b003      	add	sp, #12
 8019246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019248 <_ZN8touchgfx7Outline6moveToEii>:
 8019248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801924a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801924c:	4615      	mov	r5, r2
 801924e:	4604      	mov	r4, r0
 8019250:	460e      	mov	r6, r1
 8019252:	079a      	lsls	r2, r3, #30
 8019254:	d401      	bmi.n	801925a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8019256:	f7ff fb07 	bl	8018868 <_ZN8touchgfx7Outline5resetEv>
 801925a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801925c:	07db      	lsls	r3, r3, #31
 801925e:	d504      	bpl.n	801926a <_ZN8touchgfx7Outline6moveToEii+0x22>
 8019260:	4620      	mov	r0, r4
 8019262:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8019266:	f7ff ffd5 	bl	8019214 <_ZN8touchgfx7Outline6lineToEii>
 801926a:	6923      	ldr	r3, [r4, #16]
 801926c:	1170      	asrs	r0, r6, #5
 801926e:	1169      	asrs	r1, r5, #5
 8019270:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019274:	4290      	cmp	r0, r2
 8019276:	d103      	bne.n	8019280 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8019278:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801927c:	4291      	cmp	r1, r2
 801927e:	d01a      	beq.n	80192b6 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8019280:	88df      	ldrh	r7, [r3, #6]
 8019282:	889a      	ldrh	r2, [r3, #4]
 8019284:	433a      	orrs	r2, r7
 8019286:	d010      	beq.n	80192aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019288:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801928c:	2a00      	cmp	r2, #0
 801928e:	db0c      	blt.n	80192aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019290:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019292:	42ba      	cmp	r2, r7
 8019294:	da09      	bge.n	80192aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019296:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801929a:	42ba      	cmp	r2, r7
 801929c:	f102 0201 	add.w	r2, r2, #1
 80192a0:	bf38      	it	cc
 80192a2:	3308      	addcc	r3, #8
 80192a4:	60a2      	str	r2, [r4, #8]
 80192a6:	bf38      	it	cc
 80192a8:	6123      	strcc	r3, [r4, #16]
 80192aa:	6923      	ldr	r3, [r4, #16]
 80192ac:	2200      	movs	r2, #0
 80192ae:	8018      	strh	r0, [r3, #0]
 80192b0:	8059      	strh	r1, [r3, #2]
 80192b2:	809a      	strh	r2, [r3, #4]
 80192b4:	80da      	strh	r2, [r3, #6]
 80192b6:	6166      	str	r6, [r4, #20]
 80192b8:	6225      	str	r5, [r4, #32]
 80192ba:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80192be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80192c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192c4:	b0d0      	sub	sp, #320	@ 0x140
 80192c6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80192ca:	466c      	mov	r4, sp
 80192cc:	4627      	mov	r7, r4
 80192ce:	1a0d      	subs	r5, r1, r0
 80192d0:	f100 0308 	add.w	r3, r0, #8
 80192d4:	2d48      	cmp	r5, #72	@ 0x48
 80192d6:	f340 80d5 	ble.w	8019484 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80192da:	112d      	asrs	r5, r5, #4
 80192dc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80192e0:	f9b0 9000 	ldrsh.w	r9, [r0]
 80192e4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80192e8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80192ec:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80192f0:	6816      	ldr	r6, [r2, #0]
 80192f2:	6006      	str	r6, [r0, #0]
 80192f4:	6856      	ldr	r6, [r2, #4]
 80192f6:	6046      	str	r6, [r0, #4]
 80192f8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80192fc:	f8a2 8002 	strh.w	r8, [r2, #2]
 8019300:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019304:	f8a2 c006 	strh.w	ip, [r2, #6]
 8019308:	f1a1 0208 	sub.w	r2, r1, #8
 801930c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8019310:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8019314:	4565      	cmp	r5, ip
 8019316:	db06      	blt.n	8019326 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8019318:	d119      	bne.n	801934e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801931a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801931e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8019322:	42ae      	cmp	r6, r5
 8019324:	dd13      	ble.n	801934e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8019326:	460e      	mov	r6, r1
 8019328:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801932c:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8019330:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8019334:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8019338:	601d      	str	r5, [r3, #0]
 801933a:	6875      	ldr	r5, [r6, #4]
 801933c:	605d      	str	r5, [r3, #4]
 801933e:	f821 9c08 	strh.w	r9, [r1, #-8]
 8019342:	f821 cc06 	strh.w	ip, [r1, #-6]
 8019346:	f821 8c04 	strh.w	r8, [r1, #-4]
 801934a:	f821 ec02 	strh.w	lr, [r1, #-2]
 801934e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8019352:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8019356:	42ae      	cmp	r6, r5
 8019358:	db06      	blt.n	8019368 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801935a:	d116      	bne.n	801938a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801935c:	f9b0 c000 	ldrsh.w	ip, [r0]
 8019360:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8019364:	45ac      	cmp	ip, r5
 8019366:	da10      	bge.n	801938a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8019368:	681d      	ldr	r5, [r3, #0]
 801936a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801936e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8019372:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8019376:	6005      	str	r5, [r0, #0]
 8019378:	685d      	ldr	r5, [r3, #4]
 801937a:	f8a0 8008 	strh.w	r8, [r0, #8]
 801937e:	6045      	str	r5, [r0, #4]
 8019380:	8146      	strh	r6, [r0, #10]
 8019382:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8019386:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801938a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801938e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8019392:	4565      	cmp	r5, ip
 8019394:	db06      	blt.n	80193a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8019396:	d119      	bne.n	80193cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019398:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801939c:	f9b0 5000 	ldrsh.w	r5, [r0]
 80193a0:	42ae      	cmp	r6, r5
 80193a2:	da13      	bge.n	80193cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80193a4:	460e      	mov	r6, r1
 80193a6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80193aa:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80193ae:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80193b2:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80193b6:	6005      	str	r5, [r0, #0]
 80193b8:	6875      	ldr	r5, [r6, #4]
 80193ba:	6045      	str	r5, [r0, #4]
 80193bc:	f821 9c08 	strh.w	r9, [r1, #-8]
 80193c0:	f821 cc06 	strh.w	ip, [r1, #-6]
 80193c4:	f821 8c04 	strh.w	r8, [r1, #-4]
 80193c8:	f821 ec02 	strh.w	lr, [r1, #-2]
 80193cc:	3308      	adds	r3, #8
 80193ce:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80193d2:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80193d6:	45e6      	cmp	lr, ip
 80193d8:	dbf8      	blt.n	80193cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80193da:	d105      	bne.n	80193e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80193dc:	f9b3 6000 	ldrsh.w	r6, [r3]
 80193e0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80193e4:	42ae      	cmp	r6, r5
 80193e6:	dbf1      	blt.n	80193cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80193e8:	4615      	mov	r5, r2
 80193ea:	3a08      	subs	r2, #8
 80193ec:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80193f0:	45b4      	cmp	ip, r6
 80193f2:	dbf9      	blt.n	80193e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80193f4:	d105      	bne.n	8019402 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80193f6:	f9b0 8000 	ldrsh.w	r8, [r0]
 80193fa:	f9b2 6000 	ldrsh.w	r6, [r2]
 80193fe:	45b0      	cmp	r8, r6
 8019400:	dbf2      	blt.n	80193e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8019402:	4293      	cmp	r3, r2
 8019404:	f1a5 0608 	sub.w	r6, r5, #8
 8019408:	d816      	bhi.n	8019438 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801940a:	f8d6 c000 	ldr.w	ip, [r6]
 801940e:	f9b3 a000 	ldrsh.w	sl, [r3]
 8019412:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8019416:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801941a:	f8c3 c000 	str.w	ip, [r3]
 801941e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8019422:	f8c3 c004 	str.w	ip, [r3, #4]
 8019426:	f825 ac08 	strh.w	sl, [r5, #-8]
 801942a:	f825 ec06 	strh.w	lr, [r5, #-6]
 801942e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8019432:	f825 8c02 	strh.w	r8, [r5, #-2]
 8019436:	e7c9      	b.n	80193cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019438:	f8d6 e000 	ldr.w	lr, [r6]
 801943c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8019440:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8019444:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8019448:	f8c0 e000 	str.w	lr, [r0]
 801944c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8019450:	1a16      	subs	r6, r2, r0
 8019452:	f8c0 e004 	str.w	lr, [r0, #4]
 8019456:	f825 ac08 	strh.w	sl, [r5, #-8]
 801945a:	f825 cc06 	strh.w	ip, [r5, #-6]
 801945e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8019462:	f825 8c02 	strh.w	r8, [r5, #-2]
 8019466:	1acd      	subs	r5, r1, r3
 8019468:	10ed      	asrs	r5, r5, #3
 801946a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801946e:	bfb5      	itete	lt
 8019470:	e9c4 0200 	strdlt	r0, r2, [r4]
 8019474:	e9c4 3100 	strdge	r3, r1, [r4]
 8019478:	460a      	movlt	r2, r1
 801947a:	4603      	movge	r3, r0
 801947c:	3408      	adds	r4, #8
 801947e:	4618      	mov	r0, r3
 8019480:	4611      	mov	r1, r2
 8019482:	e724      	b.n	80192ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8019484:	4299      	cmp	r1, r3
 8019486:	d927      	bls.n	80194d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8019488:	f1a3 0210 	sub.w	r2, r3, #16
 801948c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8019490:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8019494:	45ac      	cmp	ip, r5
 8019496:	db06      	blt.n	80194a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8019498:	d11c      	bne.n	80194d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801949a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801949e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80194a2:	42ae      	cmp	r6, r5
 80194a4:	da16      	bge.n	80194d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80194a6:	4615      	mov	r5, r2
 80194a8:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80194ac:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80194b0:	3a08      	subs	r2, #8
 80194b2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80194b6:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80194ba:	6196      	str	r6, [r2, #24]
 80194bc:	42a8      	cmp	r0, r5
 80194be:	686e      	ldr	r6, [r5, #4]
 80194c0:	f8a2 9010 	strh.w	r9, [r2, #16]
 80194c4:	61d6      	str	r6, [r2, #28]
 80194c6:	f8a2 c012 	strh.w	ip, [r2, #18]
 80194ca:	f8a2 8014 	strh.w	r8, [r2, #20]
 80194ce:	f8a2 e016 	strh.w	lr, [r2, #22]
 80194d2:	d1db      	bne.n	801948c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80194d4:	3308      	adds	r3, #8
 80194d6:	e7d5      	b.n	8019484 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80194d8:	42bc      	cmp	r4, r7
 80194da:	d903      	bls.n	80194e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80194dc:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80194e0:	3c08      	subs	r4, #8
 80194e2:	e6f4      	b.n	80192ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80194e4:	b050      	add	sp, #320	@ 0x140
 80194e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080194ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80194ea:	b510      	push	{r4, lr}
 80194ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80194ee:	4604      	mov	r4, r0
 80194f0:	07da      	lsls	r2, r3, #31
 80194f2:	d507      	bpl.n	8019504 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80194f4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80194f8:	f7ff fe8c 	bl	8019214 <_ZN8touchgfx7Outline6lineToEii>
 80194fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80194fe:	f023 0301 	bic.w	r3, r3, #1
 8019502:	6243      	str	r3, [r0, #36]	@ 0x24
 8019504:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019506:	079b      	lsls	r3, r3, #30
 8019508:	d521      	bpl.n	801954e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801950a:	6923      	ldr	r3, [r4, #16]
 801950c:	88d9      	ldrh	r1, [r3, #6]
 801950e:	889a      	ldrh	r2, [r3, #4]
 8019510:	430a      	orrs	r2, r1
 8019512:	d010      	beq.n	8019536 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019514:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019518:	2a00      	cmp	r2, #0
 801951a:	db0c      	blt.n	8019536 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801951c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801951e:	428a      	cmp	r2, r1
 8019520:	da09      	bge.n	8019536 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019522:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8019526:	4291      	cmp	r1, r2
 8019528:	f102 0201 	add.w	r2, r2, #1
 801952c:	bf88      	it	hi
 801952e:	3308      	addhi	r3, #8
 8019530:	60a2      	str	r2, [r4, #8]
 8019532:	bf88      	it	hi
 8019534:	6123      	strhi	r3, [r4, #16]
 8019536:	68a1      	ldr	r1, [r4, #8]
 8019538:	b129      	cbz	r1, 8019546 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801953a:	6863      	ldr	r3, [r4, #4]
 801953c:	4299      	cmp	r1, r3
 801953e:	d802      	bhi.n	8019546 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8019540:	68e0      	ldr	r0, [r4, #12]
 8019542:	f7ff febd 	bl	80192c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8019546:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019548:	f023 0302 	bic.w	r3, r3, #2
 801954c:	6263      	str	r3, [r4, #36]	@ 0x24
 801954e:	68e0      	ldr	r0, [r4, #12]
 8019550:	bd10      	pop	{r4, pc}
	...

08019554 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8019554:	4b02      	ldr	r3, [pc, #8]	@ (8019560 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8019556:	6018      	str	r0, [r3, #0]
 8019558:	4b02      	ldr	r3, [pc, #8]	@ (8019564 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801955a:	6019      	str	r1, [r3, #0]
 801955c:	4770      	bx	lr
 801955e:	bf00      	nop
 8019560:	240621c0 	.word	0x240621c0
 8019564:	240621c4 	.word	0x240621c4

08019568 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8019568:	2300      	movs	r3, #0
 801956a:	4a02      	ldr	r2, [pc, #8]	@ (8019574 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 801956c:	6013      	str	r3, [r2, #0]
 801956e:	4a02      	ldr	r2, [pc, #8]	@ (8019578 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8019570:	6013      	str	r3, [r2, #0]
 8019572:	4770      	bx	lr
 8019574:	240621c0 	.word	0x240621c0
 8019578:	240621c4 	.word	0x240621c4

0801957c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801957c:	4b01      	ldr	r3, [pc, #4]	@ (8019584 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801957e:	6818      	ldr	r0, [r3, #0]
 8019580:	4770      	bx	lr
 8019582:	bf00      	nop
 8019584:	240621c0 	.word	0x240621c0

08019588 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8019588:	4b01      	ldr	r3, [pc, #4]	@ (8019590 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801958a:	6818      	ldr	r0, [r3, #0]
 801958c:	4770      	bx	lr
 801958e:	bf00      	nop
 8019590:	240621c4 	.word	0x240621c4

08019594 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019594:	b510      	push	{r4, lr}
 8019596:	6803      	ldr	r3, [r0, #0]
 8019598:	460c      	mov	r4, r1
 801959a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801959c:	4798      	blx	r3
 801959e:	1b03      	subs	r3, r0, r4
 80195a0:	4258      	negs	r0, r3
 80195a2:	4158      	adcs	r0, r3
 80195a4:	bd10      	pop	{r4, pc}
	...

080195a8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80195a8:	4b01      	ldr	r3, [pc, #4]	@ (80195b0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80195aa:	6019      	str	r1, [r3, #0]
 80195ac:	4770      	bx	lr
 80195ae:	bf00      	nop
 80195b0:	240621c8 	.word	0x240621c8

080195b4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80195b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b8:	4696      	mov	lr, r2
 80195ba:	b097      	sub	sp, #92	@ 0x5c
 80195bc:	4605      	mov	r5, r0
 80195be:	4614      	mov	r4, r2
 80195c0:	460e      	mov	r6, r1
 80195c2:	461f      	mov	r7, r3
 80195c4:	f10d 0c1c 	add.w	ip, sp, #28
 80195c8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80195cc:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80195d0:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80195d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80195d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80195dc:	f8de 3000 	ldr.w	r3, [lr]
 80195e0:	f104 0e14 	add.w	lr, r4, #20
 80195e4:	f8cc 3000 	str.w	r3, [ip]
 80195e8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80195ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80195f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80195f4:	f8de 3000 	ldr.w	r3, [lr]
 80195f8:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80195fc:	f8cc 3000 	str.w	r3, [ip]
 8019600:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8019604:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801960c:	f8de 3000 	ldr.w	r3, [lr]
 8019610:	4631      	mov	r1, r6
 8019612:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019614:	4628      	mov	r0, r5
 8019616:	f8cc 3000 	str.w	r3, [ip]
 801961a:	682b      	ldr	r3, [r5, #0]
 801961c:	9201      	str	r2, [sp, #4]
 801961e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019620:	f8cd 8008 	str.w	r8, [sp, #8]
 8019624:	9200      	str	r2, [sp, #0]
 8019626:	aa07      	add	r2, sp, #28
 8019628:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801962c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8019630:	463b      	mov	r3, r7
 8019632:	47d8      	blx	fp
 8019634:	46a6      	mov	lr, r4
 8019636:	f10d 0c1c 	add.w	ip, sp, #28
 801963a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801963e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019642:	f8de 3000 	ldr.w	r3, [lr]
 8019646:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801964a:	343c      	adds	r4, #60	@ 0x3c
 801964c:	f8cc 3000 	str.w	r3, [ip]
 8019650:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019654:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801965c:	f8de 3000 	ldr.w	r3, [lr]
 8019660:	f8cc 3000 	str.w	r3, [ip]
 8019664:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8019668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801966a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801966e:	6823      	ldr	r3, [r4, #0]
 8019670:	4631      	mov	r1, r6
 8019672:	4628      	mov	r0, r5
 8019674:	f8cc 3000 	str.w	r3, [ip]
 8019678:	682b      	ldr	r3, [r5, #0]
 801967a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801967e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019680:	f8cd 8008 	str.w	r8, [sp, #8]
 8019684:	9201      	str	r2, [sp, #4]
 8019686:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019688:	9200      	str	r2, [sp, #0]
 801968a:	aa07      	add	r2, sp, #28
 801968c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801968e:	463b      	mov	r3, r7
 8019690:	47a0      	blx	r4
 8019692:	b017      	add	sp, #92	@ 0x5c
 8019694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019698 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801969c:	b08d      	sub	sp, #52	@ 0x34
 801969e:	4688      	mov	r8, r1
 80196a0:	f8d3 c000 	ldr.w	ip, [r3]
 80196a4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80196a6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80196aa:	680f      	ldr	r7, [r1, #0]
 80196ac:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80196b0:	eba7 070c 	sub.w	r7, r7, ip
 80196b4:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80196b8:	edd3 6a07 	vldr	s13, [r3, #28]
 80196bc:	42bc      	cmp	r4, r7
 80196be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80196c0:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80196c4:	bfa8      	it	ge
 80196c6:	463c      	movge	r4, r7
 80196c8:	f9b1 9000 	ldrsh.w	r9, [r1]
 80196cc:	f9ba 1000 	ldrsh.w	r1, [sl]
 80196d0:	ee07 4a90 	vmov	s15, r4
 80196d4:	eb09 0e0c 	add.w	lr, r9, ip
 80196d8:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80196dc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80196e0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80196e4:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80196e8:	4571      	cmp	r1, lr
 80196ea:	ee25 4a04 	vmul.f32	s8, s10, s8
 80196ee:	ee65 4a24 	vmul.f32	s9, s10, s9
 80196f2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80196f6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80196fa:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80196fe:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019702:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019706:	ee36 0a84 	vadd.f32	s0, s13, s8
 801970a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801970e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019712:	f340 808c 	ble.w	801982e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019716:	eba1 060e 	sub.w	r6, r1, lr
 801971a:	fb96 f5f4 	sdiv	r5, r6, r4
 801971e:	ee07 5a10 	vmov	s14, r5
 8019722:	2d00      	cmp	r5, #0
 8019724:	fb04 6615 	mls	r6, r4, r5, r6
 8019728:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801972c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019730:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019734:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019738:	dd12      	ble.n	8019760 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801973a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801973e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019742:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019746:	eef5 6a40 	vcmp.f32	s13, #0.0
 801974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801974e:	bf14      	ite	ne
 8019750:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019754:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019758:	ee61 1a87 	vmul.f32	s3, s3, s14
 801975c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019760:	fb05 f204 	mul.w	r2, r5, r4
 8019764:	1abf      	subs	r7, r7, r2
 8019766:	4494      	add	ip, r2
 8019768:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801976c:	4411      	add	r1, r2
 801976e:	eb09 020c 	add.w	r2, r9, ip
 8019772:	b209      	sxth	r1, r1
 8019774:	443a      	add	r2, r7
 8019776:	428a      	cmp	r2, r1
 8019778:	bfc4      	itt	gt
 801977a:	eba1 0209 	subgt.w	r2, r1, r9
 801977e:	eba2 070c 	subgt.w	r7, r2, ip
 8019782:	2f00      	cmp	r7, #0
 8019784:	dd50      	ble.n	8019828 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019786:	fb97 f1f4 	sdiv	r1, r7, r4
 801978a:	fb04 7211 	mls	r2, r4, r1, r7
 801978e:	b90a      	cbnz	r2, 8019794 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019790:	3901      	subs	r1, #1
 8019792:	4622      	mov	r2, r4
 8019794:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019798:	6840      	ldr	r0, [r0, #4]
 801979a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801979e:	44b6      	add	lr, r6
 80197a0:	f8d0 a000 	ldr.w	sl, [r0]
 80197a4:	2900      	cmp	r1, #0
 80197a6:	bfcc      	ite	gt
 80197a8:	46a1      	movgt	r9, r4
 80197aa:	4691      	movle	r9, r2
 80197ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80197ae:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80197b0:	fb04 e505 	mla	r5, r4, r5, lr
 80197b4:	eef0 6a42 	vmov.f32	s13, s4
 80197b8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80197bc:	9008      	str	r0, [sp, #32]
 80197be:	eeb0 7a61 	vmov.f32	s14, s3
 80197c2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80197c4:	695b      	ldr	r3, [r3, #20]
 80197c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80197ca:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80197ce:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80197d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80197d4:	445b      	add	r3, fp
 80197d6:	9307      	str	r3, [sp, #28]
 80197d8:	ee16 3a90 	vmov	r3, s13
 80197dc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80197e0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80197e4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80197e8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80197ec:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80197f0:	ee17 7a90 	vmov	r7, s15
 80197f4:	ee73 7a42 	vsub.f32	s15, s6, s4
 80197f8:	fb97 f7f4 	sdiv	r7, r7, r4
 80197fc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019800:	ee17 ca90 	vmov	ip, s15
 8019804:	fb9c fcf4 	sdiv	ip, ip, r4
 8019808:	fb0c 3306 	mla	r3, ip, r6, r3
 801980c:	9302      	str	r3, [sp, #8]
 801980e:	ee17 3a10 	vmov	r3, s14
 8019812:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019816:	fb07 3706 	mla	r7, r7, r6, r3
 801981a:	eba9 0306 	sub.w	r3, r9, r6
 801981e:	e9cd 4700 	strd	r4, r7, [sp]
 8019822:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019826:	47a0      	blx	r4
 8019828:	b00d      	add	sp, #52	@ 0x34
 801982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801982e:	2500      	movs	r5, #0
 8019830:	462e      	mov	r6, r5
 8019832:	e799      	b.n	8019768 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019834 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019838:	b0db      	sub	sp, #364	@ 0x16c
 801983a:	461d      	mov	r5, r3
 801983c:	4614      	mov	r4, r2
 801983e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8019842:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019844:	4629      	mov	r1, r5
 8019846:	930a      	str	r3, [sp, #40]	@ 0x28
 8019848:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801984c:	9009      	str	r0, [sp, #36]	@ 0x24
 801984e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019850:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8019854:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8019858:	9310      	str	r3, [sp, #64]	@ 0x40
 801985a:	6803      	ldr	r3, [r0, #0]
 801985c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801985e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8019862:	47b8      	blx	r7
 8019864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019866:	6058      	str	r0, [r3, #4]
 8019868:	2800      	cmp	r0, #0
 801986a:	f000 83a1 	beq.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801986e:	682b      	ldr	r3, [r5, #0]
 8019870:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019874:	ed94 7a02 	vldr	s14, [r4, #8]
 8019878:	9314      	str	r3, [sp, #80]	@ 0x50
 801987a:	686b      	ldr	r3, [r5, #4]
 801987c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019880:	9315      	str	r3, [sp, #84]	@ 0x54
 8019882:	4bc1      	ldr	r3, [pc, #772]	@ (8019b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019884:	7819      	ldrb	r1, [r3, #0]
 8019886:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801988a:	2900      	cmp	r1, #0
 801988c:	bf16      	itet	ne
 801988e:	4619      	movne	r1, r3
 8019890:	4611      	moveq	r1, r2
 8019892:	4613      	movne	r3, r2
 8019894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019898:	9116      	str	r1, [sp, #88]	@ 0x58
 801989a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801989e:	f240 8387 	bls.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198a2:	ed94 7a07 	vldr	s14, [r4, #28]
 80198a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ae:	f240 837f 	bls.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198b2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80198b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198be:	f240 8377 	bls.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198c2:	6822      	ldr	r2, [r4, #0]
 80198c4:	4bb1      	ldr	r3, [pc, #708]	@ (8019b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80198c6:	429a      	cmp	r2, r3
 80198c8:	f2c0 8372 	blt.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198cc:	49b0      	ldr	r1, [pc, #704]	@ (8019b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80198ce:	6963      	ldr	r3, [r4, #20]
 80198d0:	428a      	cmp	r2, r1
 80198d2:	f300 836d 	bgt.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198d6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80198da:	48ae      	ldr	r0, [pc, #696]	@ (8019b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80198dc:	33ff      	adds	r3, #255	@ 0xff
 80198de:	4283      	cmp	r3, r0
 80198e0:	f200 8366 	bhi.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198e4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80198e6:	4dac      	ldr	r5, [pc, #688]	@ (8019b98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80198e8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80198ec:	33ff      	adds	r3, #255	@ 0xff
 80198ee:	42ab      	cmp	r3, r5
 80198f0:	f200 835e 	bhi.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198f4:	6862      	ldr	r2, [r4, #4]
 80198f6:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80198fa:	33ff      	adds	r3, #255	@ 0xff
 80198fc:	4283      	cmp	r3, r0
 80198fe:	f200 8357 	bhi.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019902:	69a1      	ldr	r1, [r4, #24]
 8019904:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8019908:	33ff      	adds	r3, #255	@ 0xff
 801990a:	4283      	cmp	r3, r0
 801990c:	f200 8350 	bhi.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019910:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019912:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8019916:	30ff      	adds	r0, #255	@ 0xff
 8019918:	42a8      	cmp	r0, r5
 801991a:	f200 8349 	bhi.w	8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801991e:	428a      	cmp	r2, r1
 8019920:	f280 8110 	bge.w	8019b44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019924:	429a      	cmp	r2, r3
 8019926:	f300 8119 	bgt.w	8019b5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801992a:	4299      	cmp	r1, r3
 801992c:	f280 811d 	bge.w	8019b6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019930:	2502      	movs	r5, #2
 8019932:	2701      	movs	r7, #1
 8019934:	46a9      	mov	r9, r5
 8019936:	46b8      	mov	r8, r7
 8019938:	f04f 0a00 	mov.w	sl, #0
 801993c:	4621      	mov	r1, r4
 801993e:	a849      	add	r0, sp, #292	@ 0x124
 8019940:	f004 f930 	bl	801dba4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019944:	4622      	mov	r2, r4
 8019946:	4653      	mov	r3, sl
 8019948:	a949      	add	r1, sp, #292	@ 0x124
 801994a:	f8cd 9000 	str.w	r9, [sp]
 801994e:	a819      	add	r0, sp, #100	@ 0x64
 8019950:	f004 fa58 	bl	801de04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019954:	4622      	mov	r2, r4
 8019956:	4653      	mov	r3, sl
 8019958:	a949      	add	r1, sp, #292	@ 0x124
 801995a:	f8cd 8000 	str.w	r8, [sp]
 801995e:	a829      	add	r0, sp, #164	@ 0xa4
 8019960:	f004 fa50 	bl	801de04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019964:	4643      	mov	r3, r8
 8019966:	4622      	mov	r2, r4
 8019968:	a949      	add	r1, sp, #292	@ 0x124
 801996a:	f8cd 9000 	str.w	r9, [sp]
 801996e:	a839      	add	r0, sp, #228	@ 0xe4
 8019970:	f004 fa48 	bl	801de04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019974:	42af      	cmp	r7, r5
 8019976:	af12      	add	r7, sp, #72	@ 0x48
 8019978:	bfb7      	itett	lt
 801997a:	2300      	movlt	r3, #0
 801997c:	2301      	movge	r3, #1
 801997e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8019980:	ac19      	addlt	r4, sp, #100	@ 0x64
 8019982:	bfb1      	iteee	lt
 8019984:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8019986:	ad19      	addge	r5, sp, #100	@ 0x64
 8019988:	930e      	strge	r3, [sp, #56]	@ 0x38
 801998a:	ac29      	addge	r4, sp, #164	@ 0xa4
 801998c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801998e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019992:	e887 0003 	stmia.w	r7, {r0, r1}
 8019996:	b928      	cbnz	r0, 80199a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019998:	4b80      	ldr	r3, [pc, #512]	@ (8019b9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801999a:	6818      	ldr	r0, [r3, #0]
 801999c:	6803      	ldr	r3, [r0, #0]
 801999e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199a0:	4798      	blx	r3
 80199a2:	6038      	str	r0, [r7, #0]
 80199a4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80199a6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80199aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80199ae:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80199b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80199b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80199b4:	6963      	ldr	r3, [r4, #20]
 80199b6:	440b      	add	r3, r1
 80199b8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80199bc:	4408      	add	r0, r1
 80199be:	b200      	sxth	r0, r0
 80199c0:	4283      	cmp	r3, r0
 80199c2:	900d      	str	r0, [sp, #52]	@ 0x34
 80199c4:	f280 80dd 	bge.w	8019b82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80199c8:	428b      	cmp	r3, r1
 80199ca:	da08      	bge.n	80199de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80199cc:	2a00      	cmp	r2, #0
 80199ce:	dd06      	ble.n	80199de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80199d0:	1acb      	subs	r3, r1, r3
 80199d2:	429a      	cmp	r2, r3
 80199d4:	f2c0 80e4 	blt.w	8019ba0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80199d8:	2b00      	cmp	r3, #0
 80199da:	f300 80e2 	bgt.w	8019ba2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80199de:	6967      	ldr	r7, [r4, #20]
 80199e0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80199e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199e6:	443b      	add	r3, r7
 80199e8:	461f      	mov	r7, r3
 80199ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80199ec:	1bdf      	subs	r7, r3, r7
 80199ee:	4297      	cmp	r7, r2
 80199f0:	bfa8      	it	ge
 80199f2:	4617      	movge	r7, r2
 80199f4:	2f00      	cmp	r7, #0
 80199f6:	f340 8166 	ble.w	8019cc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80199fa:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80199fc:	6829      	ldr	r1, [r5, #0]
 80199fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a02:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019a06:	4411      	add	r1, r2
 8019a08:	6820      	ldr	r0, [r4, #0]
 8019a0a:	4299      	cmp	r1, r3
 8019a0c:	dd1a      	ble.n	8019a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019a0e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019a12:	4402      	add	r2, r0
 8019a14:	440b      	add	r3, r1
 8019a16:	b21b      	sxth	r3, r3
 8019a18:	429a      	cmp	r2, r3
 8019a1a:	dc13      	bgt.n	8019a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019a1c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019a1e:	a912      	add	r1, sp, #72	@ 0x48
 8019a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	9206      	str	r2, [sp, #24]
 8019a28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019a2a:	9500      	str	r5, [sp, #0]
 8019a2c:	9205      	str	r2, [sp, #20]
 8019a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019a30:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019a34:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019a36:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019a3a:	aa49      	add	r2, sp, #292	@ 0x124
 8019a3c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019a40:	4623      	mov	r3, r4
 8019a42:	47c8      	blx	r9
 8019a44:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019a48:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019a4c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a54:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019a58:	68a1      	ldr	r1, [r4, #8]
 8019a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019a5e:	ed94 6a08 	vldr	s12, [r4, #32]
 8019a62:	edd4 6a07 	vldr	s13, [r4, #28]
 8019a66:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019a6a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019a6e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019a72:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019a76:	edc4 6a07 	vstr	s13, [r4, #28]
 8019a7a:	441a      	add	r2, r3
 8019a7c:	6963      	ldr	r3, [r4, #20]
 8019a7e:	3301      	adds	r3, #1
 8019a80:	6022      	str	r2, [r4, #0]
 8019a82:	6163      	str	r3, [r4, #20]
 8019a84:	69a3      	ldr	r3, [r4, #24]
 8019a86:	3b01      	subs	r3, #1
 8019a88:	61a3      	str	r3, [r4, #24]
 8019a8a:	6923      	ldr	r3, [r4, #16]
 8019a8c:	440b      	add	r3, r1
 8019a8e:	68e1      	ldr	r1, [r4, #12]
 8019a90:	428b      	cmp	r3, r1
 8019a92:	6123      	str	r3, [r4, #16]
 8019a94:	db15      	blt.n	8019ac2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019a96:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019a9a:	3201      	adds	r2, #1
 8019a9c:	1a5b      	subs	r3, r3, r1
 8019a9e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019aa2:	6022      	str	r2, [r4, #0]
 8019aa4:	6123      	str	r3, [r4, #16]
 8019aa6:	edc4 6a07 	vstr	s13, [r4, #28]
 8019aaa:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019aae:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019ab2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019ab6:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019abe:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019ac2:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019ac6:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019aca:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019ad2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019ad6:	68a9      	ldr	r1, [r5, #8]
 8019ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019adc:	ed95 6a08 	vldr	s12, [r5, #32]
 8019ae0:	edd5 6a07 	vldr	s13, [r5, #28]
 8019ae4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019ae8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019aec:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019af0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019af4:	edc5 6a07 	vstr	s13, [r5, #28]
 8019af8:	441a      	add	r2, r3
 8019afa:	696b      	ldr	r3, [r5, #20]
 8019afc:	3301      	adds	r3, #1
 8019afe:	602a      	str	r2, [r5, #0]
 8019b00:	616b      	str	r3, [r5, #20]
 8019b02:	69ab      	ldr	r3, [r5, #24]
 8019b04:	3b01      	subs	r3, #1
 8019b06:	61ab      	str	r3, [r5, #24]
 8019b08:	692b      	ldr	r3, [r5, #16]
 8019b0a:	440b      	add	r3, r1
 8019b0c:	68e9      	ldr	r1, [r5, #12]
 8019b0e:	428b      	cmp	r3, r1
 8019b10:	612b      	str	r3, [r5, #16]
 8019b12:	db15      	blt.n	8019b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019b14:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019b18:	3201      	adds	r2, #1
 8019b1a:	1a5b      	subs	r3, r3, r1
 8019b1c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019b20:	602a      	str	r2, [r5, #0]
 8019b22:	612b      	str	r3, [r5, #16]
 8019b24:	edc5 6a07 	vstr	s13, [r5, #28]
 8019b28:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019b2c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019b30:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019b34:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b3c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019b40:	3f01      	subs	r7, #1
 8019b42:	e757      	b.n	80199f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019b44:	4299      	cmp	r1, r3
 8019b46:	dc13      	bgt.n	8019b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019b48:	429a      	cmp	r2, r3
 8019b4a:	da14      	bge.n	8019b76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019b4c:	2502      	movs	r5, #2
 8019b4e:	2703      	movs	r7, #3
 8019b50:	f04f 0800 	mov.w	r8, #0
 8019b54:	46a9      	mov	r9, r5
 8019b56:	f04f 0a01 	mov.w	sl, #1
 8019b5a:	e6ef      	b.n	801993c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019b5c:	2501      	movs	r5, #1
 8019b5e:	2700      	movs	r7, #0
 8019b60:	46a9      	mov	r9, r5
 8019b62:	46b8      	mov	r8, r7
 8019b64:	f04f 0a02 	mov.w	sl, #2
 8019b68:	e6e8      	b.n	801993c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019b6a:	2501      	movs	r5, #1
 8019b6c:	2702      	movs	r7, #2
 8019b6e:	e6e1      	b.n	8019934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019b70:	2500      	movs	r5, #0
 8019b72:	2701      	movs	r7, #1
 8019b74:	e7f4      	b.n	8019b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019b76:	2702      	movs	r7, #2
 8019b78:	2503      	movs	r5, #3
 8019b7a:	f04f 0900 	mov.w	r9, #0
 8019b7e:	46b8      	mov	r8, r7
 8019b80:	e7e9      	b.n	8019b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019b82:	4613      	mov	r3, r2
 8019b84:	e728      	b.n	80199d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019b86:	bf00      	nop
 8019b88:	240621b0 	.word	0x240621b0
 8019b8c:	fffd8f01 	.word	0xfffd8f01
 8019b90:	00027100 	.word	0x00027100
 8019b94:	0004e1ff 	.word	0x0004e1ff
 8019b98:	0004e1fe 	.word	0x0004e1fe
 8019b9c:	240621b8 	.word	0x240621b8
 8019ba0:	4613      	mov	r3, r2
 8019ba2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8019ba4:	469e      	mov	lr, r3
 8019ba6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8019ba8:	469c      	mov	ip, r3
 8019baa:	9111      	str	r1, [sp, #68]	@ 0x44
 8019bac:	f04f 0900 	mov.w	r9, #0
 8019bb0:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8019bb4:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8019bb8:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8019bbc:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8019bc0:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8019bc4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019bc8:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8019bcc:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8019bd0:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8019bd4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8019bd8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8019bdc:	f1bc 0f00 	cmp.w	ip, #0
 8019be0:	d147      	bne.n	8019c72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019be2:	eb03 0c07 	add.w	ip, r3, r7
 8019be6:	1ad7      	subs	r7, r2, r3
 8019be8:	f1b9 0f00 	cmp.w	r9, #0
 8019bec:	d009      	beq.n	8019c02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019bee:	9029      	str	r0, [sp, #164]	@ 0xa4
 8019bf0:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8019bf4:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8019bf8:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8019bfc:	912d      	str	r1, [sp, #180]	@ 0xb4
 8019bfe:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8019c02:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019c04:	f04f 0800 	mov.w	r8, #0
 8019c08:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8019c0c:	9111      	str	r1, [sp, #68]	@ 0x44
 8019c0e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8019c12:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019c16:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019c1a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019c1e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8019c22:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019c26:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019c2a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019c2e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8019c32:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019c36:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019c3a:	f1be 0f00 	cmp.w	lr, #0
 8019c3e:	d031      	beq.n	8019ca4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019c40:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019c42:	4450      	add	r0, sl
 8019c44:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019c48:	4431      	add	r1, r6
 8019c4a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019c4e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019c52:	4549      	cmp	r1, r9
 8019c54:	db08      	blt.n	8019c68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019c56:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019c5a:	3001      	adds	r0, #1
 8019c5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019c60:	eba1 0109 	sub.w	r1, r1, r9
 8019c64:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019c68:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019c6c:	f04f 0801 	mov.w	r8, #1
 8019c70:	e7e3      	b.n	8019c3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019c72:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019c74:	4450      	add	r0, sl
 8019c76:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019c7a:	4431      	add	r1, r6
 8019c7c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019c80:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019c84:	4541      	cmp	r1, r8
 8019c86:	db08      	blt.n	8019c9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019c88:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019c8c:	3001      	adds	r0, #1
 8019c8e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019c92:	eba1 0108 	sub.w	r1, r1, r8
 8019c96:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019c9a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019c9e:	f04f 0901 	mov.w	r9, #1
 8019ca2:	e79b      	b.n	8019bdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019ca4:	449c      	add	ip, r3
 8019ca6:	1aff      	subs	r7, r7, r3
 8019ca8:	f1b8 0f00 	cmp.w	r8, #0
 8019cac:	d009      	beq.n	8019cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019cae:	9019      	str	r0, [sp, #100]	@ 0x64
 8019cb0:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8019cb4:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8019cb8:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8019cbc:	911d      	str	r1, [sp, #116]	@ 0x74
 8019cbe:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019cc2:	1ad2      	subs	r2, r2, r3
 8019cc4:	e68b      	b.n	80199de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019cc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019cc8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	f000 80d1 	beq.w	8019e72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019cd0:	ad19      	add	r5, sp, #100	@ 0x64
 8019cd2:	ac39      	add	r4, sp, #228	@ 0xe4
 8019cd4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019cd6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019cda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019cde:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ce0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019ce2:	6963      	ldr	r3, [r4, #20]
 8019ce4:	440b      	add	r3, r1
 8019ce6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019cea:	4408      	add	r0, r1
 8019cec:	b200      	sxth	r0, r0
 8019cee:	4283      	cmp	r3, r0
 8019cf0:	900d      	str	r0, [sp, #52]	@ 0x34
 8019cf2:	f280 80c1 	bge.w	8019e78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019cf6:	428b      	cmp	r3, r1
 8019cf8:	da08      	bge.n	8019d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019cfa:	2a00      	cmp	r2, #0
 8019cfc:	dd06      	ble.n	8019d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019cfe:	1acb      	subs	r3, r1, r3
 8019d00:	429a      	cmp	r2, r3
 8019d02:	f2c0 80bb 	blt.w	8019e7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	f300 80b9 	bgt.w	8019e7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019d0c:	6967      	ldr	r7, [r4, #20]
 8019d0e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019d12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019d14:	443b      	add	r3, r7
 8019d16:	461f      	mov	r7, r3
 8019d18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019d1a:	1bdf      	subs	r7, r3, r7
 8019d1c:	4297      	cmp	r7, r2
 8019d1e:	bfa8      	it	ge
 8019d20:	4617      	movge	r7, r2
 8019d22:	2f00      	cmp	r7, #0
 8019d24:	f340 813c 	ble.w	8019fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019d28:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019d2a:	6829      	ldr	r1, [r5, #0]
 8019d2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d30:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019d34:	4411      	add	r1, r2
 8019d36:	6820      	ldr	r0, [r4, #0]
 8019d38:	4299      	cmp	r1, r3
 8019d3a:	dd1a      	ble.n	8019d72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019d3c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019d40:	4402      	add	r2, r0
 8019d42:	440b      	add	r3, r1
 8019d44:	b21b      	sxth	r3, r3
 8019d46:	429a      	cmp	r2, r3
 8019d48:	dc13      	bgt.n	8019d72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019d4a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019d4c:	a912      	add	r1, sp, #72	@ 0x48
 8019d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	9206      	str	r2, [sp, #24]
 8019d56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019d58:	9500      	str	r5, [sp, #0]
 8019d5a:	9205      	str	r2, [sp, #20]
 8019d5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019d5e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019d62:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019d64:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019d68:	aa49      	add	r2, sp, #292	@ 0x124
 8019d6a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019d6e:	4623      	mov	r3, r4
 8019d70:	47c8      	blx	r9
 8019d72:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019d76:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019d7a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d82:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019d86:	68a1      	ldr	r1, [r4, #8]
 8019d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d8c:	ed94 6a08 	vldr	s12, [r4, #32]
 8019d90:	edd4 6a07 	vldr	s13, [r4, #28]
 8019d94:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019d98:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019d9c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019da0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019da4:	edc4 6a07 	vstr	s13, [r4, #28]
 8019da8:	441a      	add	r2, r3
 8019daa:	6963      	ldr	r3, [r4, #20]
 8019dac:	3301      	adds	r3, #1
 8019dae:	6022      	str	r2, [r4, #0]
 8019db0:	6163      	str	r3, [r4, #20]
 8019db2:	69a3      	ldr	r3, [r4, #24]
 8019db4:	3b01      	subs	r3, #1
 8019db6:	61a3      	str	r3, [r4, #24]
 8019db8:	6923      	ldr	r3, [r4, #16]
 8019dba:	440b      	add	r3, r1
 8019dbc:	68e1      	ldr	r1, [r4, #12]
 8019dbe:	428b      	cmp	r3, r1
 8019dc0:	6123      	str	r3, [r4, #16]
 8019dc2:	db15      	blt.n	8019df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019dc4:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019dc8:	3201      	adds	r2, #1
 8019dca:	1a5b      	subs	r3, r3, r1
 8019dcc:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019dd0:	6022      	str	r2, [r4, #0]
 8019dd2:	6123      	str	r3, [r4, #16]
 8019dd4:	edc4 6a07 	vstr	s13, [r4, #28]
 8019dd8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019ddc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019de0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019de4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019dec:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019df0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019df4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019df8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e00:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019e04:	68a9      	ldr	r1, [r5, #8]
 8019e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019e0a:	ed95 6a08 	vldr	s12, [r5, #32]
 8019e0e:	edd5 6a07 	vldr	s13, [r5, #28]
 8019e12:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019e16:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019e1a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019e1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019e22:	edc5 6a07 	vstr	s13, [r5, #28]
 8019e26:	441a      	add	r2, r3
 8019e28:	696b      	ldr	r3, [r5, #20]
 8019e2a:	3301      	adds	r3, #1
 8019e2c:	602a      	str	r2, [r5, #0]
 8019e2e:	616b      	str	r3, [r5, #20]
 8019e30:	69ab      	ldr	r3, [r5, #24]
 8019e32:	3b01      	subs	r3, #1
 8019e34:	61ab      	str	r3, [r5, #24]
 8019e36:	692b      	ldr	r3, [r5, #16]
 8019e38:	440b      	add	r3, r1
 8019e3a:	68e9      	ldr	r1, [r5, #12]
 8019e3c:	428b      	cmp	r3, r1
 8019e3e:	612b      	str	r3, [r5, #16]
 8019e40:	db15      	blt.n	8019e6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019e42:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019e46:	3201      	adds	r2, #1
 8019e48:	1a5b      	subs	r3, r3, r1
 8019e4a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019e4e:	602a      	str	r2, [r5, #0]
 8019e50:	612b      	str	r3, [r5, #16]
 8019e52:	edc5 6a07 	vstr	s13, [r5, #28]
 8019e56:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019e5a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019e5e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019e62:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e6a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019e6e:	3f01      	subs	r7, #1
 8019e70:	e757      	b.n	8019d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019e72:	ad39      	add	r5, sp, #228	@ 0xe4
 8019e74:	ac19      	add	r4, sp, #100	@ 0x64
 8019e76:	e72d      	b.n	8019cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019e78:	4613      	mov	r3, r2
 8019e7a:	e744      	b.n	8019d06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019e7c:	4613      	mov	r3, r2
 8019e7e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8019e80:	469e      	mov	lr, r3
 8019e82:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8019e86:	461f      	mov	r7, r3
 8019e88:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8019e8c:	f04f 0900 	mov.w	r9, #0
 8019e90:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8019e94:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8019e98:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8019e9c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8019ea0:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8019ea4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8019ea6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8019eaa:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8019eae:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8019eb2:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8019eb6:	960e      	str	r6, [sp, #56]	@ 0x38
 8019eb8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8019ebc:	2f00      	cmp	r7, #0
 8019ebe:	d146      	bne.n	8019f4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019ec0:	449c      	add	ip, r3
 8019ec2:	1ad7      	subs	r7, r2, r3
 8019ec4:	f1b9 0f00 	cmp.w	r9, #0
 8019ec8:	d009      	beq.n	8019ede <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019eca:	9039      	str	r0, [sp, #228]	@ 0xe4
 8019ecc:	913d      	str	r1, [sp, #244]	@ 0xf4
 8019ece:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8019ed2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8019ed6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8019eda:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8019ede:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019ee0:	f04f 0800 	mov.w	r8, #0
 8019ee4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8019ee8:	910e      	str	r1, [sp, #56]	@ 0x38
 8019eea:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8019eee:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019ef2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019ef6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019efa:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8019efe:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019f02:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019f06:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019f0a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8019f0e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019f12:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019f16:	f1be 0f00 	cmp.w	lr, #0
 8019f1a:	d030      	beq.n	8019f7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019f1c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019f1e:	4450      	add	r0, sl
 8019f20:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019f24:	4431      	add	r1, r6
 8019f26:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019f2a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019f2e:	4549      	cmp	r1, r9
 8019f30:	db08      	blt.n	8019f44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019f32:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019f36:	3001      	adds	r0, #1
 8019f38:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019f3c:	eba1 0109 	sub.w	r1, r1, r9
 8019f40:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019f44:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019f48:	f04f 0801 	mov.w	r8, #1
 8019f4c:	e7e3      	b.n	8019f16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019f4e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019f50:	4450      	add	r0, sl
 8019f52:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019f56:	4431      	add	r1, r6
 8019f58:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019f5c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019f60:	4541      	cmp	r1, r8
 8019f62:	db08      	blt.n	8019f76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019f64:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019f68:	3001      	adds	r0, #1
 8019f6a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019f6e:	eba1 0108 	sub.w	r1, r1, r8
 8019f72:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019f76:	3f01      	subs	r7, #1
 8019f78:	f04f 0901 	mov.w	r9, #1
 8019f7c:	e79e      	b.n	8019ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019f7e:	449c      	add	ip, r3
 8019f80:	1aff      	subs	r7, r7, r3
 8019f82:	f1b8 0f00 	cmp.w	r8, #0
 8019f86:	d009      	beq.n	8019f9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019f88:	9019      	str	r0, [sp, #100]	@ 0x64
 8019f8a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8019f8e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8019f92:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8019f96:	911d      	str	r1, [sp, #116]	@ 0x74
 8019f98:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019f9c:	1ad2      	subs	r2, r2, r3
 8019f9e:	e6b5      	b.n	8019d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	b923      	cbnz	r3, 8019fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019fa6:	4b04      	ldr	r3, [pc, #16]	@ (8019fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019fa8:	6818      	ldr	r0, [r3, #0]
 8019faa:	6803      	ldr	r3, [r0, #0]
 8019fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019fae:	4798      	blx	r3
 8019fb0:	b05b      	add	sp, #364	@ 0x16c
 8019fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb6:	bf00      	nop
 8019fb8:	240621b8 	.word	0x240621b8

08019fbc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8019fbc:	b570      	push	{r4, r5, r6, lr}
 8019fbe:	4604      	mov	r4, r0
 8019fc0:	2500      	movs	r5, #0
 8019fc2:	9805      	ldr	r0, [sp, #20]
 8019fc4:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8019fc8:	6061      	str	r1, [r4, #4]
 8019fca:	8263      	strh	r3, [r4, #18]
 8019fcc:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8019fd0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019fd4:	8025      	strh	r5, [r4, #0]
 8019fd6:	7221      	strb	r1, [r4, #8]
 8019fd8:	7266      	strb	r6, [r4, #9]
 8019fda:	60e0      	str	r0, [r4, #12]
 8019fdc:	8222      	strh	r2, [r4, #16]
 8019fde:	82a3      	strh	r3, [r4, #20]
 8019fe0:	82e5      	strh	r5, [r4, #22]
 8019fe2:	8325      	strh	r5, [r4, #24]
 8019fe4:	8365      	strh	r5, [r4, #26]
 8019fe6:	83a5      	strh	r5, [r4, #28]
 8019fe8:	83e5      	strh	r5, [r4, #30]
 8019fea:	8425      	strh	r5, [r4, #32]
 8019fec:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8019ff0:	b32e      	cbz	r6, 801a03e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019ff2:	6803      	ldr	r3, [r0, #0]
 8019ff4:	695b      	ldr	r3, [r3, #20]
 8019ff6:	4798      	blx	r3
 8019ff8:	4606      	mov	r6, r0
 8019ffa:	b300      	cbz	r0, 801a03e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019ffc:	68e0      	ldr	r0, [r4, #12]
 8019ffe:	4631      	mov	r1, r6
 801a000:	6803      	ldr	r3, [r0, #0]
 801a002:	68db      	ldr	r3, [r3, #12]
 801a004:	4798      	blx	r3
 801a006:	4605      	mov	r5, r0
 801a008:	b1c8      	cbz	r0, 801a03e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a00a:	7b43      	ldrb	r3, [r0, #13]
 801a00c:	7a82      	ldrb	r2, [r0, #10]
 801a00e:	005b      	lsls	r3, r3, #1
 801a010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a014:	4313      	orrs	r3, r2
 801a016:	8423      	strh	r3, [r4, #32]
 801a018:	7a63      	ldrb	r3, [r4, #9]
 801a01a:	2b06      	cmp	r3, #6
 801a01c:	d10f      	bne.n	801a03e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801a01e:	68e0      	ldr	r0, [r4, #12]
 801a020:	462a      	mov	r2, r5
 801a022:	4631      	mov	r1, r6
 801a024:	6803      	ldr	r3, [r0, #0]
 801a026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a028:	4798      	blx	r3
 801a02a:	7b6b      	ldrb	r3, [r5, #13]
 801a02c:	005b      	lsls	r3, r3, #1
 801a02e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a032:	7aab      	ldrb	r3, [r5, #10]
 801a034:	4313      	orrs	r3, r2
 801a036:	4418      	add	r0, r3
 801a038:	8c23      	ldrh	r3, [r4, #32]
 801a03a:	4418      	add	r0, r3
 801a03c:	8420      	strh	r0, [r4, #32]
 801a03e:	4620      	mov	r0, r4
 801a040:	bd70      	pop	{r4, r5, r6, pc}

0801a042 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a046:	2400      	movs	r4, #0
 801a048:	b085      	sub	sp, #20
 801a04a:	4681      	mov	r9, r0
 801a04c:	4688      	mov	r8, r1
 801a04e:	4692      	mov	sl, r2
 801a050:	469b      	mov	fp, r3
 801a052:	4627      	mov	r7, r4
 801a054:	4625      	mov	r5, r4
 801a056:	4626      	mov	r6, r4
 801a058:	4554      	cmp	r4, sl
 801a05a:	da2a      	bge.n	801a0b2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a05c:	2300      	movs	r3, #0
 801a05e:	9303      	str	r3, [sp, #12]
 801a060:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a064:	429d      	cmp	r5, r3
 801a066:	d004      	beq.n	801a072 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a068:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a06c:	429d      	cmp	r5, r3
 801a06e:	bf18      	it	ne
 801a070:	462f      	movne	r7, r5
 801a072:	ab03      	add	r3, sp, #12
 801a074:	4642      	mov	r2, r8
 801a076:	4659      	mov	r1, fp
 801a078:	4648      	mov	r0, r9
 801a07a:	f003 fba9 	bl	801d7d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a07e:	4605      	mov	r5, r0
 801a080:	b1b8      	cbz	r0, 801a0b2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a082:	280a      	cmp	r0, #10
 801a084:	d015      	beq.n	801a0b2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a086:	9a03      	ldr	r2, [sp, #12]
 801a088:	b18a      	cbz	r2, 801a0ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a08a:	7b50      	ldrb	r0, [r2, #13]
 801a08c:	4639      	mov	r1, r7
 801a08e:	7a93      	ldrb	r3, [r2, #10]
 801a090:	0040      	lsls	r0, r0, #1
 801a092:	8895      	ldrh	r5, [r2, #4]
 801a094:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a098:	4303      	orrs	r3, r0
 801a09a:	4640      	mov	r0, r8
 801a09c:	9301      	str	r3, [sp, #4]
 801a09e:	f8d8 3000 	ldr.w	r3, [r8]
 801a0a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a0a4:	4798      	blx	r3
 801a0a6:	9b01      	ldr	r3, [sp, #4]
 801a0a8:	4418      	add	r0, r3
 801a0aa:	4406      	add	r6, r0
 801a0ac:	b2b6      	uxth	r6, r6
 801a0ae:	3401      	adds	r4, #1
 801a0b0:	e7d2      	b.n	801a058 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a0b2:	4630      	mov	r0, r6
 801a0b4:	b005      	add	sp, #20
 801a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a0ba:	2a02      	cmp	r2, #2
 801a0bc:	b530      	push	{r4, r5, lr}
 801a0be:	d011      	beq.n	801a0e4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a0c0:	2a03      	cmp	r2, #3
 801a0c2:	d01c      	beq.n	801a0fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a0c4:	2a01      	cmp	r2, #1
 801a0c6:	d10c      	bne.n	801a0e2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a0c8:	888b      	ldrh	r3, [r1, #4]
 801a0ca:	8801      	ldrh	r1, [r0, #0]
 801a0cc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a0d0:	1a5b      	subs	r3, r3, r1
 801a0d2:	8844      	ldrh	r4, [r0, #2]
 801a0d4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a0d8:	1a9b      	subs	r3, r3, r2
 801a0da:	8004      	strh	r4, [r0, #0]
 801a0dc:	8081      	strh	r1, [r0, #4]
 801a0de:	8043      	strh	r3, [r0, #2]
 801a0e0:	80c2      	strh	r2, [r0, #6]
 801a0e2:	bd30      	pop	{r4, r5, pc}
 801a0e4:	88cb      	ldrh	r3, [r1, #6]
 801a0e6:	8842      	ldrh	r2, [r0, #2]
 801a0e8:	1a9b      	subs	r3, r3, r2
 801a0ea:	88c2      	ldrh	r2, [r0, #6]
 801a0ec:	1a9b      	subs	r3, r3, r2
 801a0ee:	888a      	ldrh	r2, [r1, #4]
 801a0f0:	8801      	ldrh	r1, [r0, #0]
 801a0f2:	8043      	strh	r3, [r0, #2]
 801a0f4:	1a52      	subs	r2, r2, r1
 801a0f6:	8881      	ldrh	r1, [r0, #4]
 801a0f8:	1a52      	subs	r2, r2, r1
 801a0fa:	8002      	strh	r2, [r0, #0]
 801a0fc:	e7f1      	b.n	801a0e2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a0fe:	88cb      	ldrh	r3, [r1, #6]
 801a100:	8841      	ldrh	r1, [r0, #2]
 801a102:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a106:	1a5b      	subs	r3, r3, r1
 801a108:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a10c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a110:	1a9b      	subs	r3, r3, r2
 801a112:	8045      	strh	r5, [r0, #2]
 801a114:	8082      	strh	r2, [r0, #4]
 801a116:	8003      	strh	r3, [r0, #0]
 801a118:	80c4      	strh	r4, [r0, #6]
 801a11a:	e7e2      	b.n	801a0e2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a11c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a120:	b09f      	sub	sp, #124	@ 0x7c
 801a122:	920f      	str	r2, [sp, #60]	@ 0x3c
 801a124:	9312      	str	r3, [sp, #72]	@ 0x48
 801a126:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a128:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a12a:	8812      	ldrh	r2, [r2, #0]
 801a12c:	889b      	ldrh	r3, [r3, #4]
 801a12e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801a130:	4413      	add	r3, r2
 801a132:	900e      	str	r0, [sp, #56]	@ 0x38
 801a134:	6828      	ldr	r0, [r5, #0]
 801a136:	b21b      	sxth	r3, r3
 801a138:	9117      	str	r1, [sp, #92]	@ 0x5c
 801a13a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801a13e:	9311      	str	r3, [sp, #68]	@ 0x44
 801a140:	6803      	ldr	r3, [r0, #0]
 801a142:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 801a146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a148:	4798      	blx	r3
 801a14a:	682b      	ldr	r3, [r5, #0]
 801a14c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801a14e:	7b1a      	ldrb	r2, [r3, #12]
 801a150:	7adb      	ldrb	r3, [r3, #11]
 801a152:	9215      	str	r2, [sp, #84]	@ 0x54
 801a154:	9316      	str	r3, [sp, #88]	@ 0x58
 801a156:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801a15a:	2c00      	cmp	r4, #0
 801a15c:	d067      	beq.n	801a22e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a15e:	7c2b      	ldrb	r3, [r5, #16]
 801a160:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801a162:	2b06      	cmp	r3, #6
 801a164:	bf14      	ite	ne
 801a166:	2301      	movne	r3, #1
 801a168:	2302      	moveq	r3, #2
 801a16a:	4413      	add	r3, r2
 801a16c:	f04f 0900 	mov.w	r9, #0
 801a170:	9310      	str	r3, [sp, #64]	@ 0x40
 801a172:	464c      	mov	r4, r9
 801a174:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801a178:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 801a17c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a17e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a180:	4293      	cmp	r3, r2
 801a182:	f280 808b 	bge.w	801a29c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a186:	2300      	movs	r3, #0
 801a188:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 801a18c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 801a190:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a194:	429c      	cmp	r4, r3
 801a196:	d006      	beq.n	801a1a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 801a198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a19a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801a19e:	4294      	cmp	r4, r2
 801a1a0:	bf18      	it	ne
 801a1a2:	4623      	movne	r3, r4
 801a1a4:	930c      	str	r3, [sp, #48]	@ 0x30
 801a1a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a1a8:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801a1aa:	682a      	ldr	r2, [r5, #0]
 801a1ac:	428b      	cmp	r3, r1
 801a1ae:	db40      	blt.n	801a232 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801a1b0:	6813      	ldr	r3, [r2, #0]
 801a1b2:	4610      	mov	r0, r2
 801a1b4:	695b      	ldr	r3, [r3, #20]
 801a1b6:	4798      	blx	r3
 801a1b8:	4604      	mov	r4, r0
 801a1ba:	6828      	ldr	r0, [r5, #0]
 801a1bc:	aa1d      	add	r2, sp, #116	@ 0x74
 801a1be:	4621      	mov	r1, r4
 801a1c0:	6803      	ldr	r3, [r0, #0]
 801a1c2:	689f      	ldr	r7, [r3, #8]
 801a1c4:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a1c8:	47b8      	blx	r7
 801a1ca:	901c      	str	r0, [sp, #112]	@ 0x70
 801a1cc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a1d0:	429c      	cmp	r4, r3
 801a1d2:	f000 80eb 	beq.w	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a1d6:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a1da:	429c      	cmp	r4, r3
 801a1dc:	f000 80e6 	beq.w	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a1e0:	2c00      	cmp	r4, #0
 801a1e2:	f000 810d 	beq.w	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a1e6:	2c0a      	cmp	r4, #10
 801a1e8:	d05e      	beq.n	801a2a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a1ea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a1ec:	b36a      	cbz	r2, 801a24a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801a1ee:	8894      	ldrh	r4, [r2, #4]
 801a1f0:	f1bb 0f00 	cmp.w	fp, #0
 801a1f4:	d03a      	beq.n	801a26c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a1f6:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a1fa:	f1bb 0f01 	cmp.w	fp, #1
 801a1fe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a202:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801a206:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a20a:	ea49 0903 	orr.w	r9, r9, r3
 801a20e:	d133      	bne.n	801a278 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 801a210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a212:	eba6 0609 	sub.w	r6, r6, r9
 801a216:	2b00      	cmp	r3, #0
 801a218:	d14d      	bne.n	801a2b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a21a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a21c:	eb09 0306 	add.w	r3, r9, r6
 801a220:	4413      	add	r3, r2
 801a222:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a224:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a228:	4293      	cmp	r3, r2
 801a22a:	da4e      	bge.n	801a2ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a22c:	e036      	b.n	801a29c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a22e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a230:	e79c      	b.n	801a16c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801a232:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801a236:	4659      	mov	r1, fp
 801a238:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a23a:	9301      	str	r3, [sp, #4]
 801a23c:	ab1d      	add	r3, sp, #116	@ 0x74
 801a23e:	9300      	str	r3, [sp, #0]
 801a240:	ab1c      	add	r3, sp, #112	@ 0x70
 801a242:	f003 fb0e 	bl	801d862 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a246:	4604      	mov	r4, r0
 801a248:	e7c0      	b.n	801a1cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801a24a:	6828      	ldr	r0, [r5, #0]
 801a24c:	6803      	ldr	r3, [r0, #0]
 801a24e:	691b      	ldr	r3, [r3, #16]
 801a250:	4798      	blx	r3
 801a252:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a256:	4298      	cmp	r0, r3
 801a258:	f000 80a8 	beq.w	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a25c:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a260:	4298      	cmp	r0, r3
 801a262:	f000 80a3 	beq.w	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a266:	f1bb 0f00 	cmp.w	fp, #0
 801a26a:	d100      	bne.n	801a26e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801a26c:	444e      	add	r6, r9
 801a26e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a270:	2a00      	cmp	r2, #0
 801a272:	d1c0      	bne.n	801a1f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801a274:	4691      	mov	r9, r2
 801a276:	e099      	b.n	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	f000 80c2 	beq.w	801a404 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 801a280:	f1bb 0f00 	cmp.w	fp, #0
 801a284:	d117      	bne.n	801a2b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a286:	6828      	ldr	r0, [r5, #0]
 801a288:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a28a:	6803      	ldr	r3, [r0, #0]
 801a28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a28e:	4798      	blx	r3
 801a290:	4406      	add	r6, r0
 801a292:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a294:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a296:	1af3      	subs	r3, r6, r3
 801a298:	4293      	cmp	r3, r2
 801a29a:	dd16      	ble.n	801a2ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801a29c:	2c00      	cmp	r4, #0
 801a29e:	f000 80af 	beq.w	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a2a2:	2c0a      	cmp	r4, #10
 801a2a4:	f040 809d 	bne.w	801a3e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 801a2a8:	240a      	movs	r4, #10
 801a2aa:	fab4 f084 	clz	r0, r4
 801a2ae:	0940      	lsrs	r0, r0, #5
 801a2b0:	b01f      	add	sp, #124	@ 0x7c
 801a2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2b6:	6828      	ldr	r0, [r5, #0]
 801a2b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a2ba:	6803      	ldr	r3, [r0, #0]
 801a2bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a2be:	4798      	blx	r3
 801a2c0:	f1bb 0f01 	cmp.w	fp, #1
 801a2c4:	eba6 0600 	sub.w	r6, r6, r0
 801a2c8:	d0a7      	beq.n	801a21a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801a2ca:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801a2cc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a2ce:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a2d2:	f9b3 8000 	ldrsh.w	r8, [r3]
 801a2d6:	7b43      	ldrb	r3, [r0, #13]
 801a2d8:	4431      	add	r1, r6
 801a2da:	015b      	lsls	r3, r3, #5
 801a2dc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a2e0:	7983      	ldrb	r3, [r0, #6]
 801a2e2:	4313      	orrs	r3, r2
 801a2e4:	440b      	add	r3, r1
 801a2e6:	4543      	cmp	r3, r8
 801a2e8:	db60      	blt.n	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a2ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a2ec:	4299      	cmp	r1, r3
 801a2ee:	da5d      	bge.n	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a2f0:	6828      	ldr	r0, [r5, #0]
 801a2f2:	45b0      	cmp	r8, r6
 801a2f4:	6803      	ldr	r3, [r0, #0]
 801a2f6:	bfcc      	ite	gt
 801a2f8:	eba8 0806 	subgt.w	r8, r8, r6
 801a2fc:	f04f 0800 	movle.w	r8, #0
 801a300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a302:	bfc8      	it	gt
 801a304:	fa1f f888 	uxthgt.w	r8, r8
 801a308:	4798      	blx	r3
 801a30a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a30c:	7b53      	ldrb	r3, [r2, #13]
 801a30e:	00d9      	lsls	r1, r3, #3
 801a310:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801a314:	7a11      	ldrb	r1, [r2, #8]
 801a316:	4339      	orrs	r1, r7
 801a318:	065f      	lsls	r7, r3, #25
 801a31a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801a31c:	bf48      	it	mi
 801a31e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801a322:	4407      	add	r7, r0
 801a324:	bf48      	it	mi
 801a326:	b209      	sxthmi	r1, r1
 801a328:	1a7f      	subs	r7, r7, r1
 801a32a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801a32c:	b2bf      	uxth	r7, r7
 801a32e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a332:	fa0f fa87 	sxth.w	sl, r7
 801a336:	4551      	cmp	r1, sl
 801a338:	dd3c      	ble.n	801a3b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a33a:	011b      	lsls	r3, r3, #4
 801a33c:	79d0      	ldrb	r0, [r2, #7]
 801a33e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a342:	4303      	orrs	r3, r0
 801a344:	449a      	add	sl, r3
 801a346:	4551      	cmp	r1, sl
 801a348:	dc30      	bgt.n	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a34a:	1bcf      	subs	r7, r1, r7
 801a34c:	468a      	mov	sl, r1
 801a34e:	b23f      	sxth	r7, r7
 801a350:	9219      	str	r2, [sp, #100]	@ 0x64
 801a352:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a354:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a356:	6828      	ldr	r0, [r5, #0]
 801a358:	2a00      	cmp	r2, #0
 801a35a:	d12d      	bne.n	801a3b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801a35c:	9318      	str	r3, [sp, #96]	@ 0x60
 801a35e:	b2bf      	uxth	r7, r7
 801a360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a362:	6819      	ldr	r1, [r3, #0]
 801a364:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 801a366:	6801      	ldr	r1, [r0, #0]
 801a368:	9314      	str	r3, [sp, #80]	@ 0x50
 801a36a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801a36c:	4788      	blx	r1
 801a36e:	79a9      	ldrb	r1, [r5, #6]
 801a370:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a372:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a374:	7ba9      	ldrb	r1, [r5, #14]
 801a376:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a378:	910a      	str	r1, [sp, #40]	@ 0x28
 801a37a:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801a37e:	9109      	str	r1, [sp, #36]	@ 0x24
 801a380:	68a9      	ldr	r1, [r5, #8]
 801a382:	9306      	str	r3, [sp, #24]
 801a384:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801a386:	9205      	str	r2, [sp, #20]
 801a388:	9304      	str	r3, [sp, #16]
 801a38a:	f8cd a004 	str.w	sl, [sp, #4]
 801a38e:	e9cd 8702 	strd	r8, r7, [sp, #8]
 801a392:	44b0      	add	r8, r6
 801a394:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801a396:	fa0f f388 	sxth.w	r3, r8
 801a39a:	9300      	str	r3, [sp, #0]
 801a39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a39e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a3a2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a3a4:	681a      	ldr	r2, [r3, #0]
 801a3a6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a3a8:	685b      	ldr	r3, [r3, #4]
 801a3aa:	47b8      	blx	r7
 801a3ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a3ae:	3301      	adds	r3, #1
 801a3b0:	930d      	str	r3, [sp, #52]	@ 0x34
 801a3b2:	e6e3      	b.n	801a17c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 801a3b4:	2700      	movs	r7, #0
 801a3b6:	e7cb      	b.n	801a350 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801a3b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a3ba:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801a3be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a3c0:	f8dc 1000 	ldr.w	r1, [ip]
 801a3c4:	e9cd 6204 	strd	r6, r2, [sp, #16]
 801a3c8:	79aa      	ldrb	r2, [r5, #6]
 801a3ca:	9203      	str	r2, [sp, #12]
 801a3cc:	7baa      	ldrb	r2, [r5, #14]
 801a3ce:	9202      	str	r2, [sp, #8]
 801a3d0:	68aa      	ldr	r2, [r5, #8]
 801a3d2:	e9cd 0200 	strd	r0, r2, [sp]
 801a3d6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801a3d8:	4660      	mov	r0, ip
 801a3da:	688f      	ldr	r7, [r1, #8]
 801a3dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a3de:	47b8      	blx	r7
 801a3e0:	e7e4      	b.n	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801a3e2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a3e4:	3501      	adds	r5, #1
 801a3e6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801a3e8:	429d      	cmp	r5, r3
 801a3ea:	f6bf af5e 	bge.w	801a2aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a3ee:	4659      	mov	r1, fp
 801a3f0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801a3f2:	f7ee fdf9 	bl	8008fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a3f6:	4604      	mov	r4, r0
 801a3f8:	b110      	cbz	r0, 801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801a3fa:	280a      	cmp	r0, #10
 801a3fc:	d1f2      	bne.n	801a3e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 801a3fe:	e753      	b.n	801a2a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a400:	2400      	movs	r4, #0
 801a402:	e752      	b.n	801a2aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a404:	f1bb 0f00 	cmp.w	fp, #0
 801a408:	f43f af43 	beq.w	801a292 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a40c:	e75d      	b.n	801a2ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801a40e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a40e:	b530      	push	{r4, r5, lr}
 801a410:	8ac4      	ldrh	r4, [r0, #22]
 801a412:	8b45      	ldrh	r5, [r0, #26]
 801a414:	8343      	strh	r3, [r0, #26]
 801a416:	442c      	add	r4, r5
 801a418:	1ae4      	subs	r4, r4, r3
 801a41a:	8b83      	ldrh	r3, [r0, #28]
 801a41c:	82c4      	strh	r4, [r0, #22]
 801a41e:	8b04      	ldrh	r4, [r0, #24]
 801a420:	4422      	add	r2, r4
 801a422:	440c      	add	r4, r1
 801a424:	1a59      	subs	r1, r3, r1
 801a426:	83c2      	strh	r2, [r0, #30]
 801a428:	8304      	strh	r4, [r0, #24]
 801a42a:	8381      	strh	r1, [r0, #28]
 801a42c:	bd30      	pop	{r4, r5, pc}

0801a42e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801a42e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a432:	4604      	mov	r4, r0
 801a434:	8a47      	ldrh	r7, [r0, #18]
 801a436:	68c0      	ldr	r0, [r0, #12]
 801a438:	b085      	sub	sp, #20
 801a43a:	6803      	ldr	r3, [r0, #0]
 801a43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a43e:	4798      	blx	r3
 801a440:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801a444:	7a63      	ldrb	r3, [r4, #9]
 801a446:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801a44a:	3b01      	subs	r3, #1
 801a44c:	42b7      	cmp	r7, r6
 801a44e:	bfac      	ite	ge
 801a450:	f04f 0900 	movge.w	r9, #0
 801a454:	f04f 0901 	movlt.w	r9, #1
 801a458:	2b05      	cmp	r3, #5
 801a45a:	d804      	bhi.n	801a466 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801a45c:	e8df f003 	tbb	[pc, r3]
 801a460:	470f0854 	.word	0x470f0854
 801a464:	4c4c      	.short	0x4c4c
 801a466:	2500      	movs	r5, #0
 801a468:	46a9      	mov	r9, r5
 801a46a:	462e      	mov	r6, r5
 801a46c:	462f      	mov	r7, r5
 801a46e:	e00e      	b.n	801a48e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a470:	42b7      	cmp	r7, r6
 801a472:	f04f 0500 	mov.w	r5, #0
 801a476:	bfb4      	ite	lt
 801a478:	2600      	movlt	r6, #0
 801a47a:	2601      	movge	r6, #1
 801a47c:	e7f6      	b.n	801a46c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a47e:	42b7      	cmp	r7, r6
 801a480:	464d      	mov	r5, r9
 801a482:	f04f 0900 	mov.w	r9, #0
 801a486:	bfb4      	ite	lt
 801a488:	2600      	movlt	r6, #0
 801a48a:	2601      	movge	r6, #1
 801a48c:	464f      	mov	r7, r9
 801a48e:	f04f 0800 	mov.w	r8, #0
 801a492:	f8a4 8016 	strh.w	r8, [r4, #22]
 801a496:	f8a4 8018 	strh.w	r8, [r4, #24]
 801a49a:	f8cd 8004 	str.w	r8, [sp, #4]
 801a49e:	2300      	movs	r3, #0
 801a4a0:	9303      	str	r3, [sp, #12]
 801a4a2:	8823      	ldrh	r3, [r4, #0]
 801a4a4:	2b20      	cmp	r3, #32
 801a4a6:	d033      	beq.n	801a510 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801a4a8:	f242 010b 	movw	r1, #8203	@ 0x200b
 801a4ac:	1a5a      	subs	r2, r3, r1
 801a4ae:	f1d2 0a00 	rsbs	sl, r2, #0
 801a4b2:	eb4a 0a02 	adc.w	sl, sl, r2
 801a4b6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801a4ba:	4293      	cmp	r3, r2
 801a4bc:	d008      	beq.n	801a4d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a4be:	428b      	cmp	r3, r1
 801a4c0:	9a01      	ldr	r2, [sp, #4]
 801a4c2:	bf0e      	itee	eq
 801a4c4:	f04f 0a01 	moveq.w	sl, #1
 801a4c8:	461a      	movne	r2, r3
 801a4ca:	f04f 0a00 	movne.w	sl, #0
 801a4ce:	9201      	str	r2, [sp, #4]
 801a4d0:	ab03      	add	r3, sp, #12
 801a4d2:	68e2      	ldr	r2, [r4, #12]
 801a4d4:	7a21      	ldrb	r1, [r4, #8]
 801a4d6:	6860      	ldr	r0, [r4, #4]
 801a4d8:	f003 f97a 	bl	801d7d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a4dc:	8020      	strh	r0, [r4, #0]
 801a4de:	b9d8      	cbnz	r0, 801a518 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801a4e0:	8ba2      	ldrh	r2, [r4, #28]
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	4611      	mov	r1, r2
 801a4e6:	4620      	mov	r0, r4
 801a4e8:	f7ff ff91 	bl	801a40e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a4ec:	e06e      	b.n	801a5cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a4ee:	2500      	movs	r5, #0
 801a4f0:	2701      	movs	r7, #1
 801a4f2:	46a9      	mov	r9, r5
 801a4f4:	462e      	mov	r6, r5
 801a4f6:	e7ca      	b.n	801a48e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a4f8:	42b7      	cmp	r7, r6
 801a4fa:	f04f 0500 	mov.w	r5, #0
 801a4fe:	bfb4      	ite	lt
 801a500:	2700      	movlt	r7, #0
 801a502:	2701      	movge	r7, #1
 801a504:	462e      	mov	r6, r5
 801a506:	e7c2      	b.n	801a48e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a508:	2500      	movs	r5, #0
 801a50a:	2601      	movs	r6, #1
 801a50c:	46a9      	mov	r9, r5
 801a50e:	e7ad      	b.n	801a46c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a510:	9301      	str	r3, [sp, #4]
 801a512:	f04f 0a01 	mov.w	sl, #1
 801a516:	e7db      	b.n	801a4d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a518:	8b63      	ldrh	r3, [r4, #26]
 801a51a:	280a      	cmp	r0, #10
 801a51c:	f103 0301 	add.w	r3, r3, #1
 801a520:	8363      	strh	r3, [r4, #26]
 801a522:	d0dd      	beq.n	801a4e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801a524:	9a03      	ldr	r2, [sp, #12]
 801a526:	bb62      	cbnz	r2, 801a582 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801a528:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a52c:	4298      	cmp	r0, r3
 801a52e:	d003      	beq.n	801a538 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a530:	f242 030b 	movw	r3, #8203	@ 0x200b
 801a534:	4298      	cmp	r0, r3
 801a536:	d1b2      	bne.n	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a538:	8823      	ldrh	r3, [r4, #0]
 801a53a:	8ba1      	ldrh	r1, [r4, #28]
 801a53c:	2b20      	cmp	r3, #32
 801a53e:	d003      	beq.n	801a548 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801a540:	f242 000b 	movw	r0, #8203	@ 0x200b
 801a544:	4283      	cmp	r3, r0
 801a546:	d131      	bne.n	801a5ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801a548:	f1ba 0f00 	cmp.w	sl, #0
 801a54c:	bf0a      	itet	eq
 801a54e:	4688      	moveq	r8, r1
 801a550:	4650      	movne	r0, sl
 801a552:	2001      	moveq	r0, #1
 801a554:	440a      	add	r2, r1
 801a556:	8b23      	ldrh	r3, [r4, #24]
 801a558:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a55c:	b292      	uxth	r2, r2
 801a55e:	83a2      	strh	r2, [r4, #28]
 801a560:	4413      	add	r3, r2
 801a562:	f1b9 0f00 	cmp.w	r9, #0
 801a566:	d102      	bne.n	801a56e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801a568:	2d00      	cmp	r5, #0
 801a56a:	d042      	beq.n	801a5f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801a56c:	b300      	cbz	r0, 801a5b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801a56e:	8c21      	ldrh	r1, [r4, #32]
 801a570:	4419      	add	r1, r3
 801a572:	458c      	cmp	ip, r1
 801a574:	da37      	bge.n	801a5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a576:	8ae1      	ldrh	r1, [r4, #22]
 801a578:	2900      	cmp	r1, #0
 801a57a:	d034      	beq.n	801a5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a57c:	4563      	cmp	r3, ip
 801a57e:	dd8e      	ble.n	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a580:	e01d      	b.n	801a5be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801a582:	8893      	ldrh	r3, [r2, #4]
 801a584:	9901      	ldr	r1, [sp, #4]
 801a586:	8023      	strh	r3, [r4, #0]
 801a588:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801a58c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801a590:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 801a594:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801a598:	ea4b 0b00 	orr.w	fp, fp, r0
 801a59c:	68e0      	ldr	r0, [r4, #12]
 801a59e:	6803      	ldr	r3, [r0, #0]
 801a5a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a5a2:	4798      	blx	r3
 801a5a4:	eb0b 0200 	add.w	r2, fp, r0
 801a5a8:	b292      	uxth	r2, r2
 801a5aa:	e7c5      	b.n	801a538 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a5ac:	2000      	movs	r0, #0
 801a5ae:	e7d1      	b.n	801a554 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801a5b0:	4563      	cmp	r3, ip
 801a5b2:	f77f af74 	ble.w	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a5b6:	8ae3      	ldrh	r3, [r4, #22]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	f43f af70 	beq.w	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a5be:	2301      	movs	r3, #1
 801a5c0:	8c22      	ldrh	r2, [r4, #32]
 801a5c2:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801a5c6:	8be3      	ldrh	r3, [r4, #30]
 801a5c8:	4413      	add	r3, r2
 801a5ca:	83e3      	strh	r3, [r4, #30]
 801a5cc:	68e0      	ldr	r0, [r4, #12]
 801a5ce:	6803      	ldr	r3, [r0, #0]
 801a5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a5d2:	4798      	blx	r3
 801a5d4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801a5d8:	4418      	add	r0, r3
 801a5da:	8a63      	ldrh	r3, [r4, #18]
 801a5dc:	1a18      	subs	r0, r3, r0
 801a5de:	8260      	strh	r0, [r4, #18]
 801a5e0:	b005      	add	sp, #20
 801a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	4611      	mov	r1, r2
 801a5ea:	4620      	mov	r0, r4
 801a5ec:	f7ff ff0f 	bl	801a40e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a5f0:	e755      	b.n	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a5f2:	4563      	cmp	r3, ip
 801a5f4:	dd14      	ble.n	801a620 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801a5f6:	b117      	cbz	r7, 801a5fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801a5f8:	2301      	movs	r3, #1
 801a5fa:	460a      	mov	r2, r1
 801a5fc:	e772      	b.n	801a4e4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801a5fe:	2e00      	cmp	r6, #0
 801a600:	f43f af4d 	beq.w	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a604:	2800      	cmp	r0, #0
 801a606:	f47f af4a 	bne.w	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a60a:	f1ba 0f00 	cmp.w	sl, #0
 801a60e:	d002      	beq.n	801a616 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801a610:	2301      	movs	r3, #1
 801a612:	4642      	mov	r2, r8
 801a614:	e767      	b.n	801a4e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801a616:	8ae3      	ldrh	r3, [r4, #22]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	f43f af40 	beq.w	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a61e:	e7d5      	b.n	801a5cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a620:	2800      	cmp	r0, #0
 801a622:	f47f af3c 	bne.w	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a626:	f1ba 0f00 	cmp.w	sl, #0
 801a62a:	f43f af38 	beq.w	801a49e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a62e:	2301      	movs	r3, #1
 801a630:	4642      	mov	r2, r8
 801a632:	e7da      	b.n	801a5ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801a634 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a634:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a636:	4605      	mov	r5, r0
 801a638:	b08f      	sub	sp, #60	@ 0x3c
 801a63a:	4617      	mov	r7, r2
 801a63c:	461c      	mov	r4, r3
 801a63e:	460e      	mov	r6, r1
 801a640:	b1d1      	cbz	r1, 801a678 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	4620      	mov	r0, r4
 801a646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a648:	4798      	blx	r3
 801a64a:	4240      	negs	r0, r0
 801a64c:	9603      	str	r6, [sp, #12]
 801a64e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a652:	b200      	sxth	r0, r0
 801a654:	9700      	str	r7, [sp, #0]
 801a656:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a65a:	4629      	mov	r1, r5
 801a65c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801a660:	2401      	movs	r4, #1
 801a662:	a805      	add	r0, sp, #20
 801a664:	f7ff fcaa 	bl	8019fbc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a668:	a805      	add	r0, sp, #20
 801a66a:	f7ff fee0 	bl	801a42e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a66e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a672:	b163      	cbz	r3, 801a68e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801a674:	3401      	adds	r4, #1
 801a676:	e7f7      	b.n	801a668 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a678:	2401      	movs	r4, #1
 801a67a:	f003 f975 	bl	801d968 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a67e:	280a      	cmp	r0, #10
 801a680:	4628      	mov	r0, r5
 801a682:	bf08      	it	eq
 801a684:	3401      	addeq	r4, #1
 801a686:	f003 f96f 	bl	801d968 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a68a:	2800      	cmp	r0, #0
 801a68c:	d1f7      	bne.n	801a67e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a68e:	b2a0      	uxth	r0, r4
 801a690:	b00f      	add	sp, #60	@ 0x3c
 801a692:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a698:	b0e3      	sub	sp, #396	@ 0x18c
 801a69a:	461c      	mov	r4, r3
 801a69c:	4683      	mov	fp, r0
 801a69e:	4688      	mov	r8, r1
 801a6a0:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	f000 8112 	beq.w	801a8cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a6a8:	6823      	ldr	r3, [r4, #0]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	f000 810e 	beq.w	801a8cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a6b0:	7ba3      	ldrb	r3, [r4, #14]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	f000 810a 	beq.w	801a8cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a6b8:	ad0a      	add	r5, sp, #40	@ 0x28
 801a6ba:	6810      	ldr	r0, [r2, #0]
 801a6bc:	6851      	ldr	r1, [r2, #4]
 801a6be:	462b      	mov	r3, r5
 801a6c0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801a6c4:	c303      	stmia	r3!, {r0, r1}
 801a6c6:	2100      	movs	r1, #0
 801a6c8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a6cc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a6d0:	4628      	mov	r0, r5
 801a6d2:	910c      	str	r1, [sp, #48]	@ 0x30
 801a6d4:	a90c      	add	r1, sp, #48	@ 0x30
 801a6d6:	79a2      	ldrb	r2, [r4, #6]
 801a6d8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a6dc:	f7ff fced 	bl	801a0ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a6e0:	a90c      	add	r1, sp, #48	@ 0x30
 801a6e2:	79a2      	ldrb	r2, [r4, #6]
 801a6e4:	4608      	mov	r0, r1
 801a6e6:	f7ff fce8 	bl	801a0ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a6ea:	a817      	add	r0, sp, #92	@ 0x5c
 801a6ec:	f002 fd10 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 801a6f0:	6820      	ldr	r0, [r4, #0]
 801a6f2:	6803      	ldr	r3, [r0, #0]
 801a6f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a6f6:	4798      	blx	r3
 801a6f8:	4606      	mov	r6, r0
 801a6fa:	6820      	ldr	r0, [r4, #0]
 801a6fc:	6803      	ldr	r3, [r0, #0]
 801a6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a700:	4798      	blx	r3
 801a702:	4633      	mov	r3, r6
 801a704:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a706:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a708:	9000      	str	r0, [sp, #0]
 801a70a:	a817      	add	r0, sp, #92	@ 0x5c
 801a70c:	f002 fd5b 	bl	801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a710:	6820      	ldr	r0, [r4, #0]
 801a712:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a716:	6803      	ldr	r3, [r0, #0]
 801a718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a71a:	4798      	blx	r3
 801a71c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a720:	6823      	ldr	r3, [r4, #0]
 801a722:	4607      	mov	r7, r0
 801a724:	4406      	add	r6, r0
 801a726:	a830      	add	r0, sp, #192	@ 0xc0
 801a728:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a72c:	f002 fcf0 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 801a730:	7c23      	ldrb	r3, [r4, #16]
 801a732:	b17b      	cbz	r3, 801a754 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a734:	6820      	ldr	r0, [r4, #0]
 801a736:	6803      	ldr	r3, [r0, #0]
 801a738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a73a:	4798      	blx	r3
 801a73c:	9009      	str	r0, [sp, #36]	@ 0x24
 801a73e:	6820      	ldr	r0, [r4, #0]
 801a740:	6802      	ldr	r2, [r0, #0]
 801a742:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801a744:	4790      	blx	r2
 801a746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a748:	9000      	str	r0, [sp, #0]
 801a74a:	a830      	add	r0, sp, #192	@ 0xc0
 801a74c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a74e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a750:	f002 fd39 	bl	801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a754:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a758:	a80e      	add	r0, sp, #56	@ 0x38
 801a75a:	7be2      	ldrb	r2, [r4, #15]
 801a75c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a760:	1a8a      	subs	r2, r1, r2
 801a762:	7c21      	ldrb	r1, [r4, #16]
 801a764:	9103      	str	r1, [sp, #12]
 801a766:	b292      	uxth	r2, r2
 801a768:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a76c:	9102      	str	r1, [sp, #8]
 801a76e:	6821      	ldr	r1, [r4, #0]
 801a770:	9101      	str	r1, [sp, #4]
 801a772:	7961      	ldrb	r1, [r4, #5]
 801a774:	9100      	str	r1, [sp, #0]
 801a776:	a930      	add	r1, sp, #192	@ 0xc0
 801a778:	f7ff fc20 	bl	8019fbc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a77c:	2e00      	cmp	r6, #0
 801a77e:	dc5b      	bgt.n	801a838 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801a780:	af17      	add	r7, sp, #92	@ 0x5c
 801a782:	f04f 0900 	mov.w	r9, #0
 801a786:	7c23      	ldrb	r3, [r4, #16]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	f000 80b1 	beq.w	801a8f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a78e:	a80e      	add	r0, sp, #56	@ 0x38
 801a790:	f7ff fe4d 	bl	801a42e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a794:	f1ba 0f00 	cmp.w	sl, #0
 801a798:	f000 80a5 	beq.w	801a8e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a79c:	7c23      	ldrb	r3, [r4, #16]
 801a79e:	2264      	movs	r2, #100	@ 0x64
 801a7a0:	4639      	mov	r1, r7
 801a7a2:	a849      	add	r0, sp, #292	@ 0x124
 801a7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7a6:	f00f fa90 	bl	8029cca <memcpy>
 801a7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	f000 80a7 	beq.w	801a900 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a7b2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801a7b6:	7922      	ldrb	r2, [r4, #4]
 801a7b8:	2a01      	cmp	r2, #1
 801a7ba:	f040 808a 	bne.w	801a8d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a7be:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801a7c2:	1ac0      	subs	r0, r0, r3
 801a7c4:	2302      	movs	r3, #2
 801a7c6:	fb90 f0f3 	sdiv	r0, r0, r3
 801a7ca:	b200      	sxth	r0, r0
 801a7cc:	7c23      	ldrb	r3, [r4, #16]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	f000 808b 	beq.w	801a8ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a7d4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801a7d8:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801a7dc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a7e0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a7e4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a7e8:	2100      	movs	r1, #0
 801a7ea:	4410      	add	r0, r2
 801a7ec:	4642      	mov	r2, r8
 801a7ee:	b200      	sxth	r0, r0
 801a7f0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801a7f4:	9000      	str	r0, [sp, #0]
 801a7f6:	4658      	mov	r0, fp
 801a7f8:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801a7fc:	f7ff fc8e 	bl	801a11c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a800:	2800      	cmp	r0, #0
 801a802:	d163      	bne.n	801a8cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a804:	b2b2      	uxth	r2, r6
 801a806:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a80a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a80e:	4413      	add	r3, r2
 801a810:	1a8a      	subs	r2, r1, r2
 801a812:	b21b      	sxth	r3, r3
 801a814:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a818:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801a81c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a820:	2a00      	cmp	r2, #0
 801a822:	d153      	bne.n	801a8cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a824:	6822      	ldr	r2, [r4, #0]
 801a826:	8869      	ldrh	r1, [r5, #2]
 801a828:	7a12      	ldrb	r2, [r2, #8]
 801a82a:	1a9b      	subs	r3, r3, r2
 801a82c:	88ea      	ldrh	r2, [r5, #6]
 801a82e:	440a      	add	r2, r1
 801a830:	b212      	sxth	r2, r2
 801a832:	4293      	cmp	r3, r2
 801a834:	dda7      	ble.n	801a786 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801a836:	e049      	b.n	801a8cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a838:	7c23      	ldrb	r3, [r4, #16]
 801a83a:	444f      	add	r7, r9
 801a83c:	b1c3      	cbz	r3, 801a870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801a83e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801a842:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a846:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a84a:	443b      	add	r3, r7
 801a84c:	4293      	cmp	r3, r2
 801a84e:	da97      	bge.n	801a780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a850:	a80e      	add	r0, sp, #56	@ 0x38
 801a852:	f7ff fdec 	bl	801a42e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a856:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801a85a:	3b01      	subs	r3, #1
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	454b      	cmp	r3, r9
 801a860:	9309      	str	r3, [sp, #36]	@ 0x24
 801a862:	d021      	beq.n	801a8a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801a864:	7961      	ldrb	r1, [r4, #5]
 801a866:	a817      	add	r0, sp, #92	@ 0x5c
 801a868:	f7ee fbbe 	bl	8008fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a86e:	e7f4      	b.n	801a85a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801a870:	fa1f f986 	uxth.w	r9, r6
 801a874:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a878:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a87c:	443b      	add	r3, r7
 801a87e:	4293      	cmp	r3, r2
 801a880:	f6bf af7e 	bge.w	801a780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a884:	a817      	add	r0, sp, #92	@ 0x5c
 801a886:	f003 f86f 	bl	801d968 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a88a:	b1f8      	cbz	r0, 801a8cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a88c:	280a      	cmp	r0, #10
 801a88e:	d1f1      	bne.n	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a890:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a894:	444b      	add	r3, r9
 801a896:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a89a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a89e:	eba3 0309 	sub.w	r3, r3, r9
 801a8a2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a8a6:	e7e5      	b.n	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a8a8:	b2b3      	uxth	r3, r6
 801a8aa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a8ae:	441a      	add	r2, r3
 801a8b0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a8b4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801a8b8:	1ad3      	subs	r3, r2, r3
 801a8ba:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a8be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a8c2:	b11b      	cbz	r3, 801a8cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a8c4:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d0ba      	beq.n	801a842 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a8cc:	b063      	add	sp, #396	@ 0x18c
 801a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8d2:	2a02      	cmp	r2, #2
 801a8d4:	d105      	bne.n	801a8e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a8d6:	7be2      	ldrb	r2, [r4, #15]
 801a8d8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801a8dc:	1a80      	subs	r0, r0, r2
 801a8de:	1ac0      	subs	r0, r0, r3
 801a8e0:	e773      	b.n	801a7ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801a8e2:	2000      	movs	r0, #0
 801a8e4:	e772      	b.n	801a7cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a8e6:	7be0      	ldrb	r0, [r4, #15]
 801a8e8:	e770      	b.n	801a7cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a8ea:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a8ee:	e773      	b.n	801a7d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a8f0:	f1ba 0f00 	cmp.w	sl, #0
 801a8f4:	d0f7      	beq.n	801a8e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a8f6:	2264      	movs	r2, #100	@ 0x64
 801a8f8:	4639      	mov	r1, r7
 801a8fa:	a849      	add	r0, sp, #292	@ 0x124
 801a8fc:	f00f f9e5 	bl	8029cca <memcpy>
 801a900:	2300      	movs	r3, #0
 801a902:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a906:	6821      	ldr	r1, [r4, #0]
 801a908:	a849      	add	r0, sp, #292	@ 0x124
 801a90a:	f7ff fb9a 	bl	801a042 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a90e:	b203      	sxth	r3, r0
 801a910:	e751      	b.n	801a7b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801a912 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a912:	2b03      	cmp	r3, #3
 801a914:	d818      	bhi.n	801a948 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a916:	e8df f003 	tbb	[pc, r3]
 801a91a:	0602      	.short	0x0602
 801a91c:	130d      	.short	0x130d
 801a91e:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a922:	1850      	adds	r0, r2, r1
 801a924:	4770      	bx	lr
 801a926:	8803      	ldrh	r3, [r0, #0]
 801a928:	8880      	ldrh	r0, [r0, #4]
 801a92a:	4418      	add	r0, r3
 801a92c:	b200      	sxth	r0, r0
 801a92e:	1a80      	subs	r0, r0, r2
 801a930:	3801      	subs	r0, #1
 801a932:	4770      	bx	lr
 801a934:	8803      	ldrh	r3, [r0, #0]
 801a936:	8880      	ldrh	r0, [r0, #4]
 801a938:	4418      	add	r0, r3
 801a93a:	b200      	sxth	r0, r0
 801a93c:	1a40      	subs	r0, r0, r1
 801a93e:	e7f7      	b.n	801a930 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a940:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a944:	4410      	add	r0, r2
 801a946:	4770      	bx	lr
 801a948:	2000      	movs	r0, #0
 801a94a:	4770      	bx	lr

0801a94c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a94c:	2b03      	cmp	r3, #3
 801a94e:	d817      	bhi.n	801a980 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801a950:	e8df f003 	tbb	[pc, r3]
 801a954:	10090602 	.word	0x10090602
 801a958:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a95c:	1850      	adds	r0, r2, r1
 801a95e:	4770      	bx	lr
 801a960:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a964:	e7fa      	b.n	801a95c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801a966:	8843      	ldrh	r3, [r0, #2]
 801a968:	88c0      	ldrh	r0, [r0, #6]
 801a96a:	4418      	add	r0, r3
 801a96c:	b200      	sxth	r0, r0
 801a96e:	1a80      	subs	r0, r0, r2
 801a970:	3801      	subs	r0, #1
 801a972:	4770      	bx	lr
 801a974:	8843      	ldrh	r3, [r0, #2]
 801a976:	88c0      	ldrh	r0, [r0, #6]
 801a978:	4418      	add	r0, r3
 801a97a:	b200      	sxth	r0, r0
 801a97c:	1a40      	subs	r0, r0, r1
 801a97e:	e7f7      	b.n	801a970 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a980:	2000      	movs	r0, #0
 801a982:	4770      	bx	lr

0801a984 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a984:	4b01      	ldr	r3, [pc, #4]	@ (801a98c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a986:	2200      	movs	r2, #0
 801a988:	601a      	str	r2, [r3, #0]
 801a98a:	4770      	bx	lr
 801a98c:	240621c8 	.word	0x240621c8

0801a990 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a990:	4603      	mov	r3, r0
 801a992:	b1c8      	cbz	r0, 801a9c8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a994:	0c02      	lsrs	r2, r0, #16
 801a996:	0412      	lsls	r2, r2, #16
 801a998:	b9a2      	cbnz	r2, 801a9c4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a99a:	0403      	lsls	r3, r0, #16
 801a99c:	2010      	movs	r0, #16
 801a99e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801a9a2:	bf04      	itt	eq
 801a9a4:	021b      	lsleq	r3, r3, #8
 801a9a6:	3008      	addeq	r0, #8
 801a9a8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801a9ac:	bf04      	itt	eq
 801a9ae:	011b      	lsleq	r3, r3, #4
 801a9b0:	3004      	addeq	r0, #4
 801a9b2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801a9b6:	bf04      	itt	eq
 801a9b8:	009b      	lsleq	r3, r3, #2
 801a9ba:	3002      	addeq	r0, #2
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	db04      	blt.n	801a9ca <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a9c0:	3001      	adds	r0, #1
 801a9c2:	4770      	bx	lr
 801a9c4:	2000      	movs	r0, #0
 801a9c6:	e7ea      	b.n	801a99e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a9c8:	2020      	movs	r0, #32
 801a9ca:	4770      	bx	lr

0801a9cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9d0:	b087      	sub	sp, #28
 801a9d2:	460d      	mov	r5, r1
 801a9d4:	4616      	mov	r6, r2
 801a9d6:	4698      	mov	r8, r3
 801a9d8:	4601      	mov	r1, r0
 801a9da:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801a9de:	b120      	cbz	r0, 801a9ea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a9e0:	b11a      	cbz	r2, 801a9ea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a9e2:	2d1f      	cmp	r5, #31
 801a9e4:	d801      	bhi.n	801a9ea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a9e6:	2b1f      	cmp	r3, #31
 801a9e8:	d904      	bls.n	801a9f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801a9ea:	2000      	movs	r0, #0
 801a9ec:	6038      	str	r0, [r7, #0]
 801a9ee:	b007      	add	sp, #28
 801a9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9f4:	b97d      	cbnz	r5, 801aa16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801a9f6:	b143      	cbz	r3, 801aa0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801a9f8:	4602      	mov	r2, r0
 801a9fa:	462b      	mov	r3, r5
 801a9fc:	4641      	mov	r1, r8
 801a9fe:	4630      	mov	r0, r6
 801aa00:	e9cd 4700 	strd	r4, r7, [sp]
 801aa04:	f7ff ffe2 	bl	801a9cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aa08:	e7f1      	b.n	801a9ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801aa0a:	f04f 33ff 	mov.w	r3, #4294967295
 801aa0e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801aa12:	603b      	str	r3, [r7, #0]
 801aa14:	e7eb      	b.n	801a9ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801aa16:	fa32 fa05 	lsrs.w	sl, r2, r5
 801aa1a:	d106      	bne.n	801aa2a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801aa1c:	4346      	muls	r6, r0
 801aa1e:	fbb6 f0f4 	udiv	r0, r6, r4
 801aa22:	fb04 6610 	mls	r6, r4, r0, r6
 801aa26:	603e      	str	r6, [r7, #0]
 801aa28:	e7e1      	b.n	801a9ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801aa2a:	2201      	movs	r2, #1
 801aa2c:	fa00 fb05 	lsl.w	fp, r0, r5
 801aa30:	40aa      	lsls	r2, r5
 801aa32:	fbbb f9f4 	udiv	r9, fp, r4
 801aa36:	3a01      	subs	r2, #1
 801aa38:	fb0a f309 	mul.w	r3, sl, r9
 801aa3c:	fb04 b919 	mls	r9, r4, r9, fp
 801aa40:	4016      	ands	r6, r2
 801aa42:	9303      	str	r3, [sp, #12]
 801aa44:	4630      	mov	r0, r6
 801aa46:	f7ff ffa3 	bl	801a990 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801aa4a:	462b      	mov	r3, r5
 801aa4c:	460a      	mov	r2, r1
 801aa4e:	4601      	mov	r1, r0
 801aa50:	4630      	mov	r0, r6
 801aa52:	e9cd 4700 	strd	r4, r7, [sp]
 801aa56:	f7ff ffb9 	bl	801a9cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aa5a:	4606      	mov	r6, r0
 801aa5c:	4648      	mov	r0, r9
 801aa5e:	eb05 0108 	add.w	r1, r5, r8
 801aa62:	f7ff ff95 	bl	801a990 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801aa66:	ab05      	add	r3, sp, #20
 801aa68:	464a      	mov	r2, r9
 801aa6a:	e9cd 4300 	strd	r4, r3, [sp]
 801aa6e:	4603      	mov	r3, r0
 801aa70:	4650      	mov	r0, sl
 801aa72:	f7ff ffab 	bl	801a9cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aa76:	6839      	ldr	r1, [r7, #0]
 801aa78:	9a05      	ldr	r2, [sp, #20]
 801aa7a:	9b03      	ldr	r3, [sp, #12]
 801aa7c:	4411      	add	r1, r2
 801aa7e:	fbb1 f2f4 	udiv	r2, r1, r4
 801aa82:	18d3      	adds	r3, r2, r3
 801aa84:	fb04 1412 	mls	r4, r4, r2, r1
 801aa88:	441e      	add	r6, r3
 801aa8a:	603c      	str	r4, [r7, #0]
 801aa8c:	4430      	add	r0, r6
 801aa8e:	e7ae      	b.n	801a9ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801aa90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801aa90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa94:	b085      	sub	sp, #20
 801aa96:	f1b0 0900 	subs.w	r9, r0, #0
 801aa9a:	461d      	mov	r5, r3
 801aa9c:	4617      	mov	r7, r2
 801aa9e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801aaa0:	bfbb      	ittet	lt
 801aaa2:	f1c9 0900 	rsblt	r9, r9, #0
 801aaa6:	f04f 36ff 	movlt.w	r6, #4294967295
 801aaaa:	2601      	movge	r6, #1
 801aaac:	6823      	ldrlt	r3, [r4, #0]
 801aaae:	bfbc      	itt	lt
 801aab0:	425b      	neglt	r3, r3
 801aab2:	6023      	strlt	r3, [r4, #0]
 801aab4:	2a00      	cmp	r2, #0
 801aab6:	da04      	bge.n	801aac2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801aab8:	6823      	ldr	r3, [r4, #0]
 801aaba:	4257      	negs	r7, r2
 801aabc:	4276      	negs	r6, r6
 801aabe:	425b      	negs	r3, r3
 801aac0:	6023      	str	r3, [r4, #0]
 801aac2:	2d00      	cmp	r5, #0
 801aac4:	4638      	mov	r0, r7
 801aac6:	bfba      	itte	lt
 801aac8:	426d      	neglt	r5, r5
 801aaca:	f04f 38ff 	movlt.w	r8, #4294967295
 801aace:	f04f 0801 	movge.w	r8, #1
 801aad2:	f7ff ff5d 	bl	801a990 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801aad6:	ab03      	add	r3, sp, #12
 801aad8:	463a      	mov	r2, r7
 801aada:	e9cd 5300 	strd	r5, r3, [sp]
 801aade:	4603      	mov	r3, r0
 801aae0:	4648      	mov	r0, r9
 801aae2:	f7ff ff73 	bl	801a9cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aae6:	6823      	ldr	r3, [r4, #0]
 801aae8:	9a03      	ldr	r2, [sp, #12]
 801aaea:	4546      	cmp	r6, r8
 801aaec:	441a      	add	r2, r3
 801aaee:	fb92 f3f5 	sdiv	r3, r2, r5
 801aaf2:	4418      	add	r0, r3
 801aaf4:	fb05 2313 	mls	r3, r5, r3, r2
 801aaf8:	bf18      	it	ne
 801aafa:	4240      	negne	r0, r0
 801aafc:	1c72      	adds	r2, r6, #1
 801aafe:	6023      	str	r3, [r4, #0]
 801ab00:	d105      	bne.n	801ab0e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	f1c3 0200 	rsb	r2, r3, #0
 801ab08:	db0b      	blt.n	801ab22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801ab0a:	6022      	str	r2, [r4, #0]
 801ab0c:	e006      	b.n	801ab1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ab0e:	2e01      	cmp	r6, #1
 801ab10:	d104      	bne.n	801ab1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	da02      	bge.n	801ab1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ab16:	442b      	add	r3, r5
 801ab18:	3801      	subs	r0, #1
 801ab1a:	6023      	str	r3, [r4, #0]
 801ab1c:	b005      	add	sp, #20
 801ab1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab22:	3801      	subs	r0, #1
 801ab24:	1b52      	subs	r2, r2, r5
 801ab26:	e7f0      	b.n	801ab0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801ab28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ab28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ab2c:	4c1c      	ldr	r4, [pc, #112]	@ (801aba0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801ab2e:	4605      	mov	r5, r0
 801ab30:	6807      	ldr	r7, [r0, #0]
 801ab32:	69a3      	ldr	r3, [r4, #24]
 801ab34:	b92b      	cbnz	r3, 801ab42 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801ab36:	6840      	ldr	r0, [r0, #4]
 801ab38:	e9c5 7000 	strd	r7, r0, [r5]
 801ab3c:	b004      	add	sp, #16
 801ab3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab42:	f04f 0802 	mov.w	r8, #2
 801ab46:	68a2      	ldr	r2, [r4, #8]
 801ab48:	ae04      	add	r6, sp, #16
 801ab4a:	6820      	ldr	r0, [r4, #0]
 801ab4c:	fb93 f1f8 	sdiv	r1, r3, r8
 801ab50:	440a      	add	r2, r1
 801ab52:	69e1      	ldr	r1, [r4, #28]
 801ab54:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ab58:	463a      	mov	r2, r7
 801ab5a:	9600      	str	r6, [sp, #0]
 801ab5c:	f7ff ff98 	bl	801aa90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ab60:	69a3      	ldr	r3, [r4, #24]
 801ab62:	4607      	mov	r7, r0
 801ab64:	686a      	ldr	r2, [r5, #4]
 801ab66:	6a21      	ldr	r1, [r4, #32]
 801ab68:	9600      	str	r6, [sp, #0]
 801ab6a:	6860      	ldr	r0, [r4, #4]
 801ab6c:	f7ff ff90 	bl	801aa90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ab70:	69a3      	ldr	r3, [r4, #24]
 801ab72:	6962      	ldr	r2, [r4, #20]
 801ab74:	4407      	add	r7, r0
 801ab76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801ab78:	9600      	str	r6, [sp, #0]
 801ab7a:	68e0      	ldr	r0, [r4, #12]
 801ab7c:	fb93 f8f8 	sdiv	r8, r3, r8
 801ab80:	4442      	add	r2, r8
 801ab82:	9203      	str	r2, [sp, #12]
 801ab84:	682a      	ldr	r2, [r5, #0]
 801ab86:	f7ff ff83 	bl	801aa90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ab8a:	4680      	mov	r8, r0
 801ab8c:	9600      	str	r6, [sp, #0]
 801ab8e:	69a3      	ldr	r3, [r4, #24]
 801ab90:	686a      	ldr	r2, [r5, #4]
 801ab92:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801ab94:	6920      	ldr	r0, [r4, #16]
 801ab96:	f7ff ff7b 	bl	801aa90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ab9a:	4440      	add	r0, r8
 801ab9c:	e7cc      	b.n	801ab38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801ab9e:	bf00      	nop
 801aba0:	240621cc 	.word	0x240621cc

0801aba4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801aba4:	4b07      	ldr	r3, [pc, #28]	@ (801abc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801aba6:	781b      	ldrb	r3, [r3, #0]
 801aba8:	2b01      	cmp	r3, #1
 801abaa:	d109      	bne.n	801abc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801abac:	f9b1 3000 	ldrsh.w	r3, [r1]
 801abb0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801abb4:	8003      	strh	r3, [r0, #0]
 801abb6:	4b04      	ldr	r3, [pc, #16]	@ (801abc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801abb8:	881b      	ldrh	r3, [r3, #0]
 801abba:	3b01      	subs	r3, #1
 801abbc:	1a9b      	subs	r3, r3, r2
 801abbe:	800b      	strh	r3, [r1, #0]
 801abc0:	4770      	bx	lr
 801abc2:	bf00      	nop
 801abc4:	240621b0 	.word	0x240621b0
 801abc8:	240621ac 	.word	0x240621ac

0801abcc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801abcc:	4b07      	ldr	r3, [pc, #28]	@ (801abec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801abce:	b510      	push	{r4, lr}
 801abd0:	781b      	ldrb	r3, [r3, #0]
 801abd2:	2b01      	cmp	r3, #1
 801abd4:	d108      	bne.n	801abe8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801abd6:	4b06      	ldr	r3, [pc, #24]	@ (801abf0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801abd8:	880c      	ldrh	r4, [r1, #0]
 801abda:	881b      	ldrh	r3, [r3, #0]
 801abdc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801abe0:	3b01      	subs	r3, #1
 801abe2:	1b1b      	subs	r3, r3, r4
 801abe4:	8003      	strh	r3, [r0, #0]
 801abe6:	800a      	strh	r2, [r1, #0]
 801abe8:	bd10      	pop	{r4, pc}
 801abea:	bf00      	nop
 801abec:	240621b0 	.word	0x240621b0
 801abf0:	240621ac 	.word	0x240621ac

0801abf4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801abf4:	4b0a      	ldr	r3, [pc, #40]	@ (801ac20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801abf6:	b510      	push	{r4, lr}
 801abf8:	781b      	ldrb	r3, [r3, #0]
 801abfa:	2b01      	cmp	r3, #1
 801abfc:	d10e      	bne.n	801ac1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801abfe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ac02:	8843      	ldrh	r3, [r0, #2]
 801ac04:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ac08:	18ca      	adds	r2, r1, r3
 801ac0a:	4b06      	ldr	r3, [pc, #24]	@ (801ac24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ac0c:	8044      	strh	r4, [r0, #2]
 801ac0e:	881b      	ldrh	r3, [r3, #0]
 801ac10:	1a9b      	subs	r3, r3, r2
 801ac12:	8003      	strh	r3, [r0, #0]
 801ac14:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ac18:	8081      	strh	r1, [r0, #4]
 801ac1a:	80c3      	strh	r3, [r0, #6]
 801ac1c:	bd10      	pop	{r4, pc}
 801ac1e:	bf00      	nop
 801ac20:	240621b0 	.word	0x240621b0
 801ac24:	240621ac 	.word	0x240621ac

0801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ac28:	4b08      	ldr	r3, [pc, #32]	@ (801ac4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801ac2a:	781b      	ldrb	r3, [r3, #0]
 801ac2c:	2b01      	cmp	r3, #1
 801ac2e:	d10c      	bne.n	801ac4a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801ac30:	8803      	ldrh	r3, [r0, #0]
 801ac32:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801ac36:	8842      	ldrh	r2, [r0, #2]
 801ac38:	8002      	strh	r2, [r0, #0]
 801ac3a:	185a      	adds	r2, r3, r1
 801ac3c:	4b04      	ldr	r3, [pc, #16]	@ (801ac50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ac3e:	881b      	ldrh	r3, [r3, #0]
 801ac40:	1a9b      	subs	r3, r3, r2
 801ac42:	8043      	strh	r3, [r0, #2]
 801ac44:	88c3      	ldrh	r3, [r0, #6]
 801ac46:	80c1      	strh	r1, [r0, #6]
 801ac48:	8083      	strh	r3, [r0, #4]
 801ac4a:	4770      	bx	lr
 801ac4c:	240621b0 	.word	0x240621b0
 801ac50:	240621ac 	.word	0x240621ac

0801ac54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ac54:	4b07      	ldr	r3, [pc, #28]	@ (801ac74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ac56:	b510      	push	{r4, lr}
 801ac58:	781b      	ldrb	r3, [r3, #0]
 801ac5a:	2b01      	cmp	r3, #1
 801ac5c:	d108      	bne.n	801ac70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ac5e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ac62:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ac66:	8003      	strh	r3, [r0, #0]
 801ac68:	8893      	ldrh	r3, [r2, #4]
 801ac6a:	3b01      	subs	r3, #1
 801ac6c:	1b1b      	subs	r3, r3, r4
 801ac6e:	800b      	strh	r3, [r1, #0]
 801ac70:	bd10      	pop	{r4, pc}
 801ac72:	bf00      	nop
 801ac74:	240621b0 	.word	0x240621b0

0801ac78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801ac78:	4b0b      	ldr	r3, [pc, #44]	@ (801aca8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801ac7a:	781b      	ldrb	r3, [r3, #0]
 801ac7c:	2b01      	cmp	r3, #1
 801ac7e:	d111      	bne.n	801aca4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801ac80:	680b      	ldr	r3, [r1, #0]
 801ac82:	ed90 7a00 	vldr	s14, [r0]
 801ac86:	6003      	str	r3, [r0, #0]
 801ac88:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801ac8c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 801acac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801ac90:	ee07 3a90 	vmov	s15, r3
 801ac94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ac9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aca0:	edc1 7a00 	vstr	s15, [r1]
 801aca4:	4770      	bx	lr
 801aca6:	bf00      	nop
 801aca8:	240621b0 	.word	0x240621b0
 801acac:	38d1b717 	.word	0x38d1b717

0801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801acb0:	4b0a      	ldr	r3, [pc, #40]	@ (801acdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801acb2:	460a      	mov	r2, r1
 801acb4:	b510      	push	{r4, lr}
 801acb6:	781b      	ldrb	r3, [r3, #0]
 801acb8:	2b01      	cmp	r3, #1
 801acba:	d10d      	bne.n	801acd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801acbc:	8881      	ldrh	r1, [r0, #4]
 801acbe:	8803      	ldrh	r3, [r0, #0]
 801acc0:	440b      	add	r3, r1
 801acc2:	4601      	mov	r1, r0
 801acc4:	3b01      	subs	r3, #1
 801acc6:	f821 3b02 	strh.w	r3, [r1], #2
 801acca:	f7ff ffc3 	bl	801ac54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801acce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801acd2:	88c2      	ldrh	r2, [r0, #6]
 801acd4:	80c3      	strh	r3, [r0, #6]
 801acd6:	8082      	strh	r2, [r0, #4]
 801acd8:	bd10      	pop	{r4, pc}
 801acda:	bf00      	nop
 801acdc:	240621b0 	.word	0x240621b0

0801ace0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
 801ace0:	4770      	bx	lr
	...

0801ace4 <_ZN8touchgfx11Application13requestRedrawEv>:
 801ace4:	4b06      	ldr	r3, [pc, #24]	@ (801ad00 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801ace6:	2100      	movs	r1, #0
 801ace8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801acec:	4b05      	ldr	r3, [pc, #20]	@ (801ad04 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801acee:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801acf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801acf6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801acfa:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801acfe:	4770      	bx	lr
 801ad00:	240621ac 	.word	0x240621ac
 801ad04:	240621ae 	.word	0x240621ae

0801ad08 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801ad08:	4b03      	ldr	r3, [pc, #12]	@ (801ad18 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801ad0a:	6818      	ldr	r0, [r3, #0]
 801ad0c:	b110      	cbz	r0, 801ad14 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801ad0e:	6803      	ldr	r3, [r0, #0]
 801ad10:	699b      	ldr	r3, [r3, #24]
 801ad12:	4718      	bx	r3
 801ad14:	4770      	bx	lr
 801ad16:	bf00      	nop
 801ad18:	240621fc 	.word	0x240621fc

0801ad1c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801ad1c:	4770      	bx	lr
	...

0801ad20 <_ZN8touchgfx11Application4drawEv>:
 801ad20:	4b09      	ldr	r3, [pc, #36]	@ (801ad48 <_ZN8touchgfx11Application4drawEv+0x28>)
 801ad22:	b507      	push	{r0, r1, r2, lr}
 801ad24:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ad28:	2100      	movs	r1, #0
 801ad2a:	4b08      	ldr	r3, [pc, #32]	@ (801ad4c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801ad2c:	9100      	str	r1, [sp, #0]
 801ad2e:	4669      	mov	r1, sp
 801ad30:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad34:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ad38:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ad3c:	6803      	ldr	r3, [r0, #0]
 801ad3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ad40:	4798      	blx	r3
 801ad42:	b003      	add	sp, #12
 801ad44:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad48:	240621ac 	.word	0x240621ac
 801ad4c:	240621ae 	.word	0x240621ae

0801ad50 <_ZN8touchgfx11Application10invalidateEv>:
 801ad50:	4b09      	ldr	r3, [pc, #36]	@ (801ad78 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801ad52:	b082      	sub	sp, #8
 801ad54:	2100      	movs	r1, #0
 801ad56:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ad5a:	4b08      	ldr	r3, [pc, #32]	@ (801ad7c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801ad5c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ad60:	aa02      	add	r2, sp, #8
 801ad62:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad66:	9100      	str	r1, [sp, #0]
 801ad68:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ad6c:	6803      	ldr	r3, [r0, #0]
 801ad6e:	e912 0006 	ldmdb	r2, {r1, r2}
 801ad72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ad74:	b002      	add	sp, #8
 801ad76:	4718      	bx	r3
 801ad78:	240621ac 	.word	0x240621ac
 801ad7c:	240621ae 	.word	0x240621ae

0801ad80 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ad80:	4b03      	ldr	r3, [pc, #12]	@ (801ad90 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ad82:	6818      	ldr	r0, [r3, #0]
 801ad84:	b110      	cbz	r0, 801ad8c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ad86:	6803      	ldr	r3, [r0, #0]
 801ad88:	69db      	ldr	r3, [r3, #28]
 801ad8a:	4718      	bx	r3
 801ad8c:	4770      	bx	lr
 801ad8e:	bf00      	nop
 801ad90:	240621fc 	.word	0x240621fc

0801ad94 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ad94:	4b03      	ldr	r3, [pc, #12]	@ (801ada4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ad96:	6818      	ldr	r0, [r3, #0]
 801ad98:	b110      	cbz	r0, 801ada0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ad9a:	6803      	ldr	r3, [r0, #0]
 801ad9c:	6a1b      	ldr	r3, [r3, #32]
 801ad9e:	4718      	bx	r3
 801ada0:	4770      	bx	lr
 801ada2:	bf00      	nop
 801ada4:	240621fc 	.word	0x240621fc

0801ada8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801ada8:	2300      	movs	r3, #0
 801adaa:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801adae:	4770      	bx	lr

0801adb0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801adb0:	4b03      	ldr	r3, [pc, #12]	@ (801adc0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801adb2:	6818      	ldr	r0, [r3, #0]
 801adb4:	b110      	cbz	r0, 801adbc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801adb6:	6803      	ldr	r3, [r0, #0]
 801adb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801adba:	4718      	bx	r3
 801adbc:	4770      	bx	lr
 801adbe:	bf00      	nop
 801adc0:	240621fc 	.word	0x240621fc

0801adc4 <_ZN8touchgfx11ApplicationD1Ev>:
 801adc4:	4770      	bx	lr

0801adc6 <_ZN8touchgfx11ApplicationD0Ev>:
 801adc6:	b510      	push	{r4, lr}
 801adc8:	4604      	mov	r4, r0
 801adca:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801adce:	f00e f887 	bl	8028ee0 <_ZdlPvj>
 801add2:	4620      	mov	r0, r4
 801add4:	bd10      	pop	{r4, pc}

0801add6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801add6:	b510      	push	{r4, lr}
 801add8:	f9b1 4000 	ldrsh.w	r4, [r1]
 801addc:	888a      	ldrh	r2, [r1, #4]
 801adde:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ade2:	4422      	add	r2, r4
 801ade4:	b212      	sxth	r2, r2
 801ade6:	4293      	cmp	r3, r2
 801ade8:	da15      	bge.n	801ae16 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801adea:	8882      	ldrh	r2, [r0, #4]
 801adec:	4413      	add	r3, r2
 801adee:	b21b      	sxth	r3, r3
 801adf0:	429c      	cmp	r4, r3
 801adf2:	da10      	bge.n	801ae16 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801adf4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801adf8:	88c9      	ldrh	r1, [r1, #6]
 801adfa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801adfe:	4419      	add	r1, r3
 801ae00:	b209      	sxth	r1, r1
 801ae02:	428a      	cmp	r2, r1
 801ae04:	da07      	bge.n	801ae16 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ae06:	88c0      	ldrh	r0, [r0, #6]
 801ae08:	4410      	add	r0, r2
 801ae0a:	b200      	sxth	r0, r0
 801ae0c:	4283      	cmp	r3, r0
 801ae0e:	bfac      	ite	ge
 801ae10:	2000      	movge	r0, #0
 801ae12:	2001      	movlt	r0, #1
 801ae14:	bd10      	pop	{r4, pc}
 801ae16:	2000      	movs	r0, #0
 801ae18:	e7fc      	b.n	801ae14 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801ae1a <_ZN8touchgfx4Rect10restrictToEss>:
 801ae1a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	b510      	push	{r4, lr}
 801ae22:	da04      	bge.n	801ae2e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801ae24:	8884      	ldrh	r4, [r0, #4]
 801ae26:	4423      	add	r3, r4
 801ae28:	8083      	strh	r3, [r0, #4]
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	8003      	strh	r3, [r0, #0]
 801ae2e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ae32:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ae36:	1b09      	subs	r1, r1, r4
 801ae38:	428b      	cmp	r3, r1
 801ae3a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ae3e:	bfc8      	it	gt
 801ae40:	8081      	strhgt	r1, [r0, #4]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	da04      	bge.n	801ae50 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801ae46:	88c1      	ldrh	r1, [r0, #6]
 801ae48:	440b      	add	r3, r1
 801ae4a:	80c3      	strh	r3, [r0, #6]
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	8043      	strh	r3, [r0, #2]
 801ae50:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801ae54:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801ae58:	1a52      	subs	r2, r2, r1
 801ae5a:	4293      	cmp	r3, r2
 801ae5c:	bfc8      	it	gt
 801ae5e:	80c2      	strhgt	r2, [r0, #6]
 801ae60:	bd10      	pop	{r4, pc}
	...

0801ae64 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801ae64:	4b10      	ldr	r3, [pc, #64]	@ (801aea8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801ae66:	b510      	push	{r4, lr}
 801ae68:	460c      	mov	r4, r1
 801ae6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ae6e:	4b0f      	ldr	r3, [pc, #60]	@ (801aeac <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801ae70:	4620      	mov	r0, r4
 801ae72:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ae76:	f7ff ffd0 	bl	801ae1a <_ZN8touchgfx4Rect10restrictToEss>
 801ae7a:	4b0d      	ldr	r3, [pc, #52]	@ (801aeb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801ae7c:	6818      	ldr	r0, [r3, #0]
 801ae7e:	b190      	cbz	r0, 801aea6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801ae80:	6803      	ldr	r3, [r0, #0]
 801ae82:	4621      	mov	r1, r4
 801ae84:	689b      	ldr	r3, [r3, #8]
 801ae86:	4798      	blx	r3
 801ae88:	4b0a      	ldr	r3, [pc, #40]	@ (801aeb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801ae8a:	6818      	ldr	r0, [r3, #0]
 801ae8c:	b118      	cbz	r0, 801ae96 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801ae8e:	6803      	ldr	r3, [r0, #0]
 801ae90:	4621      	mov	r1, r4
 801ae92:	689b      	ldr	r3, [r3, #8]
 801ae94:	4798      	blx	r3
 801ae96:	4b08      	ldr	r3, [pc, #32]	@ (801aeb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801ae98:	4621      	mov	r1, r4
 801ae9a:	6818      	ldr	r0, [r3, #0]
 801ae9c:	6803      	ldr	r3, [r0, #0]
 801ae9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aea2:	69db      	ldr	r3, [r3, #28]
 801aea4:	4718      	bx	r3
 801aea6:	bd10      	pop	{r4, pc}
 801aea8:	240621ae 	.word	0x240621ae
 801aeac:	240621ac 	.word	0x240621ac
 801aeb0:	240621fc 	.word	0x240621fc
 801aeb4:	240621f8 	.word	0x240621f8
 801aeb8:	240621b8 	.word	0x240621b8

0801aebc <_ZNK8touchgfx4Rect8includesERKS0_>:
 801aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aebe:	4606      	mov	r6, r0
 801aec0:	4608      	mov	r0, r1
 801aec2:	460f      	mov	r7, r1
 801aec4:	f7f9 fb3d 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aec8:	b9e8      	cbnz	r0, 801af06 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aeca:	f9b7 5000 	ldrsh.w	r5, [r7]
 801aece:	f9b6 4000 	ldrsh.w	r4, [r6]
 801aed2:	42a5      	cmp	r5, r4
 801aed4:	db17      	blt.n	801af06 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aed6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801aeda:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801aede:	429a      	cmp	r2, r3
 801aee0:	db11      	blt.n	801af06 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aee2:	88b9      	ldrh	r1, [r7, #4]
 801aee4:	440d      	add	r5, r1
 801aee6:	88b1      	ldrh	r1, [r6, #4]
 801aee8:	440c      	add	r4, r1
 801aeea:	b22d      	sxth	r5, r5
 801aeec:	b224      	sxth	r4, r4
 801aeee:	42a5      	cmp	r5, r4
 801aef0:	dc09      	bgt.n	801af06 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aef2:	88f8      	ldrh	r0, [r7, #6]
 801aef4:	4410      	add	r0, r2
 801aef6:	88f2      	ldrh	r2, [r6, #6]
 801aef8:	4413      	add	r3, r2
 801aefa:	b200      	sxth	r0, r0
 801aefc:	b21b      	sxth	r3, r3
 801aefe:	4298      	cmp	r0, r3
 801af00:	bfcc      	ite	gt
 801af02:	2000      	movgt	r0, #0
 801af04:	2001      	movle	r0, #1
 801af06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801af08 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af0a:	4604      	mov	r4, r0
 801af0c:	4608      	mov	r0, r1
 801af0e:	460d      	mov	r5, r1
 801af10:	f7f9 fb17 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801af14:	b978      	cbnz	r0, 801af36 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801af16:	4620      	mov	r0, r4
 801af18:	f7f9 fb13 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801af1c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801af20:	b150      	cbz	r0, 801af38 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801af22:	8026      	strh	r6, [r4, #0]
 801af24:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801af28:	8063      	strh	r3, [r4, #2]
 801af2a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801af2e:	80a3      	strh	r3, [r4, #4]
 801af30:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801af34:	80e3      	strh	r3, [r4, #6]
 801af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af38:	f9b4 1000 	ldrsh.w	r1, [r4]
 801af3c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801af40:	42b1      	cmp	r1, r6
 801af42:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801af46:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801af4a:	460f      	mov	r7, r1
 801af4c:	88ed      	ldrh	r5, [r5, #6]
 801af4e:	bfa8      	it	ge
 801af50:	4637      	movge	r7, r6
 801af52:	4293      	cmp	r3, r2
 801af54:	4618      	mov	r0, r3
 801af56:	4466      	add	r6, ip
 801af58:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801af5c:	bfa8      	it	ge
 801af5e:	4610      	movge	r0, r2
 801af60:	442a      	add	r2, r5
 801af62:	88e5      	ldrh	r5, [r4, #6]
 801af64:	4461      	add	r1, ip
 801af66:	b236      	sxth	r6, r6
 801af68:	8027      	strh	r7, [r4, #0]
 801af6a:	442b      	add	r3, r5
 801af6c:	b209      	sxth	r1, r1
 801af6e:	b212      	sxth	r2, r2
 801af70:	8060      	strh	r0, [r4, #2]
 801af72:	b21b      	sxth	r3, r3
 801af74:	428e      	cmp	r6, r1
 801af76:	bfac      	ite	ge
 801af78:	ebc7 0106 	rsbge	r1, r7, r6
 801af7c:	ebc7 0101 	rsblt	r1, r7, r1
 801af80:	429a      	cmp	r2, r3
 801af82:	bfac      	ite	ge
 801af84:	ebc0 0202 	rsbge	r2, r0, r2
 801af88:	ebc0 0203 	rsblt	r2, r0, r3
 801af8c:	80a1      	strh	r1, [r4, #4]
 801af8e:	80e2      	strh	r2, [r4, #6]
 801af90:	e7d1      	b.n	801af36 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801af94 <_ZN8touchgfx11Application11getInstanceEv>:
 801af94:	4b01      	ldr	r3, [pc, #4]	@ (801af9c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801af96:	6818      	ldr	r0, [r3, #0]
 801af98:	4770      	bx	lr
 801af9a:	bf00      	nop
 801af9c:	2406220c 	.word	0x2406220c

0801afa0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801afa0:	2300      	movs	r3, #0
 801afa2:	b510      	push	{r4, lr}
 801afa4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801afa8:	4604      	mov	r4, r0
 801afaa:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801afae:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801afb2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801afb6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801afba:	429a      	cmp	r2, r3
 801afbc:	d90e      	bls.n	801afdc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801afbe:	18e2      	adds	r2, r4, r3
 801afc0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801afc4:	b122      	cbz	r2, 801afd0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801afc6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801afca:	6803      	ldr	r3, [r0, #0]
 801afcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801afce:	4798      	blx	r3
 801afd0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801afd4:	3301      	adds	r3, #1
 801afd6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801afda:	e7ea      	b.n	801afb2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801afdc:	bd10      	pop	{r4, pc}

0801afde <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801afde:	b530      	push	{r4, r5, lr}
 801afe0:	2200      	movs	r2, #0
 801afe2:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801afe6:	b293      	uxth	r3, r2
 801afe8:	429d      	cmp	r5, r3
 801afea:	d90e      	bls.n	801b00a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801afec:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801aff0:	428b      	cmp	r3, r1
 801aff2:	d10b      	bne.n	801b00c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801aff4:	1884      	adds	r4, r0, r2
 801aff6:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801affa:	b13b      	cbz	r3, 801b00c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801affc:	3b01      	subs	r3, #1
 801affe:	b2db      	uxtb	r3, r3
 801b000:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 801b004:	b90b      	cbnz	r3, 801b00a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801b006:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801b00a:	bd30      	pop	{r4, r5, pc}
 801b00c:	3201      	adds	r2, #1
 801b00e:	e7ea      	b.n	801afe6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801b010:	2300      	movs	r3, #0
 801b012:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801b016:	30a4      	adds	r0, #164	@ 0xa4
 801b018:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b01c:	f802 3b01 	strb.w	r3, [r2], #1
 801b020:	4282      	cmp	r2, r0
 801b022:	d1fb      	bne.n	801b01c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801b024:	4770      	bx	lr
	...

0801b028 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b028:	b570      	push	{r4, r5, r6, lr}
 801b02a:	4c0b      	ldr	r4, [pc, #44]	@ (801b058 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b02c:	4605      	mov	r5, r0
 801b02e:	460e      	mov	r6, r1
 801b030:	6820      	ldr	r0, [r4, #0]
 801b032:	b110      	cbz	r0, 801b03a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801b034:	6803      	ldr	r3, [r0, #0]
 801b036:	695b      	ldr	r3, [r3, #20]
 801b038:	4798      	blx	r3
 801b03a:	1d28      	adds	r0, r5, #4
 801b03c:	f7ff ffe8 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b040:	6026      	str	r6, [r4, #0]
 801b042:	6833      	ldr	r3, [r6, #0]
 801b044:	4630      	mov	r0, r6
 801b046:	68db      	ldr	r3, [r3, #12]
 801b048:	4798      	blx	r3
 801b04a:	682b      	ldr	r3, [r5, #0]
 801b04c:	4628      	mov	r0, r5
 801b04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b054:	4718      	bx	r3
 801b056:	bf00      	nop
 801b058:	240621fc 	.word	0x240621fc

0801b05c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801b05c:	2300      	movs	r3, #0
 801b05e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801b062:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801b066:	461a      	mov	r2, r3
 801b068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b06a:	461c      	mov	r4, r3
 801b06c:	461d      	mov	r5, r3
 801b06e:	459c      	cmp	ip, r3
 801b070:	dd1a      	ble.n	801b0a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801b072:	18c6      	adds	r6, r0, r3
 801b074:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801b078:	b16e      	cbz	r6, 801b096 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d008      	beq.n	801b090 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801b07e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801b082:	fa1f fe82 	uxth.w	lr, r2
 801b086:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801b08a:	1887      	adds	r7, r0, r2
 801b08c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801b090:	3201      	adds	r2, #1
 801b092:	3301      	adds	r3, #1
 801b094:	e7eb      	b.n	801b06e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801b096:	4299      	cmp	r1, r3
 801b098:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801b09c:	bfa8      	it	ge
 801b09e:	3501      	addge	r5, #1
 801b0a0:	429e      	cmp	r6, r3
 801b0a2:	bfc8      	it	gt
 801b0a4:	3401      	addgt	r4, #1
 801b0a6:	e7f4      	b.n	801b092 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801b0a8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801b0ac:	1b49      	subs	r1, r1, r5
 801b0ae:	1b1b      	subs	r3, r3, r4
 801b0b0:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801b0b4:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801b0b8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801b0bc:	4293      	cmp	r3, r2
 801b0be:	dd03      	ble.n	801b0c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801b0c0:	3b01      	subs	r3, #1
 801b0c2:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801b0c6:	e7f7      	b.n	801b0b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801b0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b0cc <_ZN8touchgfx11Application15handleTickEventEv>:
 801b0cc:	b570      	push	{r4, r5, r6, lr}
 801b0ce:	4d16      	ldr	r5, [pc, #88]	@ (801b128 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801b0d0:	4604      	mov	r4, r0
 801b0d2:	6828      	ldr	r0, [r5, #0]
 801b0d4:	b140      	cbz	r0, 801b0e8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b0d6:	7a03      	ldrb	r3, [r0, #8]
 801b0d8:	b933      	cbnz	r3, 801b0e8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b0da:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801b0de:	6803      	ldr	r3, [r0, #0]
 801b0e0:	689b      	ldr	r3, [r3, #8]
 801b0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0e6:	4718      	bx	r3
 801b0e8:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801b0ec:	4e0f      	ldr	r6, [pc, #60]	@ (801b12c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801b0ee:	b973      	cbnz	r3, 801b10e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b0f0:	b168      	cbz	r0, 801b10e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b0f2:	7a03      	ldrb	r3, [r0, #8]
 801b0f4:	b15b      	cbz	r3, 801b10e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b0f6:	6830      	ldr	r0, [r6, #0]
 801b0f8:	b110      	cbz	r0, 801b100 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b0fa:	6803      	ldr	r3, [r0, #0]
 801b0fc:	691b      	ldr	r3, [r3, #16]
 801b0fe:	4798      	blx	r3
 801b100:	6828      	ldr	r0, [r5, #0]
 801b102:	6803      	ldr	r3, [r0, #0]
 801b104:	68db      	ldr	r3, [r3, #12]
 801b106:	4798      	blx	r3
 801b108:	2301      	movs	r3, #1
 801b10a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801b10e:	3404      	adds	r4, #4
 801b110:	4620      	mov	r0, r4
 801b112:	f7ff ff45 	bl	801afa0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801b116:	4620      	mov	r0, r4
 801b118:	f7ff ffa0 	bl	801b05c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801b11c:	6830      	ldr	r0, [r6, #0]
 801b11e:	b110      	cbz	r0, 801b126 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801b120:	6803      	ldr	r3, [r0, #0]
 801b122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b124:	e7dd      	b.n	801b0e2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b126:	bd70      	pop	{r4, r5, r6, pc}
 801b128:	24062200 	.word	0x24062200
 801b12c:	240621fc 	.word	0x240621fc

0801b130 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b130:	4603      	mov	r3, r0
 801b132:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801b136:	2200      	movs	r2, #0
 801b138:	801a      	strh	r2, [r3, #0]
 801b13a:	3308      	adds	r3, #8
 801b13c:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b140:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b144:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b148:	428b      	cmp	r3, r1
 801b14a:	d1f5      	bne.n	801b138 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b14c:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801b150:	4770      	bx	lr
	...

0801b154 <_ZN8touchgfx11ApplicationC1Ev>:
 801b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b156:	4b1d      	ldr	r3, [pc, #116]	@ (801b1cc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b158:	4606      	mov	r6, r0
 801b15a:	4604      	mov	r4, r0
 801b15c:	2500      	movs	r5, #0
 801b15e:	f846 3b04 	str.w	r3, [r6], #4
 801b162:	22a8      	movs	r2, #168	@ 0xa8
 801b164:	2100      	movs	r1, #0
 801b166:	4630      	mov	r0, r6
 801b168:	f00e fcce 	bl	8029b08 <memset>
 801b16c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801b170:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801b174:	4f16      	ldr	r7, [pc, #88]	@ (801b1d0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b176:	f7ff ffdb 	bl	801b130 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b17a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801b17e:	f7ff ffd7 	bl	801b130 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b182:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801b186:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801b18a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801b18e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801b192:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801b196:	490f      	ldr	r1, [pc, #60]	@ (801b1d4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b198:	480f      	ldr	r0, [pc, #60]	@ (801b1d8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b19a:	f00d f811 	bl	80281c0 <CRC_Lock>
 801b19e:	4b0f      	ldr	r3, [pc, #60]	@ (801b1dc <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801b1a0:	b158      	cbz	r0, 801b1ba <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801b1a2:	801d      	strh	r5, [r3, #0]
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	4a0e      	ldr	r2, [pc, #56]	@ (801b1e0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801b1a8:	4630      	mov	r0, r6
 801b1aa:	6013      	str	r3, [r2, #0]
 801b1ac:	4a0d      	ldr	r2, [pc, #52]	@ (801b1e4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801b1ae:	603b      	str	r3, [r7, #0]
 801b1b0:	6013      	str	r3, [r2, #0]
 801b1b2:	f7ff ff2d 	bl	801b010 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b1be:	2002      	movs	r0, #2
 801b1c0:	801a      	strh	r2, [r3, #0]
 801b1c2:	6038      	str	r0, [r7, #0]
 801b1c4:	f001 fe2a 	bl	801ce1c <_ZN8touchgfx6Screen4drawEv>
 801b1c8:	e7ec      	b.n	801b1a4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801b1ca:	bf00      	nop
 801b1cc:	0802e430 	.word	0x0802e430
 801b1d0:	240621fc 	.word	0x240621fc
 801b1d4:	b5e8b5cd 	.word	0xb5e8b5cd
 801b1d8:	f407a5c2 	.word	0xf407a5c2
 801b1dc:	2400007c 	.word	0x2400007c
 801b1e0:	2406220c 	.word	0x2406220c
 801b1e4:	24062200 	.word	0x24062200

0801b1e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b1e8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801b1ec:	3b01      	subs	r3, #1
 801b1ee:	b29b      	uxth	r3, r3
 801b1f0:	428b      	cmp	r3, r1
 801b1f2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801b1f6:	b510      	push	{r4, lr}
 801b1f8:	d908      	bls.n	801b20c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b1fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b1fe:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b202:	681a      	ldr	r2, [r3, #0]
 801b204:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b208:	685a      	ldr	r2, [r3, #4]
 801b20a:	6062      	str	r2, [r4, #4]
 801b20c:	bd10      	pop	{r4, pc}
	...

0801b210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b214:	b08f      	sub	sp, #60	@ 0x3c
 801b216:	4b8f      	ldr	r3, [pc, #572]	@ (801b454 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801b218:	4683      	mov	fp, r0
 801b21a:	ac0a      	add	r4, sp, #40	@ 0x28
 801b21c:	e884 0006 	stmia.w	r4, {r1, r2}
 801b220:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b224:	4620      	mov	r0, r4
 801b226:	4b8c      	ldr	r3, [pc, #560]	@ (801b458 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801b228:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b22c:	f7ff fdf5 	bl	801ae1a <_ZN8touchgfx4Rect10restrictToEss>
 801b230:	4620      	mov	r0, r4
 801b232:	f7f9 f986 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b236:	2800      	cmp	r0, #0
 801b238:	d16a      	bne.n	801b310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b23a:	9403      	str	r4, [sp, #12]
 801b23c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b240:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b244:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801b248:	9301      	str	r3, [sp, #4]
 801b24a:	35a4      	adds	r5, #164	@ 0xa4
 801b24c:	b15c      	cbz	r4, 801b266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b24e:	4629      	mov	r1, r5
 801b250:	9803      	ldr	r0, [sp, #12]
 801b252:	f7ff fe33 	bl	801aebc <_ZNK8touchgfx4Rect8includesERKS0_>
 801b256:	3c01      	subs	r4, #1
 801b258:	b118      	cbz	r0, 801b262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801b25a:	b2a1      	uxth	r1, r4
 801b25c:	9801      	ldr	r0, [sp, #4]
 801b25e:	f7ff ffc3 	bl	801b1e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b262:	3d08      	subs	r5, #8
 801b264:	e7f2      	b.n	801b24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801b266:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801b26a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b26e:	f8cd a010 	str.w	sl, [sp, #16]
 801b272:	9302      	str	r3, [sp, #8]
 801b274:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b278:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801b27c:	9306      	str	r3, [sp, #24]
 801b27e:	445c      	add	r4, fp
 801b280:	2500      	movs	r5, #0
 801b282:	4626      	mov	r6, r4
 801b284:	f8cd a014 	str.w	sl, [sp, #20]
 801b288:	462f      	mov	r7, r5
 801b28a:	9b05      	ldr	r3, [sp, #20]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d073      	beq.n	801b378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b290:	9903      	ldr	r1, [sp, #12]
 801b292:	4630      	mov	r0, r6
 801b294:	f7ff fd9f 	bl	801add6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b298:	b350      	cbz	r0, 801b2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b29a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801b29e:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b2a2:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801b2a6:	45e6      	cmp	lr, ip
 801b2a8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801b2ac:	db33      	blt.n	801b316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b2ae:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b2b2:	88b3      	ldrh	r3, [r6, #4]
 801b2b4:	4472      	add	r2, lr
 801b2b6:	4463      	add	r3, ip
 801b2b8:	b212      	sxth	r2, r2
 801b2ba:	b21b      	sxth	r3, r3
 801b2bc:	429a      	cmp	r2, r3
 801b2be:	dc2a      	bgt.n	801b316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b2c0:	fa1f f289 	uxth.w	r2, r9
 801b2c4:	88f3      	ldrh	r3, [r6, #6]
 801b2c6:	45c8      	cmp	r8, r9
 801b2c8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b2cc:	4413      	add	r3, r2
 801b2ce:	fa1f fc88 	uxth.w	ip, r8
 801b2d2:	b29b      	uxth	r3, r3
 801b2d4:	fa0f fe83 	sxth.w	lr, r3
 801b2d8:	db0f      	blt.n	801b2fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b2da:	eba3 030c 	sub.w	r3, r3, ip
 801b2de:	1ac9      	subs	r1, r1, r3
 801b2e0:	b209      	sxth	r1, r1
 801b2e2:	2900      	cmp	r1, #0
 801b2e4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b2e8:	dd12      	ble.n	801b310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b2ea:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801b2ee:	4605      	mov	r5, r0
 801b2f0:	9b05      	ldr	r3, [sp, #20]
 801b2f2:	3e08      	subs	r6, #8
 801b2f4:	3b01      	subs	r3, #1
 801b2f6:	9305      	str	r3, [sp, #20]
 801b2f8:	e7c7      	b.n	801b28a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b2fa:	4461      	add	r1, ip
 801b2fc:	b209      	sxth	r1, r1
 801b2fe:	4571      	cmp	r1, lr
 801b300:	dc38      	bgt.n	801b374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b302:	eba2 020c 	sub.w	r2, r2, ip
 801b306:	b212      	sxth	r2, r2
 801b308:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801b30c:	2a00      	cmp	r2, #0
 801b30e:	dcee      	bgt.n	801b2ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b310:	b00f      	add	sp, #60	@ 0x3c
 801b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b316:	45c8      	cmp	r8, r9
 801b318:	db2c      	blt.n	801b374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b31a:	88f3      	ldrh	r3, [r6, #6]
 801b31c:	4499      	add	r9, r3
 801b31e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801b322:	4498      	add	r8, r3
 801b324:	fa0f f989 	sxth.w	r9, r9
 801b328:	fa0f f888 	sxth.w	r8, r8
 801b32c:	45c1      	cmp	r9, r8
 801b32e:	db21      	blt.n	801b374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b330:	fa1f f28c 	uxth.w	r2, ip
 801b334:	88b3      	ldrh	r3, [r6, #4]
 801b336:	45e6      	cmp	lr, ip
 801b338:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801b33c:	4413      	add	r3, r2
 801b33e:	fa1f f88e 	uxth.w	r8, lr
 801b342:	b29b      	uxth	r3, r3
 801b344:	fa0f f983 	sxth.w	r9, r3
 801b348:	db0a      	blt.n	801b360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801b34a:	eba3 0308 	sub.w	r3, r3, r8
 801b34e:	1ac9      	subs	r1, r1, r3
 801b350:	b209      	sxth	r1, r1
 801b352:	2900      	cmp	r1, #0
 801b354:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801b358:	ddda      	ble.n	801b310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b35a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801b35e:	e7c6      	b.n	801b2ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b360:	4441      	add	r1, r8
 801b362:	b209      	sxth	r1, r1
 801b364:	4549      	cmp	r1, r9
 801b366:	dc05      	bgt.n	801b374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801b368:	eba2 0208 	sub.w	r2, r2, r8
 801b36c:	b212      	sxth	r2, r2
 801b36e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801b372:	e7cb      	b.n	801b30c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b374:	4607      	mov	r7, r0
 801b376:	e7bb      	b.n	801b2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b378:	2d00      	cmp	r5, #0
 801b37a:	d181      	bne.n	801b280 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801b37c:	2f00      	cmp	r7, #0
 801b37e:	f000 81dd 	beq.w	801b73c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b382:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801b386:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801b38a:	b2b3      	uxth	r3, r6
 801b38c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801b390:	9305      	str	r3, [sp, #20]
 801b392:	9a05      	ldr	r2, [sp, #20]
 801b394:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b398:	4413      	add	r3, r2
 801b39a:	b2ba      	uxth	r2, r7
 801b39c:	4492      	add	sl, r2
 801b39e:	b29b      	uxth	r3, r3
 801b3a0:	fa1f fa8a 	uxth.w	sl, sl
 801b3a4:	fa0f f883 	sxth.w	r8, r3
 801b3a8:	fa0f f98a 	sxth.w	r9, sl
 801b3ac:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b3b0:	9b04      	ldr	r3, [sp, #16]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d052      	beq.n	801b45c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b3b6:	9903      	ldr	r1, [sp, #12]
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	f7ff fd0c 	bl	801add6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b3be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b3c2:	b1c0      	cbz	r0, 801b3f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b3c4:	f9b4 e000 	ldrsh.w	lr, [r4]
 801b3c8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b3cc:	4576      	cmp	r6, lr
 801b3ce:	dc22      	bgt.n	801b416 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b3d0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b3d4:	44f4      	add	ip, lr
 801b3d6:	fa0f fc8c 	sxth.w	ip, ip
 801b3da:	45e0      	cmp	r8, ip
 801b3dc:	db1b      	blt.n	801b416 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b3de:	428f      	cmp	r7, r1
 801b3e0:	fa1f fc81 	uxth.w	ip, r1
 801b3e4:	88e1      	ldrh	r1, [r4, #6]
 801b3e6:	dc0d      	bgt.n	801b404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801b3e8:	ebaa 0c0c 	sub.w	ip, sl, ip
 801b3ec:	f8a4 9002 	strh.w	r9, [r4, #2]
 801b3f0:	eba1 010c 	sub.w	r1, r1, ip
 801b3f4:	80e1      	strh	r1, [r4, #6]
 801b3f6:	4628      	mov	r0, r5
 801b3f8:	9904      	ldr	r1, [sp, #16]
 801b3fa:	3c08      	subs	r4, #8
 801b3fc:	4605      	mov	r5, r0
 801b3fe:	3901      	subs	r1, #1
 801b400:	9104      	str	r1, [sp, #16]
 801b402:	e7d3      	b.n	801b3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801b404:	4461      	add	r1, ip
 801b406:	b209      	sxth	r1, r1
 801b408:	4549      	cmp	r1, r9
 801b40a:	dcf5      	bgt.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b40c:	eba2 0c0c 	sub.w	ip, r2, ip
 801b410:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b414:	e7ef      	b.n	801b3f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b416:	428f      	cmp	r7, r1
 801b418:	dcee      	bgt.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b41a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801b41e:	4461      	add	r1, ip
 801b420:	b209      	sxth	r1, r1
 801b422:	4589      	cmp	r9, r1
 801b424:	dbe8      	blt.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b426:	4576      	cmp	r6, lr
 801b428:	fa1f fc8e 	uxth.w	ip, lr
 801b42c:	88a1      	ldrh	r1, [r4, #4]
 801b42e:	dc07      	bgt.n	801b440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801b430:	eba3 0c0c 	sub.w	ip, r3, ip
 801b434:	f8a4 8000 	strh.w	r8, [r4]
 801b438:	eba1 010c 	sub.w	r1, r1, ip
 801b43c:	80a1      	strh	r1, [r4, #4]
 801b43e:	e7da      	b.n	801b3f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b440:	4461      	add	r1, ip
 801b442:	b209      	sxth	r1, r1
 801b444:	4588      	cmp	r8, r1
 801b446:	dbd7      	blt.n	801b3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801b448:	9905      	ldr	r1, [sp, #20]
 801b44a:	eba1 0c0c 	sub.w	ip, r1, ip
 801b44e:	f8a4 c004 	strh.w	ip, [r4, #4]
 801b452:	e7d0      	b.n	801b3f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b454:	240621ae 	.word	0x240621ae
 801b458:	240621ac 	.word	0x240621ac
 801b45c:	2d00      	cmp	r5, #0
 801b45e:	f000 816d 	beq.w	801b73c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b462:	9b06      	ldr	r3, [sp, #24]
 801b464:	445b      	add	r3, fp
 801b466:	461c      	mov	r4, r3
 801b468:	9b02      	ldr	r3, [sp, #8]
 801b46a:	3301      	adds	r3, #1
 801b46c:	f000 8166 	beq.w	801b73c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b470:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801b474:	9803      	ldr	r0, [sp, #12]
 801b476:	4629      	mov	r1, r5
 801b478:	f7ff fd20 	bl	801aebc <_ZNK8touchgfx4Rect8includesERKS0_>
 801b47c:	b120      	cbz	r0, 801b488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801b47e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b482:	9801      	ldr	r0, [sp, #4]
 801b484:	f7ff feb0 	bl	801b1e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b488:	9903      	ldr	r1, [sp, #12]
 801b48a:	4628      	mov	r0, r5
 801b48c:	f7ff fca3 	bl	801add6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b490:	2800      	cmp	r0, #0
 801b492:	f000 809c 	beq.w	801b5ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b496:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801b49a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b49e:	fa1f f189 	uxth.w	r1, r9
 801b4a2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b4a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b4a8:	eb01 0c03 	add.w	ip, r1, r3
 801b4ac:	b283      	uxth	r3, r0
 801b4ae:	4548      	cmp	r0, r9
 801b4b0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801b4b4:	fa1f fa8c 	uxth.w	sl, ip
 801b4b8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801b4bc:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801b4c0:	eb03 050c 	add.w	r5, r3, ip
 801b4c4:	b2ad      	uxth	r5, r5
 801b4c6:	9505      	str	r5, [sp, #20]
 801b4c8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801b4cc:	9504      	str	r5, [sp, #16]
 801b4ce:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801b4d2:	f340 8099 	ble.w	801b608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801b4d6:	1a5b      	subs	r3, r3, r1
 801b4d8:	4596      	cmp	lr, r2
 801b4da:	fa0f f08a 	sxth.w	r0, sl
 801b4de:	b29b      	uxth	r3, r3
 801b4e0:	b21e      	sxth	r6, r3
 801b4e2:	dd2e      	ble.n	801b542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801b4e4:	9f02      	ldr	r7, [sp, #8]
 801b4e6:	fa1f fe8e 	uxth.w	lr, lr
 801b4ea:	b292      	uxth	r2, r2
 801b4ec:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801b4f0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b4f4:	9f04      	ldr	r7, [sp, #16]
 801b4f6:	ebae 0102 	sub.w	r1, lr, r2
 801b4fa:	44a6      	add	lr, r4
 801b4fc:	1a3f      	subs	r7, r7, r0
 801b4fe:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801b502:	b289      	uxth	r1, r1
 801b504:	4402      	add	r2, r0
 801b506:	fa0f fe8e 	sxth.w	lr, lr
 801b50a:	b20d      	sxth	r5, r1
 801b50c:	b212      	sxth	r2, r2
 801b50e:	436f      	muls	r7, r5
 801b510:	ebae 0202 	sub.w	r2, lr, r2
 801b514:	4372      	muls	r2, r6
 801b516:	4297      	cmp	r7, r2
 801b518:	db09      	blt.n	801b52e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b51a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801b51e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801b522:	449c      	add	ip, r3
 801b524:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801b528:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801b52c:	e686      	b.n	801b23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b52e:	4421      	add	r1, r4
 801b530:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801b534:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801b538:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b53c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b540:	e67c      	b.n	801b23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b542:	9f04      	ldr	r7, [sp, #16]
 801b544:	42b8      	cmp	r0, r7
 801b546:	da27      	bge.n	801b598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b548:	9902      	ldr	r1, [sp, #8]
 801b54a:	1a3f      	subs	r7, r7, r0
 801b54c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801b550:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801b554:	eb05 010e 	add.w	r1, r5, lr
 801b558:	fa1f f881 	uxth.w	r8, r1
 801b55c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801b560:	4411      	add	r1, r2
 801b562:	fa0f f988 	sxth.w	r9, r8
 801b566:	eba2 020e 	sub.w	r2, r2, lr
 801b56a:	eba1 0108 	sub.w	r1, r1, r8
 801b56e:	4372      	muls	r2, r6
 801b570:	b289      	uxth	r1, r1
 801b572:	fa0f f881 	sxth.w	r8, r1
 801b576:	fb08 f707 	mul.w	r7, r8, r7
 801b57a:	42ba      	cmp	r2, r7
 801b57c:	dc06      	bgt.n	801b58c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801b57e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801b582:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801b586:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801b58a:	e7ca      	b.n	801b522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801b58c:	4429      	add	r1, r5
 801b58e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801b592:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b596:	e651      	b.n	801b23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b598:	9805      	ldr	r0, [sp, #20]
 801b59a:	2d06      	cmp	r5, #6
 801b59c:	ebaa 0000 	sub.w	r0, sl, r0
 801b5a0:	b280      	uxth	r0, r0
 801b5a2:	fa0f fe80 	sxth.w	lr, r0
 801b5a6:	d817      	bhi.n	801b5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801b5a8:	9b04      	ldr	r3, [sp, #16]
 801b5aa:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801b5ae:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801b5b2:	1c6b      	adds	r3, r5, #1
 801b5b4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801b5b8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801b5bc:	9b01      	ldr	r3, [sp, #4]
 801b5be:	9801      	ldr	r0, [sp, #4]
 801b5c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b5c4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b5c8:	805a      	strh	r2, [r3, #2]
 801b5ca:	809e      	strh	r6, [r3, #4]
 801b5cc:	80d9      	strh	r1, [r3, #6]
 801b5ce:	9b02      	ldr	r3, [sp, #8]
 801b5d0:	3c08      	subs	r4, #8
 801b5d2:	3b01      	subs	r3, #1
 801b5d4:	9302      	str	r3, [sp, #8]
 801b5d6:	e747      	b.n	801b468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801b5d8:	9a02      	ldr	r2, [sp, #8]
 801b5da:	45b6      	cmp	lr, r6
 801b5dc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b5e0:	db0d      	blt.n	801b5fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b5e2:	449c      	add	ip, r3
 801b5e4:	445a      	add	r2, fp
 801b5e6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801b5ea:	fa1f fc8c 	uxth.w	ip, ip
 801b5ee:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801b5f2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801b5f6:	448c      	add	ip, r1
 801b5f8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801b5fc:	e61e      	b.n	801b23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b5fe:	445a      	add	r2, fp
 801b600:	4484      	add	ip, r0
 801b602:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801b606:	e78f      	b.n	801b528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b608:	fa1f f18e 	uxth.w	r1, lr
 801b60c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801b610:	b293      	uxth	r3, r2
 801b612:	4596      	cmp	lr, r2
 801b614:	eb01 0806 	add.w	r8, r1, r6
 801b618:	9306      	str	r3, [sp, #24]
 801b61a:	fa1f f888 	uxth.w	r8, r8
 801b61e:	9f06      	ldr	r7, [sp, #24]
 801b620:	fa0f f388 	sxth.w	r3, r8
 801b624:	9307      	str	r3, [sp, #28]
 801b626:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b62a:	443b      	add	r3, r7
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	9308      	str	r3, [sp, #32]
 801b630:	da24      	bge.n	801b67c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801b632:	9905      	ldr	r1, [sp, #20]
 801b634:	eba3 0308 	sub.w	r3, r3, r8
 801b638:	eba2 020e 	sub.w	r2, r2, lr
 801b63c:	eba9 0000 	sub.w	r0, r9, r0
 801b640:	ebaa 0401 	sub.w	r4, sl, r1
 801b644:	b29b      	uxth	r3, r3
 801b646:	b2a4      	uxth	r4, r4
 801b648:	b219      	sxth	r1, r3
 801b64a:	b225      	sxth	r5, r4
 801b64c:	4348      	muls	r0, r1
 801b64e:	436a      	muls	r2, r5
 801b650:	4282      	cmp	r2, r0
 801b652:	9a02      	ldr	r2, [sp, #8]
 801b654:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b658:	445a      	add	r2, fp
 801b65a:	dc06      	bgt.n	801b66a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801b65c:	9b07      	ldr	r3, [sp, #28]
 801b65e:	44a4      	add	ip, r4
 801b660:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801b664:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801b668:	e75e      	b.n	801b528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b66a:	9904      	ldr	r1, [sp, #16]
 801b66c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801b670:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801b674:	4433      	add	r3, r6
 801b676:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b67a:	e5df      	b.n	801b23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b67c:	9f06      	ldr	r7, [sp, #24]
 801b67e:	9b04      	ldr	r3, [sp, #16]
 801b680:	1bc9      	subs	r1, r1, r7
 801b682:	fa0f f78a 	sxth.w	r7, sl
 801b686:	b289      	uxth	r1, r1
 801b688:	429f      	cmp	r7, r3
 801b68a:	fa0f fe81 	sxth.w	lr, r1
 801b68e:	dd23      	ble.n	801b6d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801b690:	9a05      	ldr	r2, [sp, #20]
 801b692:	eba9 0000 	sub.w	r0, r9, r0
 801b696:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b69a:	ebaa 0202 	sub.w	r2, sl, r2
 801b69e:	9d07      	ldr	r5, [sp, #28]
 801b6a0:	fb0e f000 	mul.w	r0, lr, r0
 801b6a4:	b292      	uxth	r2, r2
 801b6a6:	eba5 0a03 	sub.w	sl, r5, r3
 801b6aa:	9b02      	ldr	r3, [sp, #8]
 801b6ac:	b214      	sxth	r4, r2
 801b6ae:	00db      	lsls	r3, r3, #3
 801b6b0:	fb04 fa0a 	mul.w	sl, r4, sl
 801b6b4:	445b      	add	r3, fp
 801b6b6:	4550      	cmp	r0, sl
 801b6b8:	db03      	blt.n	801b6c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801b6ba:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801b6be:	4494      	add	ip, r2
 801b6c0:	e732      	b.n	801b528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b6c2:	9a04      	ldr	r2, [sp, #16]
 801b6c4:	4431      	add	r1, r6
 801b6c6:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801b6ca:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801b6ce:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801b6d2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b6d6:	e75c      	b.n	801b592 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801b6d8:	9b08      	ldr	r3, [sp, #32]
 801b6da:	2d06      	cmp	r5, #6
 801b6dc:	eba3 0308 	sub.w	r3, r3, r8
 801b6e0:	b29b      	uxth	r3, r3
 801b6e2:	b218      	sxth	r0, r3
 801b6e4:	d813      	bhi.n	801b70e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801b6e6:	9b07      	ldr	r3, [sp, #28]
 801b6e8:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801b6ec:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801b6f0:	1c6b      	adds	r3, r5, #1
 801b6f2:	9901      	ldr	r1, [sp, #4]
 801b6f4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801b6f8:	9b01      	ldr	r3, [sp, #4]
 801b6fa:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801b6fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b702:	805a      	strh	r2, [r3, #2]
 801b704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b706:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b70a:	809a      	strh	r2, [r3, #4]
 801b70c:	e75f      	b.n	801b5ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b70e:	9c02      	ldr	r4, [sp, #8]
 801b710:	4570      	cmp	r0, lr
 801b712:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b716:	db0d      	blt.n	801b734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801b718:	4431      	add	r1, r6
 801b71a:	9b06      	ldr	r3, [sp, #24]
 801b71c:	445c      	add	r4, fp
 801b71e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801b722:	b289      	uxth	r1, r1
 801b724:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801b728:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b72c:	4419      	add	r1, r3
 801b72e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801b732:	e583      	b.n	801b23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b734:	445c      	add	r4, fp
 801b736:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801b73a:	e79b      	b.n	801b674 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b73c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b740:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801b744:	1e65      	subs	r5, r4, #1
 801b746:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801b74a:	b2ad      	uxth	r5, r5
 801b74c:	42b5      	cmp	r5, r6
 801b74e:	d044      	beq.n	801b7da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b750:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b754:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801b758:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801b75c:	4282      	cmp	r2, r0
 801b75e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801b762:	d11f      	bne.n	801b7a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b764:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801b768:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b76c:	459c      	cmp	ip, r3
 801b76e:	d119      	bne.n	801b7a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b770:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801b774:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b778:	19d8      	adds	r0, r3, r7
 801b77a:	b200      	sxth	r0, r0
 801b77c:	4288      	cmp	r0, r1
 801b77e:	d109      	bne.n	801b794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801b780:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801b784:	4413      	add	r3, r2
 801b786:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801b78a:	4629      	mov	r1, r5
 801b78c:	9801      	ldr	r0, [sp, #4]
 801b78e:	f7ff fd2b 	bl	801b1e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b792:	e003      	b.n	801b79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b794:	4411      	add	r1, r2
 801b796:	b209      	sxth	r1, r1
 801b798:	42b9      	cmp	r1, r7
 801b79a:	d0f3      	beq.n	801b784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801b79c:	3d01      	subs	r5, #1
 801b79e:	3c08      	subs	r4, #8
 801b7a0:	b2ad      	uxth	r5, r5
 801b7a2:	e7d3      	b.n	801b74c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801b7a4:	42b9      	cmp	r1, r7
 801b7a6:	d1f9      	bne.n	801b79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b7a8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801b7ac:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b7b0:	4299      	cmp	r1, r3
 801b7b2:	d1f3      	bne.n	801b79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b7b4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b7b8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b7bc:	181f      	adds	r7, r3, r0
 801b7be:	b23f      	sxth	r7, r7
 801b7c0:	42ba      	cmp	r2, r7
 801b7c2:	d105      	bne.n	801b7d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801b7c4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801b7c8:	440b      	add	r3, r1
 801b7ca:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b7ce:	e7dc      	b.n	801b78a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801b7d0:	440a      	add	r2, r1
 801b7d2:	b212      	sxth	r2, r2
 801b7d4:	4290      	cmp	r0, r2
 801b7d6:	d1e1      	bne.n	801b79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b7d8:	e7f6      	b.n	801b7c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801b7da:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801b7de:	2e07      	cmp	r6, #7
 801b7e0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b7e4:	d812      	bhi.n	801b80c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b7e6:	1c75      	adds	r5, r6, #1
 801b7e8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b7ec:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801b7f0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801b7f4:	9d01      	ldr	r5, [sp, #4]
 801b7f6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b7fa:	442c      	add	r4, r5
 801b7fc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801b800:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b804:	8061      	strh	r1, [r4, #2]
 801b806:	80a2      	strh	r2, [r4, #4]
 801b808:	80e3      	strh	r3, [r4, #6]
 801b80a:	e581      	b.n	801b310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b80c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b810:	3e01      	subs	r6, #1
 801b812:	445c      	add	r4, fp
 801b814:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801b818:	f04f 37ff 	mov.w	r7, #4294967295
 801b81c:	2500      	movs	r5, #0
 801b81e:	9305      	str	r3, [sp, #20]
 801b820:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b824:	1e72      	subs	r2, r6, #1
 801b826:	9302      	str	r3, [sp, #8]
 801b828:	4691      	mov	r9, r2
 801b82a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b82e:	9304      	str	r3, [sp, #16]
 801b830:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801b834:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b838:	6818      	ldr	r0, [r3, #0]
 801b83a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b83e:	9207      	str	r2, [sp, #28]
 801b840:	bf16      	itet	ne
 801b842:	9905      	ldrne	r1, [sp, #20]
 801b844:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b848:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b84c:	9306      	str	r3, [sp, #24]
 801b84e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b852:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b856:	fb18 f801 	smulbb	r8, r8, r1
 801b85a:	6859      	ldr	r1, [r3, #4]
 801b85c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b860:	4671      	mov	r1, lr
 801b862:	a80c      	add	r0, sp, #48	@ 0x30
 801b864:	f7ff fb50 	bl	801af08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b868:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801b86c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801b870:	f04f 0c08 	mov.w	ip, #8
 801b874:	9b04      	ldr	r3, [sp, #16]
 801b876:	9a02      	ldr	r2, [sp, #8]
 801b878:	fb10 f001 	smulbb	r0, r0, r1
 801b87c:	fb02 8803 	mla	r8, r2, r3, r8
 801b880:	eba0 0108 	sub.w	r1, r0, r8
 801b884:	fb90 f0fc 	sdiv	r0, r0, ip
 801b888:	4288      	cmp	r0, r1
 801b88a:	dc20      	bgt.n	801b8ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b88c:	4551      	cmp	r1, sl
 801b88e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b892:	da03      	bge.n	801b89c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801b894:	b1d9      	cbz	r1, 801b8ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b896:	468a      	mov	sl, r1
 801b898:	464f      	mov	r7, r9
 801b89a:	4635      	mov	r5, r6
 801b89c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b8a0:	f119 0f02 	cmn.w	r9, #2
 801b8a4:	d1c6      	bne.n	801b834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801b8a6:	4616      	mov	r6, r2
 801b8a8:	3201      	adds	r2, #1
 801b8aa:	f1a4 0408 	sub.w	r4, r4, #8
 801b8ae:	d1b7      	bne.n	801b820 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801b8b0:	9b01      	ldr	r3, [sp, #4]
 801b8b2:	b2ac      	uxth	r4, r5
 801b8b4:	00ed      	lsls	r5, r5, #3
 801b8b6:	1958      	adds	r0, r3, r5
 801b8b8:	1c7b      	adds	r3, r7, #1
 801b8ba:	d10b      	bne.n	801b8d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801b8bc:	4601      	mov	r1, r0
 801b8be:	9803      	ldr	r0, [sp, #12]
 801b8c0:	f7ff fb22 	bl	801af08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b8c4:	4621      	mov	r1, r4
 801b8c6:	9801      	ldr	r0, [sp, #4]
 801b8c8:	f7ff fc8e 	bl	801b1e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b8cc:	e4b6      	b.n	801b23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b8ce:	464f      	mov	r7, r9
 801b8d0:	4635      	mov	r5, r6
 801b8d2:	e7ed      	b.n	801b8b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801b8d4:	9b01      	ldr	r3, [sp, #4]
 801b8d6:	00ff      	lsls	r7, r7, #3
 801b8d8:	445d      	add	r5, fp
 801b8da:	19d9      	adds	r1, r3, r7
 801b8dc:	445f      	add	r7, fp
 801b8de:	f7ff fb13 	bl	801af08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b8e2:	9b03      	ldr	r3, [sp, #12]
 801b8e4:	cb03      	ldmia	r3!, {r0, r1}
 801b8e6:	9b03      	ldr	r3, [sp, #12]
 801b8e8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801b8ec:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801b8f0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801b8f4:	6869      	ldr	r1, [r5, #4]
 801b8f6:	c303      	stmia	r3!, {r0, r1}
 801b8f8:	e7e4      	b.n	801b8c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801b8fa:	bf00      	nop

0801b8fc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b900:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801b904:	b09b      	sub	sp, #108	@ 0x6c
 801b906:	4604      	mov	r4, r0
 801b908:	4630      	mov	r0, r6
 801b90a:	f7f8 fe1a 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b90e:	4605      	mov	r5, r0
 801b910:	b948      	cbnz	r0, 801b926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801b912:	6823      	ldr	r3, [r4, #0]
 801b914:	4620      	mov	r0, r4
 801b916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b918:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b91c:	4798      	blx	r3
 801b91e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801b922:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801b926:	4bc5      	ldr	r3, [pc, #788]	@ (801bc3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d03f      	beq.n	801b9ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b92e:	4dc4      	ldr	r5, [pc, #784]	@ (801bc40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801b930:	4628      	mov	r0, r5
 801b932:	f7f8 fe06 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b936:	4606      	mov	r6, r0
 801b938:	2800      	cmp	r0, #0
 801b93a:	d138      	bne.n	801b9ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b93c:	4628      	mov	r0, r5
 801b93e:	f7ff f959 	bl	801abf4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b942:	6823      	ldr	r3, [r4, #0]
 801b944:	6829      	ldr	r1, [r5, #0]
 801b946:	4620      	mov	r0, r4
 801b948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b94a:	686a      	ldr	r2, [r5, #4]
 801b94c:	4798      	blx	r3
 801b94e:	802e      	strh	r6, [r5, #0]
 801b950:	806e      	strh	r6, [r5, #2]
 801b952:	80ae      	strh	r6, [r5, #4]
 801b954:	80ee      	strh	r6, [r5, #6]
 801b956:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801b95a:	4dba      	ldr	r5, [pc, #744]	@ (801bc44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801b95c:	4640      	mov	r0, r8
 801b95e:	f7ff fbe7 	bl	801b130 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b962:	882e      	ldrh	r6, [r5, #0]
 801b964:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801b968:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801b96c:	4633      	mov	r3, r6
 801b96e:	42bb      	cmp	r3, r7
 801b970:	d224      	bcs.n	801b9bc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b972:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801b976:	2907      	cmp	r1, #7
 801b978:	d816      	bhi.n	801b9a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801b97a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b97e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801b982:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801b986:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801b98a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801b98e:	1c4a      	adds	r2, r1, #1
 801b990:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801b994:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801b998:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801b99c:	f8a2 a002 	strh.w	sl, [r2, #2]
 801b9a0:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b9a4:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b9a8:	3301      	adds	r3, #1
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	e7df      	b.n	801b96e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801b9ae:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d1cf      	bne.n	801b956 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801b9b6:	b01b      	add	sp, #108	@ 0x6c
 801b9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9bc:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801b9c0:	42b3      	cmp	r3, r6
 801b9c2:	d90c      	bls.n	801b9de <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801b9c4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b9c8:	6822      	ldr	r2, [r4, #0]
 801b9ca:	3601      	adds	r6, #1
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801b9d0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801b9d4:	b2b6      	uxth	r6, r6
 801b9d6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801b9da:	47b8      	blx	r7
 801b9dc:	e7ee      	b.n	801b9bc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b9de:	4a9a      	ldr	r2, [pc, #616]	@ (801bc48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b9e0:	6813      	ldr	r3, [r2, #0]
 801b9e2:	4691      	mov	r9, r2
 801b9e4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801b9e8:	2b01      	cmp	r3, #1
 801b9ea:	f040 80e0 	bne.w	801bbae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801b9ee:	8829      	ldrh	r1, [r5, #0]
 801b9f0:	2600      	movs	r6, #0
 801b9f2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801b9f6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801b9fa:	33ae      	adds	r3, #174	@ 0xae
 801b9fc:	428f      	cmp	r7, r1
 801b9fe:	f103 0308 	add.w	r3, r3, #8
 801ba02:	dd0a      	ble.n	801ba1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801ba04:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801ba08:	3101      	adds	r1, #1
 801ba0a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801ba0e:	4402      	add	r2, r0
 801ba10:	b212      	sxth	r2, r2
 801ba12:	4296      	cmp	r6, r2
 801ba14:	bfb8      	it	lt
 801ba16:	4616      	movlt	r6, r2
 801ba18:	e7f0      	b.n	801b9fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801ba1a:	4b8c      	ldr	r3, [pc, #560]	@ (801bc4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801ba1c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801bc48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801ba20:	881b      	ldrh	r3, [r3, #0]
 801ba22:	2b0f      	cmp	r3, #15
 801ba24:	bf8c      	ite	hi
 801ba26:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801ba2a:	f04f 0b01 	movls.w	fp, #1
 801ba2e:	2300      	movs	r3, #0
 801ba30:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ba34:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801ba38:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801ba3c:	4b82      	ldr	r3, [pc, #520]	@ (801bc48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801ba3e:	4438      	add	r0, r7
 801ba40:	b207      	sxth	r7, r0
 801ba42:	6818      	ldr	r0, [r3, #0]
 801ba44:	42b7      	cmp	r7, r6
 801ba46:	6803      	ldr	r3, [r0, #0]
 801ba48:	f280 8083 	bge.w	801bb52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801ba4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ba50:	4798      	blx	r3
 801ba52:	eb07 030b 	add.w	r3, r7, fp
 801ba56:	4298      	cmp	r0, r3
 801ba58:	da07      	bge.n	801ba6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801ba5a:	42b0      	cmp	r0, r6
 801ba5c:	da05      	bge.n	801ba6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801ba5e:	4287      	cmp	r7, r0
 801ba60:	dd6c      	ble.n	801bb3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801ba62:	2f00      	cmp	r7, #0
 801ba64:	dd6a      	ble.n	801bb3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801ba66:	4630      	mov	r0, r6
 801ba68:	e004      	b.n	801ba74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801ba6a:	4287      	cmp	r7, r0
 801ba6c:	dcfb      	bgt.n	801ba66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801ba6e:	42b0      	cmp	r0, r6
 801ba70:	bfa8      	it	ge
 801ba72:	4630      	movge	r0, r6
 801ba74:	4b76      	ldr	r3, [pc, #472]	@ (801bc50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801ba76:	1bc0      	subs	r0, r0, r7
 801ba78:	2200      	movs	r2, #0
 801ba7a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801ba7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba82:	882f      	ldrh	r7, [r5, #0]
 801ba84:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ba88:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ba8c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ba90:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801ba94:	42bb      	cmp	r3, r7
 801ba96:	d9cd      	bls.n	801ba34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801ba98:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801ba9c:	ab07      	add	r3, sp, #28
 801ba9e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801baa2:	6851      	ldr	r1, [r2, #4]
 801baa4:	c303      	stmia	r3!, {r0, r1}
 801baa6:	a905      	add	r1, sp, #20
 801baa8:	a807      	add	r0, sp, #28
 801baaa:	f7ff f994 	bl	801add6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801baae:	2800      	cmp	r0, #0
 801bab0:	d04c      	beq.n	801bb4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801bab2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801bab6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801baba:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801babe:	4686      	mov	lr, r0
 801bac0:	4290      	cmp	r0, r2
 801bac2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801bac6:	4450      	add	r0, sl
 801bac8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801bacc:	bfb8      	it	lt
 801bace:	4696      	movlt	lr, r2
 801bad0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bad4:	4452      	add	r2, sl
 801bad6:	b280      	uxth	r0, r0
 801bad8:	4299      	cmp	r1, r3
 801bada:	468c      	mov	ip, r1
 801badc:	b292      	uxth	r2, r2
 801bade:	9302      	str	r3, [sp, #8]
 801bae0:	bfb8      	it	lt
 801bae2:	469c      	movlt	ip, r3
 801bae4:	b203      	sxth	r3, r0
 801bae6:	fa0f fa82 	sxth.w	sl, r2
 801baea:	f8ad e01c 	strh.w	lr, [sp, #28]
 801baee:	f8ad c01e 	strh.w	ip, [sp, #30]
 801baf2:	4553      	cmp	r3, sl
 801baf4:	bfb8      	it	lt
 801baf6:	4602      	movlt	r2, r0
 801baf8:	9b02      	ldr	r3, [sp, #8]
 801bafa:	eba2 020e 	sub.w	r2, r2, lr
 801bafe:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bb02:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801bb06:	4411      	add	r1, r2
 801bb08:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bb0c:	4413      	add	r3, r2
 801bb0e:	b289      	uxth	r1, r1
 801bb10:	b29b      	uxth	r3, r3
 801bb12:	b208      	sxth	r0, r1
 801bb14:	b21a      	sxth	r2, r3
 801bb16:	4290      	cmp	r0, r2
 801bb18:	bfb8      	it	lt
 801bb1a:	460b      	movlt	r3, r1
 801bb1c:	eba3 030c 	sub.w	r3, r3, ip
 801bb20:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bb24:	a807      	add	r0, sp, #28
 801bb26:	f7f8 fd0c 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bb2a:	b920      	cbnz	r0, 801bb36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801bb2c:	6823      	ldr	r3, [r4, #0]
 801bb2e:	a907      	add	r1, sp, #28
 801bb30:	4620      	mov	r0, r4
 801bb32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bb34:	4798      	blx	r3
 801bb36:	3701      	adds	r7, #1
 801bb38:	b2bf      	uxth	r7, r7
 801bb3a:	e7a9      	b.n	801ba90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801bb3c:	f8d9 0000 	ldr.w	r0, [r9]
 801bb40:	2101      	movs	r1, #1
 801bb42:	6803      	ldr	r3, [r0, #0]
 801bb44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801bb48:	4798      	blx	r3
 801bb4a:	e773      	b.n	801ba34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801bb4c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801bb50:	e7e8      	b.n	801bb24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801bb52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb54:	4798      	blx	r3
 801bb56:	4b3f      	ldr	r3, [pc, #252]	@ (801bc54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801bb58:	781b      	ldrb	r3, [r3, #0]
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	f43f af2b 	beq.w	801b9b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bb60:	2300      	movs	r3, #0
 801bb62:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801bb66:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801bb6a:	882b      	ldrh	r3, [r5, #0]
 801bb6c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801bb70:	42ab      	cmp	r3, r5
 801bb72:	f4bf af20 	bcs.w	801b9b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801bb76:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801bb7a:	2907      	cmp	r1, #7
 801bb7c:	d814      	bhi.n	801bba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801bb7e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801bb82:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801bb86:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801bb8a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801bb8e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801bb92:	1c4a      	adds	r2, r1, #1
 801bb94:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801bb98:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801bb9c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801bba0:	f8a2 c002 	strh.w	ip, [r2, #2]
 801bba4:	8097      	strh	r7, [r2, #4]
 801bba6:	80d6      	strh	r6, [r2, #6]
 801bba8:	3301      	adds	r3, #1
 801bbaa:	b29b      	uxth	r3, r3
 801bbac:	e7e0      	b.n	801bb70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801bbae:	2b02      	cmp	r3, #2
 801bbb0:	f040 8133 	bne.w	801be1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801bbb4:	4b28      	ldr	r3, [pc, #160]	@ (801bc58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801bbb6:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801bbba:	781b      	ldrb	r3, [r3, #0]
 801bbbc:	2b01      	cmp	r3, #1
 801bbbe:	f000 8098 	beq.w	801bcf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bbc2:	882a      	ldrh	r2, [r5, #0]
 801bbc4:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801bbc8:	3201      	adds	r2, #1
 801bbca:	b292      	uxth	r2, r2
 801bbcc:	2900      	cmp	r1, #0
 801bbce:	d0c2      	beq.n	801bb56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bbd0:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801bbd4:	4694      	mov	ip, r2
 801bbd6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801bbda:	f04f 0900 	mov.w	r9, #0
 801bbde:	441e      	add	r6, r3
 801bbe0:	b236      	sxth	r6, r6
 801bbe2:	fa1f f38c 	uxth.w	r3, ip
 801bbe6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801bbea:	4299      	cmp	r1, r3
 801bbec:	f240 80be 	bls.w	801bd6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801bbf0:	4427      	add	r7, r4
 801bbf2:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801bbf6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801bbfa:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801bbfe:	4283      	cmp	r3, r0
 801bc00:	f340 80a0 	ble.w	801bd44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801bc04:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801bc08:	46e1      	mov	r9, ip
 801bc0a:	4406      	add	r6, r0
 801bc0c:	b236      	sxth	r6, r6
 801bc0e:	429e      	cmp	r6, r3
 801bc10:	bfa8      	it	ge
 801bc12:	461e      	movge	r6, r3
 801bc14:	f10c 0c01 	add.w	ip, ip, #1
 801bc18:	e7e3      	b.n	801bbe2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801bc1a:	d10a      	bne.n	801bc32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801bc1c:	4562      	cmp	r2, ip
 801bc1e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801bc22:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801bc26:	bfb8      	it	lt
 801bc28:	4662      	movlt	r2, ip
 801bc2a:	4288      	cmp	r0, r1
 801bc2c:	bfb8      	it	lt
 801bc2e:	461f      	movlt	r7, r3
 801bc30:	e086      	b.n	801bd40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801bc32:	428a      	cmp	r2, r1
 801bc34:	bfb8      	it	lt
 801bc36:	460a      	movlt	r2, r1
 801bc38:	e082      	b.n	801bd40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801bc3a:	bf00      	nop
 801bc3c:	240621f8 	.word	0x240621f8
 801bc40:	24062204 	.word	0x24062204
 801bc44:	2400007c 	.word	0x2400007c
 801bc48:	240621b8 	.word	0x240621b8
 801bc4c:	240621ae 	.word	0x240621ae
 801bc50:	240621ac 	.word	0x240621ac
 801bc54:	240621b6 	.word	0x240621b6
 801bc58:	240621b0 	.word	0x240621b0
 801bc5c:	19a1      	adds	r1, r4, r6
 801bc5e:	ab07      	add	r3, sp, #28
 801bc60:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801bc64:	6849      	ldr	r1, [r1, #4]
 801bc66:	c303      	stmia	r3!, {r0, r1}
 801bc68:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bc6c:	a807      	add	r0, sp, #28
 801bc6e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bc72:	2b13      	cmp	r3, #19
 801bc74:	440b      	add	r3, r1
 801bc76:	bfd8      	it	le
 801bc78:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801bc7c:	1a9b      	subs	r3, r3, r2
 801bc7e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bc82:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bc86:	f7fe ffcf 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bc8a:	a807      	add	r0, sp, #28
 801bc8c:	f7f8 fc59 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc90:	bb78      	cbnz	r0, 801bcf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bc92:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801bc96:	4426      	add	r6, r4
 801bc98:	f8d9 0000 	ldr.w	r0, [r9]
 801bc9c:	f1bc 0f14 	cmp.w	ip, #20
 801bca0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bca4:	f8d0 e000 	ldr.w	lr, [r0]
 801bca8:	bfa8      	it	ge
 801bcaa:	f04f 0c14 	movge.w	ip, #20
 801bcae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801bcb2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bcb6:	fa1f fc8c 	uxth.w	ip, ip
 801bcba:	f8cd c000 	str.w	ip, [sp]
 801bcbe:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801bcc2:	47d8      	blx	fp
 801bcc4:	4683      	mov	fp, r0
 801bcc6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bcca:	a807      	add	r0, sp, #28
 801bccc:	f7fe ff92 	bl	801abf4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bcd0:	6823      	ldr	r3, [r4, #0]
 801bcd2:	4620      	mov	r0, r4
 801bcd4:	a907      	add	r1, sp, #28
 801bcd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bcd8:	4798      	blx	r3
 801bcda:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801bcde:	eba0 000b 	sub.w	r0, r0, fp
 801bce2:	b200      	sxth	r0, r0
 801bce4:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801bce8:	b918      	cbnz	r0, 801bcf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801bcea:	b2b9      	uxth	r1, r7
 801bcec:	4650      	mov	r0, sl
 801bcee:	f7ff fa7b 	bl	801b1e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bcf2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801bcf6:	f1bb 0f00 	cmp.w	fp, #0
 801bcfa:	f43f af2c 	beq.w	801bb56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bcfe:	882b      	ldrh	r3, [r5, #0]
 801bd00:	2700      	movs	r7, #0
 801bd02:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801bd06:	3301      	adds	r3, #1
 801bd08:	b29b      	uxth	r3, r3
 801bd0a:	b299      	uxth	r1, r3
 801bd0c:	00fe      	lsls	r6, r7, #3
 801bd0e:	458b      	cmp	fp, r1
 801bd10:	d9a4      	bls.n	801bc5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801bd12:	4426      	add	r6, r4
 801bd14:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801bd18:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801bd1c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801bd20:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801bd24:	4408      	add	r0, r1
 801bd26:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801bd2a:	4461      	add	r1, ip
 801bd2c:	b200      	sxth	r0, r0
 801bd2e:	b209      	sxth	r1, r1
 801bd30:	4288      	cmp	r0, r1
 801bd32:	f6bf af72 	bge.w	801bc1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801bd36:	4584      	cmp	ip, r0
 801bd38:	4662      	mov	r2, ip
 801bd3a:	461f      	mov	r7, r3
 801bd3c:	bfb8      	it	lt
 801bd3e:	4602      	movlt	r2, r0
 801bd40:	3301      	adds	r3, #1
 801bd42:	e7e2      	b.n	801bd0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801bd44:	d10e      	bne.n	801bd64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801bd46:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801bd4a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801bd4e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801bd52:	4473      	add	r3, lr
 801bd54:	b21b      	sxth	r3, r3
 801bd56:	429e      	cmp	r6, r3
 801bd58:	bfa8      	it	ge
 801bd5a:	461e      	movge	r6, r3
 801bd5c:	4287      	cmp	r7, r0
 801bd5e:	bfb8      	it	lt
 801bd60:	46e1      	movlt	r9, ip
 801bd62:	e757      	b.n	801bc14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801bd64:	4286      	cmp	r6, r0
 801bd66:	bfa8      	it	ge
 801bd68:	4606      	movge	r6, r0
 801bd6a:	e753      	b.n	801bc14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801bd6c:	eb0a 0007 	add.w	r0, sl, r7
 801bd70:	4427      	add	r7, r4
 801bd72:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801bd76:	f1bb 0f13 	cmp.w	fp, #19
 801bd7a:	bfdc      	itt	le
 801bd7c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801bd80:	445e      	addle	r6, fp
 801bd82:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801bd86:	bfd8      	it	le
 801bd88:	b236      	sxthle	r6, r6
 801bd8a:	f7f8 fbda 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bd8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801bd92:	2800      	cmp	r0, #0
 801bd94:	f47f af1a 	bne.w	801bbcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801bd98:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801bd9c:	fa1f fb8b 	uxth.w	fp, fp
 801bda0:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bda4:	1ab6      	subs	r6, r6, r2
 801bda6:	4829      	ldr	r0, [pc, #164]	@ (801be4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801bda8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801bdac:	2e14      	cmp	r6, #20
 801bdae:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801bdb2:	6800      	ldr	r0, [r0, #0]
 801bdb4:	bfa8      	it	ge
 801bdb6:	2614      	movge	r6, #20
 801bdb8:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bdbc:	f8ad 201e 	strh.w	r2, [sp, #30]
 801bdc0:	b289      	uxth	r1, r1
 801bdc2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bdc6:	b2b6      	uxth	r6, r6
 801bdc8:	f8d0 c000 	ldr.w	ip, [r0]
 801bdcc:	b292      	uxth	r2, r2
 801bdce:	455e      	cmp	r6, fp
 801bdd0:	bf94      	ite	ls
 801bdd2:	9600      	strls	r6, [sp, #0]
 801bdd4:	f8cd b000 	strhi.w	fp, [sp]
 801bdd8:	b29b      	uxth	r3, r3
 801bdda:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801bdde:	47b0      	blx	r6
 801bde0:	6823      	ldr	r3, [r4, #0]
 801bde2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801bde6:	a907      	add	r1, sp, #28
 801bde8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bdea:	4620      	mov	r0, r4
 801bdec:	4798      	blx	r3
 801bdee:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801bdf2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801bdf6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801bdfa:	1a5b      	subs	r3, r3, r1
 801bdfc:	440a      	add	r2, r1
 801bdfe:	b21b      	sxth	r3, r3
 801be00:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801be04:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801be08:	2b00      	cmp	r3, #0
 801be0a:	f47f aeda 	bne.w	801bbc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801be0e:	fa1f f189 	uxth.w	r1, r9
 801be12:	4650      	mov	r0, sl
 801be14:	f7ff f9e8 	bl	801b1e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be18:	e6d3      	b.n	801bbc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801be1a:	882e      	ldrh	r6, [r5, #0]
 801be1c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801be20:	42b3      	cmp	r3, r6
 801be22:	f67f ae98 	bls.w	801bb56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801be26:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801be2a:	ab07      	add	r3, sp, #28
 801be2c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801be30:	6851      	ldr	r1, [r2, #4]
 801be32:	c303      	stmia	r3!, {r0, r1}
 801be34:	a807      	add	r0, sp, #28
 801be36:	f7f8 fb84 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801be3a:	b920      	cbnz	r0, 801be46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801be3c:	6823      	ldr	r3, [r4, #0]
 801be3e:	a907      	add	r1, sp, #28
 801be40:	4620      	mov	r0, r4
 801be42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be44:	4798      	blx	r3
 801be46:	3601      	adds	r6, #1
 801be48:	b2b6      	uxth	r6, r6
 801be4a:	e7e7      	b.n	801be1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801be4c:	240621b8 	.word	0x240621b8

0801be50 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801be50:	4b03      	ldr	r3, [pc, #12]	@ (801be60 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801be52:	2200      	movs	r2, #0
 801be54:	801a      	strh	r2, [r3, #0]
 801be56:	805a      	strh	r2, [r3, #2]
 801be58:	809a      	strh	r2, [r3, #4]
 801be5a:	80da      	strh	r2, [r3, #6]
 801be5c:	4770      	bx	lr
 801be5e:	bf00      	nop
 801be60:	24062204 	.word	0x24062204

0801be64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801be64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be68:	b09d      	sub	sp, #116	@ 0x74
 801be6a:	4606      	mov	r6, r0
 801be6c:	4614      	mov	r4, r2
 801be6e:	468a      	mov	sl, r1
 801be70:	a803      	add	r0, sp, #12
 801be72:	461d      	mov	r5, r3
 801be74:	f001 f94c 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 801be78:	6833      	ldr	r3, [r6, #0]
 801be7a:	4630      	mov	r0, r6
 801be7c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801be80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801be82:	4798      	blx	r3
 801be84:	6833      	ldr	r3, [r6, #0]
 801be86:	4607      	mov	r7, r0
 801be88:	4630      	mov	r0, r6
 801be8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801be8c:	4798      	blx	r3
 801be8e:	462a      	mov	r2, r5
 801be90:	2500      	movs	r5, #0
 801be92:	4621      	mov	r1, r4
 801be94:	9000      	str	r0, [sp, #0]
 801be96:	463b      	mov	r3, r7
 801be98:	462c      	mov	r4, r5
 801be9a:	46a9      	mov	r9, r5
 801be9c:	46a8      	mov	r8, r5
 801be9e:	a803      	add	r0, sp, #12
 801bea0:	f001 f991 	bl	801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bea4:	2300      	movs	r3, #0
 801bea6:	9302      	str	r3, [sp, #8]
 801bea8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801beac:	429c      	cmp	r4, r3
 801beae:	d002      	beq.n	801beb6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801beb0:	455c      	cmp	r4, fp
 801beb2:	bf18      	it	ne
 801beb4:	4625      	movne	r5, r4
 801beb6:	ab02      	add	r3, sp, #8
 801beb8:	4632      	mov	r2, r6
 801beba:	4651      	mov	r1, sl
 801bebc:	a803      	add	r0, sp, #12
 801bebe:	f001 fc87 	bl	801d7d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bec2:	4604      	mov	r4, r0
 801bec4:	b108      	cbz	r0, 801beca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801bec6:	280a      	cmp	r0, #10
 801bec8:	d10a      	bne.n	801bee0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801beca:	45c1      	cmp	r9, r8
 801becc:	bf38      	it	cc
 801bece:	46c1      	movcc	r9, r8
 801bed0:	f04f 0800 	mov.w	r8, #0
 801bed4:	2c00      	cmp	r4, #0
 801bed6:	d1e5      	bne.n	801bea4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bed8:	4648      	mov	r0, r9
 801beda:	b01d      	add	sp, #116	@ 0x74
 801bedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bee0:	9a02      	ldr	r2, [sp, #8]
 801bee2:	2a00      	cmp	r2, #0
 801bee4:	d0de      	beq.n	801bea4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bee6:	7b57      	ldrb	r7, [r2, #13]
 801bee8:	4629      	mov	r1, r5
 801beea:	6833      	ldr	r3, [r6, #0]
 801beec:	007f      	lsls	r7, r7, #1
 801beee:	8894      	ldrh	r4, [r2, #4]
 801bef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bef2:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801bef6:	7a97      	ldrb	r7, [r2, #10]
 801bef8:	4307      	orrs	r7, r0
 801befa:	4630      	mov	r0, r6
 801befc:	4798      	blx	r3
 801befe:	4438      	add	r0, r7
 801bf00:	4480      	add	r8, r0
 801bf02:	fa1f f888 	uxth.w	r8, r8
 801bf06:	e7e5      	b.n	801bed4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801bf08 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801bf08:	b508      	push	{r3, lr}
 801bf0a:	6803      	ldr	r3, [r0, #0]
 801bf0c:	68db      	ldr	r3, [r3, #12]
 801bf0e:	4798      	blx	r3
 801bf10:	b128      	cbz	r0, 801bf1e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801bf12:	7b43      	ldrb	r3, [r0, #13]
 801bf14:	7a80      	ldrb	r0, [r0, #10]
 801bf16:	005b      	lsls	r3, r3, #1
 801bf18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bf1c:	4318      	orrs	r0, r3
 801bf1e:	bd08      	pop	{r3, pc}

0801bf20 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801bf20:	b40e      	push	{r1, r2, r3}
 801bf22:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf24:	b09e      	sub	sp, #120	@ 0x78
 801bf26:	4605      	mov	r5, r0
 801bf28:	ab23      	add	r3, sp, #140	@ 0x8c
 801bf2a:	a805      	add	r0, sp, #20
 801bf2c:	f853 4b04 	ldr.w	r4, [r3], #4
 801bf30:	9303      	str	r3, [sp, #12]
 801bf32:	f001 f8ed 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 801bf36:	682b      	ldr	r3, [r5, #0]
 801bf38:	4628      	mov	r0, r5
 801bf3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf3c:	4798      	blx	r3
 801bf3e:	682b      	ldr	r3, [r5, #0]
 801bf40:	4606      	mov	r6, r0
 801bf42:	4628      	mov	r0, r5
 801bf44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bf46:	4798      	blx	r3
 801bf48:	4633      	mov	r3, r6
 801bf4a:	4621      	mov	r1, r4
 801bf4c:	ae1e      	add	r6, sp, #120	@ 0x78
 801bf4e:	2400      	movs	r4, #0
 801bf50:	9000      	str	r0, [sp, #0]
 801bf52:	9a03      	ldr	r2, [sp, #12]
 801bf54:	a805      	add	r0, sp, #20
 801bf56:	f001 f936 	bl	801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bf5a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801bf5e:	462a      	mov	r2, r5
 801bf60:	4633      	mov	r3, r6
 801bf62:	4621      	mov	r1, r4
 801bf64:	a805      	add	r0, sp, #20
 801bf66:	f001 fc33 	bl	801d7d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bf6a:	b300      	cbz	r0, 801bfae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801bf6c:	280a      	cmp	r0, #10
 801bf6e:	d01a      	beq.n	801bfa6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bf70:	9f04      	ldr	r7, [sp, #16]
 801bf72:	b1c7      	cbz	r7, 801bfa6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bf74:	7b78      	ldrb	r0, [r7, #13]
 801bf76:	7a3b      	ldrb	r3, [r7, #8]
 801bf78:	00c1      	lsls	r1, r0, #3
 801bf7a:	88ea      	ldrh	r2, [r5, #6]
 801bf7c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801bf80:	4319      	orrs	r1, r3
 801bf82:	0643      	lsls	r3, r0, #25
 801bf84:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801bf88:	bf48      	it	mi
 801bf8a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801bf8e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801bf92:	bf48      	it	mi
 801bf94:	b219      	sxthmi	r1, r3
 801bf96:	79fb      	ldrb	r3, [r7, #7]
 801bf98:	4303      	orrs	r3, r0
 801bf9a:	4413      	add	r3, r2
 801bf9c:	1a5b      	subs	r3, r3, r1
 801bf9e:	b21b      	sxth	r3, r3
 801bfa0:	429c      	cmp	r4, r3
 801bfa2:	bfb8      	it	lt
 801bfa4:	461c      	movlt	r4, r3
 801bfa6:	4633      	mov	r3, r6
 801bfa8:	462a      	mov	r2, r5
 801bfaa:	2100      	movs	r1, #0
 801bfac:	e7da      	b.n	801bf64 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801bfae:	b2a0      	uxth	r0, r4
 801bfb0:	b01e      	add	sp, #120	@ 0x78
 801bfb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bfb6:	b003      	add	sp, #12
 801bfb8:	4770      	bx	lr

0801bfba <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801bfba:	7a43      	ldrb	r3, [r0, #9]
 801bfbc:	8880      	ldrh	r0, [r0, #4]
 801bfbe:	4418      	add	r0, r3
 801bfc0:	b280      	uxth	r0, r0
 801bfc2:	4770      	bx	lr

0801bfc4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801bfc4:	6803      	ldr	r3, [r0, #0]
 801bfc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bfc8:	4718      	bx	r3

0801bfca <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801bfca:	b40e      	push	{r1, r2, r3}
 801bfcc:	b570      	push	{r4, r5, r6, lr}
 801bfce:	b09d      	sub	sp, #116	@ 0x74
 801bfd0:	4604      	mov	r4, r0
 801bfd2:	ab21      	add	r3, sp, #132	@ 0x84
 801bfd4:	a803      	add	r0, sp, #12
 801bfd6:	f853 5b04 	ldr.w	r5, [r3], #4
 801bfda:	9302      	str	r3, [sp, #8]
 801bfdc:	f001 f898 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 801bfe0:	6823      	ldr	r3, [r4, #0]
 801bfe2:	4620      	mov	r0, r4
 801bfe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfe6:	4798      	blx	r3
 801bfe8:	6823      	ldr	r3, [r4, #0]
 801bfea:	4606      	mov	r6, r0
 801bfec:	4620      	mov	r0, r4
 801bfee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bff0:	2401      	movs	r4, #1
 801bff2:	4798      	blx	r3
 801bff4:	4633      	mov	r3, r6
 801bff6:	9000      	str	r0, [sp, #0]
 801bff8:	4629      	mov	r1, r5
 801bffa:	9a02      	ldr	r2, [sp, #8]
 801bffc:	a803      	add	r0, sp, #12
 801bffe:	f001 f8e2 	bl	801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c002:	a803      	add	r0, sp, #12
 801c004:	f001 fcb0 	bl	801d968 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c008:	b2a3      	uxth	r3, r4
 801c00a:	b138      	cbz	r0, 801c01c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c00c:	280a      	cmp	r0, #10
 801c00e:	a803      	add	r0, sp, #12
 801c010:	bf04      	itt	eq
 801c012:	3301      	addeq	r3, #1
 801c014:	b21c      	sxtheq	r4, r3
 801c016:	f001 fca7 	bl	801d968 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c01a:	e7f5      	b.n	801c008 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c01c:	4618      	mov	r0, r3
 801c01e:	b01d      	add	sp, #116	@ 0x74
 801c020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c024:	b003      	add	sp, #12
 801c026:	4770      	bx	lr

0801c028 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c028:	b40e      	push	{r1, r2, r3}
 801c02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c02c:	b09e      	sub	sp, #120	@ 0x78
 801c02e:	4604      	mov	r4, r0
 801c030:	ab23      	add	r3, sp, #140	@ 0x8c
 801c032:	a805      	add	r0, sp, #20
 801c034:	f853 5b04 	ldr.w	r5, [r3], #4
 801c038:	9303      	str	r3, [sp, #12]
 801c03a:	f001 f869 	bl	801d110 <_ZN8touchgfx12TextProviderC1Ev>
 801c03e:	6823      	ldr	r3, [r4, #0]
 801c040:	4620      	mov	r0, r4
 801c042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c044:	4798      	blx	r3
 801c046:	6823      	ldr	r3, [r4, #0]
 801c048:	4606      	mov	r6, r0
 801c04a:	4620      	mov	r0, r4
 801c04c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c04e:	4798      	blx	r3
 801c050:	4633      	mov	r3, r6
 801c052:	4629      	mov	r1, r5
 801c054:	9000      	str	r0, [sp, #0]
 801c056:	9a03      	ldr	r2, [sp, #12]
 801c058:	a805      	add	r0, sp, #20
 801c05a:	f001 f8b4 	bl	801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c05e:	ad1e      	add	r5, sp, #120	@ 0x78
 801c060:	2100      	movs	r1, #0
 801c062:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801c066:	4622      	mov	r2, r4
 801c068:	a805      	add	r0, sp, #20
 801c06a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c06e:	462b      	mov	r3, r5
 801c070:	f001 fbae 	bl	801d7d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c074:	b1d8      	cbz	r0, 801c0ae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801c076:	280a      	cmp	r0, #10
 801c078:	d012      	beq.n	801c0a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c07a:	9804      	ldr	r0, [sp, #16]
 801c07c:	b180      	cbz	r0, 801c0a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c07e:	7b47      	ldrb	r7, [r0, #13]
 801c080:	88e2      	ldrh	r2, [r4, #6]
 801c082:	00fb      	lsls	r3, r7, #3
 801c084:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c088:	7a03      	ldrb	r3, [r0, #8]
 801c08a:	430b      	orrs	r3, r1
 801c08c:	0679      	lsls	r1, r7, #25
 801c08e:	bf44      	itt	mi
 801c090:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c094:	b21b      	sxthmi	r3, r3
 801c096:	1ad3      	subs	r3, r2, r3
 801c098:	b21b      	sxth	r3, r3
 801c09a:	429e      	cmp	r6, r3
 801c09c:	bfa8      	it	ge
 801c09e:	461e      	movge	r6, r3
 801c0a0:	462b      	mov	r3, r5
 801c0a2:	4622      	mov	r2, r4
 801c0a4:	2100      	movs	r1, #0
 801c0a6:	a805      	add	r0, sp, #20
 801c0a8:	f001 fb92 	bl	801d7d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c0ac:	e7e2      	b.n	801c074 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c0ae:	4630      	mov	r0, r6
 801c0b0:	b01e      	add	sp, #120	@ 0x78
 801c0b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c0b6:	b003      	add	sp, #12
 801c0b8:	4770      	bx	lr

0801c0ba <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c0ba:	b513      	push	{r0, r1, r4, lr}
 801c0bc:	6803      	ldr	r3, [r0, #0]
 801c0be:	2400      	movs	r4, #0
 801c0c0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c0c4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c0c8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c0cc:	4669      	mov	r1, sp
 801c0ce:	691b      	ldr	r3, [r3, #16]
 801c0d0:	9400      	str	r4, [sp, #0]
 801c0d2:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c0d6:	4798      	blx	r3
 801c0d8:	b002      	add	sp, #8
 801c0da:	bd10      	pop	{r4, pc}

0801c0dc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c0dc:	b538      	push	{r3, r4, r5, lr}
 801c0de:	680b      	ldr	r3, [r1, #0]
 801c0e0:	460c      	mov	r4, r1
 801c0e2:	4605      	mov	r5, r0
 801c0e4:	68db      	ldr	r3, [r3, #12]
 801c0e6:	4798      	blx	r3
 801c0e8:	6823      	ldr	r3, [r4, #0]
 801c0ea:	4620      	mov	r0, r4
 801c0ec:	4629      	mov	r1, r5
 801c0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0f0:	4798      	blx	r3
 801c0f2:	4628      	mov	r0, r5
 801c0f4:	bd38      	pop	{r3, r4, r5, pc}

0801c0f6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c0f6:	b410      	push	{r4}
 801c0f8:	880a      	ldrh	r2, [r1, #0]
 801c0fa:	8884      	ldrh	r4, [r0, #4]
 801c0fc:	4422      	add	r2, r4
 801c0fe:	800a      	strh	r2, [r1, #0]
 801c100:	884a      	ldrh	r2, [r1, #2]
 801c102:	88c4      	ldrh	r4, [r0, #6]
 801c104:	4422      	add	r2, r4
 801c106:	804a      	strh	r2, [r1, #2]
 801c108:	6940      	ldr	r0, [r0, #20]
 801c10a:	b120      	cbz	r0, 801c116 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c10c:	6803      	ldr	r3, [r0, #0]
 801c10e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c114:	4718      	bx	r3
 801c116:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c11a:	4770      	bx	lr

0801c11c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c11c:	b570      	push	{r4, r5, r6, lr}
 801c11e:	8882      	ldrh	r2, [r0, #4]
 801c120:	460c      	mov	r4, r1
 801c122:	880b      	ldrh	r3, [r1, #0]
 801c124:	4605      	mov	r5, r0
 801c126:	4413      	add	r3, r2
 801c128:	800b      	strh	r3, [r1, #0]
 801c12a:	884b      	ldrh	r3, [r1, #2]
 801c12c:	88c2      	ldrh	r2, [r0, #6]
 801c12e:	4413      	add	r3, r2
 801c130:	804b      	strh	r3, [r1, #2]
 801c132:	1d01      	adds	r1, r0, #4
 801c134:	4620      	mov	r0, r4
 801c136:	f7f8 f9c1 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 801c13a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	dd0b      	ble.n	801c15a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c142:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c146:	2b00      	cmp	r3, #0
 801c148:	dd07      	ble.n	801c15a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c14a:	6968      	ldr	r0, [r5, #20]
 801c14c:	b128      	cbz	r0, 801c15a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c14e:	6803      	ldr	r3, [r0, #0]
 801c150:	4621      	mov	r1, r4
 801c152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c158:	4718      	bx	r3
 801c15a:	bd70      	pop	{r4, r5, r6, pc}

0801c15c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c15c:	b570      	push	{r4, r5, r6, lr}
 801c15e:	8882      	ldrh	r2, [r0, #4]
 801c160:	460c      	mov	r4, r1
 801c162:	880b      	ldrh	r3, [r1, #0]
 801c164:	4605      	mov	r5, r0
 801c166:	4413      	add	r3, r2
 801c168:	800b      	strh	r3, [r1, #0]
 801c16a:	884b      	ldrh	r3, [r1, #2]
 801c16c:	88c2      	ldrh	r2, [r0, #6]
 801c16e:	4413      	add	r3, r2
 801c170:	804b      	strh	r3, [r1, #2]
 801c172:	1d01      	adds	r1, r0, #4
 801c174:	4620      	mov	r0, r4
 801c176:	f7f8 f9a1 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 801c17a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	dd19      	ble.n	801c1b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c182:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c186:	2b00      	cmp	r3, #0
 801c188:	dd15      	ble.n	801c1b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c18a:	6968      	ldr	r0, [r5, #20]
 801c18c:	b128      	cbz	r0, 801c19a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c18e:	6803      	ldr	r3, [r0, #0]
 801c190:	4621      	mov	r1, r4
 801c192:	691b      	ldr	r3, [r3, #16]
 801c194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c198:	4718      	bx	r3
 801c19a:	4b07      	ldr	r3, [pc, #28]	@ (801c1b8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	3304      	adds	r3, #4
 801c1a0:	429d      	cmp	r5, r3
 801c1a2:	d108      	bne.n	801c1b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801c1a4:	f7fe fef6 	bl	801af94 <_ZN8touchgfx11Application11getInstanceEv>
 801c1a8:	6803      	ldr	r3, [r0, #0]
 801c1aa:	6821      	ldr	r1, [r4, #0]
 801c1ac:	6862      	ldr	r2, [r4, #4]
 801c1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c1b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1b4:	4718      	bx	r3
 801c1b6:	bd70      	pop	{r4, r5, r6, pc}
 801c1b8:	240621fc 	.word	0x240621fc

0801c1bc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c1bc:	b570      	push	{r4, r5, r6, lr}
 801c1be:	4604      	mov	r4, r0
 801c1c0:	4616      	mov	r6, r2
 801c1c2:	460d      	mov	r5, r1
 801c1c4:	b901      	cbnz	r1, 801c1c8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c1c6:	b192      	cbz	r2, 801c1ee <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c1c8:	6823      	ldr	r3, [r4, #0]
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	699b      	ldr	r3, [r3, #24]
 801c1ce:	4798      	blx	r3
 801c1d0:	88e2      	ldrh	r2, [r4, #6]
 801c1d2:	88a1      	ldrh	r1, [r4, #4]
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	4432      	add	r2, r6
 801c1d8:	4429      	add	r1, r5
 801c1da:	b212      	sxth	r2, r2
 801c1dc:	b209      	sxth	r1, r1
 801c1de:	f7f8 fc43 	bl	8014a68 <_ZN8touchgfx8Drawable5setXYEss>
 801c1e2:	6823      	ldr	r3, [r4, #0]
 801c1e4:	4620      	mov	r0, r4
 801c1e6:	699b      	ldr	r3, [r3, #24]
 801c1e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1ec:	4718      	bx	r3
 801c1ee:	bd70      	pop	{r4, r5, r6, pc}

0801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c1f0:	b510      	push	{r4, lr}
 801c1f2:	2300      	movs	r3, #0
 801c1f4:	4604      	mov	r4, r0
 801c1f6:	4608      	mov	r0, r1
 801c1f8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c1fc:	8023      	strh	r3, [r4, #0]
 801c1fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c202:	8063      	strh	r3, [r4, #2]
 801c204:	6803      	ldr	r3, [r0, #0]
 801c206:	80a1      	strh	r1, [r4, #4]
 801c208:	4621      	mov	r1, r4
 801c20a:	80e2      	strh	r2, [r4, #6]
 801c20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c20e:	4798      	blx	r3
 801c210:	4620      	mov	r0, r4
 801c212:	bd10      	pop	{r4, pc}

0801c214 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801c214:	4770      	bx	lr

0801c216 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801c216:	b510      	push	{r4, lr}
 801c218:	4604      	mov	r4, r0
 801c21a:	211c      	movs	r1, #28
 801c21c:	f00c fe60 	bl	8028ee0 <_ZdlPvj>
 801c220:	4620      	mov	r0, r4
 801c222:	bd10      	pop	{r4, pc}

0801c224 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801c224:	4a04      	ldr	r2, [pc, #16]	@ (801c238 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801c226:	6002      	str	r2, [r0, #0]
 801c228:	2200      	movs	r2, #0
 801c22a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801c22e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801c232:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801c236:	4770      	bx	lr
 801c238:	0802e484 	.word	0x0802e484

0801c23c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c240:	4604      	mov	r4, r0
 801c242:	b087      	sub	sp, #28
 801c244:	4696      	mov	lr, r2
 801c246:	6880      	ldr	r0, [r0, #8]
 801c248:	8b22      	ldrh	r2, [r4, #24]
 801c24a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801c24e:	9105      	str	r1, [sp, #20]
 801c250:	1c51      	adds	r1, r2, #1
 801c252:	8321      	strh	r1, [r4, #24]
 801c254:	2101      	movs	r1, #1
 801c256:	5481      	strb	r1, [r0, r2]
 801c258:	4689      	mov	r9, r1
 801c25a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c25e:	8b60      	ldrh	r0, [r4, #26]
 801c260:	ee06 2a90 	vmov	s13, r2
 801c264:	68e2      	ldr	r2, [r4, #12]
 801c266:	1845      	adds	r5, r0, r1
 801c268:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c26c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801c270:	8365      	strh	r5, [r4, #26]
 801c272:	edc2 6a00 	vstr	s13, [r2]
 801c276:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c27a:	8b60      	ldrh	r0, [r4, #26]
 801c27c:	ee07 2a10 	vmov	s14, r2
 801c280:	68e2      	ldr	r2, [r4, #12]
 801c282:	1845      	adds	r5, r0, r1
 801c284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c288:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801c28c:	8365      	strh	r5, [r4, #26]
 801c28e:	1d18      	adds	r0, r3, #4
 801c290:	460d      	mov	r5, r1
 801c292:	ed82 7a00 	vstr	s14, [r2]
 801c296:	f8be 2000 	ldrh.w	r2, [lr]
 801c29a:	9203      	str	r2, [sp, #12]
 801c29c:	2200      	movs	r2, #0
 801c29e:	4613      	mov	r3, r2
 801c2a0:	4694      	mov	ip, r2
 801c2a2:	9201      	str	r2, [sp, #4]
 801c2a4:	9202      	str	r2, [sp, #8]
 801c2a6:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801c2aa:	9e05      	ldr	r6, [sp, #20]
 801c2ac:	f108 0701 	add.w	r7, r8, #1
 801c2b0:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801c2b4:	428e      	cmp	r6, r1
 801c2b6:	b2bf      	uxth	r7, r7
 801c2b8:	eb0a 0b08 	add.w	fp, sl, r8
 801c2bc:	f340 80b6 	ble.w	801c42c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801c2c0:	9b03      	ldr	r3, [sp, #12]
 801c2c2:	f9b0 c000 	ldrsh.w	ip, [r0]
 801c2c6:	fa43 fb05 	asr.w	fp, r3, r5
 801c2ca:	f00b 0b01 	and.w	fp, fp, #1
 801c2ce:	fa5f f38b 	uxtb.w	r3, fp
 801c2d2:	9304      	str	r3, [sp, #16]
 801c2d4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c2d8:	f1bb 0f00 	cmp.w	fp, #0
 801c2dc:	d057      	beq.n	801c38e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801c2de:	ee07 ca90 	vmov	s15, ip
 801c2e2:	8327      	strh	r7, [r4, #24]
 801c2e4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801c2e8:	ee07 3a90 	vmov	s15, r3
 801c2ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c2f0:	f1b9 0f00 	cmp.w	r9, #0
 801c2f4:	d028      	beq.n	801c348 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801c2f6:	f04f 0602 	mov.w	r6, #2
 801c2fa:	f80a 6008 	strb.w	r6, [sl, r8]
 801c2fe:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c302:	68e7      	ldr	r7, [r4, #12]
 801c304:	f108 0901 	add.w	r9, r8, #1
 801c308:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c30c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c310:	edc7 5a00 	vstr	s11, [r7]
 801c314:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c318:	68e7      	ldr	r7, [r4, #12]
 801c31a:	f108 0901 	add.w	r9, r8, #1
 801c31e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c322:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c326:	edc7 7a00 	vstr	s15, [r7]
 801c32a:	3501      	adds	r5, #1
 801c32c:	2d10      	cmp	r5, #16
 801c32e:	d106      	bne.n	801c33e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801c330:	9d02      	ldr	r5, [sp, #8]
 801c332:	3501      	adds	r5, #1
 801c334:	9502      	str	r5, [sp, #8]
 801c336:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801c33a:	9503      	str	r5, [sp, #12]
 801c33c:	2500      	movs	r5, #0
 801c33e:	3101      	adds	r1, #1
 801c340:	3004      	adds	r0, #4
 801c342:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801c346:	e7ae      	b.n	801c2a6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801c348:	f04f 0605 	mov.w	r6, #5
 801c34c:	ed9d 5a01 	vldr	s10, [sp, #4]
 801c350:	f80a 6008 	strb.w	r6, [sl, r8]
 801c354:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801c358:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c35c:	68e7      	ldr	r7, [r4, #12]
 801c35e:	f108 0901 	add.w	r9, r8, #1
 801c362:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c366:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c36a:	ed87 5a00 	vstr	s10, [r7]
 801c36e:	ee05 2a10 	vmov	s10, r2
 801c372:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c376:	68e7      	ldr	r7, [r4, #12]
 801c378:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801c37c:	f108 0901 	add.w	r9, r8, #1
 801c380:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c384:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c388:	ed87 5a00 	vstr	s10, [r7]
 801c38c:	e7b7      	b.n	801c2fe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801c38e:	f1b9 0f00 	cmp.w	r9, #0
 801c392:	d147      	bne.n	801c424 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801c394:	f04f 0605 	mov.w	r6, #5
 801c398:	eddd 7a01 	vldr	s15, [sp, #4]
 801c39c:	8327      	strh	r7, [r4, #24]
 801c39e:	f80a 6008 	strb.w	r6, [sl, r8]
 801c3a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c3a6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c3aa:	68e7      	ldr	r7, [r4, #12]
 801c3ac:	f108 0901 	add.w	r9, r8, #1
 801c3b0:	9e01      	ldr	r6, [sp, #4]
 801c3b2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c3b6:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c3ba:	4466      	add	r6, ip
 801c3bc:	edc7 7a00 	vstr	s15, [r7]
 801c3c0:	ee07 2a90 	vmov	s15, r2
 801c3c4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c3c8:	441a      	add	r2, r3
 801c3ca:	68e7      	ldr	r7, [r4, #12]
 801c3cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c3d0:	f108 0901 	add.w	r9, r8, #1
 801c3d4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c3d8:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c3dc:	edc7 7a00 	vstr	s15, [r7]
 801c3e0:	ee07 6a90 	vmov	s15, r6
 801c3e4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c3e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c3ec:	68e7      	ldr	r7, [r4, #12]
 801c3ee:	f108 0901 	add.w	r9, r8, #1
 801c3f2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c3f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c3fa:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c3fe:	edc7 7a00 	vstr	s15, [r7]
 801c402:	ee07 2a90 	vmov	s15, r2
 801c406:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801c40a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c40e:	68e7      	ldr	r7, [r4, #12]
 801c410:	f108 0901 	add.w	r9, r8, #1
 801c414:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801c418:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c41c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801c420:	edc7 7a00 	vstr	s15, [r7]
 801c424:	461a      	mov	r2, r3
 801c426:	f8cd c004 	str.w	ip, [sp, #4]
 801c42a:	e77e      	b.n	801c32a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801c42c:	f1b9 0f00 	cmp.w	r9, #0
 801c430:	d028      	beq.n	801c484 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801c432:	ee07 ca90 	vmov	s15, ip
 801c436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c43a:	eef4 6a67 	vcmp.f32	s13, s15
 801c43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c442:	d108      	bne.n	801c456 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801c444:	ee07 3a90 	vmov	s15, r3
 801c448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c44c:	eeb4 7a67 	vcmp.f32	s14, s15
 801c450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c454:	d016      	beq.n	801c484 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801c456:	2302      	movs	r3, #2
 801c458:	8327      	strh	r7, [r4, #24]
 801c45a:	f88b 3000 	strb.w	r3, [fp]
 801c45e:	8b62      	ldrh	r2, [r4, #26]
 801c460:	68e3      	ldr	r3, [r4, #12]
 801c462:	1c51      	adds	r1, r2, #1
 801c464:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c468:	8361      	strh	r1, [r4, #26]
 801c46a:	edc3 6a00 	vstr	s13, [r3]
 801c46e:	8b62      	ldrh	r2, [r4, #26]
 801c470:	68e3      	ldr	r3, [r4, #12]
 801c472:	1c51      	adds	r1, r2, #1
 801c474:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c478:	8361      	strh	r1, [r4, #26]
 801c47a:	ed83 7a00 	vstr	s14, [r3]
 801c47e:	b007      	add	sp, #28
 801c480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c484:	2305      	movs	r3, #5
 801c486:	eddd 7a01 	vldr	s15, [sp, #4]
 801c48a:	8327      	strh	r7, [r4, #24]
 801c48c:	f88b 3000 	strb.w	r3, [fp]
 801c490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c494:	8b61      	ldrh	r1, [r4, #26]
 801c496:	68e3      	ldr	r3, [r4, #12]
 801c498:	1c4d      	adds	r5, r1, #1
 801c49a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801c49e:	8365      	strh	r5, [r4, #26]
 801c4a0:	edc3 7a00 	vstr	s15, [r3]
 801c4a4:	ee07 2a90 	vmov	s15, r2
 801c4a8:	8b61      	ldrh	r1, [r4, #26]
 801c4aa:	68e3      	ldr	r3, [r4, #12]
 801c4ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4b0:	1c4d      	adds	r5, r1, #1
 801c4b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801c4b6:	8365      	strh	r5, [r4, #26]
 801c4b8:	edc3 7a00 	vstr	s15, [r3]
 801c4bc:	e7cf      	b.n	801c45e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801c4c0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801c4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4c4:	4604      	mov	r4, r0
 801c4c6:	b08e      	sub	sp, #56	@ 0x38
 801c4c8:	4699      	mov	r9, r3
 801c4ca:	4688      	mov	r8, r1
 801c4cc:	4615      	mov	r5, r2
 801c4ce:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801c4d0:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801c4d4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c4d6:	f7e7 fdcb 	bl	8004070 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801c4da:	6060      	str	r0, [r4, #4]
 801c4dc:	f1b9 0f00 	cmp.w	r9, #0
 801c4e0:	f000 80e8 	beq.w	801c6b4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801c4e4:	2800      	cmp	r0, #0
 801c4e6:	f000 80e5 	beq.w	801c6b4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801c4ea:	a805      	add	r0, sp, #20
 801c4ec:	f000 f8f9 	bl	801c6e2 <_ZN8touchgfx9Matrix3x3C1Ev>
 801c4f0:	6833      	ldr	r3, [r6, #0]
 801c4f2:	4630      	mov	r0, r6
 801c4f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c4f6:	4798      	blx	r3
 801c4f8:	a805      	add	r0, sp, #20
 801c4fa:	eef0 0a40 	vmov.f32	s1, s0
 801c4fe:	f000 f8f4 	bl	801c6ea <_ZN8touchgfx9Matrix3x35scaleEff>
 801c502:	6860      	ldr	r0, [r4, #4]
 801c504:	f1ba 0f03 	cmp.w	sl, #3
 801c508:	d83b      	bhi.n	801c582 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801c50a:	e8df f00a 	tbb	[pc, sl]
 801c50e:	1002      	.short	0x1002
 801c510:	9f71      	.short	0x9f71
 801c512:	6803      	ldr	r3, [r0, #0]
 801c514:	462a      	mov	r2, r5
 801c516:	4641      	mov	r1, r8
 801c518:	689b      	ldr	r3, [r3, #8]
 801c51a:	4798      	blx	r3
 801c51c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801c520:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c524:	ee07 7a90 	vmov	s15, r7
 801c528:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801c52c:	e026      	b.n	801c57c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801c52e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801c532:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801c536:	8869      	ldrh	r1, [r5, #2]
 801c538:	1a9b      	subs	r3, r3, r2
 801c53a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c53e:	aa03      	add	r2, sp, #12
 801c540:	1a5b      	subs	r3, r3, r1
 801c542:	4641      	mov	r1, r8
 801c544:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c548:	882b      	ldrh	r3, [r5, #0]
 801c54a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c54e:	88ab      	ldrh	r3, [r5, #4]
 801c550:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c554:	6803      	ldr	r3, [r0, #0]
 801c556:	689b      	ldr	r3, [r3, #8]
 801c558:	4798      	blx	r3
 801c55a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801c6bc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801c55e:	a805      	add	r0, sp, #20
 801c560:	f000 f8e8 	bl	801c734 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c564:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801c568:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c56a:	ee07 7a90 	vmov	s15, r7
 801c56e:	1a9b      	subs	r3, r3, r2
 801c570:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c574:	ee00 3a10 	vmov	s0, r3
 801c578:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801c57c:	a805      	add	r0, sp, #20
 801c57e:	f000 f927 	bl	801c7d0 <_ZN8touchgfx9Matrix3x39translateEff>
 801c582:	6860      	ldr	r0, [r4, #4]
 801c584:	a905      	add	r1, sp, #20
 801c586:	2500      	movs	r5, #0
 801c588:	f109 0602 	add.w	r6, r9, #2
 801c58c:	6803      	ldr	r3, [r0, #0]
 801c58e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c590:	4798      	blx	r3
 801c592:	6860      	ldr	r0, [r4, #4]
 801c594:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c596:	6803      	ldr	r3, [r0, #0]
 801c598:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801c59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c59e:	4798      	blx	r3
 801c5a0:	6860      	ldr	r0, [r4, #4]
 801c5a2:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801c5a6:	6803      	ldr	r3, [r0, #0]
 801c5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c5aa:	4798      	blx	r3
 801c5ac:	6860      	ldr	r0, [r4, #4]
 801c5ae:	2101      	movs	r1, #1
 801c5b0:	6803      	ldr	r3, [r0, #0]
 801c5b2:	68db      	ldr	r3, [r3, #12]
 801c5b4:	4798      	blx	r3
 801c5b6:	f8b9 7000 	ldrh.w	r7, [r9]
 801c5ba:	f104 0310 	add.w	r3, r4, #16
 801c5be:	61a5      	str	r5, [r4, #24]
 801c5c0:	f104 0208 	add.w	r2, r4, #8
 801c5c4:	f104 0114 	add.w	r1, r4, #20
 801c5c8:	f104 000c 	add.w	r0, r4, #12
 801c5cc:	f7ec fdd8 	bl	8009180 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801c5d0:	42af      	cmp	r7, r5
 801c5d2:	dd60      	ble.n	801c696 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801c5d4:	8831      	ldrh	r1, [r6, #0]
 801c5d6:	1cb2      	adds	r2, r6, #2
 801c5d8:	4620      	mov	r0, r4
 801c5da:	3501      	adds	r5, #1
 801c5dc:	f101 030f 	add.w	r3, r1, #15
 801c5e0:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801c5e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c5e8:	f7ff fe28 	bl	801c23c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801c5ec:	4606      	mov	r6, r0
 801c5ee:	e7ef      	b.n	801c5d0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801c5f0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801c5f4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801c5f8:	8829      	ldrh	r1, [r5, #0]
 801c5fa:	1a9b      	subs	r3, r3, r2
 801c5fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c600:	aa03      	add	r2, sp, #12
 801c602:	1a5b      	subs	r3, r3, r1
 801c604:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c608:	886d      	ldrh	r5, [r5, #2]
 801c60a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c60e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801c612:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c616:	1a5b      	subs	r3, r3, r1
 801c618:	4641      	mov	r1, r8
 801c61a:	1b5b      	subs	r3, r3, r5
 801c61c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c620:	6803      	ldr	r3, [r0, #0]
 801c622:	689b      	ldr	r3, [r3, #8]
 801c624:	4798      	blx	r3
 801c626:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801c6c0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801c62a:	a805      	add	r0, sp, #20
 801c62c:	f000 f882 	bl	801c734 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c630:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801c634:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c636:	1a9b      	subs	r3, r3, r2
 801c638:	ee00 3a90 	vmov	s1, r3
 801c63c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801c640:	1bdb      	subs	r3, r3, r7
 801c642:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c646:	ee00 3a10 	vmov	s0, r3
 801c64a:	e795      	b.n	801c578 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801c64c:	886b      	ldrh	r3, [r5, #2]
 801c64e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801c652:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c656:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801c65a:	8829      	ldrh	r1, [r5, #0]
 801c65c:	1a9b      	subs	r3, r3, r2
 801c65e:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c662:	aa03      	add	r2, sp, #12
 801c664:	1a5b      	subs	r3, r3, r1
 801c666:	4641      	mov	r1, r8
 801c668:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c66c:	88eb      	ldrh	r3, [r5, #6]
 801c66e:	f8ad 3010 	strh.w	r3, [sp, #16]
 801c672:	6803      	ldr	r3, [r0, #0]
 801c674:	689b      	ldr	r3, [r3, #8]
 801c676:	4798      	blx	r3
 801c678:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801c6c4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801c67c:	a805      	add	r0, sp, #20
 801c67e:	f000 f859 	bl	801c734 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c682:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801c686:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801c68a:	1bdb      	subs	r3, r3, r7
 801c68c:	ee00 3a90 	vmov	s1, r3
 801c690:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c694:	e748      	b.n	801c528 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801c696:	6860      	ldr	r0, [r4, #4]
 801c698:	2100      	movs	r1, #0
 801c69a:	8b22      	ldrh	r2, [r4, #24]
 801c69c:	6803      	ldr	r3, [r0, #0]
 801c69e:	9101      	str	r1, [sp, #4]
 801c6a0:	8b61      	ldrh	r1, [r4, #26]
 801c6a2:	9100      	str	r1, [sp, #0]
 801c6a4:	6a1d      	ldr	r5, [r3, #32]
 801c6a6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801c6aa:	47a8      	blx	r5
 801c6ac:	6860      	ldr	r0, [r4, #4]
 801c6ae:	6803      	ldr	r3, [r0, #0]
 801c6b0:	69db      	ldr	r3, [r3, #28]
 801c6b2:	4798      	blx	r3
 801c6b4:	b00e      	add	sp, #56	@ 0x38
 801c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6ba:	bf00      	nop
 801c6bc:	42b40000 	.word	0x42b40000
 801c6c0:	43340000 	.word	0x43340000
 801c6c4:	43870000 	.word	0x43870000

0801c6c8 <_ZN8touchgfx9Matrix3x35resetEv>:
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801c6ce:	6043      	str	r3, [r0, #4]
 801c6d0:	6002      	str	r2, [r0, #0]
 801c6d2:	6083      	str	r3, [r0, #8]
 801c6d4:	60c3      	str	r3, [r0, #12]
 801c6d6:	6102      	str	r2, [r0, #16]
 801c6d8:	6143      	str	r3, [r0, #20]
 801c6da:	6183      	str	r3, [r0, #24]
 801c6dc:	61c3      	str	r3, [r0, #28]
 801c6de:	6202      	str	r2, [r0, #32]
 801c6e0:	4770      	bx	lr

0801c6e2 <_ZN8touchgfx9Matrix3x3C1Ev>:
 801c6e2:	b508      	push	{r3, lr}
 801c6e4:	f7ff fff0 	bl	801c6c8 <_ZN8touchgfx9Matrix3x35resetEv>
 801c6e8:	bd08      	pop	{r3, pc}

0801c6ea <_ZN8touchgfx9Matrix3x35scaleEff>:
 801c6ea:	edd0 7a00 	vldr	s15, [r0]
 801c6ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c6f2:	edc0 7a00 	vstr	s15, [r0]
 801c6f6:	edd0 7a01 	vldr	s15, [r0, #4]
 801c6fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c6fe:	edc0 7a01 	vstr	s15, [r0, #4]
 801c702:	edd0 7a02 	vldr	s15, [r0, #8]
 801c706:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c70a:	edd0 7a03 	vldr	s15, [r0, #12]
 801c70e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801c712:	ed80 0a02 	vstr	s0, [r0, #8]
 801c716:	edc0 7a03 	vstr	s15, [r0, #12]
 801c71a:	edd0 7a04 	vldr	s15, [r0, #16]
 801c71e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801c722:	edc0 7a04 	vstr	s15, [r0, #16]
 801c726:	edd0 7a05 	vldr	s15, [r0, #20]
 801c72a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c72e:	edc0 0a05 	vstr	s1, [r0, #20]
 801c732:	4770      	bx	lr

0801c734 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801c734:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801c7c8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801c738:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c73c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801c7cc <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801c740:	b510      	push	{r4, lr}
 801c742:	ed2d 8b02 	vpush	{d8}
 801c746:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801c74a:	4604      	mov	r4, r0
 801c74c:	eeb0 0a68 	vmov.f32	s0, s17
 801c750:	f00c fcfe 	bl	8029150 <cosf>
 801c754:	eeb0 8a40 	vmov.f32	s16, s0
 801c758:	eeb0 0a68 	vmov.f32	s0, s17
 801c75c:	f00c fc34 	bl	8028fc8 <sinf>
 801c760:	edd4 6a03 	vldr	s13, [r4, #12]
 801c764:	edd4 4a00 	vldr	s9, [r4]
 801c768:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801c76c:	ed94 7a04 	vldr	s14, [r4, #16]
 801c770:	ed94 5a01 	vldr	s10, [r4, #4]
 801c774:	ee66 6a88 	vmul.f32	s13, s13, s16
 801c778:	edd4 5a02 	vldr	s11, [r4, #8]
 801c77c:	eee8 7a24 	vfma.f32	s15, s16, s9
 801c780:	eee0 6a24 	vfma.f32	s13, s0, s9
 801c784:	edc4 7a00 	vstr	s15, [r4]
 801c788:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801c78c:	ee27 7a08 	vmul.f32	s14, s14, s16
 801c790:	edc4 6a03 	vstr	s13, [r4, #12]
 801c794:	eee8 7a05 	vfma.f32	s15, s16, s10
 801c798:	eea0 7a05 	vfma.f32	s14, s0, s10
 801c79c:	edc4 7a01 	vstr	s15, [r4, #4]
 801c7a0:	edd4 7a05 	vldr	s15, [r4, #20]
 801c7a4:	ed84 7a04 	vstr	s14, [r4, #16]
 801c7a8:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801c7ac:	ee67 7a88 	vmul.f32	s15, s15, s16
 801c7b0:	eea8 6a25 	vfma.f32	s12, s16, s11
 801c7b4:	eee0 7a25 	vfma.f32	s15, s0, s11
 801c7b8:	ecbd 8b02 	vpop	{d8}
 801c7bc:	ed84 6a02 	vstr	s12, [r4, #8]
 801c7c0:	edc4 7a05 	vstr	s15, [r4, #20]
 801c7c4:	bd10      	pop	{r4, pc}
 801c7c6:	bf00      	nop
 801c7c8:	40490fdb 	.word	0x40490fdb
 801c7cc:	43340000 	.word	0x43340000

0801c7d0 <_ZN8touchgfx9Matrix3x39translateEff>:
 801c7d0:	ed90 6a06 	vldr	s12, [r0, #24]
 801c7d4:	edd0 7a00 	vldr	s15, [r0]
 801c7d8:	edd0 6a07 	vldr	s13, [r0, #28]
 801c7dc:	eee6 7a00 	vfma.f32	s15, s12, s0
 801c7e0:	ed90 7a08 	vldr	s14, [r0, #32]
 801c7e4:	edc0 7a00 	vstr	s15, [r0]
 801c7e8:	edd0 7a01 	vldr	s15, [r0, #4]
 801c7ec:	eee6 7a80 	vfma.f32	s15, s13, s0
 801c7f0:	edc0 7a01 	vstr	s15, [r0, #4]
 801c7f4:	edd0 7a02 	vldr	s15, [r0, #8]
 801c7f8:	eee7 7a00 	vfma.f32	s15, s14, s0
 801c7fc:	edc0 7a02 	vstr	s15, [r0, #8]
 801c800:	edd0 7a03 	vldr	s15, [r0, #12]
 801c804:	eee6 7a20 	vfma.f32	s15, s12, s1
 801c808:	edc0 7a03 	vstr	s15, [r0, #12]
 801c80c:	edd0 7a04 	vldr	s15, [r0, #16]
 801c810:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801c814:	edc0 7a04 	vstr	s15, [r0, #16]
 801c818:	edd0 7a05 	vldr	s15, [r0, #20]
 801c81c:	eee7 7a20 	vfma.f32	s15, s14, s1
 801c820:	edc0 7a05 	vstr	s15, [r0, #20]
 801c824:	4770      	bx	lr

0801c826 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801c826:	edd0 6a01 	vldr	s13, [r0, #4]
 801c82a:	b084      	sub	sp, #16
 801c82c:	edd0 7a04 	vldr	s15, [r0, #16]
 801c830:	ed90 7a03 	vldr	s14, [r0, #12]
 801c834:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801c838:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801c83c:	edd0 6a00 	vldr	s13, [r0]
 801c840:	eee7 7a00 	vfma.f32	s15, s14, s0
 801c844:	ed90 7a05 	vldr	s14, [r0, #20]
 801c848:	eee6 0a80 	vfma.f32	s1, s13, s0
 801c84c:	ed90 0a02 	vldr	s0, [r0, #8]
 801c850:	ee30 0a80 	vadd.f32	s0, s1, s0
 801c854:	ee77 0a87 	vadd.f32	s1, s15, s14
 801c858:	b004      	add	sp, #16
 801c85a:	4770      	bx	lr

0801c85c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801c85c:	b530      	push	{r4, r5, lr}
 801c85e:	8083      	strh	r3, [r0, #4]
 801c860:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c864:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c868:	80c3      	strh	r3, [r0, #6]
 801c86a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c86e:	6141      	str	r1, [r0, #20]
 801c870:	7203      	strb	r3, [r0, #8]
 801c872:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c876:	8302      	strh	r2, [r0, #24]
 801c878:	7243      	strb	r3, [r0, #9]
 801c87a:	7a83      	ldrb	r3, [r0, #10]
 801c87c:	f365 0306 	bfi	r3, r5, #0, #7
 801c880:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801c884:	f365 13c7 	bfi	r3, r5, #7, #1
 801c888:	7283      	strb	r3, [r0, #10]
 801c88a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801c88e:	72c3      	strb	r3, [r0, #11]
 801c890:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c894:	7303      	strb	r3, [r0, #12]
 801c896:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c89a:	81c3      	strh	r3, [r0, #14]
 801c89c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801c8a0:	8203      	strh	r3, [r0, #16]
 801c8a2:	4b01      	ldr	r3, [pc, #4]	@ (801c8a8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801c8a4:	6003      	str	r3, [r0, #0]
 801c8a6:	bd30      	pop	{r4, r5, pc}
 801c8a8:	0802e498 	.word	0x0802e498

0801c8ac <_ZNK8touchgfx9ConstFont4findEt>:
 801c8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8ae:	6944      	ldr	r4, [r0, #20]
 801c8b0:	b3bc      	cbz	r4, 801c922 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8b2:	88a3      	ldrh	r3, [r4, #4]
 801c8b4:	8b02      	ldrh	r2, [r0, #24]
 801c8b6:	1acb      	subs	r3, r1, r3
 801c8b8:	f102 32ff 	add.w	r2, r2, #4294967295
 801c8bc:	d431      	bmi.n	801c922 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8be:	4293      	cmp	r3, r2
 801c8c0:	dd0c      	ble.n	801c8dc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c8c2:	230e      	movs	r3, #14
 801c8c4:	fb03 4302 	mla	r3, r3, r2, r4
 801c8c8:	889b      	ldrh	r3, [r3, #4]
 801c8ca:	1a5b      	subs	r3, r3, r1
 801c8cc:	1ad3      	subs	r3, r2, r3
 801c8ce:	429a      	cmp	r2, r3
 801c8d0:	db27      	blt.n	801c922 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	bfbc      	itt	lt
 801c8d6:	2302      	movlt	r3, #2
 801c8d8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c8dc:	2500      	movs	r5, #0
 801c8de:	260e      	movs	r6, #14
 801c8e0:	4295      	cmp	r5, r2
 801c8e2:	dc1e      	bgt.n	801c922 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8e4:	fb06 4003 	mla	r0, r6, r3, r4
 801c8e8:	8887      	ldrh	r7, [r0, #4]
 801c8ea:	42b9      	cmp	r1, r7
 801c8ec:	d01a      	beq.n	801c924 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c8ee:	d20d      	bcs.n	801c90c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c8f0:	1e5a      	subs	r2, r3, #1
 801c8f2:	4295      	cmp	r5, r2
 801c8f4:	dc15      	bgt.n	801c922 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c8f6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c8fa:	1a5b      	subs	r3, r3, r1
 801c8fc:	1ad3      	subs	r3, r2, r3
 801c8fe:	429a      	cmp	r2, r3
 801c900:	db0f      	blt.n	801c922 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c902:	429d      	cmp	r5, r3
 801c904:	ddec      	ble.n	801c8e0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c906:	1953      	adds	r3, r2, r5
 801c908:	105b      	asrs	r3, r3, #1
 801c90a:	e7e9      	b.n	801c8e0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c90c:	1c5d      	adds	r5, r3, #1
 801c90e:	42aa      	cmp	r2, r5
 801c910:	db07      	blt.n	801c922 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c912:	8a43      	ldrh	r3, [r0, #18]
 801c914:	1acb      	subs	r3, r1, r3
 801c916:	442b      	add	r3, r5
 801c918:	429d      	cmp	r5, r3
 801c91a:	dc02      	bgt.n	801c922 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c91c:	429a      	cmp	r2, r3
 801c91e:	dadf      	bge.n	801c8e0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c920:	e7f1      	b.n	801c906 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c922:	2000      	movs	r0, #0
 801c924:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c926 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c928:	4604      	mov	r4, r0
 801c92a:	4617      	mov	r7, r2
 801c92c:	461e      	mov	r6, r3
 801c92e:	b911      	cbnz	r1, 801c936 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c930:	2500      	movs	r5, #0
 801c932:	4628      	mov	r0, r5
 801c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c936:	290a      	cmp	r1, #10
 801c938:	d0fa      	beq.n	801c930 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c93a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801c93e:	4291      	cmp	r1, r2
 801c940:	d0f6      	beq.n	801c930 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c942:	f242 020b 	movw	r2, #8203	@ 0x200b
 801c946:	4291      	cmp	r1, r2
 801c948:	d0f2      	beq.n	801c930 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c94a:	f7ff ffaf 	bl	801c8ac <_ZNK8touchgfx9ConstFont4findEt>
 801c94e:	4605      	mov	r5, r0
 801c950:	b950      	cbnz	r0, 801c968 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c952:	6823      	ldr	r3, [r4, #0]
 801c954:	4620      	mov	r0, r4
 801c956:	691b      	ldr	r3, [r3, #16]
 801c958:	4798      	blx	r3
 801c95a:	4601      	mov	r1, r0
 801c95c:	4620      	mov	r0, r4
 801c95e:	f7ff ffa5 	bl	801c8ac <_ZNK8touchgfx9ConstFont4findEt>
 801c962:	4605      	mov	r5, r0
 801c964:	2800      	cmp	r0, #0
 801c966:	d0e3      	beq.n	801c930 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c968:	6823      	ldr	r3, [r4, #0]
 801c96a:	4629      	mov	r1, r5
 801c96c:	4620      	mov	r0, r4
 801c96e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c970:	4798      	blx	r3
 801c972:	6038      	str	r0, [r7, #0]
 801c974:	6823      	ldr	r3, [r4, #0]
 801c976:	4620      	mov	r0, r4
 801c978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c97a:	4798      	blx	r3
 801c97c:	7030      	strb	r0, [r6, #0]
 801c97e:	e7d8      	b.n	801c932 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c980 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801c980:	b538      	push	{r3, r4, r5, lr}
 801c982:	4605      	mov	r5, r0
 801c984:	f001 fe08 	bl	801e598 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c988:	4604      	mov	r4, r0
 801c98a:	4628      	mov	r0, r5
 801c98c:	f001 fd48 	bl	801e420 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c990:	2800      	cmp	r0, #0
 801c992:	bf14      	ite	ne
 801c994:	2002      	movne	r0, #2
 801c996:	2000      	moveq	r0, #0
 801c998:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c99c:	b280      	uxth	r0, r0
 801c99e:	bd38      	pop	{r3, r4, r5, pc}

0801c9a0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801c9a0:	b538      	push	{r3, r4, r5, lr}
 801c9a2:	4605      	mov	r5, r0
 801c9a4:	f001 fdf8 	bl	801e598 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c9a8:	4604      	mov	r4, r0
 801c9aa:	4628      	mov	r0, r5
 801c9ac:	f001 fd38 	bl	801e420 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c9b0:	2800      	cmp	r0, #0
 801c9b2:	bf14      	ite	ne
 801c9b4:	2002      	movne	r0, #2
 801c9b6:	2000      	moveq	r0, #0
 801c9b8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c9bc:	f040 0001 	orr.w	r0, r0, #1
 801c9c0:	b280      	uxth	r0, r0
 801c9c2:	bd38      	pop	{r3, r4, r5, pc}

0801c9c4 <_ZN8touchgfx4clzuEm>:
 801c9c4:	4603      	mov	r3, r0
 801c9c6:	b1c8      	cbz	r0, 801c9fc <_ZN8touchgfx4clzuEm+0x38>
 801c9c8:	0c02      	lsrs	r2, r0, #16
 801c9ca:	0412      	lsls	r2, r2, #16
 801c9cc:	b9a2      	cbnz	r2, 801c9f8 <_ZN8touchgfx4clzuEm+0x34>
 801c9ce:	0403      	lsls	r3, r0, #16
 801c9d0:	2010      	movs	r0, #16
 801c9d2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801c9d6:	bf04      	itt	eq
 801c9d8:	021b      	lsleq	r3, r3, #8
 801c9da:	3008      	addeq	r0, #8
 801c9dc:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801c9e0:	bf04      	itt	eq
 801c9e2:	011b      	lsleq	r3, r3, #4
 801c9e4:	3004      	addeq	r0, #4
 801c9e6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801c9ea:	bf04      	itt	eq
 801c9ec:	009b      	lsleq	r3, r3, #2
 801c9ee:	3002      	addeq	r0, #2
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	db04      	blt.n	801c9fe <_ZN8touchgfx4clzuEm+0x3a>
 801c9f4:	3001      	adds	r0, #1
 801c9f6:	4770      	bx	lr
 801c9f8:	2000      	movs	r0, #0
 801c9fa:	e7ea      	b.n	801c9d2 <_ZN8touchgfx4clzuEm+0xe>
 801c9fc:	2020      	movs	r0, #32
 801c9fe:	4770      	bx	lr

0801ca00 <_ZN8touchgfx7muldivuEmmmRm>:
 801ca00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ca04:	460f      	mov	r7, r1
 801ca06:	4615      	mov	r5, r2
 801ca08:	461e      	mov	r6, r3
 801ca0a:	4601      	mov	r1, r0
 801ca0c:	b100      	cbz	r0, 801ca10 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801ca0e:	b927      	cbnz	r7, 801ca1a <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801ca10:	2000      	movs	r0, #0
 801ca12:	6030      	str	r0, [r6, #0]
 801ca14:	b002      	add	sp, #8
 801ca16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca1a:	f7ff ffd3 	bl	801c9c4 <_ZN8touchgfx4clzuEm>
 801ca1e:	b980      	cbnz	r0, 801ca42 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801ca20:	4638      	mov	r0, r7
 801ca22:	f7ff ffcf 	bl	801c9c4 <_ZN8touchgfx4clzuEm>
 801ca26:	2800      	cmp	r0, #0
 801ca28:	dd05      	ble.n	801ca36 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801ca2a:	4633      	mov	r3, r6
 801ca2c:	462a      	mov	r2, r5
 801ca2e:	4638      	mov	r0, r7
 801ca30:	f7ff ffe6 	bl	801ca00 <_ZN8touchgfx7muldivuEmmmRm>
 801ca34:	e7ee      	b.n	801ca14 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ca36:	f04f 33ff 	mov.w	r3, #4294967295
 801ca3a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801ca3e:	6033      	str	r3, [r6, #0]
 801ca40:	e7e8      	b.n	801ca14 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ca42:	fa37 f800 	lsrs.w	r8, r7, r0
 801ca46:	fb07 f301 	mul.w	r3, r7, r1
 801ca4a:	d105      	bne.n	801ca58 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801ca4c:	fbb3 f0f5 	udiv	r0, r3, r5
 801ca50:	fb05 3510 	mls	r5, r5, r0, r3
 801ca54:	6035      	str	r5, [r6, #0]
 801ca56:	e7dd      	b.n	801ca14 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ca58:	2301      	movs	r3, #1
 801ca5a:	fa01 fa00 	lsl.w	sl, r1, r0
 801ca5e:	462a      	mov	r2, r5
 801ca60:	fa03 f000 	lsl.w	r0, r3, r0
 801ca64:	4633      	mov	r3, r6
 801ca66:	fbba f9f5 	udiv	r9, sl, r5
 801ca6a:	3801      	subs	r0, #1
 801ca6c:	fb08 f409 	mul.w	r4, r8, r9
 801ca70:	4038      	ands	r0, r7
 801ca72:	f7ff ffc5 	bl	801ca00 <_ZN8touchgfx7muldivuEmmmRm>
 801ca76:	462a      	mov	r2, r5
 801ca78:	4607      	mov	r7, r0
 801ca7a:	ab01      	add	r3, sp, #4
 801ca7c:	fb05 a119 	mls	r1, r5, r9, sl
 801ca80:	4640      	mov	r0, r8
 801ca82:	f7ff ffbd 	bl	801ca00 <_ZN8touchgfx7muldivuEmmmRm>
 801ca86:	9b01      	ldr	r3, [sp, #4]
 801ca88:	6832      	ldr	r2, [r6, #0]
 801ca8a:	441a      	add	r2, r3
 801ca8c:	fbb2 f3f5 	udiv	r3, r2, r5
 801ca90:	441c      	add	r4, r3
 801ca92:	fb05 2513 	mls	r5, r5, r3, r2
 801ca96:	443c      	add	r4, r7
 801ca98:	4420      	add	r0, r4
 801ca9a:	e7db      	b.n	801ca54 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801ca9c <_ZN8touchgfx6muldivElllRl>:
 801ca9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ca9e:	2800      	cmp	r0, #0
 801caa0:	461e      	mov	r6, r3
 801caa2:	bfba      	itte	lt
 801caa4:	4240      	neglt	r0, r0
 801caa6:	f04f 34ff 	movlt.w	r4, #4294967295
 801caaa:	2401      	movge	r4, #1
 801caac:	2900      	cmp	r1, #0
 801caae:	bfbc      	itt	lt
 801cab0:	4249      	neglt	r1, r1
 801cab2:	4264      	neglt	r4, r4
 801cab4:	2a00      	cmp	r2, #0
 801cab6:	bfb6      	itet	lt
 801cab8:	4265      	neglt	r5, r4
 801caba:	4625      	movge	r5, r4
 801cabc:	4252      	neglt	r2, r2
 801cabe:	4288      	cmp	r0, r1
 801cac0:	bfc2      	ittt	gt
 801cac2:	4603      	movgt	r3, r0
 801cac4:	4608      	movgt	r0, r1
 801cac6:	4619      	movgt	r1, r3
 801cac8:	ab01      	add	r3, sp, #4
 801caca:	f7ff ff99 	bl	801ca00 <_ZN8touchgfx7muldivuEmmmRm>
 801cace:	9b01      	ldr	r3, [sp, #4]
 801cad0:	4368      	muls	r0, r5
 801cad2:	435c      	muls	r4, r3
 801cad4:	6034      	str	r4, [r6, #0]
 801cad6:	b002      	add	sp, #8
 801cad8:	bd70      	pop	{r4, r5, r6, pc}

0801cada <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801cada:	2000      	movs	r0, #0
 801cadc:	4770      	bx	lr

0801cade <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801cade:	2001      	movs	r0, #1
 801cae0:	4770      	bx	lr

0801cae2 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801cae2:	2002      	movs	r0, #2
 801cae4:	4770      	bx	lr

0801cae6 <_ZN8touchgfx6ScreenD1Ev>:
 801cae6:	4770      	bx	lr

0801cae8 <_ZN8touchgfx6Screen11setupScreenEv>:
 801cae8:	4770      	bx	lr

0801caea <_ZN8touchgfx12GestureEventD1Ev>:
 801caea:	4770      	bx	lr

0801caec <_ZN8touchgfx9DragEventD1Ev>:
 801caec:	4770      	bx	lr

0801caee <_ZN8touchgfx10ClickEventD1Ev>:
 801caee:	4770      	bx	lr

0801caf0 <_ZN8touchgfx10ClickEventD0Ev>:
 801caf0:	b510      	push	{r4, lr}
 801caf2:	4604      	mov	r4, r0
 801caf4:	210c      	movs	r1, #12
 801caf6:	f00c f9f3 	bl	8028ee0 <_ZdlPvj>
 801cafa:	4620      	mov	r0, r4
 801cafc:	bd10      	pop	{r4, pc}

0801cafe <_ZN8touchgfx9DragEventD0Ev>:
 801cafe:	b510      	push	{r4, lr}
 801cb00:	4604      	mov	r4, r0
 801cb02:	2110      	movs	r1, #16
 801cb04:	f00c f9ec 	bl	8028ee0 <_ZdlPvj>
 801cb08:	4620      	mov	r0, r4
 801cb0a:	bd10      	pop	{r4, pc}

0801cb0c <_ZN8touchgfx12GestureEventD0Ev>:
 801cb0c:	b510      	push	{r4, lr}
 801cb0e:	4604      	mov	r4, r0
 801cb10:	210c      	movs	r1, #12
 801cb12:	f00c f9e5 	bl	8028ee0 <_ZdlPvj>
 801cb16:	4620      	mov	r0, r4
 801cb18:	bd10      	pop	{r4, pc}

0801cb1a <_ZN8touchgfx6ScreenD0Ev>:
 801cb1a:	b510      	push	{r4, lr}
 801cb1c:	4604      	mov	r4, r0
 801cb1e:	213c      	movs	r1, #60	@ 0x3c
 801cb20:	f00c f9de 	bl	8028ee0 <_ZdlPvj>
 801cb24:	4620      	mov	r0, r4
 801cb26:	bd10      	pop	{r4, pc}

0801cb28 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801cb28:	b530      	push	{r4, r5, lr}
 801cb2a:	460d      	mov	r5, r1
 801cb2c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801cb2e:	b087      	sub	sp, #28
 801cb30:	4604      	mov	r4, r0
 801cb32:	b301      	cbz	r1, 801cb76 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801cb34:	a801      	add	r0, sp, #4
 801cb36:	f7ff fb5b 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb3a:	892a      	ldrh	r2, [r5, #8]
 801cb3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cb40:	7928      	ldrb	r0, [r5, #4]
 801cb42:	1ad2      	subs	r2, r2, r3
 801cb44:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801cb46:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801cb4a:	441a      	add	r2, r3
 801cb4c:	896b      	ldrh	r3, [r5, #10]
 801cb4e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801cb52:	f88d 0010 	strb.w	r0, [sp, #16]
 801cb56:	1b5b      	subs	r3, r3, r5
 801cb58:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801cb5a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801cb5c:	442b      	add	r3, r5
 801cb5e:	4d07      	ldr	r5, [pc, #28]	@ (801cb7c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801cb60:	f8ad 1012 	strh.w	r1, [sp, #18]
 801cb64:	a903      	add	r1, sp, #12
 801cb66:	9503      	str	r5, [sp, #12]
 801cb68:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cb6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb70:	6803      	ldr	r3, [r0, #0]
 801cb72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cb74:	4798      	blx	r3
 801cb76:	b007      	add	sp, #28
 801cb78:	bd30      	pop	{r4, r5, pc}
 801cb7a:	bf00      	nop
 801cb7c:	0802e528 	.word	0x0802e528

0801cb80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801cb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb84:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cb86:	b08a      	sub	sp, #40	@ 0x28
 801cb88:	4604      	mov	r4, r0
 801cb8a:	460d      	mov	r5, r1
 801cb8c:	b113      	cbz	r3, 801cb94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801cb8e:	790b      	ldrb	r3, [r1, #4]
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d044      	beq.n	801cc1e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cb94:	f104 0804 	add.w	r8, r4, #4
 801cb98:	a803      	add	r0, sp, #12
 801cb9a:	4641      	mov	r1, r8
 801cb9c:	f7ff fb28 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cba0:	792b      	ldrb	r3, [r5, #4]
 801cba2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cba6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801cbaa:	b983      	cbnz	r3, 801cbce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801cbac:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801cbb0:	892a      	ldrh	r2, [r5, #8]
 801cbb2:	88e9      	ldrh	r1, [r5, #6]
 801cbb4:	4640      	mov	r0, r8
 801cbb6:	1b92      	subs	r2, r2, r6
 801cbb8:	9301      	str	r3, [sp, #4]
 801cbba:	1bc9      	subs	r1, r1, r7
 801cbbc:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801cbc0:	b212      	sxth	r2, r2
 801cbc2:	9300      	str	r3, [sp, #0]
 801cbc4:	b209      	sxth	r1, r1
 801cbc6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801cbca:	f7f7 fb95 	bl	80142f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801cbce:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cbd0:	b329      	cbz	r1, 801cc1e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cbd2:	a805      	add	r0, sp, #20
 801cbd4:	f7ff fb0c 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cbd8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801cbdc:	792b      	ldrb	r3, [r5, #4]
 801cbde:	a907      	add	r1, sp, #28
 801cbe0:	1abf      	subs	r7, r7, r2
 801cbe2:	88ea      	ldrh	r2, [r5, #6]
 801cbe4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801cbe6:	4417      	add	r7, r2
 801cbe8:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801cbea:	f88d 3020 	strb.w	r3, [sp, #32]
 801cbee:	4417      	add	r7, r2
 801cbf0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801cbf4:	1ab6      	subs	r6, r6, r2
 801cbf6:	892a      	ldrh	r2, [r5, #8]
 801cbf8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801cbfc:	4416      	add	r6, r2
 801cbfe:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801cc00:	4416      	add	r6, r2
 801cc02:	4a08      	ldr	r2, [pc, #32]	@ (801cc24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801cc04:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801cc08:	2600      	movs	r6, #0
 801cc0a:	9207      	str	r2, [sp, #28]
 801cc0c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801cc10:	6803      	ldr	r3, [r0, #0]
 801cc12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cc14:	4798      	blx	r3
 801cc16:	792b      	ldrb	r3, [r5, #4]
 801cc18:	b10b      	cbz	r3, 801cc1e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cc1a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801cc1e:	b00a      	add	sp, #40	@ 0x28
 801cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc24:	0802e500 	.word	0x0802e500

0801cc28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc2c:	460c      	mov	r4, r1
 801cc2e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801cc30:	b088      	sub	sp, #32
 801cc32:	4605      	mov	r5, r0
 801cc34:	2900      	cmp	r1, #0
 801cc36:	d06d      	beq.n	801cd14 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801cc38:	4668      	mov	r0, sp
 801cc3a:	f7ff fad9 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cc3e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801cc40:	88e3      	ldrh	r3, [r4, #6]
 801cc42:	f9bd 8000 	ldrsh.w	r8, [sp]
 801cc46:	440b      	add	r3, r1
 801cc48:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801cc4c:	b21b      	sxth	r3, r3
 801cc4e:	4543      	cmp	r3, r8
 801cc50:	db31      	blt.n	801ccb6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cc52:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801cc56:	44c4      	add	ip, r8
 801cc58:	fa0f fc8c 	sxth.w	ip, ip
 801cc5c:	4563      	cmp	r3, ip
 801cc5e:	da2a      	bge.n	801ccb6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cc60:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801cc62:	8926      	ldrh	r6, [r4, #8]
 801cc64:	4416      	add	r6, r2
 801cc66:	b236      	sxth	r6, r6
 801cc68:	42be      	cmp	r6, r7
 801cc6a:	db24      	blt.n	801ccb6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cc6c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801cc70:	4438      	add	r0, r7
 801cc72:	b200      	sxth	r0, r0
 801cc74:	4286      	cmp	r6, r0
 801cc76:	da1e      	bge.n	801ccb6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cc78:	8963      	ldrh	r3, [r4, #10]
 801cc7a:	4419      	add	r1, r3
 801cc7c:	b209      	sxth	r1, r1
 801cc7e:	4541      	cmp	r1, r8
 801cc80:	db08      	blt.n	801cc94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cc82:	4561      	cmp	r1, ip
 801cc84:	da06      	bge.n	801cc94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cc86:	89a3      	ldrh	r3, [r4, #12]
 801cc88:	441a      	add	r2, r3
 801cc8a:	b212      	sxth	r2, r2
 801cc8c:	42ba      	cmp	r2, r7
 801cc8e:	db01      	blt.n	801cc94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801cc90:	4282      	cmp	r2, r0
 801cc92:	db10      	blt.n	801ccb6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cc94:	4b21      	ldr	r3, [pc, #132]	@ (801cd1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801cc96:	a904      	add	r1, sp, #16
 801cc98:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cc9a:	9304      	str	r3, [sp, #16]
 801cc9c:	2302      	movs	r3, #2
 801cc9e:	f88d 3014 	strb.w	r3, [sp, #20]
 801cca2:	2300      	movs	r3, #0
 801cca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cca8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ccac:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ccb0:	6803      	ldr	r3, [r0, #0]
 801ccb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ccb4:	4798      	blx	r3
 801ccb6:	1d29      	adds	r1, r5, #4
 801ccb8:	a802      	add	r0, sp, #8
 801ccba:	f7ff fa99 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ccbe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ccc2:	88e0      	ldrh	r0, [r4, #6]
 801ccc4:	eba3 0808 	sub.w	r8, r3, r8
 801ccc8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cccc:	7921      	ldrb	r1, [r4, #4]
 801ccce:	fa1f f888 	uxth.w	r8, r8
 801ccd2:	1bdf      	subs	r7, r3, r7
 801ccd4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801ccd8:	b2bb      	uxth	r3, r7
 801ccda:	4440      	add	r0, r8
 801ccdc:	8922      	ldrh	r2, [r4, #8]
 801ccde:	8967      	ldrh	r7, [r4, #10]
 801cce0:	4460      	add	r0, ip
 801cce2:	89a4      	ldrh	r4, [r4, #12]
 801cce4:	441a      	add	r2, r3
 801cce6:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801cce8:	44b8      	add	r8, r7
 801ccea:	4423      	add	r3, r4
 801ccec:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ccf0:	4432      	add	r2, r6
 801ccf2:	44e0      	add	r8, ip
 801ccf4:	4433      	add	r3, r6
 801ccf6:	4c0a      	ldr	r4, [pc, #40]	@ (801cd20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801ccf8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801ccfa:	f88d 1014 	strb.w	r1, [sp, #20]
 801ccfe:	a904      	add	r1, sp, #16
 801cd00:	9404      	str	r4, [sp, #16]
 801cd02:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cd06:	f8ad 801a 	strh.w	r8, [sp, #26]
 801cd0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cd0e:	6803      	ldr	r3, [r0, #0]
 801cd10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cd12:	4798      	blx	r3
 801cd14:	b008      	add	sp, #32
 801cd16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd1a:	bf00      	nop
 801cd1c:	0802e500 	.word	0x0802e500
 801cd20:	0802e514 	.word	0x0802e514

0801cd24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801cd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cd26:	4604      	mov	r4, r0
 801cd28:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801cd2c:	3201      	adds	r2, #1
 801cd2e:	d112      	bne.n	801cd56 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801cd30:	2500      	movs	r5, #0
 801cd32:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cd36:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cd3a:	6803      	ldr	r3, [r0, #0]
 801cd3c:	9500      	str	r5, [sp, #0]
 801cd3e:	466d      	mov	r5, sp
 801cd40:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cd44:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cd48:	4629      	mov	r1, r5
 801cd4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd4c:	4798      	blx	r3
 801cd4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cd52:	e884 0003 	stmia.w	r4, {r0, r1}
 801cd56:	4620      	mov	r0, r4
 801cd58:	b003      	add	sp, #12
 801cd5a:	bd30      	pop	{r4, r5, pc}

0801cd5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801cd5c:	b513      	push	{r0, r1, r4, lr}
 801cd5e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801cd62:	4604      	mov	r4, r0
 801cd64:	3301      	adds	r3, #1
 801cd66:	d109      	bne.n	801cd7c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801cd68:	4601      	mov	r1, r0
 801cd6a:	4668      	mov	r0, sp
 801cd6c:	f7ff fa40 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd70:	f8bd 3000 	ldrh.w	r3, [sp]
 801cd74:	8423      	strh	r3, [r4, #32]
 801cd76:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cd7a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801cd7c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801cd80:	b002      	add	sp, #8
 801cd82:	bd10      	pop	{r4, pc}

0801cd84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801cd84:	b513      	push	{r0, r1, r4, lr}
 801cd86:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801cd8a:	4604      	mov	r4, r0
 801cd8c:	3301      	adds	r3, #1
 801cd8e:	d109      	bne.n	801cda4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801cd90:	4601      	mov	r1, r0
 801cd92:	4668      	mov	r0, sp
 801cd94:	f7ff fa2c 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd98:	f8bd 3000 	ldrh.w	r3, [sp]
 801cd9c:	8423      	strh	r3, [r4, #32]
 801cd9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cda2:	8463      	strh	r3, [r4, #34]	@ 0x22
 801cda4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801cda8:	b002      	add	sp, #8
 801cdaa:	bd10      	pop	{r4, pc}

0801cdac <_ZN8touchgfx6ScreenC1Ev>:
 801cdac:	b570      	push	{r4, r5, r6, lr}
 801cdae:	4b17      	ldr	r3, [pc, #92]	@ (801ce0c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801cdb0:	4605      	mov	r5, r0
 801cdb2:	4a17      	ldr	r2, [pc, #92]	@ (801ce10 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801cdb4:	2101      	movs	r1, #1
 801cdb6:	f845 3b04 	str.w	r3, [r5], #4
 801cdba:	2300      	movs	r3, #0
 801cdbc:	6042      	str	r2, [r0, #4]
 801cdbe:	4604      	mov	r4, r0
 801cdc0:	8103      	strh	r3, [r0, #8]
 801cdc2:	8143      	strh	r3, [r0, #10]
 801cdc4:	8183      	strh	r3, [r0, #12]
 801cdc6:	81c3      	strh	r3, [r0, #14]
 801cdc8:	8203      	strh	r3, [r0, #16]
 801cdca:	8243      	strh	r3, [r0, #18]
 801cdcc:	8283      	strh	r3, [r0, #20]
 801cdce:	82c3      	strh	r3, [r0, #22]
 801cdd0:	6203      	str	r3, [r0, #32]
 801cdd2:	8483      	strh	r3, [r0, #36]	@ 0x24
 801cdd4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801cdd6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801cdda:	6343      	str	r3, [r0, #52]	@ 0x34
 801cddc:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801cde0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801cde4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801cde8:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801cdec:	4b09      	ldr	r3, [pc, #36]	@ (801ce14 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801cdee:	4628      	mov	r0, r5
 801cdf0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cdf4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801cdf6:	4a08      	ldr	r2, [pc, #32]	@ (801ce18 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801cdf8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cdfc:	4798      	blx	r3
 801cdfe:	6863      	ldr	r3, [r4, #4]
 801ce00:	4628      	mov	r0, r5
 801ce02:	4631      	mov	r1, r6
 801ce04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ce06:	4798      	blx	r3
 801ce08:	4620      	mov	r0, r4
 801ce0a:	bd70      	pop	{r4, r5, r6, pc}
 801ce0c:	0802e53c 	.word	0x0802e53c
 801ce10:	0802ddc8 	.word	0x0802ddc8
 801ce14:	240621ae 	.word	0x240621ae
 801ce18:	240621ac 	.word	0x240621ac

0801ce1c <_ZN8touchgfx6Screen4drawEv>:
 801ce1c:	4b09      	ldr	r3, [pc, #36]	@ (801ce44 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801ce1e:	b507      	push	{r0, r1, r2, lr}
 801ce20:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ce24:	2100      	movs	r1, #0
 801ce26:	4b08      	ldr	r3, [pc, #32]	@ (801ce48 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801ce28:	9100      	str	r1, [sp, #0]
 801ce2a:	4669      	mov	r1, sp
 801ce2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ce30:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ce34:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ce38:	6803      	ldr	r3, [r0, #0]
 801ce3a:	689b      	ldr	r3, [r3, #8]
 801ce3c:	4798      	blx	r3
 801ce3e:	b003      	add	sp, #12
 801ce40:	f85d fb04 	ldr.w	pc, [sp], #4
 801ce44:	240621ac 	.word	0x240621ac
 801ce48:	240621ae 	.word	0x240621ae

0801ce4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801ce4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce50:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ce54:	b089      	sub	sp, #36	@ 0x24
 801ce56:	4680      	mov	r8, r0
 801ce58:	460c      	mov	r4, r1
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	4615      	mov	r5, r2
 801ce5e:	dd0e      	ble.n	801ce7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ce60:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	dd0a      	ble.n	801ce7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ce68:	4628      	mov	r0, r5
 801ce6a:	f7ff ff5b 	bl	801cd24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ce6e:	4621      	mov	r1, r4
 801ce70:	f7fd ffb1 	bl	801add6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ce74:	69eb      	ldr	r3, [r5, #28]
 801ce76:	b928      	cbnz	r0, 801ce84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801ce78:	461d      	mov	r5, r3
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d1f4      	bne.n	801ce68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801ce7e:	b009      	add	sp, #36	@ 0x24
 801ce80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce84:	ae04      	add	r6, sp, #16
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	f000 80b5 	beq.w	801cff6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ce8c:	682b      	ldr	r3, [r5, #0]
 801ce8e:	4629      	mov	r1, r5
 801ce90:	a802      	add	r0, sp, #8
 801ce92:	68db      	ldr	r3, [r3, #12]
 801ce94:	4798      	blx	r3
 801ce96:	4628      	mov	r0, r5
 801ce98:	f7ff ff60 	bl	801cd5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ce9c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801cea0:	4407      	add	r7, r0
 801cea2:	4628      	mov	r0, r5
 801cea4:	f7ff ff6e 	bl	801cd84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cea8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801ceac:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801ceb0:	b23f      	sxth	r7, r7
 801ceb2:	4418      	add	r0, r3
 801ceb4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ceb8:	4621      	mov	r1, r4
 801ceba:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cebe:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cec2:	4630      	mov	r0, r6
 801cec4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cec8:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cecc:	f7f7 faf6 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 801ced0:	4628      	mov	r0, r5
 801ced2:	f7ff ff27 	bl	801cd24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ced6:	ab06      	add	r3, sp, #24
 801ced8:	4602      	mov	r2, r0
 801ceda:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cede:	e883 0003 	stmia.w	r3, {r0, r1}
 801cee2:	4611      	mov	r1, r2
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7f7 fae9 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 801ceea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801ceee:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cef2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801cef6:	4299      	cmp	r1, r3
 801cef8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801cefc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801cf00:	d10b      	bne.n	801cf1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cf02:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cf06:	4552      	cmp	r2, sl
 801cf08:	d107      	bne.n	801cf1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cf0a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cf0e:	455a      	cmp	r2, fp
 801cf10:	d103      	bne.n	801cf1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cf12:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cf16:	454a      	cmp	r2, r9
 801cf18:	d06d      	beq.n	801cff6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cf1a:	f1bb 0f00 	cmp.w	fp, #0
 801cf1e:	dd65      	ble.n	801cfec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cf20:	f1b9 0f00 	cmp.w	r9, #0
 801cf24:	dd62      	ble.n	801cfec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cf26:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cf2a:	fa1f f08a 	uxth.w	r0, sl
 801cf2e:	4552      	cmp	r2, sl
 801cf30:	9000      	str	r0, [sp, #0]
 801cf32:	da12      	bge.n	801cf5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801cf34:	9301      	str	r3, [sp, #4]
 801cf36:	9b00      	ldr	r3, [sp, #0]
 801cf38:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cf3c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cf40:	1a9a      	subs	r2, r3, r2
 801cf42:	f8ad 1010 	strh.w	r1, [sp, #16]
 801cf46:	4631      	mov	r1, r6
 801cf48:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cf4c:	4640      	mov	r0, r8
 801cf4e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801cf52:	69ea      	ldr	r2, [r5, #28]
 801cf54:	f7ff ff7a 	bl	801ce4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cf58:	9b01      	ldr	r3, [sp, #4]
 801cf5a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cf5e:	b29f      	uxth	r7, r3
 801cf60:	429a      	cmp	r2, r3
 801cf62:	da0d      	bge.n	801cf80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801cf64:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cf68:	1aba      	subs	r2, r7, r2
 801cf6a:	f8ad a012 	strh.w	sl, [sp, #18]
 801cf6e:	4631      	mov	r1, r6
 801cf70:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cf74:	4640      	mov	r0, r8
 801cf76:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cf7a:	69ea      	ldr	r2, [r5, #28]
 801cf7c:	f7ff ff66 	bl	801ce4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cf80:	8822      	ldrh	r2, [r4, #0]
 801cf82:	445f      	add	r7, fp
 801cf84:	88a3      	ldrh	r3, [r4, #4]
 801cf86:	b2bf      	uxth	r7, r7
 801cf88:	4413      	add	r3, r2
 801cf8a:	b23a      	sxth	r2, r7
 801cf8c:	b29b      	uxth	r3, r3
 801cf8e:	b219      	sxth	r1, r3
 801cf90:	4291      	cmp	r1, r2
 801cf92:	dd0d      	ble.n	801cfb0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801cf94:	1bdb      	subs	r3, r3, r7
 801cf96:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cf9a:	f8ad a012 	strh.w	sl, [sp, #18]
 801cf9e:	4631      	mov	r1, r6
 801cfa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cfa4:	4640      	mov	r0, r8
 801cfa6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cfaa:	69ea      	ldr	r2, [r5, #28]
 801cfac:	f7ff ff4e 	bl	801ce4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cfb0:	88e2      	ldrh	r2, [r4, #6]
 801cfb2:	8863      	ldrh	r3, [r4, #2]
 801cfb4:	4413      	add	r3, r2
 801cfb6:	9a00      	ldr	r2, [sp, #0]
 801cfb8:	444a      	add	r2, r9
 801cfba:	b29b      	uxth	r3, r3
 801cfbc:	fa1f f982 	uxth.w	r9, r2
 801cfc0:	b219      	sxth	r1, r3
 801cfc2:	fa0f f289 	sxth.w	r2, r9
 801cfc6:	428a      	cmp	r2, r1
 801cfc8:	da15      	bge.n	801cff6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cfca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cfce:	eba3 0309 	sub.w	r3, r3, r9
 801cfd2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cfd6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801cfda:	4631      	mov	r1, r6
 801cfdc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cfe0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cfe4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cfe8:	69ea      	ldr	r2, [r5, #28]
 801cfea:	e001      	b.n	801cff0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801cfec:	69ea      	ldr	r2, [r5, #28]
 801cfee:	4621      	mov	r1, r4
 801cff0:	4640      	mov	r0, r8
 801cff2:	f7ff ff2b 	bl	801ce4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cff6:	4628      	mov	r0, r5
 801cff8:	f7ff fe94 	bl	801cd24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cffc:	6861      	ldr	r1, [r4, #4]
 801cffe:	4602      	mov	r2, r0
 801d000:	4633      	mov	r3, r6
 801d002:	6820      	ldr	r0, [r4, #0]
 801d004:	c303      	stmia	r3!, {r0, r1}
 801d006:	4611      	mov	r1, r2
 801d008:	4630      	mov	r0, r6
 801d00a:	f7f7 fa57 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 801d00e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d012:	2b00      	cmp	r3, #0
 801d014:	f77f af33 	ble.w	801ce7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d018:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	f77f af2e 	ble.w	801ce7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d022:	4628      	mov	r0, r5
 801d024:	f7ff fe9a 	bl	801cd5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d028:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d02c:	1a18      	subs	r0, r3, r0
 801d02e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d032:	4628      	mov	r0, r5
 801d034:	f7ff fea6 	bl	801cd84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d038:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d03c:	4631      	mov	r1, r6
 801d03e:	1a18      	subs	r0, r3, r0
 801d040:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d044:	4628      	mov	r0, r5
 801d046:	682b      	ldr	r3, [r5, #0]
 801d048:	689b      	ldr	r3, [r3, #8]
 801d04a:	4798      	blx	r3
 801d04c:	e717      	b.n	801ce7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d04e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d04e:	b570      	push	{r4, r5, r6, lr}
 801d050:	1d06      	adds	r6, r0, #4
 801d052:	b086      	sub	sp, #24
 801d054:	460c      	mov	r4, r1
 801d056:	2300      	movs	r3, #0
 801d058:	4631      	mov	r1, r6
 801d05a:	4605      	mov	r5, r0
 801d05c:	a802      	add	r0, sp, #8
 801d05e:	9301      	str	r3, [sp, #4]
 801d060:	f7ff f8c6 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d064:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d068:	8822      	ldrh	r2, [r4, #0]
 801d06a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d06e:	1ad2      	subs	r2, r2, r3
 801d070:	8863      	ldrh	r3, [r4, #2]
 801d072:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d076:	1a5b      	subs	r3, r3, r1
 801d078:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d07c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d080:	aa01      	add	r2, sp, #4
 801d082:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d086:	4630      	mov	r0, r6
 801d088:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d08c:	a904      	add	r1, sp, #16
 801d08e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d092:	f7f7 faeb 	bl	801466c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d096:	9a01      	ldr	r2, [sp, #4]
 801d098:	b11a      	cbz	r2, 801d0a2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d09a:	4621      	mov	r1, r4
 801d09c:	4628      	mov	r0, r5
 801d09e:	f7ff fed5 	bl	801ce4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d0a2:	b006      	add	sp, #24
 801d0a4:	bd70      	pop	{r4, r5, r6, pc}

0801d0a6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d0a6:	4602      	mov	r2, r0
 801d0a8:	b530      	push	{r4, r5, lr}
 801d0aa:	4604      	mov	r4, r0
 801d0ac:	b085      	sub	sp, #20
 801d0ae:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d0b2:	460d      	mov	r5, r1
 801d0b4:	466b      	mov	r3, sp
 801d0b6:	6851      	ldr	r1, [r2, #4]
 801d0b8:	c303      	stmia	r3!, {r0, r1}
 801d0ba:	4629      	mov	r1, r5
 801d0bc:	4668      	mov	r0, sp
 801d0be:	f7f7 f9fd 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 801d0c2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801d0c6:	b12b      	cbz	r3, 801d0d4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d0c8:	4669      	mov	r1, sp
 801d0ca:	4620      	mov	r0, r4
 801d0cc:	f7ff ffbf 	bl	801d04e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d0d0:	b005      	add	sp, #20
 801d0d2:	bd30      	pop	{r4, r5, pc}
 801d0d4:	3404      	adds	r4, #4
 801d0d6:	a802      	add	r0, sp, #8
 801d0d8:	4621      	mov	r1, r4
 801d0da:	f7ff f889 	bl	801c1f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d0de:	f8bd 3000 	ldrh.w	r3, [sp]
 801d0e2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d0e6:	4669      	mov	r1, sp
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	1a9b      	subs	r3, r3, r2
 801d0ec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d0f0:	f8ad 3000 	strh.w	r3, [sp]
 801d0f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d0f8:	1a9b      	subs	r3, r3, r2
 801d0fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d0fe:	f7f7 fa7c 	bl	80145fa <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d102:	e7e5      	b.n	801d0d0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d104 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d104:	460b      	mov	r3, r1
 801d106:	680a      	ldr	r2, [r1, #0]
 801d108:	1d01      	adds	r1, r0, #4
 801d10a:	6992      	ldr	r2, [r2, #24]
 801d10c:	4618      	mov	r0, r3
 801d10e:	4710      	bx	r2

0801d110 <_ZN8touchgfx12TextProviderC1Ev>:
 801d110:	b538      	push	{r3, r4, r5, lr}
 801d112:	2500      	movs	r5, #0
 801d114:	2302      	movs	r3, #2
 801d116:	4604      	mov	r4, r0
 801d118:	220e      	movs	r2, #14
 801d11a:	7403      	strb	r3, [r0, #16]
 801d11c:	4629      	mov	r1, r5
 801d11e:	6145      	str	r5, [r0, #20]
 801d120:	7605      	strb	r5, [r0, #24]
 801d122:	83c5      	strh	r5, [r0, #30]
 801d124:	8405      	strh	r5, [r0, #32]
 801d126:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d128:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d12a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801d12c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801d130:	e9c0 5500 	strd	r5, r5, [r0]
 801d134:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801d138:	304c      	adds	r0, #76	@ 0x4c
 801d13a:	f00c fce5 	bl	8029b08 <memset>
 801d13e:	2301      	movs	r3, #1
 801d140:	4620      	mov	r0, r4
 801d142:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801d146:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d14a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801d14e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801d152:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801d156:	f7eb ff93 	bl	8009080 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d15a:	4620      	mov	r0, r4
 801d15c:	bd38      	pop	{r3, r4, r5, pc}

0801d15e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801d15e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d160:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d164:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801d166:	fab0 f080 	clz	r0, r0
 801d16a:	0940      	lsrs	r0, r0, #5
 801d16c:	4770      	bx	lr

0801d16e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d16e:	b530      	push	{r4, r5, lr}
 801d170:	2500      	movs	r5, #0
 801d172:	2401      	movs	r4, #1
 801d174:	6843      	ldr	r3, [r0, #4]
 801d176:	b913      	cbnz	r3, 801d17e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d178:	6803      	ldr	r3, [r0, #0]
 801d17a:	b313      	cbz	r3, 801d1c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d17c:	6043      	str	r3, [r0, #4]
 801d17e:	7e03      	ldrb	r3, [r0, #24]
 801d180:	b143      	cbz	r3, 801d194 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d182:	6943      	ldr	r3, [r0, #20]
 801d184:	b12b      	cbz	r3, 801d192 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d186:	881a      	ldrh	r2, [r3, #0]
 801d188:	b11a      	cbz	r2, 801d192 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d18a:	1c9a      	adds	r2, r3, #2
 801d18c:	6142      	str	r2, [r0, #20]
 801d18e:	8818      	ldrh	r0, [r3, #0]
 801d190:	bd30      	pop	{r4, r5, pc}
 801d192:	7605      	strb	r5, [r0, #24]
 801d194:	6843      	ldr	r3, [r0, #4]
 801d196:	8819      	ldrh	r1, [r3, #0]
 801d198:	b199      	cbz	r1, 801d1c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d19a:	1c9a      	adds	r2, r3, #2
 801d19c:	2902      	cmp	r1, #2
 801d19e:	6042      	str	r2, [r0, #4]
 801d1a0:	d1f5      	bne.n	801d18e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d1a2:	7c03      	ldrb	r3, [r0, #16]
 801d1a4:	2b01      	cmp	r3, #1
 801d1a6:	d8e5      	bhi.n	801d174 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d1a8:	1c5a      	adds	r2, r3, #1
 801d1aa:	3302      	adds	r3, #2
 801d1ac:	7402      	strb	r2, [r0, #16]
 801d1ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d1b2:	6143      	str	r3, [r0, #20]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d0dd      	beq.n	801d174 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d1b8:	881b      	ldrh	r3, [r3, #0]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d0da      	beq.n	801d174 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d1be:	7604      	strb	r4, [r0, #24]
 801d1c0:	e7d8      	b.n	801d174 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d1c2:	2000      	movs	r0, #0
 801d1c4:	e7e4      	b.n	801d190 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d1c6:	6001      	str	r1, [r0, #0]
 801d1c8:	2100      	movs	r1, #0
 801d1ca:	b430      	push	{r4, r5}
 801d1cc:	6041      	str	r1, [r0, #4]
 801d1ce:	6815      	ldr	r5, [r2, #0]
 801d1d0:	6085      	str	r5, [r0, #8]
 801d1d2:	6852      	ldr	r2, [r2, #4]
 801d1d4:	6443      	str	r3, [r0, #68]	@ 0x44
 801d1d6:	9b02      	ldr	r3, [sp, #8]
 801d1d8:	60c2      	str	r2, [r0, #12]
 801d1da:	7401      	strb	r1, [r0, #16]
 801d1dc:	6141      	str	r1, [r0, #20]
 801d1de:	7601      	strb	r1, [r0, #24]
 801d1e0:	8701      	strh	r1, [r0, #56]	@ 0x38
 801d1e2:	8401      	strh	r1, [r0, #32]
 801d1e4:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801d1e8:	6483      	str	r3, [r0, #72]	@ 0x48
 801d1ea:	bc30      	pop	{r4, r5}
 801d1ec:	f7eb bf48 	b.w	8009080 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d1f0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801d1f0:	b408      	push	{r3}
 801d1f2:	b510      	push	{r4, lr}
 801d1f4:	b085      	sub	sp, #20
 801d1f6:	ac07      	add	r4, sp, #28
 801d1f8:	f854 3b04 	ldr.w	r3, [r4], #4
 801d1fc:	9300      	str	r3, [sp, #0]
 801d1fe:	4613      	mov	r3, r2
 801d200:	4622      	mov	r2, r4
 801d202:	9403      	str	r4, [sp, #12]
 801d204:	f7ff ffdf 	bl	801d1c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d208:	b005      	add	sp, #20
 801d20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d20e:	b001      	add	sp, #4
 801d210:	4770      	bx	lr

0801d212 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d212:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d214:	4605      	mov	r5, r0
 801d216:	4608      	mov	r0, r1
 801d218:	b1f1      	cbz	r1, 801d258 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d21a:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801d21e:	460b      	mov	r3, r1
 801d220:	f101 0708 	add.w	r7, r1, #8
 801d224:	4622      	mov	r2, r4
 801d226:	6818      	ldr	r0, [r3, #0]
 801d228:	3308      	adds	r3, #8
 801d22a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d22e:	4626      	mov	r6, r4
 801d230:	42bb      	cmp	r3, r7
 801d232:	c603      	stmia	r6!, {r0, r1}
 801d234:	4634      	mov	r4, r6
 801d236:	d1f6      	bne.n	801d226 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d238:	6818      	ldr	r0, [r3, #0]
 801d23a:	6030      	str	r0, [r6, #0]
 801d23c:	4610      	mov	r0, r2
 801d23e:	889b      	ldrh	r3, [r3, #4]
 801d240:	80b3      	strh	r3, [r6, #4]
 801d242:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801d246:	015b      	lsls	r3, r3, #5
 801d248:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d24c:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801d250:	430b      	orrs	r3, r1
 801d252:	425b      	negs	r3, r3
 801d254:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801d258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d25a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d25a:	b538      	push	{r3, r4, r5, lr}
 801d25c:	460c      	mov	r4, r1
 801d25e:	6811      	ldr	r1, [r2, #0]
 801d260:	4610      	mov	r0, r2
 801d262:	68cd      	ldr	r5, [r1, #12]
 801d264:	4619      	mov	r1, r3
 801d266:	47a8      	blx	r5
 801d268:	2800      	cmp	r0, #0
 801d26a:	bf08      	it	eq
 801d26c:	4620      	moveq	r0, r4
 801d26e:	bd38      	pop	{r3, r4, r5, pc}

0801d270 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d274:	468c      	mov	ip, r1
 801d276:	4604      	mov	r4, r0
 801d278:	4615      	mov	r5, r2
 801d27a:	b942      	cbnz	r2, 801d28e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801d27c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d280:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801d284:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801d288:	4628      	mov	r0, r5
 801d28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d28e:	7b50      	ldrb	r0, [r2, #13]
 801d290:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801d294:	8893      	ldrh	r3, [r2, #4]
 801d296:	0106      	lsls	r6, r0, #4
 801d298:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d29c:	79ee      	ldrb	r6, [r5, #7]
 801d29e:	4316      	orrs	r6, r2
 801d2a0:	185a      	adds	r2, r3, r1
 801d2a2:	b291      	uxth	r1, r2
 801d2a4:	b2b7      	uxth	r7, r6
 801d2a6:	291d      	cmp	r1, #29
 801d2a8:	d87f      	bhi.n	801d3aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801d2aa:	2201      	movs	r2, #1
 801d2ac:	10f6      	asrs	r6, r6, #3
 801d2ae:	408a      	lsls	r2, r1
 801d2b0:	4974      	ldr	r1, [pc, #464]	@ (801d484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801d2b2:	420a      	tst	r2, r1
 801d2b4:	d12e      	bne.n	801d314 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801d2b6:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801d2ba:	d076      	beq.n	801d3aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801d2bc:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801d2c0:	462b      	mov	r3, r5
 801d2c2:	f105 0e08 	add.w	lr, r5, #8
 801d2c6:	4615      	mov	r5, r2
 801d2c8:	6818      	ldr	r0, [r3, #0]
 801d2ca:	3308      	adds	r3, #8
 801d2cc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d2d0:	4694      	mov	ip, r2
 801d2d2:	4573      	cmp	r3, lr
 801d2d4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d2d8:	4662      	mov	r2, ip
 801d2da:	d1f5      	bne.n	801d2c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801d2dc:	6818      	ldr	r0, [r3, #0]
 801d2de:	f8cc 0000 	str.w	r0, [ip]
 801d2e2:	889b      	ldrh	r3, [r3, #4]
 801d2e4:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d2e8:	b2b3      	uxth	r3, r6
 801d2ea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801d2ee:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801d2f2:	1aca      	subs	r2, r1, r3
 801d2f4:	1bcf      	subs	r7, r1, r7
 801d2f6:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801d2fa:	b292      	uxth	r2, r2
 801d2fc:	1afb      	subs	r3, r7, r3
 801d2fe:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801d302:	10d2      	asrs	r2, r2, #3
 801d304:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801d308:	4302      	orrs	r2, r0
 801d30a:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801d30e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d312:	e7b9      	b.n	801d288 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801d314:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801d318:	462b      	mov	r3, r5
 801d31a:	f105 0808 	add.w	r8, r5, #8
 801d31e:	4615      	mov	r5, r2
 801d320:	6818      	ldr	r0, [r3, #0]
 801d322:	3308      	adds	r3, #8
 801d324:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d328:	4696      	mov	lr, r2
 801d32a:	4543      	cmp	r3, r8
 801d32c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d330:	4672      	mov	r2, lr
 801d332:	d1f5      	bne.n	801d320 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801d334:	6818      	ldr	r0, [r3, #0]
 801d336:	f8ce 0000 	str.w	r0, [lr]
 801d33a:	889b      	ldrh	r3, [r3, #4]
 801d33c:	f8ae 3004 	strh.w	r3, [lr, #4]
 801d340:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d342:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d346:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801d348:	f640 6333 	movw	r3, #3635	@ 0xe33
 801d34c:	4299      	cmp	r1, r3
 801d34e:	d111      	bne.n	801d374 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801d350:	f8dc 3000 	ldr.w	r3, [ip]
 801d354:	4660      	mov	r0, ip
 801d356:	68db      	ldr	r3, [r3, #12]
 801d358:	4798      	blx	r3
 801d35a:	7b41      	ldrb	r1, [r0, #13]
 801d35c:	00cb      	lsls	r3, r1, #3
 801d35e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d362:	7a03      	ldrb	r3, [r0, #8]
 801d364:	4313      	orrs	r3, r2
 801d366:	064a      	lsls	r2, r1, #25
 801d368:	bf44      	itt	mi
 801d36a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d36e:	b21b      	sxthmi	r3, r3
 801d370:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d374:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801d378:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d37c:	443b      	add	r3, r7
 801d37e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d382:	4433      	add	r3, r6
 801d384:	b29b      	uxth	r3, r3
 801d386:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d38a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d38e:	10db      	asrs	r3, r3, #3
 801d390:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d394:	4313      	orrs	r3, r2
 801d396:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801d39a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d39e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801d3a2:	1a9b      	subs	r3, r3, r2
 801d3a4:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801d3a8:	e76e      	b.n	801d288 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801d3aa:	f023 0204 	bic.w	r2, r3, #4
 801d3ae:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801d3b2:	428a      	cmp	r2, r1
 801d3b4:	d003      	beq.n	801d3be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801d3b6:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801d3ba:	4293      	cmp	r3, r2
 801d3bc:	d120      	bne.n	801d400 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801d3be:	3b01      	subs	r3, #1
 801d3c0:	4662      	mov	r2, ip
 801d3c2:	4629      	mov	r1, r5
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	b29b      	uxth	r3, r3
 801d3c8:	f7ff ff47 	bl	801d25a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d3cc:	7b41      	ldrb	r1, [r0, #13]
 801d3ce:	00cb      	lsls	r3, r1, #3
 801d3d0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d3d4:	7a03      	ldrb	r3, [r0, #8]
 801d3d6:	0648      	lsls	r0, r1, #25
 801d3d8:	ea43 0302 	orr.w	r3, r3, r2
 801d3dc:	bf44      	itt	mi
 801d3de:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d3e2:	b21b      	sxthmi	r3, r3
 801d3e4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d3e8:	7b6b      	ldrb	r3, [r5, #13]
 801d3ea:	7aaa      	ldrb	r2, [r5, #10]
 801d3ec:	005b      	lsls	r3, r3, #1
 801d3ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d3f2:	4313      	orrs	r3, r2
 801d3f4:	115a      	asrs	r2, r3, #5
 801d3f6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d3fa:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d3fe:	e032      	b.n	801d466 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801d400:	00c2      	lsls	r2, r0, #3
 801d402:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801d406:	7a2a      	ldrb	r2, [r5, #8]
 801d408:	430a      	orrs	r2, r1
 801d40a:	0641      	lsls	r1, r0, #25
 801d40c:	f640 6109 	movw	r1, #3593	@ 0xe09
 801d410:	bf44      	itt	mi
 801d412:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801d416:	b212      	sxthmi	r2, r2
 801d418:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d41c:	f023 0210 	bic.w	r2, r3, #16
 801d420:	428a      	cmp	r2, r1
 801d422:	d003      	beq.n	801d42c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 801d424:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d428:	4293      	cmp	r3, r2
 801d42a:	d129      	bne.n	801d480 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801d42c:	7b6e      	ldrb	r6, [r5, #13]
 801d42e:	4629      	mov	r1, r5
 801d430:	4620      	mov	r0, r4
 801d432:	0076      	lsls	r6, r6, #1
 801d434:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d438:	7aae      	ldrb	r6, [r5, #10]
 801d43a:	4316      	orrs	r6, r2
 801d43c:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d440:	4293      	cmp	r3, r2
 801d442:	4662      	mov	r2, ip
 801d444:	bf16      	itet	ne
 801d446:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d44a:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801d44e:	b29b      	uxthne	r3, r3
 801d450:	f7ff ff03 	bl	801d25a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d454:	7b43      	ldrb	r3, [r0, #13]
 801d456:	7a82      	ldrb	r2, [r0, #10]
 801d458:	005b      	lsls	r3, r3, #1
 801d45a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d45e:	4313      	orrs	r3, r2
 801d460:	1af6      	subs	r6, r6, r3
 801d462:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801d466:	7b69      	ldrb	r1, [r5, #13]
 801d468:	00cb      	lsls	r3, r1, #3
 801d46a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d46e:	7a2b      	ldrb	r3, [r5, #8]
 801d470:	4313      	orrs	r3, r2
 801d472:	064a      	lsls	r2, r1, #25
 801d474:	bf44      	itt	mi
 801d476:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d47a:	b21b      	sxthmi	r3, r3
 801d47c:	1bdb      	subs	r3, r3, r7
 801d47e:	e746      	b.n	801d30e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d480:	2300      	movs	r3, #0
 801d482:	e7ba      	b.n	801d3fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 801d484:	3fc00079 	.word	0x3fc00079

0801d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d48c:	4604      	mov	r4, r0
 801d48e:	b942      	cbnz	r2, 801d4a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d494:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801d498:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801d49c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d4a0:	e047      	b.n	801d532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d4a2:	7b51      	ldrb	r1, [r2, #13]
 801d4a4:	8893      	ldrh	r3, [r2, #4]
 801d4a6:	010d      	lsls	r5, r1, #4
 801d4a8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801d4ac:	79d5      	ldrb	r5, [r2, #7]
 801d4ae:	4305      	orrs	r5, r0
 801d4b0:	2d04      	cmp	r5, #4
 801d4b2:	bfcc      	ite	gt
 801d4b4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d4b8:	f04f 0e01 	movle.w	lr, #1
 801d4bc:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801d4c0:	f200 80ab 	bhi.w	801d61a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d4c4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801d4c8:	4283      	cmp	r3, r0
 801d4ca:	d216      	bcs.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d4cc:	f240 605b 	movw	r0, #1627	@ 0x65b
 801d4d0:	4283      	cmp	r3, r0
 801d4d2:	d859      	bhi.n	801d588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d4d4:	f240 6057 	movw	r0, #1623	@ 0x657
 801d4d8:	4283      	cmp	r3, r0
 801d4da:	d20e      	bcs.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d4dc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d4e0:	d24a      	bcs.n	801d578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d4e2:	f240 604e 	movw	r0, #1614	@ 0x64e
 801d4e6:	4283      	cmp	r3, r0
 801d4e8:	d207      	bcs.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d4ea:	f240 601a 	movw	r0, #1562	@ 0x61a
 801d4ee:	4283      	cmp	r3, r0
 801d4f0:	d02a      	beq.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d4f2:	d821      	bhi.n	801d538 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d4f4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801d4f8:	d35b      	bcc.n	801d5b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d4fa:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801d4fe:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d502:	f040 80d0 	bne.w	801d6a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d506:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801d50a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d50e:	f040 80ca 	bne.w	801d6a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d512:	00cb      	lsls	r3, r1, #3
 801d514:	0649      	lsls	r1, r1, #25
 801d516:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d51a:	7a13      	ldrb	r3, [r2, #8]
 801d51c:	ea43 0300 	orr.w	r3, r3, r0
 801d520:	bf44      	itt	mi
 801d522:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d526:	b21b      	sxthmi	r3, r3
 801d528:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d52c:	1b5d      	subs	r5, r3, r5
 801d52e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d532:	4610      	mov	r0, r2
 801d534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d538:	f240 604b 	movw	r0, #1611	@ 0x64b
 801d53c:	4283      	cmp	r3, r0
 801d53e:	d338      	bcc.n	801d5b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d540:	f240 604c 	movw	r0, #1612	@ 0x64c
 801d544:	4283      	cmp	r3, r0
 801d546:	d9d8      	bls.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d548:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801d54c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801d550:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d554:	f040 80f3 	bne.w	801d73e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d558:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d55c:	f040 80ef 	bne.w	801d73e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d560:	00cb      	lsls	r3, r1, #3
 801d562:	064e      	lsls	r6, r1, #25
 801d564:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d568:	7a13      	ldrb	r3, [r2, #8]
 801d56a:	ea43 0300 	orr.w	r3, r3, r0
 801d56e:	bf44      	itt	mi
 801d570:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d574:	b21b      	sxthmi	r3, r3
 801d576:	e7d9      	b.n	801d52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d578:	f240 6054 	movw	r0, #1620	@ 0x654
 801d57c:	4283      	cmp	r3, r0
 801d57e:	d8e3      	bhi.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d580:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d584:	d9e0      	bls.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d586:	e7b8      	b.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d588:	f240 6074 	movw	r0, #1652	@ 0x674
 801d58c:	4283      	cmp	r3, r0
 801d58e:	d0b4      	beq.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d590:	d82d      	bhi.n	801d5ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d592:	f240 605e 	movw	r0, #1630	@ 0x65e
 801d596:	4283      	cmp	r3, r0
 801d598:	d804      	bhi.n	801d5a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d59a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801d59e:	4283      	cmp	r3, r0
 801d5a0:	d3d2      	bcc.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d5a2:	e7aa      	b.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d5a4:	f240 605f 	movw	r0, #1631	@ 0x65f
 801d5a8:	4283      	cmp	r3, r0
 801d5aa:	d0cd      	beq.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d5ac:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801d5b0:	d0a3      	beq.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d5b2:	00cb      	lsls	r3, r1, #3
 801d5b4:	0649      	lsls	r1, r1, #25
 801d5b6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d5ba:	7a13      	ldrb	r3, [r2, #8]
 801d5bc:	ea43 0300 	orr.w	r3, r3, r0
 801d5c0:	bf44      	itt	mi
 801d5c2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d5c6:	b21b      	sxthmi	r3, r3
 801d5c8:	1b5d      	subs	r5, r3, r5
 801d5ca:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d5ce:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d5d2:	7b53      	ldrb	r3, [r2, #13]
 801d5d4:	015b      	lsls	r3, r3, #5
 801d5d6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d5da:	7993      	ldrb	r3, [r2, #6]
 801d5dc:	430b      	orrs	r3, r1
 801d5de:	2105      	movs	r1, #5
 801d5e0:	005b      	lsls	r3, r3, #1
 801d5e2:	fb93 f3f1 	sdiv	r3, r3, r1
 801d5e6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d5ea:	440b      	add	r3, r1
 801d5ec:	e756      	b.n	801d49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d5ee:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801d5f2:	4283      	cmp	r3, r0
 801d5f4:	d809      	bhi.n	801d60a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d5f6:	f240 60df 	movw	r0, #1759	@ 0x6df
 801d5fa:	4283      	cmp	r3, r0
 801d5fc:	f4bf af7d 	bcs.w	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d600:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801d604:	2b05      	cmp	r3, #5
 801d606:	d8d4      	bhi.n	801d5b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d608:	e777      	b.n	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d60a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801d60e:	4283      	cmp	r3, r0
 801d610:	d09a      	beq.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d612:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801d616:	4283      	cmp	r3, r0
 801d618:	e7ca      	b.n	801d5b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d61a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801d61e:	d22b      	bcs.n	801d678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d620:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801d624:	4283      	cmp	r3, r0
 801d626:	d28f      	bcs.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d628:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801d62c:	4283      	cmp	r3, r0
 801d62e:	d816      	bhi.n	801d65e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d630:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801d634:	4283      	cmp	r3, r0
 801d636:	f4bf af60 	bcs.w	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d63a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801d63e:	4283      	cmp	r3, r0
 801d640:	d80a      	bhi.n	801d658 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d642:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801d646:	4283      	cmp	r3, r0
 801d648:	f4bf af57 	bcs.w	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d64c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801d650:	4283      	cmp	r3, r0
 801d652:	f43f af79 	beq.w	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d656:	e7ac      	b.n	801d5b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d658:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801d65c:	e7f8      	b.n	801d650 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d65e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801d662:	4283      	cmp	r3, r0
 801d664:	d802      	bhi.n	801d66c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d666:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801d66a:	e798      	b.n	801d59e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d66c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801d670:	4283      	cmp	r3, r0
 801d672:	f47f af42 	bne.w	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d676:	e767      	b.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d678:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801d67c:	4283      	cmp	r3, r0
 801d67e:	f43f af63 	beq.w	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d682:	d802      	bhi.n	801d68a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d684:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801d688:	e7f2      	b.n	801d670 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d68a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801d68e:	4283      	cmp	r3, r0
 801d690:	d805      	bhi.n	801d69e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d692:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801d696:	4283      	cmp	r3, r0
 801d698:	f4ff af2f 	bcc.w	801d4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d69c:	e754      	b.n	801d548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d69e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801d6a2:	4283      	cmp	r3, r0
 801d6a4:	e7af      	b.n	801d606 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d6a6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d6aa:	4617      	mov	r7, r2
 801d6ac:	f102 0808 	add.w	r8, r2, #8
 801d6b0:	4666      	mov	r6, ip
 801d6b2:	6838      	ldr	r0, [r7, #0]
 801d6b4:	3708      	adds	r7, #8
 801d6b6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d6ba:	46e6      	mov	lr, ip
 801d6bc:	4547      	cmp	r7, r8
 801d6be:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d6c2:	46f4      	mov	ip, lr
 801d6c4:	d1f5      	bne.n	801d6b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d6c6:	6838      	ldr	r0, [r7, #0]
 801d6c8:	f8ce 0000 	str.w	r0, [lr]
 801d6cc:	88b9      	ldrh	r1, [r7, #4]
 801d6ce:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d6d2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d6d6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d6da:	d009      	beq.n	801d6f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801d6dc:	7b51      	ldrb	r1, [r2, #13]
 801d6de:	7992      	ldrb	r2, [r2, #6]
 801d6e0:	0149      	lsls	r1, r1, #5
 801d6e2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d6e6:	4311      	orrs	r1, r2
 801d6e8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d6ec:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d6f0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d6f4:	b2ad      	uxth	r5, r5
 801d6f6:	d00d      	beq.n	801d714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801d6f8:	442b      	add	r3, r5
 801d6fa:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d6fe:	b29b      	uxth	r3, r3
 801d700:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d704:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d708:	10db      	asrs	r3, r3, #3
 801d70a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d70e:	4313      	orrs	r3, r2
 801d710:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d714:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d718:	00cb      	lsls	r3, r1, #3
 801d71a:	064f      	lsls	r7, r1, #25
 801d71c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d720:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d724:	ea43 0302 	orr.w	r3, r3, r2
 801d728:	bf44      	itt	mi
 801d72a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d72e:	b21b      	sxthmi	r3, r3
 801d730:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d734:	1b5b      	subs	r3, r3, r5
 801d736:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d73a:	4632      	mov	r2, r6
 801d73c:	e6f9      	b.n	801d532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d73e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d742:	4617      	mov	r7, r2
 801d744:	f102 0908 	add.w	r9, r2, #8
 801d748:	4666      	mov	r6, ip
 801d74a:	6838      	ldr	r0, [r7, #0]
 801d74c:	3708      	adds	r7, #8
 801d74e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d752:	46e0      	mov	r8, ip
 801d754:	454f      	cmp	r7, r9
 801d756:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d75a:	46c4      	mov	ip, r8
 801d75c:	d1f5      	bne.n	801d74a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801d75e:	6838      	ldr	r0, [r7, #0]
 801d760:	f8c8 0000 	str.w	r0, [r8]
 801d764:	88b9      	ldrh	r1, [r7, #4]
 801d766:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d76a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d76e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d772:	d009      	beq.n	801d788 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801d774:	7b51      	ldrb	r1, [r2, #13]
 801d776:	7992      	ldrb	r2, [r2, #6]
 801d778:	0149      	lsls	r1, r1, #5
 801d77a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d77e:	4311      	orrs	r1, r2
 801d780:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d784:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d788:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d78c:	d00e      	beq.n	801d7ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801d78e:	eba3 030e 	sub.w	r3, r3, lr
 801d792:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d796:	b29b      	uxth	r3, r3
 801d798:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d79c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d7a0:	10db      	asrs	r3, r3, #3
 801d7a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d7a6:	4313      	orrs	r3, r2
 801d7a8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d7ac:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d7b0:	00cb      	lsls	r3, r1, #3
 801d7b2:	0648      	lsls	r0, r1, #25
 801d7b4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d7b8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d7bc:	ea43 0302 	orr.w	r3, r3, r2
 801d7c0:	bf44      	itt	mi
 801d7c2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d7c6:	b21b      	sxthmi	r3, r3
 801d7c8:	1b5d      	subs	r5, r3, r5
 801d7ca:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d7ce:	e7b4      	b.n	801d73a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801d7d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7d4:	461e      	mov	r6, r3
 801d7d6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d7d8:	4604      	mov	r4, r0
 801d7da:	4617      	mov	r7, r2
 801d7dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d7e0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d7e4:	f7eb fc00 	bl	8008fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d7e8:	4605      	mov	r5, r0
 801d7ea:	b918      	cbnz	r0, 801d7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d7ec:	6030      	str	r0, [r6, #0]
 801d7ee:	4628      	mov	r0, r5
 801d7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7f4:	683b      	ldr	r3, [r7, #0]
 801d7f6:	4601      	mov	r1, r0
 801d7f8:	4638      	mov	r0, r7
 801d7fa:	68db      	ldr	r3, [r3, #12]
 801d7fc:	4798      	blx	r3
 801d7fe:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d802:	4602      	mov	r2, r0
 801d804:	6030      	str	r0, [r6, #0]
 801d806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d80a:	d213      	bcs.n	801d834 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d80c:	4643      	mov	r3, r8
 801d80e:	4639      	mov	r1, r7
 801d810:	4620      	mov	r0, r4
 801d812:	f7ff fe39 	bl	801d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d816:	6030      	str	r0, [r6, #0]
 801d818:	6833      	ldr	r3, [r6, #0]
 801d81a:	b143      	cbz	r3, 801d82e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d81c:	7b5a      	ldrb	r2, [r3, #13]
 801d81e:	7a9b      	ldrb	r3, [r3, #10]
 801d820:	0052      	lsls	r2, r2, #1
 801d822:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d826:	4313      	orrs	r3, r2
 801d828:	bf0c      	ite	eq
 801d82a:	2301      	moveq	r3, #1
 801d82c:	2300      	movne	r3, #0
 801d82e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d832:	e7dc      	b.n	801d7ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d834:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d838:	b29b      	uxth	r3, r3
 801d83a:	2b7f      	cmp	r3, #127	@ 0x7f
 801d83c:	d804      	bhi.n	801d848 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d83e:	4639      	mov	r1, r7
 801d840:	4620      	mov	r0, r4
 801d842:	f7ff fd15 	bl	801d270 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d846:	e7e6      	b.n	801d816 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d848:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d0e3      	beq.n	801d818 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d850:	f640 1302 	movw	r3, #2306	@ 0x902
 801d854:	429d      	cmp	r5, r3
 801d856:	d1df      	bne.n	801d818 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d858:	4601      	mov	r1, r0
 801d85a:	4620      	mov	r0, r4
 801d85c:	f7ff fcd9 	bl	801d212 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d860:	e7d9      	b.n	801d816 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d862 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d862:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d866:	461e      	mov	r6, r3
 801d868:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d86a:	4604      	mov	r4, r0
 801d86c:	4617      	mov	r7, r2
 801d86e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d872:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d876:	f7eb fbb7 	bl	8008fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d87a:	4605      	mov	r5, r0
 801d87c:	b918      	cbnz	r0, 801d886 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801d87e:	6030      	str	r0, [r6, #0]
 801d880:	4628      	mov	r0, r5
 801d882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d886:	683b      	ldr	r3, [r7, #0]
 801d888:	4601      	mov	r1, r0
 801d88a:	4638      	mov	r0, r7
 801d88c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d890:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d894:	47c8      	blx	r9
 801d896:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d89a:	4602      	mov	r2, r0
 801d89c:	6030      	str	r0, [r6, #0]
 801d89e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d8a2:	d213      	bcs.n	801d8cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801d8a4:	4643      	mov	r3, r8
 801d8a6:	4639      	mov	r1, r7
 801d8a8:	4620      	mov	r0, r4
 801d8aa:	f7ff fded 	bl	801d488 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d8ae:	6030      	str	r0, [r6, #0]
 801d8b0:	6833      	ldr	r3, [r6, #0]
 801d8b2:	b143      	cbz	r3, 801d8c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801d8b4:	7b5a      	ldrb	r2, [r3, #13]
 801d8b6:	7a9b      	ldrb	r3, [r3, #10]
 801d8b8:	0052      	lsls	r2, r2, #1
 801d8ba:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d8be:	4313      	orrs	r3, r2
 801d8c0:	bf0c      	ite	eq
 801d8c2:	2301      	moveq	r3, #1
 801d8c4:	2300      	movne	r3, #0
 801d8c6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d8ca:	e7d9      	b.n	801d880 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801d8cc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d8d0:	b29b      	uxth	r3, r3
 801d8d2:	2b7f      	cmp	r3, #127	@ 0x7f
 801d8d4:	d804      	bhi.n	801d8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801d8d6:	4639      	mov	r1, r7
 801d8d8:	4620      	mov	r0, r4
 801d8da:	f7ff fcc9 	bl	801d270 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d8de:	e7e6      	b.n	801d8ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801d8e0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d0e3      	beq.n	801d8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d8e8:	f640 1302 	movw	r3, #2306	@ 0x902
 801d8ec:	429d      	cmp	r5, r3
 801d8ee:	d1df      	bne.n	801d8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d8f0:	4601      	mov	r1, r0
 801d8f2:	4620      	mov	r0, r4
 801d8f4:	f7ff fc8d 	bl	801d212 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d8f8:	e7d9      	b.n	801d8ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801d8fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d8fa:	b510      	push	{r4, lr}
 801d8fc:	4604      	mov	r4, r0
 801d8fe:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801d902:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d904:	b1e1      	cbz	r1, 801d940 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d906:	2b0a      	cmp	r3, #10
 801d908:	d02d      	beq.n	801d966 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d90a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801d90c:	3901      	subs	r1, #1
 801d90e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d912:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801d914:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801d918:	1c51      	adds	r1, r2, #1
 801d91a:	b289      	uxth	r1, r1
 801d91c:	2901      	cmp	r1, #1
 801d91e:	bf8a      	itet	hi
 801d920:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d924:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801d926:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801d928:	1c5a      	adds	r2, r3, #1
 801d92a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d92c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d92e:	4413      	add	r3, r2
 801d930:	b29b      	uxth	r3, r3
 801d932:	2b09      	cmp	r3, #9
 801d934:	bf88      	it	hi
 801d936:	3b0a      	subhi	r3, #10
 801d938:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d93c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d93e:	e7de      	b.n	801d8fe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d940:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d942:	2b0a      	cmp	r3, #10
 801d944:	d00f      	beq.n	801d966 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d946:	4620      	mov	r0, r4
 801d948:	f7ff fc11 	bl	801d16e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d94c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d94e:	1c5a      	adds	r2, r3, #1
 801d950:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d952:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d954:	4413      	add	r3, r2
 801d956:	b29b      	uxth	r3, r3
 801d958:	2b09      	cmp	r3, #9
 801d95a:	bf88      	it	hi
 801d95c:	3b0a      	subhi	r3, #10
 801d95e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d962:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d964:	e7ec      	b.n	801d940 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d966:	bd10      	pop	{r4, pc}

0801d968 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d968:	b538      	push	{r3, r4, r5, lr}
 801d96a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d96c:	4604      	mov	r4, r0
 801d96e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d972:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801d974:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801d976:	3a01      	subs	r2, #1
 801d978:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d97a:	1c5a      	adds	r2, r3, #1
 801d97c:	b292      	uxth	r2, r2
 801d97e:	2a09      	cmp	r2, #9
 801d980:	bf8a      	itet	hi
 801d982:	3b09      	subhi	r3, #9
 801d984:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801d986:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801d988:	f7ff ffb7 	bl	801d8fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d98c:	8c23      	ldrh	r3, [r4, #32]
 801d98e:	2b01      	cmp	r3, #1
 801d990:	bf9c      	itt	ls
 801d992:	3301      	addls	r3, #1
 801d994:	8423      	strhls	r3, [r4, #32]
 801d996:	8be3      	ldrh	r3, [r4, #30]
 801d998:	b90b      	cbnz	r3, 801d99e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d99a:	2302      	movs	r3, #2
 801d99c:	83e3      	strh	r3, [r4, #30]
 801d99e:	8be3      	ldrh	r3, [r4, #30]
 801d9a0:	4628      	mov	r0, r5
 801d9a2:	3b01      	subs	r3, #1
 801d9a4:	b29b      	uxth	r3, r3
 801d9a6:	83e3      	strh	r3, [r4, #30]
 801d9a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d9ac:	8365      	strh	r5, [r4, #26]
 801d9ae:	bd38      	pop	{r3, r4, r5, pc}

0801d9b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d9b0:	428a      	cmp	r2, r1
 801d9b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9b6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801d9b8:	d932      	bls.n	801da20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801d9ba:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801d9bc:	1a54      	subs	r4, r2, r1
 801d9be:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801d9c2:	19ee      	adds	r6, r5, r7
 801d9c4:	fa1f fe84 	uxth.w	lr, r4
 801d9c8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801d9cc:	3e01      	subs	r6, #1
 801d9ce:	b2b4      	uxth	r4, r6
 801d9d0:	eba4 090e 	sub.w	r9, r4, lr
 801d9d4:	fa1f f989 	uxth.w	r9, r9
 801d9d8:	2c09      	cmp	r4, #9
 801d9da:	4626      	mov	r6, r4
 801d9dc:	bf88      	it	hi
 801d9de:	f1a4 060a 	subhi.w	r6, r4, #10
 801d9e2:	f1bc 0f00 	cmp.w	ip, #0
 801d9e6:	f104 34ff 	add.w	r4, r4, #4294967295
 801d9ea:	bf08      	it	eq
 801d9ec:	f04f 0c02 	moveq.w	ip, #2
 801d9f0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d9f4:	b2a4      	uxth	r4, r4
 801d9f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d9fa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801d9fe:	454c      	cmp	r4, r9
 801da00:	fa1f fc8c 	uxth.w	ip, ip
 801da04:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801da08:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801da0c:	d1e4      	bne.n	801d9d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801da0e:	eba5 050e 	sub.w	r5, r5, lr
 801da12:	eb0e 0408 	add.w	r4, lr, r8
 801da16:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801da1a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801da1c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801da20:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801da22:	250a      	movs	r5, #10
 801da24:	1a64      	subs	r4, r4, r1
 801da26:	4439      	add	r1, r7
 801da28:	b289      	uxth	r1, r1
 801da2a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801da2c:	2909      	cmp	r1, #9
 801da2e:	bf88      	it	hi
 801da30:	390a      	subhi	r1, #10
 801da32:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801da34:	b18a      	cbz	r2, 801da5a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801da36:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801da38:	3a01      	subs	r2, #1
 801da3a:	3101      	adds	r1, #1
 801da3c:	b292      	uxth	r2, r2
 801da3e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801da42:	8701      	strh	r1, [r0, #56]	@ 0x38
 801da44:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801da46:	b901      	cbnz	r1, 801da4a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801da48:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801da4a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801da4c:	3901      	subs	r1, #1
 801da4e:	b289      	uxth	r1, r1
 801da50:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801da52:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801da56:	844c      	strh	r4, [r1, #34]	@ 0x22
 801da58:	e7ec      	b.n	801da34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801da5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da5e:	f7ff bf4c 	b.w	801d8fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801da62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801da62:	b570      	push	{r4, r5, r6, lr}
 801da64:	2500      	movs	r5, #0
 801da66:	4295      	cmp	r5, r2
 801da68:	d011      	beq.n	801da8e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801da6a:	8bc4      	ldrh	r4, [r0, #30]
 801da6c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801da70:	4414      	add	r4, r2
 801da72:	3c01      	subs	r4, #1
 801da74:	1b64      	subs	r4, r4, r5
 801da76:	b2a4      	uxth	r4, r4
 801da78:	2c01      	cmp	r4, #1
 801da7a:	bf88      	it	hi
 801da7c:	3c02      	subhi	r4, #2
 801da7e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801da82:	8b64      	ldrh	r4, [r4, #26]
 801da84:	42b4      	cmp	r4, r6
 801da86:	d117      	bne.n	801dab8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801da88:	3501      	adds	r5, #1
 801da8a:	b2ad      	uxth	r5, r5
 801da8c:	e7eb      	b.n	801da66 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801da8e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801da92:	2400      	movs	r4, #0
 801da94:	4413      	add	r3, r2
 801da96:	b2a2      	uxth	r2, r4
 801da98:	429a      	cmp	r2, r3
 801da9a:	da0f      	bge.n	801dabc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801da9c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801da9e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801daa2:	3401      	adds	r4, #1
 801daa4:	4432      	add	r2, r6
 801daa6:	b292      	uxth	r2, r2
 801daa8:	2a09      	cmp	r2, #9
 801daaa:	bf88      	it	hi
 801daac:	3a0a      	subhi	r2, #10
 801daae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801dab2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801dab4:	42aa      	cmp	r2, r5
 801dab6:	d0ee      	beq.n	801da96 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801dab8:	2000      	movs	r0, #0
 801daba:	bd70      	pop	{r4, r5, r6, pc}
 801dabc:	2001      	movs	r0, #1
 801dabe:	e7fc      	b.n	801daba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801dac0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801dac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac4:	4605      	mov	r5, r0
 801dac6:	4616      	mov	r6, r2
 801dac8:	1c8c      	adds	r4, r1, #2
 801daca:	8809      	ldrh	r1, [r1, #0]
 801dacc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801dad0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801dad4:	42b3      	cmp	r3, r6
 801dad6:	d124      	bne.n	801db22 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801dad8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801dadc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801dae0:	f001 070f 	and.w	r7, r1, #15
 801dae4:	4652      	mov	r2, sl
 801dae6:	f8cd 8000 	str.w	r8, [sp]
 801daea:	464b      	mov	r3, r9
 801daec:	4621      	mov	r1, r4
 801daee:	4628      	mov	r0, r5
 801daf0:	f7ff ffb7 	bl	801da62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801daf4:	4683      	mov	fp, r0
 801daf6:	b168      	cbz	r0, 801db14 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801daf8:	eb0a 0109 	add.w	r1, sl, r9
 801dafc:	463a      	mov	r2, r7
 801dafe:	4628      	mov	r0, r5
 801db00:	4441      	add	r1, r8
 801db02:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801db06:	4649      	mov	r1, r9
 801db08:	f7ff ff52 	bl	801d9b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801db0c:	4658      	mov	r0, fp
 801db0e:	b003      	add	sp, #12
 801db10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db14:	eb07 010a 	add.w	r1, r7, sl
 801db18:	4449      	add	r1, r9
 801db1a:	4441      	add	r1, r8
 801db1c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801db20:	e7d2      	b.n	801dac8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801db22:	f04f 0b00 	mov.w	fp, #0
 801db26:	e7f1      	b.n	801db0c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801db28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801db28:	b570      	push	{r4, r5, r6, lr}
 801db2a:	8810      	ldrh	r0, [r2, #0]
 801db2c:	4298      	cmp	r0, r3
 801db2e:	d817      	bhi.n	801db60 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801db30:	1e48      	subs	r0, r1, #1
 801db32:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801db36:	4298      	cmp	r0, r3
 801db38:	d312      	bcc.n	801db60 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801db3a:	2400      	movs	r4, #0
 801db3c:	428c      	cmp	r4, r1
 801db3e:	d20f      	bcs.n	801db60 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801db40:	1860      	adds	r0, r4, r1
 801db42:	1040      	asrs	r0, r0, #1
 801db44:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801db48:	0085      	lsls	r5, r0, #2
 801db4a:	42b3      	cmp	r3, r6
 801db4c:	d902      	bls.n	801db54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801db4e:	3001      	adds	r0, #1
 801db50:	b284      	uxth	r4, r0
 801db52:	e7f3      	b.n	801db3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801db54:	d201      	bcs.n	801db5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801db56:	b281      	uxth	r1, r0
 801db58:	e7f0      	b.n	801db3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801db5a:	442a      	add	r2, r5
 801db5c:	8850      	ldrh	r0, [r2, #2]
 801db5e:	bd70      	pop	{r4, r5, r6, pc}
 801db60:	2000      	movs	r0, #0
 801db62:	e7fc      	b.n	801db5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801db64 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801db64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db68:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801db6a:	4604      	mov	r4, r0
 801db6c:	260b      	movs	r6, #11
 801db6e:	886f      	ldrh	r7, [r5, #2]
 801db70:	087f      	lsrs	r7, r7, #1
 801db72:	3e01      	subs	r6, #1
 801db74:	d013      	beq.n	801db9e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801db76:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801db78:	462a      	mov	r2, r5
 801db7a:	4639      	mov	r1, r7
 801db7c:	4620      	mov	r0, r4
 801db7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801db82:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801db86:	4643      	mov	r3, r8
 801db88:	f7ff ffce 	bl	801db28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801db8c:	b138      	cbz	r0, 801db9e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801db8e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801db92:	4642      	mov	r2, r8
 801db94:	4620      	mov	r0, r4
 801db96:	f7ff ff93 	bl	801dac0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801db9a:	2800      	cmp	r0, #0
 801db9c:	d1e9      	bne.n	801db72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801db9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801dba4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801dba4:	b570      	push	{r4, r5, r6, lr}
 801dba6:	694a      	ldr	r2, [r1, #20]
 801dba8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801dbaa:	684b      	ldr	r3, [r1, #4]
 801dbac:	1b54      	subs	r4, r2, r5
 801dbae:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801dbb0:	f000 8106 	beq.w	801ddc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801dbb4:	1b9b      	subs	r3, r3, r6
 801dbb6:	d003      	beq.n	801dbc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801dbb8:	4363      	muls	r3, r4
 801dbba:	2210      	movs	r2, #16
 801dbbc:	fb93 f3f2 	sdiv	r3, r3, r2
 801dbc0:	680c      	ldr	r4, [r1, #0]
 801dbc2:	698a      	ldr	r2, [r1, #24]
 801dbc4:	1b65      	subs	r5, r4, r5
 801dbc6:	f000 80fd 	beq.w	801ddc4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801dbca:	1b92      	subs	r2, r2, r6
 801dbcc:	d003      	beq.n	801dbd6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801dbce:	436a      	muls	r2, r5
 801dbd0:	2410      	movs	r4, #16
 801dbd2:	fb92 f2f4 	sdiv	r2, r2, r4
 801dbd6:	1a9b      	subs	r3, r3, r2
 801dbd8:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801de00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801dbdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dbe0:	460a      	mov	r2, r1
 801dbe2:	ee07 3a90 	vmov	s15, r3
 801dbe6:	f100 040c 	add.w	r4, r0, #12
 801dbea:	4603      	mov	r3, r0
 801dbec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dbf0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dbf4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801dbf8:	eeb1 6a43 	vneg.f32	s12, s6
 801dbfc:	edd2 7a02 	vldr	s15, [r2, #8]
 801dc00:	3214      	adds	r2, #20
 801dc02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801dc06:	ece3 6a01 	vstmia	r3!, {s13}
 801dc0a:	429c      	cmp	r4, r3
 801dc0c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801dc10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dc14:	edc3 7a02 	vstr	s15, [r3, #8]
 801dc18:	ed52 7a01 	vldr	s15, [r2, #-4]
 801dc1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dc20:	edc3 7a05 	vstr	s15, [r3, #20]
 801dc24:	d1ea      	bne.n	801dbfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801dc26:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dc28:	698b      	ldr	r3, [r1, #24]
 801dc2a:	edd0 4a02 	vldr	s9, [r0, #8]
 801dc2e:	1a9b      	subs	r3, r3, r2
 801dc30:	edd0 3a00 	vldr	s7, [r0]
 801dc34:	edd0 6a01 	vldr	s13, [r0, #4]
 801dc38:	ee07 3a90 	vmov	s15, r3
 801dc3c:	684b      	ldr	r3, [r1, #4]
 801dc3e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801dc42:	ed90 5a05 	vldr	s10, [r0, #20]
 801dc46:	1a9b      	subs	r3, r3, r2
 801dc48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc4c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801dc50:	ed90 2a03 	vldr	s4, [r0, #12]
 801dc54:	ee07 3a10 	vmov	s14, r3
 801dc58:	edd0 5a04 	vldr	s11, [r0, #16]
 801dc5c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dc60:	ed90 1a07 	vldr	s2, [r0, #28]
 801dc64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc68:	edd0 2a06 	vldr	s5, [r0, #24]
 801dc6c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801dc70:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801dc74:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc78:	ee32 5a45 	vsub.f32	s10, s4, s10
 801dc7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dc80:	ee67 7a83 	vmul.f32	s15, s15, s6
 801dc84:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801dc88:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801dc8a:	694a      	ldr	r2, [r1, #20]
 801dc8c:	1b13      	subs	r3, r2, r4
 801dc8e:	ee07 3a10 	vmov	s14, r3
 801dc92:	680b      	ldr	r3, [r1, #0]
 801dc94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc98:	1b1b      	subs	r3, r3, r4
 801dc9a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc9e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801dca2:	ee07 3a10 	vmov	s14, r3
 801dca6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcaa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dcae:	eee6 4a87 	vfma.f32	s9, s13, s14
 801dcb2:	ee64 4a86 	vmul.f32	s9, s9, s12
 801dcb6:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801dcba:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dcbc:	698b      	ldr	r3, [r1, #24]
 801dcbe:	1a9b      	subs	r3, r3, r2
 801dcc0:	ee06 3a90 	vmov	s13, r3
 801dcc4:	684b      	ldr	r3, [r1, #4]
 801dcc6:	1a9b      	subs	r3, r3, r2
 801dcc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dccc:	ee07 3a10 	vmov	s14, r3
 801dcd0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801dcd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcd8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801dcdc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dce0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801dce4:	ee66 6a83 	vmul.f32	s13, s13, s6
 801dce8:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801dcec:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801dcee:	694a      	ldr	r2, [r1, #20]
 801dcf0:	1b13      	subs	r3, r2, r4
 801dcf2:	ee07 3a10 	vmov	s14, r3
 801dcf6:	680b      	ldr	r3, [r1, #0]
 801dcf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcfc:	1b1b      	subs	r3, r3, r4
 801dcfe:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd02:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801dd06:	ee07 3a10 	vmov	s14, r3
 801dd0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd0e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd12:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dd16:	edd0 5a08 	vldr	s11, [r0, #32]
 801dd1a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801dd1e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801dd22:	ee25 5a06 	vmul.f32	s10, s10, s12
 801dd26:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801dd2a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801dd2c:	698b      	ldr	r3, [r1, #24]
 801dd2e:	1a9b      	subs	r3, r3, r2
 801dd30:	ee07 3a10 	vmov	s14, r3
 801dd34:	684b      	ldr	r3, [r1, #4]
 801dd36:	1a9b      	subs	r3, r3, r2
 801dd38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd3c:	ee01 3a90 	vmov	s3, r3
 801dd40:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd44:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dd48:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801dd4c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801dd50:	eea1 7a21 	vfma.f32	s14, s2, s3
 801dd54:	ee27 7a03 	vmul.f32	s14, s14, s6
 801dd58:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801dd5c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801dd5e:	694a      	ldr	r2, [r1, #20]
 801dd60:	1b13      	subs	r3, r2, r4
 801dd62:	ee03 3a10 	vmov	s6, r3
 801dd66:	680b      	ldr	r3, [r1, #0]
 801dd68:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dd6c:	1b1b      	subs	r3, r3, r4
 801dd6e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801dd72:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801dd76:	ee03 3a10 	vmov	s6, r3
 801dd7a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dd7e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801dd82:	eee1 5a04 	vfma.f32	s11, s2, s8
 801dd86:	ee25 6a86 	vmul.f32	s12, s11, s12
 801dd8a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801dd8e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801dd92:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801dd96:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801dd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd9e:	dd13      	ble.n	801ddc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801dda0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801dda4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801dda8:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801ddaa:	eee3 7a87 	vfma.f32	s15, s7, s14
 801ddae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ddb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddb6:	dd15      	ble.n	801dde4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801ddb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ddbc:	6403      	str	r3, [r0, #64]	@ 0x40
 801ddbe:	bd70      	pop	{r4, r5, r6, pc}
 801ddc0:	4623      	mov	r3, r4
 801ddc2:	e6fd      	b.n	801dbc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ddc4:	462a      	mov	r2, r5
 801ddc6:	e706      	b.n	801dbd6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ddc8:	d502      	bpl.n	801ddd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ddca:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801ddce:	e7e9      	b.n	801dda4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801ddd0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801ddd4:	eea3 2a85 	vfma.f32	s4, s7, s10
 801ddd8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801dddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dde0:	dade      	bge.n	801dda0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801dde2:	e7f2      	b.n	801ddca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801dde4:	d502      	bpl.n	801ddec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801dde6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801ddea:	e7e7      	b.n	801ddbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ddec:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ddf0:	eee3 4a86 	vfma.f32	s9, s7, s12
 801ddf4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801ddf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddfc:	dadc      	bge.n	801ddb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801ddfe:	e7f2      	b.n	801dde6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801de00:	3d800000 	.word	0x3d800000

0801de04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801de04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de08:	2714      	movs	r7, #20
 801de0a:	435f      	muls	r7, r3
 801de0c:	eb02 0c07 	add.w	ip, r2, r7
 801de10:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801de14:	f115 0e0f 	adds.w	lr, r5, #15
 801de18:	f100 80a2 	bmi.w	801df60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801de1c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801de20:	9c08      	ldr	r4, [sp, #32]
 801de22:	2614      	movs	r6, #20
 801de24:	f8c0 e014 	str.w	lr, [r0, #20]
 801de28:	4366      	muls	r6, r4
 801de2a:	eb02 0806 	add.w	r8, r2, r6
 801de2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801de32:	f115 040f 	adds.w	r4, r5, #15
 801de36:	f100 809f 	bmi.w	801df78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801de3a:	1124      	asrs	r4, r4, #4
 801de3c:	eba4 040e 	sub.w	r4, r4, lr
 801de40:	6184      	str	r4, [r0, #24]
 801de42:	2c00      	cmp	r4, #0
 801de44:	f000 808a 	beq.w	801df5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801de48:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801de4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801de50:	5995      	ldr	r5, [r2, r6]
 801de52:	eba4 0809 	sub.w	r8, r4, r9
 801de56:	59d4      	ldr	r4, [r2, r7]
 801de58:	eba5 0a04 	sub.w	sl, r5, r4
 801de5c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801de60:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801de64:	fb0e fe05 	mul.w	lr, lr, r5
 801de68:	fb0a ee19 	mls	lr, sl, r9, lr
 801de6c:	fb08 e404 	mla	r4, r8, r4, lr
 801de70:	3c01      	subs	r4, #1
 801de72:	19a4      	adds	r4, r4, r6
 801de74:	f100 808c 	bmi.w	801df90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801de78:	fb94 fef6 	sdiv	lr, r4, r6
 801de7c:	fb06 441e 	mls	r4, r6, lr, r4
 801de80:	f8c0 e000 	str.w	lr, [r0]
 801de84:	6104      	str	r4, [r0, #16]
 801de86:	2d00      	cmp	r5, #0
 801de88:	f2c0 8095 	blt.w	801dfb6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801de8c:	fb95 f4f6 	sdiv	r4, r5, r6
 801de90:	fb06 5514 	mls	r5, r6, r4, r5
 801de94:	6044      	str	r4, [r0, #4]
 801de96:	6085      	str	r5, [r0, #8]
 801de98:	60c6      	str	r6, [r0, #12]
 801de9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801de9e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801dea2:	6945      	ldr	r5, [r0, #20]
 801dea4:	59d2      	ldr	r2, [r2, r7]
 801dea6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801deaa:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801dfd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801deae:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801deb2:	ee07 4a10 	vmov	s14, r4
 801deb6:	6804      	ldr	r4, [r0, #0]
 801deb8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801debc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dec0:	ee07 2a90 	vmov	s15, r2
 801dec4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801decc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ded0:	edd3 6a00 	vldr	s13, [r3]
 801ded4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ded8:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801dedc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dee0:	edc0 6a07 	vstr	s13, [r0, #28]
 801dee4:	edd0 6a01 	vldr	s13, [r0, #4]
 801dee8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801deec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801def0:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801def4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801def8:	ed80 6a08 	vstr	s12, [r0, #32]
 801defc:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801defe:	6242      	str	r2, [r0, #36]	@ 0x24
 801df00:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801df04:	ed93 6a03 	vldr	s12, [r3, #12]
 801df08:	eea5 6a87 	vfma.f32	s12, s11, s14
 801df0c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801df10:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801df14:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801df18:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801df1c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801df20:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801df24:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801df28:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801df2a:	6302      	str	r2, [r0, #48]	@ 0x30
 801df2c:	ed93 6a06 	vldr	s12, [r3, #24]
 801df30:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801df34:	eea5 6a87 	vfma.f32	s12, s11, s14
 801df38:	eeb0 7a46 	vmov.f32	s14, s12
 801df3c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801df40:	eea6 7a27 	vfma.f32	s14, s12, s15
 801df44:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801df48:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801df4c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801df50:	eee6 7a87 	vfma.f32	s15, s13, s14
 801df54:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801df58:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801df5a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801df5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df60:	2410      	movs	r4, #16
 801df62:	f1c5 0501 	rsb	r5, r5, #1
 801df66:	fb9e fef4 	sdiv	lr, lr, r4
 801df6a:	f015 050f 	ands.w	r5, r5, #15
 801df6e:	bf18      	it	ne
 801df70:	2501      	movne	r5, #1
 801df72:	ebae 0e05 	sub.w	lr, lr, r5
 801df76:	e753      	b.n	801de20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801df78:	f04f 0910 	mov.w	r9, #16
 801df7c:	f1c5 0501 	rsb	r5, r5, #1
 801df80:	fb94 f4f9 	sdiv	r4, r4, r9
 801df84:	f015 050f 	ands.w	r5, r5, #15
 801df88:	bf18      	it	ne
 801df8a:	2501      	movne	r5, #1
 801df8c:	1b64      	subs	r4, r4, r5
 801df8e:	e755      	b.n	801de3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801df90:	4264      	negs	r4, r4
 801df92:	fb94 fef6 	sdiv	lr, r4, r6
 801df96:	f1ce 0800 	rsb	r8, lr, #0
 801df9a:	fb06 441e 	mls	r4, r6, lr, r4
 801df9e:	f8c0 8000 	str.w	r8, [r0]
 801dfa2:	6104      	str	r4, [r0, #16]
 801dfa4:	2c00      	cmp	r4, #0
 801dfa6:	f43f af6e 	beq.w	801de86 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801dfaa:	ea6f 0e0e 	mvn.w	lr, lr
 801dfae:	1b34      	subs	r4, r6, r4
 801dfb0:	f8c0 e000 	str.w	lr, [r0]
 801dfb4:	e766      	b.n	801de84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801dfb6:	426d      	negs	r5, r5
 801dfb8:	fb95 f4f6 	sdiv	r4, r5, r6
 801dfbc:	f1c4 0e00 	rsb	lr, r4, #0
 801dfc0:	fb06 5514 	mls	r5, r6, r4, r5
 801dfc4:	f8c0 e004 	str.w	lr, [r0, #4]
 801dfc8:	6085      	str	r5, [r0, #8]
 801dfca:	2d00      	cmp	r5, #0
 801dfcc:	f43f af64 	beq.w	801de98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801dfd0:	43e4      	mvns	r4, r4
 801dfd2:	1b75      	subs	r5, r6, r5
 801dfd4:	6044      	str	r4, [r0, #4]
 801dfd6:	e75e      	b.n	801de96 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801dfd8:	3d800000 	.word	0x3d800000

0801dfdc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801dfdc:	4b01      	ldr	r3, [pc, #4]	@ (801dfe4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801dfde:	6018      	str	r0, [r3, #0]
 801dfe0:	4770      	bx	lr
 801dfe2:	bf00      	nop
 801dfe4:	24062220 	.word	0x24062220

0801dfe8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801dfe8:	4b06      	ldr	r3, [pc, #24]	@ (801e004 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801dfea:	881a      	ldrh	r2, [r3, #0]
 801dfec:	4282      	cmp	r2, r0
 801dfee:	d807      	bhi.n	801e000 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801dff0:	4b05      	ldr	r3, [pc, #20]	@ (801e008 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801dff2:	881b      	ldrh	r3, [r3, #0]
 801dff4:	4413      	add	r3, r2
 801dff6:	4298      	cmp	r0, r3
 801dff8:	bfac      	ite	ge
 801dffa:	2000      	movge	r0, #0
 801dffc:	2001      	movlt	r0, #1
 801dffe:	4770      	bx	lr
 801e000:	2000      	movs	r0, #0
 801e002:	4770      	bx	lr
 801e004:	24062240 	.word	0x24062240
 801e008:	24062244 	.word	0x24062244

0801e00c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e00c:	b508      	push	{r3, lr}
 801e00e:	4601      	mov	r1, r0
 801e010:	f7ff ffea 	bl	801dfe8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e014:	b118      	cbz	r0, 801e01e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e016:	4b02      	ldr	r3, [pc, #8]	@ (801e020 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e018:	681b      	ldr	r3, [r3, #0]
 801e01a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e01e:	bd08      	pop	{r3, pc}
 801e020:	24062224 	.word	0x24062224

0801e024 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801e024:	b538      	push	{r3, r4, r5, lr}
 801e026:	4604      	mov	r4, r0
 801e028:	f7ff ffde 	bl	801dfe8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e02c:	b1d8      	cbz	r0, 801e066 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801e02e:	4b0f      	ldr	r3, [pc, #60]	@ (801e06c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801e030:	881b      	ldrh	r3, [r3, #0]
 801e032:	1ae4      	subs	r4, r4, r3
 801e034:	230e      	movs	r3, #14
 801e036:	4363      	muls	r3, r4
 801e038:	4c0d      	ldr	r4, [pc, #52]	@ (801e070 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801e03a:	6825      	ldr	r5, [r4, #0]
 801e03c:	18ea      	adds	r2, r5, r3
 801e03e:	7b12      	ldrb	r2, [r2, #12]
 801e040:	f012 0220 	ands.w	r2, r2, #32
 801e044:	d010      	beq.n	801e068 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801e046:	f9b1 2000 	ldrsh.w	r2, [r1]
 801e04a:	52ea      	strh	r2, [r5, r3]
 801e04c:	6822      	ldr	r2, [r4, #0]
 801e04e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801e052:	441a      	add	r2, r3
 801e054:	8055      	strh	r5, [r2, #2]
 801e056:	6822      	ldr	r2, [r4, #0]
 801e058:	4413      	add	r3, r2
 801e05a:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801e05e:	809a      	strh	r2, [r3, #4]
 801e060:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801e064:	80da      	strh	r2, [r3, #6]
 801e066:	bd38      	pop	{r3, r4, r5, pc}
 801e068:	4610      	mov	r0, r2
 801e06a:	e7fc      	b.n	801e066 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801e06c:	24062240 	.word	0x24062240
 801e070:	24062228 	.word	0x24062228

0801e074 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801e074:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e078:	4606      	mov	r6, r0
 801e07a:	460c      	mov	r4, r1
 801e07c:	f7ff ffb4 	bl	801dfe8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e080:	b918      	cbnz	r0, 801e08a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801e082:	2000      	movs	r0, #0
 801e084:	b002      	add	sp, #8
 801e086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e08a:	4608      	mov	r0, r1
 801e08c:	f7f6 fa59 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e090:	2800      	cmp	r0, #0
 801e092:	d1f6      	bne.n	801e082 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e094:	4b3f      	ldr	r3, [pc, #252]	@ (801e194 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801e096:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801e198 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801e09a:	881d      	ldrh	r5, [r3, #0]
 801e09c:	f8d9 a000 	ldr.w	sl, [r9]
 801e0a0:	46c8      	mov	r8, r9
 801e0a2:	1b73      	subs	r3, r6, r5
 801e0a4:	250e      	movs	r5, #14
 801e0a6:	435d      	muls	r5, r3
 801e0a8:	eb0a 0705 	add.w	r7, sl, r5
 801e0ac:	7b3b      	ldrb	r3, [r7, #12]
 801e0ae:	f013 0f20 	tst.w	r3, #32
 801e0b2:	d0e6      	beq.n	801e082 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e0b4:	4621      	mov	r1, r4
 801e0b6:	4638      	mov	r0, r7
 801e0b8:	f7fc ff00 	bl	801aebc <_ZNK8touchgfx4Rect8includesERKS0_>
 801e0bc:	2800      	cmp	r0, #0
 801e0be:	d1e1      	bne.n	801e084 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e0c0:	4639      	mov	r1, r7
 801e0c2:	4620      	mov	r0, r4
 801e0c4:	f7fc fefa 	bl	801aebc <_ZNK8touchgfx4Rect8includesERKS0_>
 801e0c8:	b108      	cbz	r0, 801e0ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801e0ca:	4621      	mov	r1, r4
 801e0cc:	e020      	b.n	801e110 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801e0ce:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e0d2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801e0d6:	429a      	cmp	r2, r3
 801e0d8:	d11e      	bne.n	801e118 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e0da:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e0de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801e0e2:	429a      	cmp	r2, r3
 801e0e4:	d118      	bne.n	801e118 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e0e6:	6820      	ldr	r0, [r4, #0]
 801e0e8:	466b      	mov	r3, sp
 801e0ea:	6861      	ldr	r1, [r4, #4]
 801e0ec:	c303      	stmia	r3!, {r0, r1}
 801e0ee:	4639      	mov	r1, r7
 801e0f0:	4668      	mov	r0, sp
 801e0f2:	f7fc ff09 	bl	801af08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e0f6:	f8d9 3000 	ldr.w	r3, [r9]
 801e0fa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e0fe:	442b      	add	r3, r5
 801e100:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e104:	4413      	add	r3, r2
 801e106:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801e10a:	4293      	cmp	r3, r2
 801e10c:	dc04      	bgt.n	801e118 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e10e:	4669      	mov	r1, sp
 801e110:	4630      	mov	r0, r6
 801e112:	f7ff ff87 	bl	801e024 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801e116:	e7b5      	b.n	801e084 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e118:	f8d8 3000 	ldr.w	r3, [r8]
 801e11c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801e120:	442b      	add	r3, r5
 801e122:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e126:	4291      	cmp	r1, r2
 801e128:	d119      	bne.n	801e15e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e12a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e12e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e132:	4291      	cmp	r1, r2
 801e134:	d113      	bne.n	801e15e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e136:	6820      	ldr	r0, [r4, #0]
 801e138:	466a      	mov	r2, sp
 801e13a:	6861      	ldr	r1, [r4, #4]
 801e13c:	c203      	stmia	r2!, {r0, r1}
 801e13e:	4619      	mov	r1, r3
 801e140:	4668      	mov	r0, sp
 801e142:	f7fc fee1 	bl	801af08 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e146:	f8d8 3000 	ldr.w	r3, [r8]
 801e14a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e14e:	442b      	add	r3, r5
 801e150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e154:	4413      	add	r3, r2
 801e156:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801e15a:	4293      	cmp	r3, r2
 801e15c:	ddd7      	ble.n	801e10e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801e15e:	4620      	mov	r0, r4
 801e160:	f7f6 f9ef 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e164:	b990      	cbnz	r0, 801e18c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801e166:	88a7      	ldrh	r7, [r4, #4]
 801e168:	88e3      	ldrh	r3, [r4, #6]
 801e16a:	fb17 f703 	smulbb	r7, r7, r3
 801e16e:	f8d8 3000 	ldr.w	r3, [r8]
 801e172:	441d      	add	r5, r3
 801e174:	4628      	mov	r0, r5
 801e176:	f7f6 f9e4 	bl	8014542 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e17a:	b948      	cbnz	r0, 801e190 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801e17c:	88ab      	ldrh	r3, [r5, #4]
 801e17e:	88ea      	ldrh	r2, [r5, #6]
 801e180:	fb13 f302 	smulbb	r3, r3, r2
 801e184:	42bb      	cmp	r3, r7
 801e186:	f6bf af7c 	bge.w	801e082 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e18a:	e79e      	b.n	801e0ca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801e18c:	2700      	movs	r7, #0
 801e18e:	e7ee      	b.n	801e16e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801e190:	2300      	movs	r3, #0
 801e192:	e7f7      	b.n	801e184 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801e194:	24062240 	.word	0x24062240
 801e198:	24062228 	.word	0x24062228

0801e19c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e19e:	4c24      	ldr	r4, [pc, #144]	@ (801e230 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801e1a0:	6823      	ldr	r3, [r4, #0]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d042      	beq.n	801e22c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e1a6:	4a23      	ldr	r2, [pc, #140]	@ (801e234 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801e1a8:	4d23      	ldr	r5, [pc, #140]	@ (801e238 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801e1aa:	8811      	ldrh	r1, [r2, #0]
 801e1ac:	f8b5 c000 	ldrh.w	ip, [r5]
 801e1b0:	4822      	ldr	r0, [pc, #136]	@ (801e23c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e1b2:	4461      	add	r1, ip
 801e1b4:	1c4a      	adds	r2, r1, #1
 801e1b6:	008f      	lsls	r7, r1, #2
 801e1b8:	f022 0201 	bic.w	r2, r2, #1
 801e1bc:	19de      	adds	r6, r3, r7
 801e1be:	0412      	lsls	r2, r2, #16
 801e1c0:	6006      	str	r6, [r0, #0]
 801e1c2:	4e1f      	ldr	r6, [pc, #124]	@ (801e240 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e1c4:	0c12      	lsrs	r2, r2, #16
 801e1c6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801e1ca:	19da      	adds	r2, r3, r7
 801e1cc:	6032      	str	r2, [r6, #0]
 801e1ce:	220e      	movs	r2, #14
 801e1d0:	fb02 f20c 	mul.w	r2, r2, ip
 801e1d4:	3203      	adds	r2, #3
 801e1d6:	f022 0203 	bic.w	r2, r2, #3
 801e1da:	443a      	add	r2, r7
 801e1dc:	4f19      	ldr	r7, [pc, #100]	@ (801e244 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e1de:	4413      	add	r3, r2
 801e1e0:	603b      	str	r3, [r7, #0]
 801e1e2:	2300      	movs	r3, #0
 801e1e4:	4f18      	ldr	r7, [pc, #96]	@ (801e248 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e1e6:	469c      	mov	ip, r3
 801e1e8:	803b      	strh	r3, [r7, #0]
 801e1ea:	4f18      	ldr	r7, [pc, #96]	@ (801e24c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e1ec:	683f      	ldr	r7, [r7, #0]
 801e1ee:	1aba      	subs	r2, r7, r2
 801e1f0:	4f17      	ldr	r7, [pc, #92]	@ (801e250 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e1f2:	603a      	str	r2, [r7, #0]
 801e1f4:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801e1f8:	4a16      	ldr	r2, [pc, #88]	@ (801e254 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e1fa:	8013      	strh	r3, [r2, #0]
 801e1fc:	428b      	cmp	r3, r1
 801e1fe:	d10d      	bne.n	801e21c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801e200:	882d      	ldrh	r5, [r5, #0]
 801e202:	2300      	movs	r3, #0
 801e204:	6830      	ldr	r0, [r6, #0]
 801e206:	240e      	movs	r4, #14
 801e208:	429d      	cmp	r5, r3
 801e20a:	d90f      	bls.n	801e22c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e20c:	fb04 0203 	mla	r2, r4, r3, r0
 801e210:	3301      	adds	r3, #1
 801e212:	7b11      	ldrb	r1, [r2, #12]
 801e214:	f36f 1145 	bfc	r1, #5, #1
 801e218:	7311      	strb	r1, [r2, #12]
 801e21a:	e7f5      	b.n	801e208 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801e21c:	6822      	ldr	r2, [r4, #0]
 801e21e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e222:	6802      	ldr	r2, [r0, #0]
 801e224:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801e228:	3301      	adds	r3, #1
 801e22a:	e7e7      	b.n	801e1fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801e22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e22e:	bf00      	nop
 801e230:	24062224 	.word	0x24062224
 801e234:	24062240 	.word	0x24062240
 801e238:	24062244 	.word	0x24062244
 801e23c:	24062238 	.word	0x24062238
 801e240:	24062228 	.word	0x24062228
 801e244:	24062230 	.word	0x24062230
 801e248:	24062242 	.word	0x24062242
 801e24c:	2406222c 	.word	0x2406222c
 801e250:	2406223c 	.word	0x2406223c
 801e254:	24062234 	.word	0x24062234

0801e258 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e258:	4b06      	ldr	r3, [pc, #24]	@ (801e274 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	b943      	cbnz	r3, 801e270 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e25e:	b139      	cbz	r1, 801e270 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e260:	4b05      	ldr	r3, [pc, #20]	@ (801e278 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801e262:	801a      	strh	r2, [r3, #0]
 801e264:	4b05      	ldr	r3, [pc, #20]	@ (801e27c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801e266:	6019      	str	r1, [r3, #0]
 801e268:	4b05      	ldr	r3, [pc, #20]	@ (801e280 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801e26a:	6018      	str	r0, [r3, #0]
 801e26c:	f7ff bf96 	b.w	801e19c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e270:	4770      	bx	lr
 801e272:	bf00      	nop
 801e274:	24062230 	.word	0x24062230
 801e278:	24062244 	.word	0x24062244
 801e27c:	2406222c 	.word	0x2406222c
 801e280:	24062224 	.word	0x24062224

0801e284 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e284:	b470      	push	{r4, r5, r6}
 801e286:	4c07      	ldr	r4, [pc, #28]	@ (801e2a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e288:	4605      	mov	r5, r0
 801e28a:	4610      	mov	r0, r2
 801e28c:	9a03      	ldr	r2, [sp, #12]
 801e28e:	6826      	ldr	r6, [r4, #0]
 801e290:	b936      	cbnz	r6, 801e2a0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e292:	6025      	str	r5, [r4, #0]
 801e294:	4c04      	ldr	r4, [pc, #16]	@ (801e2a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e296:	8021      	strh	r1, [r4, #0]
 801e298:	4619      	mov	r1, r3
 801e29a:	bc70      	pop	{r4, r5, r6}
 801e29c:	f7ff bfdc 	b.w	801e258 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e2a0:	bc70      	pop	{r4, r5, r6}
 801e2a2:	4770      	bx	lr
 801e2a4:	24062248 	.word	0x24062248
 801e2a8:	24062240 	.word	0x24062240

0801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e2ac:	4a12      	ldr	r2, [pc, #72]	@ (801e2f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801e2ae:	8803      	ldrh	r3, [r0, #0]
 801e2b0:	8812      	ldrh	r2, [r2, #0]
 801e2b2:	4293      	cmp	r3, r2
 801e2b4:	d207      	bcs.n	801e2c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801e2b6:	4a11      	ldr	r2, [pc, #68]	@ (801e2fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801e2b8:	2114      	movs	r1, #20
 801e2ba:	6812      	ldr	r2, [r2, #0]
 801e2bc:	fb01 2303 	mla	r3, r1, r3, r2
 801e2c0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e2c4:	4770      	bx	lr
 801e2c6:	490e      	ldr	r1, [pc, #56]	@ (801e300 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e2c8:	8809      	ldrh	r1, [r1, #0]
 801e2ca:	4411      	add	r1, r2
 801e2cc:	428b      	cmp	r3, r1
 801e2ce:	da04      	bge.n	801e2da <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801e2d0:	1a9b      	subs	r3, r3, r2
 801e2d2:	4a0c      	ldr	r2, [pc, #48]	@ (801e304 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e2d4:	210e      	movs	r1, #14
 801e2d6:	6812      	ldr	r2, [r2, #0]
 801e2d8:	e7f0      	b.n	801e2bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801e2da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e2de:	4293      	cmp	r3, r2
 801e2e0:	d108      	bne.n	801e2f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801e2e2:	4b09      	ldr	r3, [pc, #36]	@ (801e308 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e2e4:	781b      	ldrb	r3, [r3, #0]
 801e2e6:	b91b      	cbnz	r3, 801e2f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801e2e8:	4b08      	ldr	r3, [pc, #32]	@ (801e30c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e2ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e2ee:	4770      	bx	lr
 801e2f0:	4b07      	ldr	r3, [pc, #28]	@ (801e310 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e2f2:	e7fa      	b.n	801e2ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801e2f4:	2000      	movs	r0, #0
 801e2f6:	4770      	bx	lr
 801e2f8:	24062240 	.word	0x24062240
 801e2fc:	24062248 	.word	0x24062248
 801e300:	24062244 	.word	0x24062244
 801e304:	24062228 	.word	0x24062228
 801e308:	240621b0 	.word	0x240621b0
 801e30c:	240621b2 	.word	0x240621b2
 801e310:	240621b4 	.word	0x240621b4

0801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e314:	4a12      	ldr	r2, [pc, #72]	@ (801e360 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801e316:	8803      	ldrh	r3, [r0, #0]
 801e318:	8812      	ldrh	r2, [r2, #0]
 801e31a:	4293      	cmp	r3, r2
 801e31c:	d207      	bcs.n	801e32e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801e31e:	4a11      	ldr	r2, [pc, #68]	@ (801e364 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801e320:	2114      	movs	r1, #20
 801e322:	6812      	ldr	r2, [r2, #0]
 801e324:	fb01 2303 	mla	r3, r1, r3, r2
 801e328:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801e32c:	4770      	bx	lr
 801e32e:	490e      	ldr	r1, [pc, #56]	@ (801e368 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e330:	8809      	ldrh	r1, [r1, #0]
 801e332:	4411      	add	r1, r2
 801e334:	428b      	cmp	r3, r1
 801e336:	da04      	bge.n	801e342 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801e338:	1a9b      	subs	r3, r3, r2
 801e33a:	4a0c      	ldr	r2, [pc, #48]	@ (801e36c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e33c:	210e      	movs	r1, #14
 801e33e:	6812      	ldr	r2, [r2, #0]
 801e340:	e7f0      	b.n	801e324 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801e342:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e346:	4293      	cmp	r3, r2
 801e348:	d108      	bne.n	801e35c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801e34a:	4b09      	ldr	r3, [pc, #36]	@ (801e370 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e34c:	781b      	ldrb	r3, [r3, #0]
 801e34e:	b91b      	cbnz	r3, 801e358 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801e350:	4b08      	ldr	r3, [pc, #32]	@ (801e374 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e352:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e356:	4770      	bx	lr
 801e358:	4b07      	ldr	r3, [pc, #28]	@ (801e378 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e35a:	e7fa      	b.n	801e352 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801e35c:	2000      	movs	r0, #0
 801e35e:	4770      	bx	lr
 801e360:	24062240 	.word	0x24062240
 801e364:	24062248 	.word	0x24062248
 801e368:	24062244 	.word	0x24062244
 801e36c:	24062228 	.word	0x24062228
 801e370:	240621b0 	.word	0x240621b0
 801e374:	240621b4 	.word	0x240621b4
 801e378:	240621b2 	.word	0x240621b2

0801e37c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e37c:	4a22      	ldr	r2, [pc, #136]	@ (801e408 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801e37e:	b530      	push	{r4, r5, lr}
 801e380:	880b      	ldrh	r3, [r1, #0]
 801e382:	8812      	ldrh	r2, [r2, #0]
 801e384:	4293      	cmp	r3, r2
 801e386:	d213      	bcs.n	801e3b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801e388:	4a20      	ldr	r2, [pc, #128]	@ (801e40c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e38a:	2114      	movs	r1, #20
 801e38c:	6812      	ldr	r2, [r2, #0]
 801e38e:	fb01 2303 	mla	r3, r1, r3, r2
 801e392:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e396:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e39a:	8a1a      	ldrh	r2, [r3, #16]
 801e39c:	8a5b      	ldrh	r3, [r3, #18]
 801e39e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e3a2:	8004      	strh	r4, [r0, #0]
 801e3a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e3a8:	8041      	strh	r1, [r0, #2]
 801e3aa:	8082      	strh	r2, [r0, #4]
 801e3ac:	80c3      	strh	r3, [r0, #6]
 801e3ae:	e024      	b.n	801e3fa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801e3b0:	4917      	ldr	r1, [pc, #92]	@ (801e410 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e3b2:	8809      	ldrh	r1, [r1, #0]
 801e3b4:	4411      	add	r1, r2
 801e3b6:	428b      	cmp	r3, r1
 801e3b8:	da10      	bge.n	801e3dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801e3ba:	1a9b      	subs	r3, r3, r2
 801e3bc:	220e      	movs	r2, #14
 801e3be:	4353      	muls	r3, r2
 801e3c0:	4a14      	ldr	r2, [pc, #80]	@ (801e414 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e3c2:	6811      	ldr	r1, [r2, #0]
 801e3c4:	18ca      	adds	r2, r1, r3
 801e3c6:	5ecd      	ldrsh	r5, [r1, r3]
 801e3c8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801e3cc:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801e3d0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801e3d4:	8005      	strh	r5, [r0, #0]
 801e3d6:	8044      	strh	r4, [r0, #2]
 801e3d8:	8081      	strh	r1, [r0, #4]
 801e3da:	e7e7      	b.n	801e3ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e3dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e3e0:	4293      	cmp	r3, r2
 801e3e2:	d10b      	bne.n	801e3fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801e3e4:	4b0c      	ldr	r3, [pc, #48]	@ (801e418 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e3e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e3ea:	4b0c      	ldr	r3, [pc, #48]	@ (801e41c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e3ec:	8081      	strh	r1, [r0, #4]
 801e3ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e3f2:	2300      	movs	r3, #0
 801e3f4:	80c2      	strh	r2, [r0, #6]
 801e3f6:	8003      	strh	r3, [r0, #0]
 801e3f8:	8043      	strh	r3, [r0, #2]
 801e3fa:	bd30      	pop	{r4, r5, pc}
 801e3fc:	2300      	movs	r3, #0
 801e3fe:	8003      	strh	r3, [r0, #0]
 801e400:	8043      	strh	r3, [r0, #2]
 801e402:	8083      	strh	r3, [r0, #4]
 801e404:	e7d2      	b.n	801e3ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e406:	bf00      	nop
 801e408:	24062240 	.word	0x24062240
 801e40c:	24062248 	.word	0x24062248
 801e410:	24062244 	.word	0x24062244
 801e414:	24062228 	.word	0x24062228
 801e418:	240621ac 	.word	0x240621ac
 801e41c:	240621ae 	.word	0x240621ae

0801e420 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e420:	4a17      	ldr	r2, [pc, #92]	@ (801e480 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801e422:	8803      	ldrh	r3, [r0, #0]
 801e424:	8812      	ldrh	r2, [r2, #0]
 801e426:	4293      	cmp	r3, r2
 801e428:	d213      	bcs.n	801e452 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801e42a:	4a16      	ldr	r2, [pc, #88]	@ (801e484 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e42c:	2114      	movs	r1, #20
 801e42e:	6812      	ldr	r2, [r2, #0]
 801e430:	fb01 2303 	mla	r3, r1, r3, r2
 801e434:	8a1a      	ldrh	r2, [r3, #16]
 801e436:	8919      	ldrh	r1, [r3, #8]
 801e438:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e43c:	428a      	cmp	r2, r1
 801e43e:	db1d      	blt.n	801e47c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e440:	8a58      	ldrh	r0, [r3, #18]
 801e442:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e446:	895b      	ldrh	r3, [r3, #10]
 801e448:	4298      	cmp	r0, r3
 801e44a:	bfac      	ite	ge
 801e44c:	2000      	movge	r0, #0
 801e44e:	2001      	movlt	r0, #1
 801e450:	4770      	bx	lr
 801e452:	490d      	ldr	r1, [pc, #52]	@ (801e488 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e454:	8809      	ldrh	r1, [r1, #0]
 801e456:	4411      	add	r1, r2
 801e458:	428b      	cmp	r3, r1
 801e45a:	da0d      	bge.n	801e478 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801e45c:	1a9b      	subs	r3, r3, r2
 801e45e:	4a0b      	ldr	r2, [pc, #44]	@ (801e48c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e460:	210e      	movs	r1, #14
 801e462:	6812      	ldr	r2, [r2, #0]
 801e464:	fb01 2303 	mla	r3, r1, r3, r2
 801e468:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e46c:	891a      	ldrh	r2, [r3, #8]
 801e46e:	4291      	cmp	r1, r2
 801e470:	db04      	blt.n	801e47c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e472:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e476:	e7e6      	b.n	801e446 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801e478:	2000      	movs	r0, #0
 801e47a:	4770      	bx	lr
 801e47c:	2001      	movs	r0, #1
 801e47e:	4770      	bx	lr
 801e480:	24062240 	.word	0x24062240
 801e484:	24062248 	.word	0x24062248
 801e488:	24062244 	.word	0x24062244
 801e48c:	24062228 	.word	0x24062228

0801e490 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e490:	4a12      	ldr	r2, [pc, #72]	@ (801e4dc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e492:	8803      	ldrh	r3, [r0, #0]
 801e494:	8811      	ldrh	r1, [r2, #0]
 801e496:	428b      	cmp	r3, r1
 801e498:	d20b      	bcs.n	801e4b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801e49a:	4a11      	ldr	r2, [pc, #68]	@ (801e4e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e49c:	6812      	ldr	r2, [r2, #0]
 801e49e:	b112      	cbz	r2, 801e4a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e4a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e4a4:	b9c0      	cbnz	r0, 801e4d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801e4a6:	4a0f      	ldr	r2, [pc, #60]	@ (801e4e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e4a8:	6811      	ldr	r1, [r2, #0]
 801e4aa:	2214      	movs	r2, #20
 801e4ac:	4353      	muls	r3, r2
 801e4ae:	58c8      	ldr	r0, [r1, r3]
 801e4b0:	4770      	bx	lr
 801e4b2:	4a0d      	ldr	r2, [pc, #52]	@ (801e4e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e4b4:	8812      	ldrh	r2, [r2, #0]
 801e4b6:	440a      	add	r2, r1
 801e4b8:	4293      	cmp	r3, r2
 801e4ba:	da04      	bge.n	801e4c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801e4bc:	4a08      	ldr	r2, [pc, #32]	@ (801e4e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e4be:	6812      	ldr	r2, [r2, #0]
 801e4c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e4c4:	4770      	bx	lr
 801e4c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e4ca:	4293      	cmp	r3, r2
 801e4cc:	d103      	bne.n	801e4d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e4ce:	4b07      	ldr	r3, [pc, #28]	@ (801e4ec <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801e4d4:	4770      	bx	lr
 801e4d6:	2000      	movs	r0, #0
 801e4d8:	4770      	bx	lr
 801e4da:	bf00      	nop
 801e4dc:	24062240 	.word	0x24062240
 801e4e0:	24062224 	.word	0x24062224
 801e4e4:	24062248 	.word	0x24062248
 801e4e8:	24062244 	.word	0x24062244
 801e4ec:	240621b8 	.word	0x240621b8

0801e4f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e4f0:	4b24      	ldr	r3, [pc, #144]	@ (801e584 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e4f2:	8802      	ldrh	r2, [r0, #0]
 801e4f4:	8818      	ldrh	r0, [r3, #0]
 801e4f6:	4282      	cmp	r2, r0
 801e4f8:	d221      	bcs.n	801e53e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801e4fa:	4b23      	ldr	r3, [pc, #140]	@ (801e588 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e4fc:	6819      	ldr	r1, [r3, #0]
 801e4fe:	2314      	movs	r3, #20
 801e500:	fb03 1302 	mla	r3, r3, r2, r1
 801e504:	6858      	ldr	r0, [r3, #4]
 801e506:	2800      	cmp	r0, #0
 801e508:	d03a      	beq.n	801e580 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e50a:	4920      	ldr	r1, [pc, #128]	@ (801e58c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e50c:	6809      	ldr	r1, [r1, #0]
 801e50e:	2900      	cmp	r1, #0
 801e510:	d036      	beq.n	801e580 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e512:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e516:	2900      	cmp	r1, #0
 801e518:	d032      	beq.n	801e580 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e51a:	891a      	ldrh	r2, [r3, #8]
 801e51c:	8958      	ldrh	r0, [r3, #10]
 801e51e:	4350      	muls	r0, r2
 801e520:	7c5a      	ldrb	r2, [r3, #17]
 801e522:	7cdb      	ldrb	r3, [r3, #19]
 801e524:	0952      	lsrs	r2, r2, #5
 801e526:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e52a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e52e:	2b0b      	cmp	r3, #11
 801e530:	bf18      	it	ne
 801e532:	0040      	lslne	r0, r0, #1
 801e534:	3003      	adds	r0, #3
 801e536:	f020 0003 	bic.w	r0, r0, #3
 801e53a:	4408      	add	r0, r1
 801e53c:	4770      	bx	lr
 801e53e:	4b14      	ldr	r3, [pc, #80]	@ (801e590 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e540:	881b      	ldrh	r3, [r3, #0]
 801e542:	4403      	add	r3, r0
 801e544:	429a      	cmp	r2, r3
 801e546:	da1a      	bge.n	801e57e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e548:	4b12      	ldr	r3, [pc, #72]	@ (801e594 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e54a:	1a10      	subs	r0, r2, r0
 801e54c:	210e      	movs	r1, #14
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	fb01 3000 	mla	r0, r1, r0, r3
 801e554:	7b03      	ldrb	r3, [r0, #12]
 801e556:	f003 031f 	and.w	r3, r3, #31
 801e55a:	2b0b      	cmp	r3, #11
 801e55c:	d10b      	bne.n	801e576 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801e55e:	8903      	ldrh	r3, [r0, #8]
 801e560:	8940      	ldrh	r0, [r0, #10]
 801e562:	4358      	muls	r0, r3
 801e564:	4b09      	ldr	r3, [pc, #36]	@ (801e58c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e566:	3003      	adds	r0, #3
 801e568:	6819      	ldr	r1, [r3, #0]
 801e56a:	f020 0303 	bic.w	r3, r0, #3
 801e56e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e572:	4418      	add	r0, r3
 801e574:	4770      	bx	lr
 801e576:	2b0d      	cmp	r3, #13
 801e578:	d101      	bne.n	801e57e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e57a:	300d      	adds	r0, #13
 801e57c:	4770      	bx	lr
 801e57e:	2000      	movs	r0, #0
 801e580:	4770      	bx	lr
 801e582:	bf00      	nop
 801e584:	24062240 	.word	0x24062240
 801e588:	24062248 	.word	0x24062248
 801e58c:	24062224 	.word	0x24062224
 801e590:	24062244 	.word	0x24062244
 801e594:	24062228 	.word	0x24062228

0801e598 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e598:	4b1f      	ldr	r3, [pc, #124]	@ (801e618 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801e59a:	b510      	push	{r4, lr}
 801e59c:	8802      	ldrh	r2, [r0, #0]
 801e59e:	881b      	ldrh	r3, [r3, #0]
 801e5a0:	429a      	cmp	r2, r3
 801e5a2:	d21a      	bcs.n	801e5da <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801e5a4:	4b1d      	ldr	r3, [pc, #116]	@ (801e61c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801e5a6:	2114      	movs	r1, #20
 801e5a8:	681b      	ldr	r3, [r3, #0]
 801e5aa:	fb01 3102 	mla	r1, r1, r2, r3
 801e5ae:	7c4b      	ldrb	r3, [r1, #17]
 801e5b0:	0958      	lsrs	r0, r3, #5
 801e5b2:	7ccb      	ldrb	r3, [r1, #19]
 801e5b4:	491a      	ldr	r1, [pc, #104]	@ (801e620 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801e5b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e5ba:	6809      	ldr	r1, [r1, #0]
 801e5bc:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801e5c0:	b2d8      	uxtb	r0, r3
 801e5c2:	b149      	cbz	r1, 801e5d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e5c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e5c8:	b132      	cbz	r2, 801e5d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e5ca:	2b0e      	cmp	r3, #14
 801e5cc:	d021      	beq.n	801e612 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e5ce:	280f      	cmp	r0, #15
 801e5d0:	d01d      	beq.n	801e60e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801e5d2:	2810      	cmp	r0, #16
 801e5d4:	bf08      	it	eq
 801e5d6:	2002      	moveq	r0, #2
 801e5d8:	bd10      	pop	{r4, pc}
 801e5da:	4912      	ldr	r1, [pc, #72]	@ (801e624 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801e5dc:	8809      	ldrh	r1, [r1, #0]
 801e5de:	4419      	add	r1, r3
 801e5e0:	428a      	cmp	r2, r1
 801e5e2:	da09      	bge.n	801e5f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801e5e4:	1ad3      	subs	r3, r2, r3
 801e5e6:	4a10      	ldr	r2, [pc, #64]	@ (801e628 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801e5e8:	210e      	movs	r1, #14
 801e5ea:	6812      	ldr	r2, [r2, #0]
 801e5ec:	fb01 2303 	mla	r3, r1, r3, r2
 801e5f0:	7b18      	ldrb	r0, [r3, #12]
 801e5f2:	f000 001f 	and.w	r0, r0, #31
 801e5f6:	e7ef      	b.n	801e5d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e5f8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801e5fc:	429a      	cmp	r2, r3
 801e5fe:	d108      	bne.n	801e612 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e600:	f7f6 fa40 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 801e604:	6803      	ldr	r3, [r0, #0]
 801e606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e60c:	4718      	bx	r3
 801e60e:	2001      	movs	r0, #1
 801e610:	e7e2      	b.n	801e5d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e612:	2000      	movs	r0, #0
 801e614:	e7e0      	b.n	801e5d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e616:	bf00      	nop
 801e618:	24062240 	.word	0x24062240
 801e61c:	24062248 	.word	0x24062248
 801e620:	24062224 	.word	0x24062224
 801e624:	24062244 	.word	0x24062244
 801e628:	24062228 	.word	0x24062228

0801e62c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801e62c:	2018      	movs	r0, #24
 801e62e:	4770      	bx	lr

0801e630 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801e630:	2001      	movs	r0, #1
 801e632:	4770      	bx	lr

0801e634 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e634:	4b02      	ldr	r3, [pc, #8]	@ (801e640 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801e636:	8818      	ldrh	r0, [r3, #0]
 801e638:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e63c:	b280      	uxth	r0, r0
 801e63e:	4770      	bx	lr
 801e640:	240621b2 	.word	0x240621b2

0801e644 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e644:	2bff      	cmp	r3, #255	@ 0xff
 801e646:	d04c      	beq.n	801e6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e648:	2a2c      	cmp	r2, #44	@ 0x2c
 801e64a:	d030      	beq.n	801e6ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801e64c:	d80f      	bhi.n	801e66e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801e64e:	2a08      	cmp	r2, #8
 801e650:	d043      	beq.n	801e6da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e652:	d805      	bhi.n	801e660 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801e654:	2a04      	cmp	r2, #4
 801e656:	d03e      	beq.n	801e6d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e658:	2a05      	cmp	r2, #5
 801e65a:	d03a      	beq.n	801e6d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e65c:	2300      	movs	r3, #0
 801e65e:	e024      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e660:	2a0a      	cmp	r2, #10
 801e662:	d03a      	beq.n	801e6da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e664:	d301      	bcc.n	801e66a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801e666:	2a0b      	cmp	r2, #11
 801e668:	d1f8      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e66a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e66c:	e01d      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e66e:	2a30      	cmp	r2, #48	@ 0x30
 801e670:	d035      	beq.n	801e6de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e672:	d80a      	bhi.n	801e68a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801e674:	2a2e      	cmp	r2, #46	@ 0x2e
 801e676:	684b      	ldr	r3, [r1, #4]
 801e678:	d023      	beq.n	801e6c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e67a:	d90d      	bls.n	801e698 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801e67c:	781a      	ldrb	r2, [r3, #0]
 801e67e:	785b      	ldrb	r3, [r3, #1]
 801e680:	2b00      	cmp	r3, #0
 801e682:	d1eb      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e684:	b98a      	cbnz	r2, 801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e686:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e688:	e00f      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e68a:	2a32      	cmp	r2, #50	@ 0x32
 801e68c:	d027      	beq.n	801e6de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e68e:	d301      	bcc.n	801e694 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801e690:	2a33      	cmp	r2, #51	@ 0x33
 801e692:	d1e3      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e694:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801e696:	e008      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e698:	781a      	ldrb	r2, [r3, #0]
 801e69a:	785b      	ldrb	r3, [r3, #1]
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d1dd      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e6a0:	2a00      	cmp	r2, #0
 801e6a2:	d0f0      	beq.n	801e686 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801e6a4:	2a01      	cmp	r2, #1
 801e6a6:	d1d9      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e6a8:	6943      	ldr	r3, [r0, #20]
 801e6aa:	4618      	mov	r0, r3
 801e6ac:	4770      	bx	lr
 801e6ae:	684b      	ldr	r3, [r1, #4]
 801e6b0:	781a      	ldrb	r2, [r3, #0]
 801e6b2:	785b      	ldrb	r3, [r3, #1]
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d1d1      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e6b8:	b14a      	cbz	r2, 801e6ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e6ba:	2a01      	cmp	r2, #1
 801e6bc:	bf08      	it	eq
 801e6be:	68c3      	ldreq	r3, [r0, #12]
 801e6c0:	e7f3      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e6c2:	781a      	ldrb	r2, [r3, #0]
 801e6c4:	785b      	ldrb	r3, [r3, #1]
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	d1c8      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e6ca:	2a00      	cmp	r2, #0
 801e6cc:	d1ed      	bne.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e6ce:	69c3      	ldr	r3, [r0, #28]
 801e6d0:	e7eb      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e6d2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e6d4:	e7e9      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e6d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801e6d8:	e7e7      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e6da:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801e6dc:	e7e5      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e6de:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801e6e0:	e7e3      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e6e2:	2a2c      	cmp	r2, #44	@ 0x2c
 801e6e4:	d030      	beq.n	801e748 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801e6e6:	d80f      	bhi.n	801e708 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801e6e8:	2a08      	cmp	r2, #8
 801e6ea:	d042      	beq.n	801e772 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e6ec:	d805      	bhi.n	801e6fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801e6ee:	2a04      	cmp	r2, #4
 801e6f0:	d03d      	beq.n	801e76e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801e6f2:	2a05      	cmp	r2, #5
 801e6f4:	d1b2      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e6f6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801e6f8:	e7d7      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e6fa:	2a0a      	cmp	r2, #10
 801e6fc:	d039      	beq.n	801e772 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e6fe:	d301      	bcc.n	801e704 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801e700:	2a0b      	cmp	r2, #11
 801e702:	d1ab      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e704:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801e706:	e7d0      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e708:	2a30      	cmp	r2, #48	@ 0x30
 801e70a:	d034      	beq.n	801e776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e70c:	d80b      	bhi.n	801e726 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801e70e:	2a2e      	cmp	r2, #46	@ 0x2e
 801e710:	684b      	ldr	r3, [r1, #4]
 801e712:	d023      	beq.n	801e75c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e714:	d90e      	bls.n	801e734 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801e716:	781a      	ldrb	r2, [r3, #0]
 801e718:	785b      	ldrb	r3, [r3, #1]
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d19e      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e71e:	2a00      	cmp	r2, #0
 801e720:	d1c3      	bne.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e722:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801e724:	e7c1      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e726:	2a32      	cmp	r2, #50	@ 0x32
 801e728:	d025      	beq.n	801e776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e72a:	d301      	bcc.n	801e730 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e72c:	2a33      	cmp	r2, #51	@ 0x33
 801e72e:	d195      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e730:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801e732:	e7ba      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e734:	781a      	ldrb	r2, [r3, #0]
 801e736:	785b      	ldrb	r3, [r3, #1]
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d18f      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e73c:	2a00      	cmp	r2, #0
 801e73e:	d0f0      	beq.n	801e722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801e740:	2a01      	cmp	r2, #1
 801e742:	d18b      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e744:	6983      	ldr	r3, [r0, #24]
 801e746:	e7b0      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e748:	684b      	ldr	r3, [r1, #4]
 801e74a:	781a      	ldrb	r2, [r3, #0]
 801e74c:	785b      	ldrb	r3, [r3, #1]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d184      	bne.n	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e752:	b152      	cbz	r2, 801e76a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801e754:	2a01      	cmp	r2, #1
 801e756:	bf08      	it	eq
 801e758:	6903      	ldreq	r3, [r0, #16]
 801e75a:	e7a6      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e75c:	781a      	ldrb	r2, [r3, #0]
 801e75e:	785b      	ldrb	r3, [r3, #1]
 801e760:	2b00      	cmp	r3, #0
 801e762:	f47f af7b 	bne.w	801e65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e766:	2a00      	cmp	r2, #0
 801e768:	d19f      	bne.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e76a:	6a03      	ldr	r3, [r0, #32]
 801e76c:	e79d      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e76e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801e770:	e79b      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e772:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e774:	e799      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e776:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801e778:	e797      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801e77a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e77a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e77e:	b085      	sub	sp, #20
 801e780:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e782:	9203      	str	r2, [sp, #12]
 801e784:	6870      	ldr	r0, [r6, #4]
 801e786:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801e78a:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801e78e:	9101      	str	r1, [sp, #4]
 801e790:	fa1f f885 	uxth.w	r8, r5
 801e794:	43ed      	mvns	r5, r5
 801e796:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e79a:	b2ed      	uxtb	r5, r5
 801e79c:	fb00 2404 	mla	r4, r0, r4, r2
 801e7a0:	6832      	ldr	r2, [r6, #0]
 801e7a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e7a6:	4414      	add	r4, r2
 801e7a8:	f8dc 2000 	ldr.w	r2, [ip]
 801e7ac:	9202      	str	r2, [sp, #8]
 801e7ae:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e7b2:	f102 0e04 	add.w	lr, r2, #4
 801e7b6:	9a01      	ldr	r2, [sp, #4]
 801e7b8:	2a00      	cmp	r2, #0
 801e7ba:	dc03      	bgt.n	801e7c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e7bc:	9a03      	ldr	r2, [sp, #12]
 801e7be:	2a00      	cmp	r2, #0
 801e7c0:	f340 8116 	ble.w	801e9f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e7c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e7c6:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801e7ca:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e7ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e7d0:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801e7d4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	dd0e      	ble.n	801e7fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e7dc:	1406      	asrs	r6, r0, #16
 801e7de:	d405      	bmi.n	801e7ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e7e0:	4556      	cmp	r6, sl
 801e7e2:	da03      	bge.n	801e7ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e7e4:	1416      	asrs	r6, r2, #16
 801e7e6:	d401      	bmi.n	801e7ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e7e8:	454e      	cmp	r6, r9
 801e7ea:	db07      	blt.n	801e7fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e7ec:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e7ee:	3b01      	subs	r3, #1
 801e7f0:	3403      	adds	r4, #3
 801e7f2:	4430      	add	r0, r6
 801e7f4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e7f6:	4432      	add	r2, r6
 801e7f8:	e7ee      	b.n	801e7d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e7fa:	d063      	beq.n	801e8c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e7fc:	1e5e      	subs	r6, r3, #1
 801e7fe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801e800:	fb07 0706 	mla	r7, r7, r6, r0
 801e804:	143f      	asrs	r7, r7, #16
 801e806:	d454      	bmi.n	801e8b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e808:	4557      	cmp	r7, sl
 801e80a:	da52      	bge.n	801e8b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e80c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801e80e:	fb07 2606 	mla	r6, r7, r6, r2
 801e812:	1436      	asrs	r6, r6, #16
 801e814:	d44d      	bmi.n	801e8b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e816:	454e      	cmp	r6, r9
 801e818:	da4b      	bge.n	801e8b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e81a:	1ce6      	adds	r6, r4, #3
 801e81c:	4699      	mov	r9, r3
 801e81e:	f1b9 0f00 	cmp.w	r9, #0
 801e822:	f106 0603 	add.w	r6, r6, #3
 801e826:	dd48      	ble.n	801e8ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801e828:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801e82c:	1417      	asrs	r7, r2, #16
 801e82e:	9902      	ldr	r1, [sp, #8]
 801e830:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e834:	f109 39ff 	add.w	r9, r9, #4294967295
 801e838:	fb0b 1707 	mla	r7, fp, r7, r1
 801e83c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e840:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e842:	f817 700a 	ldrb.w	r7, [r7, sl]
 801e846:	fb1b fb05 	smulbb	fp, fp, r5
 801e84a:	4408      	add	r0, r1
 801e84c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e84e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e852:	440a      	add	r2, r1
 801e854:	eb0e 0a07 	add.w	sl, lr, r7
 801e858:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801e85c:	fb07 b708 	mla	r7, r7, r8, fp
 801e860:	b2bf      	uxth	r7, r7
 801e862:	f107 0b01 	add.w	fp, r7, #1
 801e866:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e86a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e86e:	fb1b fb05 	smulbb	fp, fp, r5
 801e872:	123f      	asrs	r7, r7, #8
 801e874:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e878:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e87c:	fb07 b708 	mla	r7, r7, r8, fp
 801e880:	b2bf      	uxth	r7, r7
 801e882:	f107 0b01 	add.w	fp, r7, #1
 801e886:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e88a:	123f      	asrs	r7, r7, #8
 801e88c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e890:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e894:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e898:	fb1a fa05 	smulbb	sl, sl, r5
 801e89c:	fb07 a708 	mla	r7, r7, r8, sl
 801e8a0:	b2bf      	uxth	r7, r7
 801e8a2:	f107 0a01 	add.w	sl, r7, #1
 801e8a6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e8aa:	123f      	asrs	r7, r7, #8
 801e8ac:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e8b0:	e7b5      	b.n	801e81e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801e8b2:	2700      	movs	r7, #0
 801e8b4:	1bde      	subs	r6, r3, r7
 801e8b6:	2e00      	cmp	r6, #0
 801e8b8:	dc42      	bgt.n	801e940 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801e8ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8c2:	441c      	add	r4, r3
 801e8c4:	9b01      	ldr	r3, [sp, #4]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	f340 8092 	ble.w	801e9f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e8cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e8d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8da:	eef0 6a62 	vmov.f32	s13, s5
 801e8de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e8e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e8ea:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801e8ee:	eef0 6a43 	vmov.f32	s13, s6
 801e8f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e8f6:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801e8fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e902:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e906:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e90a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e90e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e912:	ee12 2a90 	vmov	r2, s5
 801e916:	eef0 2a47 	vmov.f32	s5, s14
 801e91a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e91e:	ee13 2a10 	vmov	r2, s6
 801e922:	9311      	str	r3, [sp, #68]	@ 0x44
 801e924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e926:	eeb0 3a67 	vmov.f32	s6, s15
 801e92a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e92e:	9312      	str	r3, [sp, #72]	@ 0x48
 801e930:	9b01      	ldr	r3, [sp, #4]
 801e932:	9a03      	ldr	r2, [sp, #12]
 801e934:	3b01      	subs	r3, #1
 801e936:	9301      	str	r3, [sp, #4]
 801e938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e93a:	bf08      	it	eq
 801e93c:	4613      	moveq	r3, r2
 801e93e:	e73a      	b.n	801e7b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e940:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e944:	d44e      	bmi.n	801e9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e946:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e94a:	4556      	cmp	r6, sl
 801e94c:	dd4a      	ble.n	801e9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e94e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e952:	d447      	bmi.n	801e9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e954:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801e958:	4559      	cmp	r1, fp
 801e95a:	dd43      	ble.n	801e9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e95c:	fa0f f986 	sxth.w	r9, r6
 801e960:	9902      	ldr	r1, [sp, #8]
 801e962:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e966:	fb0b 1909 	mla	r9, fp, r9, r1
 801e96a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e96e:	f819 900a 	ldrb.w	r9, [r9, sl]
 801e972:	fb1b fb05 	smulbb	fp, fp, r5
 801e976:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e97a:	eb0e 0a09 	add.w	sl, lr, r9
 801e97e:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801e982:	fb09 b908 	mla	r9, r9, r8, fp
 801e986:	fa1f f989 	uxth.w	r9, r9
 801e98a:	f109 0b01 	add.w	fp, r9, #1
 801e98e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e992:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e996:	f804 9006 	strb.w	r9, [r4, r6]
 801e99a:	4426      	add	r6, r4
 801e99c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e9a0:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e9a4:	fb1b fb05 	smulbb	fp, fp, r5
 801e9a8:	fb09 b908 	mla	r9, r9, r8, fp
 801e9ac:	fa1f f989 	uxth.w	r9, r9
 801e9b0:	f109 0b01 	add.w	fp, r9, #1
 801e9b4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e9b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e9bc:	f886 9001 	strb.w	r9, [r6, #1]
 801e9c0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e9c4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e9c8:	fb1a fa05 	smulbb	sl, sl, r5
 801e9cc:	fb09 a908 	mla	r9, r9, r8, sl
 801e9d0:	fa1f f989 	uxth.w	r9, r9
 801e9d4:	f109 0a01 	add.w	sl, r9, #1
 801e9d8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e9dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e9e0:	f886 9002 	strb.w	r9, [r6, #2]
 801e9e4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e9e6:	3701      	adds	r7, #1
 801e9e8:	4408      	add	r0, r1
 801e9ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e9ec:	440a      	add	r2, r1
 801e9ee:	e761      	b.n	801e8b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e9f0:	b005      	add	sp, #20
 801e9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e9f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9fa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e9fc:	4693      	mov	fp, r2
 801e9fe:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ea00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea04:	6868      	ldr	r0, [r5, #4]
 801ea06:	6877      	ldr	r7, [r6, #4]
 801ea08:	9100      	str	r1, [sp, #0]
 801ea0a:	3704      	adds	r7, #4
 801ea0c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801ea10:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801ea14:	fb00 2404 	mla	r4, r0, r4, r2
 801ea18:	682a      	ldr	r2, [r5, #0]
 801ea1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ea1e:	4414      	add	r4, r2
 801ea20:	6832      	ldr	r2, [r6, #0]
 801ea22:	9201      	str	r2, [sp, #4]
 801ea24:	9a00      	ldr	r2, [sp, #0]
 801ea26:	2a00      	cmp	r2, #0
 801ea28:	dc03      	bgt.n	801ea32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ea2a:	f1bb 0f00 	cmp.w	fp, #0
 801ea2e:	f340 80bc 	ble.w	801ebaa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ea32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ea34:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801ea38:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ea3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ea3e:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801ea42:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	dd0c      	ble.n	801ea64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea4a:	1405      	asrs	r5, r0, #16
 801ea4c:	d405      	bmi.n	801ea5a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ea4e:	4555      	cmp	r5, sl
 801ea50:	da03      	bge.n	801ea5a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ea52:	1415      	asrs	r5, r2, #16
 801ea54:	d401      	bmi.n	801ea5a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ea56:	454d      	cmp	r5, r9
 801ea58:	db05      	blt.n	801ea66 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ea5a:	4440      	add	r0, r8
 801ea5c:	4472      	add	r2, lr
 801ea5e:	3b01      	subs	r3, #1
 801ea60:	3403      	adds	r4, #3
 801ea62:	e7f0      	b.n	801ea46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ea64:	d03f      	beq.n	801eae6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801ea66:	1e5d      	subs	r5, r3, #1
 801ea68:	fb08 0c05 	mla	ip, r8, r5, r0
 801ea6c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ea70:	d42e      	bmi.n	801ead0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ea72:	45d4      	cmp	ip, sl
 801ea74:	da2c      	bge.n	801ead0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ea76:	fb0e 2505 	mla	r5, lr, r5, r2
 801ea7a:	142d      	asrs	r5, r5, #16
 801ea7c:	d428      	bmi.n	801ead0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ea7e:	454d      	cmp	r5, r9
 801ea80:	da26      	bge.n	801ead0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ea82:	1ce5      	adds	r5, r4, #3
 801ea84:	469c      	mov	ip, r3
 801ea86:	f1bc 0f00 	cmp.w	ip, #0
 801ea8a:	f105 0503 	add.w	r5, r5, #3
 801ea8e:	dd25      	ble.n	801eadc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ea90:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ea94:	ea4f 4922 	mov.w	r9, r2, asr #16
 801ea98:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ea9c:	4472      	add	r2, lr
 801ea9e:	468a      	mov	sl, r1
 801eaa0:	9901      	ldr	r1, [sp, #4]
 801eaa2:	fb0a 1909 	mla	r9, sl, r9, r1
 801eaa6:	1401      	asrs	r1, r0, #16
 801eaa8:	4440      	add	r0, r8
 801eaaa:	f819 9001 	ldrb.w	r9, [r9, r1]
 801eaae:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801eab2:	eb07 0a09 	add.w	sl, r7, r9
 801eab6:	f817 9009 	ldrb.w	r9, [r7, r9]
 801eaba:	f805 9c06 	strb.w	r9, [r5, #-6]
 801eabe:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801eac2:	f805 9c05 	strb.w	r9, [r5, #-5]
 801eac6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801eaca:	f805 9c04 	strb.w	r9, [r5, #-4]
 801eace:	e7da      	b.n	801ea86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ead0:	2500      	movs	r5, #0
 801ead2:	eba3 0c05 	sub.w	ip, r3, r5
 801ead6:	f1bc 0f00 	cmp.w	ip, #0
 801eada:	dc3b      	bgt.n	801eb54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801eadc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eae4:	441c      	add	r4, r3
 801eae6:	9b00      	ldr	r3, [sp, #0]
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	dd5e      	ble.n	801ebaa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801eaec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eaf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eaf2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eaf6:	eeb0 6a62 	vmov.f32	s12, s5
 801eafa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eafe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb06:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801eb0a:	eeb0 6a43 	vmov.f32	s12, s6
 801eb0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb12:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801eb16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb2e:	ee12 2a90 	vmov	r2, s5
 801eb32:	eef0 2a47 	vmov.f32	s5, s14
 801eb36:	fb92 f8f3 	sdiv	r8, r2, r3
 801eb3a:	ee13 2a10 	vmov	r2, s6
 801eb3e:	eeb0 3a67 	vmov.f32	s6, s15
 801eb42:	fb92 fef3 	sdiv	lr, r2, r3
 801eb46:	9b00      	ldr	r3, [sp, #0]
 801eb48:	3b01      	subs	r3, #1
 801eb4a:	9300      	str	r3, [sp, #0]
 801eb4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb4e:	bf08      	it	eq
 801eb50:	465b      	moveq	r3, fp
 801eb52:	e767      	b.n	801ea24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801eb54:	ea5f 4920 	movs.w	r9, r0, asr #16
 801eb58:	d423      	bmi.n	801eba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb5a:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801eb5e:	45cc      	cmp	ip, r9
 801eb60:	dd1f      	ble.n	801eba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb62:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801eb66:	d41c      	bmi.n	801eba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb68:	68f1      	ldr	r1, [r6, #12]
 801eb6a:	4551      	cmp	r1, sl
 801eb6c:	dd19      	ble.n	801eba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb6e:	fa0f fc8c 	sxth.w	ip, ip
 801eb72:	9901      	ldr	r1, [sp, #4]
 801eb74:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801eb78:	f81c c009 	ldrb.w	ip, [ip, r9]
 801eb7c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801eb80:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801eb84:	eb07 090c 	add.w	r9, r7, ip
 801eb88:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801eb8c:	f804 a00c 	strb.w	sl, [r4, ip]
 801eb90:	44a4      	add	ip, r4
 801eb92:	f899 a001 	ldrb.w	sl, [r9, #1]
 801eb96:	f88c a001 	strb.w	sl, [ip, #1]
 801eb9a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801eb9e:	f88c 9002 	strb.w	r9, [ip, #2]
 801eba2:	4440      	add	r0, r8
 801eba4:	4472      	add	r2, lr
 801eba6:	3501      	adds	r5, #1
 801eba8:	e793      	b.n	801ead2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801ebaa:	b003      	add	sp, #12
 801ebac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ebb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebb4:	b085      	sub	sp, #20
 801ebb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ebbc:	9202      	str	r2, [sp, #8]
 801ebbe:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801ebc2:	6860      	ldr	r0, [r4, #4]
 801ebc4:	9203      	str	r2, [sp, #12]
 801ebc6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ebca:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801ebce:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801ebd2:	fb00 2505 	mla	r5, r0, r5, r2
 801ebd6:	6822      	ldr	r2, [r4, #0]
 801ebd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ebdc:	4415      	add	r5, r2
 801ebde:	f8dc 2000 	ldr.w	r2, [ip]
 801ebe2:	9200      	str	r2, [sp, #0]
 801ebe4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ebe8:	3204      	adds	r2, #4
 801ebea:	9201      	str	r2, [sp, #4]
 801ebec:	2900      	cmp	r1, #0
 801ebee:	dc03      	bgt.n	801ebf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ebf0:	9a02      	ldr	r2, [sp, #8]
 801ebf2:	2a00      	cmp	r2, #0
 801ebf4:	f340 8127 	ble.w	801ee46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ebf8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ebfa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ebfe:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ec02:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ec04:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ec08:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	dd0d      	ble.n	801ec2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ec10:	1422      	asrs	r2, r4, #16
 801ec12:	d405      	bmi.n	801ec20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ec14:	4542      	cmp	r2, r8
 801ec16:	da03      	bge.n	801ec20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ec18:	1402      	asrs	r2, r0, #16
 801ec1a:	d401      	bmi.n	801ec20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ec1c:	42ba      	cmp	r2, r7
 801ec1e:	db06      	blt.n	801ec2e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ec20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ec22:	4474      	add	r4, lr
 801ec24:	3b01      	subs	r3, #1
 801ec26:	3503      	adds	r5, #3
 801ec28:	4410      	add	r0, r2
 801ec2a:	e7ef      	b.n	801ec0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ec2c:	d075      	beq.n	801ed1a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ec2e:	1e5a      	subs	r2, r3, #1
 801ec30:	fb0e 4602 	mla	r6, lr, r2, r4
 801ec34:	1436      	asrs	r6, r6, #16
 801ec36:	d465      	bmi.n	801ed04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ec38:	4546      	cmp	r6, r8
 801ec3a:	da63      	bge.n	801ed04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ec3c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ec3e:	fb06 0202 	mla	r2, r6, r2, r0
 801ec42:	1412      	asrs	r2, r2, #16
 801ec44:	d45e      	bmi.n	801ed04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ec46:	42ba      	cmp	r2, r7
 801ec48:	da5c      	bge.n	801ed04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ec4a:	1cef      	adds	r7, r5, #3
 801ec4c:	4699      	mov	r9, r3
 801ec4e:	f1b9 0f00 	cmp.w	r9, #0
 801ec52:	dd5d      	ble.n	801ed10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ec54:	1402      	asrs	r2, r0, #16
 801ec56:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ec5a:	1426      	asrs	r6, r4, #16
 801ec5c:	4692      	mov	sl, r2
 801ec5e:	9a00      	ldr	r2, [sp, #0]
 801ec60:	fb08 220a 	mla	r2, r8, sl, r2
 801ec64:	5d92      	ldrb	r2, [r2, r6]
 801ec66:	9e01      	ldr	r6, [sp, #4]
 801ec68:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ec6c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801ec70:	d041      	beq.n	801ecf6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ec72:	9a03      	ldr	r2, [sp, #12]
 801ec74:	fa5f fb86 	uxtb.w	fp, r6
 801ec78:	fb02 f808 	mul.w	r8, r2, r8
 801ec7c:	f108 0201 	add.w	r2, r8, #1
 801ec80:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801ec84:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801ec88:	1212      	asrs	r2, r2, #8
 801ec8a:	fa1f fa82 	uxth.w	sl, r2
 801ec8e:	43d2      	mvns	r2, r2
 801ec90:	fb1b fb0a 	smulbb	fp, fp, sl
 801ec94:	b2d2      	uxtb	r2, r2
 801ec96:	fb08 b802 	mla	r8, r8, r2, fp
 801ec9a:	fa1f f888 	uxth.w	r8, r8
 801ec9e:	f108 0b01 	add.w	fp, r8, #1
 801eca2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801eca6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ecaa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ecae:	fb1b fb0a 	smulbb	fp, fp, sl
 801ecb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ecb6:	fb16 fa0a 	smulbb	sl, r6, sl
 801ecba:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ecbe:	f807 8c03 	strb.w	r8, [r7, #-3]
 801ecc2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801ecc6:	fb06 aa02 	mla	sl, r6, r2, sl
 801ecca:	fb08 b802 	mla	r8, r8, r2, fp
 801ecce:	fa1f fa8a 	uxth.w	sl, sl
 801ecd2:	fa1f f888 	uxth.w	r8, r8
 801ecd6:	f10a 0601 	add.w	r6, sl, #1
 801ecda:	f108 0b01 	add.w	fp, r8, #1
 801ecde:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ece2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ece6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ecea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ecee:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ecf2:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ecf6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ecf8:	4474      	add	r4, lr
 801ecfa:	3703      	adds	r7, #3
 801ecfc:	f109 39ff 	add.w	r9, r9, #4294967295
 801ed00:	4410      	add	r0, r2
 801ed02:	e7a4      	b.n	801ec4e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ed04:	f04f 0800 	mov.w	r8, #0
 801ed08:	eba3 0208 	sub.w	r2, r3, r8
 801ed0c:	2a00      	cmp	r2, #0
 801ed0e:	dc3b      	bgt.n	801ed88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801ed10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed18:	441d      	add	r5, r3
 801ed1a:	2900      	cmp	r1, #0
 801ed1c:	f340 8093 	ble.w	801ee46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ed20:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed2a:	3901      	subs	r1, #1
 801ed2c:	eeb0 6a62 	vmov.f32	s12, s5
 801ed30:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed34:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed3c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ed40:	eeb0 6a43 	vmov.f32	s12, s6
 801ed44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed48:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ed4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed50:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed64:	ee12 2a90 	vmov	r2, s5
 801ed68:	eef0 2a47 	vmov.f32	s5, s14
 801ed6c:	fb92 fef3 	sdiv	lr, r2, r3
 801ed70:	ee13 2a10 	vmov	r2, s6
 801ed74:	eeb0 3a67 	vmov.f32	s6, s15
 801ed78:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed7c:	9a02      	ldr	r2, [sp, #8]
 801ed7e:	9312      	str	r3, [sp, #72]	@ 0x48
 801ed80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed82:	bf08      	it	eq
 801ed84:	4613      	moveq	r3, r2
 801ed86:	e731      	b.n	801ebec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ed88:	1427      	asrs	r7, r4, #16
 801ed8a:	d456      	bmi.n	801ee3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ed8c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ed90:	42be      	cmp	r6, r7
 801ed92:	dd52      	ble.n	801ee3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ed94:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ed98:	d44f      	bmi.n	801ee3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ed9a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ed9e:	454a      	cmp	r2, r9
 801eda0:	dd4b      	ble.n	801ee3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eda2:	9a00      	ldr	r2, [sp, #0]
 801eda4:	b236      	sxth	r6, r6
 801eda6:	fb09 2606 	mla	r6, r9, r6, r2
 801edaa:	5df2      	ldrb	r2, [r6, r7]
 801edac:	9e01      	ldr	r6, [sp, #4]
 801edae:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801edb2:	0e3a      	lsrs	r2, r7, #24
 801edb4:	d041      	beq.n	801ee3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801edb6:	9e03      	ldr	r6, [sp, #12]
 801edb8:	fa5f fb87 	uxtb.w	fp, r7
 801edbc:	4372      	muls	r2, r6
 801edbe:	1c56      	adds	r6, r2, #1
 801edc0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801edc4:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801edc8:	1212      	asrs	r2, r2, #8
 801edca:	f815 9006 	ldrb.w	r9, [r5, r6]
 801edce:	fa1f fa82 	uxth.w	sl, r2
 801edd2:	43d2      	mvns	r2, r2
 801edd4:	fb1b fb0a 	smulbb	fp, fp, sl
 801edd8:	b2d2      	uxtb	r2, r2
 801edda:	fb09 b902 	mla	r9, r9, r2, fp
 801edde:	fa1f f989 	uxth.w	r9, r9
 801ede2:	f109 0b01 	add.w	fp, r9, #1
 801ede6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801edea:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801edee:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801edf2:	fb1b fb0a 	smulbb	fp, fp, sl
 801edf6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801edfa:	fb17 fa0a 	smulbb	sl, r7, sl
 801edfe:	f805 9006 	strb.w	r9, [r5, r6]
 801ee02:	442e      	add	r6, r5
 801ee04:	78b7      	ldrb	r7, [r6, #2]
 801ee06:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ee0a:	fb07 aa02 	mla	sl, r7, r2, sl
 801ee0e:	fb09 b902 	mla	r9, r9, r2, fp
 801ee12:	fa1f fa8a 	uxth.w	sl, sl
 801ee16:	fa1f f989 	uxth.w	r9, r9
 801ee1a:	f10a 0701 	add.w	r7, sl, #1
 801ee1e:	f109 0b01 	add.w	fp, r9, #1
 801ee22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee26:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ee2a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ee2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ee32:	f886 a002 	strb.w	sl, [r6, #2]
 801ee36:	f886 9001 	strb.w	r9, [r6, #1]
 801ee3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ee3c:	4474      	add	r4, lr
 801ee3e:	f108 0801 	add.w	r8, r8, #1
 801ee42:	4410      	add	r0, r2
 801ee44:	e760      	b.n	801ed08 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801ee46:	b005      	add	sp, #20
 801ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee50:	b085      	sub	sp, #20
 801ee52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee56:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ee58:	9203      	str	r2, [sp, #12]
 801ee5a:	6868      	ldr	r0, [r5, #4]
 801ee5c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ee60:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801ee64:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ee68:	fb00 2404 	mla	r4, r0, r4, r2
 801ee6c:	682a      	ldr	r2, [r5, #0]
 801ee6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ee72:	4414      	add	r4, r2
 801ee74:	f8dc 2000 	ldr.w	r2, [ip]
 801ee78:	9201      	str	r2, [sp, #4]
 801ee7a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ee7e:	3204      	adds	r2, #4
 801ee80:	9202      	str	r2, [sp, #8]
 801ee82:	2900      	cmp	r1, #0
 801ee84:	dc03      	bgt.n	801ee8e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ee86:	9a03      	ldr	r2, [sp, #12]
 801ee88:	2a00      	cmp	r2, #0
 801ee8a:	f340 8137 	ble.w	801f0fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee8e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ee90:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ee94:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ee98:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ee9a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ee9e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801eea2:	2b00      	cmp	r3, #0
 801eea4:	dd0d      	ble.n	801eec2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eea6:	1405      	asrs	r5, r0, #16
 801eea8:	d405      	bmi.n	801eeb6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801eeaa:	4545      	cmp	r5, r8
 801eeac:	da03      	bge.n	801eeb6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801eeae:	1415      	asrs	r5, r2, #16
 801eeb0:	d401      	bmi.n	801eeb6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801eeb2:	42bd      	cmp	r5, r7
 801eeb4:	db06      	blt.n	801eec4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eeb6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801eeb8:	4470      	add	r0, lr
 801eeba:	3b01      	subs	r3, #1
 801eebc:	3403      	adds	r4, #3
 801eebe:	442a      	add	r2, r5
 801eec0:	e7ef      	b.n	801eea2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801eec2:	d070      	beq.n	801efa6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801eec4:	1e5d      	subs	r5, r3, #1
 801eec6:	fb0e 0605 	mla	r6, lr, r5, r0
 801eeca:	1436      	asrs	r6, r6, #16
 801eecc:	d462      	bmi.n	801ef94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801eece:	4546      	cmp	r6, r8
 801eed0:	da60      	bge.n	801ef94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801eed2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801eed4:	fb06 2505 	mla	r5, r6, r5, r2
 801eed8:	142d      	asrs	r5, r5, #16
 801eeda:	d45b      	bmi.n	801ef94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801eedc:	42bd      	cmp	r5, r7
 801eede:	da59      	bge.n	801ef94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801eee0:	1ce5      	adds	r5, r4, #3
 801eee2:	469a      	mov	sl, r3
 801eee4:	f1ba 0f00 	cmp.w	sl, #0
 801eee8:	dd58      	ble.n	801ef9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801eeea:	1416      	asrs	r6, r2, #16
 801eeec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801eef0:	1407      	asrs	r7, r0, #16
 801eef2:	46b1      	mov	r9, r6
 801eef4:	9e01      	ldr	r6, [sp, #4]
 801eef6:	fb08 6609 	mla	r6, r8, r9, r6
 801eefa:	5df6      	ldrb	r6, [r6, r7]
 801eefc:	9f02      	ldr	r7, [sp, #8]
 801eefe:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801ef02:	0e37      	lsrs	r7, r6, #24
 801ef04:	2fff      	cmp	r7, #255	@ 0xff
 801ef06:	f000 80f0 	beq.w	801f0ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ef0a:	fa5f f887 	uxtb.w	r8, r7
 801ef0e:	b3d7      	cbz	r7, 801ef86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ef10:	fa1f f788 	uxth.w	r7, r8
 801ef14:	ea6f 0808 	mvn.w	r8, r8
 801ef18:	fa5f fb86 	uxtb.w	fp, r6
 801ef1c:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801ef20:	fa5f f888 	uxtb.w	r8, r8
 801ef24:	fb1b fb07 	smulbb	fp, fp, r7
 801ef28:	fb09 b908 	mla	r9, r9, r8, fp
 801ef2c:	fa1f f989 	uxth.w	r9, r9
 801ef30:	f109 0b01 	add.w	fp, r9, #1
 801ef34:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ef38:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801ef3c:	fb1b fb08 	smulbb	fp, fp, r8
 801ef40:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ef44:	f805 9c03 	strb.w	r9, [r5, #-3]
 801ef48:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801ef4c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ef50:	fb09 b907 	mla	r9, r9, r7, fp
 801ef54:	fa1f f989 	uxth.w	r9, r9
 801ef58:	f109 0b01 	add.w	fp, r9, #1
 801ef5c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ef60:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ef64:	f805 9c02 	strb.w	r9, [r5, #-2]
 801ef68:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801ef6c:	fb19 f808 	smulbb	r8, r9, r8
 801ef70:	fb06 8607 	mla	r6, r6, r7, r8
 801ef74:	b2b6      	uxth	r6, r6
 801ef76:	f106 0801 	add.w	r8, r6, #1
 801ef7a:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801ef7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ef82:	f805 8c01 	strb.w	r8, [r5, #-1]
 801ef86:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ef88:	4470      	add	r0, lr
 801ef8a:	3503      	adds	r5, #3
 801ef8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ef90:	4432      	add	r2, r6
 801ef92:	e7a7      	b.n	801eee4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ef94:	2600      	movs	r6, #0
 801ef96:	1b9d      	subs	r5, r3, r6
 801ef98:	2d00      	cmp	r5, #0
 801ef9a:	dc3b      	bgt.n	801f014 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ef9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efa4:	441c      	add	r4, r3
 801efa6:	2900      	cmp	r1, #0
 801efa8:	f340 80a8 	ble.w	801f0fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801efac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efb2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efb6:	3901      	subs	r1, #1
 801efb8:	eeb0 6a62 	vmov.f32	s12, s5
 801efbc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801efc0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efc8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801efcc:	eeb0 6a43 	vmov.f32	s12, s6
 801efd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efd4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801efd8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801efdc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801efe0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801efe4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801efe8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801efec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eff0:	ee12 2a90 	vmov	r2, s5
 801eff4:	eef0 2a47 	vmov.f32	s5, s14
 801eff8:	fb92 fef3 	sdiv	lr, r2, r3
 801effc:	ee13 2a10 	vmov	r2, s6
 801f000:	eeb0 3a67 	vmov.f32	s6, s15
 801f004:	fb92 f3f3 	sdiv	r3, r2, r3
 801f008:	9a03      	ldr	r2, [sp, #12]
 801f00a:	9312      	str	r3, [sp, #72]	@ 0x48
 801f00c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f00e:	bf08      	it	eq
 801f010:	4613      	moveq	r3, r2
 801f012:	e736      	b.n	801ee82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f014:	ea5f 4820 	movs.w	r8, r0, asr #16
 801f018:	d457      	bmi.n	801f0ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f01a:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801f01e:	4547      	cmp	r7, r8
 801f020:	dd53      	ble.n	801f0ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f022:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f026:	d450      	bmi.n	801f0ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f028:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801f02c:	454d      	cmp	r5, r9
 801f02e:	dd4c      	ble.n	801f0ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f030:	9d01      	ldr	r5, [sp, #4]
 801f032:	b23f      	sxth	r7, r7
 801f034:	fb09 5707 	mla	r7, r9, r7, r5
 801f038:	f817 5008 	ldrb.w	r5, [r7, r8]
 801f03c:	9f02      	ldr	r7, [sp, #8]
 801f03e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f042:	0e2f      	lsrs	r7, r5, #24
 801f044:	2fff      	cmp	r7, #255	@ 0xff
 801f046:	d045      	beq.n	801f0d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f048:	fa5f f987 	uxtb.w	r9, r7
 801f04c:	b3ef      	cbz	r7, 801f0ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f04e:	fa1f f889 	uxth.w	r8, r9
 801f052:	ea6f 0909 	mvn.w	r9, r9
 801f056:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f05a:	fa5f fb85 	uxtb.w	fp, r5
 801f05e:	f814 a007 	ldrb.w	sl, [r4, r7]
 801f062:	fa5f f989 	uxtb.w	r9, r9
 801f066:	fb1b fb08 	smulbb	fp, fp, r8
 801f06a:	fb0a ba09 	mla	sl, sl, r9, fp
 801f06e:	fa1f fa8a 	uxth.w	sl, sl
 801f072:	f10a 0b01 	add.w	fp, sl, #1
 801f076:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f07a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f07e:	f804 a007 	strb.w	sl, [r4, r7]
 801f082:	4427      	add	r7, r4
 801f084:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f088:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801f08c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f090:	fb1b fb09 	smulbb	fp, fp, r9
 801f094:	fb0a ba08 	mla	sl, sl, r8, fp
 801f098:	fa1f fa8a 	uxth.w	sl, sl
 801f09c:	f10a 0b01 	add.w	fp, sl, #1
 801f0a0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f0a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f0a8:	f887 a001 	strb.w	sl, [r7, #1]
 801f0ac:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f0b0:	fb1a f909 	smulbb	r9, sl, r9
 801f0b4:	fb05 9508 	mla	r5, r5, r8, r9
 801f0b8:	b2ad      	uxth	r5, r5
 801f0ba:	f105 0901 	add.w	r9, r5, #1
 801f0be:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801f0c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f0c6:	f887 9002 	strb.w	r9, [r7, #2]
 801f0ca:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f0cc:	4470      	add	r0, lr
 801f0ce:	3601      	adds	r6, #1
 801f0d0:	442a      	add	r2, r5
 801f0d2:	e760      	b.n	801ef96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f0d4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f0d8:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801f0dc:	55e5      	strb	r5, [r4, r7]
 801f0de:	4427      	add	r7, r4
 801f0e0:	0c2d      	lsrs	r5, r5, #16
 801f0e2:	f887 8001 	strb.w	r8, [r7, #1]
 801f0e6:	70bd      	strb	r5, [r7, #2]
 801f0e8:	e7ef      	b.n	801f0ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f0ea:	0a37      	lsrs	r7, r6, #8
 801f0ec:	f805 6c03 	strb.w	r6, [r5, #-3]
 801f0f0:	0c36      	lsrs	r6, r6, #16
 801f0f2:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f0f6:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f0fa:	e744      	b.n	801ef86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f0fc:	b005      	add	sp, #20
 801f0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f102 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f106:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f108:	9201      	str	r2, [sp, #4]
 801f10a:	6870      	ldr	r0, [r6, #4]
 801f10c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801f110:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801f114:	fa1f fe85 	uxth.w	lr, r5
 801f118:	43ed      	mvns	r5, r5
 801f11a:	f8dc 8000 	ldr.w	r8, [ip]
 801f11e:	b2ed      	uxtb	r5, r5
 801f120:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801f124:	fb00 2404 	mla	r4, r0, r4, r2
 801f128:	6832      	ldr	r2, [r6, #0]
 801f12a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f12e:	4414      	add	r4, r2
 801f130:	2900      	cmp	r1, #0
 801f132:	dc03      	bgt.n	801f13c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f134:	9a01      	ldr	r2, [sp, #4]
 801f136:	2a00      	cmp	r2, #0
 801f138:	f340 810d 	ble.w	801f356 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f13c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f13e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801f142:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f146:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f148:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801f14c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f150:	2b00      	cmp	r3, #0
 801f152:	dd0e      	ble.n	801f172 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f154:	1406      	asrs	r6, r0, #16
 801f156:	d405      	bmi.n	801f164 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f158:	4556      	cmp	r6, sl
 801f15a:	da03      	bge.n	801f164 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f15c:	1416      	asrs	r6, r2, #16
 801f15e:	d401      	bmi.n	801f164 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f160:	454e      	cmp	r6, r9
 801f162:	db07      	blt.n	801f174 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f164:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801f166:	3b01      	subs	r3, #1
 801f168:	3403      	adds	r4, #3
 801f16a:	4430      	add	r0, r6
 801f16c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801f16e:	4432      	add	r2, r6
 801f170:	e7ee      	b.n	801f150 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f172:	d060      	beq.n	801f236 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801f174:	1e5e      	subs	r6, r3, #1
 801f176:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f178:	fb07 0706 	mla	r7, r7, r6, r0
 801f17c:	143f      	asrs	r7, r7, #16
 801f17e:	d451      	bmi.n	801f224 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f180:	4557      	cmp	r7, sl
 801f182:	da4f      	bge.n	801f224 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f184:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f186:	fb07 2606 	mla	r6, r7, r6, r2
 801f18a:	1436      	asrs	r6, r6, #16
 801f18c:	d44a      	bmi.n	801f224 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f18e:	454e      	cmp	r6, r9
 801f190:	da48      	bge.n	801f224 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f192:	1ce6      	adds	r6, r4, #3
 801f194:	4699      	mov	r9, r3
 801f196:	f1b9 0f00 	cmp.w	r9, #0
 801f19a:	f106 0603 	add.w	r6, r6, #3
 801f19e:	dd45      	ble.n	801f22c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801f1a0:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801f1a4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f1a8:	1417      	asrs	r7, r2, #16
 801f1aa:	f109 39ff 	add.w	r9, r9, #4294967295
 801f1ae:	fb0b a707 	mla	r7, fp, r7, sl
 801f1b2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f1b6:	fb1b fb05 	smulbb	fp, fp, r5
 801f1ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f1be:	eb08 0a07 	add.w	sl, r8, r7
 801f1c2:	f818 7007 	ldrb.w	r7, [r8, r7]
 801f1c6:	fb07 b70e 	mla	r7, r7, lr, fp
 801f1ca:	b2bf      	uxth	r7, r7
 801f1cc:	f107 0b01 	add.w	fp, r7, #1
 801f1d0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f1d4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f1d8:	fb1b fb05 	smulbb	fp, fp, r5
 801f1dc:	123f      	asrs	r7, r7, #8
 801f1de:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f1e2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f1e6:	fb07 b70e 	mla	r7, r7, lr, fp
 801f1ea:	b2bf      	uxth	r7, r7
 801f1ec:	f107 0b01 	add.w	fp, r7, #1
 801f1f0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f1f4:	123f      	asrs	r7, r7, #8
 801f1f6:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f1fa:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f1fe:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f202:	fb1a fa05 	smulbb	sl, sl, r5
 801f206:	fb07 a70e 	mla	r7, r7, lr, sl
 801f20a:	b2bf      	uxth	r7, r7
 801f20c:	f107 0a01 	add.w	sl, r7, #1
 801f210:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f214:	123f      	asrs	r7, r7, #8
 801f216:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f21a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f21c:	4438      	add	r0, r7
 801f21e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f220:	443a      	add	r2, r7
 801f222:	e7b8      	b.n	801f196 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f224:	2700      	movs	r7, #0
 801f226:	1bde      	subs	r6, r3, r7
 801f228:	2e00      	cmp	r6, #0
 801f22a:	dc3f      	bgt.n	801f2ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f22c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f234:	441c      	add	r4, r3
 801f236:	2900      	cmp	r1, #0
 801f238:	f340 808d 	ble.w	801f356 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f23c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f240:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f242:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f246:	3901      	subs	r1, #1
 801f248:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f24c:	eef0 6a62 	vmov.f32	s13, s5
 801f250:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f254:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f258:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f25c:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801f260:	eef0 6a43 	vmov.f32	s13, s6
 801f264:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f268:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801f26c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f270:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f274:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f278:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f27c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f280:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f284:	ee12 2a90 	vmov	r2, s5
 801f288:	eef0 2a47 	vmov.f32	s5, s14
 801f28c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f290:	ee13 2a10 	vmov	r2, s6
 801f294:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f298:	eeb0 3a67 	vmov.f32	s6, s15
 801f29c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2a0:	9a01      	ldr	r2, [sp, #4]
 801f2a2:	9310      	str	r3, [sp, #64]	@ 0x40
 801f2a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f2a6:	bf08      	it	eq
 801f2a8:	4613      	moveq	r3, r2
 801f2aa:	e741      	b.n	801f130 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f2ac:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f2b0:	d44b      	bmi.n	801f34a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f2b2:	f8dc b008 	ldr.w	fp, [ip, #8]
 801f2b6:	45cb      	cmp	fp, r9
 801f2b8:	dd47      	ble.n	801f34a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f2ba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f2be:	d444      	bmi.n	801f34a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f2c0:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801f2c4:	4556      	cmp	r6, sl
 801f2c6:	dd40      	ble.n	801f34a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f2c8:	fa0f f68b 	sxth.w	r6, fp
 801f2cc:	fb0a 9906 	mla	r9, sl, r6, r9
 801f2d0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f2d4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f2d8:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f2dc:	fb1b fb05 	smulbb	fp, fp, r5
 801f2e0:	eb08 0a09 	add.w	sl, r8, r9
 801f2e4:	f818 9009 	ldrb.w	r9, [r8, r9]
 801f2e8:	fb09 b90e 	mla	r9, r9, lr, fp
 801f2ec:	fa1f f989 	uxth.w	r9, r9
 801f2f0:	f109 0b01 	add.w	fp, r9, #1
 801f2f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f2f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f2fc:	f804 9006 	strb.w	r9, [r4, r6]
 801f300:	4426      	add	r6, r4
 801f302:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f306:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f30a:	fb1b fb05 	smulbb	fp, fp, r5
 801f30e:	fb09 b90e 	mla	r9, r9, lr, fp
 801f312:	fa1f f989 	uxth.w	r9, r9
 801f316:	f109 0b01 	add.w	fp, r9, #1
 801f31a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f31e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f322:	f886 9001 	strb.w	r9, [r6, #1]
 801f326:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f32a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f32e:	fb1a fa05 	smulbb	sl, sl, r5
 801f332:	fb09 a90e 	mla	r9, r9, lr, sl
 801f336:	fa1f f989 	uxth.w	r9, r9
 801f33a:	f109 0a01 	add.w	sl, r9, #1
 801f33e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f342:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f346:	f886 9002 	strb.w	r9, [r6, #2]
 801f34a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801f34c:	3701      	adds	r7, #1
 801f34e:	4430      	add	r0, r6
 801f350:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801f352:	4432      	add	r2, r6
 801f354:	e767      	b.n	801f226 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f356:	b003      	add	sp, #12
 801f358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f35c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f360:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f366:	9201      	str	r2, [sp, #4]
 801f368:	6868      	ldr	r0, [r5, #4]
 801f36a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801f36c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801f370:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801f374:	fb00 2404 	mla	r4, r0, r4, r2
 801f378:	682a      	ldr	r2, [r5, #0]
 801f37a:	f8d7 8000 	ldr.w	r8, [r7]
 801f37e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f382:	4414      	add	r4, r2
 801f384:	2900      	cmp	r1, #0
 801f386:	dc03      	bgt.n	801f390 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f388:	9a01      	ldr	r2, [sp, #4]
 801f38a:	2a00      	cmp	r2, #0
 801f38c:	f340 80af 	ble.w	801f4ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f390:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f392:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801f396:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f39a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f39c:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801f3a0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	dd0c      	ble.n	801f3c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f3a8:	1405      	asrs	r5, r0, #16
 801f3aa:	d405      	bmi.n	801f3b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f3ac:	4555      	cmp	r5, sl
 801f3ae:	da03      	bge.n	801f3b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f3b0:	1415      	asrs	r5, r2, #16
 801f3b2:	d401      	bmi.n	801f3b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f3b4:	454d      	cmp	r5, r9
 801f3b6:	db05      	blt.n	801f3c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f3b8:	4470      	add	r0, lr
 801f3ba:	4462      	add	r2, ip
 801f3bc:	3b01      	subs	r3, #1
 801f3be:	3403      	adds	r4, #3
 801f3c0:	e7f0      	b.n	801f3a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f3c2:	d038      	beq.n	801f436 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f3c4:	1e5d      	subs	r5, r3, #1
 801f3c6:	fb0e 0605 	mla	r6, lr, r5, r0
 801f3ca:	1436      	asrs	r6, r6, #16
 801f3cc:	d42a      	bmi.n	801f424 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f3ce:	4556      	cmp	r6, sl
 801f3d0:	da28      	bge.n	801f424 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f3d2:	fb0c 2505 	mla	r5, ip, r5, r2
 801f3d6:	142d      	asrs	r5, r5, #16
 801f3d8:	d424      	bmi.n	801f424 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f3da:	454d      	cmp	r5, r9
 801f3dc:	da22      	bge.n	801f424 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f3de:	1ce6      	adds	r6, r4, #3
 801f3e0:	4699      	mov	r9, r3
 801f3e2:	f1b9 0f00 	cmp.w	r9, #0
 801f3e6:	f106 0603 	add.w	r6, r6, #3
 801f3ea:	dd1f      	ble.n	801f42c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801f3ec:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801f3f0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f3f4:	1415      	asrs	r5, r2, #16
 801f3f6:	4470      	add	r0, lr
 801f3f8:	4462      	add	r2, ip
 801f3fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801f3fe:	fb0b a505 	mla	r5, fp, r5, sl
 801f402:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f406:	eb08 0a05 	add.w	sl, r8, r5
 801f40a:	f818 5005 	ldrb.w	r5, [r8, r5]
 801f40e:	f806 5c06 	strb.w	r5, [r6, #-6]
 801f412:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801f416:	f806 5c05 	strb.w	r5, [r6, #-5]
 801f41a:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801f41e:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f422:	e7de      	b.n	801f3e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f424:	2600      	movs	r6, #0
 801f426:	1b9d      	subs	r5, r3, r6
 801f428:	2d00      	cmp	r5, #0
 801f42a:	dc38      	bgt.n	801f49e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f42c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f434:	441c      	add	r4, r3
 801f436:	2900      	cmp	r1, #0
 801f438:	dd59      	ble.n	801f4ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f43a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f43e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f440:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f444:	3901      	subs	r1, #1
 801f446:	eeb0 6a62 	vmov.f32	s12, s5
 801f44a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f44e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f452:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f456:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801f45a:	eeb0 6a43 	vmov.f32	s12, s6
 801f45e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f462:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801f466:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f46a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f46e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f472:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f476:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f47a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f47e:	ee12 2a90 	vmov	r2, s5
 801f482:	eef0 2a47 	vmov.f32	s5, s14
 801f486:	fb92 fef3 	sdiv	lr, r2, r3
 801f48a:	ee13 2a10 	vmov	r2, s6
 801f48e:	eeb0 3a67 	vmov.f32	s6, s15
 801f492:	fb92 fcf3 	sdiv	ip, r2, r3
 801f496:	9a01      	ldr	r2, [sp, #4]
 801f498:	bf08      	it	eq
 801f49a:	4613      	moveq	r3, r2
 801f49c:	e772      	b.n	801f384 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801f49e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f4a2:	d420      	bmi.n	801f4e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f4a4:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801f4a8:	45cb      	cmp	fp, r9
 801f4aa:	dd1c      	ble.n	801f4e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f4ac:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f4b0:	d419      	bmi.n	801f4e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f4b2:	68fd      	ldr	r5, [r7, #12]
 801f4b4:	4555      	cmp	r5, sl
 801f4b6:	dd16      	ble.n	801f4e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f4b8:	fa0f f58b 	sxth.w	r5, fp
 801f4bc:	fb0a 9505 	mla	r5, sl, r5, r9
 801f4c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4c4:	f818 9005 	ldrb.w	r9, [r8, r5]
 801f4c8:	eb08 0b05 	add.w	fp, r8, r5
 801f4cc:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801f4d0:	f804 9005 	strb.w	r9, [r4, r5]
 801f4d4:	4425      	add	r5, r4
 801f4d6:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801f4da:	f885 9001 	strb.w	r9, [r5, #1]
 801f4de:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f4e2:	f885 9002 	strb.w	r9, [r5, #2]
 801f4e6:	4470      	add	r0, lr
 801f4e8:	4462      	add	r2, ip
 801f4ea:	3601      	adds	r6, #1
 801f4ec:	e79b      	b.n	801f426 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801f4ee:	b003      	add	sp, #12
 801f4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4f8:	b085      	sub	sp, #20
 801f4fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f4fe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f500:	9202      	str	r2, [sp, #8]
 801f502:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801f506:	6860      	ldr	r0, [r4, #4]
 801f508:	9203      	str	r2, [sp, #12]
 801f50a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f50e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801f512:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801f516:	fb00 2505 	mla	r5, r0, r5, r2
 801f51a:	6822      	ldr	r2, [r4, #0]
 801f51c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f520:	4415      	add	r5, r2
 801f522:	f8dc 2000 	ldr.w	r2, [ip]
 801f526:	9201      	str	r2, [sp, #4]
 801f528:	2900      	cmp	r1, #0
 801f52a:	dc03      	bgt.n	801f534 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f52c:	9a02      	ldr	r2, [sp, #8]
 801f52e:	2a00      	cmp	r2, #0
 801f530:	f340 8122 	ble.w	801f778 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f534:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f536:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f53a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801f53e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f540:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f544:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f548:	2b00      	cmp	r3, #0
 801f54a:	dd0d      	ble.n	801f568 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f54c:	1422      	asrs	r2, r4, #16
 801f54e:	d405      	bmi.n	801f55c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f550:	4542      	cmp	r2, r8
 801f552:	da03      	bge.n	801f55c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f554:	1402      	asrs	r2, r0, #16
 801f556:	d401      	bmi.n	801f55c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f558:	42ba      	cmp	r2, r7
 801f55a:	db06      	blt.n	801f56a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f55c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f55e:	4474      	add	r4, lr
 801f560:	3b01      	subs	r3, #1
 801f562:	3503      	adds	r5, #3
 801f564:	4410      	add	r0, r2
 801f566:	e7ef      	b.n	801f548 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f568:	d072      	beq.n	801f650 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f56a:	1e5a      	subs	r2, r3, #1
 801f56c:	fb0e 4602 	mla	r6, lr, r2, r4
 801f570:	1436      	asrs	r6, r6, #16
 801f572:	d462      	bmi.n	801f63a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f574:	4546      	cmp	r6, r8
 801f576:	da60      	bge.n	801f63a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f578:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f57a:	fb06 0202 	mla	r2, r6, r2, r0
 801f57e:	1412      	asrs	r2, r2, #16
 801f580:	d45b      	bmi.n	801f63a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f582:	42ba      	cmp	r2, r7
 801f584:	da59      	bge.n	801f63a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f586:	1cef      	adds	r7, r5, #3
 801f588:	4699      	mov	r9, r3
 801f58a:	f1b9 0f00 	cmp.w	r9, #0
 801f58e:	dd5a      	ble.n	801f646 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f590:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f594:	1426      	asrs	r6, r4, #16
 801f596:	1402      	asrs	r2, r0, #16
 801f598:	fb08 6202 	mla	r2, r8, r2, r6
 801f59c:	9e01      	ldr	r6, [sp, #4]
 801f59e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801f5a2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801f5a6:	d041      	beq.n	801f62c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f5a8:	9a03      	ldr	r2, [sp, #12]
 801f5aa:	fa5f fb86 	uxtb.w	fp, r6
 801f5ae:	fb02 f808 	mul.w	r8, r2, r8
 801f5b2:	f108 0201 	add.w	r2, r8, #1
 801f5b6:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801f5ba:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801f5be:	1212      	asrs	r2, r2, #8
 801f5c0:	fa1f fa82 	uxth.w	sl, r2
 801f5c4:	43d2      	mvns	r2, r2
 801f5c6:	fb1b fb0a 	smulbb	fp, fp, sl
 801f5ca:	b2d2      	uxtb	r2, r2
 801f5cc:	fb08 b802 	mla	r8, r8, r2, fp
 801f5d0:	fa1f f888 	uxth.w	r8, r8
 801f5d4:	f108 0b01 	add.w	fp, r8, #1
 801f5d8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f5dc:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f5e0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f5e4:	fb1b fb0a 	smulbb	fp, fp, sl
 801f5e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f5ec:	fb16 fa0a 	smulbb	sl, r6, sl
 801f5f0:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f5f4:	f807 8c03 	strb.w	r8, [r7, #-3]
 801f5f8:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801f5fc:	fb06 aa02 	mla	sl, r6, r2, sl
 801f600:	fb08 b802 	mla	r8, r8, r2, fp
 801f604:	fa1f fa8a 	uxth.w	sl, sl
 801f608:	fa1f f888 	uxth.w	r8, r8
 801f60c:	f10a 0601 	add.w	r6, sl, #1
 801f610:	f108 0b01 	add.w	fp, r8, #1
 801f614:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f618:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f61c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f620:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f624:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f628:	f807 8c02 	strb.w	r8, [r7, #-2]
 801f62c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f62e:	4474      	add	r4, lr
 801f630:	3703      	adds	r7, #3
 801f632:	f109 39ff 	add.w	r9, r9, #4294967295
 801f636:	4410      	add	r0, r2
 801f638:	e7a7      	b.n	801f58a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f63a:	f04f 0800 	mov.w	r8, #0
 801f63e:	eba3 0208 	sub.w	r2, r3, r8
 801f642:	2a00      	cmp	r2, #0
 801f644:	dc3b      	bgt.n	801f6be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f64a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f64e:	441d      	add	r5, r3
 801f650:	2900      	cmp	r1, #0
 801f652:	f340 8091 	ble.w	801f778 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f656:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f65a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f65c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f660:	3901      	subs	r1, #1
 801f662:	eeb0 6a62 	vmov.f32	s12, s5
 801f666:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f66a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f66e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f672:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f676:	eeb0 6a43 	vmov.f32	s12, s6
 801f67a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f67e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f682:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f686:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f68a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f68e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f692:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f696:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f69a:	ee12 2a90 	vmov	r2, s5
 801f69e:	eef0 2a47 	vmov.f32	s5, s14
 801f6a2:	fb92 fef3 	sdiv	lr, r2, r3
 801f6a6:	ee13 2a10 	vmov	r2, s6
 801f6aa:	eeb0 3a67 	vmov.f32	s6, s15
 801f6ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6b2:	9a02      	ldr	r2, [sp, #8]
 801f6b4:	9312      	str	r3, [sp, #72]	@ 0x48
 801f6b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f6b8:	bf08      	it	eq
 801f6ba:	4613      	moveq	r3, r2
 801f6bc:	e734      	b.n	801f528 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f6be:	1427      	asrs	r7, r4, #16
 801f6c0:	d454      	bmi.n	801f76c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f6c2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f6c6:	42be      	cmp	r6, r7
 801f6c8:	dd50      	ble.n	801f76c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f6ca:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f6ce:	d44d      	bmi.n	801f76c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f6d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f6d4:	454a      	cmp	r2, r9
 801f6d6:	dd49      	ble.n	801f76c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f6d8:	b236      	sxth	r6, r6
 801f6da:	9a01      	ldr	r2, [sp, #4]
 801f6dc:	fb09 7606 	mla	r6, r9, r6, r7
 801f6e0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801f6e4:	0e3a      	lsrs	r2, r7, #24
 801f6e6:	d041      	beq.n	801f76c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f6e8:	9e03      	ldr	r6, [sp, #12]
 801f6ea:	fa5f fb87 	uxtb.w	fp, r7
 801f6ee:	4372      	muls	r2, r6
 801f6f0:	1c56      	adds	r6, r2, #1
 801f6f2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f6f6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801f6fa:	1212      	asrs	r2, r2, #8
 801f6fc:	f815 9006 	ldrb.w	r9, [r5, r6]
 801f700:	fa1f fa82 	uxth.w	sl, r2
 801f704:	43d2      	mvns	r2, r2
 801f706:	fb1b fb0a 	smulbb	fp, fp, sl
 801f70a:	b2d2      	uxtb	r2, r2
 801f70c:	fb09 b902 	mla	r9, r9, r2, fp
 801f710:	fa1f f989 	uxth.w	r9, r9
 801f714:	f109 0b01 	add.w	fp, r9, #1
 801f718:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f71c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f720:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f724:	fb1b fb0a 	smulbb	fp, fp, sl
 801f728:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f72c:	fb17 fa0a 	smulbb	sl, r7, sl
 801f730:	f805 9006 	strb.w	r9, [r5, r6]
 801f734:	442e      	add	r6, r5
 801f736:	78b7      	ldrb	r7, [r6, #2]
 801f738:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f73c:	fb07 aa02 	mla	sl, r7, r2, sl
 801f740:	fb09 b902 	mla	r9, r9, r2, fp
 801f744:	fa1f fa8a 	uxth.w	sl, sl
 801f748:	fa1f f989 	uxth.w	r9, r9
 801f74c:	f10a 0701 	add.w	r7, sl, #1
 801f750:	f109 0b01 	add.w	fp, r9, #1
 801f754:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f758:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f75c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f760:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f764:	f886 a002 	strb.w	sl, [r6, #2]
 801f768:	f886 9001 	strb.w	r9, [r6, #1]
 801f76c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f76e:	4474      	add	r4, lr
 801f770:	f108 0801 	add.w	r8, r8, #1
 801f774:	4410      	add	r0, r2
 801f776:	e762      	b.n	801f63e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f778:	b005      	add	sp, #20
 801f77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f77e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f77e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f782:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f788:	9201      	str	r2, [sp, #4]
 801f78a:	6860      	ldr	r0, [r4, #4]
 801f78c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801f790:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801f794:	fb00 2505 	mla	r5, r0, r5, r2
 801f798:	6822      	ldr	r2, [r4, #0]
 801f79a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f79e:	4415      	add	r5, r2
 801f7a0:	f8dc 2000 	ldr.w	r2, [ip]
 801f7a4:	9200      	str	r2, [sp, #0]
 801f7a6:	2900      	cmp	r1, #0
 801f7a8:	dc03      	bgt.n	801f7b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f7aa:	9a01      	ldr	r2, [sp, #4]
 801f7ac:	2a00      	cmp	r2, #0
 801f7ae:	f340 812b 	ble.w	801fa08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f7b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f7b4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f7b8:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801f7bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f7be:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f7c2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	dd0e      	ble.n	801f7e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f7ca:	1422      	asrs	r2, r4, #16
 801f7cc:	d405      	bmi.n	801f7da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f7ce:	4572      	cmp	r2, lr
 801f7d0:	da03      	bge.n	801f7da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f7d2:	1402      	asrs	r2, r0, #16
 801f7d4:	d401      	bmi.n	801f7da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f7d6:	42ba      	cmp	r2, r7
 801f7d8:	db07      	blt.n	801f7ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f7da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f7dc:	3b01      	subs	r3, #1
 801f7de:	3503      	adds	r5, #3
 801f7e0:	4414      	add	r4, r2
 801f7e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f7e4:	4410      	add	r0, r2
 801f7e6:	e7ee      	b.n	801f7c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f7e8:	d06f      	beq.n	801f8ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f7ea:	1e5a      	subs	r2, r3, #1
 801f7ec:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801f7ee:	fb06 4602 	mla	r6, r6, r2, r4
 801f7f2:	1436      	asrs	r6, r6, #16
 801f7f4:	d45e      	bmi.n	801f8b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f7f6:	4576      	cmp	r6, lr
 801f7f8:	da5c      	bge.n	801f8b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f7fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801f7fc:	fb06 0202 	mla	r2, r6, r2, r0
 801f800:	1412      	asrs	r2, r2, #16
 801f802:	d457      	bmi.n	801f8b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f804:	42ba      	cmp	r2, r7
 801f806:	da55      	bge.n	801f8b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f808:	1cee      	adds	r6, r5, #3
 801f80a:	469a      	mov	sl, r3
 801f80c:	f1ba 0f00 	cmp.w	sl, #0
 801f810:	dd56      	ble.n	801f8c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f812:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f816:	1427      	asrs	r7, r4, #16
 801f818:	1402      	asrs	r2, r0, #16
 801f81a:	fb0e 7202 	mla	r2, lr, r2, r7
 801f81e:	9f00      	ldr	r7, [sp, #0]
 801f820:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801f824:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801f828:	d03c      	beq.n	801f8a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f82a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f82e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f832:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f836:	fa5f f28e 	uxtb.w	r2, lr
 801f83a:	b2ff      	uxtb	r7, r7
 801f83c:	f000 80dd 	beq.w	801f9fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f840:	fa1f f882 	uxth.w	r8, r2
 801f844:	43d2      	mvns	r2, r2
 801f846:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801f84a:	fb17 f708 	smulbb	r7, r7, r8
 801f84e:	b2d2      	uxtb	r2, r2
 801f850:	fb19 f908 	smulbb	r9, r9, r8
 801f854:	fb0e 7702 	mla	r7, lr, r2, r7
 801f858:	fb1b f808 	smulbb	r8, fp, r8
 801f85c:	b2bf      	uxth	r7, r7
 801f85e:	f107 0e01 	add.w	lr, r7, #1
 801f862:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f866:	123f      	asrs	r7, r7, #8
 801f868:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f86c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801f870:	fb07 9902 	mla	r9, r7, r2, r9
 801f874:	fa1f f989 	uxth.w	r9, r9
 801f878:	f109 0701 	add.w	r7, r9, #1
 801f87c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f880:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f884:	fb07 8802 	mla	r8, r7, r2, r8
 801f888:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f88c:	fa1f f888 	uxth.w	r8, r8
 801f890:	f806 9c02 	strb.w	r9, [r6, #-2]
 801f894:	f108 0201 	add.w	r2, r8, #1
 801f898:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f89c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f8a0:	f806 8c01 	strb.w	r8, [r6, #-1]
 801f8a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f8a6:	3603      	adds	r6, #3
 801f8a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f8ac:	4414      	add	r4, r2
 801f8ae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f8b0:	4410      	add	r0, r2
 801f8b2:	e7ab      	b.n	801f80c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f8b4:	f04f 0e00 	mov.w	lr, #0
 801f8b8:	eba3 020e 	sub.w	r2, r3, lr
 801f8bc:	2a00      	cmp	r2, #0
 801f8be:	dc3d      	bgt.n	801f93c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f8c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8c8:	441d      	add	r5, r3
 801f8ca:	2900      	cmp	r1, #0
 801f8cc:	f340 809c 	ble.w	801fa08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f8d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8da:	3901      	subs	r1, #1
 801f8dc:	eeb0 6a62 	vmov.f32	s12, s5
 801f8e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f8e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f8ec:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801f8f0:	eeb0 6a43 	vmov.f32	s12, s6
 801f8f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f8f8:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801f8fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f900:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f904:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f908:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f90c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f910:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f914:	ee12 2a90 	vmov	r2, s5
 801f918:	eef0 2a47 	vmov.f32	s5, s14
 801f91c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f920:	ee13 2a10 	vmov	r2, s6
 801f924:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f928:	eeb0 3a67 	vmov.f32	s6, s15
 801f92c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f930:	9a01      	ldr	r2, [sp, #4]
 801f932:	9310      	str	r3, [sp, #64]	@ 0x40
 801f934:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f936:	bf08      	it	eq
 801f938:	4613      	moveq	r3, r2
 801f93a:	e734      	b.n	801f7a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801f93c:	1427      	asrs	r7, r4, #16
 801f93e:	d44d      	bmi.n	801f9dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f940:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f944:	42be      	cmp	r6, r7
 801f946:	dd49      	ble.n	801f9dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f948:	ea5f 4820 	movs.w	r8, r0, asr #16
 801f94c:	d446      	bmi.n	801f9dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f94e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f952:	4542      	cmp	r2, r8
 801f954:	dd42      	ble.n	801f9dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f956:	b236      	sxth	r6, r6
 801f958:	9a00      	ldr	r2, [sp, #0]
 801f95a:	fb08 7606 	mla	r6, r8, r6, r7
 801f95e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801f962:	0e3a      	lsrs	r2, r7, #24
 801f964:	d03a      	beq.n	801f9dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f966:	2aff      	cmp	r2, #255	@ 0xff
 801f968:	b2d6      	uxtb	r6, r2
 801f96a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f96e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f972:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801f976:	b2ff      	uxtb	r7, r7
 801f978:	d037      	beq.n	801f9ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801f97a:	fa1f f986 	uxth.w	r9, r6
 801f97e:	4472      	add	r2, lr
 801f980:	43f6      	mvns	r6, r6
 801f982:	f815 8002 	ldrb.w	r8, [r5, r2]
 801f986:	fb17 f709 	smulbb	r7, r7, r9
 801f98a:	fb1a fa09 	smulbb	sl, sl, r9
 801f98e:	b2f6      	uxtb	r6, r6
 801f990:	fb1b f909 	smulbb	r9, fp, r9
 801f994:	fb08 7706 	mla	r7, r8, r6, r7
 801f998:	b2bf      	uxth	r7, r7
 801f99a:	f107 0801 	add.w	r8, r7, #1
 801f99e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801f9a2:	123f      	asrs	r7, r7, #8
 801f9a4:	54af      	strb	r7, [r5, r2]
 801f9a6:	442a      	add	r2, r5
 801f9a8:	7857      	ldrb	r7, [r2, #1]
 801f9aa:	fb07 aa06 	mla	sl, r7, r6, sl
 801f9ae:	fa1f fa8a 	uxth.w	sl, sl
 801f9b2:	f10a 0701 	add.w	r7, sl, #1
 801f9b6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f9ba:	7897      	ldrb	r7, [r2, #2]
 801f9bc:	fb07 9906 	mla	r9, r7, r6, r9
 801f9c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f9c4:	fa1f f989 	uxth.w	r9, r9
 801f9c8:	f882 a001 	strb.w	sl, [r2, #1]
 801f9cc:	f109 0601 	add.w	r6, r9, #1
 801f9d0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f9d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f9d8:	f882 9002 	strb.w	r9, [r2, #2]
 801f9dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f9de:	f10e 0e01 	add.w	lr, lr, #1
 801f9e2:	4414      	add	r4, r2
 801f9e4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f9e6:	4410      	add	r0, r2
 801f9e8:	e766      	b.n	801f8b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f9ea:	4472      	add	r2, lr
 801f9ec:	54af      	strb	r7, [r5, r2]
 801f9ee:	442a      	add	r2, r5
 801f9f0:	f882 a001 	strb.w	sl, [r2, #1]
 801f9f4:	f882 b002 	strb.w	fp, [r2, #2]
 801f9f8:	e7f0      	b.n	801f9dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f9fa:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f9fe:	f806 9c02 	strb.w	r9, [r6, #-2]
 801fa02:	f806 bc01 	strb.w	fp, [r6, #-1]
 801fa06:	e74d      	b.n	801f8a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801fa08:	b003      	add	sp, #12
 801fa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fa10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa14:	b087      	sub	sp, #28
 801fa16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fa1a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fa1c:	9204      	str	r2, [sp, #16]
 801fa1e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801fa22:	6860      	ldr	r0, [r4, #4]
 801fa24:	9205      	str	r2, [sp, #20]
 801fa26:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801fa2a:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801fa2e:	9101      	str	r1, [sp, #4]
 801fa30:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801fa34:	fb00 2505 	mla	r5, r0, r5, r2
 801fa38:	6822      	ldr	r2, [r4, #0]
 801fa3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fa3e:	4415      	add	r5, r2
 801fa40:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fa44:	3201      	adds	r2, #1
 801fa46:	f022 0201 	bic.w	r2, r2, #1
 801fa4a:	9202      	str	r2, [sp, #8]
 801fa4c:	f8dc 2000 	ldr.w	r2, [ip]
 801fa50:	9203      	str	r2, [sp, #12]
 801fa52:	9a01      	ldr	r2, [sp, #4]
 801fa54:	2a00      	cmp	r2, #0
 801fa56:	dc03      	bgt.n	801fa60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801fa58:	9a04      	ldr	r2, [sp, #16]
 801fa5a:	2a00      	cmp	r2, #0
 801fa5c:	f340 8135 	ble.w	801fcca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801fa60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fa62:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801fa66:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801fa6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fa6c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801fa70:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fa74:	2b00      	cmp	r3, #0
 801fa76:	dd0d      	ble.n	801fa94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fa78:	1422      	asrs	r2, r4, #16
 801fa7a:	d405      	bmi.n	801fa88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fa7c:	4542      	cmp	r2, r8
 801fa7e:	da03      	bge.n	801fa88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fa80:	1402      	asrs	r2, r0, #16
 801fa82:	d401      	bmi.n	801fa88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fa84:	42ba      	cmp	r2, r7
 801fa86:	db06      	blt.n	801fa96 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa88:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fa8a:	4474      	add	r4, lr
 801fa8c:	3b01      	subs	r3, #1
 801fa8e:	3503      	adds	r5, #3
 801fa90:	4410      	add	r0, r2
 801fa92:	e7ef      	b.n	801fa74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fa94:	d077      	beq.n	801fb86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fa96:	1e5a      	subs	r2, r3, #1
 801fa98:	fb0e 4602 	mla	r6, lr, r2, r4
 801fa9c:	1436      	asrs	r6, r6, #16
 801fa9e:	d469      	bmi.n	801fb74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801faa0:	4546      	cmp	r6, r8
 801faa2:	da67      	bge.n	801fb74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801faa4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801faa6:	fb06 0202 	mla	r2, r6, r2, r0
 801faaa:	1412      	asrs	r2, r2, #16
 801faac:	d462      	bmi.n	801fb74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801faae:	42ba      	cmp	r2, r7
 801fab0:	da60      	bge.n	801fb74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fab2:	1cee      	adds	r6, r5, #3
 801fab4:	4699      	mov	r9, r3
 801fab6:	f1b9 0f00 	cmp.w	r9, #0
 801faba:	dd5f      	ble.n	801fb7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801fabc:	1422      	asrs	r2, r4, #16
 801fabe:	9902      	ldr	r1, [sp, #8]
 801fac0:	1407      	asrs	r7, r0, #16
 801fac2:	fb01 2707 	mla	r7, r1, r7, r2
 801fac6:	9903      	ldr	r1, [sp, #12]
 801fac8:	087a      	lsrs	r2, r7, #1
 801faca:	5c8a      	ldrb	r2, [r1, r2]
 801facc:	07f9      	lsls	r1, r7, #31
 801face:	bf54      	ite	pl
 801fad0:	f002 020f 	andpl.w	r2, r2, #15
 801fad4:	1112      	asrmi	r2, r2, #4
 801fad6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fada:	b2d2      	uxtb	r2, r2
 801fadc:	2a00      	cmp	r2, #0
 801fade:	d042      	beq.n	801fb66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fae0:	497b      	ldr	r1, [pc, #492]	@ (801fcd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801fae2:	680f      	ldr	r7, [r1, #0]
 801fae4:	9905      	ldr	r1, [sp, #20]
 801fae6:	fa5f fb87 	uxtb.w	fp, r7
 801faea:	434a      	muls	r2, r1
 801faec:	f102 0801 	add.w	r8, r2, #1
 801faf0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801faf4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801faf8:	1212      	asrs	r2, r2, #8
 801fafa:	fa1f fa82 	uxth.w	sl, r2
 801fafe:	43d2      	mvns	r2, r2
 801fb00:	fb1b fb0a 	smulbb	fp, fp, sl
 801fb04:	b2d2      	uxtb	r2, r2
 801fb06:	fb08 b802 	mla	r8, r8, r2, fp
 801fb0a:	fa1f f888 	uxth.w	r8, r8
 801fb0e:	f108 0b01 	add.w	fp, r8, #1
 801fb12:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fb16:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fb1a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801fb1e:	fb1b fb0a 	smulbb	fp, fp, sl
 801fb22:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fb26:	fb17 fa0a 	smulbb	sl, r7, sl
 801fb2a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801fb2e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801fb32:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801fb36:	fb07 aa02 	mla	sl, r7, r2, sl
 801fb3a:	fb08 b802 	mla	r8, r8, r2, fp
 801fb3e:	fa1f fa8a 	uxth.w	sl, sl
 801fb42:	fa1f f888 	uxth.w	r8, r8
 801fb46:	f10a 0701 	add.w	r7, sl, #1
 801fb4a:	f108 0b01 	add.w	fp, r8, #1
 801fb4e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fb52:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fb56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fb5a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fb5e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801fb62:	f806 8c02 	strb.w	r8, [r6, #-2]
 801fb66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fb68:	4474      	add	r4, lr
 801fb6a:	3603      	adds	r6, #3
 801fb6c:	f109 39ff 	add.w	r9, r9, #4294967295
 801fb70:	4410      	add	r0, r2
 801fb72:	e7a0      	b.n	801fab6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fb74:	2700      	movs	r7, #0
 801fb76:	1bda      	subs	r2, r3, r7
 801fb78:	2a00      	cmp	r2, #0
 801fb7a:	dc3e      	bgt.n	801fbfa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fb7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb84:	441d      	add	r5, r3
 801fb86:	9b01      	ldr	r3, [sp, #4]
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	f340 809e 	ble.w	801fcca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801fb8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fb94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb98:	eeb0 6a62 	vmov.f32	s12, s5
 801fb9c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fba0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fba4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fba8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801fbac:	eeb0 6a43 	vmov.f32	s12, s6
 801fbb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbb4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801fbb8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbbc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fbc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fbc4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fbc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fbcc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fbd0:	ee12 2a90 	vmov	r2, s5
 801fbd4:	eef0 2a47 	vmov.f32	s5, s14
 801fbd8:	fb92 fef3 	sdiv	lr, r2, r3
 801fbdc:	ee13 2a10 	vmov	r2, s6
 801fbe0:	eeb0 3a67 	vmov.f32	s6, s15
 801fbe4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbe8:	9314      	str	r3, [sp, #80]	@ 0x50
 801fbea:	9b01      	ldr	r3, [sp, #4]
 801fbec:	9a04      	ldr	r2, [sp, #16]
 801fbee:	3b01      	subs	r3, #1
 801fbf0:	9301      	str	r3, [sp, #4]
 801fbf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fbf4:	bf08      	it	eq
 801fbf6:	4613      	moveq	r3, r2
 801fbf8:	e72b      	b.n	801fa52 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801fbfa:	1426      	asrs	r6, r4, #16
 801fbfc:	d460      	bmi.n	801fcc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fbfe:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fc02:	42b2      	cmp	r2, r6
 801fc04:	dd5c      	ble.n	801fcc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fc06:	ea5f 4820 	movs.w	r8, r0, asr #16
 801fc0a:	d459      	bmi.n	801fcc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fc0c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fc10:	4542      	cmp	r2, r8
 801fc12:	dd55      	ble.n	801fcc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fc14:	9a02      	ldr	r2, [sp, #8]
 801fc16:	9903      	ldr	r1, [sp, #12]
 801fc18:	fb08 6602 	mla	r6, r8, r2, r6
 801fc1c:	0872      	lsrs	r2, r6, #1
 801fc1e:	07f6      	lsls	r6, r6, #31
 801fc20:	5c8a      	ldrb	r2, [r1, r2]
 801fc22:	bf54      	ite	pl
 801fc24:	f002 020f 	andpl.w	r2, r2, #15
 801fc28:	1112      	asrmi	r2, r2, #4
 801fc2a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fc2e:	b2d2      	uxtb	r2, r2
 801fc30:	2a00      	cmp	r2, #0
 801fc32:	d045      	beq.n	801fcc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fc34:	4926      	ldr	r1, [pc, #152]	@ (801fcd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801fc36:	f8d1 8000 	ldr.w	r8, [r1]
 801fc3a:	9905      	ldr	r1, [sp, #20]
 801fc3c:	fa5f fb88 	uxtb.w	fp, r8
 801fc40:	434a      	muls	r2, r1
 801fc42:	1c56      	adds	r6, r2, #1
 801fc44:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fc48:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fc4c:	1212      	asrs	r2, r2, #8
 801fc4e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801fc52:	fa1f fa82 	uxth.w	sl, r2
 801fc56:	43d2      	mvns	r2, r2
 801fc58:	fb1b fb0a 	smulbb	fp, fp, sl
 801fc5c:	b2d2      	uxtb	r2, r2
 801fc5e:	fb09 b902 	mla	r9, r9, r2, fp
 801fc62:	fa1f f989 	uxth.w	r9, r9
 801fc66:	f109 0b01 	add.w	fp, r9, #1
 801fc6a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fc6e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801fc72:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801fc76:	fb1b fb0a 	smulbb	fp, fp, sl
 801fc7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc7e:	fb18 fa0a 	smulbb	sl, r8, sl
 801fc82:	f805 9006 	strb.w	r9, [r5, r6]
 801fc86:	442e      	add	r6, r5
 801fc88:	f896 8002 	ldrb.w	r8, [r6, #2]
 801fc8c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fc90:	fb08 aa02 	mla	sl, r8, r2, sl
 801fc94:	fb09 b902 	mla	r9, r9, r2, fp
 801fc98:	fa1f fa8a 	uxth.w	sl, sl
 801fc9c:	fa1f f989 	uxth.w	r9, r9
 801fca0:	f10a 0801 	add.w	r8, sl, #1
 801fca4:	f109 0b01 	add.w	fp, r9, #1
 801fca8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801fcac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fcb0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fcb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fcb8:	f886 a002 	strb.w	sl, [r6, #2]
 801fcbc:	f886 9001 	strb.w	r9, [r6, #1]
 801fcc0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fcc2:	4474      	add	r4, lr
 801fcc4:	3701      	adds	r7, #1
 801fcc6:	4410      	add	r0, r2
 801fcc8:	e755      	b.n	801fb76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801fcca:	b007      	add	sp, #28
 801fccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcd0:	240621c8 	.word	0x240621c8

0801fcd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcd8:	b085      	sub	sp, #20
 801fcda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fcde:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fce0:	9203      	str	r2, [sp, #12]
 801fce2:	6860      	ldr	r0, [r4, #4]
 801fce4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801fce8:	9100      	str	r1, [sp, #0]
 801fcea:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801fcee:	fb00 2606 	mla	r6, r0, r6, r2
 801fcf2:	6822      	ldr	r2, [r4, #0]
 801fcf4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fcf8:	4416      	add	r6, r2
 801fcfa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fcfe:	3201      	adds	r2, #1
 801fd00:	f022 0201 	bic.w	r2, r2, #1
 801fd04:	9201      	str	r2, [sp, #4]
 801fd06:	f8dc 2000 	ldr.w	r2, [ip]
 801fd0a:	9202      	str	r2, [sp, #8]
 801fd0c:	9a00      	ldr	r2, [sp, #0]
 801fd0e:	2a00      	cmp	r2, #0
 801fd10:	dc03      	bgt.n	801fd1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fd12:	9a03      	ldr	r2, [sp, #12]
 801fd14:	2a00      	cmp	r2, #0
 801fd16:	f340 8140 	ble.w	801ff9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801fd1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fd1c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801fd20:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801fd24:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fd26:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801fd2a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	dd0e      	ble.n	801fd50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fd32:	142a      	asrs	r2, r5, #16
 801fd34:	d405      	bmi.n	801fd42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fd36:	4572      	cmp	r2, lr
 801fd38:	da03      	bge.n	801fd42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fd3a:	1422      	asrs	r2, r4, #16
 801fd3c:	d401      	bmi.n	801fd42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fd3e:	42ba      	cmp	r2, r7
 801fd40:	db07      	blt.n	801fd52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fd42:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fd44:	3b01      	subs	r3, #1
 801fd46:	3603      	adds	r6, #3
 801fd48:	4415      	add	r5, r2
 801fd4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fd4c:	4414      	add	r4, r2
 801fd4e:	e7ee      	b.n	801fd2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fd50:	d072      	beq.n	801fe38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd52:	1e5a      	subs	r2, r3, #1
 801fd54:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fd56:	fb00 5002 	mla	r0, r0, r2, r5
 801fd5a:	1400      	asrs	r0, r0, #16
 801fd5c:	d463      	bmi.n	801fe26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fd5e:	4570      	cmp	r0, lr
 801fd60:	da61      	bge.n	801fe26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fd62:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fd64:	fb00 4202 	mla	r2, r0, r2, r4
 801fd68:	1412      	asrs	r2, r2, #16
 801fd6a:	d45c      	bmi.n	801fe26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fd6c:	42ba      	cmp	r2, r7
 801fd6e:	da5a      	bge.n	801fe26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fd70:	1cf0      	adds	r0, r6, #3
 801fd72:	469a      	mov	sl, r3
 801fd74:	f1ba 0f00 	cmp.w	sl, #0
 801fd78:	dd59      	ble.n	801fe2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801fd7a:	142a      	asrs	r2, r5, #16
 801fd7c:	9901      	ldr	r1, [sp, #4]
 801fd7e:	1427      	asrs	r7, r4, #16
 801fd80:	fb01 2707 	mla	r7, r1, r7, r2
 801fd84:	9902      	ldr	r1, [sp, #8]
 801fd86:	087a      	lsrs	r2, r7, #1
 801fd88:	5c8a      	ldrb	r2, [r1, r2]
 801fd8a:	07f9      	lsls	r1, r7, #31
 801fd8c:	bf54      	ite	pl
 801fd8e:	f002 020f 	andpl.w	r2, r2, #15
 801fd92:	1112      	asrmi	r2, r2, #4
 801fd94:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fd98:	b2d2      	uxtb	r2, r2
 801fd9a:	2a00      	cmp	r2, #0
 801fd9c:	d03b      	beq.n	801fe16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801fd9e:	4980      	ldr	r1, [pc, #512]	@ (801ffa0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801fda0:	2aff      	cmp	r2, #255	@ 0xff
 801fda2:	680f      	ldr	r7, [r1, #0]
 801fda4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fda8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801fdac:	b2ff      	uxtb	r7, r7
 801fdae:	f000 80ed 	beq.w	801ff8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801fdb2:	fa1f f882 	uxth.w	r8, r2
 801fdb6:	43d2      	mvns	r2, r2
 801fdb8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801fdbc:	fb17 f708 	smulbb	r7, r7, r8
 801fdc0:	b2d2      	uxtb	r2, r2
 801fdc2:	fb19 f908 	smulbb	r9, r9, r8
 801fdc6:	fb0e 7702 	mla	r7, lr, r2, r7
 801fdca:	fb1b f808 	smulbb	r8, fp, r8
 801fdce:	b2bf      	uxth	r7, r7
 801fdd0:	f107 0e01 	add.w	lr, r7, #1
 801fdd4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801fdd8:	123f      	asrs	r7, r7, #8
 801fdda:	f800 7c03 	strb.w	r7, [r0, #-3]
 801fdde:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801fde2:	fb07 9902 	mla	r9, r7, r2, r9
 801fde6:	fa1f f989 	uxth.w	r9, r9
 801fdea:	f109 0701 	add.w	r7, r9, #1
 801fdee:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fdf2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801fdf6:	fb07 8802 	mla	r8, r7, r2, r8
 801fdfa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fdfe:	fa1f f888 	uxth.w	r8, r8
 801fe02:	f800 9c02 	strb.w	r9, [r0, #-2]
 801fe06:	f108 0201 	add.w	r2, r8, #1
 801fe0a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fe0e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fe12:	f800 8c01 	strb.w	r8, [r0, #-1]
 801fe16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fe18:	3003      	adds	r0, #3
 801fe1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fe1e:	4415      	add	r5, r2
 801fe20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fe22:	4414      	add	r4, r2
 801fe24:	e7a6      	b.n	801fd74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fe26:	2700      	movs	r7, #0
 801fe28:	1bda      	subs	r2, r3, r7
 801fe2a:	2a00      	cmp	r2, #0
 801fe2c:	dc40      	bgt.n	801feb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fe2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe36:	441e      	add	r6, r3
 801fe38:	9b00      	ldr	r3, [sp, #0]
 801fe3a:	2b00      	cmp	r3, #0
 801fe3c:	f340 80ad 	ble.w	801ff9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801fe40:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe4a:	eeb0 6a62 	vmov.f32	s12, s5
 801fe4e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe52:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe5a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801fe5e:	eeb0 6a43 	vmov.f32	s12, s6
 801fe62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe66:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801fe6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe72:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe82:	ee12 2a90 	vmov	r2, s5
 801fe86:	eef0 2a47 	vmov.f32	s5, s14
 801fe8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe8e:	ee13 2a10 	vmov	r2, s6
 801fe92:	9311      	str	r3, [sp, #68]	@ 0x44
 801fe94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe96:	eeb0 3a67 	vmov.f32	s6, s15
 801fe9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe9e:	9312      	str	r3, [sp, #72]	@ 0x48
 801fea0:	9b00      	ldr	r3, [sp, #0]
 801fea2:	9a03      	ldr	r2, [sp, #12]
 801fea4:	3b01      	subs	r3, #1
 801fea6:	9300      	str	r3, [sp, #0]
 801fea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801feaa:	bf08      	it	eq
 801feac:	4613      	moveq	r3, r2
 801feae:	e72d      	b.n	801fd0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801feb0:	1428      	asrs	r0, r5, #16
 801feb2:	d45c      	bmi.n	801ff6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801feb4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801feb8:	4282      	cmp	r2, r0
 801feba:	dd58      	ble.n	801ff6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801febc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801fec0:	d455      	bmi.n	801ff6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fec2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fec6:	4572      	cmp	r2, lr
 801fec8:	dd51      	ble.n	801ff6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801feca:	9a01      	ldr	r2, [sp, #4]
 801fecc:	9902      	ldr	r1, [sp, #8]
 801fece:	fb0e 0002 	mla	r0, lr, r2, r0
 801fed2:	0842      	lsrs	r2, r0, #1
 801fed4:	07c0      	lsls	r0, r0, #31
 801fed6:	5c8a      	ldrb	r2, [r1, r2]
 801fed8:	bf54      	ite	pl
 801feda:	f002 020f 	andpl.w	r2, r2, #15
 801fede:	1112      	asrmi	r2, r2, #4
 801fee0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fee4:	b2d2      	uxtb	r2, r2
 801fee6:	2a00      	cmp	r2, #0
 801fee8:	d041      	beq.n	801ff6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801feea:	492d      	ldr	r1, [pc, #180]	@ (801ffa0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801feec:	2aff      	cmp	r2, #255	@ 0xff
 801feee:	6808      	ldr	r0, [r1, #0]
 801fef0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801fef4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fef8:	fa5f fe80 	uxtb.w	lr, r0
 801fefc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801ff00:	d03b      	beq.n	801ff7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ff02:	fa1f f982 	uxth.w	r9, r2
 801ff06:	4438      	add	r0, r7
 801ff08:	43d2      	mvns	r2, r2
 801ff0a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ff0e:	fb1e fe09 	smulbb	lr, lr, r9
 801ff12:	fb1a fa09 	smulbb	sl, sl, r9
 801ff16:	b2d2      	uxtb	r2, r2
 801ff18:	fb1b f909 	smulbb	r9, fp, r9
 801ff1c:	fb08 ee02 	mla	lr, r8, r2, lr
 801ff20:	fa1f fe8e 	uxth.w	lr, lr
 801ff24:	f10e 0801 	add.w	r8, lr, #1
 801ff28:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801ff2c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ff30:	f806 e000 	strb.w	lr, [r6, r0]
 801ff34:	4430      	add	r0, r6
 801ff36:	f890 e001 	ldrb.w	lr, [r0, #1]
 801ff3a:	fb0e aa02 	mla	sl, lr, r2, sl
 801ff3e:	fa1f fa8a 	uxth.w	sl, sl
 801ff42:	f10a 0e01 	add.w	lr, sl, #1
 801ff46:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801ff4a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801ff4e:	fb0e 9902 	mla	r9, lr, r2, r9
 801ff52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ff56:	fa1f f989 	uxth.w	r9, r9
 801ff5a:	f880 a001 	strb.w	sl, [r0, #1]
 801ff5e:	f109 0201 	add.w	r2, r9, #1
 801ff62:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ff66:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff6a:	f880 9002 	strb.w	r9, [r0, #2]
 801ff6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ff70:	3701      	adds	r7, #1
 801ff72:	4415      	add	r5, r2
 801ff74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ff76:	4414      	add	r4, r2
 801ff78:	e756      	b.n	801fe28 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ff7a:	4438      	add	r0, r7
 801ff7c:	f806 e000 	strb.w	lr, [r6, r0]
 801ff80:	4430      	add	r0, r6
 801ff82:	f880 a001 	strb.w	sl, [r0, #1]
 801ff86:	f880 b002 	strb.w	fp, [r0, #2]
 801ff8a:	e7f0      	b.n	801ff6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ff8c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ff90:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ff94:	f800 bc01 	strb.w	fp, [r0, #-1]
 801ff98:	e73d      	b.n	801fe16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ff9a:	b005      	add	sp, #20
 801ff9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffa0:	240621c8 	.word	0x240621c8

0801ffa4 <_ZN8touchgfx8LCD24bppD1Ev>:
 801ffa4:	4770      	bx	lr

0801ffa6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801ffa6:	4770      	bx	lr

0801ffa8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801ffa8:	4770      	bx	lr

0801ffaa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801ffaa:	4770      	bx	lr

0801ffac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801ffac:	4770      	bx	lr

0801ffae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801ffae:	4770      	bx	lr

0801ffb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801ffb0:	4770      	bx	lr

0801ffb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801ffb2:	4770      	bx	lr

0801ffb4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801ffb4:	4770      	bx	lr

0801ffb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ffb6:	4770      	bx	lr

0801ffb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ffb8:	4770      	bx	lr

0801ffba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ffba:	4770      	bx	lr

0801ffbc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ffbc:	4770      	bx	lr

0801ffbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ffbe:	4770      	bx	lr

0801ffc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ffc0:	4770      	bx	lr

0801ffc2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ffc2:	4770      	bx	lr

0801ffc4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ffc4:	4770      	bx	lr

0801ffc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ffc6:	4770      	bx	lr

0801ffc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ffc8:	4770      	bx	lr

0801ffca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ffca:	4770      	bx	lr

0801ffcc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ffcc:	4770      	bx	lr

0801ffce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ffce:	4770      	bx	lr

0801ffd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ffd0:	4770      	bx	lr

0801ffd2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ffd2:	4770      	bx	lr

0801ffd4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ffd4:	4770      	bx	lr
	...

0801ffd8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ffd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffda:	4606      	mov	r6, r0
 801ffdc:	b087      	sub	sp, #28
 801ffde:	4615      	mov	r5, r2
 801ffe0:	461f      	mov	r7, r3
 801ffe2:	b353      	cbz	r3, 802003a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801ffe4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	dd26      	ble.n	802003a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801ffec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	dd22      	ble.n	802003a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801fff4:	6808      	ldr	r0, [r1, #0]
 801fff6:	aa04      	add	r2, sp, #16
 801fff8:	6849      	ldr	r1, [r1, #4]
 801fffa:	4c1b      	ldr	r4, [pc, #108]	@ (8020068 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801fffc:	c203      	stmia	r2!, {r0, r1}
 801fffe:	a804      	add	r0, sp, #16
 8020000:	f7fa fe12 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020004:	6820      	ldr	r0, [r4, #0]
 8020006:	6803      	ldr	r3, [r0, #0]
 8020008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802000a:	4798      	blx	r3
 802000c:	2fff      	cmp	r7, #255	@ 0xff
 802000e:	d016      	beq.n	802003e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020010:	f010 0f08 	tst.w	r0, #8
 8020014:	6820      	ldr	r0, [r4, #0]
 8020016:	d015      	beq.n	8020044 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8020018:	2400      	movs	r4, #0
 802001a:	6801      	ldr	r1, [r0, #0]
 802001c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020020:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020024:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8020028:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802002c:	9401      	str	r4, [sp, #4]
 802002e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020032:	9400      	str	r4, [sp, #0]
 8020034:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8020036:	4629      	mov	r1, r5
 8020038:	47a0      	blx	r4
 802003a:	b007      	add	sp, #28
 802003c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802003e:	f010 0f02 	tst.w	r0, #2
 8020042:	e7e7      	b.n	8020014 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8020044:	6803      	ldr	r3, [r0, #0]
 8020046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020048:	4798      	blx	r3
 802004a:	4b08      	ldr	r3, [pc, #32]	@ (802006c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 802004c:	4601      	mov	r1, r0
 802004e:	4630      	mov	r0, r6
 8020050:	881a      	ldrh	r2, [r3, #0]
 8020052:	6833      	ldr	r3, [r6, #0]
 8020054:	e9cd 5700 	strd	r5, r7, [sp]
 8020058:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 802005a:	ab04      	add	r3, sp, #16
 802005c:	47a8      	blx	r5
 802005e:	6820      	ldr	r0, [r4, #0]
 8020060:	6803      	ldr	r3, [r0, #0]
 8020062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020064:	4798      	blx	r3
 8020066:	e7e8      	b.n	802003a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020068:	240621b8 	.word	0x240621b8
 802006c:	240621b2 	.word	0x240621b2

08020070 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020074:	b08b      	sub	sp, #44	@ 0x2c
 8020076:	460d      	mov	r5, r1
 8020078:	4616      	mov	r6, r2
 802007a:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 802007e:	f1b8 0f00 	cmp.w	r8, #0
 8020082:	d047      	beq.n	8020114 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8020084:	6810      	ldr	r0, [r2, #0]
 8020086:	ac06      	add	r4, sp, #24
 8020088:	6851      	ldr	r1, [r2, #4]
 802008a:	4f51      	ldr	r7, [pc, #324]	@ (80201d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 802008c:	c403      	stmia	r4!, {r0, r1}
 802008e:	6818      	ldr	r0, [r3, #0]
 8020090:	ac08      	add	r4, sp, #32
 8020092:	6859      	ldr	r1, [r3, #4]
 8020094:	c403      	stmia	r4!, {r0, r1}
 8020096:	a806      	add	r0, sp, #24
 8020098:	f7fa fdc6 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802009c:	4631      	mov	r1, r6
 802009e:	a808      	add	r0, sp, #32
 80200a0:	f7fa fe06 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80200a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80200a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80200ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80200b0:	6838      	ldr	r0, [r7, #0]
 80200b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80200b6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 80200ba:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 80200be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80200c2:	440d      	add	r5, r1
 80200c4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80200c8:	440a      	add	r2, r1
 80200ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 80200ce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80200d2:	4413      	add	r3, r2
 80200d4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80200d8:	6803      	ldr	r3, [r0, #0]
 80200da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80200dc:	4798      	blx	r3
 80200de:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80200e2:	d01a      	beq.n	802011a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80200e4:	f010 0f04 	tst.w	r0, #4
 80200e8:	6838      	ldr	r0, [r7, #0]
 80200ea:	d019      	beq.n	8020120 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80200ec:	2100      	movs	r1, #0
 80200ee:	6807      	ldr	r7, [r0, #0]
 80200f0:	b2a4      	uxth	r4, r4
 80200f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80200f6:	b2b6      	uxth	r6, r6
 80200f8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80200fc:	9401      	str	r4, [sp, #4]
 80200fe:	9600      	str	r6, [sp, #0]
 8020100:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020104:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8020108:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802010c:	9102      	str	r1, [sp, #8]
 802010e:	4629      	mov	r1, r5
 8020110:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8020112:	47a0      	blx	r4
 8020114:	b00b      	add	sp, #44	@ 0x2c
 8020116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802011a:	f010 0f01 	tst.w	r0, #1
 802011e:	e7e3      	b.n	80200e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8020120:	6803      	ldr	r3, [r0, #0]
 8020122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020124:	4798      	blx	r3
 8020126:	4a2b      	ldr	r2, [pc, #172]	@ (80201d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8020128:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802012c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8020130:	8813      	ldrh	r3, [r2, #0]
 8020132:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8020136:	fb03 f404 	mul.w	r4, r3, r4
 802013a:	fb03 c101 	mla	r1, r3, r1, ip
 802013e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020142:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020146:	4408      	add	r0, r1
 8020148:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 802014c:	4404      	add	r4, r0
 802014e:	d02e      	beq.n	80201ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8020150:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8020154:	1b9b      	subs	r3, r3, r6
 8020156:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 802015a:	1b96      	subs	r6, r2, r6
 802015c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020160:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020164:	42a0      	cmp	r0, r4
 8020166:	d22d      	bcs.n	80201c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8020168:	eb00 0e01 	add.w	lr, r0, r1
 802016c:	4570      	cmp	r0, lr
 802016e:	d210      	bcs.n	8020192 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8020170:	f890 9000 	ldrb.w	r9, [r0]
 8020174:	f815 2b01 	ldrb.w	r2, [r5], #1
 8020178:	fb19 f90c 	smulbb	r9, r9, ip
 802017c:	fb02 9208 	mla	r2, r2, r8, r9
 8020180:	b292      	uxth	r2, r2
 8020182:	f102 0901 	add.w	r9, r2, #1
 8020186:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 802018a:	1212      	asrs	r2, r2, #8
 802018c:	f800 2b01 	strb.w	r2, [r0], #1
 8020190:	e7ec      	b.n	802016c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8020192:	4418      	add	r0, r3
 8020194:	4435      	add	r5, r6
 8020196:	e7e5      	b.n	8020164 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8020198:	8813      	ldrh	r3, [r2, #0]
 802019a:	1b9b      	subs	r3, r3, r6
 802019c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201a0:	4418      	add	r0, r3
 80201a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80201a6:	1b9b      	subs	r3, r3, r6
 80201a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201ac:	441d      	add	r5, r3
 80201ae:	42a0      	cmp	r0, r4
 80201b0:	d208      	bcs.n	80201c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80201b2:	eb00 0c01 	add.w	ip, r0, r1
 80201b6:	4560      	cmp	r0, ip
 80201b8:	d2ee      	bcs.n	8020198 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80201ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80201be:	f800 3b01 	strb.w	r3, [r0], #1
 80201c2:	e7f8      	b.n	80201b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80201c4:	6838      	ldr	r0, [r7, #0]
 80201c6:	6803      	ldr	r3, [r0, #0]
 80201c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201ca:	4798      	blx	r3
 80201cc:	e7a2      	b.n	8020114 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80201ce:	bf00      	nop
 80201d0:	240621b8 	.word	0x240621b8
 80201d4:	240621b2 	.word	0x240621b2

080201d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80201d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80201da:	2300      	movs	r3, #0
 80201dc:	b085      	sub	sp, #20
 80201de:	9300      	str	r3, [sp, #0]
 80201e0:	4b41      	ldr	r3, [pc, #260]	@ (80202e8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80201e2:	781b      	ldrb	r3, [r3, #0]
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d136      	bne.n	8020256 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80201e8:	4a40      	ldr	r2, [pc, #256]	@ (80202ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80201ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80201ee:	f8ad 2004 	strh.w	r2, [sp, #4]
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d131      	bne.n	802025a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80201f6:	4b3e      	ldr	r3, [pc, #248]	@ (80202f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80201f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80201fc:	ac02      	add	r4, sp, #8
 80201fe:	6808      	ldr	r0, [r1, #0]
 8020200:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020204:	ab02      	add	r3, sp, #8
 8020206:	6849      	ldr	r1, [r1, #4]
 8020208:	4d3a      	ldr	r5, [pc, #232]	@ (80202f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 802020a:	c303      	stmia	r3!, {r0, r1}
 802020c:	4669      	mov	r1, sp
 802020e:	4620      	mov	r0, r4
 8020210:	f7fa fd4e 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020214:	4668      	mov	r0, sp
 8020216:	f7fa fd07 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802021a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 802021e:	f8bd 2000 	ldrh.w	r2, [sp]
 8020222:	462e      	mov	r6, r5
 8020224:	6828      	ldr	r0, [r5, #0]
 8020226:	4413      	add	r3, r2
 8020228:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802022c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020230:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020234:	4413      	add	r3, r2
 8020236:	f8ad 300a 	strh.w	r3, [sp, #10]
 802023a:	6803      	ldr	r3, [r0, #0]
 802023c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802023e:	4798      	blx	r3
 8020240:	f010 0f01 	tst.w	r0, #1
 8020244:	d00b      	beq.n	802025e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8020246:	6828      	ldr	r0, [r5, #0]
 8020248:	6803      	ldr	r3, [r0, #0]
 802024a:	e894 0006 	ldmia.w	r4, {r1, r2}
 802024e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020250:	4798      	blx	r3
 8020252:	b005      	add	sp, #20
 8020254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020256:	4a26      	ldr	r2, [pc, #152]	@ (80202f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8020258:	e7c7      	b.n	80201ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 802025a:	4b24      	ldr	r3, [pc, #144]	@ (80202ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802025c:	e7cc      	b.n	80201f8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 802025e:	6830      	ldr	r0, [r6, #0]
 8020260:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8020264:	6803      	ldr	r3, [r0, #0]
 8020266:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 802026a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802026c:	4798      	blx	r3
 802026e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020272:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020276:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 802027a:	fb14 3402 	smlabb	r4, r4, r2, r3
 802027e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020282:	4404      	add	r4, r0
 8020284:	6830      	ldr	r0, [r6, #0]
 8020286:	6803      	ldr	r3, [r0, #0]
 8020288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802028a:	4798      	blx	r3
 802028c:	4917      	ldr	r1, [pc, #92]	@ (80202ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 802028e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8020292:	880b      	ldrh	r3, [r1, #0]
 8020294:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8020298:	fb03 c202 	mla	r2, r3, r2, ip
 802029c:	437b      	muls	r3, r7
 802029e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80202a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80202a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202aa:	4410      	add	r0, r2
 80202ac:	18c2      	adds	r2, r0, r3
 80202ae:	4290      	cmp	r0, r2
 80202b0:	d214      	bcs.n	80202dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80202b2:	eb00 0c07 	add.w	ip, r0, r7
 80202b6:	4560      	cmp	r0, ip
 80202b8:	d204      	bcs.n	80202c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80202ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80202be:	f800 3b01 	strb.w	r3, [r0], #1
 80202c2:	e7f8      	b.n	80202b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80202c4:	880b      	ldrh	r3, [r1, #0]
 80202c6:	1b5b      	subs	r3, r3, r5
 80202c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202cc:	4418      	add	r0, r3
 80202ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80202d2:	1b5b      	subs	r3, r3, r5
 80202d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202d8:	441c      	add	r4, r3
 80202da:	e7e8      	b.n	80202ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80202dc:	6830      	ldr	r0, [r6, #0]
 80202de:	6803      	ldr	r3, [r0, #0]
 80202e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80202e2:	4798      	blx	r3
 80202e4:	e7b5      	b.n	8020252 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80202e6:	bf00      	nop
 80202e8:	240621b0 	.word	0x240621b0
 80202ec:	240621b2 	.word	0x240621b2
 80202f0:	240621b4 	.word	0x240621b4
 80202f4:	240621b8 	.word	0x240621b8

080202f8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80202f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202fc:	b08f      	sub	sp, #60	@ 0x3c
 80202fe:	461c      	mov	r4, r3
 8020300:	9203      	str	r2, [sp, #12]
 8020302:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020306:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020308:	6820      	ldr	r0, [r4, #0]
 802030a:	9100      	str	r1, [sp, #0]
 802030c:	9204      	str	r2, [sp, #16]
 802030e:	aa0a      	add	r2, sp, #40	@ 0x28
 8020310:	6861      	ldr	r1, [r4, #4]
 8020312:	c203      	stmia	r2!, {r0, r1}
 8020314:	6818      	ldr	r0, [r3, #0]
 8020316:	aa0c      	add	r2, sp, #48	@ 0x30
 8020318:	6859      	ldr	r1, [r3, #4]
 802031a:	c203      	stmia	r2!, {r0, r1}
 802031c:	a80a      	add	r0, sp, #40	@ 0x28
 802031e:	f7fa fc83 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020322:	4621      	mov	r1, r4
 8020324:	a80c      	add	r0, sp, #48	@ 0x30
 8020326:	f7fa fcc3 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802032a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 802032e:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020332:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020336:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 802033a:	bfdb      	ittet	le
 802033c:	b2b3      	uxthle	r3, r6
 802033e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020342:	2301      	movgt	r3, #1
 8020344:	fb92 f3f3 	sdivle	r3, r2, r3
 8020348:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802034c:	441d      	add	r5, r3
 802034e:	fb92 f1f3 	sdiv	r1, r2, r3
 8020352:	fa1f fc81 	uxth.w	ip, r1
 8020356:	3d01      	subs	r5, #1
 8020358:	fb0c 2413 	mls	r4, ip, r3, r2
 802035c:	4661      	mov	r1, ip
 802035e:	fb14 f406 	smulbb	r4, r4, r6
 8020362:	4404      	add	r4, r0
 8020364:	fb95 f5f3 	sdiv	r5, r5, r3
 8020368:	b2a4      	uxth	r4, r4
 802036a:	b131      	cbz	r1, 802037a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 802036c:	9b03      	ldr	r3, [sp, #12]
 802036e:	9900      	ldr	r1, [sp, #0]
 8020370:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020374:	ba1b      	rev	r3, r3
 8020376:	4419      	add	r1, r3
 8020378:	9100      	str	r1, [sp, #0]
 802037a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802037e:	b2ad      	uxth	r5, r5
 8020380:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020384:	4418      	add	r0, r3
 8020386:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802038a:	00ad      	lsls	r5, r5, #2
 802038c:	441a      	add	r2, r3
 802038e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020392:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020396:	9301      	str	r3, [sp, #4]
 8020398:	4b79      	ldr	r3, [pc, #484]	@ (8020580 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 802039a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802039e:	6818      	ldr	r0, [r3, #0]
 80203a0:	6803      	ldr	r3, [r0, #0]
 80203a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80203a4:	4798      	blx	r3
 80203a6:	4a77      	ldr	r2, [pc, #476]	@ (8020584 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 80203a8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80203ac:	2c00      	cmp	r4, #0
 80203ae:	8813      	ldrh	r3, [r2, #0]
 80203b0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80203b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80203b6:	fb03 c101 	mla	r1, r3, r1, ip
 80203ba:	fb06 f303 	mul.w	r3, r6, r3
 80203be:	bf18      	it	ne
 80203c0:	2600      	movne	r6, #0
 80203c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80203c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80203ca:	4408      	add	r0, r1
 80203cc:	4403      	add	r3, r0
 80203ce:	9306      	str	r3, [sp, #24]
 80203d0:	f105 0304 	add.w	r3, r5, #4
 80203d4:	9305      	str	r3, [sp, #20]
 80203d6:	9b01      	ldr	r3, [sp, #4]
 80203d8:	bf08      	it	eq
 80203da:	461e      	moveq	r6, r3
 80203dc:	2300      	movs	r3, #0
 80203de:	b2b6      	uxth	r6, r6
 80203e0:	9302      	str	r3, [sp, #8]
 80203e2:	9a06      	ldr	r2, [sp, #24]
 80203e4:	4290      	cmp	r0, r2
 80203e6:	f080 80c2 	bcs.w	802056e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 80203ea:	b963      	cbnz	r3, 8020406 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80203ec:	9b00      	ldr	r3, [sp, #0]
 80203ee:	781a      	ldrb	r2, [r3, #0]
 80203f0:	0993      	lsrs	r3, r2, #6
 80203f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80203f6:	9202      	str	r2, [sp, #8]
 80203f8:	1e5a      	subs	r2, r3, #1
 80203fa:	2a02      	cmp	r2, #2
 80203fc:	d815      	bhi.n	802042a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 80203fe:	9a00      	ldr	r2, [sp, #0]
 8020400:	b29b      	uxth	r3, r3
 8020402:	3201      	adds	r2, #1
 8020404:	9200      	str	r2, [sp, #0]
 8020406:	b1b4      	cbz	r4, 8020436 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8020408:	429c      	cmp	r4, r3
 802040a:	bf91      	iteee	ls
 802040c:	1b1c      	subls	r4, r3, r4
 802040e:	1ae4      	subhi	r4, r4, r3
 8020410:	4635      	movhi	r5, r6
 8020412:	f04f 0e00 	movhi.w	lr, #0
 8020416:	bf9b      	ittet	ls
 8020418:	fa1f fe84 	uxthls.w	lr, r4
 802041c:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8020420:	b2a4      	uxthhi	r4, r4
 8020422:	2400      	movls	r4, #0
 8020424:	4673      	mov	r3, lr
 8020426:	462e      	mov	r6, r5
 8020428:	e7db      	b.n	80203e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 802042a:	9a00      	ldr	r2, [sp, #0]
 802042c:	9b00      	ldr	r3, [sp, #0]
 802042e:	3202      	adds	r2, #2
 8020430:	785b      	ldrb	r3, [r3, #1]
 8020432:	9200      	str	r2, [sp, #0]
 8020434:	e7e7      	b.n	8020406 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8020436:	2204      	movs	r2, #4
 8020438:	9905      	ldr	r1, [sp, #20]
 802043a:	429e      	cmp	r6, r3
 802043c:	4615      	mov	r5, r2
 802043e:	9a02      	ldr	r2, [sp, #8]
 8020440:	bf94      	ite	ls
 8020442:	eba3 0e06 	subls.w	lr, r3, r6
 8020446:	46a6      	movhi	lr, r4
 8020448:	fb15 1202 	smlabb	r2, r5, r2, r1
 802044c:	9903      	ldr	r1, [sp, #12]
 802044e:	bf8c      	ite	hi
 8020450:	1af5      	subhi	r5, r6, r3
 8020452:	fa1f fe8e 	uxthls.w	lr, lr
 8020456:	f851 c002 	ldr.w	ip, [r1, r2]
 802045a:	bf9a      	itte	ls
 802045c:	4625      	movls	r5, r4
 802045e:	4632      	movls	r2, r6
 8020460:	b2ad      	uxthhi	r5, r5
 8020462:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8020466:	bf88      	it	hi
 8020468:	461a      	movhi	r2, r3
 802046a:	b179      	cbz	r1, 802048c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 802046c:	29ff      	cmp	r1, #255	@ 0xff
 802046e:	fa5f f98c 	uxtb.w	r9, ip
 8020472:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8020476:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 802047a:	d126      	bne.n	80204ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 802047c:	9f04      	ldr	r7, [sp, #16]
 802047e:	2fff      	cmp	r7, #255	@ 0xff
 8020480:	d123      	bne.n	80204ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8020482:	4682      	mov	sl, r0
 8020484:	4611      	mov	r1, r2
 8020486:	f10a 0a03 	add.w	sl, sl, #3
 802048a:	b9a9      	cbnz	r1, 80204b8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 802048c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020490:	429e      	cmp	r6, r3
 8020492:	4410      	add	r0, r2
 8020494:	d8c6      	bhi.n	8020424 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8020496:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 802049a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 802049e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80204a0:	1b64      	subs	r4, r4, r5
 80204a2:	9a01      	ldr	r2, [sp, #4]
 80204a4:	881b      	ldrh	r3, [r3, #0]
 80204a6:	b2a4      	uxth	r4, r4
 80204a8:	1a9b      	subs	r3, r3, r2
 80204aa:	2c00      	cmp	r4, #0
 80204ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204b0:	bf18      	it	ne
 80204b2:	2500      	movne	r5, #0
 80204b4:	4418      	add	r0, r3
 80204b6:	e7b5      	b.n	8020424 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80204b8:	3901      	subs	r1, #1
 80204ba:	f80a 9c03 	strb.w	r9, [sl, #-3]
 80204be:	f80a 8c02 	strb.w	r8, [sl, #-2]
 80204c2:	f80a cc01 	strb.w	ip, [sl, #-1]
 80204c6:	b289      	uxth	r1, r1
 80204c8:	e7dd      	b.n	8020486 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 80204ca:	9f04      	ldr	r7, [sp, #16]
 80204cc:	fb07 fa01 	mul.w	sl, r7, r1
 80204d0:	f10a 0101 	add.w	r1, sl, #1
 80204d4:	eb01 212a 	add.w	r1, r1, sl, asr #8
 80204d8:	1209      	asrs	r1, r1, #8
 80204da:	ea6f 0a01 	mvn.w	sl, r1
 80204de:	b289      	uxth	r1, r1
 80204e0:	fb19 f901 	smulbb	r9, r9, r1
 80204e4:	fa5f fa8a 	uxtb.w	sl, sl
 80204e8:	fb18 f801 	smulbb	r8, r8, r1
 80204ec:	fb1c f101 	smulbb	r1, ip, r1
 80204f0:	fa1f f789 	uxth.w	r7, r9
 80204f4:	4684      	mov	ip, r0
 80204f6:	4691      	mov	r9, r2
 80204f8:	9707      	str	r7, [sp, #28]
 80204fa:	b289      	uxth	r1, r1
 80204fc:	fa1f f788 	uxth.w	r7, r8
 8020500:	9708      	str	r7, [sp, #32]
 8020502:	f10c 0c03 	add.w	ip, ip, #3
 8020506:	f1b9 0f00 	cmp.w	r9, #0
 802050a:	d0bf      	beq.n	802048c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 802050c:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8020510:	f109 39ff 	add.w	r9, r9, #4294967295
 8020514:	9f07      	ldr	r7, [sp, #28]
 8020516:	fa1f f989 	uxth.w	r9, r9
 802051a:	fb08 780a 	mla	r8, r8, sl, r7
 802051e:	9f08      	ldr	r7, [sp, #32]
 8020520:	fa1f f888 	uxth.w	r8, r8
 8020524:	f108 0b01 	add.w	fp, r8, #1
 8020528:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802052c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020530:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8020534:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8020538:	fb08 780a 	mla	r8, r8, sl, r7
 802053c:	fa1f f888 	uxth.w	r8, r8
 8020540:	f108 0b01 	add.w	fp, r8, #1
 8020544:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020548:	ea4f 2828 	mov.w	r8, r8, asr #8
 802054c:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8020550:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8020554:	fb08 180a 	mla	r8, r8, sl, r1
 8020558:	fa1f f888 	uxth.w	r8, r8
 802055c:	f108 0b01 	add.w	fp, r8, #1
 8020560:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020564:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020568:	f80c 8c01 	strb.w	r8, [ip, #-1]
 802056c:	e7c9      	b.n	8020502 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 802056e:	4b04      	ldr	r3, [pc, #16]	@ (8020580 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8020570:	6818      	ldr	r0, [r3, #0]
 8020572:	6803      	ldr	r3, [r0, #0]
 8020574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020576:	4798      	blx	r3
 8020578:	b00f      	add	sp, #60	@ 0x3c
 802057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802057e:	bf00      	nop
 8020580:	240621b8 	.word	0x240621b8
 8020584:	240621b2 	.word	0x240621b2

08020588 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802058c:	b089      	sub	sp, #36	@ 0x24
 802058e:	4607      	mov	r7, r0
 8020590:	4689      	mov	r9, r1
 8020592:	4692      	mov	sl, r2
 8020594:	ac08      	add	r4, sp, #32
 8020596:	461e      	mov	r6, r3
 8020598:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 802059c:	4620      	mov	r0, r4
 802059e:	f7fd ff77 	bl	801e490 <_ZNK8touchgfx6Bitmap7getDataEv>
 80205a2:	683b      	ldr	r3, [r7, #0]
 80205a4:	4605      	mov	r5, r0
 80205a6:	4620      	mov	r0, r4
 80205a8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80205ac:	f7fd fe7e 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 80205b0:	4683      	mov	fp, r0
 80205b2:	4620      	mov	r0, r4
 80205b4:	f7fd feae 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80205b8:	4653      	mov	r3, sl
 80205ba:	464a      	mov	r2, r9
 80205bc:	4639      	mov	r1, r7
 80205be:	9500      	str	r5, [sp, #0]
 80205c0:	e9cd b001 	strd	fp, r0, [sp, #4]
 80205c4:	a806      	add	r0, sp, #24
 80205c6:	47c0      	blx	r8
 80205c8:	a906      	add	r1, sp, #24
 80205ca:	4630      	mov	r0, r6
 80205cc:	f7fd fd52 	bl	801e074 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80205d0:	4628      	mov	r0, r5
 80205d2:	b009      	add	sp, #36	@ 0x24
 80205d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205d8 <_ZN8touchgfx8LCD24bppD0Ev>:
 80205d8:	b510      	push	{r4, lr}
 80205da:	4604      	mov	r4, r0
 80205dc:	216c      	movs	r1, #108	@ 0x6c
 80205de:	f008 fc7f 	bl	8028ee0 <_ZdlPvj>
 80205e2:	4620      	mov	r0, r4
 80205e4:	bd10      	pop	{r4, pc}

080205e6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 80205e6:	b510      	push	{r4, lr}
 80205e8:	4604      	mov	r4, r0
 80205ea:	2104      	movs	r1, #4
 80205ec:	f008 fc78 	bl	8028ee0 <_ZdlPvj>
 80205f0:	4620      	mov	r0, r4
 80205f2:	bd10      	pop	{r4, pc}

080205f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 80205f4:	b510      	push	{r4, lr}
 80205f6:	4604      	mov	r4, r0
 80205f8:	2104      	movs	r1, #4
 80205fa:	f008 fc71 	bl	8028ee0 <_ZdlPvj>
 80205fe:	4620      	mov	r0, r4
 8020600:	bd10      	pop	{r4, pc}

08020602 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8020602:	b510      	push	{r4, lr}
 8020604:	4604      	mov	r4, r0
 8020606:	f640 0144 	movw	r1, #2116	@ 0x844
 802060a:	f008 fc69 	bl	8028ee0 <_ZdlPvj>
 802060e:	4620      	mov	r0, r4
 8020610:	bd10      	pop	{r4, pc}

08020612 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8020612:	b510      	push	{r4, lr}
 8020614:	4604      	mov	r4, r0
 8020616:	f44f 7182 	mov.w	r1, #260	@ 0x104
 802061a:	f008 fc61 	bl	8028ee0 <_ZdlPvj>
 802061e:	4620      	mov	r0, r4
 8020620:	bd10      	pop	{r4, pc}

08020622 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020622:	b510      	push	{r4, lr}
 8020624:	4604      	mov	r4, r0
 8020626:	2104      	movs	r1, #4
 8020628:	f008 fc5a 	bl	8028ee0 <_ZdlPvj>
 802062c:	4620      	mov	r0, r4
 802062e:	bd10      	pop	{r4, pc}

08020630 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020630:	b510      	push	{r4, lr}
 8020632:	4604      	mov	r4, r0
 8020634:	2104      	movs	r1, #4
 8020636:	f008 fc53 	bl	8028ee0 <_ZdlPvj>
 802063a:	4620      	mov	r0, r4
 802063c:	bd10      	pop	{r4, pc}

0802063e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802063e:	b510      	push	{r4, lr}
 8020640:	4604      	mov	r4, r0
 8020642:	2104      	movs	r1, #4
 8020644:	f008 fc4c 	bl	8028ee0 <_ZdlPvj>
 8020648:	4620      	mov	r0, r4
 802064a:	bd10      	pop	{r4, pc}

0802064c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802064c:	b510      	push	{r4, lr}
 802064e:	4604      	mov	r4, r0
 8020650:	2104      	movs	r1, #4
 8020652:	f008 fc45 	bl	8028ee0 <_ZdlPvj>
 8020656:	4620      	mov	r0, r4
 8020658:	bd10      	pop	{r4, pc}

0802065a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802065a:	b510      	push	{r4, lr}
 802065c:	4604      	mov	r4, r0
 802065e:	2104      	movs	r1, #4
 8020660:	f008 fc3e 	bl	8028ee0 <_ZdlPvj>
 8020664:	4620      	mov	r0, r4
 8020666:	bd10      	pop	{r4, pc}

08020668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020668:	b510      	push	{r4, lr}
 802066a:	4604      	mov	r4, r0
 802066c:	2104      	movs	r1, #4
 802066e:	f008 fc37 	bl	8028ee0 <_ZdlPvj>
 8020672:	4620      	mov	r0, r4
 8020674:	bd10      	pop	{r4, pc}

08020676 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020676:	b510      	push	{r4, lr}
 8020678:	4604      	mov	r4, r0
 802067a:	2104      	movs	r1, #4
 802067c:	f008 fc30 	bl	8028ee0 <_ZdlPvj>
 8020680:	4620      	mov	r0, r4
 8020682:	bd10      	pop	{r4, pc}

08020684 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020684:	b510      	push	{r4, lr}
 8020686:	4604      	mov	r4, r0
 8020688:	2104      	movs	r1, #4
 802068a:	f008 fc29 	bl	8028ee0 <_ZdlPvj>
 802068e:	4620      	mov	r0, r4
 8020690:	bd10      	pop	{r4, pc}

08020692 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020692:	b510      	push	{r4, lr}
 8020694:	4604      	mov	r4, r0
 8020696:	2104      	movs	r1, #4
 8020698:	f008 fc22 	bl	8028ee0 <_ZdlPvj>
 802069c:	4620      	mov	r0, r4
 802069e:	bd10      	pop	{r4, pc}

080206a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80206a0:	b510      	push	{r4, lr}
 80206a2:	4604      	mov	r4, r0
 80206a4:	2104      	movs	r1, #4
 80206a6:	f008 fc1b 	bl	8028ee0 <_ZdlPvj>
 80206aa:	4620      	mov	r0, r4
 80206ac:	bd10      	pop	{r4, pc}

080206ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80206ae:	b510      	push	{r4, lr}
 80206b0:	4604      	mov	r4, r0
 80206b2:	2104      	movs	r1, #4
 80206b4:	f008 fc14 	bl	8028ee0 <_ZdlPvj>
 80206b8:	4620      	mov	r0, r4
 80206ba:	bd10      	pop	{r4, pc}

080206bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80206bc:	b510      	push	{r4, lr}
 80206be:	4604      	mov	r4, r0
 80206c0:	2104      	movs	r1, #4
 80206c2:	f008 fc0d 	bl	8028ee0 <_ZdlPvj>
 80206c6:	4620      	mov	r0, r4
 80206c8:	bd10      	pop	{r4, pc}

080206ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80206ca:	b510      	push	{r4, lr}
 80206cc:	4604      	mov	r4, r0
 80206ce:	2104      	movs	r1, #4
 80206d0:	f008 fc06 	bl	8028ee0 <_ZdlPvj>
 80206d4:	4620      	mov	r0, r4
 80206d6:	bd10      	pop	{r4, pc}

080206d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80206d8:	b510      	push	{r4, lr}
 80206da:	4604      	mov	r4, r0
 80206dc:	2104      	movs	r1, #4
 80206de:	f008 fbff 	bl	8028ee0 <_ZdlPvj>
 80206e2:	4620      	mov	r0, r4
 80206e4:	bd10      	pop	{r4, pc}

080206e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80206e6:	b510      	push	{r4, lr}
 80206e8:	4604      	mov	r4, r0
 80206ea:	2104      	movs	r1, #4
 80206ec:	f008 fbf8 	bl	8028ee0 <_ZdlPvj>
 80206f0:	4620      	mov	r0, r4
 80206f2:	bd10      	pop	{r4, pc}

080206f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80206f4:	b510      	push	{r4, lr}
 80206f6:	4604      	mov	r4, r0
 80206f8:	2104      	movs	r1, #4
 80206fa:	f008 fbf1 	bl	8028ee0 <_ZdlPvj>
 80206fe:	4620      	mov	r0, r4
 8020700:	bd10      	pop	{r4, pc}

08020702 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020702:	b510      	push	{r4, lr}
 8020704:	4604      	mov	r4, r0
 8020706:	2104      	movs	r1, #4
 8020708:	f008 fbea 	bl	8028ee0 <_ZdlPvj>
 802070c:	4620      	mov	r0, r4
 802070e:	bd10      	pop	{r4, pc}

08020710 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020710:	b510      	push	{r4, lr}
 8020712:	4604      	mov	r4, r0
 8020714:	2104      	movs	r1, #4
 8020716:	f008 fbe3 	bl	8028ee0 <_ZdlPvj>
 802071a:	4620      	mov	r0, r4
 802071c:	bd10      	pop	{r4, pc}

0802071e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 802071e:	b510      	push	{r4, lr}
 8020720:	4604      	mov	r4, r0
 8020722:	2104      	movs	r1, #4
 8020724:	f008 fbdc 	bl	8028ee0 <_ZdlPvj>
 8020728:	4620      	mov	r0, r4
 802072a:	bd10      	pop	{r4, pc}

0802072c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802072c:	b510      	push	{r4, lr}
 802072e:	4604      	mov	r4, r0
 8020730:	2104      	movs	r1, #4
 8020732:	f008 fbd5 	bl	8028ee0 <_ZdlPvj>
 8020736:	4620      	mov	r0, r4
 8020738:	bd10      	pop	{r4, pc}
	...

0802073c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020740:	b08f      	sub	sp, #60	@ 0x3c
 8020742:	461c      	mov	r4, r3
 8020744:	460e      	mov	r6, r1
 8020746:	9206      	str	r2, [sp, #24]
 8020748:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 802074c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802074e:	9202      	str	r2, [sp, #8]
 8020750:	2a00      	cmp	r2, #0
 8020752:	f000 8128 	beq.w	80209a6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8020756:	6820      	ldr	r0, [r4, #0]
 8020758:	aa0a      	add	r2, sp, #40	@ 0x28
 802075a:	6861      	ldr	r1, [r4, #4]
 802075c:	c203      	stmia	r2!, {r0, r1}
 802075e:	6818      	ldr	r0, [r3, #0]
 8020760:	aa0c      	add	r2, sp, #48	@ 0x30
 8020762:	6859      	ldr	r1, [r3, #4]
 8020764:	c203      	stmia	r2!, {r0, r1}
 8020766:	a80a      	add	r0, sp, #40	@ 0x28
 8020768:	f7fa fa5e 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802076c:	4621      	mov	r1, r4
 802076e:	a80c      	add	r0, sp, #48	@ 0x30
 8020770:	f7fa fa9e 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020774:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8020778:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 802077c:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8020780:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020784:	bfdb      	ittet	le
 8020786:	b2bb      	uxthle	r3, r7
 8020788:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 802078c:	2301      	movgt	r3, #1
 802078e:	fb92 f3f3 	sdivle	r3, r2, r3
 8020792:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020796:	441d      	add	r5, r3
 8020798:	fb92 f1f3 	sdiv	r1, r2, r3
 802079c:	fa1f fc81 	uxth.w	ip, r1
 80207a0:	3d01      	subs	r5, #1
 80207a2:	fb0c 2413 	mls	r4, ip, r3, r2
 80207a6:	4661      	mov	r1, ip
 80207a8:	fb14 f407 	smulbb	r4, r4, r7
 80207ac:	4404      	add	r4, r0
 80207ae:	fb95 f5f3 	sdiv	r5, r5, r3
 80207b2:	b2a4      	uxth	r4, r4
 80207b4:	b121      	cbz	r1, 80207c0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 80207b6:	9b06      	ldr	r3, [sp, #24]
 80207b8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80207bc:	ba1b      	rev	r3, r3
 80207be:	441e      	add	r6, r3
 80207c0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80207c4:	b2ad      	uxth	r5, r5
 80207c6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 80207ca:	4418      	add	r0, r3
 80207cc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80207d0:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 80207d4:	00ad      	lsls	r5, r5, #2
 80207d6:	441a      	add	r2, r3
 80207d8:	4b74      	ldr	r3, [pc, #464]	@ (80209ac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 80207da:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80207de:	6818      	ldr	r0, [r3, #0]
 80207e0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80207e4:	6803      	ldr	r3, [r0, #0]
 80207e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80207e8:	4798      	blx	r3
 80207ea:	4a71      	ldr	r2, [pc, #452]	@ (80209b0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 80207ec:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80207f0:	2c00      	cmp	r4, #0
 80207f2:	8813      	ldrh	r3, [r2, #0]
 80207f4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80207f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80207fa:	fb03 c101 	mla	r1, r3, r1, ip
 80207fe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8020802:	fb03 f307 	mul.w	r3, r3, r7
 8020806:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802080a:	9204      	str	r2, [sp, #16]
 802080c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020810:	9a02      	ldr	r2, [sp, #8]
 8020812:	4408      	add	r0, r1
 8020814:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8020818:	4403      	add	r3, r0
 802081a:	b292      	uxth	r2, r2
 802081c:	9307      	str	r3, [sp, #28]
 802081e:	f105 0304 	add.w	r3, r5, #4
 8020822:	bf0c      	ite	eq
 8020824:	4645      	moveq	r5, r8
 8020826:	2500      	movne	r5, #0
 8020828:	9308      	str	r3, [sp, #32]
 802082a:	2300      	movs	r3, #0
 802082c:	b2ad      	uxth	r5, r5
 802082e:	9205      	str	r2, [sp, #20]
 8020830:	9303      	str	r3, [sp, #12]
 8020832:	9a07      	ldr	r2, [sp, #28]
 8020834:	4282      	cmp	r2, r0
 8020836:	f240 80b1 	bls.w	802099c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 802083a:	b95b      	cbnz	r3, 8020854 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 802083c:	7832      	ldrb	r2, [r6, #0]
 802083e:	0993      	lsrs	r3, r2, #6
 8020840:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020844:	9203      	str	r2, [sp, #12]
 8020846:	1e5a      	subs	r2, r3, #1
 8020848:	2a02      	cmp	r2, #2
 802084a:	bf8d      	iteet	hi
 802084c:	7873      	ldrbhi	r3, [r6, #1]
 802084e:	3601      	addls	r6, #1
 8020850:	b29b      	uxthls	r3, r3
 8020852:	3602      	addhi	r6, #2
 8020854:	b184      	cbz	r4, 8020878 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8020856:	429c      	cmp	r4, r3
 8020858:	bf91      	iteee	ls
 802085a:	1b1c      	subls	r4, r3, r4
 802085c:	1ae4      	subhi	r4, r4, r3
 802085e:	4629      	movhi	r1, r5
 8020860:	f04f 0e00 	movhi.w	lr, #0
 8020864:	bf9b      	ittet	ls
 8020866:	fa1f fe84 	uxthls.w	lr, r4
 802086a:	2400      	movls	r4, #0
 802086c:	b2a4      	uxthhi	r4, r4
 802086e:	fa1f f188 	uxthls.w	r1, r8
 8020872:	4673      	mov	r3, lr
 8020874:	460d      	mov	r5, r1
 8020876:	e7dc      	b.n	8020832 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8020878:	2203      	movs	r2, #3
 802087a:	9908      	ldr	r1, [sp, #32]
 802087c:	42ab      	cmp	r3, r5
 802087e:	4617      	mov	r7, r2
 8020880:	9a03      	ldr	r2, [sp, #12]
 8020882:	bf24      	itt	cs
 8020884:	eba3 0e05 	subcs.w	lr, r3, r5
 8020888:	9501      	strcs	r5, [sp, #4]
 802088a:	fb17 1702 	smlabb	r7, r7, r2, r1
 802088e:	9a06      	ldr	r2, [sp, #24]
 8020890:	bf34      	ite	cc
 8020892:	1ae9      	subcc	r1, r5, r3
 8020894:	fa1f fe8e 	uxthcs.w	lr, lr
 8020898:	4417      	add	r7, r2
 802089a:	9a02      	ldr	r2, [sp, #8]
 802089c:	bf2f      	iteee	cs
 802089e:	4621      	movcs	r1, r4
 80208a0:	b289      	uxthcc	r1, r1
 80208a2:	9301      	strcc	r3, [sp, #4]
 80208a4:	46a6      	movcc	lr, r4
 80208a6:	2aff      	cmp	r2, #255	@ 0xff
 80208a8:	d11e      	bne.n	80208e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 80208aa:	4681      	mov	r9, r0
 80208ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 80208b0:	f109 0903 	add.w	r9, r9, #3
 80208b4:	f1bc 0f00 	cmp.w	ip, #0
 80208b8:	d15f      	bne.n	802097a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 80208ba:	9a01      	ldr	r2, [sp, #4]
 80208bc:	42ab      	cmp	r3, r5
 80208be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80208c2:	4410      	add	r0, r2
 80208c4:	d3d5      	bcc.n	8020872 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80208c6:	fa1f f188 	uxth.w	r1, r8
 80208ca:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80208ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208d0:	1a64      	subs	r4, r4, r1
 80208d2:	881b      	ldrh	r3, [r3, #0]
 80208d4:	b2a4      	uxth	r4, r4
 80208d6:	eba3 0308 	sub.w	r3, r3, r8
 80208da:	2c00      	cmp	r4, #0
 80208dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208e0:	bf18      	it	ne
 80208e2:	2100      	movne	r1, #0
 80208e4:	4418      	add	r0, r3
 80208e6:	e7c4      	b.n	8020872 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80208e8:	4684      	mov	ip, r0
 80208ea:	f8dd a004 	ldr.w	sl, [sp, #4]
 80208ee:	f10c 0c03 	add.w	ip, ip, #3
 80208f2:	f1ba 0f00 	cmp.w	sl, #0
 80208f6:	d0e0      	beq.n	80208ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 80208f8:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 80208fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020900:	9a05      	ldr	r2, [sp, #20]
 8020902:	f897 9000 	ldrb.w	r9, [r7]
 8020906:	fa1f fa8a 	uxth.w	sl, sl
 802090a:	fb1b fb02 	smulbb	fp, fp, r2
 802090e:	9a04      	ldr	r2, [sp, #16]
 8020910:	fb09 b902 	mla	r9, r9, r2, fp
 8020914:	9a05      	ldr	r2, [sp, #20]
 8020916:	fa1f f989 	uxth.w	r9, r9
 802091a:	f109 0b01 	add.w	fp, r9, #1
 802091e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020922:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8020926:	fb1b fb02 	smulbb	fp, fp, r2
 802092a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802092e:	9a04      	ldr	r2, [sp, #16]
 8020930:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8020934:	f897 9001 	ldrb.w	r9, [r7, #1]
 8020938:	fb09 b902 	mla	r9, r9, r2, fp
 802093c:	9a05      	ldr	r2, [sp, #20]
 802093e:	fa1f f989 	uxth.w	r9, r9
 8020942:	f109 0b01 	add.w	fp, r9, #1
 8020946:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802094a:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 802094e:	fb1b fb02 	smulbb	fp, fp, r2
 8020952:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020956:	9a04      	ldr	r2, [sp, #16]
 8020958:	f80c 9c02 	strb.w	r9, [ip, #-2]
 802095c:	f897 9002 	ldrb.w	r9, [r7, #2]
 8020960:	fb09 b902 	mla	r9, r9, r2, fp
 8020964:	fa1f f989 	uxth.w	r9, r9
 8020968:	f109 0b01 	add.w	fp, r9, #1
 802096c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020970:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020974:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8020978:	e7b9      	b.n	80208ee <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 802097a:	f897 a000 	ldrb.w	sl, [r7]
 802097e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020982:	f809 ac03 	strb.w	sl, [r9, #-3]
 8020986:	fa1f fc8c 	uxth.w	ip, ip
 802098a:	f897 a001 	ldrb.w	sl, [r7, #1]
 802098e:	f809 ac02 	strb.w	sl, [r9, #-2]
 8020992:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020996:	f809 ac01 	strb.w	sl, [r9, #-1]
 802099a:	e789      	b.n	80208b0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 802099c:	4b03      	ldr	r3, [pc, #12]	@ (80209ac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 802099e:	6818      	ldr	r0, [r3, #0]
 80209a0:	6803      	ldr	r3, [r0, #0]
 80209a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80209a4:	4798      	blx	r3
 80209a6:	b00f      	add	sp, #60	@ 0x3c
 80209a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209ac:	240621b8 	.word	0x240621b8
 80209b0:	240621b2 	.word	0x240621b2

080209b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80209b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209b8:	b09b      	sub	sp, #108	@ 0x6c
 80209ba:	461d      	mov	r5, r3
 80209bc:	4604      	mov	r4, r0
 80209be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80209c0:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 80209c4:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 80209c8:	9208      	str	r2, [sp, #32]
 80209ca:	2a00      	cmp	r2, #0
 80209cc:	f000 81f3 	beq.w	8020db6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 80209d0:	6828      	ldr	r0, [r5, #0]
 80209d2:	aa16      	add	r2, sp, #88	@ 0x58
 80209d4:	6869      	ldr	r1, [r5, #4]
 80209d6:	c203      	stmia	r2!, {r0, r1}
 80209d8:	6818      	ldr	r0, [r3, #0]
 80209da:	aa18      	add	r2, sp, #96	@ 0x60
 80209dc:	6859      	ldr	r1, [r3, #4]
 80209de:	c203      	stmia	r2!, {r0, r1}
 80209e0:	a816      	add	r0, sp, #88	@ 0x58
 80209e2:	f7fa f921 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80209e6:	4629      	mov	r1, r5
 80209e8:	a818      	add	r0, sp, #96	@ 0x60
 80209ea:	f7fa f961 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80209ee:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 80209f2:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 80209f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80209fa:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 80209fe:	bfdb      	ittet	le
 8020a00:	b29a      	uxthle	r2, r3
 8020a02:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020a06:	f04f 0a01 	movgt.w	sl, #1
 8020a0a:	fb91 faf2 	sdivle	sl, r1, r2
 8020a0e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8020a12:	4456      	add	r6, sl
 8020a14:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8020a18:	3e01      	subs	r6, #1
 8020a1a:	fb92 f0fa 	sdiv	r0, r2, sl
 8020a1e:	b280      	uxth	r0, r0
 8020a20:	fb00 281a 	mls	r8, r0, sl, r2
 8020a24:	900e      	str	r0, [sp, #56]	@ 0x38
 8020a26:	fb18 f803 	smulbb	r8, r8, r3
 8020a2a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8020a2e:	4488      	add	r8, r1
 8020a30:	4419      	add	r1, r3
 8020a32:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8020a36:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8020a3a:	fa1f f888 	uxth.w	r8, r8
 8020a3e:	441a      	add	r2, r3
 8020a40:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8020a44:	9303      	str	r3, [sp, #12]
 8020a46:	4b9c      	ldr	r3, [pc, #624]	@ (8020cb8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8020a48:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8020a4c:	6818      	ldr	r0, [r3, #0]
 8020a4e:	6803      	ldr	r3, [r0, #0]
 8020a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020a52:	4798      	blx	r3
 8020a54:	4b99      	ldr	r3, [pc, #612]	@ (8020cbc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8020a56:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8020a5a:	f1b8 0f00 	cmp.w	r8, #0
 8020a5e:	881a      	ldrh	r2, [r3, #0]
 8020a60:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8020a64:	fb02 f505 	mul.w	r5, r2, r5
 8020a68:	fb02 7101 	mla	r1, r2, r1, r7
 8020a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a70:	9314      	str	r3, [sp, #80]	@ 0x50
 8020a72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020a76:	9b08      	ldr	r3, [sp, #32]
 8020a78:	fb96 f6fa 	sdiv	r6, r6, sl
 8020a7c:	4408      	add	r0, r1
 8020a7e:	f106 0601 	add.w	r6, r6, #1
 8020a82:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8020a86:	f04f 0100 	mov.w	r1, #0
 8020a8a:	eb00 0205 	add.w	r2, r0, r5
 8020a8e:	b2b6      	uxth	r6, r6
 8020a90:	b29b      	uxth	r3, r3
 8020a92:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a94:	9209      	str	r2, [sp, #36]	@ 0x24
 8020a96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020a98:	930d      	str	r3, [sp, #52]	@ 0x34
 8020a9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020a9e:	4b88      	ldr	r3, [pc, #544]	@ (8020cc0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8020aa0:	f106 0204 	add.w	r2, r6, #4
 8020aa4:	eba3 0304 	sub.w	r3, r3, r4
 8020aa8:	9205      	str	r2, [sp, #20]
 8020aaa:	9a03      	ldr	r2, [sp, #12]
 8020aac:	bf18      	it	ne
 8020aae:	2200      	movne	r2, #0
 8020ab0:	9315      	str	r3, [sp, #84]	@ 0x54
 8020ab2:	b292      	uxth	r2, r2
 8020ab4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ab8:	fa11 f383 	uxtah	r3, r1, r3
 8020abc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020abe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020ac2:	3304      	adds	r3, #4
 8020ac4:	9306      	str	r3, [sp, #24]
 8020ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ac8:	4283      	cmp	r3, r0
 8020aca:	f240 816f 	bls.w	8020dac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8020ace:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8020ad2:	f04f 0900 	mov.w	r9, #0
 8020ad6:	9d06      	ldr	r5, [sp, #24]
 8020ad8:	fbb8 f3f3 	udiv	r3, r8, r3
 8020adc:	ebaa 0303 	sub.w	r3, sl, r3
 8020ae0:	782d      	ldrb	r5, [r5, #0]
 8020ae2:	b29b      	uxth	r3, r3
 8020ae4:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020ae6:	3501      	adds	r5, #1
 8020ae8:	9312      	str	r3, [sp, #72]	@ 0x48
 8020aea:	9b06      	ldr	r3, [sp, #24]
 8020aec:	9504      	str	r5, [sp, #16]
 8020aee:	7859      	ldrb	r1, [r3, #1]
 8020af0:	789b      	ldrb	r3, [r3, #2]
 8020af2:	021b      	lsls	r3, r3, #8
 8020af4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020af8:	9906      	ldr	r1, [sp, #24]
 8020afa:	78c9      	ldrb	r1, [r1, #3]
 8020afc:	430b      	orrs	r3, r1
 8020afe:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020b00:	4419      	add	r1, r3
 8020b02:	1c4d      	adds	r5, r1, #1
 8020b04:	7849      	ldrb	r1, [r1, #1]
 8020b06:	9502      	str	r5, [sp, #8]
 8020b08:	0209      	lsls	r1, r1, #8
 8020b0a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020b0c:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8020b10:	5ceb      	ldrb	r3, [r5, r3]
 8020b12:	4319      	orrs	r1, r3
 8020b14:	b28b      	uxth	r3, r1
 8020b16:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8020b1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8020b1c:	2300      	movs	r3, #0
 8020b1e:	9307      	str	r3, [sp, #28]
 8020b20:	2301      	movs	r3, #1
 8020b22:	e9cd 3300 	strd	r3, r3, [sp]
 8020b26:	469c      	mov	ip, r3
 8020b28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020b2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020b2e:	f1b8 0f00 	cmp.w	r8, #0
 8020b32:	f000 8082 	beq.w	8020c3a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8020b36:	45c4      	cmp	ip, r8
 8020b38:	d270      	bcs.n	8020c1c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8020b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b3c:	eba8 080c 	sub.w	r8, r8, ip
 8020b40:	4611      	mov	r1, r2
 8020b42:	4283      	cmp	r3, r0
 8020b44:	fa1f f888 	uxth.w	r8, r8
 8020b48:	d802      	bhi.n	8020b50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020b4a:	e074      	b.n	8020c36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	d15f      	bne.n	8020c10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8020b50:	9b02      	ldr	r3, [sp, #8]
 8020b52:	9a01      	ldr	r2, [sp, #4]
 8020b54:	785b      	ldrb	r3, [r3, #1]
 8020b56:	f1c2 0207 	rsb	r2, r2, #7
 8020b5a:	9d01      	ldr	r5, [sp, #4]
 8020b5c:	4093      	lsls	r3, r2
 8020b5e:	005b      	lsls	r3, r3, #1
 8020b60:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8020b64:	9b02      	ldr	r3, [sp, #8]
 8020b66:	781b      	ldrb	r3, [r3, #0]
 8020b68:	412b      	asrs	r3, r5
 8020b6a:	b2db      	uxtb	r3, r3
 8020b6c:	4313      	orrs	r3, r2
 8020b6e:	462a      	mov	r2, r5
 8020b70:	3201      	adds	r2, #1
 8020b72:	b29e      	uxth	r6, r3
 8020b74:	b2d2      	uxtb	r2, r2
 8020b76:	2a08      	cmp	r2, #8
 8020b78:	9201      	str	r2, [sp, #4]
 8020b7a:	9a02      	ldr	r2, [sp, #8]
 8020b7c:	bf09      	itett	eq
 8020b7e:	3202      	addeq	r2, #2
 8020b80:	3201      	addne	r2, #1
 8020b82:	9202      	streq	r2, [sp, #8]
 8020b84:	2200      	moveq	r2, #0
 8020b86:	bf14      	ite	ne
 8020b88:	9202      	strne	r2, [sp, #8]
 8020b8a:	9201      	streq	r2, [sp, #4]
 8020b8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020b8e:	42b2      	cmp	r2, r6
 8020b90:	d309      	bcc.n	8020ba6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8020b92:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8020b96:	2301      	movs	r3, #1
 8020b98:	9a04      	ldr	r2, [sp, #16]
 8020b9a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8020b9e:	d30e      	bcc.n	8020bbe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8020ba0:	9300      	str	r3, [sp, #0]
 8020ba2:	2500      	movs	r5, #0
 8020ba4:	e035      	b.n	8020c12 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8020ba6:	9b04      	ldr	r3, [sp, #16]
 8020ba8:	429e      	cmp	r6, r3
 8020baa:	d318      	bcc.n	8020bde <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8020bac:	9b00      	ldr	r3, [sp, #0]
 8020bae:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8020bb2:	18e3      	adds	r3, r4, r3
 8020bb4:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8020bb8:	9b00      	ldr	r3, [sp, #0]
 8020bba:	3301      	adds	r3, #1
 8020bbc:	b29b      	uxth	r3, r3
 8020bbe:	9a04      	ldr	r2, [sp, #16]
 8020bc0:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8020bc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020bc8:	9f00      	ldr	r7, [sp, #0]
 8020bca:	7115      	strb	r5, [r2, #4]
 8020bcc:	3701      	adds	r7, #1
 8020bce:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020bd0:	7157      	strb	r7, [r2, #5]
 8020bd2:	80d5      	strh	r5, [r2, #6]
 8020bd4:	9a04      	ldr	r2, [sp, #16]
 8020bd6:	3201      	adds	r2, #1
 8020bd8:	b292      	uxth	r2, r2
 8020bda:	9204      	str	r2, [sp, #16]
 8020bdc:	e7e0      	b.n	8020ba0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8020bde:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020be2:	4632      	mov	r2, r6
 8020be4:	795b      	ldrb	r3, [r3, #5]
 8020be6:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8020bea:	4425      	add	r5, r4
 8020bec:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8020bee:	eb07 0c05 	add.w	ip, r7, r5
 8020bf2:	f1bc 0f00 	cmp.w	ip, #0
 8020bf6:	dd07      	ble.n	8020c08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8020bf8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020bfc:	f892 c004 	ldrb.w	ip, [r2, #4]
 8020c00:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8020c04:	88d2      	ldrh	r2, [r2, #6]
 8020c06:	e7f1      	b.n	8020bec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8020c08:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8020c0c:	b29b      	uxth	r3, r3
 8020c0e:	e7c3      	b.n	8020b98 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8020c10:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020c12:	460a      	mov	r2, r1
 8020c14:	960a      	str	r6, [sp, #40]	@ 0x28
 8020c16:	46a9      	mov	r9, r5
 8020c18:	469c      	mov	ip, r3
 8020c1a:	e788      	b.n	8020b2e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8020c1c:	ebac 0308 	sub.w	r3, ip, r8
 8020c20:	eb09 0508 	add.w	r5, r9, r8
 8020c24:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020c28:	b29b      	uxth	r3, r3
 8020c2a:	b2ad      	uxth	r5, r5
 8020c2c:	f04f 0800 	mov.w	r8, #0
 8020c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020c32:	4282      	cmp	r2, r0
 8020c34:	d88a      	bhi.n	8020b4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8020c36:	460a      	mov	r2, r1
 8020c38:	e745      	b.n	8020ac6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8020c3a:	4594      	cmp	ip, r2
 8020c3c:	9d08      	ldr	r5, [sp, #32]
 8020c3e:	4686      	mov	lr, r0
 8020c40:	bf27      	ittee	cs
 8020c42:	ebac 0302 	subcs.w	r3, ip, r2
 8020c46:	4616      	movcs	r6, r2
 8020c48:	eba2 010c 	subcc.w	r1, r2, ip
 8020c4c:	4666      	movcc	r6, ip
 8020c4e:	bf27      	ittee	cs
 8020c50:	b29b      	uxthcs	r3, r3
 8020c52:	4641      	movcs	r1, r8
 8020c54:	b289      	uxthcc	r1, r1
 8020c56:	4643      	movcc	r3, r8
 8020c58:	2dff      	cmp	r5, #255	@ 0xff
 8020c5a:	eb09 0506 	add.w	r5, r9, r6
 8020c5e:	b2ad      	uxth	r5, r5
 8020c60:	d130      	bne.n	8020cc4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8020c62:	45a9      	cmp	r9, r5
 8020c64:	f10e 0e03 	add.w	lr, lr, #3
 8020c68:	d17a      	bne.n	8020d60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8020c6a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020c6e:	4594      	cmp	ip, r2
 8020c70:	4430      	add	r0, r6
 8020c72:	d3db      	bcc.n	8020c2c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8020c74:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020c76:	9903      	ldr	r1, [sp, #12]
 8020c78:	8812      	ldrh	r2, [r2, #0]
 8020c7a:	1a52      	subs	r2, r2, r1
 8020c7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020c7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020c82:	4410      	add	r0, r2
 8020c84:	9a07      	ldr	r2, [sp, #28]
 8020c86:	3201      	adds	r2, #1
 8020c88:	428a      	cmp	r2, r1
 8020c8a:	9207      	str	r2, [sp, #28]
 8020c8c:	f040 8081 	bne.w	8020d92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8020c90:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8020c94:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8020c98:	9b03      	ldr	r3, [sp, #12]
 8020c9a:	eba8 080c 	sub.w	r8, r8, ip
 8020c9e:	fa1f f888 	uxth.w	r8, r8
 8020ca2:	f1b8 0f00 	cmp.w	r8, #0
 8020ca6:	bf08      	it	eq
 8020ca8:	461a      	moveq	r2, r3
 8020caa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020cac:	bf18      	it	ne
 8020cae:	2200      	movne	r2, #0
 8020cb0:	3301      	adds	r3, #1
 8020cb2:	b292      	uxth	r2, r2
 8020cb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020cb6:	e6fd      	b.n	8020ab4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8020cb8:	240621b8 	.word	0x240621b8
 8020cbc:	240621b2 	.word	0x240621b2
 8020cc0:	fffff7fb 	.word	0xfffff7fb
 8020cc4:	45a9      	cmp	r9, r5
 8020cc6:	f10e 0e03 	add.w	lr, lr, #3
 8020cca:	d0ce      	beq.n	8020c6a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8020ccc:	f109 0701 	add.w	r7, r9, #1
 8020cd0:	44a1      	add	r9, r4
 8020cd2:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8020cd6:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8020cda:	9713      	str	r7, [sp, #76]	@ 0x4c
 8020cdc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020ce0:	9f05      	ldr	r7, [sp, #20]
 8020ce2:	eb07 0908 	add.w	r9, r7, r8
 8020ce6:	f817 8008 	ldrb.w	r8, [r7, r8]
 8020cea:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8020cec:	fb1b fb07 	smulbb	fp, fp, r7
 8020cf0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020cf2:	fb08 b807 	mla	r8, r8, r7, fp
 8020cf6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8020cf8:	fa1f f888 	uxth.w	r8, r8
 8020cfc:	f108 0b01 	add.w	fp, r8, #1
 8020d00:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020d04:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8020d08:	fb1b fb07 	smulbb	fp, fp, r7
 8020d0c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020d10:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020d12:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8020d16:	f899 8001 	ldrb.w	r8, [r9, #1]
 8020d1a:	fb08 b807 	mla	r8, r8, r7, fp
 8020d1e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8020d20:	fa1f f888 	uxth.w	r8, r8
 8020d24:	f108 0b01 	add.w	fp, r8, #1
 8020d28:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020d2c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020d30:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8020d34:	f899 8002 	ldrb.w	r8, [r9, #2]
 8020d38:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8020d3c:	fb19 f907 	smulbb	r9, r9, r7
 8020d40:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020d42:	fb08 9807 	mla	r8, r8, r7, r9
 8020d46:	fa1f f888 	uxth.w	r8, r8
 8020d4a:	f108 0901 	add.w	r9, r8, #1
 8020d4e:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8020d52:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8020d56:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020d5a:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8020d5e:	e7b1      	b.n	8020cc4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8020d60:	f109 0b01 	add.w	fp, r9, #1
 8020d64:	44a1      	add	r9, r4
 8020d66:	9f05      	ldr	r7, [sp, #20]
 8020d68:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8020d6c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020d70:	eb07 0908 	add.w	r9, r7, r8
 8020d74:	f817 8008 	ldrb.w	r8, [r7, r8]
 8020d78:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8020d7c:	f899 8001 	ldrb.w	r8, [r9, #1]
 8020d80:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8020d84:	f899 8002 	ldrb.w	r8, [r9, #2]
 8020d88:	fa1f f98b 	uxth.w	r9, fp
 8020d8c:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8020d90:	e767      	b.n	8020c62 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8020d92:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020d96:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8020d9a:	eba8 0801 	sub.w	r8, r8, r1
 8020d9e:	fa1f f888 	uxth.w	r8, r8
 8020da2:	f1b8 0f00 	cmp.w	r8, #0
 8020da6:	bf18      	it	ne
 8020da8:	2100      	movne	r1, #0
 8020daa:	e741      	b.n	8020c30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8020dac:	4b03      	ldr	r3, [pc, #12]	@ (8020dbc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8020dae:	6818      	ldr	r0, [r3, #0]
 8020db0:	6803      	ldr	r3, [r0, #0]
 8020db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020db4:	4798      	blx	r3
 8020db6:	b01b      	add	sp, #108	@ 0x6c
 8020db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dbc:	240621b8 	.word	0x240621b8

08020dc0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc4:	b09d      	sub	sp, #116	@ 0x74
 8020dc6:	461d      	mov	r5, r3
 8020dc8:	4604      	mov	r4, r0
 8020dca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020dcc:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8020dd0:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8020dd4:	920c      	str	r2, [sp, #48]	@ 0x30
 8020dd6:	2a00      	cmp	r2, #0
 8020dd8:	f000 81de 	beq.w	8021198 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8020ddc:	6828      	ldr	r0, [r5, #0]
 8020dde:	aa18      	add	r2, sp, #96	@ 0x60
 8020de0:	6869      	ldr	r1, [r5, #4]
 8020de2:	c203      	stmia	r2!, {r0, r1}
 8020de4:	6818      	ldr	r0, [r3, #0]
 8020de6:	aa1a      	add	r2, sp, #104	@ 0x68
 8020de8:	6859      	ldr	r1, [r3, #4]
 8020dea:	c203      	stmia	r2!, {r0, r1}
 8020dec:	a818      	add	r0, sp, #96	@ 0x60
 8020dee:	f7f9 ff1b 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020df2:	4629      	mov	r1, r5
 8020df4:	a81a      	add	r0, sp, #104	@ 0x68
 8020df6:	f7f9 ff5b 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020dfa:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8020dfe:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8020e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020e06:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8020e0a:	bfdb      	ittet	le
 8020e0c:	b29a      	uxthle	r2, r3
 8020e0e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020e12:	2201      	movgt	r2, #1
 8020e14:	fb91 f2f2 	sdivle	r2, r1, r2
 8020e18:	9201      	str	r2, [sp, #4]
 8020e1a:	9801      	ldr	r0, [sp, #4]
 8020e1c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8020e20:	9901      	ldr	r1, [sp, #4]
 8020e22:	fb92 f0f0 	sdiv	r0, r2, r0
 8020e26:	b280      	uxth	r0, r0
 8020e28:	440f      	add	r7, r1
 8020e2a:	900d      	str	r0, [sp, #52]	@ 0x34
 8020e2c:	3f01      	subs	r7, #1
 8020e2e:	9801      	ldr	r0, [sp, #4]
 8020e30:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8020e32:	fb05 2510 	mls	r5, r5, r0, r2
 8020e36:	fb97 f7f1 	sdiv	r7, r7, r1
 8020e3a:	fb15 f503 	smulbb	r5, r5, r3
 8020e3e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8020e42:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8020e46:	3701      	adds	r7, #1
 8020e48:	440d      	add	r5, r1
 8020e4a:	4419      	add	r1, r3
 8020e4c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8020e50:	b2bf      	uxth	r7, r7
 8020e52:	441a      	add	r2, r3
 8020e54:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8020e58:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8020e5c:	00bf      	lsls	r7, r7, #2
 8020e5e:	9304      	str	r3, [sp, #16]
 8020e60:	b2ad      	uxth	r5, r5
 8020e62:	4bb0      	ldr	r3, [pc, #704]	@ (8021124 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8020e64:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8020e68:	6818      	ldr	r0, [r3, #0]
 8020e6a:	6803      	ldr	r3, [r0, #0]
 8020e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e6e:	4798      	blx	r3
 8020e70:	4bad      	ldr	r3, [pc, #692]	@ (8021128 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8020e72:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8020e76:	2d00      	cmp	r5, #0
 8020e78:	881a      	ldrh	r2, [r3, #0]
 8020e7a:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8020e7e:	fb02 f606 	mul.w	r6, r2, r6
 8020e82:	fb02 c101 	mla	r1, r2, r1, ip
 8020e86:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020e8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8020e8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020e90:	4ba6      	ldr	r3, [pc, #664]	@ (802112c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8020e92:	eb00 0801 	add.w	r8, r0, r1
 8020e96:	bf18      	it	ne
 8020e98:	2100      	movne	r1, #0
 8020e9a:	eba3 0304 	sub.w	r3, r3, r4
 8020e9e:	eb08 0206 	add.w	r2, r8, r6
 8020ea2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020ea4:	9208      	str	r2, [sp, #32]
 8020ea6:	f107 0204 	add.w	r2, r7, #4
 8020eaa:	9211      	str	r2, [sp, #68]	@ 0x44
 8020eac:	9a04      	ldr	r2, [sp, #16]
 8020eae:	bf08      	it	eq
 8020eb0:	4611      	moveq	r1, r2
 8020eb2:	2200      	movs	r2, #0
 8020eb4:	b289      	uxth	r1, r1
 8020eb6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020eb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ebc:	fa12 f383 	uxtah	r3, r2, r3
 8020ec0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020ec2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020ec6:	3304      	adds	r3, #4
 8020ec8:	9306      	str	r3, [sp, #24]
 8020eca:	9b08      	ldr	r3, [sp, #32]
 8020ecc:	4543      	cmp	r3, r8
 8020ece:	f240 815e 	bls.w	802118e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8020ed2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8020ed6:	f04f 0b01 	mov.w	fp, #1
 8020eda:	9a01      	ldr	r2, [sp, #4]
 8020edc:	9806      	ldr	r0, [sp, #24]
 8020ede:	465e      	mov	r6, fp
 8020ee0:	f8cd b008 	str.w	fp, [sp, #8]
 8020ee4:	7800      	ldrb	r0, [r0, #0]
 8020ee6:	fbb5 f3f3 	udiv	r3, r5, r3
 8020eea:	1ad3      	subs	r3, r2, r3
 8020eec:	900e      	str	r0, [sp, #56]	@ 0x38
 8020eee:	3001      	adds	r0, #1
 8020ef0:	b29b      	uxth	r3, r3
 8020ef2:	9005      	str	r0, [sp, #20]
 8020ef4:	9312      	str	r3, [sp, #72]	@ 0x48
 8020ef6:	9b06      	ldr	r3, [sp, #24]
 8020ef8:	785a      	ldrb	r2, [r3, #1]
 8020efa:	789b      	ldrb	r3, [r3, #2]
 8020efc:	021b      	lsls	r3, r3, #8
 8020efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f02:	9a06      	ldr	r2, [sp, #24]
 8020f04:	78d2      	ldrb	r2, [r2, #3]
 8020f06:	4313      	orrs	r3, r2
 8020f08:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020f0a:	441a      	add	r2, r3
 8020f0c:	1c50      	adds	r0, r2, #1
 8020f0e:	7852      	ldrb	r2, [r2, #1]
 8020f10:	9003      	str	r0, [sp, #12]
 8020f12:	0212      	lsls	r2, r2, #8
 8020f14:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8020f16:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020f1a:	5cc3      	ldrb	r3, [r0, r3]
 8020f1c:	431a      	orrs	r2, r3
 8020f1e:	b293      	uxth	r3, r2
 8020f20:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8020f24:	930a      	str	r3, [sp, #40]	@ 0x28
 8020f26:	2300      	movs	r3, #0
 8020f28:	461a      	mov	r2, r3
 8020f2a:	9307      	str	r3, [sp, #28]
 8020f2c:	2d00      	cmp	r5, #0
 8020f2e:	d07c      	beq.n	802102a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8020f30:	42ae      	cmp	r6, r5
 8020f32:	d26c      	bcs.n	802100e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8020f34:	9b08      	ldr	r3, [sp, #32]
 8020f36:	1bad      	subs	r5, r5, r6
 8020f38:	4608      	mov	r0, r1
 8020f3a:	4543      	cmp	r3, r8
 8020f3c:	b2ad      	uxth	r5, r5
 8020f3e:	d802      	bhi.n	8020f46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8020f40:	e071      	b.n	8021026 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d15d      	bne.n	8021002 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8020f46:	9b03      	ldr	r3, [sp, #12]
 8020f48:	9a02      	ldr	r2, [sp, #8]
 8020f4a:	785b      	ldrb	r3, [r3, #1]
 8020f4c:	f1c2 0207 	rsb	r2, r2, #7
 8020f50:	9902      	ldr	r1, [sp, #8]
 8020f52:	4093      	lsls	r3, r2
 8020f54:	005b      	lsls	r3, r3, #1
 8020f56:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8020f5a:	9b03      	ldr	r3, [sp, #12]
 8020f5c:	781b      	ldrb	r3, [r3, #0]
 8020f5e:	410b      	asrs	r3, r1
 8020f60:	3101      	adds	r1, #1
 8020f62:	b2c9      	uxtb	r1, r1
 8020f64:	b2db      	uxtb	r3, r3
 8020f66:	2908      	cmp	r1, #8
 8020f68:	9102      	str	r1, [sp, #8]
 8020f6a:	9903      	ldr	r1, [sp, #12]
 8020f6c:	ea43 0302 	orr.w	r3, r3, r2
 8020f70:	bf0c      	ite	eq
 8020f72:	3102      	addeq	r1, #2
 8020f74:	3101      	addne	r1, #1
 8020f76:	b29a      	uxth	r2, r3
 8020f78:	bf05      	ittet	eq
 8020f7a:	9103      	streq	r1, [sp, #12]
 8020f7c:	2100      	moveq	r1, #0
 8020f7e:	9103      	strne	r1, [sp, #12]
 8020f80:	9102      	streq	r1, [sp, #8]
 8020f82:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020f84:	4291      	cmp	r1, r2
 8020f86:	d30a      	bcc.n	8020f9e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8020f88:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8020f8c:	2301      	movs	r3, #1
 8020f8e:	9905      	ldr	r1, [sp, #20]
 8020f90:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8020f94:	d30f      	bcc.n	8020fb6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8020f96:	469b      	mov	fp, r3
 8020f98:	f04f 0c00 	mov.w	ip, #0
 8020f9c:	e032      	b.n	8021004 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8020f9e:	9b05      	ldr	r3, [sp, #20]
 8020fa0:	429a      	cmp	r2, r3
 8020fa2:	d318      	bcc.n	8020fd6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8020fa4:	eb04 030b 	add.w	r3, r4, fp
 8020fa8:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8020fac:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8020fb0:	f10b 0301 	add.w	r3, fp, #1
 8020fb4:	b29b      	uxth	r3, r3
 8020fb6:	9905      	ldr	r1, [sp, #20]
 8020fb8:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8020fbc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8020fc0:	710e      	strb	r6, [r1, #4]
 8020fc2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020fc4:	80ce      	strh	r6, [r1, #6]
 8020fc6:	f10b 0601 	add.w	r6, fp, #1
 8020fca:	714e      	strb	r6, [r1, #5]
 8020fcc:	9905      	ldr	r1, [sp, #20]
 8020fce:	3101      	adds	r1, #1
 8020fd0:	b289      	uxth	r1, r1
 8020fd2:	9105      	str	r1, [sp, #20]
 8020fd4:	e7df      	b.n	8020f96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8020fd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020fda:	4611      	mov	r1, r2
 8020fdc:	795b      	ldrb	r3, [r3, #5]
 8020fde:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8020fe2:	4426      	add	r6, r4
 8020fe4:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8020fe6:	4437      	add	r7, r6
 8020fe8:	2f00      	cmp	r7, #0
 8020fea:	dd06      	ble.n	8020ffa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020fec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8020ff0:	790f      	ldrb	r7, [r1, #4]
 8020ff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020ff6:	88c9      	ldrh	r1, [r1, #6]
 8020ff8:	e7f4      	b.n	8020fe4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8020ffa:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8020ffe:	b29b      	uxth	r3, r3
 8021000:	e7c5      	b.n	8020f8e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8021002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021004:	920a      	str	r2, [sp, #40]	@ 0x28
 8021006:	4601      	mov	r1, r0
 8021008:	4662      	mov	r2, ip
 802100a:	461e      	mov	r6, r3
 802100c:	e78e      	b.n	8020f2c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 802100e:	1b73      	subs	r3, r6, r5
 8021010:	eb02 0c05 	add.w	ip, r2, r5
 8021014:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021018:	b29b      	uxth	r3, r3
 802101a:	fa1f fc8c 	uxth.w	ip, ip
 802101e:	2500      	movs	r5, #0
 8021020:	9a08      	ldr	r2, [sp, #32]
 8021022:	4542      	cmp	r2, r8
 8021024:	d88d      	bhi.n	8020f42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8021026:	4601      	mov	r1, r0
 8021028:	e74f      	b.n	8020eca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 802102a:	428e      	cmp	r6, r1
 802102c:	bf2b      	itete	cs
 802102e:	468e      	movcs	lr, r1
 8021030:	46b6      	movcc	lr, r6
 8021032:	1a73      	subcs	r3, r6, r1
 8021034:	1b88      	subcc	r0, r1, r6
 8021036:	eb02 0c0e 	add.w	ip, r2, lr
 802103a:	bf2b      	itete	cs
 802103c:	4628      	movcs	r0, r5
 802103e:	462b      	movcc	r3, r5
 8021040:	b29b      	uxthcs	r3, r3
 8021042:	b280      	uxthcc	r0, r0
 8021044:	f108 0503 	add.w	r5, r8, #3
 8021048:	fa1f fc8c 	uxth.w	ip, ip
 802104c:	4562      	cmp	r2, ip
 802104e:	d06f      	beq.n	8021130 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8021050:	1c57      	adds	r7, r2, #1
 8021052:	4422      	add	r2, r4
 8021054:	b2bf      	uxth	r7, r7
 8021056:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 802105a:	9713      	str	r7, [sp, #76]	@ 0x4c
 802105c:	2704      	movs	r7, #4
 802105e:	46b9      	mov	r9, r7
 8021060:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8021062:	fb19 7202 	smlabb	r2, r9, r2, r7
 8021066:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021068:	58bf      	ldr	r7, [r7, r2]
 802106a:	0e3a      	lsrs	r2, r7, #24
 802106c:	9209      	str	r2, [sp, #36]	@ 0x24
 802106e:	d016      	beq.n	802109e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8021070:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8021074:	fa5f fa87 	uxtb.w	sl, r7
 8021078:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802107c:	fa5f f289 	uxtb.w	r2, r9
 8021080:	9214      	str	r2, [sp, #80]	@ 0x50
 8021082:	b2fa      	uxtb	r2, r7
 8021084:	9215      	str	r2, [sp, #84]	@ 0x54
 8021086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021088:	2aff      	cmp	r2, #255	@ 0xff
 802108a:	d10b      	bne.n	80210a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 802108c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802108e:	2aff      	cmp	r2, #255	@ 0xff
 8021090:	d108      	bne.n	80210a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8021092:	f805 ac03 	strb.w	sl, [r5, #-3]
 8021096:	f805 9c02 	strb.w	r9, [r5, #-2]
 802109a:	f805 7c01 	strb.w	r7, [r5, #-1]
 802109e:	3503      	adds	r5, #3
 80210a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80210a2:	e7d3      	b.n	802104c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 80210a4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80210a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80210a8:	437a      	muls	r2, r7
 80210aa:	1c57      	adds	r7, r2, #1
 80210ac:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80210b0:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80210b4:	1212      	asrs	r2, r2, #8
 80210b6:	fa1f f982 	uxth.w	r9, r2
 80210ba:	43d2      	mvns	r2, r2
 80210bc:	fb1a fa09 	smulbb	sl, sl, r9
 80210c0:	b2d2      	uxtb	r2, r2
 80210c2:	fb07 a702 	mla	r7, r7, r2, sl
 80210c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80210c8:	b2bf      	uxth	r7, r7
 80210ca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80210cc:	f107 0a01 	add.w	sl, r7, #1
 80210d0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80210d4:	fb12 fa09 	smulbb	sl, r2, r9
 80210d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80210da:	123f      	asrs	r7, r7, #8
 80210dc:	f805 7c03 	strb.w	r7, [r5, #-3]
 80210e0:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 80210e4:	fb07 aa02 	mla	sl, r7, r2, sl
 80210e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80210ea:	fb12 f909 	smulbb	r9, r2, r9
 80210ee:	fa1f fa8a 	uxth.w	sl, sl
 80210f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80210f4:	f10a 0701 	add.w	r7, sl, #1
 80210f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80210fc:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8021100:	fb07 9902 	mla	r9, r7, r2, r9
 8021104:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021108:	fa1f f989 	uxth.w	r9, r9
 802110c:	f805 ac02 	strb.w	sl, [r5, #-2]
 8021110:	f109 0201 	add.w	r2, r9, #1
 8021114:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021118:	ea4f 2929 	mov.w	r9, r9, asr #8
 802111c:	f805 9c01 	strb.w	r9, [r5, #-1]
 8021120:	e7bd      	b.n	802109e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8021122:	bf00      	nop
 8021124:	240621b8 	.word	0x240621b8
 8021128:	240621b2 	.word	0x240621b2
 802112c:	fffff7fb 	.word	0xfffff7fb
 8021130:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021134:	428e      	cmp	r6, r1
 8021136:	44f0      	add	r8, lr
 8021138:	f4ff af71 	bcc.w	802101e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 802113c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802113e:	9904      	ldr	r1, [sp, #16]
 8021140:	8812      	ldrh	r2, [r2, #0]
 8021142:	1a52      	subs	r2, r2, r1
 8021144:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021146:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802114a:	4490      	add	r8, r2
 802114c:	9a07      	ldr	r2, [sp, #28]
 802114e:	3201      	adds	r2, #1
 8021150:	428a      	cmp	r2, r1
 8021152:	9207      	str	r2, [sp, #28]
 8021154:	d111      	bne.n	802117a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8021156:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 802115a:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 802115e:	9b04      	ldr	r3, [sp, #16]
 8021160:	eba5 050c 	sub.w	r5, r5, ip
 8021164:	b2ad      	uxth	r5, r5
 8021166:	2d00      	cmp	r5, #0
 8021168:	bf08      	it	eq
 802116a:	4619      	moveq	r1, r3
 802116c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802116e:	bf18      	it	ne
 8021170:	2100      	movne	r1, #0
 8021172:	3301      	adds	r3, #1
 8021174:	b289      	uxth	r1, r1
 8021176:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021178:	e69e      	b.n	8020eb8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 802117a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802117e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8021182:	1a2d      	subs	r5, r5, r0
 8021184:	b2ad      	uxth	r5, r5
 8021186:	2d00      	cmp	r5, #0
 8021188:	bf18      	it	ne
 802118a:	2000      	movne	r0, #0
 802118c:	e748      	b.n	8021020 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 802118e:	4b04      	ldr	r3, [pc, #16]	@ (80211a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8021190:	6818      	ldr	r0, [r3, #0]
 8021192:	6803      	ldr	r3, [r0, #0]
 8021194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021196:	4798      	blx	r3
 8021198:	b01d      	add	sp, #116	@ 0x74
 802119a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802119e:	bf00      	nop
 80211a0:	240621b8 	.word	0x240621b8

080211a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 80211a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211a8:	b08f      	sub	sp, #60	@ 0x3c
 80211aa:	4616      	mov	r6, r2
 80211ac:	4681      	mov	r9, r0
 80211ae:	460d      	mov	r5, r1
 80211b0:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 80211b4:	9205      	str	r2, [sp, #20]
 80211b6:	2a00      	cmp	r2, #0
 80211b8:	f000 82a8 	beq.w	802170c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 80211bc:	6830      	ldr	r0, [r6, #0]
 80211be:	ac0a      	add	r4, sp, #40	@ 0x28
 80211c0:	6871      	ldr	r1, [r6, #4]
 80211c2:	c403      	stmia	r4!, {r0, r1}
 80211c4:	6818      	ldr	r0, [r3, #0]
 80211c6:	ac0c      	add	r4, sp, #48	@ 0x30
 80211c8:	6859      	ldr	r1, [r3, #4]
 80211ca:	c403      	stmia	r4!, {r0, r1}
 80211cc:	a80a      	add	r0, sp, #40	@ 0x28
 80211ce:	f7f9 fd2b 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211d2:	4631      	mov	r1, r6
 80211d4:	a80c      	add	r0, sp, #48	@ 0x30
 80211d6:	f7f9 fd6b 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211da:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80211de:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80211e2:	bfdb      	ittet	le
 80211e4:	b293      	uxthle	r3, r2
 80211e6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80211ea:	2301      	movgt	r3, #1
 80211ec:	fb91 f3f3 	sdivle	r3, r1, r3
 80211f0:	9300      	str	r3, [sp, #0]
 80211f2:	f105 0308 	add.w	r3, r5, #8
 80211f6:	9900      	ldr	r1, [sp, #0]
 80211f8:	9306      	str	r3, [sp, #24]
 80211fa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80211fe:	440b      	add	r3, r1
 8021200:	3b01      	subs	r3, #1
 8021202:	fb93 f3f1 	sdiv	r3, r3, r1
 8021206:	3b01      	subs	r3, #1
 8021208:	9906      	ldr	r1, [sp, #24]
 802120a:	b29b      	uxth	r3, r3
 802120c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021210:	9900      	ldr	r1, [sp, #0]
 8021212:	9307      	str	r3, [sp, #28]
 8021214:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021218:	fb93 f0f1 	sdiv	r0, r3, r1
 802121c:	b284      	uxth	r4, r0
 802121e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021222:	b280      	uxth	r0, r0
 8021224:	9402      	str	r4, [sp, #8]
 8021226:	9d02      	ldr	r5, [sp, #8]
 8021228:	9c00      	ldr	r4, [sp, #0]
 802122a:	fb05 3514 	mls	r5, r5, r4, r3
 802122e:	fb15 f502 	smulbb	r5, r5, r2
 8021232:	440d      	add	r5, r1
 8021234:	b2ad      	uxth	r5, r5
 8021236:	2800      	cmp	r0, #0
 8021238:	d071      	beq.n	802131e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 802123a:	1e42      	subs	r2, r0, #1
 802123c:	9806      	ldr	r0, [sp, #24]
 802123e:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8021242:	9a07      	ldr	r2, [sp, #28]
 8021244:	fa98 f888 	rev.w	r8, r8
 8021248:	4490      	add	r8, r2
 802124a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 802124e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8021252:	4411      	add	r1, r2
 8021254:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021258:	f8df b348 	ldr.w	fp, [pc, #840]	@ 80215a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 802125c:	4413      	add	r3, r2
 802125e:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8021262:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021266:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802126a:	9301      	str	r3, [sp, #4]
 802126c:	4bcb      	ldr	r3, [pc, #812]	@ (802159c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 802126e:	6818      	ldr	r0, [r3, #0]
 8021270:	6803      	ldr	r3, [r0, #0]
 8021272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021274:	4798      	blx	r3
 8021276:	4bca      	ldr	r3, [pc, #808]	@ (80215a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8021278:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802127c:	881b      	ldrh	r3, [r3, #0]
 802127e:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8021282:	fb03 2707 	mla	r7, r3, r7, r2
 8021286:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802128a:	4363      	muls	r3, r4
 802128c:	2400      	movs	r4, #0
 802128e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021292:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021296:	4621      	mov	r1, r4
 8021298:	4407      	add	r7, r0
 802129a:	18fb      	adds	r3, r7, r3
 802129c:	9309      	str	r3, [sp, #36]	@ 0x24
 802129e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80212a2:	fb95 f3f3 	sdiv	r3, r5, r3
 80212a6:	9304      	str	r3, [sp, #16]
 80212a8:	f109 0304 	add.w	r3, r9, #4
 80212ac:	4618      	mov	r0, r3
 80212ae:	9308      	str	r3, [sp, #32]
 80212b0:	f008 fc2a 	bl	8029b08 <memset>
 80212b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80212b6:	42bb      	cmp	r3, r7
 80212b8:	f240 8223 	bls.w	8021702 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 80212bc:	2003      	movs	r0, #3
 80212be:	f04f 0c07 	mov.w	ip, #7
 80212c2:	f04f 0e0b 	mov.w	lr, #11
 80212c6:	2d00      	cmp	r5, #0
 80212c8:	f000 813c 	beq.w	8021544 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 80212cc:	f898 3000 	ldrb.w	r3, [r8]
 80212d0:	b2db      	uxtb	r3, r3
 80212d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80212d4:	d126      	bne.n	8021324 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 80212d6:	f898 1001 	ldrb.w	r1, [r8, #1]
 80212da:	f108 0604 	add.w	r6, r8, #4
 80212de:	f898 2002 	ldrb.w	r2, [r8, #2]
 80212e2:	3d01      	subs	r5, #1
 80212e4:	b2c9      	uxtb	r1, r1
 80212e6:	f898 8003 	ldrb.w	r8, [r8, #3]
 80212ea:	b2d2      	uxtb	r2, r2
 80212ec:	f361 0407 	bfi	r4, r1, #0, #8
 80212f0:	fa5f f888 	uxtb.w	r8, r8
 80212f4:	b2ad      	uxth	r5, r5
 80212f6:	f362 240f 	bfi	r4, r2, #8, #8
 80212fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80212fe:	fb10 2208 	smlabb	r2, r0, r8, r2
 8021302:	f368 4417 	bfi	r4, r8, #16, #8
 8021306:	fb1c 2201 	smlabb	r2, ip, r1, r2
 802130a:	0e23      	lsrs	r3, r4, #24
 802130c:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8021310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021314:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021318:	605c      	str	r4, [r3, #4]
 802131a:	46b0      	mov	r8, r6
 802131c:	e7d3      	b.n	80212c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 802131e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8021322:	e792      	b.n	802124a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8021324:	2bff      	cmp	r3, #255	@ 0xff
 8021326:	d127      	bne.n	8021378 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8021328:	f898 2001 	ldrb.w	r2, [r8, #1]
 802132c:	f108 0605 	add.w	r6, r8, #5
 8021330:	f898 3002 	ldrb.w	r3, [r8, #2]
 8021334:	3d01      	subs	r5, #1
 8021336:	b2d2      	uxtb	r2, r2
 8021338:	f898 1003 	ldrb.w	r1, [r8, #3]
 802133c:	b2db      	uxtb	r3, r3
 802133e:	f898 8004 	ldrb.w	r8, [r8, #4]
 8021342:	f362 0407 	bfi	r4, r2, #0, #8
 8021346:	b2c9      	uxtb	r1, r1
 8021348:	fa5f f888 	uxtb.w	r8, r8
 802134c:	f363 240f 	bfi	r4, r3, #8, #8
 8021350:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021354:	b2ad      	uxth	r5, r5
 8021356:	fb10 3301 	smlabb	r3, r0, r1, r3
 802135a:	f361 4417 	bfi	r4, r1, #16, #8
 802135e:	fb1c 3302 	smlabb	r3, ip, r2, r3
 8021362:	f368 641f 	bfi	r4, r8, #24, #8
 8021366:	fb1e 3808 	smlabb	r8, lr, r8, r3
 802136a:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 802136e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8021372:	f8c8 4004 	str.w	r4, [r8, #4]
 8021376:	e7d0      	b.n	802131a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8021378:	119a      	asrs	r2, r3, #6
 802137a:	f108 0601 	add.w	r6, r8, #1
 802137e:	d107      	bne.n	8021390 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8021380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021384:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021388:	685c      	ldr	r4, [r3, #4]
 802138a:	3d01      	subs	r5, #1
 802138c:	b2ad      	uxth	r5, r5
 802138e:	e7c4      	b.n	802131a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8021390:	2a01      	cmp	r2, #1
 8021392:	d129      	bne.n	80213e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 8021394:	f003 0203 	and.w	r2, r3, #3
 8021398:	1ea1      	subs	r1, r4, #2
 802139a:	4411      	add	r1, r2
 802139c:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80213a0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80213a4:	b2c9      	uxtb	r1, r1
 80213a6:	3a02      	subs	r2, #2
 80213a8:	3b02      	subs	r3, #2
 80213aa:	f361 0407 	bfi	r4, r1, #0, #8
 80213ae:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80213b2:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80213b6:	f362 240f 	bfi	r4, r2, #8, #8
 80213ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80213be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80213c2:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80213c6:	fb10 2203 	smlabb	r2, r0, r3, r2
 80213ca:	f363 4417 	bfi	r4, r3, #16, #8
 80213ce:	fb1c 2201 	smlabb	r2, ip, r1, r2
 80213d2:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80213d6:	fb1e 2808 	smlabb	r8, lr, r8, r2
 80213da:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80213de:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80213e2:	f8c8 4004 	str.w	r4, [r8, #4]
 80213e6:	e7d0      	b.n	802138a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80213e8:	2a02      	cmp	r2, #2
 80213ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80213ee:	d12e      	bne.n	802144e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 80213f0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80213f4:	f1a3 0a20 	sub.w	sl, r3, #32
 80213f8:	f108 0602 	add.w	r6, r8, #2
 80213fc:	b2d2      	uxtb	r2, r2
 80213fe:	f002 010f 	and.w	r1, r2, #15
 8021402:	1112      	asrs	r2, r2, #4
 8021404:	3908      	subs	r1, #8
 8021406:	3a08      	subs	r2, #8
 8021408:	4451      	add	r1, sl
 802140a:	4492      	add	sl, r2
 802140c:	4421      	add	r1, r4
 802140e:	b2c9      	uxtb	r1, r1
 8021410:	f361 0407 	bfi	r4, r1, #0, #8
 8021414:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8021418:	f1a8 0820 	sub.w	r8, r8, #32
 802141c:	4443      	add	r3, r8
 802141e:	b2db      	uxtb	r3, r3
 8021420:	f363 240f 	bfi	r4, r3, #8, #8
 8021424:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021428:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 802142c:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8021430:	fb10 330a 	smlabb	r3, r0, sl, r3
 8021434:	f36a 4417 	bfi	r4, sl, #16, #8
 8021438:	fb1c 3301 	smlabb	r3, ip, r1, r3
 802143c:	0e22      	lsrs	r2, r4, #24
 802143e:	fb1e 3202 	smlabb	r2, lr, r2, r3
 8021442:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021446:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 802144a:	6054      	str	r4, [r2, #4]
 802144c:	e79d      	b.n	802138a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 802144e:	3301      	adds	r3, #1
 8021450:	42ab      	cmp	r3, r5
 8021452:	dd59      	ble.n	8021508 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 8021454:	1b5d      	subs	r5, r3, r5
 8021456:	2d00      	cmp	r5, #0
 8021458:	dc58      	bgt.n	802150c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 802145a:	f8dd a004 	ldr.w	sl, [sp, #4]
 802145e:	f04f 0800 	mov.w	r8, #0
 8021462:	f1ba 0f00 	cmp.w	sl, #0
 8021466:	f340 8108 	ble.w	802167a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 802146a:	1c73      	adds	r3, r6, #1
 802146c:	9303      	str	r3, [sp, #12]
 802146e:	7833      	ldrb	r3, [r6, #0]
 8021470:	b2db      	uxtb	r3, r3
 8021472:	2bfe      	cmp	r3, #254	@ 0xfe
 8021474:	d16a      	bne.n	802154c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 8021476:	7871      	ldrb	r1, [r6, #1]
 8021478:	1d33      	adds	r3, r6, #4
 802147a:	78b2      	ldrb	r2, [r6, #2]
 802147c:	b2c9      	uxtb	r1, r1
 802147e:	78f0      	ldrb	r0, [r6, #3]
 8021480:	b2d2      	uxtb	r2, r2
 8021482:	9303      	str	r3, [sp, #12]
 8021484:	f361 0407 	bfi	r4, r1, #0, #8
 8021488:	b2c0      	uxtb	r0, r0
 802148a:	2303      	movs	r3, #3
 802148c:	f362 240f 	bfi	r4, r2, #8, #8
 8021490:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021494:	fb13 2200 	smlabb	r2, r3, r0, r2
 8021498:	f360 4417 	bfi	r4, r0, #16, #8
 802149c:	2307      	movs	r3, #7
 802149e:	0e25      	lsrs	r5, r4, #24
 80214a0:	fb13 2101 	smlabb	r1, r3, r1, r2
 80214a4:	230b      	movs	r3, #11
 80214a6:	fb13 1305 	smlabb	r3, r3, r5, r1
 80214aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80214ae:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80214b2:	605c      	str	r4, [r3, #4]
 80214b4:	2501      	movs	r5, #1
 80214b6:	462e      	mov	r6, r5
 80214b8:	eb06 0308 	add.w	r3, r6, r8
 80214bc:	ebaa 0a06 	sub.w	sl, sl, r6
 80214c0:	1bad      	subs	r5, r5, r6
 80214c2:	2b40      	cmp	r3, #64	@ 0x40
 80214c4:	dd16      	ble.n	80214f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 80214c6:	4658      	mov	r0, fp
 80214c8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80214cc:	f7e2 f8bc 	bl	8003648 <_ZN8touchgfx5paint9flushLineEPmi>
 80214d0:	4659      	mov	r1, fp
 80214d2:	9b05      	ldr	r3, [sp, #20]
 80214d4:	4642      	mov	r2, r8
 80214d6:	4638      	mov	r0, r7
 80214d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80214dc:	f7e2 f92a 	bl	8003734 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 80214e0:	4b30      	ldr	r3, [pc, #192]	@ (80215a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 80214e2:	4447      	add	r7, r8
 80214e4:	f04f 0800 	mov.w	r8, #0
 80214e8:	459b      	cmp	fp, r3
 80214ea:	bf0c      	ite	eq
 80214ec:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 80215a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 80214f0:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 80215a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 80214f4:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 80214f8:	4633      	mov	r3, r6
 80214fa:	3b01      	subs	r3, #1
 80214fc:	f842 4b04 	str.w	r4, [r2], #4
 8021500:	d1fb      	bne.n	80214fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 8021502:	44b0      	add	r8, r6
 8021504:	9e03      	ldr	r6, [sp, #12]
 8021506:	e7ac      	b.n	8021462 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8021508:	1aed      	subs	r5, r5, r3
 802150a:	e73f      	b.n	802138c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 802150c:	9b01      	ldr	r3, [sp, #4]
 802150e:	42ab      	cmp	r3, r5
 8021510:	bfa8      	it	ge
 8021512:	462b      	movge	r3, r5
 8021514:	4698      	mov	r8, r3
 8021516:	9b01      	ldr	r3, [sp, #4]
 8021518:	eba3 0a08 	sub.w	sl, r3, r8
 802151c:	0e23      	lsrs	r3, r4, #24
 802151e:	eba5 0508 	sub.w	r5, r5, r8
 8021522:	d00b      	beq.n	802153c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 8021524:	9a05      	ldr	r2, [sp, #20]
 8021526:	4641      	mov	r1, r8
 8021528:	4638      	mov	r0, r7
 802152a:	4353      	muls	r3, r2
 802152c:	1c5a      	adds	r2, r3, #1
 802152e:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8021532:	4622      	mov	r2, r4
 8021534:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021538:	f7e2 f8a4 	bl	8003684 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 802153c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021540:	4447      	add	r7, r8
 8021542:	e78c      	b.n	802145e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8021544:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021548:	4646      	mov	r6, r8
 802154a:	e788      	b.n	802145e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 802154c:	2bff      	cmp	r3, #255	@ 0xff
 802154e:	d11d      	bne.n	802158c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8021550:	7870      	ldrb	r0, [r6, #1]
 8021552:	1d73      	adds	r3, r6, #5
 8021554:	78b2      	ldrb	r2, [r6, #2]
 8021556:	b2c0      	uxtb	r0, r0
 8021558:	78f5      	ldrb	r5, [r6, #3]
 802155a:	b2d2      	uxtb	r2, r2
 802155c:	9303      	str	r3, [sp, #12]
 802155e:	f360 0407 	bfi	r4, r0, #0, #8
 8021562:	7933      	ldrb	r3, [r6, #4]
 8021564:	b2ed      	uxtb	r5, r5
 8021566:	b2d9      	uxtb	r1, r3
 8021568:	f362 240f 	bfi	r4, r2, #8, #8
 802156c:	2303      	movs	r3, #3
 802156e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021572:	f365 4417 	bfi	r4, r5, #16, #8
 8021576:	fb13 2205 	smlabb	r2, r3, r5, r2
 802157a:	2307      	movs	r3, #7
 802157c:	f361 641f 	bfi	r4, r1, #24, #8
 8021580:	fb13 2000 	smlabb	r0, r3, r0, r2
 8021584:	230b      	movs	r3, #11
 8021586:	fb13 0301 	smlabb	r3, r3, r1, r0
 802158a:	e78e      	b.n	80214aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 802158c:	119d      	asrs	r5, r3, #6
 802158e:	d10d      	bne.n	80215ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8021590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021594:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021598:	685c      	ldr	r4, [r3, #4]
 802159a:	e78b      	b.n	80214b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 802159c:	240621b8 	.word	0x240621b8
 80215a0:	240621b2 	.word	0x240621b2
 80215a4:	24000140 	.word	0x24000140
 80215a8:	24000240 	.word	0x24000240
 80215ac:	2d01      	cmp	r5, #1
 80215ae:	d12a      	bne.n	8021606 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 80215b0:	f003 0203 	and.w	r2, r3, #3
 80215b4:	1ea1      	subs	r1, r4, #2
 80215b6:	2603      	movs	r6, #3
 80215b8:	4411      	add	r1, r2
 80215ba:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80215be:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80215c2:	b2c9      	uxtb	r1, r1
 80215c4:	3a02      	subs	r2, #2
 80215c6:	3b02      	subs	r3, #2
 80215c8:	f361 0407 	bfi	r4, r1, #0, #8
 80215cc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80215d0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80215d4:	f362 240f 	bfi	r4, r2, #8, #8
 80215d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80215dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80215e0:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80215e4:	fb16 2203 	smlabb	r2, r6, r3, r2
 80215e8:	f363 4417 	bfi	r4, r3, #16, #8
 80215ec:	2307      	movs	r3, #7
 80215ee:	0e20      	lsrs	r0, r4, #24
 80215f0:	fb13 2101 	smlabb	r1, r3, r1, r2
 80215f4:	230b      	movs	r3, #11
 80215f6:	fb13 1300 	smlabb	r3, r3, r0, r1
 80215fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80215fe:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021602:	605c      	str	r4, [r3, #4]
 8021604:	e757      	b.n	80214b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 8021606:	2d02      	cmp	r5, #2
 8021608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802160c:	d12f      	bne.n	802166e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 802160e:	1cb2      	adds	r2, r6, #2
 8021610:	f1a3 0020 	sub.w	r0, r3, #32
 8021614:	9203      	str	r2, [sp, #12]
 8021616:	7872      	ldrb	r2, [r6, #1]
 8021618:	b2d2      	uxtb	r2, r2
 802161a:	f002 010f 	and.w	r1, r2, #15
 802161e:	1112      	asrs	r2, r2, #4
 8021620:	3908      	subs	r1, #8
 8021622:	3a08      	subs	r2, #8
 8021624:	4401      	add	r1, r0
 8021626:	4402      	add	r2, r0
 8021628:	4421      	add	r1, r4
 802162a:	b2c9      	uxtb	r1, r1
 802162c:	f361 0407 	bfi	r4, r1, #0, #8
 8021630:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8021634:	3d20      	subs	r5, #32
 8021636:	442b      	add	r3, r5
 8021638:	2503      	movs	r5, #3
 802163a:	b2db      	uxtb	r3, r3
 802163c:	f363 240f 	bfi	r4, r3, #8, #8
 8021640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021644:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8021648:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802164c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8021650:	f362 4417 	bfi	r4, r2, #16, #8
 8021654:	2207      	movs	r2, #7
 8021656:	0e20      	lsrs	r0, r4, #24
 8021658:	fb12 3201 	smlabb	r2, r2, r1, r3
 802165c:	210b      	movs	r1, #11
 802165e:	fb11 2100 	smlabb	r1, r1, r0, r2
 8021662:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8021666:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 802166a:	604c      	str	r4, [r1, #4]
 802166c:	e722      	b.n	80214b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 802166e:	1c5d      	adds	r5, r3, #1
 8021670:	4656      	mov	r6, sl
 8021672:	45aa      	cmp	sl, r5
 8021674:	bfa8      	it	ge
 8021676:	462e      	movge	r6, r5
 8021678:	e71e      	b.n	80214b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 802167a:	f1b8 0f00 	cmp.w	r8, #0
 802167e:	d00d      	beq.n	802169c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8021680:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8021684:	4658      	mov	r0, fp
 8021686:	f7e1 ffdf 	bl	8003648 <_ZN8touchgfx5paint9flushLineEPmi>
 802168a:	4642      	mov	r2, r8
 802168c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021690:	4638      	mov	r0, r7
 8021692:	9b05      	ldr	r3, [sp, #20]
 8021694:	4659      	mov	r1, fp
 8021696:	4447      	add	r7, r8
 8021698:	f7e2 f84c 	bl	8003734 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 802169c:	4b1d      	ldr	r3, [pc, #116]	@ (8021714 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 802169e:	9a01      	ldr	r2, [sp, #4]
 80216a0:	881b      	ldrh	r3, [r3, #0]
 80216a2:	1a9b      	subs	r3, r3, r2
 80216a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80216a8:	441f      	add	r7, r3
 80216aa:	9b04      	ldr	r3, [sp, #16]
 80216ac:	3301      	adds	r3, #1
 80216ae:	9304      	str	r3, [sp, #16]
 80216b0:	9a04      	ldr	r2, [sp, #16]
 80216b2:	9b00      	ldr	r3, [sp, #0]
 80216b4:	4293      	cmp	r3, r2
 80216b6:	d11d      	bne.n	80216f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 80216b8:	9b02      	ldr	r3, [sp, #8]
 80216ba:	2400      	movs	r4, #0
 80216bc:	9a02      	ldr	r2, [sp, #8]
 80216be:	f103 0801 	add.w	r8, r3, #1
 80216c2:	9b06      	ldr	r3, [sp, #24]
 80216c4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80216c8:	4621      	mov	r1, r4
 80216ca:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80216ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80216d2:	9b07      	ldr	r3, [sp, #28]
 80216d4:	ba36      	rev	r6, r6
 80216d6:	9808      	ldr	r0, [sp, #32]
 80216d8:	441e      	add	r6, r3
 80216da:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80216de:	1aed      	subs	r5, r5, r3
 80216e0:	f008 fa12 	bl	8029b08 <memset>
 80216e4:	f8cd 8008 	str.w	r8, [sp, #8]
 80216e8:	b2ad      	uxth	r5, r5
 80216ea:	9404      	str	r4, [sp, #16]
 80216ec:	f7e1 ffa0 	bl	8003630 <_ZN8touchgfx5paint8tearDownEv>
 80216f0:	46b0      	mov	r8, r6
 80216f2:	e5df      	b.n	80212b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 80216f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80216f8:	9a01      	ldr	r2, [sp, #4]
 80216fa:	1a9b      	subs	r3, r3, r2
 80216fc:	1b5d      	subs	r5, r3, r5
 80216fe:	b2ad      	uxth	r5, r5
 8021700:	e7f4      	b.n	80216ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 8021702:	4b05      	ldr	r3, [pc, #20]	@ (8021718 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 8021704:	6818      	ldr	r0, [r3, #0]
 8021706:	6803      	ldr	r3, [r0, #0]
 8021708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802170a:	4798      	blx	r3
 802170c:	b00f      	add	sp, #60	@ 0x3c
 802170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021712:	bf00      	nop
 8021714:	240621b2 	.word	0x240621b2
 8021718:	240621b8 	.word	0x240621b8

0802171c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 802171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021720:	b093      	sub	sp, #76	@ 0x4c
 8021722:	460d      	mov	r5, r1
 8021724:	4616      	mov	r6, r2
 8021726:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 802172a:	9000      	str	r0, [sp, #0]
 802172c:	f1bb 0f00 	cmp.w	fp, #0
 8021730:	f000 82ac 	beq.w	8021c8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 8021734:	6810      	ldr	r0, [r2, #0]
 8021736:	ac0e      	add	r4, sp, #56	@ 0x38
 8021738:	6851      	ldr	r1, [r2, #4]
 802173a:	c403      	stmia	r4!, {r0, r1}
 802173c:	6818      	ldr	r0, [r3, #0]
 802173e:	ac10      	add	r4, sp, #64	@ 0x40
 8021740:	6859      	ldr	r1, [r3, #4]
 8021742:	c403      	stmia	r4!, {r0, r1}
 8021744:	a80e      	add	r0, sp, #56	@ 0x38
 8021746:	f7f9 fa6f 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802174a:	4631      	mov	r1, r6
 802174c:	a810      	add	r0, sp, #64	@ 0x40
 802174e:	f7f9 faaf 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021752:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021756:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 802175a:	bfdb      	ittet	le
 802175c:	b293      	uxthle	r3, r2
 802175e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021762:	2301      	movgt	r3, #1
 8021764:	fb91 f3f3 	sdivle	r3, r1, r3
 8021768:	9301      	str	r3, [sp, #4]
 802176a:	f105 0308 	add.w	r3, r5, #8
 802176e:	9901      	ldr	r1, [sp, #4]
 8021770:	9305      	str	r3, [sp, #20]
 8021772:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8021776:	440b      	add	r3, r1
 8021778:	3b01      	subs	r3, #1
 802177a:	fb93 f3f1 	sdiv	r3, r3, r1
 802177e:	3b01      	subs	r3, #1
 8021780:	9905      	ldr	r1, [sp, #20]
 8021782:	b29b      	uxth	r3, r3
 8021784:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021788:	9901      	ldr	r1, [sp, #4]
 802178a:	9306      	str	r3, [sp, #24]
 802178c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8021790:	fb93 f0f1 	sdiv	r0, r3, r1
 8021794:	b284      	uxth	r4, r0
 8021796:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 802179a:	9403      	str	r4, [sp, #12]
 802179c:	9d03      	ldr	r5, [sp, #12]
 802179e:	9c01      	ldr	r4, [sp, #4]
 80217a0:	fb05 3714 	mls	r7, r5, r4, r3
 80217a4:	fb17 f702 	smulbb	r7, r7, r2
 80217a8:	440f      	add	r7, r1
 80217aa:	b2bf      	uxth	r7, r7
 80217ac:	2d00      	cmp	r5, #0
 80217ae:	d06b      	beq.n	8021888 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 80217b0:	1e6a      	subs	r2, r5, #1
 80217b2:	9805      	ldr	r0, [sp, #20]
 80217b4:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 80217b8:	9a06      	ldr	r2, [sp, #24]
 80217ba:	fa99 f989 	rev.w	r9, r9
 80217be:	4491      	add	r9, r2
 80217c0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80217c4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80217c8:	4411      	add	r1, r2
 80217ca:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80217ce:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8021b2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 80217d2:	4413      	add	r3, r2
 80217d4:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80217d8:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80217dc:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80217e0:	9302      	str	r3, [sp, #8]
 80217e2:	4bd0      	ldr	r3, [pc, #832]	@ (8021b24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 80217e4:	6818      	ldr	r0, [r3, #0]
 80217e6:	6803      	ldr	r3, [r0, #0]
 80217e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80217ea:	4798      	blx	r3
 80217ec:	4bce      	ldr	r3, [pc, #824]	@ (8021b28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 80217ee:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80217f2:	881b      	ldrh	r3, [r3, #0]
 80217f4:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 80217f8:	fb03 2404 	mla	r4, r3, r4, r2
 80217fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021800:	436b      	muls	r3, r5
 8021802:	2500      	movs	r5, #0
 8021804:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021808:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802180c:	4629      	mov	r1, r5
 802180e:	4404      	add	r4, r0
 8021810:	18e3      	adds	r3, r4, r3
 8021812:	930d      	str	r3, [sp, #52]	@ 0x34
 8021814:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8021818:	fb97 f3f3 	sdiv	r3, r7, r3
 802181c:	9304      	str	r3, [sp, #16]
 802181e:	9b00      	ldr	r3, [sp, #0]
 8021820:	3304      	adds	r3, #4
 8021822:	4618      	mov	r0, r3
 8021824:	9309      	str	r3, [sp, #36]	@ 0x24
 8021826:	f008 f96f 	bl	8029b08 <memset>
 802182a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802182c:	42a3      	cmp	r3, r4
 802182e:	f240 8228 	bls.w	8021c82 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 8021832:	2003      	movs	r0, #3
 8021834:	2607      	movs	r6, #7
 8021836:	2f00      	cmp	r7, #0
 8021838:	f000 80cb 	beq.w	80219d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 802183c:	f899 3000 	ldrb.w	r3, [r9]
 8021840:	b2db      	uxtb	r3, r3
 8021842:	2bfe      	cmp	r3, #254	@ 0xfe
 8021844:	d123      	bne.n	802188e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8021846:	f899 3001 	ldrb.w	r3, [r9, #1]
 802184a:	3f01      	subs	r7, #1
 802184c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021850:	f109 0804 	add.w	r8, r9, #4
 8021854:	b2db      	uxtb	r3, r3
 8021856:	f899 1003 	ldrb.w	r1, [r9, #3]
 802185a:	b2d2      	uxtb	r2, r2
 802185c:	f363 0507 	bfi	r5, r3, #0, #8
 8021860:	b2c9      	uxtb	r1, r1
 8021862:	b2bf      	uxth	r7, r7
 8021864:	f362 250f 	bfi	r5, r2, #8, #8
 8021868:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802186c:	fb10 2201 	smlabb	r2, r0, r1, r2
 8021870:	f361 4517 	bfi	r5, r1, #16, #8
 8021874:	fb16 2303 	smlabb	r3, r6, r3, r2
 8021878:	9a00      	ldr	r2, [sp, #0]
 802187a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802187e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021882:	605d      	str	r5, [r3, #4]
 8021884:	46c1      	mov	r9, r8
 8021886:	e7d6      	b.n	8021836 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8021888:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802188c:	e798      	b.n	80217c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 802188e:	119a      	asrs	r2, r3, #6
 8021890:	f109 0801 	add.w	r8, r9, #1
 8021894:	d108      	bne.n	80218a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8021896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802189a:	9a00      	ldr	r2, [sp, #0]
 802189c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80218a0:	685d      	ldr	r5, [r3, #4]
 80218a2:	3f01      	subs	r7, #1
 80218a4:	b2bf      	uxth	r7, r7
 80218a6:	e7ed      	b.n	8021884 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 80218a8:	2a01      	cmp	r2, #1
 80218aa:	d125      	bne.n	80218f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 80218ac:	f003 0103 	and.w	r1, r3, #3
 80218b0:	1eaa      	subs	r2, r5, #2
 80218b2:	440a      	add	r2, r1
 80218b4:	f3c3 0181 	ubfx	r1, r3, #2, #2
 80218b8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80218bc:	b2d2      	uxtb	r2, r2
 80218be:	3902      	subs	r1, #2
 80218c0:	3b02      	subs	r3, #2
 80218c2:	f362 0507 	bfi	r5, r2, #0, #8
 80218c6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80218ca:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80218ce:	f361 250f 	bfi	r5, r1, #8, #8
 80218d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80218d6:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 80218da:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80218de:	fb10 1103 	smlabb	r1, r0, r3, r1
 80218e2:	f363 4517 	bfi	r5, r3, #16, #8
 80218e6:	9b00      	ldr	r3, [sp, #0]
 80218e8:	fb16 1202 	smlabb	r2, r6, r2, r1
 80218ec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80218f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80218f4:	6055      	str	r5, [r2, #4]
 80218f6:	e7d4      	b.n	80218a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 80218f8:	2a02      	cmp	r2, #2
 80218fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80218fe:	d12c      	bne.n	802195a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8021900:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021904:	f1a3 0c20 	sub.w	ip, r3, #32
 8021908:	f109 0802 	add.w	r8, r9, #2
 802190c:	b2d2      	uxtb	r2, r2
 802190e:	f002 010f 	and.w	r1, r2, #15
 8021912:	1112      	asrs	r2, r2, #4
 8021914:	3908      	subs	r1, #8
 8021916:	3a08      	subs	r2, #8
 8021918:	4461      	add	r1, ip
 802191a:	4494      	add	ip, r2
 802191c:	4429      	add	r1, r5
 802191e:	b2c9      	uxtb	r1, r1
 8021920:	f361 0507 	bfi	r5, r1, #0, #8
 8021924:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8021928:	f1ae 0e20 	sub.w	lr, lr, #32
 802192c:	4473      	add	r3, lr
 802192e:	b2db      	uxtb	r3, r3
 8021930:	f363 250f 	bfi	r5, r3, #8, #8
 8021934:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021938:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 802193c:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8021940:	fb10 330c 	smlabb	r3, r0, ip, r3
 8021944:	f36c 4517 	bfi	r5, ip, #16, #8
 8021948:	fb16 3101 	smlabb	r1, r6, r1, r3
 802194c:	9b00      	ldr	r3, [sp, #0]
 802194e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8021952:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021956:	604d      	str	r5, [r1, #4]
 8021958:	e7a3      	b.n	80218a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 802195a:	3301      	adds	r3, #1
 802195c:	42bb      	cmp	r3, r7
 802195e:	dd23      	ble.n	80219a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8021960:	eba3 0907 	sub.w	r9, r3, r7
 8021964:	f1b9 0f00 	cmp.w	r9, #0
 8021968:	dc20      	bgt.n	80219ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 802196a:	9e02      	ldr	r6, [sp, #8]
 802196c:	2700      	movs	r7, #0
 802196e:	2e00      	cmp	r6, #0
 8021970:	f340 8142 	ble.w	8021bf8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8021974:	f108 0301 	add.w	r3, r8, #1
 8021978:	9307      	str	r3, [sp, #28]
 802197a:	f898 3000 	ldrb.w	r3, [r8]
 802197e:	b2db      	uxtb	r3, r3
 8021980:	119a      	asrs	r2, r3, #6
 8021982:	d12a      	bne.n	80219da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8021984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021988:	9a00      	ldr	r2, [sp, #0]
 802198a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802198e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021992:	685d      	ldr	r5, [r3, #4]
 8021994:	f040 811f 	bne.w	8021bd6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8021998:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802199c:	7025      	strb	r5, [r4, #0]
 802199e:	7063      	strb	r3, [r4, #1]
 80219a0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80219a4:	70a3      	strb	r3, [r4, #2]
 80219a6:	e04e      	b.n	8021a46 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 80219a8:	1aff      	subs	r7, r7, r3
 80219aa:	e77b      	b.n	80218a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 80219ac:	9b02      	ldr	r3, [sp, #8]
 80219ae:	4620      	mov	r0, r4
 80219b0:	462a      	mov	r2, r5
 80219b2:	454b      	cmp	r3, r9
 80219b4:	bfa8      	it	ge
 80219b6:	464b      	movge	r3, r9
 80219b8:	461f      	mov	r7, r3
 80219ba:	9b02      	ldr	r3, [sp, #8]
 80219bc:	4639      	mov	r1, r7
 80219be:	1bde      	subs	r6, r3, r7
 80219c0:	eba9 0907 	sub.w	r9, r9, r7
 80219c4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80219c8:	465b      	mov	r3, fp
 80219ca:	f7e1 fe5b 	bl	8003684 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 80219ce:	443c      	add	r4, r7
 80219d0:	e7cc      	b.n	802196c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 80219d2:	46c8      	mov	r8, r9
 80219d4:	9e02      	ldr	r6, [sp, #8]
 80219d6:	46b9      	mov	r9, r7
 80219d8:	e7c8      	b.n	802196c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 80219da:	2a01      	cmp	r2, #1
 80219dc:	d136      	bne.n	8021a4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 80219de:	f003 0103 	and.w	r1, r3, #3
 80219e2:	1ea8      	subs	r0, r5, #2
 80219e4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80219e8:	4408      	add	r0, r1
 80219ea:	f3c3 0181 	ubfx	r1, r3, #2, #2
 80219ee:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80219f2:	b2c0      	uxtb	r0, r0
 80219f4:	f1a1 0102 	sub.w	r1, r1, #2
 80219f8:	f1a3 0302 	sub.w	r3, r3, #2
 80219fc:	f360 0507 	bfi	r5, r0, #0, #8
 8021a00:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021a04:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8021a08:	f361 250f 	bfi	r5, r1, #8, #8
 8021a0c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8021a10:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8021a14:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8021a18:	f04f 0303 	mov.w	r3, #3
 8021a1c:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8021a20:	f04f 0c07 	mov.w	ip, #7
 8021a24:	9b00      	ldr	r3, [sp, #0]
 8021a26:	f368 4517 	bfi	r5, r8, #16, #8
 8021a2a:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8021a2e:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8021a32:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8021a36:	f8cc 5004 	str.w	r5, [ip, #4]
 8021a3a:	f040 80cd 	bne.w	8021bd8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8021a3e:	7020      	strb	r0, [r4, #0]
 8021a40:	7061      	strb	r1, [r4, #1]
 8021a42:	f884 8002 	strb.w	r8, [r4, #2]
 8021a46:	3e01      	subs	r6, #1
 8021a48:	3403      	adds	r4, #3
 8021a4a:	e0c1      	b.n	8021bd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8021a4c:	2a02      	cmp	r2, #2
 8021a4e:	d13d      	bne.n	8021acc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8021a50:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021a58:	f108 0202 	add.w	r2, r8, #2
 8021a5c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021a60:	b2c9      	uxtb	r1, r1
 8021a62:	f1a3 0c20 	sub.w	ip, r3, #32
 8021a66:	9207      	str	r2, [sp, #28]
 8021a68:	f001 000f 	and.w	r0, r1, #15
 8021a6c:	f1a0 0008 	sub.w	r0, r0, #8
 8021a70:	4460      	add	r0, ip
 8021a72:	4428      	add	r0, r5
 8021a74:	b2c0      	uxtb	r0, r0
 8021a76:	f360 0507 	bfi	r5, r0, #0, #8
 8021a7a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8021a7e:	f1a2 0220 	sub.w	r2, r2, #32
 8021a82:	4413      	add	r3, r2
 8021a84:	ea4f 1221 	mov.w	r2, r1, asr #4
 8021a88:	b2db      	uxtb	r3, r3
 8021a8a:	f1a2 0208 	sub.w	r2, r2, #8
 8021a8e:	f363 250f 	bfi	r5, r3, #8, #8
 8021a92:	4462      	add	r2, ip
 8021a94:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8021a98:	f04f 0c03 	mov.w	ip, #3
 8021a9c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8021aa0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8021aa4:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8021aa8:	f04f 0107 	mov.w	r1, #7
 8021aac:	f362 4517 	bfi	r5, r2, #16, #8
 8021ab0:	fb11 c100 	smlabb	r1, r1, r0, ip
 8021ab4:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8021ab8:	9900      	ldr	r1, [sp, #0]
 8021aba:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8021abe:	604d      	str	r5, [r1, #4]
 8021ac0:	f040 8089 	bne.w	8021bd6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8021ac4:	7020      	strb	r0, [r4, #0]
 8021ac6:	7063      	strb	r3, [r4, #1]
 8021ac8:	70a2      	strb	r2, [r4, #2]
 8021aca:	e7bc      	b.n	8021a46 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8021acc:	2bfe      	cmp	r3, #254	@ 0xfe
 8021ace:	d12f      	bne.n	8021b30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8021ad0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8021ad4:	f108 0304 	add.w	r3, r8, #4
 8021ad8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8021adc:	f04f 0c03 	mov.w	ip, #3
 8021ae0:	f898 1003 	ldrb.w	r1, [r8, #3]
 8021ae4:	b2c0      	uxtb	r0, r0
 8021ae6:	b2d2      	uxtb	r2, r2
 8021ae8:	9307      	str	r3, [sp, #28]
 8021aea:	b2c9      	uxtb	r1, r1
 8021aec:	f360 0507 	bfi	r5, r0, #0, #8
 8021af0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8021af4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021af8:	f362 250f 	bfi	r5, r2, #8, #8
 8021afc:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8021b00:	f04f 0307 	mov.w	r3, #7
 8021b04:	f361 4517 	bfi	r5, r1, #16, #8
 8021b08:	fb13 c300 	smlabb	r3, r3, r0, ip
 8021b0c:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8021b10:	9b00      	ldr	r3, [sp, #0]
 8021b12:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8021b16:	605d      	str	r5, [r3, #4]
 8021b18:	d15d      	bne.n	8021bd6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8021b1a:	7020      	strb	r0, [r4, #0]
 8021b1c:	7062      	strb	r2, [r4, #1]
 8021b1e:	70a1      	strb	r1, [r4, #2]
 8021b20:	e791      	b.n	8021a46 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8021b22:	bf00      	nop
 8021b24:	240621b8 	.word	0x240621b8
 8021b28:	240621b2 	.word	0x240621b2
 8021b2c:	24000140 	.word	0x24000140
 8021b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021b34:	1c5a      	adds	r2, r3, #1
 8021b36:	b94b      	cbnz	r3, 8021b4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8021b38:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021b3c:	d14c      	bne.n	8021bd8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8021b3e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8021b42:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8021b46:	7025      	strb	r5, [r4, #0]
 8021b48:	7062      	strb	r2, [r4, #1]
 8021b4a:	e72b      	b.n	80219a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8021b4c:	4296      	cmp	r6, r2
 8021b4e:	46b0      	mov	r8, r6
 8021b50:	bfa8      	it	ge
 8021b52:	4690      	movge	r8, r2
 8021b54:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8021b58:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021b5c:	eba6 0608 	sub.w	r6, r6, r8
 8021b60:	eba2 0908 	sub.w	r9, r2, r8
 8021b64:	9308      	str	r3, [sp, #32]
 8021b66:	b2eb      	uxtb	r3, r5
 8021b68:	930c      	str	r3, [sp, #48]	@ 0x30
 8021b6a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021b70:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8021b74:	930a      	str	r3, [sp, #40]	@ 0x28
 8021b76:	9b08      	ldr	r3, [sp, #32]
 8021b78:	d030      	beq.n	8021bdc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8021b7a:	18fb      	adds	r3, r7, r3
 8021b7c:	2bc0      	cmp	r3, #192	@ 0xc0
 8021b7e:	dd15      	ble.n	8021bac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8021b80:	4650      	mov	r0, sl
 8021b82:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8021b86:	f7e1 fd5f 	bl	8003648 <_ZN8touchgfx5paint9flushLineEPmi>
 8021b8a:	2203      	movs	r2, #3
 8021b8c:	4651      	mov	r1, sl
 8021b8e:	465b      	mov	r3, fp
 8021b90:	4620      	mov	r0, r4
 8021b92:	443c      	add	r4, r7
 8021b94:	fb97 f2f2 	sdiv	r2, r7, r2
 8021b98:	f7e1 fda4 	bl	80036e4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8021b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8021c94 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8021b9e:	2700      	movs	r7, #0
 8021ba0:	459a      	cmp	sl, r3
 8021ba2:	bf0c      	ite	eq
 8021ba4:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8021ca0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8021ba8:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8021c94 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8021bac:	eb0a 0307 	add.w	r3, sl, r7
 8021bb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021bb2:	f1b8 0801 	subs.w	r8, r8, #1
 8021bb6:	f103 0303 	add.w	r3, r3, #3
 8021bba:	f803 2c03 	strb.w	r2, [r3, #-3]
 8021bbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021bc0:	f803 2c02 	strb.w	r2, [r3, #-2]
 8021bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021bc6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8021bca:	d1f1      	bne.n	8021bb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8021bcc:	9b08      	ldr	r3, [sp, #32]
 8021bce:	441f      	add	r7, r3
 8021bd0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8021bd4:	e6cb      	b.n	802196e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8021bd6:	2201      	movs	r2, #1
 8021bd8:	4690      	mov	r8, r2
 8021bda:	e7bb      	b.n	8021b54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8021bdc:	4423      	add	r3, r4
 8021bde:	42a3      	cmp	r3, r4
 8021be0:	d9f6      	bls.n	8021bd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8021be2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021be4:	3403      	adds	r4, #3
 8021be6:	f804 2c03 	strb.w	r2, [r4, #-3]
 8021bea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021bec:	f804 2c02 	strb.w	r2, [r4, #-2]
 8021bf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021bf2:	f804 2c01 	strb.w	r2, [r4, #-1]
 8021bf6:	e7f2      	b.n	8021bde <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8021bf8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021bfc:	d00e      	beq.n	8021c1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8021bfe:	b16f      	cbz	r7, 8021c1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8021c00:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8021c04:	4650      	mov	r0, sl
 8021c06:	f7e1 fd1f 	bl	8003648 <_ZN8touchgfx5paint9flushLineEPmi>
 8021c0a:	2203      	movs	r2, #3
 8021c0c:	4620      	mov	r0, r4
 8021c0e:	443c      	add	r4, r7
 8021c10:	465b      	mov	r3, fp
 8021c12:	4651      	mov	r1, sl
 8021c14:	fb97 f2f2 	sdiv	r2, r7, r2
 8021c18:	f7e1 fd64 	bl	80036e4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8021c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8021c98 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8021c1e:	9a02      	ldr	r2, [sp, #8]
 8021c20:	881b      	ldrh	r3, [r3, #0]
 8021c22:	1a9b      	subs	r3, r3, r2
 8021c24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c28:	441c      	add	r4, r3
 8021c2a:	9b04      	ldr	r3, [sp, #16]
 8021c2c:	3301      	adds	r3, #1
 8021c2e:	9304      	str	r3, [sp, #16]
 8021c30:	9a04      	ldr	r2, [sp, #16]
 8021c32:	9b01      	ldr	r3, [sp, #4]
 8021c34:	4293      	cmp	r3, r2
 8021c36:	d11c      	bne.n	8021c72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8021c38:	9b03      	ldr	r3, [sp, #12]
 8021c3a:	2500      	movs	r5, #0
 8021c3c:	9a03      	ldr	r2, [sp, #12]
 8021c3e:	1c5e      	adds	r6, r3, #1
 8021c40:	9b05      	ldr	r3, [sp, #20]
 8021c42:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8021c46:	4629      	mov	r1, r5
 8021c48:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8021c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021c50:	9b06      	ldr	r3, [sp, #24]
 8021c52:	fa98 f888 	rev.w	r8, r8
 8021c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021c58:	4498      	add	r8, r3
 8021c5a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021c5e:	1aff      	subs	r7, r7, r3
 8021c60:	f007 ff52 	bl	8029b08 <memset>
 8021c64:	b2bf      	uxth	r7, r7
 8021c66:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8021c6a:	f7e1 fce1 	bl	8003630 <_ZN8touchgfx5paint8tearDownEv>
 8021c6e:	46c1      	mov	r9, r8
 8021c70:	e5db      	b.n	802182a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8021c72:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8021c76:	9b02      	ldr	r3, [sp, #8]
 8021c78:	1aff      	subs	r7, r7, r3
 8021c7a:	eba7 0709 	sub.w	r7, r7, r9
 8021c7e:	b2bf      	uxth	r7, r7
 8021c80:	e7f3      	b.n	8021c6a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8021c82:	4b06      	ldr	r3, [pc, #24]	@ (8021c9c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8021c84:	6818      	ldr	r0, [r3, #0]
 8021c86:	6803      	ldr	r3, [r0, #0]
 8021c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c8a:	4798      	blx	r3
 8021c8c:	b013      	add	sp, #76	@ 0x4c
 8021c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c92:	bf00      	nop
 8021c94:	24000140 	.word	0x24000140
 8021c98:	240621b2 	.word	0x240621b2
 8021c9c:	240621b8 	.word	0x240621b8
 8021ca0:	24000240 	.word	0x24000240

08021ca4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ca8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8021cac:	9c06      	ldr	r4, [sp, #24]
 8021cae:	2800      	cmp	r0, #0
 8021cb0:	d06e      	beq.n	8021d90 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021cb2:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8021cb6:	2d00      	cmp	r5, #0
 8021cb8:	dd6a      	ble.n	8021d90 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021cba:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8021cbe:	f1bc 0f00 	cmp.w	ip, #0
 8021cc2:	dd65      	ble.n	8021d90 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021cc4:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8021cc8:	28ff      	cmp	r0, #255	@ 0xff
 8021cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021cce:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8021cd2:	fb02 3306 	mla	r3, r2, r6, r3
 8021cd6:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8021cda:	b2e4      	uxtb	r4, r4
 8021cdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ce0:	4419      	add	r1, r3
 8021ce2:	fb02 f30c 	mul.w	r3, r2, ip
 8021ce6:	eba2 0205 	sub.w	r2, r2, r5
 8021cea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021cee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021cf2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021cf6:	440b      	add	r3, r1
 8021cf8:	d03e      	beq.n	8021d78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8021cfa:	fa1f fc80 	uxth.w	ip, r0
 8021cfe:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8021d02:	fb06 f60c 	mul.w	r6, r6, ip
 8021d06:	b280      	uxth	r0, r0
 8021d08:	fb07 f70c 	mul.w	r7, r7, ip
 8021d0c:	fb04 f40c 	mul.w	r4, r4, ip
 8021d10:	4299      	cmp	r1, r3
 8021d12:	d23d      	bcs.n	8021d90 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021d14:	eb01 0c05 	add.w	ip, r1, r5
 8021d18:	458c      	cmp	ip, r1
 8021d1a:	f101 0e03 	add.w	lr, r1, #3
 8021d1e:	d928      	bls.n	8021d72 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8021d20:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8021d24:	fb11 f100 	smulbb	r1, r1, r0
 8021d28:	4421      	add	r1, r4
 8021d2a:	b289      	uxth	r1, r1
 8021d2c:	f101 0801 	add.w	r8, r1, #1
 8021d30:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021d34:	1209      	asrs	r1, r1, #8
 8021d36:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021d3a:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8021d3e:	fb11 f100 	smulbb	r1, r1, r0
 8021d42:	4439      	add	r1, r7
 8021d44:	b289      	uxth	r1, r1
 8021d46:	f101 0801 	add.w	r8, r1, #1
 8021d4a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021d4e:	1209      	asrs	r1, r1, #8
 8021d50:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021d54:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021d58:	fb11 f100 	smulbb	r1, r1, r0
 8021d5c:	4431      	add	r1, r6
 8021d5e:	b289      	uxth	r1, r1
 8021d60:	f101 0801 	add.w	r8, r1, #1
 8021d64:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021d68:	1209      	asrs	r1, r1, #8
 8021d6a:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8021d6e:	4671      	mov	r1, lr
 8021d70:	e7d2      	b.n	8021d18 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8021d72:	4411      	add	r1, r2
 8021d74:	e7cc      	b.n	8021d10 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8021d76:	4411      	add	r1, r2
 8021d78:	4299      	cmp	r1, r3
 8021d7a:	d209      	bcs.n	8021d90 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021d7c:	1948      	adds	r0, r1, r5
 8021d7e:	4281      	cmp	r1, r0
 8021d80:	d2f9      	bcs.n	8021d76 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8021d82:	700c      	strb	r4, [r1, #0]
 8021d84:	3103      	adds	r1, #3
 8021d86:	f801 7c02 	strb.w	r7, [r1, #-2]
 8021d8a:	f801 6c01 	strb.w	r6, [r1, #-1]
 8021d8e:	e7f6      	b.n	8021d7e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8021d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d98:	b093      	sub	sp, #76	@ 0x4c
 8021d9a:	4699      	mov	r9, r3
 8021d9c:	4617      	mov	r7, r2
 8021d9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021da2:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8021da6:	4604      	mov	r4, r0
 8021da8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021dac:	a80c      	add	r0, sp, #48	@ 0x30
 8021dae:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8021db2:	460d      	mov	r5, r1
 8021db4:	4649      	mov	r1, r9
 8021db6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021dba:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021dbe:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8021dc2:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8021dc6:	f7f2 fb79 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8021dca:	4639      	mov	r1, r7
 8021dcc:	a80c      	add	r0, sp, #48	@ 0x30
 8021dce:	f7f2 fb75 	bl	80144bc <_ZN8touchgfx4RectaNERKS0_>
 8021dd2:	4b78      	ldr	r3, [pc, #480]	@ (8021fb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021dd4:	8818      	ldrh	r0, [r3, #0]
 8021dd6:	4b78      	ldr	r3, [pc, #480]	@ (8021fb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8021dd8:	b202      	sxth	r2, r0
 8021dda:	8819      	ldrh	r1, [r3, #0]
 8021ddc:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8021de0:	b20f      	sxth	r7, r1
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	da07      	bge.n	8021df6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8021de6:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8021dea:	4463      	add	r3, ip
 8021dec:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8021df0:	2300      	movs	r3, #0
 8021df2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8021df6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8021dfa:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8021dfe:	1ad2      	subs	r2, r2, r3
 8021e00:	4594      	cmp	ip, r2
 8021e02:	bfc4      	itt	gt
 8021e04:	1ac2      	subgt	r2, r0, r3
 8021e06:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8021e0a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021e0e:	2a00      	cmp	r2, #0
 8021e10:	da07      	bge.n	8021e22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8021e12:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8021e16:	4462      	add	r2, ip
 8021e18:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8021e1c:	2200      	movs	r2, #0
 8021e1e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8021e22:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021e26:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8021e2a:	1abf      	subs	r7, r7, r2
 8021e2c:	45bc      	cmp	ip, r7
 8021e2e:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8021fc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8021e32:	bfc8      	it	gt
 8021e34:	1a8f      	subgt	r7, r1, r2
 8021e36:	f89c c000 	ldrb.w	ip, [ip]
 8021e3a:	bfc8      	it	gt
 8021e3c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8021e40:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8021e44:	f1bc 0f00 	cmp.w	ip, #0
 8021e48:	d176      	bne.n	8021f38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8021e4a:	4287      	cmp	r7, r0
 8021e4c:	bf14      	ite	ne
 8021e4e:	2100      	movne	r1, #0
 8021e50:	2101      	moveq	r1, #1
 8021e52:	2f00      	cmp	r7, #0
 8021e54:	9107      	str	r1, [sp, #28]
 8021e56:	dd73      	ble.n	8021f40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8021e58:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8021e5c:	2900      	cmp	r1, #0
 8021e5e:	9104      	str	r1, [sp, #16]
 8021e60:	dd6e      	ble.n	8021f40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8021e62:	f8b9 1000 	ldrh.w	r1, [r9]
 8021e66:	a80e      	add	r0, sp, #56	@ 0x38
 8021e68:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8021e6c:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8021e70:	1a5b      	subs	r3, r3, r1
 8021e72:	a910      	add	r1, sp, #64	@ 0x40
 8021e74:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8021e78:	b21b      	sxth	r3, r3
 8021e7a:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8021e7e:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8021fc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8021e82:	9305      	str	r3, [sp, #20]
 8021e84:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8021e88:	1ad2      	subs	r2, r2, r3
 8021e8a:	b213      	sxth	r3, r2
 8021e8c:	9306      	str	r3, [sp, #24]
 8021e8e:	9b05      	ldr	r3, [sp, #20]
 8021e90:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8021e94:	9b06      	ldr	r3, [sp, #24]
 8021e96:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8021e9a:	9b04      	ldr	r3, [sp, #16]
 8021e9c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8021ea0:	2300      	movs	r3, #0
 8021ea2:	9310      	str	r3, [sp, #64]	@ 0x40
 8021ea4:	f7f8 ff04 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ea8:	4640      	mov	r0, r8
 8021eaa:	f7f8 febd 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021eae:	a810      	add	r0, sp, #64	@ 0x40
 8021eb0:	f7f8 feba 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021eb4:	4b41      	ldr	r3, [pc, #260]	@ (8021fbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8021eb6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8021eba:	4628      	mov	r0, r5
 8021ebc:	881b      	ldrh	r3, [r3, #0]
 8021ebe:	9308      	str	r3, [sp, #32]
 8021ec0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8021ec4:	b21b      	sxth	r3, r3
 8021ec6:	9303      	str	r3, [sp, #12]
 8021ec8:	682b      	ldr	r3, [r5, #0]
 8021eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ecc:	4798      	blx	r3
 8021ece:	9a03      	ldr	r2, [sp, #12]
 8021ed0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8021ed4:	4681      	mov	r9, r0
 8021ed6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8021eda:	fb13 f302 	smulbb	r3, r3, r2
 8021ede:	2203      	movs	r2, #3
 8021ee0:	f8da 0000 	ldr.w	r0, [sl]
 8021ee4:	fb15 3302 	smlabb	r3, r5, r2, r3
 8021ee8:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8021eea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021eec:	441d      	add	r5, r3
 8021eee:	6803      	ldr	r3, [r0, #0]
 8021ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ef2:	4798      	blx	r3
 8021ef4:	9009      	str	r0, [sp, #36]	@ 0x24
 8021ef6:	f8da 0000 	ldr.w	r0, [sl]
 8021efa:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021efe:	6803      	ldr	r3, [r0, #0]
 8021f00:	910a      	str	r1, [sp, #40]	@ 0x28
 8021f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021f04:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8021f08:	4798      	blx	r3
 8021f0a:	f010 0f01 	tst.w	r0, #1
 8021f0e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8021f12:	d01e      	beq.n	8021f52 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8021f14:	f8da 0000 	ldr.w	r0, [sl]
 8021f18:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021f1c:	6803      	ldr	r3, [r0, #0]
 8021f1e:	9200      	str	r2, [sp, #0]
 8021f20:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8021f22:	462b      	mov	r3, r5
 8021f24:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021f28:	47b0      	blx	r6
 8021f2a:	9b05      	ldr	r3, [sp, #20]
 8021f2c:	80a7      	strh	r7, [r4, #4]
 8021f2e:	8023      	strh	r3, [r4, #0]
 8021f30:	9b06      	ldr	r3, [sp, #24]
 8021f32:	8063      	strh	r3, [r4, #2]
 8021f34:	9b04      	ldr	r3, [sp, #16]
 8021f36:	e007      	b.n	8021f48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8021f38:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8021f3c:	4288      	cmp	r0, r1
 8021f3e:	e785      	b.n	8021e4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8021f40:	2300      	movs	r3, #0
 8021f42:	8023      	strh	r3, [r4, #0]
 8021f44:	8063      	strh	r3, [r4, #2]
 8021f46:	80a3      	strh	r3, [r4, #4]
 8021f48:	4620      	mov	r0, r4
 8021f4a:	80e3      	strh	r3, [r4, #6]
 8021f4c:	b013      	add	sp, #76	@ 0x4c
 8021f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f52:	fb09 f606 	mul.w	r6, r9, r6
 8021f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021f58:	fb11 6602 	smlabb	r6, r1, r2, r6
 8021f5c:	9a07      	ldr	r2, [sp, #28]
 8021f5e:	4433      	add	r3, r6
 8021f60:	461e      	mov	r6, r3
 8021f62:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8021f66:	b16a      	cbz	r2, 8021f84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8021f68:	9a08      	ldr	r2, [sp, #32]
 8021f6a:	4593      	cmp	fp, r2
 8021f6c:	d10a      	bne.n	8021f84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8021f6e:	f8da 0000 	ldr.w	r0, [sl]
 8021f72:	fb09 f303 	mul.w	r3, r9, r3
 8021f76:	4629      	mov	r1, r5
 8021f78:	6802      	ldr	r2, [r0, #0]
 8021f7a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8021f7e:	4632      	mov	r2, r6
 8021f80:	47d0      	blx	sl
 8021f82:	e7d2      	b.n	8021f2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8021f84:	9a03      	ldr	r2, [sp, #12]
 8021f86:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8021fc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8021f8a:	fb02 5803 	mla	r8, r2, r3, r5
 8021f8e:	4545      	cmp	r5, r8
 8021f90:	d2cb      	bcs.n	8021f2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8021f92:	f8db 0000 	ldr.w	r0, [fp]
 8021f96:	4629      	mov	r1, r5
 8021f98:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8021f9c:	6802      	ldr	r2, [r0, #0]
 8021f9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021fa2:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8021fa6:	4632      	mov	r2, r6
 8021fa8:	47d0      	blx	sl
 8021faa:	9b03      	ldr	r3, [sp, #12]
 8021fac:	444e      	add	r6, r9
 8021fae:	441d      	add	r5, r3
 8021fb0:	e7ed      	b.n	8021f8e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8021fb2:	bf00      	nop
 8021fb4:	240621ac 	.word	0x240621ac
 8021fb8:	240621ae 	.word	0x240621ae
 8021fbc:	240621b2 	.word	0x240621b2
 8021fc0:	240621b0 	.word	0x240621b0
 8021fc4:	240621b8 	.word	0x240621b8

08021fc8 <_ZN8touchgfx8LCD24bppC1Ev>:
 8021fc8:	2200      	movs	r2, #0
 8021fca:	490e      	ldr	r1, [pc, #56]	@ (8022004 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8021fcc:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8021fd0:	6001      	str	r1, [r0, #0]
 8021fd2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8021fd6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8021fda:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8021fde:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8021fe2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8021fe6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8021fea:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8021fee:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8021ff2:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8021ff6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8021ffa:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8021ffe:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8022002:	4770      	bx	lr
 8022004:	0802e760 	.word	0x0802e760

08022008 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802200c:	b091      	sub	sp, #68	@ 0x44
 802200e:	4607      	mov	r7, r0
 8022010:	4688      	mov	r8, r1
 8022012:	6810      	ldr	r0, [r2, #0]
 8022014:	6851      	ldr	r1, [r2, #4]
 8022016:	ac0c      	add	r4, sp, #48	@ 0x30
 8022018:	4616      	mov	r6, r2
 802201a:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 802201e:	4d64      	ldr	r5, [pc, #400]	@ (80221b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022020:	f8df a190 	ldr.w	sl, [pc, #400]	@ 80221b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8022024:	c403      	stmia	r4!, {r0, r1}
 8022026:	6818      	ldr	r0, [r3, #0]
 8022028:	ac0e      	add	r4, sp, #56	@ 0x38
 802202a:	6859      	ldr	r1, [r3, #4]
 802202c:	c403      	stmia	r4!, {r0, r1}
 802202e:	a80c      	add	r0, sp, #48	@ 0x30
 8022030:	f7f8 fdfa 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022034:	4631      	mov	r1, r6
 8022036:	a80e      	add	r0, sp, #56	@ 0x38
 8022038:	f7f8 fe3a 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802203c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022040:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022044:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022048:	6828      	ldr	r0, [r5, #0]
 802204a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802204e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8022052:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8022056:	440f      	add	r7, r1
 8022058:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802205c:	440a      	add	r2, r1
 802205e:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8022062:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8022066:	4413      	add	r3, r2
 8022068:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802206c:	6803      	ldr	r3, [r0, #0]
 802206e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022070:	4798      	blx	r3
 8022072:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022076:	6828      	ldr	r0, [r5, #0]
 8022078:	d01f      	beq.n	80220ba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 802207a:	2201      	movs	r2, #1
 802207c:	2500      	movs	r5, #0
 802207e:	6801      	ldr	r1, [r0, #0]
 8022080:	b2a4      	uxth	r4, r4
 8022082:	b2b6      	uxth	r6, r6
 8022084:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022088:	e9cd 2508 	strd	r2, r5, [sp, #32]
 802208c:	250b      	movs	r5, #11
 802208e:	9507      	str	r5, [sp, #28]
 8022090:	f8ba 5000 	ldrh.w	r5, [sl]
 8022094:	f8cd 9010 	str.w	r9, [sp, #16]
 8022098:	9602      	str	r6, [sp, #8]
 802209a:	9401      	str	r4, [sp, #4]
 802209c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80220a0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80220a4:	9203      	str	r2, [sp, #12]
 80220a6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80220aa:	9200      	str	r2, [sp, #0]
 80220ac:	4642      	mov	r2, r8
 80220ae:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80220b0:	4639      	mov	r1, r7
 80220b2:	47a0      	blx	r4
 80220b4:	b011      	add	sp, #68	@ 0x44
 80220b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220ba:	6803      	ldr	r3, [r0, #0]
 80220bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80220be:	4798      	blx	r3
 80220c0:	f8ba 5000 	ldrh.w	r5, [sl]
 80220c4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80220c8:	f04f 0e04 	mov.w	lr, #4
 80220cc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80220d0:	436e      	muls	r6, r5
 80220d2:	fb05 2303 	mla	r3, r5, r3, r2
 80220d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80220da:	1b2d      	subs	r5, r5, r4
 80220dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80220e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80220e4:	4418      	add	r0, r3
 80220e6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80220ea:	1982      	adds	r2, r0, r6
 80220ec:	1b1b      	subs	r3, r3, r4
 80220ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80220f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80220f4:	4290      	cmp	r0, r2
 80220f6:	d254      	bcs.n	80221a2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 80220f8:	eb00 0a04 	add.w	sl, r0, r4
 80220fc:	4550      	cmp	r0, sl
 80220fe:	d24c      	bcs.n	802219a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8022100:	f817 1b01 	ldrb.w	r1, [r7], #1
 8022104:	fb1e e101 	smlabb	r1, lr, r1, lr
 8022108:	eb08 0c01 	add.w	ip, r8, r1
 802210c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022110:	b173      	cbz	r3, 8022130 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022112:	2bff      	cmp	r3, #255	@ 0xff
 8022114:	f818 b001 	ldrb.w	fp, [r8, r1]
 8022118:	d10c      	bne.n	8022134 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802211a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802211e:	d109      	bne.n	8022134 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022120:	f880 b000 	strb.w	fp, [r0]
 8022124:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022128:	7043      	strb	r3, [r0, #1]
 802212a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802212e:	7083      	strb	r3, [r0, #2]
 8022130:	3003      	adds	r0, #3
 8022132:	e7e3      	b.n	80220fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8022134:	fb09 f103 	mul.w	r1, r9, r3
 8022138:	1c4b      	adds	r3, r1, #1
 802213a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802213e:	7801      	ldrb	r1, [r0, #0]
 8022140:	121b      	asrs	r3, r3, #8
 8022142:	b29e      	uxth	r6, r3
 8022144:	43db      	mvns	r3, r3
 8022146:	fb1b fb06 	smulbb	fp, fp, r6
 802214a:	b2db      	uxtb	r3, r3
 802214c:	fb01 b103 	mla	r1, r1, r3, fp
 8022150:	b289      	uxth	r1, r1
 8022152:	f101 0b01 	add.w	fp, r1, #1
 8022156:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 802215a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802215e:	fb1b fb03 	smulbb	fp, fp, r3
 8022162:	1209      	asrs	r1, r1, #8
 8022164:	7001      	strb	r1, [r0, #0]
 8022166:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802216a:	fb01 b106 	mla	r1, r1, r6, fp
 802216e:	b289      	uxth	r1, r1
 8022170:	f101 0b01 	add.w	fp, r1, #1
 8022174:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022178:	1209      	asrs	r1, r1, #8
 802217a:	7041      	strb	r1, [r0, #1]
 802217c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8022180:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022184:	fb1c f303 	smulbb	r3, ip, r3
 8022188:	fb01 3606 	mla	r6, r1, r6, r3
 802218c:	b2b6      	uxth	r6, r6
 802218e:	1c73      	adds	r3, r6, #1
 8022190:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022194:	1236      	asrs	r6, r6, #8
 8022196:	7086      	strb	r6, [r0, #2]
 8022198:	e7ca      	b.n	8022130 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802219a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802219c:	4428      	add	r0, r5
 802219e:	441f      	add	r7, r3
 80221a0:	e7a8      	b.n	80220f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80221a2:	4b03      	ldr	r3, [pc, #12]	@ (80221b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80221a4:	6818      	ldr	r0, [r3, #0]
 80221a6:	6803      	ldr	r3, [r0, #0]
 80221a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221aa:	4798      	blx	r3
 80221ac:	e782      	b.n	80220b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80221ae:	bf00      	nop
 80221b0:	240621b8 	.word	0x240621b8
 80221b4:	240621b2 	.word	0x240621b2

080221b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80221b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221bc:	b091      	sub	sp, #68	@ 0x44
 80221be:	4680      	mov	r8, r0
 80221c0:	460e      	mov	r6, r1
 80221c2:	6810      	ldr	r0, [r2, #0]
 80221c4:	6851      	ldr	r1, [r2, #4]
 80221c6:	ad0c      	add	r5, sp, #48	@ 0x30
 80221c8:	4614      	mov	r4, r2
 80221ca:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 80221ce:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8022368 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80221d2:	f8df a198 	ldr.w	sl, [pc, #408]	@ 802236c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80221d6:	c503      	stmia	r5!, {r0, r1}
 80221d8:	6818      	ldr	r0, [r3, #0]
 80221da:	ad0e      	add	r5, sp, #56	@ 0x38
 80221dc:	6859      	ldr	r1, [r3, #4]
 80221de:	c503      	stmia	r5!, {r0, r1}
 80221e0:	a80c      	add	r0, sp, #48	@ 0x30
 80221e2:	f7f8 fd21 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80221e6:	4621      	mov	r1, r4
 80221e8:	a80e      	add	r0, sp, #56	@ 0x38
 80221ea:	f7f8 fd61 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80221ee:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80221f2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80221f6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80221fa:	f8d9 0000 	ldr.w	r0, [r9]
 80221fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022202:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8022206:	eb08 0401 	add.w	r4, r8, r1
 802220a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802220e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8022212:	440a      	add	r2, r1
 8022214:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8022218:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802221c:	4413      	add	r3, r2
 802221e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022222:	6803      	ldr	r3, [r0, #0]
 8022224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022226:	4798      	blx	r3
 8022228:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802222c:	f8d9 0000 	ldr.w	r0, [r9]
 8022230:	d022      	beq.n	8022278 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8022232:	2200      	movs	r2, #0
 8022234:	f04f 0c01 	mov.w	ip, #1
 8022238:	6801      	ldr	r1, [r0, #0]
 802223a:	b2ad      	uxth	r5, r5
 802223c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022240:	e9cd c208 	strd	ip, r2, [sp, #32]
 8022244:	f04f 0c0b 	mov.w	ip, #11
 8022248:	f8cd c01c 	str.w	ip, [sp, #28]
 802224c:	f8ba c000 	ldrh.w	ip, [sl]
 8022250:	9704      	str	r7, [sp, #16]
 8022252:	9502      	str	r5, [sp, #8]
 8022254:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8022258:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802225c:	9203      	str	r2, [sp, #12]
 802225e:	fa1f f288 	uxth.w	r2, r8
 8022262:	9201      	str	r2, [sp, #4]
 8022264:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022268:	9200      	str	r2, [sp, #0]
 802226a:	4632      	mov	r2, r6
 802226c:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 802226e:	4621      	mov	r1, r4
 8022270:	47a8      	blx	r5
 8022272:	b011      	add	sp, #68	@ 0x44
 8022274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022278:	6803      	ldr	r3, [r0, #0]
 802227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802227c:	4798      	blx	r3
 802227e:	f8ba 2000 	ldrh.w	r2, [sl]
 8022282:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022286:	f04f 0e03 	mov.w	lr, #3
 802228a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 802228e:	4355      	muls	r5, r2
 8022290:	fa1f fc87 	uxth.w	ip, r7
 8022294:	fb02 1303 	mla	r3, r2, r3, r1
 8022298:	eba2 0208 	sub.w	r2, r2, r8
 802229c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80222a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80222a8:	4418      	add	r0, r3
 80222aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80222ac:	1943      	adds	r3, r0, r5
 80222ae:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80222b2:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 80222b6:	eba2 0208 	sub.w	r2, r2, r8
 80222ba:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80222be:	b2ad      	uxth	r5, r5
 80222c0:	4298      	cmp	r0, r3
 80222c2:	d24a      	bcs.n	802235a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80222c4:	eb00 0908 	add.w	r9, r0, r8
 80222c8:	4621      	mov	r1, r4
 80222ca:	4548      	cmp	r0, r9
 80222cc:	460c      	mov	r4, r1
 80222ce:	d240      	bcs.n	8022352 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80222d0:	f04f 0a04 	mov.w	sl, #4
 80222d4:	7824      	ldrb	r4, [r4, #0]
 80222d6:	2fff      	cmp	r7, #255	@ 0xff
 80222d8:	f101 0101 	add.w	r1, r1, #1
 80222dc:	fb1e a404 	smlabb	r4, lr, r4, sl
 80222e0:	eb06 0a04 	add.w	sl, r6, r4
 80222e4:	f816 b004 	ldrb.w	fp, [r6, r4]
 80222e8:	d02b      	beq.n	8022342 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80222ea:	7804      	ldrb	r4, [r0, #0]
 80222ec:	fb14 f405 	smulbb	r4, r4, r5
 80222f0:	fb0b 440c 	mla	r4, fp, ip, r4
 80222f4:	b2a4      	uxth	r4, r4
 80222f6:	f104 0b01 	add.w	fp, r4, #1
 80222fa:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80222fe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022302:	fb1b fb05 	smulbb	fp, fp, r5
 8022306:	1224      	asrs	r4, r4, #8
 8022308:	7004      	strb	r4, [r0, #0]
 802230a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 802230e:	fb04 b40c 	mla	r4, r4, ip, fp
 8022312:	b2a4      	uxth	r4, r4
 8022314:	f104 0b01 	add.w	fp, r4, #1
 8022318:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 802231c:	1224      	asrs	r4, r4, #8
 802231e:	7044      	strb	r4, [r0, #1]
 8022320:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022324:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022328:	fb1a fa05 	smulbb	sl, sl, r5
 802232c:	fb04 a40c 	mla	r4, r4, ip, sl
 8022330:	b2a4      	uxth	r4, r4
 8022332:	f104 0a01 	add.w	sl, r4, #1
 8022336:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 802233a:	1224      	asrs	r4, r4, #8
 802233c:	7084      	strb	r4, [r0, #2]
 802233e:	3003      	adds	r0, #3
 8022340:	e7c3      	b.n	80222ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8022342:	f880 b000 	strb.w	fp, [r0]
 8022346:	f89a 4001 	ldrb.w	r4, [sl, #1]
 802234a:	7044      	strb	r4, [r0, #1]
 802234c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022350:	e7f4      	b.n	802233c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8022352:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022354:	4420      	add	r0, r4
 8022356:	188c      	adds	r4, r1, r2
 8022358:	e7b2      	b.n	80222c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 802235a:	4b03      	ldr	r3, [pc, #12]	@ (8022368 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802235c:	6818      	ldr	r0, [r3, #0]
 802235e:	6803      	ldr	r3, [r0, #0]
 8022360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022362:	4798      	blx	r3
 8022364:	e785      	b.n	8022272 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8022366:	bf00      	nop
 8022368:	240621b8 	.word	0x240621b8
 802236c:	240621b2 	.word	0x240621b2

08022370 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022370:	b4f0      	push	{r4, r5, r6, r7}
 8022372:	460c      	mov	r4, r1
 8022374:	4611      	mov	r1, r2
 8022376:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802237a:	461a      	mov	r2, r3
 802237c:	780f      	ldrb	r7, [r1, #0]
 802237e:	9b04      	ldr	r3, [sp, #16]
 8022380:	784e      	ldrb	r6, [r1, #1]
 8022382:	b11f      	cbz	r7, 802238c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8022384:	2f01      	cmp	r7, #1
 8022386:	d01d      	beq.n	80223c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8022388:	bcf0      	pop	{r4, r5, r6, r7}
 802238a:	4770      	bx	lr
 802238c:	2e03      	cmp	r6, #3
 802238e:	d8fb      	bhi.n	8022388 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022390:	e8df f006 	tbb	[pc, r6]
 8022394:	16140702 	.word	0x16140702
 8022398:	9504      	str	r5, [sp, #16]
 802239a:	4620      	mov	r0, r4
 802239c:	bcf0      	pop	{r4, r5, r6, r7}
 802239e:	f7ff be33 	b.w	8022008 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80223a2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80223a4:	2800      	cmp	r0, #0
 80223a6:	d0ef      	beq.n	8022388 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80223a8:	6806      	ldr	r6, [r0, #0]
 80223aa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80223ae:	68f5      	ldr	r5, [r6, #12]
 80223b0:	4613      	mov	r3, r2
 80223b2:	46ac      	mov	ip, r5
 80223b4:	460a      	mov	r2, r1
 80223b6:	4621      	mov	r1, r4
 80223b8:	bcf0      	pop	{r4, r5, r6, r7}
 80223ba:	4760      	bx	ip
 80223bc:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80223be:	e7f1      	b.n	80223a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80223c0:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80223c2:	e7ef      	b.n	80223a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80223c4:	2e03      	cmp	r6, #3
 80223c6:	d8df      	bhi.n	8022388 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80223c8:	e8df f006 	tbb	[pc, r6]
 80223cc:	110f0702 	.word	0x110f0702
 80223d0:	9504      	str	r5, [sp, #16]
 80223d2:	4620      	mov	r0, r4
 80223d4:	bcf0      	pop	{r4, r5, r6, r7}
 80223d6:	f7ff beef 	b.w	80221b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80223da:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80223dc:	2800      	cmp	r0, #0
 80223de:	d0d3      	beq.n	8022388 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80223e0:	6806      	ldr	r6, [r0, #0]
 80223e2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80223e6:	68b5      	ldr	r5, [r6, #8]
 80223e8:	e7e2      	b.n	80223b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80223ea:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80223ec:	e7f6      	b.n	80223dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 80223ee:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80223f0:	e7f4      	b.n	80223dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

080223f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80223f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80223f8:	4605      	mov	r5, r0
 80223fa:	b08f      	sub	sp, #60	@ 0x3c
 80223fc:	460c      	mov	r4, r1
 80223fe:	461f      	mov	r7, r3
 8022400:	2b00      	cmp	r3, #0
 8022402:	d052      	beq.n	80224aa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022404:	6808      	ldr	r0, [r1, #0]
 8022406:	ab0a      	add	r3, sp, #40	@ 0x28
 8022408:	6849      	ldr	r1, [r1, #4]
 802240a:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 80225d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 802240e:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 80225d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8022412:	c303      	stmia	r3!, {r0, r1}
 8022414:	6810      	ldr	r0, [r2, #0]
 8022416:	ab0c      	add	r3, sp, #48	@ 0x30
 8022418:	6851      	ldr	r1, [r2, #4]
 802241a:	c303      	stmia	r3!, {r0, r1}
 802241c:	a80a      	add	r0, sp, #40	@ 0x28
 802241e:	f7f8 fc03 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022422:	4621      	mov	r1, r4
 8022424:	a80c      	add	r0, sp, #48	@ 0x30
 8022426:	f7f8 fc43 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802242a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802242e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022432:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022436:	f8d8 0000 	ldr.w	r0, [r8]
 802243a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802243e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8022442:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8022446:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 802244a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802244e:	440a      	add	r2, r1
 8022450:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8022454:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8022458:	4413      	add	r3, r2
 802245a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 802245e:	6803      	ldr	r3, [r0, #0]
 8022460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022462:	4798      	blx	r3
 8022464:	2fff      	cmp	r7, #255	@ 0xff
 8022466:	d023      	beq.n	80224b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8022468:	f010 0f04 	tst.w	r0, #4
 802246c:	f8d8 0000 	ldr.w	r0, [r8]
 8022470:	d021      	beq.n	80224b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8022472:	2100      	movs	r1, #0
 8022474:	f04f 0e01 	mov.w	lr, #1
 8022478:	f8d0 c000 	ldr.w	ip, [r0]
 802247c:	b2a4      	uxth	r4, r4
 802247e:	9106      	str	r1, [sp, #24]
 8022480:	b2b6      	uxth	r6, r6
 8022482:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8022486:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 802248a:	e9cd e107 	strd	lr, r1, [sp, #28]
 802248e:	f8b9 e000 	ldrh.w	lr, [r9]
 8022492:	9703      	str	r7, [sp, #12]
 8022494:	9401      	str	r4, [sp, #4]
 8022496:	9600      	str	r6, [sp, #0]
 8022498:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802249c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80224a0:	9102      	str	r1, [sp, #8]
 80224a2:	4629      	mov	r1, r5
 80224a4:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 80224a8:	47a0      	blx	r4
 80224aa:	b00f      	add	sp, #60	@ 0x3c
 80224ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80224b0:	f010 0f01 	tst.w	r0, #1
 80224b4:	e7da      	b.n	802246c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80224b6:	6803      	ldr	r3, [r0, #0]
 80224b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80224ba:	4798      	blx	r3
 80224bc:	f8b9 1000 	ldrh.w	r1, [r9]
 80224c0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80224c4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80224c8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80224cc:	434c      	muls	r4, r1
 80224ce:	2fff      	cmp	r7, #255	@ 0xff
 80224d0:	fb01 2303 	mla	r3, r1, r3, r2
 80224d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80224d8:	eba1 0106 	sub.w	r1, r1, r6
 80224dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80224e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80224e4:	4418      	add	r0, r3
 80224e6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80224ea:	eba3 0606 	sub.w	r6, r3, r6
 80224ee:	4404      	add	r4, r0
 80224f0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80224f4:	d04a      	beq.n	802258c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80224f6:	43fa      	mvns	r2, r7
 80224f8:	b2bb      	uxth	r3, r7
 80224fa:	b2d7      	uxtb	r7, r2
 80224fc:	42a0      	cmp	r0, r4
 80224fe:	d263      	bcs.n	80225c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022500:	eb00 0e0c 	add.w	lr, r0, ip
 8022504:	4586      	cmp	lr, r0
 8022506:	f100 0803 	add.w	r8, r0, #3
 802250a:	d93a      	bls.n	8022582 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 802250c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8022510:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8022514:	00d0      	lsls	r0, r2, #3
 8022516:	fb19 f907 	smulbb	r9, r9, r7
 802251a:	b2c0      	uxtb	r0, r0
 802251c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022520:	fb00 9003 	mla	r0, r0, r3, r9
 8022524:	b280      	uxth	r0, r0
 8022526:	f100 0901 	add.w	r9, r0, #1
 802252a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 802252e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8022532:	fb19 f907 	smulbb	r9, r9, r7
 8022536:	1200      	asrs	r0, r0, #8
 8022538:	f808 0c03 	strb.w	r0, [r8, #-3]
 802253c:	10d0      	asrs	r0, r2, #3
 802253e:	1212      	asrs	r2, r2, #8
 8022540:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8022544:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8022548:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802254c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022550:	fb00 9003 	mla	r0, r0, r3, r9
 8022554:	b280      	uxth	r0, r0
 8022556:	f100 0901 	add.w	r9, r0, #1
 802255a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 802255e:	1200      	asrs	r0, r0, #8
 8022560:	f808 0c02 	strb.w	r0, [r8, #-2]
 8022564:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8022568:	fb10 f007 	smulbb	r0, r0, r7
 802256c:	fb02 0203 	mla	r2, r2, r3, r0
 8022570:	b292      	uxth	r2, r2
 8022572:	1c50      	adds	r0, r2, #1
 8022574:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022578:	4640      	mov	r0, r8
 802257a:	1212      	asrs	r2, r2, #8
 802257c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8022580:	e7c0      	b.n	8022504 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8022582:	4408      	add	r0, r1
 8022584:	4435      	add	r5, r6
 8022586:	e7b9      	b.n	80224fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8022588:	4408      	add	r0, r1
 802258a:	4435      	add	r5, r6
 802258c:	42a0      	cmp	r0, r4
 802258e:	d21b      	bcs.n	80225c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022590:	eb00 070c 	add.w	r7, r0, ip
 8022594:	42b8      	cmp	r0, r7
 8022596:	d2f7      	bcs.n	8022588 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8022598:	f835 3b02 	ldrh.w	r3, [r5], #2
 802259c:	3003      	adds	r0, #3
 802259e:	00da      	lsls	r2, r3, #3
 80225a0:	b2d2      	uxtb	r2, r2
 80225a2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80225a6:	f800 2c03 	strb.w	r2, [r0, #-3]
 80225aa:	10da      	asrs	r2, r3, #3
 80225ac:	121b      	asrs	r3, r3, #8
 80225ae:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80225b2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80225b6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80225ba:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80225be:	f800 2c02 	strb.w	r2, [r0, #-2]
 80225c2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80225c6:	e7e5      	b.n	8022594 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80225c8:	4b02      	ldr	r3, [pc, #8]	@ (80225d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80225ca:	6818      	ldr	r0, [r3, #0]
 80225cc:	6803      	ldr	r3, [r0, #0]
 80225ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80225d0:	4798      	blx	r3
 80225d2:	e76a      	b.n	80224aa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80225d4:	240621b8 	.word	0x240621b8
 80225d8:	240621b2 	.word	0x240621b2

080225dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80225dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225e0:	b08a      	sub	sp, #40	@ 0x28
 80225e2:	460d      	mov	r5, r1
 80225e4:	4604      	mov	r4, r0
 80225e6:	461e      	mov	r6, r3
 80225e8:	6808      	ldr	r0, [r1, #0]
 80225ea:	ab06      	add	r3, sp, #24
 80225ec:	6849      	ldr	r1, [r1, #4]
 80225ee:	4f5d      	ldr	r7, [pc, #372]	@ (8022764 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80225f0:	c303      	stmia	r3!, {r0, r1}
 80225f2:	6810      	ldr	r0, [r2, #0]
 80225f4:	ab08      	add	r3, sp, #32
 80225f6:	6851      	ldr	r1, [r2, #4]
 80225f8:	c303      	stmia	r3!, {r0, r1}
 80225fa:	a806      	add	r0, sp, #24
 80225fc:	f7f8 fb14 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022600:	4629      	mov	r1, r5
 8022602:	a808      	add	r0, sp, #32
 8022604:	f7f8 fb54 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022608:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802260c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8022610:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8022614:	6838      	ldr	r0, [r7, #0]
 8022616:	fb11 2103 	smlabb	r1, r1, r3, r2
 802261a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802261e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8022622:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022626:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802262a:	440a      	add	r2, r1
 802262c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022630:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8022634:	4413      	add	r3, r2
 8022636:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 802263a:	6803      	ldr	r3, [r0, #0]
 802263c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802263e:	4798      	blx	r3
 8022640:	2eff      	cmp	r6, #255	@ 0xff
 8022642:	d119      	bne.n	8022678 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8022644:	f010 0f20 	tst.w	r0, #32
 8022648:	6838      	ldr	r0, [r7, #0]
 802264a:	d018      	beq.n	802267e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 802264c:	b2ad      	uxth	r5, r5
 802264e:	2700      	movs	r7, #0
 8022650:	6801      	ldr	r1, [r0, #0]
 8022652:	9501      	str	r5, [sp, #4]
 8022654:	fa1f f588 	uxth.w	r5, r8
 8022658:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802265c:	9500      	str	r5, [sp, #0]
 802265e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022662:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8022666:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 802266a:	9602      	str	r6, [sp, #8]
 802266c:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 802266e:	4621      	mov	r1, r4
 8022670:	47a8      	blx	r5
 8022672:	b00a      	add	sp, #40	@ 0x28
 8022674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022678:	f010 0f40 	tst.w	r0, #64	@ 0x40
 802267c:	e7e4      	b.n	8022648 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 802267e:	6803      	ldr	r3, [r0, #0]
 8022680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022682:	4798      	blx	r3
 8022684:	4b38      	ldr	r3, [pc, #224]	@ (8022768 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8022686:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802268a:	f8b3 c000 	ldrh.w	ip, [r3]
 802268e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8022692:	fb0c f505 	mul.w	r5, ip, r5
 8022696:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 802269a:	fb0c 2303 	mla	r3, ip, r3, r2
 802269e:	ebac 0c08 	sub.w	ip, ip, r8
 80226a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80226a6:	ebae 0e08 	sub.w	lr, lr, r8
 80226aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80226ae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80226b2:	4418      	add	r0, r3
 80226b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80226b8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80226bc:	4405      	add	r5, r0
 80226be:	42a8      	cmp	r0, r5
 80226c0:	d24a      	bcs.n	8022758 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80226c2:	eb00 0803 	add.w	r8, r0, r3
 80226c6:	4540      	cmp	r0, r8
 80226c8:	d243      	bcs.n	8022752 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80226ca:	78e2      	ldrb	r2, [r4, #3]
 80226cc:	b15a      	cbz	r2, 80226e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80226ce:	2aff      	cmp	r2, #255	@ 0xff
 80226d0:	f894 9000 	ldrb.w	r9, [r4]
 80226d4:	d10a      	bne.n	80226ec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80226d6:	2eff      	cmp	r6, #255	@ 0xff
 80226d8:	d108      	bne.n	80226ec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80226da:	f880 9000 	strb.w	r9, [r0]
 80226de:	7862      	ldrb	r2, [r4, #1]
 80226e0:	7042      	strb	r2, [r0, #1]
 80226e2:	78a2      	ldrb	r2, [r4, #2]
 80226e4:	7082      	strb	r2, [r0, #2]
 80226e6:	3003      	adds	r0, #3
 80226e8:	3404      	adds	r4, #4
 80226ea:	e7ec      	b.n	80226c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80226ec:	4372      	muls	r2, r6
 80226ee:	1c51      	adds	r1, r2, #1
 80226f0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80226f4:	1209      	asrs	r1, r1, #8
 80226f6:	fa1f fa81 	uxth.w	sl, r1
 80226fa:	43c9      	mvns	r1, r1
 80226fc:	fb19 f90a 	smulbb	r9, r9, sl
 8022700:	b2ca      	uxtb	r2, r1
 8022702:	7801      	ldrb	r1, [r0, #0]
 8022704:	fb01 9902 	mla	r9, r1, r2, r9
 8022708:	fa1f f989 	uxth.w	r9, r9
 802270c:	f109 0101 	add.w	r1, r9, #1
 8022710:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8022714:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022718:	f880 9000 	strb.w	r9, [r0]
 802271c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8022720:	7861      	ldrb	r1, [r4, #1]
 8022722:	fb19 f902 	smulbb	r9, r9, r2
 8022726:	fb01 910a 	mla	r1, r1, sl, r9
 802272a:	b289      	uxth	r1, r1
 802272c:	f101 0901 	add.w	r9, r1, #1
 8022730:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8022734:	1209      	asrs	r1, r1, #8
 8022736:	7041      	strb	r1, [r0, #1]
 8022738:	7881      	ldrb	r1, [r0, #2]
 802273a:	f894 9002 	ldrb.w	r9, [r4, #2]
 802273e:	fb11 f202 	smulbb	r2, r1, r2
 8022742:	fb09 220a 	mla	r2, r9, sl, r2
 8022746:	b292      	uxth	r2, r2
 8022748:	1c51      	adds	r1, r2, #1
 802274a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802274e:	1212      	asrs	r2, r2, #8
 8022750:	e7c8      	b.n	80226e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8022752:	4460      	add	r0, ip
 8022754:	4474      	add	r4, lr
 8022756:	e7b2      	b.n	80226be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8022758:	6838      	ldr	r0, [r7, #0]
 802275a:	6803      	ldr	r3, [r0, #0]
 802275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802275e:	4798      	blx	r3
 8022760:	e787      	b.n	8022672 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8022762:	bf00      	nop
 8022764:	240621b8 	.word	0x240621b8
 8022768:	240621b2 	.word	0x240621b2

0802276c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802276c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022770:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8022774:	4607      	mov	r7, r0
 8022776:	460c      	mov	r4, r1
 8022778:	4692      	mov	sl, r2
 802277a:	4699      	mov	r9, r3
 802277c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802277e:	b335      	cbz	r5, 80227ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8022780:	4608      	mov	r0, r1
 8022782:	f7fb fd93 	bl	801e2ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022786:	4680      	mov	r8, r0
 8022788:	4620      	mov	r0, r4
 802278a:	f7fb fdc3 	bl	801e314 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802278e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022792:	4620      	mov	r0, r4
 8022794:	f8ad a008 	strh.w	sl, [sp, #8]
 8022798:	f8ad 900a 	strh.w	r9, [sp, #10]
 802279c:	f8ad 800c 	strh.w	r8, [sp, #12]
 80227a0:	f7fb fefa 	bl	801e598 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80227a4:	2810      	cmp	r0, #16
 80227a6:	d812      	bhi.n	80227ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80227a8:	e8df f000 	tbb	[pc, r0]
 80227ac:	11092d24 	.word	0x11092d24
 80227b0:	11111111 	.word	0x11111111
 80227b4:	14111111 	.word	0x14111111
 80227b8:	4c111111 	.word	0x4c111111
 80227bc:	3c          	.byte	0x3c
 80227bd:	00          	.byte	0x00
 80227be:	4620      	mov	r0, r4
 80227c0:	f7fb fe66 	bl	801e490 <_ZNK8touchgfx6Bitmap7getDataEv>
 80227c4:	462b      	mov	r3, r5
 80227c6:	4632      	mov	r2, r6
 80227c8:	a902      	add	r1, sp, #8
 80227ca:	f7ff ff07 	bl	80225dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80227ce:	b004      	add	sp, #16
 80227d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80227d4:	4620      	mov	r0, r4
 80227d6:	f7fb fe5b 	bl	801e490 <_ZNK8touchgfx6Bitmap7getDataEv>
 80227da:	4680      	mov	r8, r0
 80227dc:	4620      	mov	r0, r4
 80227de:	f7fb fe87 	bl	801e4f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80227e2:	ab02      	add	r3, sp, #8
 80227e4:	4602      	mov	r2, r0
 80227e6:	4641      	mov	r1, r8
 80227e8:	4638      	mov	r0, r7
 80227ea:	e9cd 6500 	strd	r6, r5, [sp]
 80227ee:	f7ff fdbf 	bl	8022370 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80227f2:	e7ec      	b.n	80227ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80227f4:	4620      	mov	r0, r4
 80227f6:	f7fb fe4b 	bl	801e490 <_ZNK8touchgfx6Bitmap7getDataEv>
 80227fa:	462b      	mov	r3, r5
 80227fc:	4632      	mov	r2, r6
 80227fe:	a902      	add	r1, sp, #8
 8022800:	f7ff fdf8 	bl	80223f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022804:	e7e3      	b.n	80227ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8022806:	683b      	ldr	r3, [r7, #0]
 8022808:	4620      	mov	r0, r4
 802280a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802280e:	f7fb fe3f 	bl	801e490 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022812:	2300      	movs	r3, #0
 8022814:	4601      	mov	r1, r0
 8022816:	aa02      	add	r2, sp, #8
 8022818:	4638      	mov	r0, r7
 802281a:	e9cd 5300 	strd	r5, r3, [sp]
 802281e:	4633      	mov	r3, r6
 8022820:	47c0      	blx	r8
 8022822:	e7d4      	b.n	80227ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8022824:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8022826:	2f00      	cmp	r7, #0
 8022828:	d0d1      	beq.n	80227ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802282a:	683b      	ldr	r3, [r7, #0]
 802282c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8022830:	4620      	mov	r0, r4
 8022832:	f7fb fe2d 	bl	801e490 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022836:	9500      	str	r5, [sp, #0]
 8022838:	4601      	mov	r1, r0
 802283a:	4633      	mov	r3, r6
 802283c:	aa02      	add	r2, sp, #8
 802283e:	4638      	mov	r0, r7
 8022840:	47c0      	blx	r8
 8022842:	e7c4      	b.n	80227ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8022844:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8022846:	2f00      	cmp	r7, #0
 8022848:	d0c1      	beq.n	80227ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802284a:	683b      	ldr	r3, [r7, #0]
 802284c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8022850:	e7ee      	b.n	8022830 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

08022852 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022852:	b4f0      	push	{r4, r5, r6, r7}
 8022854:	4616      	mov	r6, r2
 8022856:	461c      	mov	r4, r3
 8022858:	460d      	mov	r5, r1
 802285a:	9a04      	ldr	r2, [sp, #16]
 802285c:	2e01      	cmp	r6, #1
 802285e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022862:	d00e      	beq.n	8022882 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8022864:	d303      	bcc.n	802286e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8022866:	2e02      	cmp	r6, #2
 8022868:	d006      	beq.n	8022878 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 802286a:	bcf0      	pop	{r4, r5, r6, r7}
 802286c:	4770      	bx	lr
 802286e:	4621      	mov	r1, r4
 8022870:	4628      	mov	r0, r5
 8022872:	bcf0      	pop	{r4, r5, r6, r7}
 8022874:	f7ff bdbe 	b.w	80223f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022878:	4621      	mov	r1, r4
 802287a:	4628      	mov	r0, r5
 802287c:	bcf0      	pop	{r4, r5, r6, r7}
 802287e:	f7ff bead 	b.w	80225dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022882:	6805      	ldr	r5, [r0, #0]
 8022884:	2600      	movs	r6, #0
 8022886:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802288a:	68ed      	ldr	r5, [r5, #12]
 802288c:	4613      	mov	r3, r2
 802288e:	4622      	mov	r2, r4
 8022890:	46ac      	mov	ip, r5
 8022892:	bcf0      	pop	{r4, r5, r6, r7}
 8022894:	4760      	bx	ip
	...

08022898 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8022898:	b160      	cbz	r0, 80228b4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 802289a:	2903      	cmp	r1, #3
 802289c:	d818      	bhi.n	80228d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 802289e:	e8df f001 	tbb	[pc, r1]
 80228a2:	1902      	.short	0x1902
 80228a4:	1b06      	.short	0x1b06
 80228a6:	4b0e      	ldr	r3, [pc, #56]	@ (80228e0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80228a8:	8818      	ldrh	r0, [r3, #0]
 80228aa:	4240      	negs	r0, r0
 80228ac:	4770      	bx	lr
 80228ae:	4b0c      	ldr	r3, [pc, #48]	@ (80228e0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80228b0:	8818      	ldrh	r0, [r3, #0]
 80228b2:	4770      	bx	lr
 80228b4:	2903      	cmp	r1, #3
 80228b6:	d80b      	bhi.n	80228d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80228b8:	a301      	add	r3, pc, #4	@ (adr r3, 80228c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80228ba:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80228be:	bf00      	nop
 80228c0:	080228d5 	.word	0x080228d5
 80228c4:	080228af 	.word	0x080228af
 80228c8:	080228d9 	.word	0x080228d9
 80228cc:	080228a7 	.word	0x080228a7
 80228d0:	2000      	movs	r0, #0
 80228d2:	4770      	bx	lr
 80228d4:	2001      	movs	r0, #1
 80228d6:	4770      	bx	lr
 80228d8:	f04f 30ff 	mov.w	r0, #4294967295
 80228dc:	4770      	bx	lr
 80228de:	bf00      	nop
 80228e0:	240621b2 	.word	0x240621b2

080228e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80228e4:	b160      	cbz	r0, 8022900 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80228e6:	2903      	cmp	r1, #3
 80228e8:	d818      	bhi.n	802291c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80228ea:	e8df f001 	tbb	[pc, r1]
 80228ee:	0219      	.short	0x0219
 80228f0:	051b      	.short	0x051b
 80228f2:	4b0e      	ldr	r3, [pc, #56]	@ (802292c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80228f4:	8818      	ldrh	r0, [r3, #0]
 80228f6:	4770      	bx	lr
 80228f8:	4b0c      	ldr	r3, [pc, #48]	@ (802292c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80228fa:	8818      	ldrh	r0, [r3, #0]
 80228fc:	4240      	negs	r0, r0
 80228fe:	4770      	bx	lr
 8022900:	2903      	cmp	r1, #3
 8022902:	d80b      	bhi.n	802291c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8022904:	a301      	add	r3, pc, #4	@ (adr r3, 802290c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8022906:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802290a:	bf00      	nop
 802290c:	080228f3 	.word	0x080228f3
 8022910:	08022925 	.word	0x08022925
 8022914:	080228f9 	.word	0x080228f9
 8022918:	08022921 	.word	0x08022921
 802291c:	2000      	movs	r0, #0
 802291e:	4770      	bx	lr
 8022920:	2001      	movs	r0, #1
 8022922:	4770      	bx	lr
 8022924:	f04f 30ff 	mov.w	r0, #4294967295
 8022928:	4770      	bx	lr
 802292a:	bf00      	nop
 802292c:	240621b2 	.word	0x240621b2

08022930 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022934:	b097      	sub	sp, #92	@ 0x5c
 8022936:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022938:	a912      	add	r1, sp, #72	@ 0x48
 802293a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 802293e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8022942:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8022946:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 802294a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 802294e:	e881 000c 	stmia.w	r1, {r2, r3}
 8022952:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8022956:	930a      	str	r3, [sp, #40]	@ 0x28
 8022958:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 802295c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8022960:	9311      	str	r3, [sp, #68]	@ 0x44
 8022962:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8022966:	798d      	ldrb	r5, [r1, #6]
 8022968:	930c      	str	r3, [sp, #48]	@ 0x30
 802296a:	7b4b      	ldrb	r3, [r1, #13]
 802296c:	0158      	lsls	r0, r3, #5
 802296e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8022972:	4328      	orrs	r0, r5
 8022974:	9009      	str	r0, [sp, #36]	@ 0x24
 8022976:	f000 817c 	beq.w	8022c72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802297a:	011b      	lsls	r3, r3, #4
 802297c:	79c8      	ldrb	r0, [r1, #7]
 802297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022982:	4303      	orrs	r3, r0
 8022984:	930e      	str	r3, [sp, #56]	@ 0x38
 8022986:	f000 8174 	beq.w	8022c72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802298a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802298e:	b29b      	uxth	r3, r3
 8022990:	2f00      	cmp	r7, #0
 8022992:	f000 8116 	beq.w	8022bc2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8022996:	1aff      	subs	r7, r7, r3
 8022998:	b2bf      	uxth	r7, r7
 802299a:	043b      	lsls	r3, r7, #16
 802299c:	d502      	bpl.n	80229a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802299e:	1bf6      	subs	r6, r6, r7
 80229a0:	2700      	movs	r7, #0
 80229a2:	b236      	sxth	r6, r6
 80229a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80229a8:	a812      	add	r0, sp, #72	@ 0x48
 80229aa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80229ae:	428e      	cmp	r6, r1
 80229b0:	b28b      	uxth	r3, r1
 80229b2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80229b6:	bfbf      	itttt	lt
 80229b8:	18ff      	addlt	r7, r7, r3
 80229ba:	1bbe      	sublt	r6, r7, r6
 80229bc:	b2b7      	uxthlt	r7, r6
 80229be:	460e      	movlt	r6, r1
 80229c0:	8891      	ldrh	r1, [r2, #4]
 80229c2:	440b      	add	r3, r1
 80229c4:	4631      	mov	r1, r6
 80229c6:	b21b      	sxth	r3, r3
 80229c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80229ca:	88d3      	ldrh	r3, [r2, #6]
 80229cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80229ce:	449a      	add	sl, r3
 80229d0:	fa0f f38a 	sxth.w	r3, sl
 80229d4:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 80229d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80229da:	4bb5      	ldr	r3, [pc, #724]	@ (8022cb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80229dc:	f893 b000 	ldrb.w	fp, [r3]
 80229e0:	f10b 3cff 	add.w	ip, fp, #4294967295
 80229e4:	f1dc 0300 	rsbs	r3, ip, #0
 80229e8:	eb43 030c 	adc.w	r3, r3, ip
 80229ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80229ee:	464b      	mov	r3, r9
 80229f0:	f7f7 ff8f 	bl	801a912 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80229f4:	4631      	mov	r1, r6
 80229f6:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80229fa:	464b      	mov	r3, r9
 80229fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80229fe:	a812      	add	r0, sp, #72	@ 0x48
 8022a00:	f7f7 ffa4 	bl	801a94c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022a04:	a916      	add	r1, sp, #88	@ 0x58
 8022a06:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022a0a:	a815      	add	r0, sp, #84	@ 0x54
 8022a0c:	f7f8 f8ca 	bl	801aba4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022a10:	f1b9 0f00 	cmp.w	r9, #0
 8022a14:	f040 80d8 	bne.w	8022bc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8022a18:	f1bb 0f01 	cmp.w	fp, #1
 8022a1c:	f040 80dc 	bne.w	8022bd8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8022a20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022a22:	b153      	cbz	r3, 8022a3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8022a24:	2508      	movs	r5, #8
 8022a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022a28:	fb95 f3f8 	sdiv	r3, r5, r8
 8022a2c:	1e5d      	subs	r5, r3, #1
 8022a2e:	4415      	add	r5, r2
 8022a30:	fb95 f5f3 	sdiv	r5, r5, r3
 8022a34:	fb15 f503 	smulbb	r5, r5, r3
 8022a38:	b2ad      	uxth	r5, r5
 8022a3a:	b907      	cbnz	r7, 8022a3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022a3c:	b16c      	cbz	r4, 8022a5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8022a3e:	fb04 7305 	mla	r3, r4, r5, r7
 8022a42:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022a44:	ebaa 0a04 	sub.w	sl, sl, r4
 8022a48:	fb08 f303 	mul.w	r3, r8, r3
 8022a4c:	fa1f fa8a 	uxth.w	sl, sl
 8022a50:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8022a54:	f003 0407 	and.w	r4, r3, #7
 8022a58:	9226      	str	r2, [sp, #152]	@ 0x98
 8022a5a:	4649      	mov	r1, r9
 8022a5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022a5e:	f7ff ff1b 	bl	8022898 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8022a62:	4683      	mov	fp, r0
 8022a64:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022a66:	f7ff ff3d 	bl	80228e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8022a6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022a6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022a6e:	4681      	mov	r9, r0
 8022a70:	1a9b      	subs	r3, r3, r2
 8022a72:	459a      	cmp	sl, r3
 8022a74:	bfa8      	it	ge
 8022a76:	469a      	movge	sl, r3
 8022a78:	f1ba 0f00 	cmp.w	sl, #0
 8022a7c:	f340 80f9 	ble.w	8022c72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022a80:	1bf6      	subs	r6, r6, r7
 8022a82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022a84:	1b9e      	subs	r6, r3, r6
 8022a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a88:	429e      	cmp	r6, r3
 8022a8a:	bfd4      	ite	le
 8022a8c:	ebc7 0706 	rsble	r7, r7, r6
 8022a90:	ebc7 0703 	rsbgt	r7, r7, r3
 8022a94:	2f00      	cmp	r7, #0
 8022a96:	f340 80ec 	ble.w	8022c72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022a9a:	1bed      	subs	r5, r5, r7
 8022a9c:	fb08 f305 	mul.w	r3, r8, r5
 8022aa0:	930d      	str	r3, [sp, #52]	@ 0x34
 8022aa2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022aa4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022aa8:	930e      	str	r3, [sp, #56]	@ 0x38
 8022aaa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022aac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022ab0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022ab2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022ab4:	b2db      	uxtb	r3, r3
 8022ab6:	9310      	str	r3, [sp, #64]	@ 0x40
 8022ab8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	f040 80de 	bne.w	8022c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8022ac0:	4b7c      	ldr	r3, [pc, #496]	@ (8022cb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8022ac2:	6818      	ldr	r0, [r3, #0]
 8022ac4:	6803      	ldr	r3, [r0, #0]
 8022ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022ac8:	4798      	blx	r3
 8022aca:	2301      	movs	r3, #1
 8022acc:	4a7a      	ldr	r2, [pc, #488]	@ (8022cb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8022ace:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8022ad2:	fb07 9b1b 	mls	fp, r7, fp, r9
 8022ad6:	fa03 f308 	lsl.w	r3, r3, r8
 8022ada:	8811      	ldrh	r1, [r2, #0]
 8022adc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8022ae0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022ae4:	3b01      	subs	r3, #1
 8022ae6:	fb06 bb07 	mla	fp, r6, r7, fp
 8022aea:	b2db      	uxtb	r3, r3
 8022aec:	930a      	str	r3, [sp, #40]	@ 0x28
 8022aee:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8022af2:	fb01 2303 	mla	r3, r1, r3, r2
 8022af6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022afa:	18c3      	adds	r3, r0, r3
 8022afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8022afe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022b00:	781a      	ldrb	r2, [r3, #0]
 8022b02:	4122      	asrs	r2, r4
 8022b04:	b2d2      	uxtb	r2, r2
 8022b06:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022b0a:	f0c0 80d7 	bcc.w	8022cbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8022b0e:	46be      	mov	lr, r7
 8022b10:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022b12:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022b16:	f0c0 80ba 	bcc.w	8022c8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8022b1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b1c:	4013      	ands	r3, r2
 8022b1e:	d041      	beq.n	8022ba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8022b20:	20ff      	movs	r0, #255	@ 0xff
 8022b22:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022b24:	fb90 f5f5 	sdiv	r5, r0, r5
 8022b28:	436b      	muls	r3, r5
 8022b2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8022b2c:	dd03      	ble.n	8022b36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8022b2e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022b30:	4285      	cmp	r5, r0
 8022b32:	f000 80a5 	beq.w	8022c80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8022b36:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022b38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022b3a:	fb15 f303 	smulbb	r3, r5, r3
 8022b3e:	b29b      	uxth	r3, r3
 8022b40:	1c5d      	adds	r5, r3, #1
 8022b42:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8022b46:	780d      	ldrb	r5, [r1, #0]
 8022b48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b4c:	fa1f fc83 	uxth.w	ip, r3
 8022b50:	43db      	mvns	r3, r3
 8022b52:	fb10 f90c 	smulbb	r9, r0, ip
 8022b56:	b2db      	uxtb	r3, r3
 8022b58:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8022b5a:	fb05 9503 	mla	r5, r5, r3, r9
 8022b5e:	b2ad      	uxth	r5, r5
 8022b60:	f105 0901 	add.w	r9, r5, #1
 8022b64:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022b68:	fb10 f90c 	smulbb	r9, r0, ip
 8022b6c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022b6e:	122d      	asrs	r5, r5, #8
 8022b70:	fb10 fc0c 	smulbb	ip, r0, ip
 8022b74:	700d      	strb	r5, [r1, #0]
 8022b76:	784d      	ldrb	r5, [r1, #1]
 8022b78:	fb05 9503 	mla	r5, r5, r3, r9
 8022b7c:	b2ad      	uxth	r5, r5
 8022b7e:	f105 0901 	add.w	r9, r5, #1
 8022b82:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022b86:	122d      	asrs	r5, r5, #8
 8022b88:	704d      	strb	r5, [r1, #1]
 8022b8a:	788d      	ldrb	r5, [r1, #2]
 8022b8c:	fb05 cc03 	mla	ip, r5, r3, ip
 8022b90:	fa1f fc8c 	uxth.w	ip, ip
 8022b94:	f10c 0301 	add.w	r3, ip, #1
 8022b98:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022b9c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022ba0:	f881 c002 	strb.w	ip, [r1, #2]
 8022ba4:	4444      	add	r4, r8
 8022ba6:	4431      	add	r1, r6
 8022ba8:	b2a4      	uxth	r4, r4
 8022baa:	2c07      	cmp	r4, #7
 8022bac:	bf89      	itett	hi
 8022bae:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8022bb0:	fa42 f208 	asrls.w	r2, r2, r8
 8022bb4:	2400      	movhi	r4, #0
 8022bb6:	785a      	ldrbhi	r2, [r3, #1]
 8022bb8:	bf8a      	itet	hi
 8022bba:	3301      	addhi	r3, #1
 8022bbc:	b2d2      	uxtbls	r2, r2
 8022bbe:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8022bc0:	e7a7      	b.n	8022b12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8022bc2:	441e      	add	r6, r3
 8022bc4:	b236      	sxth	r6, r6
 8022bc6:	e6ed      	b.n	80229a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8022bc8:	f1b9 0f01 	cmp.w	r9, #1
 8022bcc:	f47f af28 	bne.w	8022a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022bd0:	f1bb 0f01 	cmp.w	fp, #1
 8022bd4:	f47f af24 	bne.w	8022a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022bd8:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8022cb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8022bdc:	f8db 0000 	ldr.w	r0, [fp]
 8022be0:	6803      	ldr	r3, [r0, #0]
 8022be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022be4:	4798      	blx	r3
 8022be6:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8022bea:	465a      	mov	r2, fp
 8022bec:	d006      	beq.n	8022bfc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8022bee:	f1b8 0f04 	cmp.w	r8, #4
 8022bf2:	d141      	bne.n	8022c78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8022bf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022bf6:	3300      	adds	r3, #0
 8022bf8:	bf18      	it	ne
 8022bfa:	2301      	movne	r3, #1
 8022bfc:	0580      	lsls	r0, r0, #22
 8022bfe:	d566      	bpl.n	8022cce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022c00:	f1b8 0f08 	cmp.w	r8, #8
 8022c04:	d163      	bne.n	8022cce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022c06:	2b00      	cmp	r3, #0
 8022c08:	bf0c      	ite	eq
 8022c0a:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8022c0e:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8022c12:	2f00      	cmp	r7, #0
 8022c14:	f47f af04 	bne.w	8022a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022c18:	2c00      	cmp	r4, #0
 8022c1a:	f47f af01 	bne.w	8022a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c20:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022c22:	18f3      	adds	r3, r6, r3
 8022c24:	4283      	cmp	r3, r0
 8022c26:	f73f aefb 	bgt.w	8022a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022c2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022c2e:	4403      	add	r3, r0
 8022c30:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8022c32:	4283      	cmp	r3, r0
 8022c34:	f73f aef4 	bgt.w	8022a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022c38:	f1b8 0f08 	cmp.w	r8, #8
 8022c3c:	6810      	ldr	r0, [r2, #0]
 8022c3e:	f04f 0600 	mov.w	r6, #0
 8022c42:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8022c46:	bf18      	it	ne
 8022c48:	3501      	addne	r5, #1
 8022c4a:	6804      	ldr	r4, [r0, #0]
 8022c4c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8022c50:	bf18      	it	ne
 8022c52:	f025 0501 	bicne.w	r5, r5, #1
 8022c56:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8022c5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022c5c:	bf18      	it	ne
 8022c5e:	b2ad      	uxthne	r5, r5
 8022c60:	9104      	str	r1, [sp, #16]
 8022c62:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022c64:	e9cd 5a00 	strd	r5, sl, [sp]
 8022c68:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8022c6c:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8022c6e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8022c70:	47a0      	blx	r4
 8022c72:	b017      	add	sp, #92	@ 0x5c
 8022c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c78:	2300      	movs	r3, #0
 8022c7a:	e7bf      	b.n	8022bfc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8022c7c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022c7e:	e724      	b.n	8022aca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8022c80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022c82:	700b      	strb	r3, [r1, #0]
 8022c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022c86:	704b      	strb	r3, [r1, #1]
 8022c88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022c8a:	708b      	strb	r3, [r1, #2]
 8022c8c:	e78a      	b.n	8022ba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8022c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022c90:	b153      	cbz	r3, 8022ca8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8022c92:	441c      	add	r4, r3
 8022c94:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022c96:	b2a4      	uxth	r4, r4
 8022c98:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8022c9c:	f004 0407 	and.w	r4, r4, #7
 8022ca0:	781a      	ldrb	r2, [r3, #0]
 8022ca2:	9326      	str	r3, [sp, #152]	@ 0x98
 8022ca4:	4122      	asrs	r2, r4
 8022ca6:	b2d2      	uxtb	r2, r2
 8022ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022caa:	445b      	add	r3, fp
 8022cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8022cae:	e72a      	b.n	8022b06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8022cb0:	240621b0 	.word	0x240621b0
 8022cb4:	240621b8 	.word	0x240621b8
 8022cb8:	240621b2 	.word	0x240621b2
 8022cbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d1d7      	bne.n	8022c72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022cc2:	4b06      	ldr	r3, [pc, #24]	@ (8022cdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8022cc4:	6818      	ldr	r0, [r3, #0]
 8022cc6:	6803      	ldr	r3, [r0, #0]
 8022cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022cca:	4798      	blx	r3
 8022ccc:	e7d1      	b.n	8022c72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022cce:	2b00      	cmp	r3, #0
 8022cd0:	f43f aea6 	beq.w	8022a20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022cd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8022cd8:	e79b      	b.n	8022c12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8022cda:	bf00      	nop
 8022cdc:	240621b8 	.word	0x240621b8

08022ce0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022ce0:	b538      	push	{r3, r4, r5, lr}
 8022ce2:	4c15      	ldr	r4, [pc, #84]	@ (8022d38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022ce4:	4605      	mov	r5, r0
 8022ce6:	7823      	ldrb	r3, [r4, #0]
 8022ce8:	f3bf 8f5b 	dmb	ish
 8022cec:	07da      	lsls	r2, r3, #31
 8022cee:	d40b      	bmi.n	8022d08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022cf0:	4620      	mov	r0, r4
 8022cf2:	f006 f8f7 	bl	8028ee4 <__cxa_guard_acquire>
 8022cf6:	b138      	cbz	r0, 8022d08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022cf8:	4620      	mov	r0, r4
 8022cfa:	f006 f8ff 	bl	8028efc <__cxa_guard_release>
 8022cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8022d3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022d00:	490f      	ldr	r1, [pc, #60]	@ (8022d40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8022d02:	4810      	ldr	r0, [pc, #64]	@ (8022d44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022d04:	f006 f8e7 	bl	8028ed6 <__aeabi_atexit>
 8022d08:	4c0f      	ldr	r4, [pc, #60]	@ (8022d48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022d0a:	7823      	ldrb	r3, [r4, #0]
 8022d0c:	f3bf 8f5b 	dmb	ish
 8022d10:	07db      	lsls	r3, r3, #31
 8022d12:	d40b      	bmi.n	8022d2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022d14:	4620      	mov	r0, r4
 8022d16:	f006 f8e5 	bl	8028ee4 <__cxa_guard_acquire>
 8022d1a:	b138      	cbz	r0, 8022d2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022d1c:	4620      	mov	r0, r4
 8022d1e:	f006 f8ed 	bl	8028efc <__cxa_guard_release>
 8022d22:	4a06      	ldr	r2, [pc, #24]	@ (8022d3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022d24:	4909      	ldr	r1, [pc, #36]	@ (8022d4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022d26:	480a      	ldr	r0, [pc, #40]	@ (8022d50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022d28:	f006 f8d5 	bl	8028ed6 <__aeabi_atexit>
 8022d2c:	4b05      	ldr	r3, [pc, #20]	@ (8022d44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022d2e:	616b      	str	r3, [r5, #20]
 8022d30:	4b07      	ldr	r3, [pc, #28]	@ (8022d50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022d32:	61ab      	str	r3, [r5, #24]
 8022d34:	bd38      	pop	{r3, r4, r5, pc}
 8022d36:	bf00      	nop
 8022d38:	2406229c 	.word	0x2406229c
 8022d3c:	24000000 	.word	0x24000000
 8022d40:	0801ffd1 	.word	0x0801ffd1
 8022d44:	240000c8 	.word	0x240000c8
 8022d48:	240622a0 	.word	0x240622a0
 8022d4c:	0801ffcf 	.word	0x0801ffcf
 8022d50:	240000cc 	.word	0x240000cc

08022d54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022d54:	b538      	push	{r3, r4, r5, lr}
 8022d56:	4c15      	ldr	r4, [pc, #84]	@ (8022dac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022d58:	4605      	mov	r5, r0
 8022d5a:	7823      	ldrb	r3, [r4, #0]
 8022d5c:	f3bf 8f5b 	dmb	ish
 8022d60:	07da      	lsls	r2, r3, #31
 8022d62:	d40b      	bmi.n	8022d7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022d64:	4620      	mov	r0, r4
 8022d66:	f006 f8bd 	bl	8028ee4 <__cxa_guard_acquire>
 8022d6a:	b138      	cbz	r0, 8022d7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022d6c:	4620      	mov	r0, r4
 8022d6e:	f006 f8c5 	bl	8028efc <__cxa_guard_release>
 8022d72:	4a0f      	ldr	r2, [pc, #60]	@ (8022db0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022d74:	490f      	ldr	r1, [pc, #60]	@ (8022db4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022d76:	4810      	ldr	r0, [pc, #64]	@ (8022db8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022d78:	f006 f8ad 	bl	8028ed6 <__aeabi_atexit>
 8022d7c:	4c0f      	ldr	r4, [pc, #60]	@ (8022dbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8022d7e:	7823      	ldrb	r3, [r4, #0]
 8022d80:	f3bf 8f5b 	dmb	ish
 8022d84:	07db      	lsls	r3, r3, #31
 8022d86:	d40b      	bmi.n	8022da0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022d88:	4620      	mov	r0, r4
 8022d8a:	f006 f8ab 	bl	8028ee4 <__cxa_guard_acquire>
 8022d8e:	b138      	cbz	r0, 8022da0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022d90:	4620      	mov	r0, r4
 8022d92:	f006 f8b3 	bl	8028efc <__cxa_guard_release>
 8022d96:	4a06      	ldr	r2, [pc, #24]	@ (8022db0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022d98:	4909      	ldr	r1, [pc, #36]	@ (8022dc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022d9a:	480a      	ldr	r0, [pc, #40]	@ (8022dc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022d9c:	f006 f89b 	bl	8028ed6 <__aeabi_atexit>
 8022da0:	4b05      	ldr	r3, [pc, #20]	@ (8022db8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022da2:	60eb      	str	r3, [r5, #12]
 8022da4:	4b07      	ldr	r3, [pc, #28]	@ (8022dc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022da6:	612b      	str	r3, [r5, #16]
 8022da8:	bd38      	pop	{r3, r4, r5, pc}
 8022daa:	bf00      	nop
 8022dac:	2406227c 	.word	0x2406227c
 8022db0:	24000000 	.word	0x24000000
 8022db4:	0801ffd5 	.word	0x0801ffd5
 8022db8:	240000a8 	.word	0x240000a8
 8022dbc:	24062280 	.word	0x24062280
 8022dc0:	0801ffd3 	.word	0x0801ffd3
 8022dc4:	240000ac 	.word	0x240000ac

08022dc8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8022dc8:	b510      	push	{r4, lr}
 8022dca:	4604      	mov	r4, r0
 8022dcc:	f7ff ff88 	bl	8022ce0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022dd0:	4620      	mov	r0, r4
 8022dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022dd6:	f7ff bfbd 	b.w	8022d54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022ddc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022ddc:	b538      	push	{r3, r4, r5, lr}
 8022dde:	4c15      	ldr	r4, [pc, #84]	@ (8022e34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022de0:	4605      	mov	r5, r0
 8022de2:	7823      	ldrb	r3, [r4, #0]
 8022de4:	f3bf 8f5b 	dmb	ish
 8022de8:	07da      	lsls	r2, r3, #31
 8022dea:	d40b      	bmi.n	8022e04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022dec:	4620      	mov	r0, r4
 8022dee:	f006 f879 	bl	8028ee4 <__cxa_guard_acquire>
 8022df2:	b138      	cbz	r0, 8022e04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022df4:	4620      	mov	r0, r4
 8022df6:	f006 f881 	bl	8028efc <__cxa_guard_release>
 8022dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8022e38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022dfc:	490f      	ldr	r1, [pc, #60]	@ (8022e3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022dfe:	4810      	ldr	r0, [pc, #64]	@ (8022e40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022e00:	f006 f869 	bl	8028ed6 <__aeabi_atexit>
 8022e04:	4c0f      	ldr	r4, [pc, #60]	@ (8022e44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022e06:	7823      	ldrb	r3, [r4, #0]
 8022e08:	f3bf 8f5b 	dmb	ish
 8022e0c:	07db      	lsls	r3, r3, #31
 8022e0e:	d40b      	bmi.n	8022e28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022e10:	4620      	mov	r0, r4
 8022e12:	f006 f867 	bl	8028ee4 <__cxa_guard_acquire>
 8022e16:	b138      	cbz	r0, 8022e28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022e18:	4620      	mov	r0, r4
 8022e1a:	f006 f86f 	bl	8028efc <__cxa_guard_release>
 8022e1e:	4a06      	ldr	r2, [pc, #24]	@ (8022e38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022e20:	4909      	ldr	r1, [pc, #36]	@ (8022e48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022e22:	480a      	ldr	r0, [pc, #40]	@ (8022e4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022e24:	f006 f857 	bl	8028ed6 <__aeabi_atexit>
 8022e28:	4b05      	ldr	r3, [pc, #20]	@ (8022e40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022e2a:	626b      	str	r3, [r5, #36]	@ 0x24
 8022e2c:	4b07      	ldr	r3, [pc, #28]	@ (8022e4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022e2e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8022e30:	bd38      	pop	{r3, r4, r5, pc}
 8022e32:	bf00      	nop
 8022e34:	240622a4 	.word	0x240622a4
 8022e38:	24000000 	.word	0x24000000
 8022e3c:	0801ffc9 	.word	0x0801ffc9
 8022e40:	240000d0 	.word	0x240000d0
 8022e44:	240622a8 	.word	0x240622a8
 8022e48:	0801ffc7 	.word	0x0801ffc7
 8022e4c:	240000d4 	.word	0x240000d4

08022e50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022e50:	b538      	push	{r3, r4, r5, lr}
 8022e52:	4c15      	ldr	r4, [pc, #84]	@ (8022ea8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022e54:	4605      	mov	r5, r0
 8022e56:	7823      	ldrb	r3, [r4, #0]
 8022e58:	f3bf 8f5b 	dmb	ish
 8022e5c:	07da      	lsls	r2, r3, #31
 8022e5e:	d40b      	bmi.n	8022e78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022e60:	4620      	mov	r0, r4
 8022e62:	f006 f83f 	bl	8028ee4 <__cxa_guard_acquire>
 8022e66:	b138      	cbz	r0, 8022e78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022e68:	4620      	mov	r0, r4
 8022e6a:	f006 f847 	bl	8028efc <__cxa_guard_release>
 8022e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8022eac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022e70:	490f      	ldr	r1, [pc, #60]	@ (8022eb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022e72:	4810      	ldr	r0, [pc, #64]	@ (8022eb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022e74:	f006 f82f 	bl	8028ed6 <__aeabi_atexit>
 8022e78:	4c0f      	ldr	r4, [pc, #60]	@ (8022eb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022e7a:	7823      	ldrb	r3, [r4, #0]
 8022e7c:	f3bf 8f5b 	dmb	ish
 8022e80:	07db      	lsls	r3, r3, #31
 8022e82:	d40b      	bmi.n	8022e9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022e84:	4620      	mov	r0, r4
 8022e86:	f006 f82d 	bl	8028ee4 <__cxa_guard_acquire>
 8022e8a:	b138      	cbz	r0, 8022e9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022e8c:	4620      	mov	r0, r4
 8022e8e:	f006 f835 	bl	8028efc <__cxa_guard_release>
 8022e92:	4a06      	ldr	r2, [pc, #24]	@ (8022eac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022e94:	4909      	ldr	r1, [pc, #36]	@ (8022ebc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022e96:	480a      	ldr	r0, [pc, #40]	@ (8022ec0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022e98:	f006 f81d 	bl	8028ed6 <__aeabi_atexit>
 8022e9c:	4b05      	ldr	r3, [pc, #20]	@ (8022eb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022e9e:	61eb      	str	r3, [r5, #28]
 8022ea0:	4b07      	ldr	r3, [pc, #28]	@ (8022ec0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022ea2:	622b      	str	r3, [r5, #32]
 8022ea4:	bd38      	pop	{r3, r4, r5, pc}
 8022ea6:	bf00      	nop
 8022ea8:	24062284 	.word	0x24062284
 8022eac:	24000000 	.word	0x24000000
 8022eb0:	0801ffcd 	.word	0x0801ffcd
 8022eb4:	240000b0 	.word	0x240000b0
 8022eb8:	24062288 	.word	0x24062288
 8022ebc:	0801ffcb 	.word	0x0801ffcb
 8022ec0:	240000b4 	.word	0x240000b4

08022ec4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022ec4:	b510      	push	{r4, lr}
 8022ec6:	4604      	mov	r4, r0
 8022ec8:	f7ff ff88 	bl	8022ddc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022ecc:	4620      	mov	r0, r4
 8022ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ed2:	f7ff bfbd 	b.w	8022e50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022ed8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8022ed8:	b538      	push	{r3, r4, r5, lr}
 8022eda:	4c15      	ldr	r4, [pc, #84]	@ (8022f30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8022edc:	4605      	mov	r5, r0
 8022ede:	7823      	ldrb	r3, [r4, #0]
 8022ee0:	f3bf 8f5b 	dmb	ish
 8022ee4:	07da      	lsls	r2, r3, #31
 8022ee6:	d40b      	bmi.n	8022f00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022ee8:	4620      	mov	r0, r4
 8022eea:	f005 fffb 	bl	8028ee4 <__cxa_guard_acquire>
 8022eee:	b138      	cbz	r0, 8022f00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022ef0:	4620      	mov	r0, r4
 8022ef2:	f006 f803 	bl	8028efc <__cxa_guard_release>
 8022ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8022f34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022ef8:	490f      	ldr	r1, [pc, #60]	@ (8022f38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8022efa:	4810      	ldr	r0, [pc, #64]	@ (8022f3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022efc:	f005 ffeb 	bl	8028ed6 <__aeabi_atexit>
 8022f00:	4c0f      	ldr	r4, [pc, #60]	@ (8022f40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8022f02:	7823      	ldrb	r3, [r4, #0]
 8022f04:	f3bf 8f5b 	dmb	ish
 8022f08:	07db      	lsls	r3, r3, #31
 8022f0a:	d40b      	bmi.n	8022f24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022f0c:	4620      	mov	r0, r4
 8022f0e:	f005 ffe9 	bl	8028ee4 <__cxa_guard_acquire>
 8022f12:	b138      	cbz	r0, 8022f24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022f14:	4620      	mov	r0, r4
 8022f16:	f005 fff1 	bl	8028efc <__cxa_guard_release>
 8022f1a:	4a06      	ldr	r2, [pc, #24]	@ (8022f34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022f1c:	4909      	ldr	r1, [pc, #36]	@ (8022f44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8022f1e:	480a      	ldr	r0, [pc, #40]	@ (8022f48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022f20:	f005 ffd9 	bl	8028ed6 <__aeabi_atexit>
 8022f24:	4b05      	ldr	r3, [pc, #20]	@ (8022f3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022f26:	636b      	str	r3, [r5, #52]	@ 0x34
 8022f28:	4b07      	ldr	r3, [pc, #28]	@ (8022f48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022f2a:	63ab      	str	r3, [r5, #56]	@ 0x38
 8022f2c:	bd38      	pop	{r3, r4, r5, pc}
 8022f2e:	bf00      	nop
 8022f30:	2406228c 	.word	0x2406228c
 8022f34:	24000000 	.word	0x24000000
 8022f38:	0801ffc1 	.word	0x0801ffc1
 8022f3c:	240000b8 	.word	0x240000b8
 8022f40:	24062290 	.word	0x24062290
 8022f44:	0801ffbf 	.word	0x0801ffbf
 8022f48:	240000bc 	.word	0x240000bc

08022f4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8022f4c:	b538      	push	{r3, r4, r5, lr}
 8022f4e:	4c15      	ldr	r4, [pc, #84]	@ (8022fa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8022f50:	4605      	mov	r5, r0
 8022f52:	7823      	ldrb	r3, [r4, #0]
 8022f54:	f3bf 8f5b 	dmb	ish
 8022f58:	07da      	lsls	r2, r3, #31
 8022f5a:	d40b      	bmi.n	8022f74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022f5c:	4620      	mov	r0, r4
 8022f5e:	f005 ffc1 	bl	8028ee4 <__cxa_guard_acquire>
 8022f62:	b138      	cbz	r0, 8022f74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022f64:	4620      	mov	r0, r4
 8022f66:	f005 ffc9 	bl	8028efc <__cxa_guard_release>
 8022f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8022fa8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022f6c:	490f      	ldr	r1, [pc, #60]	@ (8022fac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8022f6e:	4810      	ldr	r0, [pc, #64]	@ (8022fb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022f70:	f005 ffb1 	bl	8028ed6 <__aeabi_atexit>
 8022f74:	4c0f      	ldr	r4, [pc, #60]	@ (8022fb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8022f76:	7823      	ldrb	r3, [r4, #0]
 8022f78:	f3bf 8f5b 	dmb	ish
 8022f7c:	07db      	lsls	r3, r3, #31
 8022f7e:	d40b      	bmi.n	8022f98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022f80:	4620      	mov	r0, r4
 8022f82:	f005 ffaf 	bl	8028ee4 <__cxa_guard_acquire>
 8022f86:	b138      	cbz	r0, 8022f98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022f88:	4620      	mov	r0, r4
 8022f8a:	f005 ffb7 	bl	8028efc <__cxa_guard_release>
 8022f8e:	4a06      	ldr	r2, [pc, #24]	@ (8022fa8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022f90:	4909      	ldr	r1, [pc, #36]	@ (8022fb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8022f92:	480a      	ldr	r0, [pc, #40]	@ (8022fbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022f94:	f005 ff9f 	bl	8028ed6 <__aeabi_atexit>
 8022f98:	4b05      	ldr	r3, [pc, #20]	@ (8022fb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022f9a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8022f9c:	4b07      	ldr	r3, [pc, #28]	@ (8022fbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022f9e:	632b      	str	r3, [r5, #48]	@ 0x30
 8022fa0:	bd38      	pop	{r3, r4, r5, pc}
 8022fa2:	bf00      	nop
 8022fa4:	24062264 	.word	0x24062264
 8022fa8:	24000000 	.word	0x24000000
 8022fac:	0801ffc5 	.word	0x0801ffc5
 8022fb0:	24000090 	.word	0x24000090
 8022fb4:	24062268 	.word	0x24062268
 8022fb8:	0801ffc3 	.word	0x0801ffc3
 8022fbc:	24000094 	.word	0x24000094

08022fc0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8022fc0:	b510      	push	{r4, lr}
 8022fc2:	4604      	mov	r4, r0
 8022fc4:	f7ff ff88 	bl	8022ed8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8022fc8:	4620      	mov	r0, r4
 8022fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fce:	f7ff bfbd 	b.w	8022f4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08022fd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022fd4:	b538      	push	{r3, r4, r5, lr}
 8022fd6:	4c15      	ldr	r4, [pc, #84]	@ (802302c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022fd8:	4605      	mov	r5, r0
 8022fda:	7823      	ldrb	r3, [r4, #0]
 8022fdc:	f3bf 8f5b 	dmb	ish
 8022fe0:	07da      	lsls	r2, r3, #31
 8022fe2:	d40b      	bmi.n	8022ffc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022fe4:	4620      	mov	r0, r4
 8022fe6:	f005 ff7d 	bl	8028ee4 <__cxa_guard_acquire>
 8022fea:	b138      	cbz	r0, 8022ffc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022fec:	4620      	mov	r0, r4
 8022fee:	f005 ff85 	bl	8028efc <__cxa_guard_release>
 8022ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8023030 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022ff4:	490f      	ldr	r1, [pc, #60]	@ (8023034 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022ff6:	4810      	ldr	r0, [pc, #64]	@ (8023038 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022ff8:	f005 ff6d 	bl	8028ed6 <__aeabi_atexit>
 8022ffc:	4c0f      	ldr	r4, [pc, #60]	@ (802303c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022ffe:	7823      	ldrb	r3, [r4, #0]
 8023000:	f3bf 8f5b 	dmb	ish
 8023004:	07db      	lsls	r3, r3, #31
 8023006:	d40b      	bmi.n	8023020 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023008:	4620      	mov	r0, r4
 802300a:	f005 ff6b 	bl	8028ee4 <__cxa_guard_acquire>
 802300e:	b138      	cbz	r0, 8023020 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023010:	4620      	mov	r0, r4
 8023012:	f005 ff73 	bl	8028efc <__cxa_guard_release>
 8023016:	4a06      	ldr	r2, [pc, #24]	@ (8023030 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023018:	4909      	ldr	r1, [pc, #36]	@ (8023040 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802301a:	480a      	ldr	r0, [pc, #40]	@ (8023044 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802301c:	f005 ff5b 	bl	8028ed6 <__aeabi_atexit>
 8023020:	4b05      	ldr	r3, [pc, #20]	@ (8023038 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023022:	646b      	str	r3, [r5, #68]	@ 0x44
 8023024:	4b07      	ldr	r3, [pc, #28]	@ (8023044 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023026:	64ab      	str	r3, [r5, #72]	@ 0x48
 8023028:	bd38      	pop	{r3, r4, r5, pc}
 802302a:	bf00      	nop
 802302c:	24062294 	.word	0x24062294
 8023030:	24000000 	.word	0x24000000
 8023034:	0801ffb9 	.word	0x0801ffb9
 8023038:	240000c0 	.word	0x240000c0
 802303c:	24062298 	.word	0x24062298
 8023040:	0801ffb7 	.word	0x0801ffb7
 8023044:	240000c4 	.word	0x240000c4

08023048 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023048:	b538      	push	{r3, r4, r5, lr}
 802304a:	4c15      	ldr	r4, [pc, #84]	@ (80230a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802304c:	4605      	mov	r5, r0
 802304e:	7823      	ldrb	r3, [r4, #0]
 8023050:	f3bf 8f5b 	dmb	ish
 8023054:	07da      	lsls	r2, r3, #31
 8023056:	d40b      	bmi.n	8023070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023058:	4620      	mov	r0, r4
 802305a:	f005 ff43 	bl	8028ee4 <__cxa_guard_acquire>
 802305e:	b138      	cbz	r0, 8023070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023060:	4620      	mov	r0, r4
 8023062:	f005 ff4b 	bl	8028efc <__cxa_guard_release>
 8023066:	4a0f      	ldr	r2, [pc, #60]	@ (80230a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023068:	490f      	ldr	r1, [pc, #60]	@ (80230a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802306a:	4810      	ldr	r0, [pc, #64]	@ (80230ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802306c:	f005 ff33 	bl	8028ed6 <__aeabi_atexit>
 8023070:	4c0f      	ldr	r4, [pc, #60]	@ (80230b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023072:	7823      	ldrb	r3, [r4, #0]
 8023074:	f3bf 8f5b 	dmb	ish
 8023078:	07db      	lsls	r3, r3, #31
 802307a:	d40b      	bmi.n	8023094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802307c:	4620      	mov	r0, r4
 802307e:	f005 ff31 	bl	8028ee4 <__cxa_guard_acquire>
 8023082:	b138      	cbz	r0, 8023094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023084:	4620      	mov	r0, r4
 8023086:	f005 ff39 	bl	8028efc <__cxa_guard_release>
 802308a:	4a06      	ldr	r2, [pc, #24]	@ (80230a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802308c:	4909      	ldr	r1, [pc, #36]	@ (80230b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802308e:	480a      	ldr	r0, [pc, #40]	@ (80230b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023090:	f005 ff21 	bl	8028ed6 <__aeabi_atexit>
 8023094:	4b05      	ldr	r3, [pc, #20]	@ (80230ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023096:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023098:	4b07      	ldr	r3, [pc, #28]	@ (80230b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802309a:	642b      	str	r3, [r5, #64]	@ 0x40
 802309c:	bd38      	pop	{r3, r4, r5, pc}
 802309e:	bf00      	nop
 80230a0:	24062274 	.word	0x24062274
 80230a4:	24000000 	.word	0x24000000
 80230a8:	0801ffbd 	.word	0x0801ffbd
 80230ac:	240000a0 	.word	0x240000a0
 80230b0:	24062278 	.word	0x24062278
 80230b4:	0801ffbb 	.word	0x0801ffbb
 80230b8:	240000a4 	.word	0x240000a4

080230bc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80230bc:	b510      	push	{r4, lr}
 80230be:	4604      	mov	r4, r0
 80230c0:	f7ff ff88 	bl	8022fd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80230c4:	4620      	mov	r0, r4
 80230c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230ca:	f7ff bfbd 	b.w	8023048 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080230d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80230d0:	b538      	push	{r3, r4, r5, lr}
 80230d2:	4c15      	ldr	r4, [pc, #84]	@ (8023128 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80230d4:	4605      	mov	r5, r0
 80230d6:	7823      	ldrb	r3, [r4, #0]
 80230d8:	f3bf 8f5b 	dmb	ish
 80230dc:	07da      	lsls	r2, r3, #31
 80230de:	d40b      	bmi.n	80230f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80230e0:	4620      	mov	r0, r4
 80230e2:	f005 feff 	bl	8028ee4 <__cxa_guard_acquire>
 80230e6:	b138      	cbz	r0, 80230f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80230e8:	4620      	mov	r0, r4
 80230ea:	f005 ff07 	bl	8028efc <__cxa_guard_release>
 80230ee:	4a0f      	ldr	r2, [pc, #60]	@ (802312c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80230f0:	490f      	ldr	r1, [pc, #60]	@ (8023130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80230f2:	4810      	ldr	r0, [pc, #64]	@ (8023134 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80230f4:	f005 feef 	bl	8028ed6 <__aeabi_atexit>
 80230f8:	4c0f      	ldr	r4, [pc, #60]	@ (8023138 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80230fa:	7823      	ldrb	r3, [r4, #0]
 80230fc:	f3bf 8f5b 	dmb	ish
 8023100:	07db      	lsls	r3, r3, #31
 8023102:	d40b      	bmi.n	802311c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023104:	4620      	mov	r0, r4
 8023106:	f005 feed 	bl	8028ee4 <__cxa_guard_acquire>
 802310a:	b138      	cbz	r0, 802311c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802310c:	4620      	mov	r0, r4
 802310e:	f005 fef5 	bl	8028efc <__cxa_guard_release>
 8023112:	4a06      	ldr	r2, [pc, #24]	@ (802312c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023114:	4909      	ldr	r1, [pc, #36]	@ (802313c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023116:	480a      	ldr	r0, [pc, #40]	@ (8023140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023118:	f005 fedd 	bl	8028ed6 <__aeabi_atexit>
 802311c:	4b05      	ldr	r3, [pc, #20]	@ (8023134 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802311e:	656b      	str	r3, [r5, #84]	@ 0x54
 8023120:	4b07      	ldr	r3, [pc, #28]	@ (8023140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023122:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023124:	bd38      	pop	{r3, r4, r5, pc}
 8023126:	bf00      	nop
 8023128:	2406226c 	.word	0x2406226c
 802312c:	24000000 	.word	0x24000000
 8023130:	0801ffb1 	.word	0x0801ffb1
 8023134:	24000098 	.word	0x24000098
 8023138:	24062270 	.word	0x24062270
 802313c:	0801ffaf 	.word	0x0801ffaf
 8023140:	2400009c 	.word	0x2400009c

08023144 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023144:	b538      	push	{r3, r4, r5, lr}
 8023146:	4c15      	ldr	r4, [pc, #84]	@ (802319c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023148:	4605      	mov	r5, r0
 802314a:	7823      	ldrb	r3, [r4, #0]
 802314c:	f3bf 8f5b 	dmb	ish
 8023150:	07da      	lsls	r2, r3, #31
 8023152:	d40b      	bmi.n	802316c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023154:	4620      	mov	r0, r4
 8023156:	f005 fec5 	bl	8028ee4 <__cxa_guard_acquire>
 802315a:	b138      	cbz	r0, 802316c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802315c:	4620      	mov	r0, r4
 802315e:	f005 fecd 	bl	8028efc <__cxa_guard_release>
 8023162:	4a0f      	ldr	r2, [pc, #60]	@ (80231a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023164:	490f      	ldr	r1, [pc, #60]	@ (80231a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023166:	4810      	ldr	r0, [pc, #64]	@ (80231a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023168:	f005 feb5 	bl	8028ed6 <__aeabi_atexit>
 802316c:	4c0f      	ldr	r4, [pc, #60]	@ (80231ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802316e:	7823      	ldrb	r3, [r4, #0]
 8023170:	f3bf 8f5b 	dmb	ish
 8023174:	07db      	lsls	r3, r3, #31
 8023176:	d40b      	bmi.n	8023190 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023178:	4620      	mov	r0, r4
 802317a:	f005 feb3 	bl	8028ee4 <__cxa_guard_acquire>
 802317e:	b138      	cbz	r0, 8023190 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023180:	4620      	mov	r0, r4
 8023182:	f005 febb 	bl	8028efc <__cxa_guard_release>
 8023186:	4a06      	ldr	r2, [pc, #24]	@ (80231a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023188:	4909      	ldr	r1, [pc, #36]	@ (80231b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802318a:	480a      	ldr	r0, [pc, #40]	@ (80231b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802318c:	f005 fea3 	bl	8028ed6 <__aeabi_atexit>
 8023190:	4b05      	ldr	r3, [pc, #20]	@ (80231a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023192:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8023194:	4b07      	ldr	r3, [pc, #28]	@ (80231b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023196:	652b      	str	r3, [r5, #80]	@ 0x50
 8023198:	bd38      	pop	{r3, r4, r5, pc}
 802319a:	bf00      	nop
 802319c:	2406225c 	.word	0x2406225c
 80231a0:	24000000 	.word	0x24000000
 80231a4:	0801ffb5 	.word	0x0801ffb5
 80231a8:	24000088 	.word	0x24000088
 80231ac:	24062260 	.word	0x24062260
 80231b0:	0801ffb3 	.word	0x0801ffb3
 80231b4:	2400008c 	.word	0x2400008c

080231b8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80231b8:	b510      	push	{r4, lr}
 80231ba:	4604      	mov	r4, r0
 80231bc:	f7ff ff88 	bl	80230d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80231c0:	4620      	mov	r0, r4
 80231c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231c6:	f7ff bfbd 	b.w	8023144 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080231ca <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80231ca:	b510      	push	{r4, lr}
 80231cc:	4604      	mov	r4, r0
 80231ce:	f7ff fff3 	bl	80231b8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80231d2:	4620      	mov	r0, r4
 80231d4:	f7ff ff72 	bl	80230bc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80231d8:	4620      	mov	r0, r4
 80231da:	f7ff fe73 	bl	8022ec4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80231de:	4620      	mov	r0, r4
 80231e0:	f7ff fdf2 	bl	8022dc8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80231e4:	4620      	mov	r0, r4
 80231e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231ea:	f7ff bee9 	b.w	8022fc0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080231f0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 80231f0:	b538      	push	{r3, r4, r5, lr}
 80231f2:	4c0b      	ldr	r4, [pc, #44]	@ (8023220 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 80231f4:	4605      	mov	r5, r0
 80231f6:	7823      	ldrb	r3, [r4, #0]
 80231f8:	f3bf 8f5b 	dmb	ish
 80231fc:	07db      	lsls	r3, r3, #31
 80231fe:	d40b      	bmi.n	8023218 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8023200:	4620      	mov	r0, r4
 8023202:	f005 fe6f 	bl	8028ee4 <__cxa_guard_acquire>
 8023206:	b138      	cbz	r0, 8023218 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8023208:	4620      	mov	r0, r4
 802320a:	f005 fe77 	bl	8028efc <__cxa_guard_release>
 802320e:	4a05      	ldr	r2, [pc, #20]	@ (8023224 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8023210:	4905      	ldr	r1, [pc, #20]	@ (8023228 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8023212:	4806      	ldr	r0, [pc, #24]	@ (802322c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023214:	f005 fe5f 	bl	8028ed6 <__aeabi_atexit>
 8023218:	4b04      	ldr	r3, [pc, #16]	@ (802322c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 802321a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 802321c:	bd38      	pop	{r3, r4, r5, pc}
 802321e:	bf00      	nop
 8023220:	24062250 	.word	0x24062250
 8023224:	24000000 	.word	0x24000000
 8023228:	0801ffad 	.word	0x0801ffad
 802322c:	24000080 	.word	0x24000080

08023230 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8023230:	b538      	push	{r3, r4, r5, lr}
 8023232:	4c0b      	ldr	r4, [pc, #44]	@ (8023260 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8023234:	4605      	mov	r5, r0
 8023236:	7823      	ldrb	r3, [r4, #0]
 8023238:	f3bf 8f5b 	dmb	ish
 802323c:	07db      	lsls	r3, r3, #31
 802323e:	d40b      	bmi.n	8023258 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023240:	4620      	mov	r0, r4
 8023242:	f005 fe4f 	bl	8028ee4 <__cxa_guard_acquire>
 8023246:	b138      	cbz	r0, 8023258 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023248:	4620      	mov	r0, r4
 802324a:	f005 fe57 	bl	8028efc <__cxa_guard_release>
 802324e:	4a05      	ldr	r2, [pc, #20]	@ (8023264 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8023250:	4905      	ldr	r1, [pc, #20]	@ (8023268 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8023252:	4806      	ldr	r0, [pc, #24]	@ (802326c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023254:	f005 fe3f 	bl	8028ed6 <__aeabi_atexit>
 8023258:	4b04      	ldr	r3, [pc, #16]	@ (802326c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 802325a:	662b      	str	r3, [r5, #96]	@ 0x60
 802325c:	bd38      	pop	{r3, r4, r5, pc}
 802325e:	bf00      	nop
 8023260:	24062254 	.word	0x24062254
 8023264:	24000000 	.word	0x24000000
 8023268:	0801ffab 	.word	0x0801ffab
 802326c:	24000084 	.word	0x24000084

08023270 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8023270:	b570      	push	{r4, r5, r6, lr}
 8023272:	4d0c      	ldr	r5, [pc, #48]	@ (80232a4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023274:	4606      	mov	r6, r0
 8023276:	4c0c      	ldr	r4, [pc, #48]	@ (80232a8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023278:	782b      	ldrb	r3, [r5, #0]
 802327a:	f3bf 8f5b 	dmb	ish
 802327e:	f013 0f01 	tst.w	r3, #1
 8023282:	d10d      	bne.n	80232a0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023284:	4628      	mov	r0, r5
 8023286:	f005 fe2d 	bl	8028ee4 <__cxa_guard_acquire>
 802328a:	b148      	cbz	r0, 80232a0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 802328c:	4b07      	ldr	r3, [pc, #28]	@ (80232ac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 802328e:	4628      	mov	r0, r5
 8023290:	6023      	str	r3, [r4, #0]
 8023292:	f005 fe33 	bl	8028efc <__cxa_guard_release>
 8023296:	4a06      	ldr	r2, [pc, #24]	@ (80232b0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023298:	4620      	mov	r0, r4
 802329a:	4906      	ldr	r1, [pc, #24]	@ (80232b4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 802329c:	f005 fe1b 	bl	8028ed6 <__aeabi_atexit>
 80232a0:	6674      	str	r4, [r6, #100]	@ 0x64
 80232a2:	bd70      	pop	{r4, r5, r6, pc}
 80232a4:	24062258 	.word	0x24062258
 80232a8:	240623b0 	.word	0x240623b0
 80232ac:	0802e5a0 	.word	0x0802e5a0
 80232b0:	24000000 	.word	0x24000000
 80232b4:	0801ffa9 	.word	0x0801ffa9

080232b8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 80232b8:	b510      	push	{r4, lr}
 80232ba:	4604      	mov	r4, r0
 80232bc:	f7ff ff98 	bl	80231f0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 80232c0:	4620      	mov	r0, r4
 80232c2:	f7ff ffb5 	bl	8023230 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 80232c6:	4620      	mov	r0, r4
 80232c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80232cc:	f7ff bfd0 	b.w	8023270 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

080232d0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 80232d0:	b570      	push	{r4, r5, r6, lr}
 80232d2:	4d0c      	ldr	r5, [pc, #48]	@ (8023304 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 80232d4:	4606      	mov	r6, r0
 80232d6:	4c0c      	ldr	r4, [pc, #48]	@ (8023308 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 80232d8:	782b      	ldrb	r3, [r5, #0]
 80232da:	f3bf 8f5b 	dmb	ish
 80232de:	f013 0f01 	tst.w	r3, #1
 80232e2:	d10d      	bne.n	8023300 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 80232e4:	4628      	mov	r0, r5
 80232e6:	f005 fdfd 	bl	8028ee4 <__cxa_guard_acquire>
 80232ea:	b148      	cbz	r0, 8023300 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 80232ec:	4b07      	ldr	r3, [pc, #28]	@ (802330c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 80232ee:	4628      	mov	r0, r5
 80232f0:	6023      	str	r3, [r4, #0]
 80232f2:	f005 fe03 	bl	8028efc <__cxa_guard_release>
 80232f6:	4a06      	ldr	r2, [pc, #24]	@ (8023310 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 80232f8:	4620      	mov	r0, r4
 80232fa:	4906      	ldr	r1, [pc, #24]	@ (8023314 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 80232fc:	f005 fdeb 	bl	8028ed6 <__aeabi_atexit>
 8023300:	66b4      	str	r4, [r6, #104]	@ 0x68
 8023302:	bd70      	pop	{r4, r5, r6, pc}
 8023304:	2406224c 	.word	0x2406224c
 8023308:	240622ac 	.word	0x240622ac
 802330c:	0802e5b8 	.word	0x0802e5b8
 8023310:	24000000 	.word	0x24000000
 8023314:	0801ffa7 	.word	0x0801ffa7

08023318 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8023318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802331c:	b087      	sub	sp, #28
 802331e:	788d      	ldrb	r5, [r1, #2]
 8023320:	f891 9000 	ldrb.w	r9, [r1]
 8023324:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8023328:	9501      	str	r5, [sp, #4]
 802332a:	784d      	ldrb	r5, [r1, #1]
 802332c:	9203      	str	r2, [sp, #12]
 802332e:	9502      	str	r5, [sp, #8]
 8023330:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8023334:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8023338:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 802333c:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8023340:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8023344:	fb06 0708 	mla	r7, r6, r8, r0
 8023348:	2e00      	cmp	r6, #0
 802334a:	eb02 0a07 	add.w	sl, r2, r7
 802334e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8023352:	9d01      	ldr	r5, [sp, #4]
 8023354:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8023358:	ea45 0509 	orr.w	r5, r5, r9
 802335c:	9505      	str	r5, [sp, #20]
 802335e:	f2c0 80b2 	blt.w	80234c6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023362:	45b3      	cmp	fp, r6
 8023364:	f340 80af 	ble.w	80234c6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023368:	2800      	cmp	r0, #0
 802336a:	f2c0 80aa 	blt.w	80234c2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 802336e:	4580      	cmp	r8, r0
 8023370:	f340 80a7 	ble.w	80234c2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023374:	9a03      	ldr	r2, [sp, #12]
 8023376:	5dd7      	ldrb	r7, [r2, r7]
 8023378:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802337c:	441f      	add	r7, r3
 802337e:	1c42      	adds	r2, r0, #1
 8023380:	f100 80a4 	bmi.w	80234cc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023384:	4590      	cmp	r8, r2
 8023386:	f340 80a1 	ble.w	80234cc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 802338a:	2c00      	cmp	r4, #0
 802338c:	f000 809e 	beq.w	80234cc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023390:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8023394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023398:	441d      	add	r5, r3
 802339a:	3601      	adds	r6, #1
 802339c:	f100 809a 	bmi.w	80234d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80233a0:	45b3      	cmp	fp, r6
 80233a2:	f340 8097 	ble.w	80234d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80233a6:	f1bc 0f00 	cmp.w	ip, #0
 80233aa:	f000 8093 	beq.w	80234d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80233ae:	2800      	cmp	r0, #0
 80233b0:	f2c0 808e 	blt.w	80234d0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80233b4:	4580      	cmp	r8, r0
 80233b6:	f340 808b 	ble.w	80234d0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80233ba:	f81a 6008 	ldrb.w	r6, [sl, r8]
 80233be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80233c2:	441e      	add	r6, r3
 80233c4:	3001      	adds	r0, #1
 80233c6:	f100 8088 	bmi.w	80234da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80233ca:	4580      	cmp	r8, r0
 80233cc:	f340 8085 	ble.w	80234da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80233d0:	2c00      	cmp	r4, #0
 80233d2:	f000 8082 	beq.w	80234da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80233d6:	44d0      	add	r8, sl
 80233d8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80233dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80233e0:	4413      	add	r3, r2
 80233e2:	b2a4      	uxth	r4, r4
 80233e4:	f895 a000 	ldrb.w	sl, [r5]
 80233e8:	fa1f fc8c 	uxth.w	ip, ip
 80233ec:	fb04 fb0c 	mul.w	fp, r4, ip
 80233f0:	0124      	lsls	r4, r4, #4
 80233f2:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80233f6:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 80233fa:	eba4 040b 	sub.w	r4, r4, fp
 80233fe:	fa1f f08c 	uxth.w	r0, ip
 8023402:	b2a2      	uxth	r2, r4
 8023404:	783c      	ldrb	r4, [r7, #0]
 8023406:	eba8 0800 	sub.w	r8, r8, r0
 802340a:	fa1f fc8e 	uxth.w	ip, lr
 802340e:	fb02 fa0a 	mul.w	sl, r2, sl
 8023412:	ea6f 0e0e 	mvn.w	lr, lr
 8023416:	fa1f f888 	uxth.w	r8, r8
 802341a:	fa5f fe8e 	uxtb.w	lr, lr
 802341e:	fb08 aa04 	mla	sl, r8, r4, sl
 8023422:	7834      	ldrb	r4, [r6, #0]
 8023424:	fb19 f90e 	smulbb	r9, r9, lr
 8023428:	fb00 aa04 	mla	sl, r0, r4, sl
 802342c:	781c      	ldrb	r4, [r3, #0]
 802342e:	fb0b a404 	mla	r4, fp, r4, sl
 8023432:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023436:	fb04 990c 	mla	r9, r4, ip, r9
 802343a:	fa1f f989 	uxth.w	r9, r9
 802343e:	f109 0401 	add.w	r4, r9, #1
 8023442:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023446:	ea4f 2929 	mov.w	r9, r9, asr #8
 802344a:	f881 9000 	strb.w	r9, [r1]
 802344e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8023452:	787c      	ldrb	r4, [r7, #1]
 8023454:	fb02 f909 	mul.w	r9, r2, r9
 8023458:	fb08 9904 	mla	r9, r8, r4, r9
 802345c:	7874      	ldrb	r4, [r6, #1]
 802345e:	fb00 9904 	mla	r9, r0, r4, r9
 8023462:	785c      	ldrb	r4, [r3, #1]
 8023464:	fb0b 9404 	mla	r4, fp, r4, r9
 8023468:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 802346c:	9c02      	ldr	r4, [sp, #8]
 802346e:	fb14 f90e 	smulbb	r9, r4, lr
 8023472:	fb0a 940c 	mla	r4, sl, ip, r9
 8023476:	b2a4      	uxth	r4, r4
 8023478:	f104 0901 	add.w	r9, r4, #1
 802347c:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8023480:	1224      	asrs	r4, r4, #8
 8023482:	704c      	strb	r4, [r1, #1]
 8023484:	78ad      	ldrb	r5, [r5, #2]
 8023486:	78bc      	ldrb	r4, [r7, #2]
 8023488:	436a      	muls	r2, r5
 802348a:	789b      	ldrb	r3, [r3, #2]
 802348c:	fb08 2204 	mla	r2, r8, r4, r2
 8023490:	78b4      	ldrb	r4, [r6, #2]
 8023492:	fb00 2004 	mla	r0, r0, r4, r2
 8023496:	fb0b 0b03 	mla	fp, fp, r3, r0
 802349a:	9b01      	ldr	r3, [sp, #4]
 802349c:	fb13 fe0e 	smulbb	lr, r3, lr
 80234a0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80234a4:	fb0b ec0c 	mla	ip, fp, ip, lr
 80234a8:	fa1f fc8c 	uxth.w	ip, ip
 80234ac:	f10c 0e01 	add.w	lr, ip, #1
 80234b0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80234b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80234b8:	f881 c002 	strb.w	ip, [r1, #2]
 80234bc:	b007      	add	sp, #28
 80234be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234c2:	af05      	add	r7, sp, #20
 80234c4:	e75b      	b.n	802337e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 80234c6:	ad05      	add	r5, sp, #20
 80234c8:	462f      	mov	r7, r5
 80234ca:	e766      	b.n	802339a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80234cc:	ad05      	add	r5, sp, #20
 80234ce:	e764      	b.n	802339a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80234d0:	ae05      	add	r6, sp, #20
 80234d2:	e777      	b.n	80233c4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 80234d4:	ab05      	add	r3, sp, #20
 80234d6:	461e      	mov	r6, r3
 80234d8:	e783      	b.n	80233e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 80234da:	ab05      	add	r3, sp, #20
 80234dc:	e781      	b.n	80233e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

080234de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80234de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234e2:	b093      	sub	sp, #76	@ 0x4c
 80234e4:	9210      	str	r2, [sp, #64]	@ 0x40
 80234e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80234e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80234ea:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 80234ee:	9011      	str	r0, [sp, #68]	@ 0x44
 80234f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80234f2:	6850      	ldr	r0, [r2, #4]
 80234f4:	910d      	str	r1, [sp, #52]	@ 0x34
 80234f6:	6812      	ldr	r2, [r2, #0]
 80234f8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80234fc:	fb00 1303 	mla	r3, r0, r3, r1
 8023500:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023504:	18d3      	adds	r3, r2, r3
 8023506:	930a      	str	r3, [sp, #40]	@ 0x28
 8023508:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802350a:	681b      	ldr	r3, [r3, #0]
 802350c:	930c      	str	r3, [sp, #48]	@ 0x30
 802350e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023510:	685c      	ldr	r4, [r3, #4]
 8023512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023514:	3404      	adds	r4, #4
 8023516:	43db      	mvns	r3, r3
 8023518:	b2db      	uxtb	r3, r3
 802351a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802351c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802351e:	2b00      	cmp	r3, #0
 8023520:	dc03      	bgt.n	802352a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023522:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023524:	2b00      	cmp	r3, #0
 8023526:	f340 8250 	ble.w	80239ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802352a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802352c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023530:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023534:	1e48      	subs	r0, r1, #1
 8023536:	1e55      	subs	r5, r2, #1
 8023538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802353a:	2b00      	cmp	r3, #0
 802353c:	f340 80ee 	ble.w	802371c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8023540:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8023542:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023544:	1436      	asrs	r6, r6, #16
 8023546:	ea4f 4323 	mov.w	r3, r3, asr #16
 802354a:	d406      	bmi.n	802355a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802354c:	4286      	cmp	r6, r0
 802354e:	da04      	bge.n	802355a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023550:	2b00      	cmp	r3, #0
 8023552:	db02      	blt.n	802355a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023554:	42ab      	cmp	r3, r5
 8023556:	f2c0 80e2 	blt.w	802371e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802355a:	3601      	adds	r6, #1
 802355c:	f100 80cf 	bmi.w	80236fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023560:	42b1      	cmp	r1, r6
 8023562:	f2c0 80cc 	blt.w	80236fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023566:	3301      	adds	r3, #1
 8023568:	f100 80c9 	bmi.w	80236fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802356c:	429a      	cmp	r2, r3
 802356e:	f2c0 80c6 	blt.w	80236fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023572:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 8023576:	f1bb 0f00 	cmp.w	fp, #0
 802357a:	f340 80f1 	ble.w	8023760 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802357e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023580:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023582:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8023584:	141d      	asrs	r5, r3, #16
 8023586:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023588:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802358c:	68c7      	ldr	r7, [r0, #12]
 802358e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023590:	1418      	asrs	r0, r3, #16
 8023592:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8023596:	6892      	ldr	r2, [r2, #8]
 8023598:	f100 8137 	bmi.w	802380a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802359c:	f102 3cff 	add.w	ip, r2, #4294967295
 80235a0:	4560      	cmp	r0, ip
 80235a2:	f280 8132 	bge.w	802380a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80235a6:	2d00      	cmp	r5, #0
 80235a8:	f2c0 812f 	blt.w	802380a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80235ac:	f107 3cff 	add.w	ip, r7, #4294967295
 80235b0:	4565      	cmp	r5, ip
 80235b2:	f280 812a 	bge.w	802380a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80235b6:	b212      	sxth	r2, r2
 80235b8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80235ba:	fb05 0002 	mla	r0, r5, r2, r0
 80235be:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80235c0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80235c4:	4405      	add	r5, r0
 80235c6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80235ca:	eb04 0e0c 	add.w	lr, r4, ip
 80235ce:	f1b8 0f00 	cmp.w	r8, #0
 80235d2:	f000 810c 	beq.w	80237ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80235d6:	786f      	ldrb	r7, [r5, #1]
 80235d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80235dc:	4427      	add	r7, r4
 80235de:	2900      	cmp	r1, #0
 80235e0:	f000 810d 	beq.w	80237fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80235e4:	18a8      	adds	r0, r5, r2
 80235e6:	5caa      	ldrb	r2, [r5, r2]
 80235e8:	7840      	ldrb	r0, [r0, #1]
 80235ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80235ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80235f2:	4422      	add	r2, r4
 80235f4:	4420      	add	r0, r4
 80235f6:	fa1f f388 	uxth.w	r3, r8
 80235fa:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80235fe:	b289      	uxth	r1, r1
 8023600:	f897 c000 	ldrb.w	ip, [r7]
 8023604:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8023608:	fb03 f901 	mul.w	r9, r3, r1
 802360c:	011b      	lsls	r3, r3, #4
 802360e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023612:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8023616:	eba3 0309 	sub.w	r3, r3, r9
 802361a:	b289      	uxth	r1, r1
 802361c:	b29b      	uxth	r3, r3
 802361e:	eba8 0801 	sub.w	r8, r8, r1
 8023622:	fb03 fc0c 	mul.w	ip, r3, ip
 8023626:	fa1f f888 	uxth.w	r8, r8
 802362a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802362c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802362e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8023632:	f892 a000 	ldrb.w	sl, [r2]
 8023636:	fb01 cc0a 	mla	ip, r1, sl, ip
 802363a:	f890 a000 	ldrb.w	sl, [r0]
 802363e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8023642:	f896 a000 	ldrb.w	sl, [r6]
 8023646:	fb1a fa03 	smulbb	sl, sl, r3
 802364a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802364e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023650:	fb0c ac05 	mla	ip, ip, r5, sl
 8023654:	fa1f fc8c 	uxth.w	ip, ip
 8023658:	f10c 0a01 	add.w	sl, ip, #1
 802365c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8023660:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023664:	f886 a000 	strb.w	sl, [r6]
 8023668:	f897 c001 	ldrb.w	ip, [r7, #1]
 802366c:	f89e a001 	ldrb.w	sl, [lr, #1]
 8023670:	fb03 fc0c 	mul.w	ip, r3, ip
 8023674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023676:	fb08 cc0a 	mla	ip, r8, sl, ip
 802367a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802367e:	fb01 cc0a 	mla	ip, r1, sl, ip
 8023682:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023686:	fb09 cc0a 	mla	ip, r9, sl, ip
 802368a:	f896 a001 	ldrb.w	sl, [r6, #1]
 802368e:	fb1a fa03 	smulbb	sl, sl, r3
 8023692:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023698:	fb0c ac05 	mla	ip, ip, r5, sl
 802369c:	fa1f fc8c 	uxth.w	ip, ip
 80236a0:	f10c 0a01 	add.w	sl, ip, #1
 80236a4:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80236a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80236ac:	f886 c001 	strb.w	ip, [r6, #1]
 80236b0:	78bf      	ldrb	r7, [r7, #2]
 80236b2:	f89e c002 	ldrb.w	ip, [lr, #2]
 80236b6:	437b      	muls	r3, r7
 80236b8:	fb08 330c 	mla	r3, r8, ip, r3
 80236bc:	f892 c002 	ldrb.w	ip, [r2, #2]
 80236c0:	7882      	ldrb	r2, [r0, #2]
 80236c2:	fb01 310c 	mla	r1, r1, ip, r3
 80236c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80236c8:	fb09 1902 	mla	r9, r9, r2, r1
 80236cc:	78b1      	ldrb	r1, [r6, #2]
 80236ce:	fb11 f103 	smulbb	r1, r1, r3
 80236d2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80236d6:	fb09 1505 	mla	r5, r9, r5, r1
 80236da:	b2ad      	uxth	r5, r5
 80236dc:	1c6b      	adds	r3, r5, #1
 80236de:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80236e2:	122d      	asrs	r5, r5, #8
 80236e4:	70b5      	strb	r5, [r6, #2]
 80236e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80236e8:	3603      	adds	r6, #3
 80236ea:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80236ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80236f0:	4413      	add	r3, r2
 80236f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80236f4:	931d      	str	r3, [sp, #116]	@ 0x74
 80236f6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80236f8:	4413      	add	r3, r2
 80236fa:	931e      	str	r3, [sp, #120]	@ 0x78
 80236fc:	e73b      	b.n	8023576 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80236fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023700:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8023702:	4433      	add	r3, r6
 8023704:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023706:	931d      	str	r3, [sp, #116]	@ 0x74
 8023708:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802370a:	4433      	add	r3, r6
 802370c:	931e      	str	r3, [sp, #120]	@ 0x78
 802370e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023710:	3b01      	subs	r3, #1
 8023712:	9309      	str	r3, [sp, #36]	@ 0x24
 8023714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023716:	3303      	adds	r3, #3
 8023718:	930a      	str	r3, [sp, #40]	@ 0x28
 802371a:	e70d      	b.n	8023538 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802371c:	d028      	beq.n	8023770 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802371e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023720:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8023722:	3b01      	subs	r3, #1
 8023724:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8023726:	fb00 5003 	mla	r0, r0, r3, r5
 802372a:	1400      	asrs	r0, r0, #16
 802372c:	f53f af21 	bmi.w	8023572 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023730:	3901      	subs	r1, #1
 8023732:	4288      	cmp	r0, r1
 8023734:	f6bf af1d 	bge.w	8023572 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023738:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802373a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802373c:	fb01 0303 	mla	r3, r1, r3, r0
 8023740:	141b      	asrs	r3, r3, #16
 8023742:	f53f af16 	bmi.w	8023572 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023746:	3a01      	subs	r2, #1
 8023748:	4293      	cmp	r3, r2
 802374a:	f6bf af12 	bge.w	8023572 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802374e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023750:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8023754:	1cdf      	adds	r7, r3, #3
 8023756:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 802375a:	f1b9 0f00 	cmp.w	r9, #0
 802375e:	dc73      	bgt.n	8023848 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023764:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802376c:	441a      	add	r2, r3
 802376e:	920a      	str	r2, [sp, #40]	@ 0x28
 8023770:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023772:	2b00      	cmp	r3, #0
 8023774:	f340 8129 	ble.w	80239ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8023778:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802377c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802377e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023782:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023786:	eef0 6a62 	vmov.f32	s13, s5
 802378a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802378e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023792:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023796:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 802379a:	eef0 6a43 	vmov.f32	s13, s6
 802379e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237a2:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80237a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80237aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80237ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80237b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80237b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80237ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80237be:	ee12 2a90 	vmov	r2, s5
 80237c2:	eef0 2a47 	vmov.f32	s5, s14
 80237c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80237ca:	ee13 2a10 	vmov	r2, s6
 80237ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 80237d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80237d2:	eeb0 3a67 	vmov.f32	s6, s15
 80237d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80237da:	9320      	str	r3, [sp, #128]	@ 0x80
 80237dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80237de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80237e0:	3b01      	subs	r3, #1
 80237e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80237e4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80237e6:	bf08      	it	eq
 80237e8:	4613      	moveq	r3, r2
 80237ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80237ec:	e696      	b.n	802351c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80237ee:	b149      	cbz	r1, 8023804 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80237f0:	5caa      	ldrb	r2, [r5, r2]
 80237f2:	4670      	mov	r0, lr
 80237f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80237f8:	4422      	add	r2, r4
 80237fa:	4677      	mov	r7, lr
 80237fc:	e6fb      	b.n	80235f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80237fe:	4670      	mov	r0, lr
 8023800:	4672      	mov	r2, lr
 8023802:	e6f8      	b.n	80235f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023804:	4670      	mov	r0, lr
 8023806:	4672      	mov	r2, lr
 8023808:	e7f7      	b.n	80237fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802380a:	f110 0c01 	adds.w	ip, r0, #1
 802380e:	f53f af6a 	bmi.w	80236e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023812:	4562      	cmp	r2, ip
 8023814:	f6ff af67 	blt.w	80236e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023818:	f115 0c01 	adds.w	ip, r5, #1
 802381c:	f53f af63 	bmi.w	80236e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023820:	4567      	cmp	r7, ip
 8023822:	f6ff af60 	blt.w	80236e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023828:	b23f      	sxth	r7, r7
 802382a:	b212      	sxth	r2, r2
 802382c:	9002      	str	r0, [sp, #8]
 802382e:	9701      	str	r7, [sp, #4]
 8023830:	9200      	str	r2, [sp, #0]
 8023832:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8023834:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023836:	e9cd 1305 	strd	r1, r3, [sp, #20]
 802383a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 802383e:	4623      	mov	r3, r4
 8023840:	4631      	mov	r1, r6
 8023842:	f7ff fd69 	bl	8023318 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8023846:	e74e      	b.n	80236e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023848:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802384a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802384c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023850:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8023852:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023854:	1400      	asrs	r0, r0, #16
 8023856:	142d      	asrs	r5, r5, #16
 8023858:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802385a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802385e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023862:	fb02 5000 	mla	r0, r2, r0, r5
 8023866:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023868:	f815 e000 	ldrb.w	lr, [r5, r0]
 802386c:	eb05 0c00 	add.w	ip, r5, r0
 8023870:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023874:	eb04 060e 	add.w	r6, r4, lr
 8023878:	2b00      	cmp	r3, #0
 802387a:	f000 8097 	beq.w	80239ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802387e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023886:	4425      	add	r5, r4
 8023888:	2900      	cmp	r1, #0
 802388a:	f000 8098 	beq.w	80239be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 802388e:	eb0c 0002 	add.w	r0, ip, r2
 8023892:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023896:	7840      	ldrb	r0, [r0, #1]
 8023898:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802389c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80238a0:	4422      	add	r2, r4
 80238a2:	4420      	add	r0, r4
 80238a4:	b29b      	uxth	r3, r3
 80238a6:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80238aa:	b289      	uxth	r1, r1
 80238ac:	f895 e000 	ldrb.w	lr, [r5]
 80238b0:	3703      	adds	r7, #3
 80238b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80238b6:	fb03 f801 	mul.w	r8, r3, r1
 80238ba:	011b      	lsls	r3, r3, #4
 80238bc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80238c0:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 80238c4:	eba3 0308 	sub.w	r3, r3, r8
 80238c8:	b289      	uxth	r1, r1
 80238ca:	b29b      	uxth	r3, r3
 80238cc:	ebac 0c01 	sub.w	ip, ip, r1
 80238d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80238d4:	fa1f fc8c 	uxth.w	ip, ip
 80238d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80238da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80238dc:	fb0c ee0b 	mla	lr, ip, fp, lr
 80238e0:	f892 b000 	ldrb.w	fp, [r2]
 80238e4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80238e8:	f890 b000 	ldrb.w	fp, [r0]
 80238ec:	fb08 ee0b 	mla	lr, r8, fp, lr
 80238f0:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80238f4:	fb1b fb03 	smulbb	fp, fp, r3
 80238f8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80238fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80238fe:	fb0e be0a 	mla	lr, lr, sl, fp
 8023902:	fa1f fe8e 	uxth.w	lr, lr
 8023906:	f10e 0b01 	add.w	fp, lr, #1
 802390a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802390e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023912:	f807 ec06 	strb.w	lr, [r7, #-6]
 8023916:	f895 e001 	ldrb.w	lr, [r5, #1]
 802391a:	f896 b001 	ldrb.w	fp, [r6, #1]
 802391e:	fb03 fe0e 	mul.w	lr, r3, lr
 8023922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023924:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023928:	f892 b001 	ldrb.w	fp, [r2, #1]
 802392c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023930:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023934:	fb08 ee0b 	mla	lr, r8, fp, lr
 8023938:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802393c:	fb1b fb03 	smulbb	fp, fp, r3
 8023940:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023946:	fb0e be0a 	mla	lr, lr, sl, fp
 802394a:	fa1f fe8e 	uxth.w	lr, lr
 802394e:	f10e 0b01 	add.w	fp, lr, #1
 8023952:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8023956:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802395a:	f807 ec05 	strb.w	lr, [r7, #-5]
 802395e:	78ad      	ldrb	r5, [r5, #2]
 8023960:	78b6      	ldrb	r6, [r6, #2]
 8023962:	436b      	muls	r3, r5
 8023964:	7895      	ldrb	r5, [r2, #2]
 8023966:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023968:	fb0c 3306 	mla	r3, ip, r6, r3
 802396c:	fb01 3305 	mla	r3, r1, r5, r3
 8023970:	7885      	ldrb	r5, [r0, #2]
 8023972:	fb08 3805 	mla	r8, r8, r5, r3
 8023976:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 802397a:	fb13 f302 	smulbb	r3, r3, r2
 802397e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023982:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8023984:	fb08 380a 	mla	r8, r8, sl, r3
 8023988:	fa1f f888 	uxth.w	r8, r8
 802398c:	f108 0301 	add.w	r3, r8, #1
 8023990:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8023994:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023996:	4413      	add	r3, r2
 8023998:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802399a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802399e:	931d      	str	r3, [sp, #116]	@ 0x74
 80239a0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80239a2:	f807 8c04 	strb.w	r8, [r7, #-4]
 80239a6:	4413      	add	r3, r2
 80239a8:	931e      	str	r3, [sp, #120]	@ 0x78
 80239aa:	e6d6      	b.n	802375a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80239ac:	b151      	cbz	r1, 80239c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80239ae:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80239b2:	4630      	mov	r0, r6
 80239b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80239b8:	4422      	add	r2, r4
 80239ba:	4635      	mov	r5, r6
 80239bc:	e772      	b.n	80238a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80239be:	4630      	mov	r0, r6
 80239c0:	4632      	mov	r2, r6
 80239c2:	e76f      	b.n	80238a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80239c4:	4630      	mov	r0, r6
 80239c6:	4632      	mov	r2, r6
 80239c8:	e7f7      	b.n	80239ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80239ca:	b013      	add	sp, #76	@ 0x4c
 80239cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080239d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80239d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80239d4:	784c      	ldrb	r4, [r1, #1]
 80239d6:	f891 a002 	ldrb.w	sl, [r1, #2]
 80239da:	0224      	lsls	r4, r4, #8
 80239dc:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80239e0:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 80239e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80239e8:	f891 a000 	ldrb.w	sl, [r1]
 80239ec:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 80239f0:	ea44 040a 	orr.w	r4, r4, sl
 80239f4:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 80239f8:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 80239fc:	9401      	str	r4, [sp, #4]
 80239fe:	fb05 c70e 	mla	r7, r5, lr, ip
 8023a02:	2d00      	cmp	r5, #0
 8023a04:	eb02 0807 	add.w	r8, r2, r7
 8023a08:	db72      	blt.n	8023af0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8023a0a:	45a9      	cmp	r9, r5
 8023a0c:	dd70      	ble.n	8023af0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8023a0e:	f1bc 0f00 	cmp.w	ip, #0
 8023a12:	db6b      	blt.n	8023aec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8023a14:	45e6      	cmp	lr, ip
 8023a16:	dd69      	ble.n	8023aec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8023a18:	5dd7      	ldrb	r7, [r2, r7]
 8023a1a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023a1e:	441f      	add	r7, r3
 8023a20:	f11c 0201 	adds.w	r2, ip, #1
 8023a24:	d467      	bmi.n	8023af6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023a26:	4596      	cmp	lr, r2
 8023a28:	dd65      	ble.n	8023af6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023a2a:	2800      	cmp	r0, #0
 8023a2c:	d063      	beq.n	8023af6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023a2e:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023a32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023a36:	441c      	add	r4, r3
 8023a38:	3501      	adds	r5, #1
 8023a3a:	d460      	bmi.n	8023afe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023a3c:	45a9      	cmp	r9, r5
 8023a3e:	dd5e      	ble.n	8023afe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023a40:	2e00      	cmp	r6, #0
 8023a42:	d05c      	beq.n	8023afe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023a44:	f1bc 0f00 	cmp.w	ip, #0
 8023a48:	db57      	blt.n	8023afa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023a4a:	45e6      	cmp	lr, ip
 8023a4c:	dd55      	ble.n	8023afa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023a4e:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023a52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023a56:	441d      	add	r5, r3
 8023a58:	f11c 0201 	adds.w	r2, ip, #1
 8023a5c:	d452      	bmi.n	8023b04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023a5e:	4596      	cmp	lr, r2
 8023a60:	dd50      	ble.n	8023b04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023a62:	2800      	cmp	r0, #0
 8023a64:	d04e      	beq.n	8023b04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023a66:	44c6      	add	lr, r8
 8023a68:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023a6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a70:	4413      	add	r3, r2
 8023a72:	b280      	uxth	r0, r0
 8023a74:	f897 8000 	ldrb.w	r8, [r7]
 8023a78:	b2b2      	uxth	r2, r6
 8023a7a:	fb00 f602 	mul.w	r6, r0, r2
 8023a7e:	0100      	lsls	r0, r0, #4
 8023a80:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023a84:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8023a88:	1b80      	subs	r0, r0, r6
 8023a8a:	fa1f fc82 	uxth.w	ip, r2
 8023a8e:	b282      	uxth	r2, r0
 8023a90:	7820      	ldrb	r0, [r4, #0]
 8023a92:	ebae 0e0c 	sub.w	lr, lr, ip
 8023a96:	4350      	muls	r0, r2
 8023a98:	fa1f fe8e 	uxth.w	lr, lr
 8023a9c:	fb0e 0808 	mla	r8, lr, r8, r0
 8023aa0:	7828      	ldrb	r0, [r5, #0]
 8023aa2:	fb0c 8800 	mla	r8, ip, r0, r8
 8023aa6:	7818      	ldrb	r0, [r3, #0]
 8023aa8:	fb06 8000 	mla	r0, r6, r0, r8
 8023aac:	1200      	asrs	r0, r0, #8
 8023aae:	7008      	strb	r0, [r1, #0]
 8023ab0:	7860      	ldrb	r0, [r4, #1]
 8023ab2:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023ab6:	4350      	muls	r0, r2
 8023ab8:	fb0e 0808 	mla	r8, lr, r8, r0
 8023abc:	7868      	ldrb	r0, [r5, #1]
 8023abe:	fb0c 8800 	mla	r8, ip, r0, r8
 8023ac2:	7858      	ldrb	r0, [r3, #1]
 8023ac4:	fb06 8000 	mla	r0, r6, r0, r8
 8023ac8:	1200      	asrs	r0, r0, #8
 8023aca:	7048      	strb	r0, [r1, #1]
 8023acc:	78a0      	ldrb	r0, [r4, #2]
 8023ace:	78bf      	ldrb	r7, [r7, #2]
 8023ad0:	4350      	muls	r0, r2
 8023ad2:	78aa      	ldrb	r2, [r5, #2]
 8023ad4:	fb0e 0007 	mla	r0, lr, r7, r0
 8023ad8:	fb0c 0c02 	mla	ip, ip, r2, r0
 8023adc:	789a      	ldrb	r2, [r3, #2]
 8023ade:	fb06 c202 	mla	r2, r6, r2, ip
 8023ae2:	1212      	asrs	r2, r2, #8
 8023ae4:	708a      	strb	r2, [r1, #2]
 8023ae6:	b002      	add	sp, #8
 8023ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023aec:	af01      	add	r7, sp, #4
 8023aee:	e797      	b.n	8023a20 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8023af0:	ac01      	add	r4, sp, #4
 8023af2:	4627      	mov	r7, r4
 8023af4:	e7a0      	b.n	8023a38 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8023af6:	ac01      	add	r4, sp, #4
 8023af8:	e79e      	b.n	8023a38 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8023afa:	ad01      	add	r5, sp, #4
 8023afc:	e7ac      	b.n	8023a58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8023afe:	ab01      	add	r3, sp, #4
 8023b00:	461d      	mov	r5, r3
 8023b02:	e7b6      	b.n	8023a72 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8023b04:	ab01      	add	r3, sp, #4
 8023b06:	e7b4      	b.n	8023a72 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08023b08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b0c:	b08d      	sub	sp, #52	@ 0x34
 8023b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023b12:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8023b16:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023b18:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023b1a:	9306      	str	r3, [sp, #24]
 8023b1c:	6850      	ldr	r0, [r2, #4]
 8023b1e:	6812      	ldr	r2, [r2, #0]
 8023b20:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023b22:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 8023b26:	fb00 1303 	mla	r3, r0, r3, r1
 8023b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023b2e:	18d3      	adds	r3, r2, r3
 8023b30:	9307      	str	r3, [sp, #28]
 8023b32:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b34:	681b      	ldr	r3, [r3, #0]
 8023b36:	9308      	str	r3, [sp, #32]
 8023b38:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b3a:	685d      	ldr	r5, [r3, #4]
 8023b3c:	3504      	adds	r5, #4
 8023b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	dc03      	bgt.n	8023b4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023b46:	2b00      	cmp	r3, #0
 8023b48:	f340 81e6 	ble.w	8023f18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023b4c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b4e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b52:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b56:	1e48      	subs	r0, r1, #1
 8023b58:	1e56      	subs	r6, r2, #1
 8023b5a:	9b06      	ldr	r3, [sp, #24]
 8023b5c:	2b00      	cmp	r3, #0
 8023b5e:	f340 80bd 	ble.w	8023cdc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8023b62:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023b64:	1427      	asrs	r7, r4, #16
 8023b66:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023b6a:	d406      	bmi.n	8023b7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023b6c:	4287      	cmp	r7, r0
 8023b6e:	da04      	bge.n	8023b7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023b70:	2b00      	cmp	r3, #0
 8023b72:	db02      	blt.n	8023b7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023b74:	42b3      	cmp	r3, r6
 8023b76:	f2c0 80b2 	blt.w	8023cde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023b7a:	3701      	adds	r7, #1
 8023b7c:	f100 80a1 	bmi.w	8023cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b80:	42b9      	cmp	r1, r7
 8023b82:	f2c0 809e 	blt.w	8023cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b86:	3301      	adds	r3, #1
 8023b88:	f100 809b 	bmi.w	8023cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b8c:	429a      	cmp	r2, r3
 8023b8e:	f2c0 8098 	blt.w	8023cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b92:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8023b96:	f1bb 0f00 	cmp.w	fp, #0
 8023b9a:	f340 80bf 	ble.w	8023d1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023b9e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023ba0:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8023ba2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023ba4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023ba8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8023bac:	1420      	asrs	r0, r4, #16
 8023bae:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023bb0:	ea4f 4723 	mov.w	r7, r3, asr #16
 8023bb4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023bb8:	6892      	ldr	r2, [r2, #8]
 8023bba:	f100 8103 	bmi.w	8023dc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023bbe:	f102 3eff 	add.w	lr, r2, #4294967295
 8023bc2:	4570      	cmp	r0, lr
 8023bc4:	f280 80fe 	bge.w	8023dc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023bc8:	2f00      	cmp	r7, #0
 8023bca:	f2c0 80fb 	blt.w	8023dc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023bce:	f10c 3eff 	add.w	lr, ip, #4294967295
 8023bd2:	4577      	cmp	r7, lr
 8023bd4:	f280 80f6 	bge.w	8023dc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023bd8:	b212      	sxth	r2, r2
 8023bda:	fb07 0002 	mla	r0, r7, r2, r0
 8023bde:	9f08      	ldr	r7, [sp, #32]
 8023be0:	f817 8000 	ldrb.w	r8, [r7, r0]
 8023be4:	eb07 0e00 	add.w	lr, r7, r0
 8023be8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023bec:	eb05 0c08 	add.w	ip, r5, r8
 8023bf0:	2b00      	cmp	r3, #0
 8023bf2:	f000 80d8 	beq.w	8023da6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8023bf6:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8023bfa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023bfe:	442f      	add	r7, r5
 8023c00:	2900      	cmp	r1, #0
 8023c02:	f000 80d9 	beq.w	8023db8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023c06:	eb0e 0002 	add.w	r0, lr, r2
 8023c0a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023c0e:	7840      	ldrb	r0, [r0, #1]
 8023c10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023c18:	442a      	add	r2, r5
 8023c1a:	4428      	add	r0, r5
 8023c1c:	b29b      	uxth	r3, r3
 8023c1e:	f815 a008 	ldrb.w	sl, [r5, r8]
 8023c22:	b289      	uxth	r1, r1
 8023c24:	f897 8000 	ldrb.w	r8, [r7]
 8023c28:	fb03 f901 	mul.w	r9, r3, r1
 8023c2c:	011b      	lsls	r3, r3, #4
 8023c2e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023c32:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023c36:	eba3 0309 	sub.w	r3, r3, r9
 8023c3a:	b289      	uxth	r1, r1
 8023c3c:	b29b      	uxth	r3, r3
 8023c3e:	ebae 0e01 	sub.w	lr, lr, r1
 8023c42:	fb03 f808 	mul.w	r8, r3, r8
 8023c46:	fa1f fe8e 	uxth.w	lr, lr
 8023c4a:	fb0e 880a 	mla	r8, lr, sl, r8
 8023c4e:	f892 a000 	ldrb.w	sl, [r2]
 8023c52:	fb01 880a 	mla	r8, r1, sl, r8
 8023c56:	f890 a000 	ldrb.w	sl, [r0]
 8023c5a:	fb09 880a 	mla	r8, r9, sl, r8
 8023c5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023c62:	f886 8000 	strb.w	r8, [r6]
 8023c66:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023c6a:	f89c a001 	ldrb.w	sl, [ip, #1]
 8023c6e:	fb03 f808 	mul.w	r8, r3, r8
 8023c72:	fb0e 880a 	mla	r8, lr, sl, r8
 8023c76:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023c7a:	fb01 880a 	mla	r8, r1, sl, r8
 8023c7e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023c82:	fb09 880a 	mla	r8, r9, sl, r8
 8023c86:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023c8a:	f886 8001 	strb.w	r8, [r6, #1]
 8023c8e:	78bf      	ldrb	r7, [r7, #2]
 8023c90:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023c94:	437b      	muls	r3, r7
 8023c96:	7892      	ldrb	r2, [r2, #2]
 8023c98:	fb0e 330c 	mla	r3, lr, ip, r3
 8023c9c:	fb01 3102 	mla	r1, r1, r2, r3
 8023ca0:	7882      	ldrb	r2, [r0, #2]
 8023ca2:	fb09 1902 	mla	r9, r9, r2, r1
 8023ca6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023caa:	f886 9002 	strb.w	r9, [r6, #2]
 8023cae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023cb0:	3603      	adds	r6, #3
 8023cb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023cb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023cb8:	441c      	add	r4, r3
 8023cba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023cbc:	4413      	add	r3, r2
 8023cbe:	9318      	str	r3, [sp, #96]	@ 0x60
 8023cc0:	e769      	b.n	8023b96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023cc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023cc4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8023cc6:	441c      	add	r4, r3
 8023cc8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023cca:	443b      	add	r3, r7
 8023ccc:	9318      	str	r3, [sp, #96]	@ 0x60
 8023cce:	9b06      	ldr	r3, [sp, #24]
 8023cd0:	3b01      	subs	r3, #1
 8023cd2:	9306      	str	r3, [sp, #24]
 8023cd4:	9b07      	ldr	r3, [sp, #28]
 8023cd6:	3303      	adds	r3, #3
 8023cd8:	9307      	str	r3, [sp, #28]
 8023cda:	e73e      	b.n	8023b5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023cdc:	d026      	beq.n	8023d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023cde:	9b06      	ldr	r3, [sp, #24]
 8023ce0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8023ce2:	3b01      	subs	r3, #1
 8023ce4:	fb00 4003 	mla	r0, r0, r3, r4
 8023ce8:	1400      	asrs	r0, r0, #16
 8023cea:	f53f af52 	bmi.w	8023b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023cee:	3901      	subs	r1, #1
 8023cf0:	4288      	cmp	r0, r1
 8023cf2:	f6bf af4e 	bge.w	8023b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023cf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8023cf8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8023cfa:	fb01 0303 	mla	r3, r1, r3, r0
 8023cfe:	141b      	asrs	r3, r3, #16
 8023d00:	f53f af47 	bmi.w	8023b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023d04:	3a01      	subs	r2, #1
 8023d06:	4293      	cmp	r3, r2
 8023d08:	f6bf af43 	bge.w	8023b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023d0c:	9b07      	ldr	r3, [sp, #28]
 8023d0e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023d12:	f103 0803 	add.w	r8, r3, #3
 8023d16:	f1ba 0f00 	cmp.w	sl, #0
 8023d1a:	dc71      	bgt.n	8023e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023d1c:	9b06      	ldr	r3, [sp, #24]
 8023d1e:	9a07      	ldr	r2, [sp, #28]
 8023d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023d24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d28:	441a      	add	r2, r3
 8023d2a:	9207      	str	r2, [sp, #28]
 8023d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d2e:	2b00      	cmp	r3, #0
 8023d30:	f340 80f2 	ble.w	8023f18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023d34:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023d3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d3e:	eeb0 6a62 	vmov.f32	s12, s5
 8023d42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023d46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023d4e:	ee16 4a10 	vmov	r4, s12
 8023d52:	eeb0 6a43 	vmov.f32	s12, s6
 8023d56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023d5a:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 8023d5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023d62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023d66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023d6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023d72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023d76:	ee12 2a90 	vmov	r2, s5
 8023d7a:	eef0 2a47 	vmov.f32	s5, s14
 8023d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d82:	ee13 2a10 	vmov	r2, s6
 8023d86:	9319      	str	r3, [sp, #100]	@ 0x64
 8023d88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023d8a:	eeb0 3a67 	vmov.f32	s6, s15
 8023d8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d92:	931a      	str	r3, [sp, #104]	@ 0x68
 8023d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023d98:	3b01      	subs	r3, #1
 8023d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023d9e:	bf08      	it	eq
 8023da0:	4613      	moveq	r3, r2
 8023da2:	9306      	str	r3, [sp, #24]
 8023da4:	e6cb      	b.n	8023b3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023da6:	b151      	cbz	r1, 8023dbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8023da8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023dac:	4660      	mov	r0, ip
 8023dae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023db2:	442a      	add	r2, r5
 8023db4:	4667      	mov	r7, ip
 8023db6:	e731      	b.n	8023c1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8023db8:	4660      	mov	r0, ip
 8023dba:	4662      	mov	r2, ip
 8023dbc:	e72e      	b.n	8023c1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8023dbe:	4660      	mov	r0, ip
 8023dc0:	4662      	mov	r2, ip
 8023dc2:	e7f7      	b.n	8023db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8023dc4:	f110 0e01 	adds.w	lr, r0, #1
 8023dc8:	f53f af71 	bmi.w	8023cae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023dcc:	4572      	cmp	r2, lr
 8023dce:	f6ff af6e 	blt.w	8023cae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023dd2:	f117 0e01 	adds.w	lr, r7, #1
 8023dd6:	f53f af6a 	bmi.w	8023cae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023dda:	45f4      	cmp	ip, lr
 8023ddc:	f6ff af67 	blt.w	8023cae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023de0:	b212      	sxth	r2, r2
 8023de2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023de6:	fa0f f38c 	sxth.w	r3, ip
 8023dea:	9200      	str	r2, [sp, #0]
 8023dec:	4631      	mov	r1, r6
 8023dee:	9a08      	ldr	r2, [sp, #32]
 8023df0:	9301      	str	r3, [sp, #4]
 8023df2:	462b      	mov	r3, r5
 8023df4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8023df8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023dfa:	f7ff fde9 	bl	80239d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8023dfe:	e756      	b.n	8023cae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023e00:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023e02:	1426      	asrs	r6, r4, #16
 8023e04:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8023e06:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023e0a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023e0e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023e10:	1400      	asrs	r0, r0, #16
 8023e12:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023e16:	fb02 6000 	mla	r0, r2, r0, r6
 8023e1a:	9e08      	ldr	r6, [sp, #32]
 8023e1c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8023e20:	eb06 0c00 	add.w	ip, r6, r0
 8023e24:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023e28:	eb05 070e 	add.w	r7, r5, lr
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d064      	beq.n	8023efa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023e30:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8023e34:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023e38:	442e      	add	r6, r5
 8023e3a:	2900      	cmp	r1, #0
 8023e3c:	d066      	beq.n	8023f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8023e3e:	eb0c 0002 	add.w	r0, ip, r2
 8023e42:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023e46:	7840      	ldrb	r0, [r0, #1]
 8023e48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023e50:	442a      	add	r2, r5
 8023e52:	4428      	add	r0, r5
 8023e54:	b29b      	uxth	r3, r3
 8023e56:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8023e5a:	b289      	uxth	r1, r1
 8023e5c:	f896 e000 	ldrb.w	lr, [r6]
 8023e60:	f108 0803 	add.w	r8, r8, #3
 8023e64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023e68:	fb03 f901 	mul.w	r9, r3, r1
 8023e6c:	011b      	lsls	r3, r3, #4
 8023e6e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023e72:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8023e76:	eba3 0309 	sub.w	r3, r3, r9
 8023e7a:	b289      	uxth	r1, r1
 8023e7c:	b29b      	uxth	r3, r3
 8023e7e:	ebac 0c01 	sub.w	ip, ip, r1
 8023e82:	fb03 fe0e 	mul.w	lr, r3, lr
 8023e86:	fa1f fc8c 	uxth.w	ip, ip
 8023e8a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023e8e:	f892 b000 	ldrb.w	fp, [r2]
 8023e92:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023e96:	f890 b000 	ldrb.w	fp, [r0]
 8023e9a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023e9e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023ea2:	f808 ec06 	strb.w	lr, [r8, #-6]
 8023ea6:	f896 e001 	ldrb.w	lr, [r6, #1]
 8023eaa:	f897 b001 	ldrb.w	fp, [r7, #1]
 8023eae:	fb03 fe0e 	mul.w	lr, r3, lr
 8023eb2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023eb6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023eba:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023ebe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023ec2:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023ec6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023eca:	f808 ec05 	strb.w	lr, [r8, #-5]
 8023ece:	78b6      	ldrb	r6, [r6, #2]
 8023ed0:	78bf      	ldrb	r7, [r7, #2]
 8023ed2:	4373      	muls	r3, r6
 8023ed4:	7896      	ldrb	r6, [r2, #2]
 8023ed6:	7882      	ldrb	r2, [r0, #2]
 8023ed8:	fb0c 3307 	mla	r3, ip, r7, r3
 8023edc:	fb01 3306 	mla	r3, r1, r6, r3
 8023ee0:	fb09 3902 	mla	r9, r9, r2, r3
 8023ee4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023ee6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023ee8:	441c      	add	r4, r3
 8023eea:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023eec:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023ef0:	4413      	add	r3, r2
 8023ef2:	f808 9c04 	strb.w	r9, [r8, #-4]
 8023ef6:	9318      	str	r3, [sp, #96]	@ 0x60
 8023ef8:	e70d      	b.n	8023d16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023efa:	b151      	cbz	r1, 8023f12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8023efc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023f00:	4638      	mov	r0, r7
 8023f02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f06:	442a      	add	r2, r5
 8023f08:	463e      	mov	r6, r7
 8023f0a:	e7a3      	b.n	8023e54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023f0c:	4638      	mov	r0, r7
 8023f0e:	463a      	mov	r2, r7
 8023f10:	e7a0      	b.n	8023e54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023f12:	4638      	mov	r0, r7
 8023f14:	463a      	mov	r2, r7
 8023f16:	e7f7      	b.n	8023f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8023f18:	b00d      	add	sp, #52	@ 0x34
 8023f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023f1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8023f1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f22:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8023f26:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8023f2a:	2d00      	cmp	r5, #0
 8023f2c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8023f30:	fb05 700c 	mla	r0, r5, ip, r7
 8023f34:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8023f38:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8023f3c:	eb02 0800 	add.w	r8, r2, r0
 8023f40:	f2c0 8118 	blt.w	8024174 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8023f44:	45a9      	cmp	r9, r5
 8023f46:	f340 8115 	ble.w	8024174 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8023f4a:	2f00      	cmp	r7, #0
 8023f4c:	f2c0 8110 	blt.w	8024170 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8023f50:	45bc      	cmp	ip, r7
 8023f52:	f340 810d 	ble.w	8024170 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8023f56:	5c12      	ldrb	r2, [r2, r0]
 8023f58:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023f5c:	1c7a      	adds	r2, r7, #1
 8023f5e:	f100 810c 	bmi.w	802417a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8023f62:	4594      	cmp	ip, r2
 8023f64:	f340 8109 	ble.w	802417a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8023f68:	2c00      	cmp	r4, #0
 8023f6a:	f000 8108 	beq.w	802417e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8023f6e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023f72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023f76:	3501      	adds	r5, #1
 8023f78:	f100 8105 	bmi.w	8024186 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8023f7c:	45a9      	cmp	r9, r5
 8023f7e:	f340 8102 	ble.w	8024186 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8023f82:	f1be 0f00 	cmp.w	lr, #0
 8023f86:	f000 8101 	beq.w	802418c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8023f8a:	2f00      	cmp	r7, #0
 8023f8c:	f2c0 80f9 	blt.w	8024182 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8023f90:	45bc      	cmp	ip, r7
 8023f92:	f340 80f6 	ble.w	8024182 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8023f96:	f818 200c 	ldrb.w	r2, [r8, ip]
 8023f9a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023f9e:	3701      	adds	r7, #1
 8023fa0:	f100 80f7 	bmi.w	8024192 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8023fa4:	45bc      	cmp	ip, r7
 8023fa6:	f340 80f4 	ble.w	8024192 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8023faa:	2c00      	cmp	r4, #0
 8023fac:	f000 80f3 	beq.w	8024196 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8023fb0:	44c4      	add	ip, r8
 8023fb2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023fb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023fba:	fa1f fc84 	uxth.w	ip, r4
 8023fbe:	fa1f f48e 	uxth.w	r4, lr
 8023fc2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023fc6:	fb04 fe0c 	mul.w	lr, r4, ip
 8023fca:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8023fce:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023fd2:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8023fd6:	ebac 070e 	sub.w	r7, ip, lr
 8023fda:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8023fde:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023fe2:	b2a4      	uxth	r4, r4
 8023fe4:	b2bf      	uxth	r7, r7
 8023fe6:	1b1b      	subs	r3, r3, r4
 8023fe8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023fec:	fb07 fc0a 	mul.w	ip, r7, sl
 8023ff0:	b29b      	uxth	r3, r3
 8023ff2:	fb03 cc0b 	mla	ip, r3, fp, ip
 8023ff6:	9300      	str	r3, [sp, #0]
 8023ff8:	fb04 cc09 	mla	ip, r4, r9, ip
 8023ffc:	fb0e cc08 	mla	ip, lr, r8, ip
 8024000:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024004:	9301      	str	r3, [sp, #4]
 8024006:	2b00      	cmp	r3, #0
 8024008:	f000 80af 	beq.w	802416a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 802400c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8024010:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024014:	fb0b fc0c 	mul.w	ip, fp, ip
 8024018:	fb0b f606 	mul.w	r6, fp, r6
 802401c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024020:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024024:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8024028:	44dc      	add	ip, fp
 802402a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 802402e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024032:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024036:	fb0a fb0b 	mul.w	fp, sl, fp
 802403a:	fb0a fa00 	mul.w	sl, sl, r0
 802403e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8024042:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8024046:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802404a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802404e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024052:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024056:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802405a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802405e:	0a36      	lsrs	r6, r6, #8
 8024060:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024064:	44dc      	add	ip, fp
 8024066:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802406a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802406e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024072:	fb09 fb0b 	mul.w	fp, r9, fp
 8024076:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802407a:	fb09 f905 	mul.w	r9, r9, r5
 802407e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024082:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024086:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 802408a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802408e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024092:	fb0c fc07 	mul.w	ip, ip, r7
 8024096:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802409a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 802409e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80240a2:	4458      	add	r0, fp
 80240a4:	fb08 f505 	mul.w	r5, r8, r5
 80240a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80240ac:	fb08 f802 	mul.w	r8, r8, r2
 80240b0:	0a00      	lsrs	r0, r0, #8
 80240b2:	0a2a      	lsrs	r2, r5, #8
 80240b4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80240b8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80240bc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80240c0:	4415      	add	r5, r2
 80240c2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80240c6:	0a2d      	lsrs	r5, r5, #8
 80240c8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80240cc:	9a00      	ldr	r2, [sp, #0]
 80240ce:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80240d2:	fb03 cc02 	mla	ip, r3, r2, ip
 80240d6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80240da:	9b01      	ldr	r3, [sp, #4]
 80240dc:	fb05 c50e 	mla	r5, r5, lr, ip
 80240e0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80240e4:	fb00 5004 	mla	r0, r0, r4, r5
 80240e8:	0a00      	lsrs	r0, r0, #8
 80240ea:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 80240ee:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 80240f2:	4378      	muls	r0, r7
 80240f4:	fb02 0006 	mla	r0, r2, r6, r0
 80240f8:	fb0e 0e08 	mla	lr, lr, r8, r0
 80240fc:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8024100:	fb04 e000 	mla	r0, r4, r0, lr
 8024104:	0a00      	lsrs	r0, r0, #8
 8024106:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802410a:	4328      	orrs	r0, r5
 802410c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8024110:	b2ad      	uxth	r5, r5
 8024112:	b2c4      	uxtb	r4, r0
 8024114:	436b      	muls	r3, r5
 8024116:	fb14 f405 	smulbb	r4, r4, r5
 802411a:	1c5a      	adds	r2, r3, #1
 802411c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024120:	780b      	ldrb	r3, [r1, #0]
 8024122:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8024126:	b2d2      	uxtb	r2, r2
 8024128:	fb03 4302 	mla	r3, r3, r2, r4
 802412c:	b29b      	uxth	r3, r3
 802412e:	1c5c      	adds	r4, r3, #1
 8024130:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024134:	784c      	ldrb	r4, [r1, #1]
 8024136:	fb14 f402 	smulbb	r4, r4, r2
 802413a:	121b      	asrs	r3, r3, #8
 802413c:	700b      	strb	r3, [r1, #0]
 802413e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8024142:	fb03 4305 	mla	r3, r3, r5, r4
 8024146:	b29b      	uxth	r3, r3
 8024148:	1c5c      	adds	r4, r3, #1
 802414a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802414e:	0c04      	lsrs	r4, r0, #16
 8024150:	7888      	ldrb	r0, [r1, #2]
 8024152:	121b      	asrs	r3, r3, #8
 8024154:	fb10 f002 	smulbb	r0, r0, r2
 8024158:	704b      	strb	r3, [r1, #1]
 802415a:	fb04 0005 	mla	r0, r4, r5, r0
 802415e:	b280      	uxth	r0, r0
 8024160:	1c43      	adds	r3, r0, #1
 8024162:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024166:	1200      	asrs	r0, r0, #8
 8024168:	7088      	strb	r0, [r1, #2]
 802416a:	b003      	add	sp, #12
 802416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024170:	2600      	movs	r6, #0
 8024172:	e6f3      	b.n	8023f5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8024174:	2000      	movs	r0, #0
 8024176:	4606      	mov	r6, r0
 8024178:	e6fd      	b.n	8023f76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802417a:	2000      	movs	r0, #0
 802417c:	e6fb      	b.n	8023f76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802417e:	4620      	mov	r0, r4
 8024180:	e6f9      	b.n	8023f76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024182:	2500      	movs	r5, #0
 8024184:	e70b      	b.n	8023f9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8024186:	2200      	movs	r2, #0
 8024188:	4615      	mov	r5, r2
 802418a:	e716      	b.n	8023fba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802418c:	4672      	mov	r2, lr
 802418e:	4675      	mov	r5, lr
 8024190:	e713      	b.n	8023fba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024192:	2200      	movs	r2, #0
 8024194:	e711      	b.n	8023fba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024196:	4622      	mov	r2, r4
 8024198:	e70f      	b.n	8023fba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0802419a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802419a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802419e:	b09f      	sub	sp, #124	@ 0x7c
 80241a0:	921b      	str	r2, [sp, #108]	@ 0x6c
 80241a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80241a4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80241a6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80241aa:	901d      	str	r0, [sp, #116]	@ 0x74
 80241ac:	931c      	str	r3, [sp, #112]	@ 0x70
 80241ae:	6850      	ldr	r0, [r2, #4]
 80241b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80241b2:	6812      	ldr	r2, [r2, #0]
 80241b4:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80241b6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80241ba:	fb00 1303 	mla	r3, r0, r3, r1
 80241be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80241c2:	18d3      	adds	r3, r2, r3
 80241c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80241c6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80241c8:	681b      	ldr	r3, [r3, #0]
 80241ca:	9312      	str	r3, [sp, #72]	@ 0x48
 80241cc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80241ce:	685e      	ldr	r6, [r3, #4]
 80241d0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80241d4:	3604      	adds	r6, #4
 80241d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80241d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80241da:	2b00      	cmp	r3, #0
 80241dc:	dc03      	bgt.n	80241e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80241de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	f340 8378 	ble.w	80248d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80241e6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80241e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80241ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80241f0:	1e48      	subs	r0, r1, #1
 80241f2:	1e57      	subs	r7, r2, #1
 80241f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	f340 818c 	ble.w	8024514 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80241fc:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80241fe:	142b      	asrs	r3, r5, #16
 8024200:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024204:	d406      	bmi.n	8024214 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024206:	4584      	cmp	ip, r0
 8024208:	da04      	bge.n	8024214 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802420a:	2b00      	cmp	r3, #0
 802420c:	db02      	blt.n	8024214 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802420e:	42bb      	cmp	r3, r7
 8024210:	f2c0 8181 	blt.w	8024516 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024214:	f11c 0c01 	adds.w	ip, ip, #1
 8024218:	f100 816f 	bmi.w	80244fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802421c:	4561      	cmp	r1, ip
 802421e:	f2c0 816c 	blt.w	80244fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024222:	3301      	adds	r3, #1
 8024224:	f100 8169 	bmi.w	80244fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024228:	429a      	cmp	r2, r3
 802422a:	f2c0 8166 	blt.w	80244fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802422e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024230:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8024232:	931a      	str	r3, [sp, #104]	@ 0x68
 8024234:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024236:	2b00      	cmp	r3, #0
 8024238:	f340 818c 	ble.w	8024554 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802423c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802423e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024242:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024246:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802424a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802424c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024250:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024252:	141b      	asrs	r3, r3, #16
 8024254:	f100 81d0 	bmi.w	80245f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024258:	f100 38ff 	add.w	r8, r0, #4294967295
 802425c:	4543      	cmp	r3, r8
 802425e:	f280 81cb 	bge.w	80245f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024262:	f1bc 0f00 	cmp.w	ip, #0
 8024266:	f2c0 81c7 	blt.w	80245f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802426a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802426e:	45c4      	cmp	ip, r8
 8024270:	f280 81c2 	bge.w	80245f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024274:	b200      	sxth	r0, r0
 8024276:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024278:	fb0c 3300 	mla	r3, ip, r0, r3
 802427c:	eb04 0803 	add.w	r8, r4, r3
 8024280:	5ce3      	ldrb	r3, [r4, r3]
 8024282:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024286:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802428a:	2a00      	cmp	r2, #0
 802428c:	f000 81a9 	beq.w	80245e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8024290:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024294:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024298:	940e      	str	r4, [sp, #56]	@ 0x38
 802429a:	0e24      	lsrs	r4, r4, #24
 802429c:	9415      	str	r4, [sp, #84]	@ 0x54
 802429e:	b179      	cbz	r1, 80242c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80242a0:	eb08 0c00 	add.w	ip, r8, r0
 80242a4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80242a8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80242ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80242ae:	0e00      	lsrs	r0, r0, #24
 80242b0:	9013      	str	r0, [sp, #76]	@ 0x4c
 80242b2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80242b6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80242ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80242bc:	0e00      	lsrs	r0, r0, #24
 80242be:	9016      	str	r0, [sp, #88]	@ 0x58
 80242c0:	b292      	uxth	r2, r2
 80242c2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80242c4:	b289      	uxth	r1, r1
 80242c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80242c8:	fb02 f901 	mul.w	r9, r2, r1
 80242cc:	0112      	lsls	r2, r2, #4
 80242ce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80242d2:	eba2 0809 	sub.w	r8, r2, r9
 80242d6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80242da:	b289      	uxth	r1, r1
 80242dc:	fa1f f888 	uxth.w	r8, r8
 80242e0:	1a52      	subs	r2, r2, r1
 80242e2:	fb08 f000 	mul.w	r0, r8, r0
 80242e6:	b292      	uxth	r2, r2
 80242e8:	fb02 000e 	mla	r0, r2, lr, r0
 80242ec:	fb01 0004 	mla	r0, r1, r4, r0
 80242f0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80242f2:	fb09 0004 	mla	r0, r9, r4, r0
 80242f6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80242fa:	2800      	cmp	r0, #0
 80242fc:	f000 80f2 	beq.w	80244e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024300:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024304:	d01b      	beq.n	802433e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8024306:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802430a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802430e:	fb0e fa0a 	mul.w	sl, lr, sl
 8024312:	fb0e fe03 	mul.w	lr, lr, r3
 8024316:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802431a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802431e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8024322:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024326:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802432a:	4453      	add	r3, sl
 802432c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024330:	0a1b      	lsrs	r3, r3, #8
 8024332:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024336:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802433a:	ea43 030c 	orr.w	r3, r3, ip
 802433e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024340:	2cff      	cmp	r4, #255	@ 0xff
 8024342:	d021      	beq.n	8024388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024344:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024346:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802434a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802434c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024350:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024352:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024356:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024358:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802435c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024360:	fb04 fa0a 	mul.w	sl, r4, sl
 8024364:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024368:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802436c:	44de      	add	lr, fp
 802436e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024372:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024376:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802437a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802437e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024382:	ea4e 040a 	orr.w	r4, lr, sl
 8024386:	940e      	str	r4, [sp, #56]	@ 0x38
 8024388:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802438a:	2cff      	cmp	r4, #255	@ 0xff
 802438c:	d021      	beq.n	80243d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802438e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024390:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024394:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024396:	fb04 fb0b 	mul.w	fp, r4, fp
 802439a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802439c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80243a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80243a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80243a6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80243aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80243ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80243b2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80243b6:	44de      	add	lr, fp
 80243b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80243bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80243c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243c4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80243c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80243cc:	ea4e 040a 	orr.w	r4, lr, sl
 80243d0:	940a      	str	r4, [sp, #40]	@ 0x28
 80243d2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80243d4:	2cff      	cmp	r4, #255	@ 0xff
 80243d6:	d021      	beq.n	802441c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80243d8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80243da:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80243de:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80243e0:	fb04 fb0b 	mul.w	fp, r4, fp
 80243e4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80243e6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80243ea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80243ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80243f0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80243f4:	fb04 fa0a 	mul.w	sl, r4, sl
 80243f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80243fc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024400:	44de      	add	lr, fp
 8024402:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024406:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802440a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802440e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024412:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024416:	ea4e 040a 	orr.w	r4, lr, sl
 802441a:	940f      	str	r4, [sp, #60]	@ 0x3c
 802441c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802441e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8024422:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024426:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802442a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802442c:	fb08 fc0c 	mul.w	ip, r8, ip
 8024430:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024434:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024438:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802443a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802443e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024442:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024444:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024448:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802444c:	fb08 f80e 	mul.w	r8, r8, lr
 8024450:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024454:	fb02 8303 	mla	r3, r2, r3, r8
 8024458:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802445a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802445e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024464:	fb01 330a 	mla	r3, r1, sl, r3
 8024468:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802446c:	fb09 3901 	mla	r9, r9, r1, r3
 8024470:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024472:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024474:	4343      	muls	r3, r0
 8024476:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802447a:	1c58      	adds	r0, r3, #1
 802447c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024480:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024484:	ea4c 0c09 	orr.w	ip, ip, r9
 8024488:	783b      	ldrb	r3, [r7, #0]
 802448a:	fa5f f28c 	uxtb.w	r2, ip
 802448e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024492:	fb12 f201 	smulbb	r2, r2, r1
 8024496:	b2c0      	uxtb	r0, r0
 8024498:	fb03 2300 	mla	r3, r3, r0, r2
 802449c:	b29b      	uxth	r3, r3
 802449e:	1c5a      	adds	r2, r3, #1
 80244a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80244a4:	787a      	ldrb	r2, [r7, #1]
 80244a6:	fb12 f200 	smulbb	r2, r2, r0
 80244aa:	121b      	asrs	r3, r3, #8
 80244ac:	703b      	strb	r3, [r7, #0]
 80244ae:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80244b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80244b6:	fb03 2301 	mla	r3, r3, r1, r2
 80244ba:	b29b      	uxth	r3, r3
 80244bc:	1c5a      	adds	r2, r3, #1
 80244be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80244c2:	121b      	asrs	r3, r3, #8
 80244c4:	707b      	strb	r3, [r7, #1]
 80244c6:	78bb      	ldrb	r3, [r7, #2]
 80244c8:	fb13 f000 	smulbb	r0, r3, r0
 80244cc:	fb0c 0c01 	mla	ip, ip, r1, r0
 80244d0:	fa1f fc8c 	uxth.w	ip, ip
 80244d4:	f10c 0301 	add.w	r3, ip, #1
 80244d8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80244dc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80244e0:	f887 c002 	strb.w	ip, [r7, #2]
 80244e4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80244e6:	3703      	adds	r7, #3
 80244e8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80244ea:	441a      	add	r2, r3
 80244ec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80244ee:	441d      	add	r5, r3
 80244f0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80244f2:	9229      	str	r2, [sp, #164]	@ 0xa4
 80244f4:	3b01      	subs	r3, #1
 80244f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80244f8:	e69c      	b.n	8024234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80244fa:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80244fc:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80244fe:	441c      	add	r4, r3
 8024500:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024502:	441d      	add	r5, r3
 8024504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024506:	9429      	str	r4, [sp, #164]	@ 0xa4
 8024508:	3b01      	subs	r3, #1
 802450a:	9309      	str	r3, [sp, #36]	@ 0x24
 802450c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802450e:	3303      	adds	r3, #3
 8024510:	930c      	str	r3, [sp, #48]	@ 0x30
 8024512:	e66f      	b.n	80241f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024514:	d026      	beq.n	8024564 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024518:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802451a:	3b01      	subs	r3, #1
 802451c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802451e:	fb00 4003 	mla	r0, r0, r3, r4
 8024522:	1400      	asrs	r0, r0, #16
 8024524:	f53f ae83 	bmi.w	802422e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024528:	3901      	subs	r1, #1
 802452a:	4288      	cmp	r0, r1
 802452c:	f6bf ae7f 	bge.w	802422e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024530:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8024532:	fb01 5303 	mla	r3, r1, r3, r5
 8024536:	141b      	asrs	r3, r3, #16
 8024538:	f53f ae79 	bmi.w	802422e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802453c:	3a01      	subs	r2, #1
 802453e:	4293      	cmp	r3, r2
 8024540:	f6bf ae75 	bge.w	802422e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024546:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802454a:	f103 0e03 	add.w	lr, r3, #3
 802454e:	f1bb 0f00 	cmp.w	fp, #0
 8024552:	dc71      	bgt.n	8024638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024556:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802455a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802455c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024560:	4423      	add	r3, r4
 8024562:	930c      	str	r3, [sp, #48]	@ 0x30
 8024564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024566:	2b00      	cmp	r3, #0
 8024568:	f340 81b5 	ble.w	80248d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802456c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024570:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024572:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024576:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802457a:	eef0 6a62 	vmov.f32	s13, s5
 802457e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024582:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024586:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802458a:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 802458e:	eef0 6a43 	vmov.f32	s13, s6
 8024592:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024596:	ee16 5a90 	vmov	r5, s13
 802459a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802459e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80245a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80245a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80245aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80245ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80245b2:	ee12 2a90 	vmov	r2, s5
 80245b6:	eef0 2a47 	vmov.f32	s5, s14
 80245ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80245be:	ee13 2a10 	vmov	r2, s6
 80245c2:	932b      	str	r3, [sp, #172]	@ 0xac
 80245c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80245c6:	eeb0 3a67 	vmov.f32	s6, s15
 80245ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80245ce:	932c      	str	r3, [sp, #176]	@ 0xb0
 80245d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80245d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80245d4:	3b01      	subs	r3, #1
 80245d6:	9319      	str	r3, [sp, #100]	@ 0x64
 80245d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80245da:	bf08      	it	eq
 80245dc:	4613      	moveq	r3, r2
 80245de:	9309      	str	r3, [sp, #36]	@ 0x24
 80245e0:	e5fa      	b.n	80241d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80245e2:	2900      	cmp	r1, #0
 80245e4:	f43f ae6c 	beq.w	80242c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80245e8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80245ec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80245f0:	900a      	str	r0, [sp, #40]	@ 0x28
 80245f2:	0e00      	lsrs	r0, r0, #24
 80245f4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80245f6:	e663      	b.n	80242c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80245f8:	f113 0801 	adds.w	r8, r3, #1
 80245fc:	f53f af72 	bmi.w	80244e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024600:	4540      	cmp	r0, r8
 8024602:	f6ff af6f 	blt.w	80244e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024606:	f11c 0801 	adds.w	r8, ip, #1
 802460a:	f53f af6b 	bmi.w	80244e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802460e:	45c6      	cmp	lr, r8
 8024610:	f6ff af68 	blt.w	80244e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024614:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8024616:	b200      	sxth	r0, r0
 8024618:	9302      	str	r3, [sp, #8]
 802461a:	fa0f f38e 	sxth.w	r3, lr
 802461e:	9000      	str	r0, [sp, #0]
 8024620:	9301      	str	r3, [sp, #4]
 8024622:	4633      	mov	r3, r6
 8024624:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024626:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802462a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802462e:	4639      	mov	r1, r7
 8024630:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024632:	f7ff fc74 	bl	8023f1e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8024636:	e755      	b.n	80244e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024638:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802463a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802463e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024640:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024644:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024646:	1427      	asrs	r7, r4, #16
 8024648:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802464a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802464e:	142b      	asrs	r3, r5, #16
 8024650:	fb01 7303 	mla	r3, r1, r3, r7
 8024654:	18e7      	adds	r7, r4, r3
 8024656:	5ce3      	ldrb	r3, [r4, r3]
 8024658:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802465c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024660:	2a00      	cmp	r2, #0
 8024662:	f000 812e 	beq.w	80248c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8024666:	f897 8001 	ldrb.w	r8, [r7, #1]
 802466a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802466e:	9410      	str	r4, [sp, #64]	@ 0x40
 8024670:	0e24      	lsrs	r4, r4, #24
 8024672:	9417      	str	r4, [sp, #92]	@ 0x5c
 8024674:	b170      	cbz	r0, 8024694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024676:	eb07 0801 	add.w	r8, r7, r1
 802467a:	5c79      	ldrb	r1, [r7, r1]
 802467c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024680:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024682:	0e09      	lsrs	r1, r1, #24
 8024684:	9114      	str	r1, [sp, #80]	@ 0x50
 8024686:	f898 1001 	ldrb.w	r1, [r8, #1]
 802468a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802468e:	9111      	str	r1, [sp, #68]	@ 0x44
 8024690:	0e09      	lsrs	r1, r1, #24
 8024692:	9118      	str	r1, [sp, #96]	@ 0x60
 8024694:	b292      	uxth	r2, r2
 8024696:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024698:	b280      	uxth	r0, r0
 802469a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802469c:	fb02 f900 	mul.w	r9, r2, r0
 80246a0:	0112      	lsls	r2, r2, #4
 80246a2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80246a6:	eba2 0809 	sub.w	r8, r2, r9
 80246aa:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80246ae:	b280      	uxth	r0, r0
 80246b0:	fa1f f888 	uxth.w	r8, r8
 80246b4:	1a12      	subs	r2, r2, r0
 80246b6:	fb08 f101 	mul.w	r1, r8, r1
 80246ba:	b292      	uxth	r2, r2
 80246bc:	fb02 110c 	mla	r1, r2, ip, r1
 80246c0:	fb00 1104 	mla	r1, r0, r4, r1
 80246c4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80246c6:	fb09 1104 	mla	r1, r9, r4, r1
 80246ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80246ce:	2900      	cmp	r1, #0
 80246d0:	f000 80ec 	beq.w	80248ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80246d4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80246d8:	d019      	beq.n	802470e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80246da:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80246de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80246e2:	fb0c fa0a 	mul.w	sl, ip, sl
 80246e6:	fb0c fc03 	mul.w	ip, ip, r3
 80246ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80246ee:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80246f2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80246f6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80246fa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80246fe:	4453      	add	r3, sl
 8024700:	0a3f      	lsrs	r7, r7, #8
 8024702:	0a1b      	lsrs	r3, r3, #8
 8024704:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024708:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802470c:	433b      	orrs	r3, r7
 802470e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024710:	2cff      	cmp	r4, #255	@ 0xff
 8024712:	d020      	beq.n	8024756 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8024714:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024716:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802471a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802471c:	4367      	muls	r7, r4
 802471e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024720:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024724:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024728:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802472a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802472e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024732:	fb04 fa0a 	mul.w	sl, r4, sl
 8024736:	44bc      	add	ip, r7
 8024738:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802473c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024740:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024744:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024748:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802474c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024750:	ea4c 040a 	orr.w	r4, ip, sl
 8024754:	9410      	str	r4, [sp, #64]	@ 0x40
 8024756:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024758:	2cff      	cmp	r4, #255	@ 0xff
 802475a:	d020      	beq.n	802479e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 802475c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802475e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024762:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024764:	4367      	muls	r7, r4
 8024766:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024768:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802476c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024770:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024772:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024776:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802477a:	fb04 fa0a 	mul.w	sl, r4, sl
 802477e:	44bc      	add	ip, r7
 8024780:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024784:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024788:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802478c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024790:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024794:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024798:	ea4c 040a 	orr.w	r4, ip, sl
 802479c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802479e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80247a0:	2cff      	cmp	r4, #255	@ 0xff
 80247a2:	d020      	beq.n	80247e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80247a4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80247a6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80247aa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80247ac:	4367      	muls	r7, r4
 80247ae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80247b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80247b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80247b8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80247ba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80247be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80247c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80247c6:	44bc      	add	ip, r7
 80247c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80247cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80247d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80247d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80247dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80247e0:	ea4c 040a 	orr.w	r4, ip, sl
 80247e4:	9411      	str	r4, [sp, #68]	@ 0x44
 80247e6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80247e8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80247ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80247f0:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80247f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80247f6:	fb08 f707 	mul.w	r7, r8, r7
 80247fa:	fb02 770c 	mla	r7, r2, ip, r7
 80247fe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024802:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024804:	fb00 770c 	mla	r7, r0, ip, r7
 8024808:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802480c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802480e:	fb09 770c 	mla	r7, r9, ip, r7
 8024812:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8024816:	fb08 f80c 	mul.w	r8, r8, ip
 802481a:	0a3f      	lsrs	r7, r7, #8
 802481c:	fb02 8303 	mla	r3, r2, r3, r8
 8024820:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024822:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8024826:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802482a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802482c:	fb00 330a 	mla	r3, r0, sl, r3
 8024830:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8024834:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024836:	fb09 3c0c 	mla	ip, r9, ip, r3
 802483a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802483c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024840:	434b      	muls	r3, r1
 8024842:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024846:	1c59      	adds	r1, r3, #1
 8024848:	ea47 070c 	orr.w	r7, r7, ip
 802484c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024850:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024854:	b2fa      	uxtb	r2, r7
 8024856:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802485a:	fb12 f200 	smulbb	r2, r2, r0
 802485e:	b2c9      	uxtb	r1, r1
 8024860:	fb03 2301 	mla	r3, r3, r1, r2
 8024864:	b29b      	uxth	r3, r3
 8024866:	1c5a      	adds	r2, r3, #1
 8024868:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802486c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024870:	fb12 f201 	smulbb	r2, r2, r1
 8024874:	121b      	asrs	r3, r3, #8
 8024876:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802487a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802487e:	0c3f      	lsrs	r7, r7, #16
 8024880:	fb03 2300 	mla	r3, r3, r0, r2
 8024884:	b29b      	uxth	r3, r3
 8024886:	1c5a      	adds	r2, r3, #1
 8024888:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802488c:	121b      	asrs	r3, r3, #8
 802488e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024892:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024896:	fb13 f101 	smulbb	r1, r3, r1
 802489a:	fb07 1700 	mla	r7, r7, r0, r1
 802489e:	b2bf      	uxth	r7, r7
 80248a0:	1c7b      	adds	r3, r7, #1
 80248a2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80248a6:	123f      	asrs	r7, r7, #8
 80248a8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80248ac:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80248ae:	f10e 0e03 	add.w	lr, lr, #3
 80248b2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80248b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80248b8:	441a      	add	r2, r3
 80248ba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80248bc:	9229      	str	r2, [sp, #164]	@ 0xa4
 80248be:	441d      	add	r5, r3
 80248c0:	e645      	b.n	802454e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80248c2:	2800      	cmp	r0, #0
 80248c4:	f43f aee6 	beq.w	8024694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80248c8:	5c79      	ldrb	r1, [r7, r1]
 80248ca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80248ce:	910b      	str	r1, [sp, #44]	@ 0x2c
 80248d0:	0e09      	lsrs	r1, r1, #24
 80248d2:	9114      	str	r1, [sp, #80]	@ 0x50
 80248d4:	e6de      	b.n	8024694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80248d6:	b01f      	add	sp, #124	@ 0x7c
 80248d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080248dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80248dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248e0:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80248e4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 80248e8:	2d00      	cmp	r5, #0
 80248ea:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80248ee:	fb05 700e 	mla	r0, r5, lr, r7
 80248f2:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80248f6:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 80248fa:	eb02 0800 	add.w	r8, r2, r0
 80248fe:	f2c0 8105 	blt.w	8024b0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8024902:	45a9      	cmp	r9, r5
 8024904:	f340 8102 	ble.w	8024b0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8024908:	2f00      	cmp	r7, #0
 802490a:	f2c0 80fd 	blt.w	8024b08 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 802490e:	45be      	cmp	lr, r7
 8024910:	f340 80fa 	ble.w	8024b08 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8024914:	5c12      	ldrb	r2, [r2, r0]
 8024916:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802491a:	1c7a      	adds	r2, r7, #1
 802491c:	f100 80f9 	bmi.w	8024b12 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8024920:	4596      	cmp	lr, r2
 8024922:	f340 80f6 	ble.w	8024b12 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8024926:	2c00      	cmp	r4, #0
 8024928:	f000 80f5 	beq.w	8024b16 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 802492c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024930:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024934:	3501      	adds	r5, #1
 8024936:	f100 80f2 	bmi.w	8024b1e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 802493a:	45a9      	cmp	r9, r5
 802493c:	f340 80ef 	ble.w	8024b1e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8024940:	f1bc 0f00 	cmp.w	ip, #0
 8024944:	f000 80ee 	beq.w	8024b24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8024948:	2f00      	cmp	r7, #0
 802494a:	f2c0 80e6 	blt.w	8024b1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802494e:	45be      	cmp	lr, r7
 8024950:	f340 80e3 	ble.w	8024b1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8024954:	f818 200e 	ldrb.w	r2, [r8, lr]
 8024958:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802495c:	3701      	adds	r7, #1
 802495e:	f100 80e4 	bmi.w	8024b2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024962:	45be      	cmp	lr, r7
 8024964:	f340 80e1 	ble.w	8024b2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024968:	2c00      	cmp	r4, #0
 802496a:	f000 80e0 	beq.w	8024b2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 802496e:	44c6      	add	lr, r8
 8024970:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024974:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024978:	b2a3      	uxth	r3, r4
 802497a:	fa1f fc8c 	uxth.w	ip, ip
 802497e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024982:	fb0c fe03 	mul.w	lr, ip, r3
 8024986:	011b      	lsls	r3, r3, #4
 8024988:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802498c:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8024990:	eba3 070e 	sub.w	r7, r3, lr
 8024994:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8024998:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802499c:	fa1f f48c 	uxth.w	r4, ip
 80249a0:	b2bf      	uxth	r7, r7
 80249a2:	1b1b      	subs	r3, r3, r4
 80249a4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80249a8:	fb07 fc0a 	mul.w	ip, r7, sl
 80249ac:	b29b      	uxth	r3, r3
 80249ae:	fb03 cc0b 	mla	ip, r3, fp, ip
 80249b2:	9300      	str	r3, [sp, #0]
 80249b4:	fb04 cc09 	mla	ip, r4, r9, ip
 80249b8:	fb0e cc08 	mla	ip, lr, r8, ip
 80249bc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80249c0:	9301      	str	r3, [sp, #4]
 80249c2:	2b00      	cmp	r3, #0
 80249c4:	f000 809d 	beq.w	8024b02 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80249c8:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80249cc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80249d0:	fb0b fc0c 	mul.w	ip, fp, ip
 80249d4:	fb0b f606 	mul.w	r6, fp, r6
 80249d8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80249dc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80249e0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80249e4:	44dc      	add	ip, fp
 80249e6:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80249ea:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80249ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249f2:	fb0a fb0b 	mul.w	fp, sl, fp
 80249f6:	fb0a fa00 	mul.w	sl, sl, r0
 80249fa:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80249fe:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8024a02:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8024a06:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024a0a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024a0e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024a12:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024a16:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024a1a:	0a36      	lsrs	r6, r6, #8
 8024a1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a20:	44dc      	add	ip, fp
 8024a22:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8024a26:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024a2a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024a2e:	fb09 fb0b 	mul.w	fp, r9, fp
 8024a32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a36:	fb09 f905 	mul.w	r9, r9, r5
 8024a3a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024a3e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024a42:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8024a46:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024a4a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024a4e:	fb0c fc07 	mul.w	ip, ip, r7
 8024a52:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024a56:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8024a5a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8024a5e:	4458      	add	r0, fp
 8024a60:	fb08 f505 	mul.w	r5, r8, r5
 8024a64:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024a68:	fb08 f802 	mul.w	r8, r8, r2
 8024a6c:	0a00      	lsrs	r0, r0, #8
 8024a6e:	0a2a      	lsrs	r2, r5, #8
 8024a70:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8024a74:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024a78:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8024a7c:	4415      	add	r5, r2
 8024a7e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8024a82:	0a2d      	lsrs	r5, r5, #8
 8024a84:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024a88:	9a00      	ldr	r2, [sp, #0]
 8024a8a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8024a8e:	fb03 cc02 	mla	ip, r3, r2, ip
 8024a92:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024a96:	9b01      	ldr	r3, [sp, #4]
 8024a98:	fb05 c50e 	mla	r5, r5, lr, ip
 8024a9c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8024aa0:	43db      	mvns	r3, r3
 8024aa2:	fb00 5004 	mla	r0, r0, r4, r5
 8024aa6:	b2db      	uxtb	r3, r3
 8024aa8:	0a00      	lsrs	r0, r0, #8
 8024aaa:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8024aae:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8024ab2:	4378      	muls	r0, r7
 8024ab4:	fb02 0006 	mla	r0, r2, r6, r0
 8024ab8:	780a      	ldrb	r2, [r1, #0]
 8024aba:	fb0e 0e08 	mla	lr, lr, r8, r0
 8024abe:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8024ac2:	fb04 e000 	mla	r0, r4, r0, lr
 8024ac6:	fb02 f403 	mul.w	r4, r2, r3
 8024aca:	0a00      	lsrs	r0, r0, #8
 8024acc:	1c62      	adds	r2, r4, #1
 8024ace:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024ad2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024ad6:	4328      	orrs	r0, r5
 8024ad8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024adc:	700a      	strb	r2, [r1, #0]
 8024ade:	784a      	ldrb	r2, [r1, #1]
 8024ae0:	435a      	muls	r2, r3
 8024ae2:	1c54      	adds	r4, r2, #1
 8024ae4:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8024ae8:	0a02      	lsrs	r2, r0, #8
 8024aea:	0c00      	lsrs	r0, r0, #16
 8024aec:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024af0:	704a      	strb	r2, [r1, #1]
 8024af2:	788a      	ldrb	r2, [r1, #2]
 8024af4:	4353      	muls	r3, r2
 8024af6:	1c5a      	adds	r2, r3, #1
 8024af8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024afc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024b00:	7088      	strb	r0, [r1, #2]
 8024b02:	b003      	add	sp, #12
 8024b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b08:	2600      	movs	r6, #0
 8024b0a:	e706      	b.n	802491a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8024b0c:	2000      	movs	r0, #0
 8024b0e:	4606      	mov	r6, r0
 8024b10:	e710      	b.n	8024934 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8024b12:	2000      	movs	r0, #0
 8024b14:	e70e      	b.n	8024934 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8024b16:	4620      	mov	r0, r4
 8024b18:	e70c      	b.n	8024934 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8024b1a:	2500      	movs	r5, #0
 8024b1c:	e71e      	b.n	802495c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8024b1e:	2200      	movs	r2, #0
 8024b20:	4615      	mov	r5, r2
 8024b22:	e729      	b.n	8024978 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8024b24:	4662      	mov	r2, ip
 8024b26:	4665      	mov	r5, ip
 8024b28:	e726      	b.n	8024978 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8024b2a:	2200      	movs	r2, #0
 8024b2c:	e724      	b.n	8024978 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8024b2e:	4622      	mov	r2, r4
 8024b30:	e722      	b.n	8024978 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08024b32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b36:	b09b      	sub	sp, #108	@ 0x6c
 8024b38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024b3c:	9218      	str	r2, [sp, #96]	@ 0x60
 8024b3e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024b40:	9019      	str	r0, [sp, #100]	@ 0x64
 8024b42:	9116      	str	r1, [sp, #88]	@ 0x58
 8024b44:	6850      	ldr	r0, [r2, #4]
 8024b46:	9307      	str	r3, [sp, #28]
 8024b48:	6812      	ldr	r2, [r2, #0]
 8024b4a:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8024b4c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8024b50:	fb00 1303 	mla	r3, r0, r3, r1
 8024b54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b58:	18d3      	adds	r3, r2, r3
 8024b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8024b5c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024b5e:	681b      	ldr	r3, [r3, #0]
 8024b60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024b62:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024b64:	685e      	ldr	r6, [r3, #4]
 8024b66:	3604      	adds	r6, #4
 8024b68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	dc03      	bgt.n	8024b76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8024b6e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024b70:	2b00      	cmp	r3, #0
 8024b72:	f340 834f 	ble.w	8025214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8024b76:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024b78:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b7c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024b80:	1e48      	subs	r0, r1, #1
 8024b82:	1e57      	subs	r7, r2, #1
 8024b84:	9b07      	ldr	r3, [sp, #28]
 8024b86:	2b00      	cmp	r3, #0
 8024b88:	f340 8178 	ble.w	8024e7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024b8c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024b8e:	142b      	asrs	r3, r5, #16
 8024b90:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024b94:	d406      	bmi.n	8024ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024b96:	4584      	cmp	ip, r0
 8024b98:	da04      	bge.n	8024ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024b9a:	2b00      	cmp	r3, #0
 8024b9c:	db02      	blt.n	8024ba4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024b9e:	42bb      	cmp	r3, r7
 8024ba0:	f2c0 816d 	blt.w	8024e7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8024ba4:	f11c 0c01 	adds.w	ip, ip, #1
 8024ba8:	f100 815b 	bmi.w	8024e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024bac:	4561      	cmp	r1, ip
 8024bae:	f2c0 8158 	blt.w	8024e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024bb2:	3301      	adds	r3, #1
 8024bb4:	f100 8155 	bmi.w	8024e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024bb8:	429a      	cmp	r2, r3
 8024bba:	f2c0 8152 	blt.w	8024e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024bbe:	9b07      	ldr	r3, [sp, #28]
 8024bc0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8024bc2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024bc4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024bc6:	2b00      	cmp	r3, #0
 8024bc8:	f340 8178 	ble.w	8024ebc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024bcc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024bce:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024bd2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024bd6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024bda:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024bdc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024be0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024be2:	141b      	asrs	r3, r3, #16
 8024be4:	f100 81ba 	bmi.w	8024f5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024be8:	f101 38ff 	add.w	r8, r1, #4294967295
 8024bec:	4543      	cmp	r3, r8
 8024bee:	f280 81b5 	bge.w	8024f5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024bf2:	f1bc 0f00 	cmp.w	ip, #0
 8024bf6:	f2c0 81b1 	blt.w	8024f5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024bfa:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024bfe:	45c4      	cmp	ip, r8
 8024c00:	f280 81ac 	bge.w	8024f5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024c04:	b209      	sxth	r1, r1
 8024c06:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024c08:	fb0c 3301 	mla	r3, ip, r1, r3
 8024c0c:	eb04 0803 	add.w	r8, r4, r3
 8024c10:	5ce3      	ldrb	r3, [r4, r3]
 8024c12:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024c16:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024c1a:	2a00      	cmp	r2, #0
 8024c1c:	f000 8193 	beq.w	8024f46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8024c20:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024c24:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024c28:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024c2a:	0e24      	lsrs	r4, r4, #24
 8024c2c:	9412      	str	r4, [sp, #72]	@ 0x48
 8024c2e:	b178      	cbz	r0, 8024c50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024c30:	eb08 0c01 	add.w	ip, r8, r1
 8024c34:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024c38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024c3c:	9108      	str	r1, [sp, #32]
 8024c3e:	0e09      	lsrs	r1, r1, #24
 8024c40:	9110      	str	r1, [sp, #64]	@ 0x40
 8024c42:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024c46:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024c4a:	910c      	str	r1, [sp, #48]	@ 0x30
 8024c4c:	0e09      	lsrs	r1, r1, #24
 8024c4e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024c50:	b292      	uxth	r2, r2
 8024c52:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024c54:	b280      	uxth	r0, r0
 8024c56:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024c58:	fb02 f900 	mul.w	r9, r2, r0
 8024c5c:	0112      	lsls	r2, r2, #4
 8024c5e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024c62:	eba2 0809 	sub.w	r8, r2, r9
 8024c66:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024c6a:	b280      	uxth	r0, r0
 8024c6c:	fa1f f888 	uxth.w	r8, r8
 8024c70:	1a12      	subs	r2, r2, r0
 8024c72:	fb08 f101 	mul.w	r1, r8, r1
 8024c76:	b292      	uxth	r2, r2
 8024c78:	fb02 110e 	mla	r1, r2, lr, r1
 8024c7c:	fb00 1104 	mla	r1, r0, r4, r1
 8024c80:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024c82:	fb09 1104 	mla	r1, r9, r4, r1
 8024c86:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024c8a:	2900      	cmp	r1, #0
 8024c8c:	f000 80de 	beq.w	8024e4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024c90:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024c94:	d01b      	beq.n	8024cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8024c96:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024c9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024c9e:	fb0e fa0a 	mul.w	sl, lr, sl
 8024ca2:	fb0e fe03 	mul.w	lr, lr, r3
 8024ca6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024caa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024cae:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8024cb2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024cb6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024cba:	4453      	add	r3, sl
 8024cbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024cc0:	0a1b      	lsrs	r3, r3, #8
 8024cc2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024cc6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024cca:	ea43 030c 	orr.w	r3, r3, ip
 8024cce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024cd0:	2cff      	cmp	r4, #255	@ 0xff
 8024cd2:	d021      	beq.n	8024d18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024cd4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024cd6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024cda:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024cdc:	fb04 fb0b 	mul.w	fp, r4, fp
 8024ce0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024ce2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024ce6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024ce8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024cec:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024cf0:	fb04 fa0a 	mul.w	sl, r4, sl
 8024cf4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024cf8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024cfc:	44de      	add	lr, fp
 8024cfe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024d02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d0a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024d0e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024d12:	ea4e 040a 	orr.w	r4, lr, sl
 8024d16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024d18:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024d1a:	2cff      	cmp	r4, #255	@ 0xff
 8024d1c:	d021      	beq.n	8024d62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024d1e:	9c08      	ldr	r4, [sp, #32]
 8024d20:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024d24:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024d26:	fb04 fb0b 	mul.w	fp, r4, fp
 8024d2a:	9c08      	ldr	r4, [sp, #32]
 8024d2c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024d30:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024d32:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024d36:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024d3a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024d3e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024d42:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024d46:	44de      	add	lr, fp
 8024d48:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024d4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d54:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024d58:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024d5c:	ea4e 040a 	orr.w	r4, lr, sl
 8024d60:	9408      	str	r4, [sp, #32]
 8024d62:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024d64:	2cff      	cmp	r4, #255	@ 0xff
 8024d66:	d021      	beq.n	8024dac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8024d68:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024d6a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024d6e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024d70:	fb04 fb0b 	mul.w	fp, r4, fp
 8024d74:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024d76:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024d7a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024d7c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024d80:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024d84:	fb04 fa0a 	mul.w	sl, r4, sl
 8024d88:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024d8c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024d90:	44de      	add	lr, fp
 8024d92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024d96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d9e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024da2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024da6:	ea4e 040a 	orr.w	r4, lr, sl
 8024daa:	940c      	str	r4, [sp, #48]	@ 0x30
 8024dac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024dae:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8024db2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024db6:	43c9      	mvns	r1, r1
 8024db8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024dbc:	9c08      	ldr	r4, [sp, #32]
 8024dbe:	b2c9      	uxtb	r1, r1
 8024dc0:	fb08 fc0c 	mul.w	ip, r8, ip
 8024dc4:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024dc8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024dcc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024dce:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024dd2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024dd6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024dd8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024ddc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8024de0:	fb08 f80e 	mul.w	r8, r8, lr
 8024de4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024de8:	fb02 8303 	mla	r3, r2, r3, r8
 8024dec:	9a08      	ldr	r2, [sp, #32]
 8024dee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024df2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024df6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024df8:	fb00 330a 	mla	r3, r0, sl, r3
 8024dfc:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8024e00:	fb09 3900 	mla	r9, r9, r0, r3
 8024e04:	783b      	ldrb	r3, [r7, #0]
 8024e06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024e0a:	fb03 f201 	mul.w	r2, r3, r1
 8024e0e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024e12:	1c53      	adds	r3, r2, #1
 8024e14:	ea4c 0c09 	orr.w	ip, ip, r9
 8024e18:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024e1c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024e20:	703b      	strb	r3, [r7, #0]
 8024e22:	787b      	ldrb	r3, [r7, #1]
 8024e24:	434b      	muls	r3, r1
 8024e26:	1c5a      	adds	r2, r3, #1
 8024e28:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024e2c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024e30:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024e34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024e38:	707b      	strb	r3, [r7, #1]
 8024e3a:	78bb      	ldrb	r3, [r7, #2]
 8024e3c:	4359      	muls	r1, r3
 8024e3e:	1c4b      	adds	r3, r1, #1
 8024e40:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024e44:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024e48:	f887 c002 	strb.w	ip, [r7, #2]
 8024e4c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024e4e:	3703      	adds	r7, #3
 8024e50:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024e52:	441a      	add	r2, r3
 8024e54:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024e56:	441d      	add	r5, r3
 8024e58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024e5a:	9225      	str	r2, [sp, #148]	@ 0x94
 8024e5c:	3b01      	subs	r3, #1
 8024e5e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024e60:	e6b0      	b.n	8024bc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024e62:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024e64:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024e66:	441c      	add	r4, r3
 8024e68:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024e6a:	441d      	add	r5, r3
 8024e6c:	9b07      	ldr	r3, [sp, #28]
 8024e6e:	9425      	str	r4, [sp, #148]	@ 0x94
 8024e70:	3b01      	subs	r3, #1
 8024e72:	9307      	str	r3, [sp, #28]
 8024e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024e76:	3303      	adds	r3, #3
 8024e78:	930a      	str	r3, [sp, #40]	@ 0x28
 8024e7a:	e683      	b.n	8024b84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024e7c:	d026      	beq.n	8024ecc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8024e7e:	9b07      	ldr	r3, [sp, #28]
 8024e80:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024e82:	3b01      	subs	r3, #1
 8024e84:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024e86:	fb00 4003 	mla	r0, r0, r3, r4
 8024e8a:	1400      	asrs	r0, r0, #16
 8024e8c:	f53f ae97 	bmi.w	8024bbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024e90:	3901      	subs	r1, #1
 8024e92:	4288      	cmp	r0, r1
 8024e94:	f6bf ae93 	bge.w	8024bbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024e98:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024e9a:	fb01 5303 	mla	r3, r1, r3, r5
 8024e9e:	141b      	asrs	r3, r3, #16
 8024ea0:	f53f ae8d 	bmi.w	8024bbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024ea4:	3a01      	subs	r2, #1
 8024ea6:	4293      	cmp	r3, r2
 8024ea8:	f6bf ae89 	bge.w	8024bbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024eae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024eb2:	f103 0e03 	add.w	lr, r3, #3
 8024eb6:	f1bb 0f00 	cmp.w	fp, #0
 8024eba:	dc6d      	bgt.n	8024f98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8024ebc:	9b07      	ldr	r3, [sp, #28]
 8024ebe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024ec4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024ec8:	4423      	add	r3, r4
 8024eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8024ecc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024ece:	2b00      	cmp	r3, #0
 8024ed0:	f340 81a0 	ble.w	8025214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8024ed4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024ed8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024eda:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ede:	eeb0 6a62 	vmov.f32	s12, s5
 8024ee2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8024ee6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024eea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024eee:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8024ef2:	eeb0 6a43 	vmov.f32	s12, s6
 8024ef6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024efa:	ee16 5a10 	vmov	r5, s12
 8024efe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024f02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024f06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024f0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024f0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f16:	ee12 2a90 	vmov	r2, s5
 8024f1a:	eef0 2a47 	vmov.f32	s5, s14
 8024f1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f22:	ee13 2a10 	vmov	r2, s6
 8024f26:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024f28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024f2a:	eeb0 3a67 	vmov.f32	s6, s15
 8024f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f32:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024f34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024f36:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024f38:	3b01      	subs	r3, #1
 8024f3a:	9316      	str	r3, [sp, #88]	@ 0x58
 8024f3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024f3e:	bf08      	it	eq
 8024f40:	4613      	moveq	r3, r2
 8024f42:	9307      	str	r3, [sp, #28]
 8024f44:	e610      	b.n	8024b68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8024f46:	2800      	cmp	r0, #0
 8024f48:	f43f ae82 	beq.w	8024c50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024f4c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024f50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f54:	9108      	str	r1, [sp, #32]
 8024f56:	0e09      	lsrs	r1, r1, #24
 8024f58:	9110      	str	r1, [sp, #64]	@ 0x40
 8024f5a:	e679      	b.n	8024c50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024f5c:	f113 0801 	adds.w	r8, r3, #1
 8024f60:	f53f af74 	bmi.w	8024e4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024f64:	4541      	cmp	r1, r8
 8024f66:	f6ff af71 	blt.w	8024e4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024f6a:	f11c 0801 	adds.w	r8, ip, #1
 8024f6e:	f53f af6d 	bmi.w	8024e4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024f72:	45c6      	cmp	lr, r8
 8024f74:	f6ff af6a 	blt.w	8024e4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024f78:	b209      	sxth	r1, r1
 8024f7a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024f7e:	fa0f f38e 	sxth.w	r3, lr
 8024f82:	9100      	str	r1, [sp, #0]
 8024f84:	4639      	mov	r1, r7
 8024f86:	9301      	str	r3, [sp, #4]
 8024f88:	4633      	mov	r3, r6
 8024f8a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024f8e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024f90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024f92:	f7ff fca3 	bl	80248dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8024f96:	e759      	b.n	8024e4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024f98:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024f9a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024f9e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024fa0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024fa4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024fa6:	1427      	asrs	r7, r4, #16
 8024fa8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024faa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024fae:	142b      	asrs	r3, r5, #16
 8024fb0:	fb01 7303 	mla	r3, r1, r3, r7
 8024fb4:	18e7      	adds	r7, r4, r3
 8024fb6:	5ce3      	ldrb	r3, [r4, r3]
 8024fb8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024fbc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024fc0:	2a00      	cmp	r2, #0
 8024fc2:	f000 811d 	beq.w	8025200 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8024fc6:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024fca:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8024fce:	940d      	str	r4, [sp, #52]	@ 0x34
 8024fd0:	0e24      	lsrs	r4, r4, #24
 8024fd2:	9414      	str	r4, [sp, #80]	@ 0x50
 8024fd4:	b170      	cbz	r0, 8024ff4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024fd6:	eb07 0801 	add.w	r8, r7, r1
 8024fda:	5c79      	ldrb	r1, [r7, r1]
 8024fdc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024fe0:	9109      	str	r1, [sp, #36]	@ 0x24
 8024fe2:	0e09      	lsrs	r1, r1, #24
 8024fe4:	9111      	str	r1, [sp, #68]	@ 0x44
 8024fe6:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024fea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024fee:	910e      	str	r1, [sp, #56]	@ 0x38
 8024ff0:	0e09      	lsrs	r1, r1, #24
 8024ff2:	9115      	str	r1, [sp, #84]	@ 0x54
 8024ff4:	b292      	uxth	r2, r2
 8024ff6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024ff8:	b280      	uxth	r0, r0
 8024ffa:	fb02 f900 	mul.w	r9, r2, r0
 8024ffe:	0112      	lsls	r2, r2, #4
 8025000:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025004:	eba2 0809 	sub.w	r8, r2, r9
 8025008:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802500c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802500e:	b280      	uxth	r0, r0
 8025010:	fa1f f888 	uxth.w	r8, r8
 8025014:	1a09      	subs	r1, r1, r0
 8025016:	fb08 f202 	mul.w	r2, r8, r2
 802501a:	b289      	uxth	r1, r1
 802501c:	fb01 220c 	mla	r2, r1, ip, r2
 8025020:	fb00 2204 	mla	r2, r0, r4, r2
 8025024:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025026:	fb09 2204 	mla	r2, r9, r4, r2
 802502a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802502e:	2a00      	cmp	r2, #0
 8025030:	f000 80db 	beq.w	80251ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8025034:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025038:	d019      	beq.n	802506e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 802503a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802503e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025042:	fb0c fa0a 	mul.w	sl, ip, sl
 8025046:	fb0c fc03 	mul.w	ip, ip, r3
 802504a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802504e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025052:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025056:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802505a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802505e:	4453      	add	r3, sl
 8025060:	0a3f      	lsrs	r7, r7, #8
 8025062:	0a1b      	lsrs	r3, r3, #8
 8025064:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025068:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802506c:	433b      	orrs	r3, r7
 802506e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025070:	2cff      	cmp	r4, #255	@ 0xff
 8025072:	d020      	beq.n	80250b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8025074:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025076:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802507a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802507c:	4367      	muls	r7, r4
 802507e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025080:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025084:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025088:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802508a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802508e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025092:	fb04 fa0a 	mul.w	sl, r4, sl
 8025096:	44bc      	add	ip, r7
 8025098:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802509c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80250a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80250a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80250a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80250ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80250b0:	ea4c 040a 	orr.w	r4, ip, sl
 80250b4:	940d      	str	r4, [sp, #52]	@ 0x34
 80250b6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80250b8:	2cff      	cmp	r4, #255	@ 0xff
 80250ba:	d020      	beq.n	80250fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 80250bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80250be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80250c2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80250c4:	4367      	muls	r7, r4
 80250c6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80250c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80250cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80250d0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80250d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80250d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80250da:	fb04 fa0a 	mul.w	sl, r4, sl
 80250de:	44bc      	add	ip, r7
 80250e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80250e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80250e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80250ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80250f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80250f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80250f8:	ea4c 040a 	orr.w	r4, ip, sl
 80250fc:	9409      	str	r4, [sp, #36]	@ 0x24
 80250fe:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025100:	2cff      	cmp	r4, #255	@ 0xff
 8025102:	d020      	beq.n	8025146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8025104:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025106:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802510a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802510c:	4367      	muls	r7, r4
 802510e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025110:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025114:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025118:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802511a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802511e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025122:	fb04 fa0a 	mul.w	sl, r4, sl
 8025126:	44bc      	add	ip, r7
 8025128:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802512c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025130:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025134:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025138:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802513c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025140:	ea4c 040a 	orr.w	r4, ip, sl
 8025144:	940e      	str	r4, [sp, #56]	@ 0x38
 8025146:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025148:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802514c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025150:	43d2      	mvns	r2, r2
 8025152:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025156:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025158:	b2d2      	uxtb	r2, r2
 802515a:	fb08 f707 	mul.w	r7, r8, r7
 802515e:	fb01 770c 	mla	r7, r1, ip, r7
 8025162:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025166:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025168:	fb00 770c 	mla	r7, r0, ip, r7
 802516c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025170:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025172:	fb09 770c 	mla	r7, r9, ip, r7
 8025176:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802517a:	fb08 f80c 	mul.w	r8, r8, ip
 802517e:	0a3f      	lsrs	r7, r7, #8
 8025180:	fb01 8303 	mla	r3, r1, r3, r8
 8025184:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025186:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802518a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802518e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025190:	fb00 330a 	mla	r3, r0, sl, r3
 8025194:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8025198:	fb09 3c0c 	mla	ip, r9, ip, r3
 802519c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80251a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251a4:	fb03 f102 	mul.w	r1, r3, r2
 80251a8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80251ac:	1c4b      	adds	r3, r1, #1
 80251ae:	ea47 070c 	orr.w	r7, r7, ip
 80251b2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80251b6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80251ba:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80251be:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80251c2:	4353      	muls	r3, r2
 80251c4:	1c59      	adds	r1, r3, #1
 80251c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80251ca:	0a3b      	lsrs	r3, r7, #8
 80251cc:	0c3f      	lsrs	r7, r7, #16
 80251ce:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80251d2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80251d6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80251da:	435a      	muls	r2, r3
 80251dc:	1c53      	adds	r3, r2, #1
 80251de:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80251e2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80251e6:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80251ea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80251ec:	f10e 0e03 	add.w	lr, lr, #3
 80251f0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80251f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80251f6:	441a      	add	r2, r3
 80251f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80251fa:	9225      	str	r2, [sp, #148]	@ 0x94
 80251fc:	441d      	add	r5, r3
 80251fe:	e65a      	b.n	8024eb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025200:	2800      	cmp	r0, #0
 8025202:	f43f aef7 	beq.w	8024ff4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025206:	5c79      	ldrb	r1, [r7, r1]
 8025208:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802520c:	9109      	str	r1, [sp, #36]	@ 0x24
 802520e:	0e09      	lsrs	r1, r1, #24
 8025210:	9111      	str	r1, [sp, #68]	@ 0x44
 8025212:	e6ef      	b.n	8024ff4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025214:	b01b      	add	sp, #108	@ 0x6c
 8025216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802521a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802521a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802521e:	b08d      	sub	sp, #52	@ 0x34
 8025220:	468b      	mov	fp, r1
 8025222:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8025226:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 802522a:	fb0c 5703 	mla	r7, ip, r3, r5
 802522e:	f1bc 0f00 	cmp.w	ip, #0
 8025232:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025234:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025238:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 802523c:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8025240:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8025244:	eb02 0607 	add.w	r6, r2, r7
 8025248:	f89b 4000 	ldrb.w	r4, [fp]
 802524c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8025250:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8025254:	f2c0 80c1 	blt.w	80253da <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025258:	45e6      	cmp	lr, ip
 802525a:	f340 80be 	ble.w	80253da <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802525e:	2d00      	cmp	r5, #0
 8025260:	f2c0 80b7 	blt.w	80253d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025264:	42ab      	cmp	r3, r5
 8025266:	f340 80b4 	ble.w	80253d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802526a:	5dd2      	ldrb	r2, [r2, r7]
 802526c:	9205      	str	r2, [sp, #20]
 802526e:	7872      	ldrb	r2, [r6, #1]
 8025270:	9206      	str	r2, [sp, #24]
 8025272:	78b2      	ldrb	r2, [r6, #2]
 8025274:	9207      	str	r2, [sp, #28]
 8025276:	1c6a      	adds	r2, r5, #1
 8025278:	f100 80b6 	bmi.w	80253e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802527c:	4293      	cmp	r3, r2
 802527e:	f340 80b3 	ble.w	80253e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025282:	f1b8 0f00 	cmp.w	r8, #0
 8025286:	f000 80af 	beq.w	80253e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802528a:	78f2      	ldrb	r2, [r6, #3]
 802528c:	9201      	str	r2, [sp, #4]
 802528e:	7932      	ldrb	r2, [r6, #4]
 8025290:	9202      	str	r2, [sp, #8]
 8025292:	7972      	ldrb	r2, [r6, #5]
 8025294:	9203      	str	r2, [sp, #12]
 8025296:	f11c 0c01 	adds.w	ip, ip, #1
 802529a:	f100 80ad 	bmi.w	80253f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802529e:	45e6      	cmp	lr, ip
 80252a0:	f340 80aa 	ble.w	80253f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80252a4:	f1ba 0f00 	cmp.w	sl, #0
 80252a8:	f000 80a6 	beq.w	80253f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80252ac:	2d00      	cmp	r5, #0
 80252ae:	f2c0 809f 	blt.w	80253f0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80252b2:	42ab      	cmp	r3, r5
 80252b4:	f340 809c 	ble.w	80253f0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80252b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80252bc:	f816 9002 	ldrb.w	r9, [r6, r2]
 80252c0:	2203      	movs	r2, #3
 80252c2:	fb03 6c02 	mla	ip, r3, r2, r6
 80252c6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80252ca:	f89c e002 	ldrb.w	lr, [ip, #2]
 80252ce:	9704      	str	r7, [sp, #16]
 80252d0:	3501      	adds	r5, #1
 80252d2:	f100 8098 	bmi.w	8025406 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80252d6:	42ab      	cmp	r3, r5
 80252d8:	f340 8095 	ble.w	8025406 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80252dc:	f1b8 0f00 	cmp.w	r8, #0
 80252e0:	f000 8091 	beq.w	8025406 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80252e4:	f04f 0c03 	mov.w	ip, #3
 80252e8:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80252ec:	5cb5      	ldrb	r5, [r6, r2]
 80252ee:	fb03 620c 	mla	r2, r3, ip, r6
 80252f2:	fb03 630c 	mla	r3, r3, ip, r6
 80252f6:	7912      	ldrb	r2, [r2, #4]
 80252f8:	795e      	ldrb	r6, [r3, #5]
 80252fa:	fa1f f388 	uxth.w	r3, r8
 80252fe:	fa1f fc8a 	uxth.w	ip, sl
 8025302:	fb03 f70c 	mul.w	r7, r3, ip
 8025306:	011b      	lsls	r3, r3, #4
 8025308:	9708      	str	r7, [sp, #32]
 802530a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 802530e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8025312:	1bdb      	subs	r3, r3, r7
 8025314:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8025318:	fa1f fc8c 	uxth.w	ip, ip
 802531c:	b29b      	uxth	r3, r3
 802531e:	9709      	str	r7, [sp, #36]	@ 0x24
 8025320:	ebaa 0a0c 	sub.w	sl, sl, ip
 8025324:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025326:	930a      	str	r3, [sp, #40]	@ 0x28
 8025328:	fa1f fa8a 	uxth.w	sl, sl
 802532c:	ea6f 0807 	mvn.w	r8, r7
 8025330:	9f01      	ldr	r7, [sp, #4]
 8025332:	435f      	muls	r7, r3
 8025334:	9b05      	ldr	r3, [sp, #20]
 8025336:	fa5f f888 	uxtb.w	r8, r8
 802533a:	fb0a 7703 	mla	r7, sl, r3, r7
 802533e:	9b08      	ldr	r3, [sp, #32]
 8025340:	fb14 f408 	smulbb	r4, r4, r8
 8025344:	fb0c 7709 	mla	r7, ip, r9, r7
 8025348:	fb10 f008 	smulbb	r0, r0, r8
 802534c:	fb11 f108 	smulbb	r1, r1, r8
 8025350:	fb03 7705 	mla	r7, r3, r5, r7
 8025354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025356:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802535a:	fb07 4703 	mla	r7, r7, r3, r4
 802535e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025360:	b2bf      	uxth	r7, r7
 8025362:	1c7c      	adds	r4, r7, #1
 8025364:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8025368:	1224      	asrs	r4, r4, #8
 802536a:	f88b 4000 	strb.w	r4, [fp]
 802536e:	9c02      	ldr	r4, [sp, #8]
 8025370:	435c      	muls	r4, r3
 8025372:	9b06      	ldr	r3, [sp, #24]
 8025374:	fb0a 4403 	mla	r4, sl, r3, r4
 8025378:	9b04      	ldr	r3, [sp, #16]
 802537a:	fb0c 4403 	mla	r4, ip, r3, r4
 802537e:	9b08      	ldr	r3, [sp, #32]
 8025380:	fb03 4402 	mla	r4, r3, r2, r4
 8025384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025386:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025388:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802538c:	fb04 0403 	mla	r4, r4, r3, r0
 8025390:	9b03      	ldr	r3, [sp, #12]
 8025392:	435a      	muls	r2, r3
 8025394:	b2a4      	uxth	r4, r4
 8025396:	4613      	mov	r3, r2
 8025398:	9a07      	ldr	r2, [sp, #28]
 802539a:	1c60      	adds	r0, r4, #1
 802539c:	fb0a 3a02 	mla	sl, sl, r2, r3
 80253a0:	9b08      	ldr	r3, [sp, #32]
 80253a2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80253a6:	fb0c ac0e 	mla	ip, ip, lr, sl
 80253aa:	1224      	asrs	r4, r4, #8
 80253ac:	fb03 c606 	mla	r6, r3, r6, ip
 80253b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253b2:	f88b 4001 	strb.w	r4, [fp, #1]
 80253b6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80253ba:	fb06 1103 	mla	r1, r6, r3, r1
 80253be:	b289      	uxth	r1, r1
 80253c0:	1c4e      	adds	r6, r1, #1
 80253c2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80253c6:	1209      	asrs	r1, r1, #8
 80253c8:	f88b 1002 	strb.w	r1, [fp, #2]
 80253cc:	b00d      	add	sp, #52	@ 0x34
 80253ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80253d6:	9405      	str	r4, [sp, #20]
 80253d8:	e74d      	b.n	8025276 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 80253da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80253de:	9401      	str	r4, [sp, #4]
 80253e0:	9405      	str	r4, [sp, #20]
 80253e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80253e6:	e756      	b.n	8025296 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80253e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80253ec:	9401      	str	r4, [sp, #4]
 80253ee:	e752      	b.n	8025296 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80253f0:	468e      	mov	lr, r1
 80253f2:	9004      	str	r0, [sp, #16]
 80253f4:	46a1      	mov	r9, r4
 80253f6:	e76b      	b.n	80252d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80253f8:	460e      	mov	r6, r1
 80253fa:	4602      	mov	r2, r0
 80253fc:	4625      	mov	r5, r4
 80253fe:	468e      	mov	lr, r1
 8025400:	9004      	str	r0, [sp, #16]
 8025402:	46a1      	mov	r9, r4
 8025404:	e779      	b.n	80252fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8025406:	460e      	mov	r6, r1
 8025408:	4602      	mov	r2, r0
 802540a:	4625      	mov	r5, r4
 802540c:	e775      	b.n	80252fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0802540e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802540e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025412:	b09f      	sub	sp, #124	@ 0x7c
 8025414:	920e      	str	r2, [sp, #56]	@ 0x38
 8025416:	9307      	str	r3, [sp, #28]
 8025418:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802541a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 802541e:	901d      	str	r0, [sp, #116]	@ 0x74
 8025420:	930c      	str	r3, [sp, #48]	@ 0x30
 8025422:	6850      	ldr	r0, [r2, #4]
 8025424:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025426:	6812      	ldr	r2, [r2, #0]
 8025428:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802542c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8025430:	fb00 1303 	mla	r3, r0, r3, r1
 8025434:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025438:	18d3      	adds	r3, r2, r3
 802543a:	9308      	str	r3, [sp, #32]
 802543c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802543e:	681b      	ldr	r3, [r3, #0]
 8025440:	930a      	str	r3, [sp, #40]	@ 0x28
 8025442:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025444:	43db      	mvns	r3, r3
 8025446:	b2db      	uxtb	r3, r3
 8025448:	9309      	str	r3, [sp, #36]	@ 0x24
 802544a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802544c:	2b00      	cmp	r3, #0
 802544e:	dc03      	bgt.n	8025458 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025452:	2b00      	cmp	r3, #0
 8025454:	f340 81f5 	ble.w	8025842 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025458:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802545a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802545e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025462:	1e48      	subs	r0, r1, #1
 8025464:	1e54      	subs	r4, r2, #1
 8025466:	9b07      	ldr	r3, [sp, #28]
 8025468:	2b00      	cmp	r3, #0
 802546a:	f340 80d5 	ble.w	8025618 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802546e:	ea5f 452a 	movs.w	r5, sl, asr #16
 8025472:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025476:	d406      	bmi.n	8025486 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025478:	4285      	cmp	r5, r0
 802547a:	da04      	bge.n	8025486 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802547c:	2b00      	cmp	r3, #0
 802547e:	db02      	blt.n	8025486 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025480:	42a3      	cmp	r3, r4
 8025482:	f2c0 80ca 	blt.w	802561a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025486:	3501      	adds	r5, #1
 8025488:	f100 80bb 	bmi.w	8025602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802548c:	42a9      	cmp	r1, r5
 802548e:	f2c0 80b8 	blt.w	8025602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025492:	3301      	adds	r3, #1
 8025494:	f100 80b5 	bmi.w	8025602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025498:	429a      	cmp	r2, r3
 802549a:	f2c0 80b2 	blt.w	8025602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802549e:	9b07      	ldr	r3, [sp, #28]
 80254a0:	9d08      	ldr	r5, [sp, #32]
 80254a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80254a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80254a6:	2b00      	cmp	r3, #0
 80254a8:	f340 80d6 	ble.w	8025658 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80254ac:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 80254ae:	ea4f 4428 	mov.w	r4, r8, asr #16
 80254b2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80254b4:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80254b8:	68c6      	ldr	r6, [r0, #12]
 80254ba:	ea5f 402a 	movs.w	r0, sl, asr #16
 80254be:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80254c2:	689b      	ldr	r3, [r3, #8]
 80254c4:	f100 810f 	bmi.w	80256e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80254c8:	1e5f      	subs	r7, r3, #1
 80254ca:	42b8      	cmp	r0, r7
 80254cc:	f280 810b 	bge.w	80256e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80254d0:	2c00      	cmp	r4, #0
 80254d2:	f2c0 8108 	blt.w	80256e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80254d6:	1e77      	subs	r7, r6, #1
 80254d8:	42bc      	cmp	r4, r7
 80254da:	f280 8104 	bge.w	80256e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80254de:	b21b      	sxth	r3, r3
 80254e0:	fb04 0003 	mla	r0, r4, r3, r0
 80254e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80254e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80254ea:	1826      	adds	r6, r4, r0
 80254ec:	5c24      	ldrb	r4, [r4, r0]
 80254ee:	78b7      	ldrb	r7, [r6, #2]
 80254f0:	7870      	ldrb	r0, [r6, #1]
 80254f2:	970f      	str	r7, [sp, #60]	@ 0x3c
 80254f4:	7977      	ldrb	r7, [r6, #5]
 80254f6:	f896 e003 	ldrb.w	lr, [r6, #3]
 80254fa:	f896 c004 	ldrb.w	ip, [r6, #4]
 80254fe:	9710      	str	r7, [sp, #64]	@ 0x40
 8025500:	b1c9      	cbz	r1, 8025536 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025502:	f04f 0b03 	mov.w	fp, #3
 8025506:	f06f 0904 	mvn.w	r9, #4
 802550a:	3605      	adds	r6, #5
 802550c:	fb13 930b 	smlabb	r3, r3, fp, r9
 8025510:	eb06 0b03 	add.w	fp, r6, r3
 8025514:	5cf3      	ldrb	r3, [r6, r3]
 8025516:	9311      	str	r3, [sp, #68]	@ 0x44
 8025518:	f89b 3001 	ldrb.w	r3, [fp, #1]
 802551c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802551e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8025522:	9315      	str	r3, [sp, #84]	@ 0x54
 8025524:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8025528:	9312      	str	r3, [sp, #72]	@ 0x48
 802552a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 802552e:	9314      	str	r3, [sp, #80]	@ 0x50
 8025530:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8025534:	9316      	str	r3, [sp, #88]	@ 0x58
 8025536:	b292      	uxth	r2, r2
 8025538:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 802553a:	b289      	uxth	r1, r1
 802553c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8025540:	fb02 f601 	mul.w	r6, r2, r1
 8025544:	0112      	lsls	r2, r2, #4
 8025546:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802554a:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 802554e:	1b92      	subs	r2, r2, r6
 8025550:	b289      	uxth	r1, r1
 8025552:	b292      	uxth	r2, r2
 8025554:	eba9 0901 	sub.w	r9, r9, r1
 8025558:	fb02 fe0e 	mul.w	lr, r2, lr
 802555c:	fa1f f989 	uxth.w	r9, r9
 8025560:	fb02 fc0c 	mul.w	ip, r2, ip
 8025564:	fb09 e404 	mla	r4, r9, r4, lr
 8025568:	f895 e000 	ldrb.w	lr, [r5]
 802556c:	fb09 c000 	mla	r0, r9, r0, ip
 8025570:	fb01 4407 	mla	r4, r1, r7, r4
 8025574:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8025576:	fb06 4407 	mla	r4, r6, r7, r4
 802557a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802557c:	fb1e fe07 	smulbb	lr, lr, r7
 8025580:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025584:	fb04 e403 	mla	r4, r4, r3, lr
 8025588:	b2a4      	uxth	r4, r4
 802558a:	f104 0e01 	add.w	lr, r4, #1
 802558e:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8025592:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025594:	fb01 0004 	mla	r0, r1, r4, r0
 8025598:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802559a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802559e:	fb06 0004 	mla	r0, r6, r4, r0
 80255a2:	786c      	ldrb	r4, [r5, #1]
 80255a4:	f885 e000 	strb.w	lr, [r5]
 80255a8:	fb14 f407 	smulbb	r4, r4, r7
 80255ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80255b0:	fb00 4003 	mla	r0, r0, r3, r4
 80255b4:	b280      	uxth	r0, r0
 80255b6:	1c44      	adds	r4, r0, #1
 80255b8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80255bc:	1200      	asrs	r0, r0, #8
 80255be:	7068      	strb	r0, [r5, #1]
 80255c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80255c2:	4342      	muls	r2, r0
 80255c4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80255c6:	fb09 2200 	mla	r2, r9, r0, r2
 80255ca:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80255cc:	fb01 2100 	mla	r1, r1, r0, r2
 80255d0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80255d2:	fb06 1602 	mla	r6, r6, r2, r1
 80255d6:	78a9      	ldrb	r1, [r5, #2]
 80255d8:	fb11 f107 	smulbb	r1, r1, r7
 80255dc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80255e0:	fb06 1303 	mla	r3, r6, r3, r1
 80255e4:	b29b      	uxth	r3, r3
 80255e6:	1c5e      	adds	r6, r3, #1
 80255e8:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80255ec:	121b      	asrs	r3, r3, #8
 80255ee:	70ab      	strb	r3, [r5, #2]
 80255f0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80255f2:	3503      	adds	r5, #3
 80255f4:	449a      	add	sl, r3
 80255f6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80255f8:	4498      	add	r8, r3
 80255fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80255fc:	3b01      	subs	r3, #1
 80255fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8025600:	e750      	b.n	80254a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025602:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025604:	449a      	add	sl, r3
 8025606:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025608:	4498      	add	r8, r3
 802560a:	9b07      	ldr	r3, [sp, #28]
 802560c:	3b01      	subs	r3, #1
 802560e:	9307      	str	r3, [sp, #28]
 8025610:	9b08      	ldr	r3, [sp, #32]
 8025612:	3303      	adds	r3, #3
 8025614:	9308      	str	r3, [sp, #32]
 8025616:	e726      	b.n	8025466 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025618:	d026      	beq.n	8025668 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802561a:	9b07      	ldr	r3, [sp, #28]
 802561c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802561e:	3b01      	subs	r3, #1
 8025620:	fb00 a003 	mla	r0, r0, r3, sl
 8025624:	1400      	asrs	r0, r0, #16
 8025626:	f53f af3a 	bmi.w	802549e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802562a:	3901      	subs	r1, #1
 802562c:	4288      	cmp	r0, r1
 802562e:	f6bf af36 	bge.w	802549e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025632:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8025634:	fb01 8303 	mla	r3, r1, r3, r8
 8025638:	141b      	asrs	r3, r3, #16
 802563a:	f53f af30 	bmi.w	802549e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802563e:	3a01      	subs	r2, #1
 8025640:	4293      	cmp	r3, r2
 8025642:	f6bf af2c 	bge.w	802549e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025646:	9b08      	ldr	r3, [sp, #32]
 8025648:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802564c:	1cdd      	adds	r5, r3, #3
 802564e:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 8025652:	f1bc 0f00 	cmp.w	ip, #0
 8025656:	dc5f      	bgt.n	8025718 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8025658:	9b07      	ldr	r3, [sp, #28]
 802565a:	9a08      	ldr	r2, [sp, #32]
 802565c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025664:	441a      	add	r2, r3
 8025666:	9208      	str	r2, [sp, #32]
 8025668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802566a:	2b00      	cmp	r3, #0
 802566c:	f340 80e9 	ble.w	8025842 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025670:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025674:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025676:	ee30 0a04 	vadd.f32	s0, s0, s8
 802567a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802567e:	eef0 6a62 	vmov.f32	s13, s5
 8025682:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025686:	ee31 1a05 	vadd.f32	s2, s2, s10
 802568a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802568e:	ee16 aa90 	vmov	sl, s13
 8025692:	eef0 6a43 	vmov.f32	s13, s6
 8025696:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802569a:	ee16 8a90 	vmov	r8, s13
 802569e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80256a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80256a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80256aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80256ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80256b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80256b6:	ee12 2a90 	vmov	r2, s5
 80256ba:	eef0 2a47 	vmov.f32	s5, s14
 80256be:	fb92 f3f3 	sdiv	r3, r2, r3
 80256c2:	ee13 2a10 	vmov	r2, s6
 80256c6:	932b      	str	r3, [sp, #172]	@ 0xac
 80256c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80256ca:	eeb0 3a67 	vmov.f32	s6, s15
 80256ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80256d2:	932c      	str	r3, [sp, #176]	@ 0xb0
 80256d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80256d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80256d8:	3b01      	subs	r3, #1
 80256da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80256dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80256de:	bf08      	it	eq
 80256e0:	4613      	moveq	r3, r2
 80256e2:	9307      	str	r3, [sp, #28]
 80256e4:	e6b1      	b.n	802544a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80256e6:	1c47      	adds	r7, r0, #1
 80256e8:	d482      	bmi.n	80255f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80256ea:	42bb      	cmp	r3, r7
 80256ec:	db80      	blt.n	80255f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80256ee:	1c67      	adds	r7, r4, #1
 80256f0:	f53f af7e 	bmi.w	80255f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80256f4:	42be      	cmp	r6, r7
 80256f6:	f6ff af7b 	blt.w	80255f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80256fa:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80256fc:	b236      	sxth	r6, r6
 80256fe:	9001      	str	r0, [sp, #4]
 8025700:	b21b      	sxth	r3, r3
 8025702:	9600      	str	r6, [sp, #0]
 8025704:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025706:	e9cd 1704 	strd	r1, r7, [sp, #16]
 802570a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802570e:	4629      	mov	r1, r5
 8025710:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025712:	f7ff fd82 	bl	802521a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8025716:	e76b      	b.n	80255f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8025718:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 802571a:	ea4f 402a 	mov.w	r0, sl, asr #16
 802571e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8025722:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8025726:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802572a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802572e:	fb07 0101 	mla	r1, r7, r1, r0
 8025732:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025734:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025738:	1844      	adds	r4, r0, r1
 802573a:	5c40      	ldrb	r0, [r0, r1]
 802573c:	78a6      	ldrb	r6, [r4, #2]
 802573e:	7861      	ldrb	r1, [r4, #1]
 8025740:	960f      	str	r6, [sp, #60]	@ 0x3c
 8025742:	78e6      	ldrb	r6, [r4, #3]
 8025744:	910d      	str	r1, [sp, #52]	@ 0x34
 8025746:	9610      	str	r6, [sp, #64]	@ 0x40
 8025748:	f894 9004 	ldrb.w	r9, [r4, #4]
 802574c:	f894 b005 	ldrb.w	fp, [r4, #5]
 8025750:	b192      	cbz	r2, 8025778 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8025752:	f06f 0604 	mvn.w	r6, #4
 8025756:	2103      	movs	r1, #3
 8025758:	3405      	adds	r4, #5
 802575a:	fb17 6701 	smlabb	r7, r7, r1, r6
 802575e:	19e6      	adds	r6, r4, r7
 8025760:	5de4      	ldrb	r4, [r4, r7]
 8025762:	9417      	str	r4, [sp, #92]	@ 0x5c
 8025764:	7874      	ldrb	r4, [r6, #1]
 8025766:	9419      	str	r4, [sp, #100]	@ 0x64
 8025768:	78b4      	ldrb	r4, [r6, #2]
 802576a:	941b      	str	r4, [sp, #108]	@ 0x6c
 802576c:	78f4      	ldrb	r4, [r6, #3]
 802576e:	9418      	str	r4, [sp, #96]	@ 0x60
 8025770:	7934      	ldrb	r4, [r6, #4]
 8025772:	941a      	str	r4, [sp, #104]	@ 0x68
 8025774:	7974      	ldrb	r4, [r6, #5]
 8025776:	941c      	str	r4, [sp, #112]	@ 0x70
 8025778:	b29b      	uxth	r3, r3
 802577a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 802577c:	b292      	uxth	r2, r2
 802577e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025780:	3503      	adds	r5, #3
 8025782:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025786:	fb03 f402 	mul.w	r4, r3, r2
 802578a:	011b      	lsls	r3, r3, #4
 802578c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8025790:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8025794:	1b1b      	subs	r3, r3, r4
 8025796:	b292      	uxth	r2, r2
 8025798:	b29b      	uxth	r3, r3
 802579a:	1ab6      	subs	r6, r6, r2
 802579c:	435f      	muls	r7, r3
 802579e:	b2b6      	uxth	r6, r6
 80257a0:	fb03 f909 	mul.w	r9, r3, r9
 80257a4:	fb03 fb0b 	mul.w	fp, r3, fp
 80257a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80257aa:	fb06 7000 	mla	r0, r6, r0, r7
 80257ae:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80257b0:	fb06 bb03 	mla	fp, r6, r3, fp
 80257b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80257b6:	fb02 0007 	mla	r0, r2, r7, r0
 80257ba:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 80257bc:	fb02 bb03 	mla	fp, r2, r3, fp
 80257c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80257c2:	fb04 0007 	mla	r0, r4, r7, r0
 80257c6:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80257ca:	fb17 f701 	smulbb	r7, r7, r1
 80257ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80257d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80257d4:	fb00 700e 	mla	r0, r0, lr, r7
 80257d8:	fb06 9101 	mla	r1, r6, r1, r9
 80257dc:	b280      	uxth	r0, r0
 80257de:	1c47      	adds	r7, r0, #1
 80257e0:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80257e4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80257e6:	1200      	asrs	r0, r0, #8
 80257e8:	f805 0c06 	strb.w	r0, [r5, #-6]
 80257ec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80257ee:	fb02 1100 	mla	r1, r2, r0, r1
 80257f2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80257f4:	fb04 1100 	mla	r1, r4, r0, r1
 80257f8:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80257fc:	fb04 b403 	mla	r4, r4, r3, fp
 8025800:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8025804:	fb10 f007 	smulbb	r0, r0, r7
 8025808:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802580c:	fb13 f307 	smulbb	r3, r3, r7
 8025810:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025814:	fb01 010e 	mla	r1, r1, lr, r0
 8025818:	fb04 340e 	mla	r4, r4, lr, r3
 802581c:	b289      	uxth	r1, r1
 802581e:	b2a4      	uxth	r4, r4
 8025820:	1c48      	adds	r0, r1, #1
 8025822:	1c63      	adds	r3, r4, #1
 8025824:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8025828:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802582c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802582e:	1209      	asrs	r1, r1, #8
 8025830:	1224      	asrs	r4, r4, #8
 8025832:	449a      	add	sl, r3
 8025834:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025836:	f805 1c05 	strb.w	r1, [r5, #-5]
 802583a:	f805 4c04 	strb.w	r4, [r5, #-4]
 802583e:	4498      	add	r8, r3
 8025840:	e707      	b.n	8025652 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025842:	b01f      	add	sp, #124	@ 0x7c
 8025844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025848 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8025848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802584c:	b087      	sub	sp, #28
 802584e:	780d      	ldrb	r5, [r1, #0]
 8025850:	784c      	ldrb	r4, [r1, #1]
 8025852:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8025856:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 802585a:	9004      	str	r0, [sp, #16]
 802585c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8025860:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8025864:	9005      	str	r0, [sp, #20]
 8025866:	fb06 bc03 	mla	ip, r6, r3, fp
 802586a:	2e00      	cmp	r6, #0
 802586c:	7888      	ldrb	r0, [r1, #2]
 802586e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025872:	eb02 090c 	add.w	r9, r2, ip
 8025876:	f2c0 8084 	blt.w	8025982 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802587a:	42b7      	cmp	r7, r6
 802587c:	f340 8081 	ble.w	8025982 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8025880:	f1bb 0f00 	cmp.w	fp, #0
 8025884:	db79      	blt.n	802597a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8025886:	455b      	cmp	r3, fp
 8025888:	dd77      	ble.n	802597a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802588a:	f812 200c 	ldrb.w	r2, [r2, ip]
 802588e:	9201      	str	r2, [sp, #4]
 8025890:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025894:	9202      	str	r2, [sp, #8]
 8025896:	f899 2002 	ldrb.w	r2, [r9, #2]
 802589a:	9203      	str	r2, [sp, #12]
 802589c:	f11b 0201 	adds.w	r2, fp, #1
 80258a0:	d476      	bmi.n	8025990 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80258a2:	4293      	cmp	r3, r2
 80258a4:	dd74      	ble.n	8025990 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80258a6:	9a04      	ldr	r2, [sp, #16]
 80258a8:	2a00      	cmp	r2, #0
 80258aa:	d071      	beq.n	8025990 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80258ac:	f899 8003 	ldrb.w	r8, [r9, #3]
 80258b0:	f899 c004 	ldrb.w	ip, [r9, #4]
 80258b4:	f899 a005 	ldrb.w	sl, [r9, #5]
 80258b8:	3601      	adds	r6, #1
 80258ba:	d471      	bmi.n	80259a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80258bc:	42b7      	cmp	r7, r6
 80258be:	dd6f      	ble.n	80259a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80258c0:	9a05      	ldr	r2, [sp, #20]
 80258c2:	2a00      	cmp	r2, #0
 80258c4:	d06c      	beq.n	80259a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80258c6:	f1bb 0f00 	cmp.w	fp, #0
 80258ca:	db65      	blt.n	8025998 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80258cc:	455b      	cmp	r3, fp
 80258ce:	dd63      	ble.n	8025998 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80258d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80258d4:	f819 e002 	ldrb.w	lr, [r9, r2]
 80258d8:	2203      	movs	r2, #3
 80258da:	fb03 9602 	mla	r6, r3, r2, r9
 80258de:	7877      	ldrb	r7, [r6, #1]
 80258e0:	78b6      	ldrb	r6, [r6, #2]
 80258e2:	f11b 0b01 	adds.w	fp, fp, #1
 80258e6:	d40c      	bmi.n	8025902 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80258e8:	455b      	cmp	r3, fp
 80258ea:	dd0a      	ble.n	8025902 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80258ec:	9a04      	ldr	r2, [sp, #16]
 80258ee:	b142      	cbz	r2, 8025902 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80258f0:	2203      	movs	r2, #3
 80258f2:	fb13 2002 	smlabb	r0, r3, r2, r2
 80258f6:	f819 5000 	ldrb.w	r5, [r9, r0]
 80258fa:	fb03 9002 	mla	r0, r3, r2, r9
 80258fe:	7904      	ldrb	r4, [r0, #4]
 8025900:	7940      	ldrb	r0, [r0, #5]
 8025902:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8025906:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802590a:	fb03 fb02 	mul.w	fp, r3, r2
 802590e:	011b      	lsls	r3, r3, #4
 8025910:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8025914:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8025918:	eba3 030b 	sub.w	r3, r3, fp
 802591c:	b292      	uxth	r2, r2
 802591e:	b29b      	uxth	r3, r3
 8025920:	eba9 0902 	sub.w	r9, r9, r2
 8025924:	9304      	str	r3, [sp, #16]
 8025926:	fa1f f989 	uxth.w	r9, r9
 802592a:	fb03 f808 	mul.w	r8, r3, r8
 802592e:	9b01      	ldr	r3, [sp, #4]
 8025930:	fb09 8803 	mla	r8, r9, r3, r8
 8025934:	9b04      	ldr	r3, [sp, #16]
 8025936:	fb03 fc0c 	mul.w	ip, r3, ip
 802593a:	9b02      	ldr	r3, [sp, #8]
 802593c:	fb02 880e 	mla	r8, r2, lr, r8
 8025940:	fb09 cc03 	mla	ip, r9, r3, ip
 8025944:	9b04      	ldr	r3, [sp, #16]
 8025946:	fb0b 8805 	mla	r8, fp, r5, r8
 802594a:	fb02 c707 	mla	r7, r2, r7, ip
 802594e:	fb03 f30a 	mul.w	r3, r3, sl
 8025952:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025956:	fb0b 7404 	mla	r4, fp, r4, r7
 802595a:	f881 8000 	strb.w	r8, [r1]
 802595e:	1224      	asrs	r4, r4, #8
 8025960:	704c      	strb	r4, [r1, #1]
 8025962:	9c03      	ldr	r4, [sp, #12]
 8025964:	fb09 3904 	mla	r9, r9, r4, r3
 8025968:	fb02 9206 	mla	r2, r2, r6, r9
 802596c:	fb0b 2000 	mla	r0, fp, r0, r2
 8025970:	1200      	asrs	r0, r0, #8
 8025972:	7088      	strb	r0, [r1, #2]
 8025974:	b007      	add	sp, #28
 8025976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802597a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802597e:	9501      	str	r5, [sp, #4]
 8025980:	e78c      	b.n	802589c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8025982:	4682      	mov	sl, r0
 8025984:	46a4      	mov	ip, r4
 8025986:	46a8      	mov	r8, r5
 8025988:	9501      	str	r5, [sp, #4]
 802598a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802598e:	e793      	b.n	80258b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025990:	4682      	mov	sl, r0
 8025992:	46a4      	mov	ip, r4
 8025994:	46a8      	mov	r8, r5
 8025996:	e78f      	b.n	80258b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025998:	4606      	mov	r6, r0
 802599a:	4627      	mov	r7, r4
 802599c:	46ae      	mov	lr, r5
 802599e:	e7a0      	b.n	80258e2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80259a0:	4606      	mov	r6, r0
 80259a2:	4627      	mov	r7, r4
 80259a4:	46ae      	mov	lr, r5
 80259a6:	e7ac      	b.n	8025902 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080259a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80259a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259ac:	b09b      	sub	sp, #108	@ 0x6c
 80259ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 80259b0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80259b2:	9019      	str	r0, [sp, #100]	@ 0x64
 80259b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80259b6:	6850      	ldr	r0, [r2, #4]
 80259b8:	9306      	str	r3, [sp, #24]
 80259ba:	6812      	ldr	r2, [r2, #0]
 80259bc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80259c0:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 80259c4:	fb00 1303 	mla	r3, r0, r3, r1
 80259c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80259cc:	18d3      	adds	r3, r2, r3
 80259ce:	9307      	str	r3, [sp, #28]
 80259d0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80259d2:	681b      	ldr	r3, [r3, #0]
 80259d4:	9308      	str	r3, [sp, #32]
 80259d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80259d8:	2b00      	cmp	r3, #0
 80259da:	dc03      	bgt.n	80259e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80259dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80259de:	2b00      	cmp	r3, #0
 80259e0:	f340 81ab 	ble.w	8025d3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80259e4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80259e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80259ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80259ee:	1e48      	subs	r0, r1, #1
 80259f0:	1e55      	subs	r5, r2, #1
 80259f2:	9b06      	ldr	r3, [sp, #24]
 80259f4:	2b00      	cmp	r3, #0
 80259f6:	f340 80b1 	ble.w	8025b5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80259fa:	ea5f 462b 	movs.w	r6, fp, asr #16
 80259fe:	ea4f 4324 	mov.w	r3, r4, asr #16
 8025a02:	d406      	bmi.n	8025a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025a04:	4286      	cmp	r6, r0
 8025a06:	da04      	bge.n	8025a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025a08:	2b00      	cmp	r3, #0
 8025a0a:	db02      	blt.n	8025a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025a0c:	42ab      	cmp	r3, r5
 8025a0e:	f2c0 80a6 	blt.w	8025b5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025a12:	3601      	adds	r6, #1
 8025a14:	f100 8097 	bmi.w	8025b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025a18:	42b1      	cmp	r1, r6
 8025a1a:	f2c0 8094 	blt.w	8025b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025a1e:	3301      	adds	r3, #1
 8025a20:	f100 8091 	bmi.w	8025b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025a24:	429a      	cmp	r2, r3
 8025a26:	f2c0 808e 	blt.w	8025b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025a2a:	9b06      	ldr	r3, [sp, #24]
 8025a2c:	9e07      	ldr	r6, [sp, #28]
 8025a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025a32:	2b00      	cmp	r3, #0
 8025a34:	f340 80b0 	ble.w	8025b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8025a38:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8025a3a:	1425      	asrs	r5, r4, #16
 8025a3c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025a3e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025a42:	68c7      	ldr	r7, [r0, #12]
 8025a44:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025a48:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025a4c:	689b      	ldr	r3, [r3, #8]
 8025a4e:	f100 80ea 	bmi.w	8025c26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025a52:	f103 3cff 	add.w	ip, r3, #4294967295
 8025a56:	4560      	cmp	r0, ip
 8025a58:	f280 80e5 	bge.w	8025c26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025a5c:	2d00      	cmp	r5, #0
 8025a5e:	f2c0 80e2 	blt.w	8025c26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025a62:	f107 3cff 	add.w	ip, r7, #4294967295
 8025a66:	4565      	cmp	r5, ip
 8025a68:	f280 80dd 	bge.w	8025c26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025a6c:	b21b      	sxth	r3, r3
 8025a6e:	fb05 0003 	mla	r0, r5, r3, r0
 8025a72:	9d08      	ldr	r5, [sp, #32]
 8025a74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025a78:	182f      	adds	r7, r5, r0
 8025a7a:	5c2d      	ldrb	r5, [r5, r0]
 8025a7c:	7878      	ldrb	r0, [r7, #1]
 8025a7e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025a82:	900c      	str	r0, [sp, #48]	@ 0x30
 8025a84:	f897 9003 	ldrb.w	r9, [r7, #3]
 8025a88:	f897 8004 	ldrb.w	r8, [r7, #4]
 8025a8c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8025a90:	b1c9      	cbz	r1, 8025ac6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025a92:	f04f 0c03 	mov.w	ip, #3
 8025a96:	f06f 0004 	mvn.w	r0, #4
 8025a9a:	3705      	adds	r7, #5
 8025a9c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8025aa0:	eb07 0c03 	add.w	ip, r7, r3
 8025aa4:	5cfb      	ldrb	r3, [r7, r3]
 8025aa6:	930d      	str	r3, [sp, #52]	@ 0x34
 8025aa8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8025aac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025aae:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8025ab2:	9311      	str	r3, [sp, #68]	@ 0x44
 8025ab4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8025ab8:	930e      	str	r3, [sp, #56]	@ 0x38
 8025aba:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8025abe:	9310      	str	r3, [sp, #64]	@ 0x40
 8025ac0:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8025ac4:	9312      	str	r3, [sp, #72]	@ 0x48
 8025ac6:	b292      	uxth	r2, r2
 8025ac8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025aca:	b289      	uxth	r1, r1
 8025acc:	fb02 f301 	mul.w	r3, r2, r1
 8025ad0:	0112      	lsls	r2, r2, #4
 8025ad2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025ad6:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8025ada:	1ad2      	subs	r2, r2, r3
 8025adc:	b289      	uxth	r1, r1
 8025ade:	b292      	uxth	r2, r2
 8025ae0:	1a7f      	subs	r7, r7, r1
 8025ae2:	fb02 f909 	mul.w	r9, r2, r9
 8025ae6:	b2bf      	uxth	r7, r7
 8025ae8:	fb02 f808 	mul.w	r8, r2, r8
 8025aec:	fb02 fa0a 	mul.w	sl, r2, sl
 8025af0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025af2:	fb07 9905 	mla	r9, r7, r5, r9
 8025af6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025af8:	fb07 8800 	mla	r8, r7, r0, r8
 8025afc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025afe:	fb07 aa0e 	mla	sl, r7, lr, sl
 8025b02:	fb01 9905 	mla	r9, r1, r5, r9
 8025b06:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8025b08:	fb01 8800 	mla	r8, r1, r0, r8
 8025b0c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025b0e:	fb01 a102 	mla	r1, r1, r2, sl
 8025b12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025b14:	fb03 9905 	mla	r9, r3, r5, r9
 8025b18:	fb03 8800 	mla	r8, r3, r0, r8
 8025b1c:	fb03 1302 	mla	r3, r3, r2, r1
 8025b20:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025b24:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025b28:	121b      	asrs	r3, r3, #8
 8025b2a:	f886 9000 	strb.w	r9, [r6]
 8025b2e:	f886 8001 	strb.w	r8, [r6, #1]
 8025b32:	70b3      	strb	r3, [r6, #2]
 8025b34:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025b36:	3603      	adds	r6, #3
 8025b38:	449b      	add	fp, r3
 8025b3a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025b3c:	441c      	add	r4, r3
 8025b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025b40:	3b01      	subs	r3, #1
 8025b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8025b44:	e774      	b.n	8025a30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8025b46:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025b48:	449b      	add	fp, r3
 8025b4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025b4c:	441c      	add	r4, r3
 8025b4e:	9b06      	ldr	r3, [sp, #24]
 8025b50:	3b01      	subs	r3, #1
 8025b52:	9306      	str	r3, [sp, #24]
 8025b54:	9b07      	ldr	r3, [sp, #28]
 8025b56:	3303      	adds	r3, #3
 8025b58:	9307      	str	r3, [sp, #28]
 8025b5a:	e74a      	b.n	80259f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025b5c:	d024      	beq.n	8025ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025b5e:	9b06      	ldr	r3, [sp, #24]
 8025b60:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8025b62:	3b01      	subs	r3, #1
 8025b64:	fb00 b003 	mla	r0, r0, r3, fp
 8025b68:	1400      	asrs	r0, r0, #16
 8025b6a:	f53f af5e 	bmi.w	8025a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025b6e:	3901      	subs	r1, #1
 8025b70:	4288      	cmp	r0, r1
 8025b72:	f6bf af5a 	bge.w	8025a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025b76:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8025b78:	fb01 4303 	mla	r3, r1, r3, r4
 8025b7c:	141b      	asrs	r3, r3, #16
 8025b7e:	f53f af54 	bmi.w	8025a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025b82:	3a01      	subs	r2, #1
 8025b84:	4293      	cmp	r3, r2
 8025b86:	f6bf af50 	bge.w	8025a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025b8a:	9b07      	ldr	r3, [sp, #28]
 8025b8c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025b90:	1cde      	adds	r6, r3, #3
 8025b92:	f1be 0f00 	cmp.w	lr, #0
 8025b96:	dc5f      	bgt.n	8025c58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025b98:	9b06      	ldr	r3, [sp, #24]
 8025b9a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025b9e:	9b07      	ldr	r3, [sp, #28]
 8025ba0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025ba4:	4423      	add	r3, r4
 8025ba6:	9307      	str	r3, [sp, #28]
 8025ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	f340 80c5 	ble.w	8025d3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025bb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025bb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025bb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025bba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025bbe:	eef0 6a62 	vmov.f32	s13, s5
 8025bc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025bc6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025bca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025bce:	ee16 ba90 	vmov	fp, s13
 8025bd2:	eef0 6a43 	vmov.f32	s13, s6
 8025bd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025bda:	ee16 4a90 	vmov	r4, s13
 8025bde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025be2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025be6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025bea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025bee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025bf2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025bf6:	ee12 2a90 	vmov	r2, s5
 8025bfa:	eef0 2a47 	vmov.f32	s5, s14
 8025bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c02:	ee13 2a10 	vmov	r2, s6
 8025c06:	9327      	str	r3, [sp, #156]	@ 0x9c
 8025c08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025c0a:	eeb0 3a67 	vmov.f32	s6, s15
 8025c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c12:	9328      	str	r3, [sp, #160]	@ 0xa0
 8025c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025c18:	3b01      	subs	r3, #1
 8025c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025c1e:	bf08      	it	eq
 8025c20:	4613      	moveq	r3, r2
 8025c22:	9306      	str	r3, [sp, #24]
 8025c24:	e6d7      	b.n	80259d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025c26:	f110 0c01 	adds.w	ip, r0, #1
 8025c2a:	d483      	bmi.n	8025b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025c2c:	4563      	cmp	r3, ip
 8025c2e:	db81      	blt.n	8025b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025c30:	f115 0c01 	adds.w	ip, r5, #1
 8025c34:	f53f af7e 	bmi.w	8025b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025c38:	4567      	cmp	r7, ip
 8025c3a:	f6ff af7b 	blt.w	8025b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025c3e:	b23f      	sxth	r7, r7
 8025c40:	b21b      	sxth	r3, r3
 8025c42:	9700      	str	r7, [sp, #0]
 8025c44:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8025c48:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8025c4c:	9a08      	ldr	r2, [sp, #32]
 8025c4e:	4631      	mov	r1, r6
 8025c50:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8025c52:	f7ff fdf9 	bl	8025848 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8025c56:	e76d      	b.n	8025b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025c58:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8025c5a:	ea4f 402b 	mov.w	r0, fp, asr #16
 8025c5e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025c62:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025c66:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8025c6a:	1421      	asrs	r1, r4, #16
 8025c6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8025c6e:	fb0c 0101 	mla	r1, ip, r1, r0
 8025c72:	9808      	ldr	r0, [sp, #32]
 8025c74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025c78:	1845      	adds	r5, r0, r1
 8025c7a:	5c40      	ldrb	r0, [r0, r1]
 8025c7c:	796f      	ldrb	r7, [r5, #5]
 8025c7e:	7869      	ldrb	r1, [r5, #1]
 8025c80:	f895 8002 	ldrb.w	r8, [r5, #2]
 8025c84:	f895 a003 	ldrb.w	sl, [r5, #3]
 8025c88:	f895 9004 	ldrb.w	r9, [r5, #4]
 8025c8c:	970c      	str	r7, [sp, #48]	@ 0x30
 8025c8e:	b1a2      	cbz	r2, 8025cba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8025c90:	2703      	movs	r7, #3
 8025c92:	f06f 0304 	mvn.w	r3, #4
 8025c96:	3505      	adds	r5, #5
 8025c98:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8025c9c:	eb05 070c 	add.w	r7, r5, ip
 8025ca0:	f815 500c 	ldrb.w	r5, [r5, ip]
 8025ca4:	9513      	str	r5, [sp, #76]	@ 0x4c
 8025ca6:	787d      	ldrb	r5, [r7, #1]
 8025ca8:	9515      	str	r5, [sp, #84]	@ 0x54
 8025caa:	78bd      	ldrb	r5, [r7, #2]
 8025cac:	9517      	str	r5, [sp, #92]	@ 0x5c
 8025cae:	78fd      	ldrb	r5, [r7, #3]
 8025cb0:	9514      	str	r5, [sp, #80]	@ 0x50
 8025cb2:	793d      	ldrb	r5, [r7, #4]
 8025cb4:	9516      	str	r5, [sp, #88]	@ 0x58
 8025cb6:	797d      	ldrb	r5, [r7, #5]
 8025cb8:	9518      	str	r5, [sp, #96]	@ 0x60
 8025cba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8025cbe:	b292      	uxth	r2, r2
 8025cc0:	3603      	adds	r6, #3
 8025cc2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8025cc6:	fb03 f502 	mul.w	r5, r3, r2
 8025cca:	011b      	lsls	r3, r3, #4
 8025ccc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8025cd0:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8025cd4:	1b5b      	subs	r3, r3, r5
 8025cd6:	b292      	uxth	r2, r2
 8025cd8:	b29b      	uxth	r3, r3
 8025cda:	1abf      	subs	r7, r7, r2
 8025cdc:	fb03 f909 	mul.w	r9, r3, r9
 8025ce0:	b2bf      	uxth	r7, r7
 8025ce2:	fb03 fa0a 	mul.w	sl, r3, sl
 8025ce6:	fb07 9901 	mla	r9, r7, r1, r9
 8025cea:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8025cec:	fb07 aa00 	mla	sl, r7, r0, sl
 8025cf0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8025cf2:	fb02 9901 	mla	r9, r2, r1, r9
 8025cf6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8025cf8:	fb02 aa00 	mla	sl, r2, r0, sl
 8025cfc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8025cfe:	fb05 9901 	mla	r9, r5, r1, r9
 8025d02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025d04:	fb05 aa00 	mla	sl, r5, r0, sl
 8025d08:	434b      	muls	r3, r1
 8025d0a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025d0c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8025d10:	fb07 3308 	mla	r3, r7, r8, r3
 8025d14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025d18:	f806 ac06 	strb.w	sl, [r6, #-6]
 8025d1c:	fb02 3201 	mla	r2, r2, r1, r3
 8025d20:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025d22:	f806 9c05 	strb.w	r9, [r6, #-5]
 8025d26:	fb05 2503 	mla	r5, r5, r3, r2
 8025d2a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025d2c:	122d      	asrs	r5, r5, #8
 8025d2e:	449b      	add	fp, r3
 8025d30:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025d32:	f806 5c04 	strb.w	r5, [r6, #-4]
 8025d36:	441c      	add	r4, r3
 8025d38:	e72b      	b.n	8025b92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025d3a:	b01b      	add	sp, #108	@ 0x6c
 8025d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025d40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8025d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d44:	b087      	sub	sp, #28
 8025d46:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8025d4a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8025d4e:	fb05 7003 	mla	r0, r5, r3, r7
 8025d52:	2d00      	cmp	r5, #0
 8025d54:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8025d58:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8025d5c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8025d60:	f2c0 811f 	blt.w	8025fa2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8025d64:	45a8      	cmp	r8, r5
 8025d66:	f340 811c 	ble.w	8025fa2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8025d6a:	2f00      	cmp	r7, #0
 8025d6c:	f2c0 8117 	blt.w	8025f9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8025d70:	42bb      	cmp	r3, r7
 8025d72:	f340 8114 	ble.w	8025f9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8025d76:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8025d7a:	1c7a      	adds	r2, r7, #1
 8025d7c:	f100 8114 	bmi.w	8025fa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8025d80:	4293      	cmp	r3, r2
 8025d82:	f340 8111 	ble.w	8025fa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8025d86:	2c00      	cmp	r4, #0
 8025d88:	f000 8110 	beq.w	8025fac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8025d8c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8025d90:	3501      	adds	r5, #1
 8025d92:	f100 810f 	bmi.w	8025fb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8025d96:	45a8      	cmp	r8, r5
 8025d98:	f340 810c 	ble.w	8025fb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8025d9c:	f1be 0f00 	cmp.w	lr, #0
 8025da0:	f000 810b 	beq.w	8025fba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8025da4:	2f00      	cmp	r7, #0
 8025da6:	f2c0 8103 	blt.w	8025fb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8025daa:	42bb      	cmp	r3, r7
 8025dac:	f340 8100 	ble.w	8025fb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8025db0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8025db4:	3701      	adds	r7, #1
 8025db6:	f100 8103 	bmi.w	8025fc0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8025dba:	42bb      	cmp	r3, r7
 8025dbc:	f340 8100 	ble.w	8025fc0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8025dc0:	2c00      	cmp	r4, #0
 8025dc2:	f000 80ff 	beq.w	8025fc4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8025dc6:	3301      	adds	r3, #1
 8025dc8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025dcc:	fa1f fc84 	uxth.w	ip, r4
 8025dd0:	fa1f fe8e 	uxth.w	lr, lr
 8025dd4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025dd8:	fb0c f90e 	mul.w	r9, ip, lr
 8025ddc:	0e13      	lsrs	r3, r2, #24
 8025dde:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8025de2:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8025de6:	9302      	str	r3, [sp, #8]
 8025de8:	ebac 0709 	sub.w	r7, ip, r9
 8025dec:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8025df0:	fa1f f48e 	uxth.w	r4, lr
 8025df4:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8025df8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025dfc:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8025e00:	fb0a fe0e 	mul.w	lr, sl, lr
 8025e04:	1b1b      	subs	r3, r3, r4
 8025e06:	fb0a f606 	mul.w	r6, sl, r6
 8025e0a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8025e0e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025e12:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8025e16:	b29b      	uxth	r3, r3
 8025e18:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e1c:	b2bf      	uxth	r7, r7
 8025e1e:	9301      	str	r3, [sp, #4]
 8025e20:	44e6      	add	lr, ip
 8025e22:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8025e26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e2a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025e2e:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8025e32:	9303      	str	r3, [sp, #12]
 8025e34:	0a33      	lsrs	r3, r6, #8
 8025e36:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8025e3a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025e3e:	9304      	str	r3, [sp, #16]
 8025e40:	fb0b f606 	mul.w	r6, fp, r6
 8025e44:	fb0b f000 	mul.w	r0, fp, r0
 8025e48:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8025e4c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025e50:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025e54:	44b6      	add	lr, r6
 8025e56:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8025e5a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8025e5e:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8025e62:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8025e66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e6a:	fb08 f606 	mul.w	r6, r8, r6
 8025e6e:	0a03      	lsrs	r3, r0, #8
 8025e70:	fb08 f505 	mul.w	r5, r8, r5
 8025e74:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025e78:	0a30      	lsrs	r0, r6, #8
 8025e7a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025e7e:	9305      	str	r3, [sp, #20]
 8025e80:	0e13      	lsrs	r3, r2, #24
 8025e82:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025e86:	fb0e fe07 	mul.w	lr, lr, r7
 8025e8a:	4430      	add	r0, r6
 8025e8c:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8025e90:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8025e94:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8025e98:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025e9c:	0a00      	lsrs	r0, r0, #8
 8025e9e:	435e      	muls	r6, r3
 8025ea0:	0a2d      	lsrs	r5, r5, #8
 8025ea2:	435a      	muls	r2, r3
 8025ea4:	9b03      	ldr	r3, [sp, #12]
 8025ea6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8025eaa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025eae:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025eb2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025eb6:	44b4      	add	ip, r6
 8025eb8:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8025ebc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ec0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8025ec4:	9e01      	ldr	r6, [sp, #4]
 8025ec6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025eca:	fb03 ee06 	mla	lr, r3, r6, lr
 8025ece:	9b04      	ldr	r3, [sp, #16]
 8025ed0:	0a12      	lsrs	r2, r2, #8
 8025ed2:	fb0c ee09 	mla	lr, ip, r9, lr
 8025ed6:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8025eda:	9b05      	ldr	r3, [sp, #20]
 8025edc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025ee0:	fb00 ee04 	mla	lr, r0, r4, lr
 8025ee4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ee8:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8025eec:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8025ef0:	9b01      	ldr	r3, [sp, #4]
 8025ef2:	fb07 fe0e 	mul.w	lr, r7, lr
 8025ef6:	fb07 f70b 	mul.w	r7, r7, fp
 8025efa:	fb03 ee06 	mla	lr, r3, r6, lr
 8025efe:	fb03 730a 	mla	r3, r3, sl, r7
 8025f02:	fb09 e202 	mla	r2, r9, r2, lr
 8025f06:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8025f0a:	fb04 2e0e 	mla	lr, r4, lr, r2
 8025f0e:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8025f12:	fb04 3408 	mla	r4, r4, r8, r3
 8025f16:	9b02      	ldr	r3, [sp, #8]
 8025f18:	b292      	uxth	r2, r2
 8025f1a:	fb09 4903 	mla	r9, r9, r3, r4
 8025f1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f22:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8025f26:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8025f2a:	fb09 f902 	mul.w	r9, r9, r2
 8025f2e:	ea40 0e0e 	orr.w	lr, r0, lr
 8025f32:	f109 0301 	add.w	r3, r9, #1
 8025f36:	fa5f f08e 	uxtb.w	r0, lr
 8025f3a:	fb10 f002 	smulbb	r0, r0, r2
 8025f3e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8025f42:	780b      	ldrb	r3, [r1, #0]
 8025f44:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8025f48:	fa5f f989 	uxtb.w	r9, r9
 8025f4c:	fb03 0309 	mla	r3, r3, r9, r0
 8025f50:	b29b      	uxth	r3, r3
 8025f52:	1c58      	adds	r0, r3, #1
 8025f54:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025f58:	7848      	ldrb	r0, [r1, #1]
 8025f5a:	fb10 f009 	smulbb	r0, r0, r9
 8025f5e:	121b      	asrs	r3, r3, #8
 8025f60:	700b      	strb	r3, [r1, #0]
 8025f62:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8025f66:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025f6a:	fb03 0302 	mla	r3, r3, r2, r0
 8025f6e:	b29b      	uxth	r3, r3
 8025f70:	1c58      	adds	r0, r3, #1
 8025f72:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025f76:	121b      	asrs	r3, r3, #8
 8025f78:	704b      	strb	r3, [r1, #1]
 8025f7a:	788b      	ldrb	r3, [r1, #2]
 8025f7c:	fb13 f909 	smulbb	r9, r3, r9
 8025f80:	fb0e 9e02 	mla	lr, lr, r2, r9
 8025f84:	fa1f fe8e 	uxth.w	lr, lr
 8025f88:	f10e 0301 	add.w	r3, lr, #1
 8025f8c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025f90:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025f94:	f881 e002 	strb.w	lr, [r1, #2]
 8025f98:	b007      	add	sp, #28
 8025f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f9e:	2600      	movs	r6, #0
 8025fa0:	e6eb      	b.n	8025d7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8025fa2:	2000      	movs	r0, #0
 8025fa4:	4606      	mov	r6, r0
 8025fa6:	e6f3      	b.n	8025d90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025fa8:	2000      	movs	r0, #0
 8025faa:	e6f1      	b.n	8025d90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025fac:	4620      	mov	r0, r4
 8025fae:	e6ef      	b.n	8025d90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8025fb0:	2500      	movs	r5, #0
 8025fb2:	e6ff      	b.n	8025db4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8025fb4:	2200      	movs	r2, #0
 8025fb6:	4615      	mov	r5, r2
 8025fb8:	e708      	b.n	8025dcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025fba:	4672      	mov	r2, lr
 8025fbc:	4675      	mov	r5, lr
 8025fbe:	e705      	b.n	8025dcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025fc0:	2200      	movs	r2, #0
 8025fc2:	e703      	b.n	8025dcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025fc4:	4622      	mov	r2, r4
 8025fc6:	e701      	b.n	8025dcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08025fc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fcc:	b09d      	sub	sp, #116	@ 0x74
 8025fce:	9219      	str	r2, [sp, #100]	@ 0x64
 8025fd0:	9307      	str	r3, [sp, #28]
 8025fd2:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8025fd4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8025fd8:	901b      	str	r0, [sp, #108]	@ 0x6c
 8025fda:	931a      	str	r3, [sp, #104]	@ 0x68
 8025fdc:	6850      	ldr	r0, [r2, #4]
 8025fde:	9117      	str	r1, [sp, #92]	@ 0x5c
 8025fe0:	6812      	ldr	r2, [r2, #0]
 8025fe2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8025fe6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8025fea:	fb00 1303 	mla	r3, r0, r3, r1
 8025fee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025ff2:	18d3      	adds	r3, r2, r3
 8025ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8025ff6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025ff8:	681b      	ldr	r3, [r3, #0]
 8025ffa:	9310      	str	r3, [sp, #64]	@ 0x40
 8025ffc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8026000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026002:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026004:	2b00      	cmp	r3, #0
 8026006:	dc03      	bgt.n	8026010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802600a:	2b00      	cmp	r3, #0
 802600c:	f340 8368 	ble.w	80266e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026010:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026012:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026016:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802601a:	1e48      	subs	r0, r1, #1
 802601c:	1e57      	subs	r7, r2, #1
 802601e:	9b07      	ldr	r3, [sp, #28]
 8026020:	2b00      	cmp	r3, #0
 8026022:	f340 8187 	ble.w	8026334 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026026:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802602a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802602e:	d406      	bmi.n	802603e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026030:	4584      	cmp	ip, r0
 8026032:	da04      	bge.n	802603e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026034:	2b00      	cmp	r3, #0
 8026036:	db02      	blt.n	802603e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026038:	42bb      	cmp	r3, r7
 802603a:	f2c0 817c 	blt.w	8026336 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802603e:	f11c 0c01 	adds.w	ip, ip, #1
 8026042:	f100 816c 	bmi.w	802631e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026046:	4561      	cmp	r1, ip
 8026048:	f2c0 8169 	blt.w	802631e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802604c:	3301      	adds	r3, #1
 802604e:	f100 8166 	bmi.w	802631e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026052:	429a      	cmp	r2, r3
 8026054:	f2c0 8163 	blt.w	802631e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026058:	9b07      	ldr	r3, [sp, #28]
 802605a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802605c:	9318      	str	r3, [sp, #96]	@ 0x60
 802605e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026060:	2b00      	cmp	r3, #0
 8026062:	f340 8186 	ble.w	8026372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026066:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026068:	142a      	asrs	r2, r5, #16
 802606a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802606e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026072:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026076:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802607a:	f100 81cb 	bmi.w	8026414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802607e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026082:	4542      	cmp	r2, r8
 8026084:	f280 81c6 	bge.w	8026414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026088:	2800      	cmp	r0, #0
 802608a:	f2c0 81c3 	blt.w	8026414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802608e:	f103 38ff 	add.w	r8, r3, #4294967295
 8026092:	4540      	cmp	r0, r8
 8026094:	f280 81be 	bge.w	8026414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026098:	fa0f f38e 	sxth.w	r3, lr
 802609c:	fb00 2203 	mla	r2, r0, r3, r2
 80260a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80260a2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80260a6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80260aa:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80260ae:	2900      	cmp	r1, #0
 80260b0:	f000 81a6 	beq.w	8026400 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80260b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80260b8:	900c      	str	r0, [sp, #48]	@ 0x30
 80260ba:	0e00      	lsrs	r0, r0, #24
 80260bc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80260be:	f1bc 0f00 	cmp.w	ip, #0
 80260c2:	d00f      	beq.n	80260e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80260c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80260c8:	3b01      	subs	r3, #1
 80260ca:	009b      	lsls	r3, r3, #2
 80260cc:	3304      	adds	r3, #4
 80260ce:	eb08 0003 	add.w	r0, r8, r3
 80260d2:	f858 3003 	ldr.w	r3, [r8, r3]
 80260d6:	9308      	str	r3, [sp, #32]
 80260d8:	0e1b      	lsrs	r3, r3, #24
 80260da:	9311      	str	r3, [sp, #68]	@ 0x44
 80260dc:	6843      	ldr	r3, [r0, #4]
 80260de:	930d      	str	r3, [sp, #52]	@ 0x34
 80260e0:	0e1b      	lsrs	r3, r3, #24
 80260e2:	9314      	str	r3, [sp, #80]	@ 0x50
 80260e4:	b289      	uxth	r1, r1
 80260e6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80260e8:	fa1f fc8c 	uxth.w	ip, ip
 80260ec:	0108      	lsls	r0, r1, #4
 80260ee:	fb01 f90c 	mul.w	r9, r1, ip
 80260f2:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80260f6:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80260fa:	eba0 0809 	sub.w	r8, r0, r9
 80260fe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8026100:	fa1f f18c 	uxth.w	r1, ip
 8026104:	fa1f f888 	uxth.w	r8, r8
 8026108:	1a5b      	subs	r3, r3, r1
 802610a:	fb08 f000 	mul.w	r0, r8, r0
 802610e:	b29b      	uxth	r3, r3
 8026110:	fb03 000e 	mla	r0, r3, lr, r0
 8026114:	fb01 0004 	mla	r0, r1, r4, r0
 8026118:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802611a:	fb09 0004 	mla	r0, r9, r4, r0
 802611e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026122:	2800      	cmp	r0, #0
 8026124:	f000 80f2 	beq.w	802630c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026128:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802612c:	d01b      	beq.n	8026166 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802612e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8026132:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026136:	fb0e fa0a 	mul.w	sl, lr, sl
 802613a:	fb0e fe02 	mul.w	lr, lr, r2
 802613e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026142:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026146:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802614a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802614e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026152:	4452      	add	r2, sl
 8026154:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026158:	0a12      	lsrs	r2, r2, #8
 802615a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802615e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026162:	ea42 020c 	orr.w	r2, r2, ip
 8026166:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026168:	2cff      	cmp	r4, #255	@ 0xff
 802616a:	d021      	beq.n	80261b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802616c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802616e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026172:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026174:	fb04 fb0b 	mul.w	fp, r4, fp
 8026178:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802617a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802617e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026180:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026184:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026188:	fb04 fa0a 	mul.w	sl, r4, sl
 802618c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026190:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026194:	44de      	add	lr, fp
 8026196:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802619a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802619e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80261a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80261a6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80261aa:	ea4e 040a 	orr.w	r4, lr, sl
 80261ae:	940c      	str	r4, [sp, #48]	@ 0x30
 80261b0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80261b2:	2cff      	cmp	r4, #255	@ 0xff
 80261b4:	d021      	beq.n	80261fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80261b6:	9c08      	ldr	r4, [sp, #32]
 80261b8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80261bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80261be:	fb04 fb0b 	mul.w	fp, r4, fp
 80261c2:	9c08      	ldr	r4, [sp, #32]
 80261c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80261c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80261ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80261ce:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80261d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80261d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80261da:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80261de:	44de      	add	lr, fp
 80261e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80261e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80261e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80261ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80261f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80261f4:	ea4e 040a 	orr.w	r4, lr, sl
 80261f8:	9408      	str	r4, [sp, #32]
 80261fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80261fc:	2cff      	cmp	r4, #255	@ 0xff
 80261fe:	d021      	beq.n	8026244 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026200:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026202:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026206:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026208:	fb04 fb0b 	mul.w	fp, r4, fp
 802620c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802620e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026212:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026214:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026218:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802621c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026220:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026224:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026228:	44de      	add	lr, fp
 802622a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802622e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026232:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026236:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802623a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802623e:	ea4e 040a 	orr.w	r4, lr, sl
 8026242:	940d      	str	r4, [sp, #52]	@ 0x34
 8026244:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026246:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802624a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802624e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026252:	9c08      	ldr	r4, [sp, #32]
 8026254:	fb08 fc0c 	mul.w	ip, r8, ip
 8026258:	fb03 cc0e 	mla	ip, r3, lr, ip
 802625c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026260:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026262:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026266:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802626a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802626c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026270:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026274:	fb08 f80e 	mul.w	r8, r8, lr
 8026278:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802627c:	fb03 8202 	mla	r2, r3, r2, r8
 8026280:	9b08      	ldr	r3, [sp, #32]
 8026282:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026286:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802628a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802628c:	fb01 220a 	mla	r2, r1, sl, r2
 8026290:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8026294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026296:	fb09 2901 	mla	r9, r9, r1, r2
 802629a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802629c:	4343      	muls	r3, r0
 802629e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80262a2:	1c58      	adds	r0, r3, #1
 80262a4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80262a8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80262ac:	783b      	ldrb	r3, [r7, #0]
 80262ae:	ea4c 0c09 	orr.w	ip, ip, r9
 80262b2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80262b6:	fa5f f28c 	uxtb.w	r2, ip
 80262ba:	b2c0      	uxtb	r0, r0
 80262bc:	fb12 f201 	smulbb	r2, r2, r1
 80262c0:	fb03 2300 	mla	r3, r3, r0, r2
 80262c4:	b29b      	uxth	r3, r3
 80262c6:	1c5a      	adds	r2, r3, #1
 80262c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80262cc:	787a      	ldrb	r2, [r7, #1]
 80262ce:	fb12 f200 	smulbb	r2, r2, r0
 80262d2:	121b      	asrs	r3, r3, #8
 80262d4:	703b      	strb	r3, [r7, #0]
 80262d6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80262da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80262de:	fb03 2301 	mla	r3, r3, r1, r2
 80262e2:	b29b      	uxth	r3, r3
 80262e4:	1c5a      	adds	r2, r3, #1
 80262e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80262ea:	121b      	asrs	r3, r3, #8
 80262ec:	707b      	strb	r3, [r7, #1]
 80262ee:	78bb      	ldrb	r3, [r7, #2]
 80262f0:	fb13 f000 	smulbb	r0, r3, r0
 80262f4:	fb0c 0c01 	mla	ip, ip, r1, r0
 80262f8:	fa1f fc8c 	uxth.w	ip, ip
 80262fc:	f10c 0301 	add.w	r3, ip, #1
 8026300:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026304:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026308:	f887 c002 	strb.w	ip, [r7, #2]
 802630c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802630e:	3703      	adds	r7, #3
 8026310:	441d      	add	r5, r3
 8026312:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026314:	441e      	add	r6, r3
 8026316:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026318:	3b01      	subs	r3, #1
 802631a:	9318      	str	r3, [sp, #96]	@ 0x60
 802631c:	e69f      	b.n	802605e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802631e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026320:	441d      	add	r5, r3
 8026322:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026324:	441e      	add	r6, r3
 8026326:	9b07      	ldr	r3, [sp, #28]
 8026328:	3b01      	subs	r3, #1
 802632a:	9307      	str	r3, [sp, #28]
 802632c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802632e:	3303      	adds	r3, #3
 8026330:	930a      	str	r3, [sp, #40]	@ 0x28
 8026332:	e674      	b.n	802601e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026334:	d025      	beq.n	8026382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8026336:	9b07      	ldr	r3, [sp, #28]
 8026338:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802633a:	3b01      	subs	r3, #1
 802633c:	fb00 5003 	mla	r0, r0, r3, r5
 8026340:	1400      	asrs	r0, r0, #16
 8026342:	f53f ae89 	bmi.w	8026058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026346:	3901      	subs	r1, #1
 8026348:	4288      	cmp	r0, r1
 802634a:	f6bf ae85 	bge.w	8026058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802634e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8026350:	fb01 6303 	mla	r3, r1, r3, r6
 8026354:	141b      	asrs	r3, r3, #16
 8026356:	f53f ae7f 	bmi.w	8026058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802635a:	3a01      	subs	r2, #1
 802635c:	4293      	cmp	r3, r2
 802635e:	f6bf ae7b 	bge.w	8026058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026364:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026368:	f103 0e03 	add.w	lr, r3, #3
 802636c:	f1bb 0f00 	cmp.w	fp, #0
 8026370:	dc6e      	bgt.n	8026450 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8026372:	9b07      	ldr	r3, [sp, #28]
 8026374:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802637a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802637e:	4423      	add	r3, r4
 8026380:	930a      	str	r3, [sp, #40]	@ 0x28
 8026382:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026384:	2b00      	cmp	r3, #0
 8026386:	f340 81ab 	ble.w	80266e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802638a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802638e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026390:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026394:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026398:	eef0 6a62 	vmov.f32	s13, s5
 802639c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80263a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80263a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263a8:	ee16 5a90 	vmov	r5, s13
 80263ac:	eef0 6a43 	vmov.f32	s13, s6
 80263b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263b4:	ee16 6a90 	vmov	r6, s13
 80263b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80263bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80263c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80263c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80263c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80263cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80263d0:	ee12 2a90 	vmov	r2, s5
 80263d4:	eef0 2a47 	vmov.f32	s5, s14
 80263d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80263dc:	ee13 2a10 	vmov	r2, s6
 80263e0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80263e2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80263e4:	eeb0 3a67 	vmov.f32	s6, s15
 80263e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80263ec:	932a      	str	r3, [sp, #168]	@ 0xa8
 80263ee:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80263f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80263f2:	3b01      	subs	r3, #1
 80263f4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80263f6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80263f8:	bf08      	it	eq
 80263fa:	4613      	moveq	r3, r2
 80263fc:	9307      	str	r3, [sp, #28]
 80263fe:	e600      	b.n	8026002 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026400:	f1bc 0f00 	cmp.w	ip, #0
 8026404:	f43f ae6e 	beq.w	80260e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026408:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802640c:	9308      	str	r3, [sp, #32]
 802640e:	0e1b      	lsrs	r3, r3, #24
 8026410:	9311      	str	r3, [sp, #68]	@ 0x44
 8026412:	e667      	b.n	80260e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026414:	f112 0801 	adds.w	r8, r2, #1
 8026418:	f53f af78 	bmi.w	802630c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802641c:	45c6      	cmp	lr, r8
 802641e:	f6ff af75 	blt.w	802630c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026422:	f110 0801 	adds.w	r8, r0, #1
 8026426:	f53f af71 	bmi.w	802630c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802642a:	4543      	cmp	r3, r8
 802642c:	f6ff af6e 	blt.w	802630c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026430:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8026432:	b21b      	sxth	r3, r3
 8026434:	9201      	str	r2, [sp, #4]
 8026436:	9300      	str	r3, [sp, #0]
 8026438:	fa0f f38e 	sxth.w	r3, lr
 802643c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802643e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026442:	e9cd c404 	strd	ip, r4, [sp, #16]
 8026446:	4639      	mov	r1, r7
 8026448:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802644a:	f7ff fc79 	bl	8025d40 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802644e:	e75d      	b.n	802630c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026450:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026452:	142f      	asrs	r7, r5, #16
 8026454:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026456:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802645a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802645e:	1433      	asrs	r3, r6, #16
 8026460:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026464:	fb02 7303 	mla	r3, r2, r3, r7
 8026468:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 802646c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026470:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026474:	2900      	cmp	r1, #0
 8026476:	f000 812a 	beq.w	80266ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802647a:	687c      	ldr	r4, [r7, #4]
 802647c:	940e      	str	r4, [sp, #56]	@ 0x38
 802647e:	0e24      	lsrs	r4, r4, #24
 8026480:	9415      	str	r4, [sp, #84]	@ 0x54
 8026482:	b178      	cbz	r0, 80264a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026484:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8026488:	3a01      	subs	r2, #1
 802648a:	0092      	lsls	r2, r2, #2
 802648c:	3204      	adds	r2, #4
 802648e:	eb07 0802 	add.w	r8, r7, r2
 8026492:	58ba      	ldr	r2, [r7, r2]
 8026494:	9209      	str	r2, [sp, #36]	@ 0x24
 8026496:	0e12      	lsrs	r2, r2, #24
 8026498:	9212      	str	r2, [sp, #72]	@ 0x48
 802649a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802649e:	920f      	str	r2, [sp, #60]	@ 0x3c
 80264a0:	0e12      	lsrs	r2, r2, #24
 80264a2:	9216      	str	r2, [sp, #88]	@ 0x58
 80264a4:	b289      	uxth	r1, r1
 80264a6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80264a8:	b280      	uxth	r0, r0
 80264aa:	fb01 f900 	mul.w	r9, r1, r0
 80264ae:	0109      	lsls	r1, r1, #4
 80264b0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80264b4:	eba1 0809 	sub.w	r8, r1, r9
 80264b8:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 80264bc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80264be:	b280      	uxth	r0, r0
 80264c0:	fa1f f888 	uxth.w	r8, r8
 80264c4:	1a12      	subs	r2, r2, r0
 80264c6:	fb08 f101 	mul.w	r1, r8, r1
 80264ca:	b292      	uxth	r2, r2
 80264cc:	fb02 110c 	mla	r1, r2, ip, r1
 80264d0:	fb00 1104 	mla	r1, r0, r4, r1
 80264d4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80264d6:	fb09 1104 	mla	r1, r9, r4, r1
 80264da:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80264de:	2900      	cmp	r1, #0
 80264e0:	f000 80ec 	beq.w	80266bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80264e4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80264e8:	d019      	beq.n	802651e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80264ea:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80264ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80264f2:	fb0c fa0a 	mul.w	sl, ip, sl
 80264f6:	fb0c fc03 	mul.w	ip, ip, r3
 80264fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80264fe:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026502:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026506:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802650a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802650e:	4453      	add	r3, sl
 8026510:	0a3f      	lsrs	r7, r7, #8
 8026512:	0a1b      	lsrs	r3, r3, #8
 8026514:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026518:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802651c:	433b      	orrs	r3, r7
 802651e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026520:	2cff      	cmp	r4, #255	@ 0xff
 8026522:	d020      	beq.n	8026566 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8026524:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026526:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802652a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802652c:	4367      	muls	r7, r4
 802652e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026530:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026534:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026538:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802653a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802653e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026542:	fb04 fa0a 	mul.w	sl, r4, sl
 8026546:	44bc      	add	ip, r7
 8026548:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802654c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026550:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026554:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026558:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802655c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026560:	ea4c 040a 	orr.w	r4, ip, sl
 8026564:	940e      	str	r4, [sp, #56]	@ 0x38
 8026566:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026568:	2cff      	cmp	r4, #255	@ 0xff
 802656a:	d020      	beq.n	80265ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802656c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802656e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026572:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026574:	4367      	muls	r7, r4
 8026576:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026578:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802657c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026580:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026582:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026586:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802658a:	fb04 fa0a 	mul.w	sl, r4, sl
 802658e:	44bc      	add	ip, r7
 8026590:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026594:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026598:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802659c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80265a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80265a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80265a8:	ea4c 040a 	orr.w	r4, ip, sl
 80265ac:	9409      	str	r4, [sp, #36]	@ 0x24
 80265ae:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80265b0:	2cff      	cmp	r4, #255	@ 0xff
 80265b2:	d020      	beq.n	80265f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80265b4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80265b6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80265ba:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80265bc:	4367      	muls	r7, r4
 80265be:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80265c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80265c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80265c8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80265ca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80265ce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80265d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80265d6:	44bc      	add	ip, r7
 80265d8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80265dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80265e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80265e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80265ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80265f0:	ea4c 040a 	orr.w	r4, ip, sl
 80265f4:	940f      	str	r4, [sp, #60]	@ 0x3c
 80265f6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80265f8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80265fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026600:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026604:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026606:	fb08 f707 	mul.w	r7, r8, r7
 802660a:	fb02 770c 	mla	r7, r2, ip, r7
 802660e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026612:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026614:	fb00 770c 	mla	r7, r0, ip, r7
 8026618:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802661c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802661e:	fb09 770c 	mla	r7, r9, ip, r7
 8026622:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8026626:	fb08 f80c 	mul.w	r8, r8, ip
 802662a:	0a3f      	lsrs	r7, r7, #8
 802662c:	fb02 8303 	mla	r3, r2, r3, r8
 8026630:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026632:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026636:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802663a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802663c:	fb00 330a 	mla	r3, r0, sl, r3
 8026640:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8026644:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8026646:	fb09 3c0c 	mla	ip, r9, ip, r3
 802664a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802664c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026650:	434b      	muls	r3, r1
 8026652:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026656:	1c59      	adds	r1, r3, #1
 8026658:	ea47 070c 	orr.w	r7, r7, ip
 802665c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026660:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026664:	b2fa      	uxtb	r2, r7
 8026666:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802666a:	fb12 f200 	smulbb	r2, r2, r0
 802666e:	b2c9      	uxtb	r1, r1
 8026670:	fb03 2301 	mla	r3, r3, r1, r2
 8026674:	b29b      	uxth	r3, r3
 8026676:	1c5a      	adds	r2, r3, #1
 8026678:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802667c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026680:	fb12 f201 	smulbb	r2, r2, r1
 8026684:	121b      	asrs	r3, r3, #8
 8026686:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802668a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802668e:	0c3f      	lsrs	r7, r7, #16
 8026690:	fb03 2300 	mla	r3, r3, r0, r2
 8026694:	b29b      	uxth	r3, r3
 8026696:	1c5a      	adds	r2, r3, #1
 8026698:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802669c:	121b      	asrs	r3, r3, #8
 802669e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80266a2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80266a6:	fb13 f101 	smulbb	r1, r3, r1
 80266aa:	fb07 1700 	mla	r7, r7, r0, r1
 80266ae:	b2bf      	uxth	r7, r7
 80266b0:	1c79      	adds	r1, r7, #1
 80266b2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80266b6:	123f      	asrs	r7, r7, #8
 80266b8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80266bc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80266be:	f10e 0e03 	add.w	lr, lr, #3
 80266c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80266c6:	441d      	add	r5, r3
 80266c8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80266ca:	441e      	add	r6, r3
 80266cc:	e64e      	b.n	802636c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80266ce:	2800      	cmp	r0, #0
 80266d0:	f43f aee8 	beq.w	80264a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80266d4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80266d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80266da:	0e12      	lsrs	r2, r2, #24
 80266dc:	9212      	str	r2, [sp, #72]	@ 0x48
 80266de:	e6e1      	b.n	80264a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80266e0:	b01d      	add	sp, #116	@ 0x74
 80266e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080266e6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80266e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266ea:	b087      	sub	sp, #28
 80266ec:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80266f0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80266f4:	fb05 7003 	mla	r0, r5, r3, r7
 80266f8:	2d00      	cmp	r5, #0
 80266fa:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80266fe:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8026702:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8026706:	f2c0 810a 	blt.w	802691e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802670a:	45a8      	cmp	r8, r5
 802670c:	f340 8107 	ble.w	802691e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8026710:	2f00      	cmp	r7, #0
 8026712:	f2c0 8102 	blt.w	802691a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8026716:	42bb      	cmp	r3, r7
 8026718:	f340 80ff 	ble.w	802691a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802671c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8026720:	1c7a      	adds	r2, r7, #1
 8026722:	f100 80ff 	bmi.w	8026924 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8026726:	4293      	cmp	r3, r2
 8026728:	f340 80fc 	ble.w	8026924 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802672c:	2c00      	cmp	r4, #0
 802672e:	f000 80fb 	beq.w	8026928 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8026732:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8026736:	3501      	adds	r5, #1
 8026738:	f100 80fa 	bmi.w	8026930 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802673c:	45a8      	cmp	r8, r5
 802673e:	f340 80f7 	ble.w	8026930 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8026742:	f1be 0f00 	cmp.w	lr, #0
 8026746:	f000 80f6 	beq.w	8026936 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802674a:	2f00      	cmp	r7, #0
 802674c:	f2c0 80ee 	blt.w	802692c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8026750:	42bb      	cmp	r3, r7
 8026752:	f340 80eb 	ble.w	802692c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8026756:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802675a:	3701      	adds	r7, #1
 802675c:	f100 80ee 	bmi.w	802693c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8026760:	42bb      	cmp	r3, r7
 8026762:	f340 80eb 	ble.w	802693c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8026766:	2c00      	cmp	r4, #0
 8026768:	f000 80ea 	beq.w	8026940 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 802676c:	3301      	adds	r3, #1
 802676e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026772:	fa1f fc84 	uxth.w	ip, r4
 8026776:	fa1f fe8e 	uxth.w	lr, lr
 802677a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802677e:	fb0c f90e 	mul.w	r9, ip, lr
 8026782:	0e13      	lsrs	r3, r2, #24
 8026784:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026788:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802678c:	9302      	str	r3, [sp, #8]
 802678e:	ebac 0709 	sub.w	r7, ip, r9
 8026792:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8026796:	fa1f f48e 	uxth.w	r4, lr
 802679a:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 802679e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80267a2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80267a6:	fb0a fe0e 	mul.w	lr, sl, lr
 80267aa:	1b1b      	subs	r3, r3, r4
 80267ac:	fb0a f606 	mul.w	r6, sl, r6
 80267b0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80267b4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80267b8:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80267bc:	b29b      	uxth	r3, r3
 80267be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80267c2:	b2bf      	uxth	r7, r7
 80267c4:	9301      	str	r3, [sp, #4]
 80267c6:	44e6      	add	lr, ip
 80267c8:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80267cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80267d0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80267d4:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80267d8:	9303      	str	r3, [sp, #12]
 80267da:	0a33      	lsrs	r3, r6, #8
 80267dc:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80267e0:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80267e4:	9304      	str	r3, [sp, #16]
 80267e6:	fb0b f606 	mul.w	r6, fp, r6
 80267ea:	fb0b f000 	mul.w	r0, fp, r0
 80267ee:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80267f2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80267f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80267fa:	44b6      	add	lr, r6
 80267fc:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8026800:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8026804:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8026808:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802680c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026810:	fb08 f606 	mul.w	r6, r8, r6
 8026814:	0a03      	lsrs	r3, r0, #8
 8026816:	fb08 f505 	mul.w	r5, r8, r5
 802681a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802681e:	0a30      	lsrs	r0, r6, #8
 8026820:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8026824:	9305      	str	r3, [sp, #20]
 8026826:	0e13      	lsrs	r3, r2, #24
 8026828:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802682c:	fb0e fe07 	mul.w	lr, lr, r7
 8026830:	4430      	add	r0, r6
 8026832:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8026836:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802683a:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 802683e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026842:	0a00      	lsrs	r0, r0, #8
 8026844:	435e      	muls	r6, r3
 8026846:	0a2d      	lsrs	r5, r5, #8
 8026848:	435a      	muls	r2, r3
 802684a:	9b03      	ldr	r3, [sp, #12]
 802684c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8026850:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8026854:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026858:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802685c:	44b4      	add	ip, r6
 802685e:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8026862:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026866:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802686a:	9e01      	ldr	r6, [sp, #4]
 802686c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026870:	fb03 ee06 	mla	lr, r3, r6, lr
 8026874:	9b04      	ldr	r3, [sp, #16]
 8026876:	0a12      	lsrs	r2, r2, #8
 8026878:	fb0c ee09 	mla	lr, ip, r9, lr
 802687c:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8026880:	9b05      	ldr	r3, [sp, #20]
 8026882:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026886:	fb00 ee04 	mla	lr, r0, r4, lr
 802688a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802688e:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8026892:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8026896:	9b01      	ldr	r3, [sp, #4]
 8026898:	fb07 fe0e 	mul.w	lr, r7, lr
 802689c:	fb07 f70b 	mul.w	r7, r7, fp
 80268a0:	fb03 ee06 	mla	lr, r3, r6, lr
 80268a4:	fb03 730a 	mla	r3, r3, sl, r7
 80268a8:	fb09 e202 	mla	r2, r9, r2, lr
 80268ac:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80268b0:	fb04 2e0e 	mla	lr, r4, lr, r2
 80268b4:	fb04 3408 	mla	r4, r4, r8, r3
 80268b8:	9b02      	ldr	r3, [sp, #8]
 80268ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268be:	fb09 4903 	mla	r9, r9, r3, r4
 80268c2:	780b      	ldrb	r3, [r1, #0]
 80268c4:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80268c8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80268cc:	ea40 0e0e 	orr.w	lr, r0, lr
 80268d0:	fa5f f989 	uxtb.w	r9, r9
 80268d4:	fb03 f209 	mul.w	r2, r3, r9
 80268d8:	1c53      	adds	r3, r2, #1
 80268da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80268de:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80268e2:	700b      	strb	r3, [r1, #0]
 80268e4:	784b      	ldrb	r3, [r1, #1]
 80268e6:	fb03 f309 	mul.w	r3, r3, r9
 80268ea:	1c5a      	adds	r2, r3, #1
 80268ec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80268f0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80268f4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80268f8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80268fc:	704b      	strb	r3, [r1, #1]
 80268fe:	788b      	ldrb	r3, [r1, #2]
 8026900:	fb03 f909 	mul.w	r9, r3, r9
 8026904:	f109 0301 	add.w	r3, r9, #1
 8026908:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802690c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8026910:	f881 e002 	strb.w	lr, [r1, #2]
 8026914:	b007      	add	sp, #28
 8026916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802691a:	2600      	movs	r6, #0
 802691c:	e700      	b.n	8026720 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 802691e:	2000      	movs	r0, #0
 8026920:	4606      	mov	r6, r0
 8026922:	e708      	b.n	8026736 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8026924:	2000      	movs	r0, #0
 8026926:	e706      	b.n	8026736 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8026928:	4620      	mov	r0, r4
 802692a:	e704      	b.n	8026736 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802692c:	2500      	movs	r5, #0
 802692e:	e714      	b.n	802675a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8026930:	2200      	movs	r2, #0
 8026932:	4615      	mov	r5, r2
 8026934:	e71d      	b.n	8026772 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026936:	4672      	mov	r2, lr
 8026938:	4675      	mov	r5, lr
 802693a:	e71a      	b.n	8026772 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802693c:	2200      	movs	r2, #0
 802693e:	e718      	b.n	8026772 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026940:	4622      	mov	r2, r4
 8026942:	e716      	b.n	8026772 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08026944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026948:	b099      	sub	sp, #100	@ 0x64
 802694a:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 802694e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8026950:	9017      	str	r0, [sp, #92]	@ 0x5c
 8026952:	9306      	str	r3, [sp, #24]
 8026954:	6850      	ldr	r0, [r2, #4]
 8026956:	6812      	ldr	r2, [r2, #0]
 8026958:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 802695c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8026960:	fb00 1303 	mla	r3, r0, r3, r1
 8026964:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026968:	18d3      	adds	r3, r2, r3
 802696a:	9309      	str	r3, [sp, #36]	@ 0x24
 802696c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802696e:	681b      	ldr	r3, [r3, #0]
 8026970:	930e      	str	r3, [sp, #56]	@ 0x38
 8026972:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026974:	2b00      	cmp	r3, #0
 8026976:	dc03      	bgt.n	8026980 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802697a:	2b00      	cmp	r3, #0
 802697c:	f340 8360 	ble.w	8027040 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8026980:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026982:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026986:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802698a:	1e48      	subs	r0, r1, #1
 802698c:	1e57      	subs	r7, r2, #1
 802698e:	9b06      	ldr	r3, [sp, #24]
 8026990:	2b00      	cmp	r3, #0
 8026992:	f340 817b 	ble.w	8026c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8026996:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802699a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802699e:	d406      	bmi.n	80269ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80269a0:	4584      	cmp	ip, r0
 80269a2:	da04      	bge.n	80269ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80269a4:	2b00      	cmp	r3, #0
 80269a6:	db02      	blt.n	80269ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80269a8:	42bb      	cmp	r3, r7
 80269aa:	f2c0 8170 	blt.w	8026c8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80269ae:	f11c 0c01 	adds.w	ip, ip, #1
 80269b2:	f100 8160 	bmi.w	8026c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80269b6:	4561      	cmp	r1, ip
 80269b8:	f2c0 815d 	blt.w	8026c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80269bc:	3301      	adds	r3, #1
 80269be:	f100 815a 	bmi.w	8026c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80269c2:	429a      	cmp	r2, r3
 80269c4:	f2c0 8157 	blt.w	8026c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80269c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80269cc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80269ce:	f1b8 0f00 	cmp.w	r8, #0
 80269d2:	f340 8179 	ble.w	8026cc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80269d6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80269d8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80269dc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80269de:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80269e2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80269e6:	142a      	asrs	r2, r5, #16
 80269e8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80269ec:	689b      	ldr	r3, [r3, #8]
 80269ee:	f100 81be 	bmi.w	8026d6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80269f2:	f103 39ff 	add.w	r9, r3, #4294967295
 80269f6:	454a      	cmp	r2, r9
 80269f8:	f280 81b9 	bge.w	8026d6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80269fc:	f1bc 0f00 	cmp.w	ip, #0
 8026a00:	f2c0 81b5 	blt.w	8026d6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026a04:	f10e 39ff 	add.w	r9, lr, #4294967295
 8026a08:	45cc      	cmp	ip, r9
 8026a0a:	f280 81b0 	bge.w	8026d6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026a0e:	b21b      	sxth	r3, r3
 8026a10:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026a12:	fb0c 2203 	mla	r2, ip, r3, r2
 8026a16:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8026a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026a1e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026a22:	2900      	cmp	r1, #0
 8026a24:	f000 8197 	beq.w	8026d56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026a28:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8026a2c:	940a      	str	r4, [sp, #40]	@ 0x28
 8026a2e:	0e24      	lsrs	r4, r4, #24
 8026a30:	9411      	str	r4, [sp, #68]	@ 0x44
 8026a32:	b180      	cbz	r0, 8026a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026a34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026a38:	3b01      	subs	r3, #1
 8026a3a:	009b      	lsls	r3, r3, #2
 8026a3c:	3304      	adds	r3, #4
 8026a3e:	eb09 0c03 	add.w	ip, r9, r3
 8026a42:	f859 3003 	ldr.w	r3, [r9, r3]
 8026a46:	9307      	str	r3, [sp, #28]
 8026a48:	0e1b      	lsrs	r3, r3, #24
 8026a4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026a4c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026a50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026a52:	0e1b      	lsrs	r3, r3, #24
 8026a54:	9312      	str	r3, [sp, #72]	@ 0x48
 8026a56:	b289      	uxth	r1, r1
 8026a58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026a5a:	b280      	uxth	r0, r0
 8026a5c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026a5e:	fb01 fa00 	mul.w	sl, r1, r0
 8026a62:	0109      	lsls	r1, r1, #4
 8026a64:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8026a68:	eba1 090a 	sub.w	r9, r1, sl
 8026a6c:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8026a70:	b280      	uxth	r0, r0
 8026a72:	fa1f f989 	uxth.w	r9, r9
 8026a76:	1a09      	subs	r1, r1, r0
 8026a78:	fb09 f303 	mul.w	r3, r9, r3
 8026a7c:	b289      	uxth	r1, r1
 8026a7e:	fb01 330e 	mla	r3, r1, lr, r3
 8026a82:	fb00 3304 	mla	r3, r0, r4, r3
 8026a86:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026a88:	fb0a 3304 	mla	r3, sl, r4, r3
 8026a8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026a90:	2b00      	cmp	r3, #0
 8026a92:	f000 80e8 	beq.w	8026c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026a96:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026a9a:	d01b      	beq.n	8026ad4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8026a9c:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8026aa0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026aa4:	fb0e fb0b 	mul.w	fp, lr, fp
 8026aa8:	fb0e fe02 	mul.w	lr, lr, r2
 8026aac:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8026ab0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026ab4:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026ab8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026abc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026ac0:	445a      	add	r2, fp
 8026ac2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ac6:	0a12      	lsrs	r2, r2, #8
 8026ac8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026acc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026ad0:	ea42 020c 	orr.w	r2, r2, ip
 8026ad4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026ad6:	2cff      	cmp	r4, #255	@ 0xff
 8026ad8:	d021      	beq.n	8026b1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8026ada:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026adc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026ae0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026ae2:	fb04 fc0c 	mul.w	ip, r4, ip
 8026ae6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026ae8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026aec:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026af0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026af2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026af6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026afa:	fb04 fb0b 	mul.w	fp, r4, fp
 8026afe:	44e6      	add	lr, ip
 8026b00:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8026b04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026b08:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026b0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026b10:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026b14:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026b18:	ea4e 040b 	orr.w	r4, lr, fp
 8026b1c:	940a      	str	r4, [sp, #40]	@ 0x28
 8026b1e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026b20:	2cff      	cmp	r4, #255	@ 0xff
 8026b22:	d021      	beq.n	8026b68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026b24:	9c07      	ldr	r4, [sp, #28]
 8026b26:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026b2a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026b2c:	fb04 fc0c 	mul.w	ip, r4, ip
 8026b30:	9c07      	ldr	r4, [sp, #28]
 8026b32:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026b36:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026b3a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026b3c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026b40:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026b44:	fb04 fb0b 	mul.w	fp, r4, fp
 8026b48:	44e6      	add	lr, ip
 8026b4a:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8026b4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026b52:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026b56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026b5a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026b5e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026b62:	ea4e 040b 	orr.w	r4, lr, fp
 8026b66:	9407      	str	r4, [sp, #28]
 8026b68:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b6a:	2cff      	cmp	r4, #255	@ 0xff
 8026b6c:	d021      	beq.n	8026bb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026b6e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026b70:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026b74:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b76:	fb04 fc0c 	mul.w	ip, r4, ip
 8026b7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026b7c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026b80:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026b84:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b86:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026b8a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026b8e:	fb04 fb0b 	mul.w	fp, r4, fp
 8026b92:	44e6      	add	lr, ip
 8026b94:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8026b98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026b9c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026ba0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026ba4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026ba8:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026bac:	ea4e 040b 	orr.w	r4, lr, fp
 8026bb0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026bb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026bb4:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8026bb8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026bbc:	2bff      	cmp	r3, #255	@ 0xff
 8026bbe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026bc2:	9c07      	ldr	r4, [sp, #28]
 8026bc4:	fb09 fc0c 	mul.w	ip, r9, ip
 8026bc8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026bcc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026bd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026bd2:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026bd6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026bda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026bdc:	fb0a cc0e 	mla	ip, sl, lr, ip
 8026be0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026be4:	fb09 f90e 	mul.w	r9, r9, lr
 8026be8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bec:	fb01 9202 	mla	r2, r1, r2, r9
 8026bf0:	9907      	ldr	r1, [sp, #28]
 8026bf2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026bf6:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8026bfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026bfc:	fb00 220b 	mla	r2, r0, fp, r2
 8026c00:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8026c04:	fb0a 2a00 	mla	sl, sl, r0, r2
 8026c08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c0c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c10:	ea4c 0c0a 	orr.w	ip, ip, sl
 8026c14:	fa5f f08c 	uxtb.w	r0, ip
 8026c18:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8026c1c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026c20:	f000 80a2 	beq.w	8026d68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8026c24:	43db      	mvns	r3, r3
 8026c26:	783a      	ldrb	r2, [r7, #0]
 8026c28:	f897 a002 	ldrb.w	sl, [r7, #2]
 8026c2c:	b2db      	uxtb	r3, r3
 8026c2e:	fb02 fe03 	mul.w	lr, r2, r3
 8026c32:	fb0a fa03 	mul.w	sl, sl, r3
 8026c36:	f10e 0201 	add.w	r2, lr, #1
 8026c3a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8026c3e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026c42:	703a      	strb	r2, [r7, #0]
 8026c44:	787a      	ldrb	r2, [r7, #1]
 8026c46:	fb02 f003 	mul.w	r0, r2, r3
 8026c4a:	f10a 0301 	add.w	r3, sl, #1
 8026c4e:	1c42      	adds	r2, r0, #1
 8026c50:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026c54:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026c58:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8026c5c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026c60:	707a      	strb	r2, [r7, #1]
 8026c62:	f887 c002 	strb.w	ip, [r7, #2]
 8026c66:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026c68:	3703      	adds	r7, #3
 8026c6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8026c6e:	441d      	add	r5, r3
 8026c70:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026c72:	441e      	add	r6, r3
 8026c74:	e6ab      	b.n	80269ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026c76:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026c78:	441d      	add	r5, r3
 8026c7a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026c7c:	441e      	add	r6, r3
 8026c7e:	9b06      	ldr	r3, [sp, #24]
 8026c80:	3b01      	subs	r3, #1
 8026c82:	9306      	str	r3, [sp, #24]
 8026c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c86:	3303      	adds	r3, #3
 8026c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c8a:	e680      	b.n	802698e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026c8c:	d024      	beq.n	8026cd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026c8e:	9b06      	ldr	r3, [sp, #24]
 8026c90:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8026c92:	3b01      	subs	r3, #1
 8026c94:	fb00 5003 	mla	r0, r0, r3, r5
 8026c98:	1400      	asrs	r0, r0, #16
 8026c9a:	f53f ae95 	bmi.w	80269c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026c9e:	3901      	subs	r1, #1
 8026ca0:	4288      	cmp	r0, r1
 8026ca2:	f6bf ae91 	bge.w	80269c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026ca6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8026ca8:	fb01 6303 	mla	r3, r1, r3, r6
 8026cac:	141b      	asrs	r3, r3, #16
 8026cae:	f53f ae8b 	bmi.w	80269c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026cb2:	3a01      	subs	r2, #1
 8026cb4:	4293      	cmp	r3, r2
 8026cb6:	f6bf ae87 	bge.w	80269c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026cbc:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026cc0:	1cdf      	adds	r7, r3, #3
 8026cc2:	f1bb 0f00 	cmp.w	fp, #0
 8026cc6:	dc6e      	bgt.n	8026da6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8026cc8:	9b06      	ldr	r3, [sp, #24]
 8026cca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026cd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026cd4:	4423      	add	r3, r4
 8026cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8026cd8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026cda:	2b00      	cmp	r3, #0
 8026cdc:	f340 81b0 	ble.w	8027040 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8026ce0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026ce4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026ce6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026cea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026cee:	eef0 6a62 	vmov.f32	s13, s5
 8026cf2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026cf6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026cfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026cfe:	ee16 5a90 	vmov	r5, s13
 8026d02:	eef0 6a43 	vmov.f32	s13, s6
 8026d06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d0a:	ee16 6a90 	vmov	r6, s13
 8026d0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026d12:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026d16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026d1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026d1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026d22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026d26:	ee12 2a90 	vmov	r2, s5
 8026d2a:	eef0 2a47 	vmov.f32	s5, s14
 8026d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d32:	ee13 2a10 	vmov	r2, s6
 8026d36:	9325      	str	r3, [sp, #148]	@ 0x94
 8026d38:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026d3a:	eeb0 3a67 	vmov.f32	s6, s15
 8026d3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026d42:	9326      	str	r3, [sp, #152]	@ 0x98
 8026d44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026d46:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026d48:	3b01      	subs	r3, #1
 8026d4a:	9315      	str	r3, [sp, #84]	@ 0x54
 8026d4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026d4e:	bf08      	it	eq
 8026d50:	4613      	moveq	r3, r2
 8026d52:	9306      	str	r3, [sp, #24]
 8026d54:	e60d      	b.n	8026972 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8026d56:	2800      	cmp	r0, #0
 8026d58:	f43f ae7d 	beq.w	8026a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026d5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8026d60:	9307      	str	r3, [sp, #28]
 8026d62:	0e1b      	lsrs	r3, r3, #24
 8026d64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026d66:	e676      	b.n	8026a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026d68:	7038      	strb	r0, [r7, #0]
 8026d6a:	7079      	strb	r1, [r7, #1]
 8026d6c:	e779      	b.n	8026c62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026d6e:	f112 0901 	adds.w	r9, r2, #1
 8026d72:	f53f af78 	bmi.w	8026c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026d76:	454b      	cmp	r3, r9
 8026d78:	f6ff af75 	blt.w	8026c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026d7c:	f11c 0901 	adds.w	r9, ip, #1
 8026d80:	f53f af71 	bmi.w	8026c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026d84:	45ce      	cmp	lr, r9
 8026d86:	f6ff af6e 	blt.w	8026c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026d8a:	b21b      	sxth	r3, r3
 8026d8c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8026d90:	fa0f f28e 	sxth.w	r2, lr
 8026d94:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026d98:	9200      	str	r2, [sp, #0]
 8026d9a:	4639      	mov	r1, r7
 8026d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026d9e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8026da0:	f7ff fca1 	bl	80266e6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8026da4:	e75f      	b.n	8026c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026da6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026da8:	1429      	asrs	r1, r5, #16
 8026daa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026dac:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026db0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8026db4:	1433      	asrs	r3, r6, #16
 8026db6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026dba:	fb0c 1303 	mla	r3, ip, r3, r1
 8026dbe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026dc0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8026dc4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026dc8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026dcc:	2a00      	cmp	r2, #0
 8026dce:	f000 8129 	beq.w	8027024 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8026dd2:	684c      	ldr	r4, [r1, #4]
 8026dd4:	940c      	str	r4, [sp, #48]	@ 0x30
 8026dd6:	0e24      	lsrs	r4, r4, #24
 8026dd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8026dda:	b198      	cbz	r0, 8026e04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8026ddc:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8026de0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026de4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8026de8:	f10c 0c04 	add.w	ip, ip, #4
 8026dec:	eb01 080c 	add.w	r8, r1, ip
 8026df0:	f851 100c 	ldr.w	r1, [r1, ip]
 8026df4:	9108      	str	r1, [sp, #32]
 8026df6:	0e09      	lsrs	r1, r1, #24
 8026df8:	9110      	str	r1, [sp, #64]	@ 0x40
 8026dfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026dfe:	910d      	str	r1, [sp, #52]	@ 0x34
 8026e00:	0e09      	lsrs	r1, r1, #24
 8026e02:	9114      	str	r1, [sp, #80]	@ 0x50
 8026e04:	b292      	uxth	r2, r2
 8026e06:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026e08:	b280      	uxth	r0, r0
 8026e0a:	fb02 f900 	mul.w	r9, r2, r0
 8026e0e:	0112      	lsls	r2, r2, #4
 8026e10:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026e14:	eba2 0809 	sub.w	r8, r2, r9
 8026e18:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8026e1c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026e1e:	b280      	uxth	r0, r0
 8026e20:	fa1f f888 	uxth.w	r8, r8
 8026e24:	1a09      	subs	r1, r1, r0
 8026e26:	fb08 f202 	mul.w	r2, r8, r2
 8026e2a:	b289      	uxth	r1, r1
 8026e2c:	fb01 220e 	mla	r2, r1, lr, r2
 8026e30:	fb00 2204 	mla	r2, r0, r4, r2
 8026e34:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026e36:	fb09 2204 	mla	r2, r9, r4, r2
 8026e3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026e3e:	2a00      	cmp	r2, #0
 8026e40:	f000 80e8 	beq.w	8027014 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8026e44:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026e48:	d01b      	beq.n	8026e82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8026e4a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026e4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026e52:	fb0e fa0a 	mul.w	sl, lr, sl
 8026e56:	fb0e fe03 	mul.w	lr, lr, r3
 8026e5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026e5e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026e62:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026e66:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026e6a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026e6e:	4453      	add	r3, sl
 8026e70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e74:	0a1b      	lsrs	r3, r3, #8
 8026e76:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026e7a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026e7e:	ea43 030c 	orr.w	r3, r3, ip
 8026e82:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026e84:	2cff      	cmp	r4, #255	@ 0xff
 8026e86:	d021      	beq.n	8026ecc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8026e88:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026e8a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026e8e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026e90:	fb04 fc0c 	mul.w	ip, r4, ip
 8026e94:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026e96:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026e9a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026e9e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026ea0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026ea4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026ea8:	fb04 fa0a 	mul.w	sl, r4, sl
 8026eac:	44e6      	add	lr, ip
 8026eae:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026eb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026eb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026eba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026ebe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ec2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026ec6:	ea4e 040a 	orr.w	r4, lr, sl
 8026eca:	940c      	str	r4, [sp, #48]	@ 0x30
 8026ecc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026ece:	2cff      	cmp	r4, #255	@ 0xff
 8026ed0:	d021      	beq.n	8026f16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8026ed2:	9c08      	ldr	r4, [sp, #32]
 8026ed4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026ed8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026eda:	fb04 fc0c 	mul.w	ip, r4, ip
 8026ede:	9c08      	ldr	r4, [sp, #32]
 8026ee0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026ee4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026ee6:	fb04 fa0e 	mul.w	sl, r4, lr
 8026eea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026eee:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026ef2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026ef6:	44e6      	add	lr, ip
 8026ef8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026efc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f0c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026f10:	ea4e 040a 	orr.w	r4, lr, sl
 8026f14:	9408      	str	r4, [sp, #32]
 8026f16:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026f18:	2cff      	cmp	r4, #255	@ 0xff
 8026f1a:	d021      	beq.n	8026f60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8026f1c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026f1e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026f22:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026f24:	fb04 fc0c 	mul.w	ip, r4, ip
 8026f28:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026f2a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026f2e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026f32:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026f34:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026f38:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f3c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026f40:	44e6      	add	lr, ip
 8026f42:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026f46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f4e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f56:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026f5a:	ea4e 040a 	orr.w	r4, lr, sl
 8026f5e:	940d      	str	r4, [sp, #52]	@ 0x34
 8026f60:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026f62:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8026f66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026f6a:	2aff      	cmp	r2, #255	@ 0xff
 8026f6c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026f70:	9c08      	ldr	r4, [sp, #32]
 8026f72:	fb08 fc0c 	mul.w	ip, r8, ip
 8026f76:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026f7a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026f7e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026f80:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026f84:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026f88:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026f8a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026f8e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026f92:	fb08 f80e 	mul.w	r8, r8, lr
 8026f96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f9a:	fb01 8303 	mla	r3, r1, r3, r8
 8026f9e:	9908      	ldr	r1, [sp, #32]
 8026fa0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026fa4:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8026fa8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026faa:	fb00 330a 	mla	r3, r0, sl, r3
 8026fae:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8026fb2:	fb09 3e0e 	mla	lr, r9, lr, r3
 8026fb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026fba:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8026fbe:	ea4c 0c0e 	orr.w	ip, ip, lr
 8026fc2:	fa5f f08c 	uxtb.w	r0, ip
 8026fc6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8026fca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026fce:	d032      	beq.n	8027036 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8026fd0:	43d2      	mvns	r2, r2
 8026fd2:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8026fd6:	b2d2      	uxtb	r2, r2
 8026fd8:	fb0e fe02 	mul.w	lr, lr, r2
 8026fdc:	f10e 0301 	add.w	r3, lr, #1
 8026fe0:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8026fe4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026fe8:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8026fec:	4350      	muls	r0, r2
 8026fee:	f807 3c03 	strb.w	r3, [r7, #-3]
 8026ff2:	1c43      	adds	r3, r0, #1
 8026ff4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026ff8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026ffc:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8027000:	4353      	muls	r3, r2
 8027002:	f807 1c02 	strb.w	r1, [r7, #-2]
 8027006:	1c5a      	adds	r2, r3, #1
 8027008:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802700c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8027010:	f807 cc01 	strb.w	ip, [r7, #-1]
 8027014:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027016:	3703      	adds	r7, #3
 8027018:	f10b 3bff 	add.w	fp, fp, #4294967295
 802701c:	441d      	add	r5, r3
 802701e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027020:	441e      	add	r6, r3
 8027022:	e64e      	b.n	8026cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027024:	2800      	cmp	r0, #0
 8027026:	f43f aeed 	beq.w	8026e04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802702a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802702e:	9108      	str	r1, [sp, #32]
 8027030:	0e09      	lsrs	r1, r1, #24
 8027032:	9110      	str	r1, [sp, #64]	@ 0x40
 8027034:	e6e6      	b.n	8026e04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027036:	f807 0c03 	strb.w	r0, [r7, #-3]
 802703a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802703e:	e7e7      	b.n	8027010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8027040:	b019      	add	sp, #100	@ 0x64
 8027042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027048 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8027048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802704c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8027050:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027054:	2c00      	cmp	r4, #0
 8027056:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802705a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802705e:	fb00 4e03 	mla	lr, r0, r3, r4
 8027062:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8027066:	f2c0 80b8 	blt.w	80271da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802706a:	45a1      	cmp	r9, r4
 802706c:	f340 80b5 	ble.w	80271da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027070:	2800      	cmp	r0, #0
 8027072:	f2c0 80b2 	blt.w	80271da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027076:	4580      	cmp	r8, r0
 8027078:	f340 80af 	ble.w	80271da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802707c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8027080:	f01e 0f01 	tst.w	lr, #1
 8027084:	5d56      	ldrb	r6, [r2, r5]
 8027086:	bf0c      	ite	eq
 8027088:	f006 060f 	andeq.w	r6, r6, #15
 802708c:	1136      	asrne	r6, r6, #4
 802708e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027092:	b2f6      	uxtb	r6, r6
 8027094:	f114 0a01 	adds.w	sl, r4, #1
 8027098:	f100 80a1 	bmi.w	80271de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802709c:	45d1      	cmp	r9, sl
 802709e:	f340 809e 	ble.w	80271de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80270a2:	2800      	cmp	r0, #0
 80270a4:	f2c0 809b 	blt.w	80271de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80270a8:	4580      	cmp	r8, r0
 80270aa:	f340 8098 	ble.w	80271de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80270ae:	2f00      	cmp	r7, #0
 80270b0:	f000 8097 	beq.w	80271e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80270b4:	f10e 0b01 	add.w	fp, lr, #1
 80270b8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80270bc:	f01b 0f01 	tst.w	fp, #1
 80270c0:	5d55      	ldrb	r5, [r2, r5]
 80270c2:	bf0c      	ite	eq
 80270c4:	f005 050f 	andeq.w	r5, r5, #15
 80270c8:	112d      	asrne	r5, r5, #4
 80270ca:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80270ce:	b2ed      	uxtb	r5, r5
 80270d0:	f1bc 0f00 	cmp.w	ip, #0
 80270d4:	f000 8089 	beq.w	80271ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80270d8:	2c00      	cmp	r4, #0
 80270da:	f100 0001 	add.w	r0, r0, #1
 80270de:	f2c0 8082 	blt.w	80271e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80270e2:	45a1      	cmp	r9, r4
 80270e4:	dd7f      	ble.n	80271e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80270e6:	2800      	cmp	r0, #0
 80270e8:	db7d      	blt.n	80271e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80270ea:	4580      	cmp	r8, r0
 80270ec:	dd7b      	ble.n	80271e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80270ee:	eb03 0b0e 	add.w	fp, r3, lr
 80270f2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80270f6:	f01b 0f01 	tst.w	fp, #1
 80270fa:	5d14      	ldrb	r4, [r2, r4]
 80270fc:	bf0c      	ite	eq
 80270fe:	f004 040f 	andeq.w	r4, r4, #15
 8027102:	1124      	asrne	r4, r4, #4
 8027104:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027108:	b2e4      	uxtb	r4, r4
 802710a:	f1ba 0f00 	cmp.w	sl, #0
 802710e:	db6f      	blt.n	80271f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027110:	45d1      	cmp	r9, sl
 8027112:	dd6d      	ble.n	80271f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027114:	2800      	cmp	r0, #0
 8027116:	db6b      	blt.n	80271f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027118:	4580      	cmp	r8, r0
 802711a:	dd69      	ble.n	80271f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802711c:	2f00      	cmp	r7, #0
 802711e:	d069      	beq.n	80271f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8027120:	3301      	adds	r3, #1
 8027122:	449e      	add	lr, r3
 8027124:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027128:	f01e 0f01 	tst.w	lr, #1
 802712c:	5cd0      	ldrb	r0, [r2, r3]
 802712e:	bf0c      	ite	eq
 8027130:	f000 000f 	andeq.w	r0, r0, #15
 8027134:	1100      	asrne	r0, r0, #4
 8027136:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802713a:	b2c3      	uxtb	r3, r0
 802713c:	b2ba      	uxth	r2, r7
 802713e:	fa1f fc8c 	uxth.w	ip, ip
 8027142:	fb02 f00c 	mul.w	r0, r2, ip
 8027146:	0112      	lsls	r2, r2, #4
 8027148:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802714c:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8027150:	1a12      	subs	r2, r2, r0
 8027152:	fa1f fc8c 	uxth.w	ip, ip
 8027156:	b292      	uxth	r2, r2
 8027158:	eba7 070c 	sub.w	r7, r7, ip
 802715c:	436a      	muls	r2, r5
 802715e:	b2bf      	uxth	r7, r7
 8027160:	fb06 2207 	mla	r2, r6, r7, r2
 8027164:	fb0c 2404 	mla	r4, ip, r4, r2
 8027168:	fb00 4303 	mla	r3, r0, r3, r4
 802716c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027170:	b38b      	cbz	r3, 80271d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8027172:	4a21      	ldr	r2, [pc, #132]	@ (80271f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8027174:	6814      	ldr	r4, [r2, #0]
 8027176:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 802717a:	b2e5      	uxtb	r5, r4
 802717c:	4353      	muls	r3, r2
 802717e:	1c5a      	adds	r2, r3, #1
 8027180:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027184:	1212      	asrs	r2, r2, #8
 8027186:	b290      	uxth	r0, r2
 8027188:	43d2      	mvns	r2, r2
 802718a:	fb15 f500 	smulbb	r5, r5, r0
 802718e:	b2d3      	uxtb	r3, r2
 8027190:	780a      	ldrb	r2, [r1, #0]
 8027192:	fb02 5203 	mla	r2, r2, r3, r5
 8027196:	b292      	uxth	r2, r2
 8027198:	1c55      	adds	r5, r2, #1
 802719a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802719e:	784d      	ldrb	r5, [r1, #1]
 80271a0:	fb15 f503 	smulbb	r5, r5, r3
 80271a4:	1212      	asrs	r2, r2, #8
 80271a6:	700a      	strb	r2, [r1, #0]
 80271a8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80271ac:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80271b0:	fb02 5200 	mla	r2, r2, r0, r5
 80271b4:	b292      	uxth	r2, r2
 80271b6:	1c55      	adds	r5, r2, #1
 80271b8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80271bc:	1212      	asrs	r2, r2, #8
 80271be:	704a      	strb	r2, [r1, #1]
 80271c0:	788a      	ldrb	r2, [r1, #2]
 80271c2:	fb12 f303 	smulbb	r3, r2, r3
 80271c6:	fb04 3300 	mla	r3, r4, r0, r3
 80271ca:	b29b      	uxth	r3, r3
 80271cc:	1c5a      	adds	r2, r3, #1
 80271ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80271d2:	121b      	asrs	r3, r3, #8
 80271d4:	708b      	strb	r3, [r1, #2]
 80271d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271da:	2600      	movs	r6, #0
 80271dc:	e75a      	b.n	8027094 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80271de:	2500      	movs	r5, #0
 80271e0:	e776      	b.n	80270d0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80271e2:	463d      	mov	r5, r7
 80271e4:	e774      	b.n	80270d0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80271e6:	2400      	movs	r4, #0
 80271e8:	e78f      	b.n	802710a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80271ea:	4663      	mov	r3, ip
 80271ec:	4664      	mov	r4, ip
 80271ee:	e7a5      	b.n	802713c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80271f0:	2300      	movs	r3, #0
 80271f2:	e7a3      	b.n	802713c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80271f4:	463b      	mov	r3, r7
 80271f6:	e7a1      	b.n	802713c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80271f8:	240621c8 	.word	0x240621c8

080271fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80271fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027200:	b097      	sub	sp, #92	@ 0x5c
 8027202:	9214      	str	r2, [sp, #80]	@ 0x50
 8027204:	9309      	str	r3, [sp, #36]	@ 0x24
 8027206:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027208:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802720c:	9015      	str	r0, [sp, #84]	@ 0x54
 802720e:	910c      	str	r1, [sp, #48]	@ 0x30
 8027210:	6850      	ldr	r0, [r2, #4]
 8027212:	930e      	str	r3, [sp, #56]	@ 0x38
 8027214:	6812      	ldr	r2, [r2, #0]
 8027216:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802721a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 802721e:	fb00 1303 	mla	r3, r0, r3, r1
 8027222:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027226:	eb02 0a03 	add.w	sl, r2, r3
 802722a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802722c:	689b      	ldr	r3, [r3, #8]
 802722e:	3301      	adds	r3, #1
 8027230:	f023 0301 	bic.w	r3, r3, #1
 8027234:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027236:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027238:	681f      	ldr	r7, [r3, #0]
 802723a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802723c:	2b00      	cmp	r3, #0
 802723e:	dc03      	bgt.n	8027248 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8027240:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027242:	2b00      	cmp	r3, #0
 8027244:	f340 8247 	ble.w	80276d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027248:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802724a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802724e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027252:	1e48      	subs	r0, r1, #1
 8027254:	f102 3cff 	add.w	ip, r2, #4294967295
 8027258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802725a:	2b00      	cmp	r3, #0
 802725c:	f340 80e5 	ble.w	802742a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027260:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8027264:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027268:	d406      	bmi.n	8027278 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802726a:	4586      	cmp	lr, r0
 802726c:	da04      	bge.n	8027278 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802726e:	2b00      	cmp	r3, #0
 8027270:	db02      	blt.n	8027278 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027272:	4563      	cmp	r3, ip
 8027274:	f2c0 80da 	blt.w	802742c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027278:	f11e 0e01 	adds.w	lr, lr, #1
 802727c:	f100 80cb 	bmi.w	8027416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027280:	4571      	cmp	r1, lr
 8027282:	f2c0 80c8 	blt.w	8027416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027286:	3301      	adds	r3, #1
 8027288:	f100 80c5 	bmi.w	8027416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802728c:	429a      	cmp	r2, r3
 802728e:	f2c0 80c2 	blt.w	8027416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027294:	46d0      	mov	r8, sl
 8027296:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 802729a:	930d      	str	r3, [sp, #52]	@ 0x34
 802729c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802729e:	2b00      	cmp	r3, #0
 80272a0:	f340 80e3 	ble.w	802746a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80272a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80272a6:	1430      	asrs	r0, r6, #16
 80272a8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80272ac:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80272b0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80272b4:	142b      	asrs	r3, r5, #16
 80272b6:	f100 812e 	bmi.w	8027516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80272ba:	f10c 3bff 	add.w	fp, ip, #4294967295
 80272be:	455b      	cmp	r3, fp
 80272c0:	f280 8129 	bge.w	8027516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80272c4:	2800      	cmp	r0, #0
 80272c6:	f2c0 8126 	blt.w	8027516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80272ca:	f10e 3bff 	add.w	fp, lr, #4294967295
 80272ce:	4558      	cmp	r0, fp
 80272d0:	f280 8121 	bge.w	8027516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80272d4:	fb00 3309 	mla	r3, r0, r9, r3
 80272d8:	0858      	lsrs	r0, r3, #1
 80272da:	07dc      	lsls	r4, r3, #31
 80272dc:	f817 c000 	ldrb.w	ip, [r7, r0]
 80272e0:	bf54      	ite	pl
 80272e2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80272e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80272ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80272ee:	fa5f fc8c 	uxtb.w	ip, ip
 80272f2:	2a00      	cmp	r2, #0
 80272f4:	f000 80fe 	beq.w	80274f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80272f8:	1c58      	adds	r0, r3, #1
 80272fa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80272fe:	07c0      	lsls	r0, r0, #31
 8027300:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027304:	bf54      	ite	pl
 8027306:	f00e 0e0f 	andpl.w	lr, lr, #15
 802730a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802730e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027312:	fa5f f08e 	uxtb.w	r0, lr
 8027316:	9010      	str	r0, [sp, #64]	@ 0x40
 8027318:	b1d9      	cbz	r1, 8027352 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802731a:	444b      	add	r3, r9
 802731c:	0858      	lsrs	r0, r3, #1
 802731e:	07dc      	lsls	r4, r3, #31
 8027320:	f103 0301 	add.w	r3, r3, #1
 8027324:	5c38      	ldrb	r0, [r7, r0]
 8027326:	bf54      	ite	pl
 8027328:	f000 000f 	andpl.w	r0, r0, #15
 802732c:	1100      	asrmi	r0, r0, #4
 802732e:	07dc      	lsls	r4, r3, #31
 8027330:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027334:	b2c0      	uxtb	r0, r0
 8027336:	900a      	str	r0, [sp, #40]	@ 0x28
 8027338:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802733c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027340:	bf54      	ite	pl
 8027342:	f00e 030f 	andpl.w	r3, lr, #15
 8027346:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802734a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802734e:	b2db      	uxtb	r3, r3
 8027350:	9311      	str	r3, [sp, #68]	@ 0x44
 8027352:	b292      	uxth	r2, r2
 8027354:	b289      	uxth	r1, r1
 8027356:	0113      	lsls	r3, r2, #4
 8027358:	fb02 f001 	mul.w	r0, r2, r1
 802735c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802735e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8027362:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8027366:	1a1b      	subs	r3, r3, r0
 8027368:	b289      	uxth	r1, r1
 802736a:	b29b      	uxth	r3, r3
 802736c:	ebae 0e01 	sub.w	lr, lr, r1
 8027370:	4353      	muls	r3, r2
 8027372:	fa1f fe8e 	uxth.w	lr, lr
 8027376:	fb0c 320e 	mla	r2, ip, lr, r3
 802737a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802737c:	fb01 2203 	mla	r2, r1, r3, r2
 8027380:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027382:	fb00 2203 	mla	r2, r0, r3, r2
 8027386:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802738a:	2a00      	cmp	r2, #0
 802738c:	d039      	beq.n	8027402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802738e:	4bc7      	ldr	r3, [pc, #796]	@ (80276ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027390:	6819      	ldr	r1, [r3, #0]
 8027392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027394:	fa5f fc81 	uxtb.w	ip, r1
 8027398:	435a      	muls	r2, r3
 802739a:	1c53      	adds	r3, r2, #1
 802739c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80273a0:	1212      	asrs	r2, r2, #8
 80273a2:	b290      	uxth	r0, r2
 80273a4:	43d2      	mvns	r2, r2
 80273a6:	fb1c fc00 	smulbb	ip, ip, r0
 80273aa:	b2d3      	uxtb	r3, r2
 80273ac:	f898 2000 	ldrb.w	r2, [r8]
 80273b0:	fb02 c203 	mla	r2, r2, r3, ip
 80273b4:	b292      	uxth	r2, r2
 80273b6:	f102 0c01 	add.w	ip, r2, #1
 80273ba:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80273be:	f898 c001 	ldrb.w	ip, [r8, #1]
 80273c2:	fb1c fc03 	smulbb	ip, ip, r3
 80273c6:	1212      	asrs	r2, r2, #8
 80273c8:	f888 2000 	strb.w	r2, [r8]
 80273cc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80273d0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80273d4:	fb02 c200 	mla	r2, r2, r0, ip
 80273d8:	b292      	uxth	r2, r2
 80273da:	f102 0c01 	add.w	ip, r2, #1
 80273de:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80273e2:	1212      	asrs	r2, r2, #8
 80273e4:	f888 2001 	strb.w	r2, [r8, #1]
 80273e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80273ec:	fb12 f303 	smulbb	r3, r2, r3
 80273f0:	fb01 3300 	mla	r3, r1, r0, r3
 80273f4:	b29b      	uxth	r3, r3
 80273f6:	1c5a      	adds	r2, r3, #1
 80273f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80273fc:	121b      	asrs	r3, r3, #8
 80273fe:	f888 3002 	strb.w	r3, [r8, #2]
 8027402:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027404:	f108 0803 	add.w	r8, r8, #3
 8027408:	441d      	add	r5, r3
 802740a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802740c:	441e      	add	r6, r3
 802740e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027410:	3b01      	subs	r3, #1
 8027412:	930d      	str	r3, [sp, #52]	@ 0x34
 8027414:	e742      	b.n	802729c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027416:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027418:	f10a 0a03 	add.w	sl, sl, #3
 802741c:	441d      	add	r5, r3
 802741e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027420:	441e      	add	r6, r3
 8027422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027424:	3b01      	subs	r3, #1
 8027426:	9309      	str	r3, [sp, #36]	@ 0x24
 8027428:	e716      	b.n	8027258 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802742a:	d024      	beq.n	8027476 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802742c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802742e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027430:	3b01      	subs	r3, #1
 8027432:	fb00 5003 	mla	r0, r0, r3, r5
 8027436:	1400      	asrs	r0, r0, #16
 8027438:	f53f af2b 	bmi.w	8027292 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802743c:	3901      	subs	r1, #1
 802743e:	4288      	cmp	r0, r1
 8027440:	f6bf af27 	bge.w	8027292 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027444:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027446:	fb01 6303 	mla	r3, r1, r3, r6
 802744a:	141b      	asrs	r3, r3, #16
 802744c:	f53f af21 	bmi.w	8027292 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027450:	3a01      	subs	r2, #1
 8027452:	4293      	cmp	r3, r2
 8027454:	f6bf af1d 	bge.w	8027292 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027458:	f10a 0e03 	add.w	lr, sl, #3
 802745c:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8027460:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8027464:	f1b8 0f00 	cmp.w	r8, #0
 8027468:	dc76      	bgt.n	8027558 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802746a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802746c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027470:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027474:	44a2      	add	sl, r4
 8027476:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027478:	2b00      	cmp	r3, #0
 802747a:	f340 812c 	ble.w	80276d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802747e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027482:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027484:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027488:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802748c:	eef0 6a62 	vmov.f32	s13, s5
 8027490:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027494:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027498:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802749c:	ee16 5a90 	vmov	r5, s13
 80274a0:	eef0 6a43 	vmov.f32	s13, s6
 80274a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80274a8:	ee16 6a90 	vmov	r6, s13
 80274ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80274b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80274b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80274b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80274bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80274c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80274c4:	ee12 2a90 	vmov	r2, s5
 80274c8:	eef0 2a47 	vmov.f32	s5, s14
 80274cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80274d0:	ee13 2a10 	vmov	r2, s6
 80274d4:	9323      	str	r3, [sp, #140]	@ 0x8c
 80274d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80274d8:	eeb0 3a67 	vmov.f32	s6, s15
 80274dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80274e0:	9324      	str	r3, [sp, #144]	@ 0x90
 80274e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80274e4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80274e6:	3b01      	subs	r3, #1
 80274e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80274ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80274ec:	bf08      	it	eq
 80274ee:	4613      	moveq	r3, r2
 80274f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80274f2:	e6a2      	b.n	802723a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80274f4:	2900      	cmp	r1, #0
 80274f6:	f43f af2c 	beq.w	8027352 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80274fa:	eb09 0003 	add.w	r0, r9, r3
 80274fe:	0843      	lsrs	r3, r0, #1
 8027500:	07c0      	lsls	r0, r0, #31
 8027502:	5cfb      	ldrb	r3, [r7, r3]
 8027504:	bf54      	ite	pl
 8027506:	f003 030f 	andpl.w	r3, r3, #15
 802750a:	111b      	asrmi	r3, r3, #4
 802750c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027510:	b2db      	uxtb	r3, r3
 8027512:	930a      	str	r3, [sp, #40]	@ 0x28
 8027514:	e71d      	b.n	8027352 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027516:	f113 0b01 	adds.w	fp, r3, #1
 802751a:	f53f af72 	bmi.w	8027402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802751e:	45dc      	cmp	ip, fp
 8027520:	f6ff af6f 	blt.w	8027402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027524:	f110 0b01 	adds.w	fp, r0, #1
 8027528:	f53f af6b 	bmi.w	8027402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802752c:	45de      	cmp	lr, fp
 802752e:	f6ff af68 	blt.w	8027402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027532:	9302      	str	r3, [sp, #8]
 8027534:	fa0f f38e 	sxth.w	r3, lr
 8027538:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802753a:	9301      	str	r3, [sp, #4]
 802753c:	fa0f f38c 	sxth.w	r3, ip
 8027540:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027544:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8027548:	9300      	str	r3, [sp, #0]
 802754a:	463a      	mov	r2, r7
 802754c:	464b      	mov	r3, r9
 802754e:	4641      	mov	r1, r8
 8027550:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027552:	f7ff fd79 	bl	8027048 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8027556:	e754      	b.n	8027402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027558:	142a      	asrs	r2, r5, #16
 802755a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802755e:	1433      	asrs	r3, r6, #16
 8027560:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027564:	fb09 2303 	mla	r3, r9, r3, r2
 8027568:	085a      	lsrs	r2, r3, #1
 802756a:	07dc      	lsls	r4, r3, #31
 802756c:	5cba      	ldrb	r2, [r7, r2]
 802756e:	bf54      	ite	pl
 8027570:	f002 020f 	andpl.w	r2, r2, #15
 8027574:	1112      	asrmi	r2, r2, #4
 8027576:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802757a:	b2d2      	uxtb	r2, r2
 802757c:	2900      	cmp	r1, #0
 802757e:	f000 8097 	beq.w	80276b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027582:	f103 0b01 	add.w	fp, r3, #1
 8027586:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802758a:	f01b 0f01 	tst.w	fp, #1
 802758e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027592:	bf0c      	ite	eq
 8027594:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027598:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802759c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80275a0:	fa5f f48c 	uxtb.w	r4, ip
 80275a4:	9412      	str	r4, [sp, #72]	@ 0x48
 80275a6:	b300      	cbz	r0, 80275ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80275a8:	444b      	add	r3, r9
 80275aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80275ae:	07dc      	lsls	r4, r3, #31
 80275b0:	f103 0301 	add.w	r3, r3, #1
 80275b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80275b8:	bf54      	ite	pl
 80275ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80275be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80275c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80275c6:	fa5f f48c 	uxtb.w	r4, ip
 80275ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80275ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80275d0:	07dc      	lsls	r4, r3, #31
 80275d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80275d6:	bf54      	ite	pl
 80275d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80275dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80275e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80275e4:	fa5f f38c 	uxtb.w	r3, ip
 80275e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80275ea:	b289      	uxth	r1, r1
 80275ec:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80275ee:	b280      	uxth	r0, r0
 80275f0:	fb01 f300 	mul.w	r3, r1, r0
 80275f4:	0109      	lsls	r1, r1, #4
 80275f6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80275fa:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 80275fe:	1ac9      	subs	r1, r1, r3
 8027600:	b280      	uxth	r0, r0
 8027602:	b289      	uxth	r1, r1
 8027604:	ebac 0c00 	sub.w	ip, ip, r0
 8027608:	4361      	muls	r1, r4
 802760a:	fa1f fc8c 	uxth.w	ip, ip
 802760e:	fb02 120c 	mla	r2, r2, ip, r1
 8027612:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027614:	fb00 2001 	mla	r0, r0, r1, r2
 8027618:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802761a:	fb03 0302 	mla	r3, r3, r2, r0
 802761e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027622:	2b00      	cmp	r3, #0
 8027624:	d039      	beq.n	802769a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027626:	4a21      	ldr	r2, [pc, #132]	@ (80276ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027628:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802762c:	6810      	ldr	r0, [r2, #0]
 802762e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027630:	fa5f fc80 	uxtb.w	ip, r0
 8027634:	4353      	muls	r3, r2
 8027636:	1c5a      	adds	r2, r3, #1
 8027638:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802763c:	121b      	asrs	r3, r3, #8
 802763e:	b29a      	uxth	r2, r3
 8027640:	43db      	mvns	r3, r3
 8027642:	fb1c fc02 	smulbb	ip, ip, r2
 8027646:	b2db      	uxtb	r3, r3
 8027648:	fb01 c103 	mla	r1, r1, r3, ip
 802764c:	b289      	uxth	r1, r1
 802764e:	f101 0c01 	add.w	ip, r1, #1
 8027652:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8027656:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802765a:	fb1c fc03 	smulbb	ip, ip, r3
 802765e:	1209      	asrs	r1, r1, #8
 8027660:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8027664:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8027668:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802766c:	fb01 c102 	mla	r1, r1, r2, ip
 8027670:	b289      	uxth	r1, r1
 8027672:	f101 0c01 	add.w	ip, r1, #1
 8027676:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802767a:	1209      	asrs	r1, r1, #8
 802767c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8027680:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8027684:	fb11 f303 	smulbb	r3, r1, r3
 8027688:	fb00 3002 	mla	r0, r0, r2, r3
 802768c:	b280      	uxth	r0, r0
 802768e:	1c42      	adds	r2, r0, #1
 8027690:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027694:	1200      	asrs	r0, r0, #8
 8027696:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802769a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802769c:	f10e 0e03 	add.w	lr, lr, #3
 80276a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80276a4:	441d      	add	r5, r3
 80276a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80276a8:	441e      	add	r6, r3
 80276aa:	e6db      	b.n	8027464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80276ac:	240621c8 	.word	0x240621c8
 80276b0:	2800      	cmp	r0, #0
 80276b2:	d09a      	beq.n	80275ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80276b4:	444b      	add	r3, r9
 80276b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80276ba:	07db      	lsls	r3, r3, #31
 80276bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80276c0:	bf54      	ite	pl
 80276c2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80276c6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80276ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80276ce:	fa5f f38c 	uxtb.w	r3, ip
 80276d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80276d4:	e789      	b.n	80275ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80276d6:	b017      	add	sp, #92	@ 0x5c
 80276d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080276dc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80276dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276e0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 80276e4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80276e8:	2d00      	cmp	r5, #0
 80276ea:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80276ee:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80276f2:	fb04 5e03 	mla	lr, r4, r3, r5
 80276f6:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80276fa:	f2c0 80b1 	blt.w	8027860 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80276fe:	45a9      	cmp	r9, r5
 8027700:	f340 80ae 	ble.w	8027860 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027704:	2c00      	cmp	r4, #0
 8027706:	f2c0 80ab 	blt.w	8027860 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802770a:	45a0      	cmp	r8, r4
 802770c:	f340 80a8 	ble.w	8027860 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8027710:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8027714:	f01e 0f01 	tst.w	lr, #1
 8027718:	5d97      	ldrb	r7, [r2, r6]
 802771a:	bf0c      	ite	eq
 802771c:	f007 070f 	andeq.w	r7, r7, #15
 8027720:	113f      	asrne	r7, r7, #4
 8027722:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8027726:	b2ff      	uxtb	r7, r7
 8027728:	f115 0a01 	adds.w	sl, r5, #1
 802772c:	f100 809a 	bmi.w	8027864 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027730:	45d1      	cmp	r9, sl
 8027732:	f340 8097 	ble.w	8027864 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027736:	2c00      	cmp	r4, #0
 8027738:	f2c0 8094 	blt.w	8027864 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802773c:	45a0      	cmp	r8, r4
 802773e:	f340 8091 	ble.w	8027864 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8027742:	2800      	cmp	r0, #0
 8027744:	f000 8090 	beq.w	8027868 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8027748:	f10e 0b01 	add.w	fp, lr, #1
 802774c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8027750:	f01b 0f01 	tst.w	fp, #1
 8027754:	5d96      	ldrb	r6, [r2, r6]
 8027756:	bf0c      	ite	eq
 8027758:	f006 060f 	andeq.w	r6, r6, #15
 802775c:	1136      	asrne	r6, r6, #4
 802775e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027762:	b2f6      	uxtb	r6, r6
 8027764:	f1bc 0f00 	cmp.w	ip, #0
 8027768:	f000 8082 	beq.w	8027870 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 802776c:	2d00      	cmp	r5, #0
 802776e:	f104 0401 	add.w	r4, r4, #1
 8027772:	db7b      	blt.n	802786c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027774:	45a9      	cmp	r9, r5
 8027776:	dd79      	ble.n	802786c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027778:	2c00      	cmp	r4, #0
 802777a:	db77      	blt.n	802786c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802777c:	45a0      	cmp	r8, r4
 802777e:	dd75      	ble.n	802786c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027780:	eb03 0b0e 	add.w	fp, r3, lr
 8027784:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027788:	f01b 0f01 	tst.w	fp, #1
 802778c:	5d55      	ldrb	r5, [r2, r5]
 802778e:	bf0c      	ite	eq
 8027790:	f005 050f 	andeq.w	r5, r5, #15
 8027794:	112d      	asrne	r5, r5, #4
 8027796:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802779a:	b2ed      	uxtb	r5, r5
 802779c:	f1ba 0f00 	cmp.w	sl, #0
 80277a0:	db69      	blt.n	8027876 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80277a2:	45d1      	cmp	r9, sl
 80277a4:	dd67      	ble.n	8027876 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80277a6:	2c00      	cmp	r4, #0
 80277a8:	db65      	blt.n	8027876 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80277aa:	45a0      	cmp	r8, r4
 80277ac:	dd63      	ble.n	8027876 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80277ae:	2800      	cmp	r0, #0
 80277b0:	d063      	beq.n	802787a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80277b2:	3301      	adds	r3, #1
 80277b4:	449e      	add	lr, r3
 80277b6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80277ba:	f01e 0f01 	tst.w	lr, #1
 80277be:	5cd4      	ldrb	r4, [r2, r3]
 80277c0:	bf0c      	ite	eq
 80277c2:	f004 040f 	andeq.w	r4, r4, #15
 80277c6:	1124      	asrne	r4, r4, #4
 80277c8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80277cc:	b2e3      	uxtb	r3, r4
 80277ce:	b282      	uxth	r2, r0
 80277d0:	fa1f fc8c 	uxth.w	ip, ip
 80277d4:	fb02 f40c 	mul.w	r4, r2, ip
 80277d8:	0112      	lsls	r2, r2, #4
 80277da:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80277de:	fa1f f08c 	uxth.w	r0, ip
 80277e2:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 80277e6:	1b12      	subs	r2, r2, r4
 80277e8:	ebac 0c00 	sub.w	ip, ip, r0
 80277ec:	b292      	uxth	r2, r2
 80277ee:	fa1f fc8c 	uxth.w	ip, ip
 80277f2:	4372      	muls	r2, r6
 80277f4:	fb07 220c 	mla	r2, r7, ip, r2
 80277f8:	fb00 2005 	mla	r0, r0, r5, r2
 80277fc:	fb04 0303 	mla	r3, r4, r3, r0
 8027800:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027804:	b353      	cbz	r3, 802785c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8027806:	4a1e      	ldr	r2, [pc, #120]	@ (8027880 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8027808:	7808      	ldrb	r0, [r1, #0]
 802780a:	6814      	ldr	r4, [r2, #0]
 802780c:	b29a      	uxth	r2, r3
 802780e:	43db      	mvns	r3, r3
 8027810:	b2e5      	uxtb	r5, r4
 8027812:	b2db      	uxtb	r3, r3
 8027814:	fb15 f502 	smulbb	r5, r5, r2
 8027818:	fb00 5003 	mla	r0, r0, r3, r5
 802781c:	b280      	uxth	r0, r0
 802781e:	1c45      	adds	r5, r0, #1
 8027820:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027824:	784d      	ldrb	r5, [r1, #1]
 8027826:	fb15 f503 	smulbb	r5, r5, r3
 802782a:	1200      	asrs	r0, r0, #8
 802782c:	7008      	strb	r0, [r1, #0]
 802782e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8027832:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027836:	fb00 5002 	mla	r0, r0, r2, r5
 802783a:	b280      	uxth	r0, r0
 802783c:	1c45      	adds	r5, r0, #1
 802783e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027842:	1200      	asrs	r0, r0, #8
 8027844:	7048      	strb	r0, [r1, #1]
 8027846:	7888      	ldrb	r0, [r1, #2]
 8027848:	fb10 f303 	smulbb	r3, r0, r3
 802784c:	fb04 3202 	mla	r2, r4, r2, r3
 8027850:	b292      	uxth	r2, r2
 8027852:	1c53      	adds	r3, r2, #1
 8027854:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027858:	1212      	asrs	r2, r2, #8
 802785a:	708a      	strb	r2, [r1, #2]
 802785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027860:	2700      	movs	r7, #0
 8027862:	e761      	b.n	8027728 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8027864:	2600      	movs	r6, #0
 8027866:	e77d      	b.n	8027764 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8027868:	4606      	mov	r6, r0
 802786a:	e77b      	b.n	8027764 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802786c:	2500      	movs	r5, #0
 802786e:	e795      	b.n	802779c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8027870:	4663      	mov	r3, ip
 8027872:	4665      	mov	r5, ip
 8027874:	e7ab      	b.n	80277ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027876:	2300      	movs	r3, #0
 8027878:	e7a9      	b.n	80277ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802787a:	4603      	mov	r3, r0
 802787c:	e7a7      	b.n	80277ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802787e:	bf00      	nop
 8027880:	240621c8 	.word	0x240621c8

08027884 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027888:	b093      	sub	sp, #76	@ 0x4c
 802788a:	461c      	mov	r4, r3
 802788c:	920c      	str	r2, [sp, #48]	@ 0x30
 802788e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8027890:	9011      	str	r0, [sp, #68]	@ 0x44
 8027892:	9107      	str	r1, [sp, #28]
 8027894:	6850      	ldr	r0, [r2, #4]
 8027896:	6812      	ldr	r2, [r2, #0]
 8027898:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802789c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80278a0:	fb00 1303 	mla	r3, r0, r3, r1
 80278a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80278a8:	eb02 0b03 	add.w	fp, r2, r3
 80278ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80278ae:	689b      	ldr	r3, [r3, #8]
 80278b0:	3301      	adds	r3, #1
 80278b2:	f023 0301 	bic.w	r3, r3, #1
 80278b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80278b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80278ba:	f8d3 8000 	ldr.w	r8, [r3]
 80278be:	9b07      	ldr	r3, [sp, #28]
 80278c0:	2b00      	cmp	r3, #0
 80278c2:	dc03      	bgt.n	80278cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80278c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80278c6:	2b00      	cmp	r3, #0
 80278c8:	f340 822b 	ble.w	8027d22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80278cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80278ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80278d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80278d6:	1e48      	subs	r0, r1, #1
 80278d8:	1e57      	subs	r7, r2, #1
 80278da:	2c00      	cmp	r4, #0
 80278dc:	f340 80d7 	ble.w	8027a8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80278e0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80278e4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80278e8:	d406      	bmi.n	80278f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278ea:	4584      	cmp	ip, r0
 80278ec:	da04      	bge.n	80278f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278ee:	2b00      	cmp	r3, #0
 80278f0:	db02      	blt.n	80278f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278f2:	42bb      	cmp	r3, r7
 80278f4:	f2c0 80cc 	blt.w	8027a90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80278f8:	f11c 0c01 	adds.w	ip, ip, #1
 80278fc:	f100 80bf 	bmi.w	8027a7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027900:	4561      	cmp	r1, ip
 8027902:	f2c0 80bc 	blt.w	8027a7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027906:	3301      	adds	r3, #1
 8027908:	f100 80b9 	bmi.w	8027a7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802790c:	429a      	cmp	r2, r3
 802790e:	f2c0 80b6 	blt.w	8027a7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027912:	46a2      	mov	sl, r4
 8027914:	465f      	mov	r7, fp
 8027916:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802791a:	f1ba 0f00 	cmp.w	sl, #0
 802791e:	f340 80d4 	ble.w	8027aca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027922:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8027926:	1430      	asrs	r0, r6, #16
 8027928:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802792c:	9308      	str	r3, [sp, #32]
 802792e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027930:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027934:	142b      	asrs	r3, r5, #16
 8027936:	f100 8124 	bmi.w	8027b82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802793a:	f10c 32ff 	add.w	r2, ip, #4294967295
 802793e:	4293      	cmp	r3, r2
 8027940:	f280 811f 	bge.w	8027b82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027944:	2800      	cmp	r0, #0
 8027946:	f2c0 811c 	blt.w	8027b82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802794a:	f10e 32ff 	add.w	r2, lr, #4294967295
 802794e:	4290      	cmp	r0, r2
 8027950:	f280 8117 	bge.w	8027b82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027954:	fb00 3309 	mla	r3, r0, r9, r3
 8027958:	0858      	lsrs	r0, r3, #1
 802795a:	07da      	lsls	r2, r3, #31
 802795c:	9a08      	ldr	r2, [sp, #32]
 802795e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8027962:	bf54      	ite	pl
 8027964:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027968:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802796c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027970:	fa5f fc8c 	uxtb.w	ip, ip
 8027974:	2a00      	cmp	r2, #0
 8027976:	f000 80ed 	beq.w	8027b54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802797a:	1c58      	adds	r0, r3, #1
 802797c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027980:	07c0      	lsls	r0, r0, #31
 8027982:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8027986:	bf54      	ite	pl
 8027988:	f00e 0e0f 	andpl.w	lr, lr, #15
 802798c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027990:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027994:	fa5f fe8e 	uxtb.w	lr, lr
 8027998:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802799c:	b1c9      	cbz	r1, 80279d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802799e:	444b      	add	r3, r9
 80279a0:	0858      	lsrs	r0, r3, #1
 80279a2:	07da      	lsls	r2, r3, #31
 80279a4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80279a8:	bf54      	ite	pl
 80279aa:	f000 000f 	andpl.w	r0, r0, #15
 80279ae:	1100      	asrmi	r0, r0, #4
 80279b0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80279b4:	b2c0      	uxtb	r0, r0
 80279b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80279b8:	1c58      	adds	r0, r3, #1
 80279ba:	0843      	lsrs	r3, r0, #1
 80279bc:	07c2      	lsls	r2, r0, #31
 80279be:	f818 3003 	ldrb.w	r3, [r8, r3]
 80279c2:	bf54      	ite	pl
 80279c4:	f003 030f 	andpl.w	r3, r3, #15
 80279c8:	111b      	asrmi	r3, r3, #4
 80279ca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80279ce:	b2db      	uxtb	r3, r3
 80279d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80279d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80279d6:	b289      	uxth	r1, r1
 80279d8:	fb02 f301 	mul.w	r3, r2, r1
 80279dc:	0112      	lsls	r2, r2, #4
 80279de:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80279e2:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80279e6:	1ad2      	subs	r2, r2, r3
 80279e8:	b289      	uxth	r1, r1
 80279ea:	b292      	uxth	r2, r2
 80279ec:	1a40      	subs	r0, r0, r1
 80279ee:	fa1f fe80 	uxth.w	lr, r0
 80279f2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80279f4:	4342      	muls	r2, r0
 80279f6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80279fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80279fc:	fb01 c102 	mla	r1, r1, r2, ip
 8027a00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027a02:	fb03 1302 	mla	r3, r3, r2, r1
 8027a06:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a0a:	b383      	cbz	r3, 8027a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027a0c:	4ac6      	ldr	r2, [pc, #792]	@ (8027d28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8027a0e:	2bff      	cmp	r3, #255	@ 0xff
 8027a10:	6812      	ldr	r2, [r2, #0]
 8027a12:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8027a16:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8027a1a:	b2d2      	uxtb	r2, r2
 8027a1c:	f000 80ac 	beq.w	8027b78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027a20:	b299      	uxth	r1, r3
 8027a22:	43db      	mvns	r3, r3
 8027a24:	f897 c000 	ldrb.w	ip, [r7]
 8027a28:	fb12 f201 	smulbb	r2, r2, r1
 8027a2c:	b2db      	uxtb	r3, r3
 8027a2e:	fb10 f001 	smulbb	r0, r0, r1
 8027a32:	fb0c 2203 	mla	r2, ip, r3, r2
 8027a36:	fb1e f101 	smulbb	r1, lr, r1
 8027a3a:	b292      	uxth	r2, r2
 8027a3c:	f102 0c01 	add.w	ip, r2, #1
 8027a40:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027a44:	1212      	asrs	r2, r2, #8
 8027a46:	703a      	strb	r2, [r7, #0]
 8027a48:	787a      	ldrb	r2, [r7, #1]
 8027a4a:	fb02 0003 	mla	r0, r2, r3, r0
 8027a4e:	b280      	uxth	r0, r0
 8027a50:	1c42      	adds	r2, r0, #1
 8027a52:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027a56:	78ba      	ldrb	r2, [r7, #2]
 8027a58:	fb02 1303 	mla	r3, r2, r3, r1
 8027a5c:	1200      	asrs	r0, r0, #8
 8027a5e:	b29b      	uxth	r3, r3
 8027a60:	7078      	strb	r0, [r7, #1]
 8027a62:	f103 0e01 	add.w	lr, r3, #1
 8027a66:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8027a6a:	121b      	asrs	r3, r3, #8
 8027a6c:	70bb      	strb	r3, [r7, #2]
 8027a6e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027a70:	3703      	adds	r7, #3
 8027a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027a76:	441d      	add	r5, r3
 8027a78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a7a:	441e      	add	r6, r3
 8027a7c:	e74d      	b.n	802791a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027a7e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027a80:	3c01      	subs	r4, #1
 8027a82:	f10b 0b03 	add.w	fp, fp, #3
 8027a86:	441d      	add	r5, r3
 8027a88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a8a:	441e      	add	r6, r3
 8027a8c:	e725      	b.n	80278da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027a8e:	d021      	beq.n	8027ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8027a90:	1e63      	subs	r3, r4, #1
 8027a92:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8027a94:	fb00 5003 	mla	r0, r0, r3, r5
 8027a98:	1400      	asrs	r0, r0, #16
 8027a9a:	f53f af3a 	bmi.w	8027912 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027a9e:	3901      	subs	r1, #1
 8027aa0:	4288      	cmp	r0, r1
 8027aa2:	f6bf af36 	bge.w	8027912 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027aa6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8027aa8:	fb01 6303 	mla	r3, r1, r3, r6
 8027aac:	141b      	asrs	r3, r3, #16
 8027aae:	f53f af30 	bmi.w	8027912 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027ab2:	3a01      	subs	r2, #1
 8027ab4:	4293      	cmp	r3, r2
 8027ab6:	f6bf af2c 	bge.w	8027912 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027aba:	f10b 0c03 	add.w	ip, fp, #3
 8027abe:	46a6      	mov	lr, r4
 8027ac0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027ac4:	f1be 0f00 	cmp.w	lr, #0
 8027ac8:	dc79      	bgt.n	8027bbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8027aca:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8027ace:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027ad2:	44a3      	add	fp, r4
 8027ad4:	9b07      	ldr	r3, [sp, #28]
 8027ad6:	2b00      	cmp	r3, #0
 8027ad8:	f340 8123 	ble.w	8027d22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027adc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027ae0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027ae2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027ae6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027aea:	eef0 6a62 	vmov.f32	s13, s5
 8027aee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027af2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027af6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027afa:	ee16 5a90 	vmov	r5, s13
 8027afe:	eef0 6a43 	vmov.f32	s13, s6
 8027b02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b06:	ee16 6a90 	vmov	r6, s13
 8027b0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027b0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027b12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027b16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027b1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027b1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027b22:	ee12 2a90 	vmov	r2, s5
 8027b26:	eef0 2a47 	vmov.f32	s5, s14
 8027b2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b2e:	ee13 2a10 	vmov	r2, s6
 8027b32:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027b34:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027b36:	eeb0 3a67 	vmov.f32	s6, s15
 8027b3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b3e:	9320      	str	r3, [sp, #128]	@ 0x80
 8027b40:	9b07      	ldr	r3, [sp, #28]
 8027b42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027b44:	3b01      	subs	r3, #1
 8027b46:	9307      	str	r3, [sp, #28]
 8027b48:	bf08      	it	eq
 8027b4a:	4614      	moveq	r4, r2
 8027b4c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027b4e:	bf18      	it	ne
 8027b50:	461c      	movne	r4, r3
 8027b52:	e6b4      	b.n	80278be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027b54:	2900      	cmp	r1, #0
 8027b56:	f43f af3c 	beq.w	80279d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027b5a:	eb09 0003 	add.w	r0, r9, r3
 8027b5e:	0843      	lsrs	r3, r0, #1
 8027b60:	07c0      	lsls	r0, r0, #31
 8027b62:	f818 3003 	ldrb.w	r3, [r8, r3]
 8027b66:	bf54      	ite	pl
 8027b68:	f003 030f 	andpl.w	r3, r3, #15
 8027b6c:	111b      	asrmi	r3, r3, #4
 8027b6e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027b72:	b2db      	uxtb	r3, r3
 8027b74:	930a      	str	r3, [sp, #40]	@ 0x28
 8027b76:	e72c      	b.n	80279d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027b78:	703a      	strb	r2, [r7, #0]
 8027b7a:	7078      	strb	r0, [r7, #1]
 8027b7c:	f887 e002 	strb.w	lr, [r7, #2]
 8027b80:	e775      	b.n	8027a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027b82:	1c5a      	adds	r2, r3, #1
 8027b84:	f53f af73 	bmi.w	8027a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027b88:	4594      	cmp	ip, r2
 8027b8a:	f6ff af70 	blt.w	8027a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027b8e:	1c42      	adds	r2, r0, #1
 8027b90:	f53f af6d 	bmi.w	8027a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027b94:	4596      	cmp	lr, r2
 8027b96:	f6ff af6a 	blt.w	8027a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027b9a:	9302      	str	r3, [sp, #8]
 8027b9c:	fa0f f38e 	sxth.w	r3, lr
 8027ba0:	9a08      	ldr	r2, [sp, #32]
 8027ba2:	9301      	str	r3, [sp, #4]
 8027ba4:	fa0f f38c 	sxth.w	r3, ip
 8027ba8:	9105      	str	r1, [sp, #20]
 8027baa:	4639      	mov	r1, r7
 8027bac:	9300      	str	r3, [sp, #0]
 8027bae:	464b      	mov	r3, r9
 8027bb0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027bb4:	4642      	mov	r2, r8
 8027bb6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027bb8:	f7ff fd90 	bl	80276dc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8027bbc:	e757      	b.n	8027a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027bbe:	142a      	asrs	r2, r5, #16
 8027bc0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027bc4:	1433      	asrs	r3, r6, #16
 8027bc6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8027bca:	fb09 2303 	mla	r3, r9, r3, r2
 8027bce:	085a      	lsrs	r2, r3, #1
 8027bd0:	07d9      	lsls	r1, r3, #31
 8027bd2:	f818 2002 	ldrb.w	r2, [r8, r2]
 8027bd6:	bf54      	ite	pl
 8027bd8:	f002 020f 	andpl.w	r2, r2, #15
 8027bdc:	1112      	asrmi	r2, r2, #4
 8027bde:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027be2:	b2d2      	uxtb	r2, r2
 8027be4:	2800      	cmp	r0, #0
 8027be6:	f000 8085 	beq.w	8027cf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027bea:	f103 0a01 	add.w	sl, r3, #1
 8027bee:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8027bf2:	f01a 0f01 	tst.w	sl, #1
 8027bf6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027bfa:	bf0c      	ite	eq
 8027bfc:	f001 010f 	andeq.w	r1, r1, #15
 8027c00:	1109      	asrne	r1, r1, #4
 8027c02:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027c06:	b2c9      	uxtb	r1, r1
 8027c08:	910f      	str	r1, [sp, #60]	@ 0x3c
 8027c0a:	b1df      	cbz	r7, 8027c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027c0c:	444b      	add	r3, r9
 8027c0e:	0859      	lsrs	r1, r3, #1
 8027c10:	f013 0f01 	tst.w	r3, #1
 8027c14:	f103 0301 	add.w	r3, r3, #1
 8027c18:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027c1c:	bf0c      	ite	eq
 8027c1e:	f001 010f 	andeq.w	r1, r1, #15
 8027c22:	1109      	asrne	r1, r1, #4
 8027c24:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027c28:	b2c9      	uxtb	r1, r1
 8027c2a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027c2c:	0859      	lsrs	r1, r3, #1
 8027c2e:	07db      	lsls	r3, r3, #31
 8027c30:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027c34:	bf54      	ite	pl
 8027c36:	f001 010f 	andpl.w	r1, r1, #15
 8027c3a:	1109      	asrmi	r1, r1, #4
 8027c3c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027c40:	b2c9      	uxtb	r1, r1
 8027c42:	9110      	str	r1, [sp, #64]	@ 0x40
 8027c44:	b280      	uxth	r0, r0
 8027c46:	b2bf      	uxth	r7, r7
 8027c48:	fb00 f307 	mul.w	r3, r0, r7
 8027c4c:	0100      	lsls	r0, r0, #4
 8027c4e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8027c52:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8027c56:	1ac0      	subs	r0, r0, r3
 8027c58:	b2bf      	uxth	r7, r7
 8027c5a:	b280      	uxth	r0, r0
 8027c5c:	1bc9      	subs	r1, r1, r7
 8027c5e:	fa1f fa81 	uxth.w	sl, r1
 8027c62:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027c64:	4348      	muls	r0, r1
 8027c66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027c68:	fb02 020a 	mla	r2, r2, sl, r0
 8027c6c:	fb07 2701 	mla	r7, r7, r1, r2
 8027c70:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027c72:	fb03 7302 	mla	r3, r3, r2, r7
 8027c76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c7a:	b393      	cbz	r3, 8027ce2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8027c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8027d28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8027c7e:	2bff      	cmp	r3, #255	@ 0xff
 8027c80:	6811      	ldr	r1, [r2, #0]
 8027c82:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8027c86:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8027c8a:	b2c9      	uxtb	r1, r1
 8027c8c:	d042      	beq.n	8027d14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027c8e:	b298      	uxth	r0, r3
 8027c90:	43db      	mvns	r3, r3
 8027c92:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8027c96:	fb11 f100 	smulbb	r1, r1, r0
 8027c9a:	b2db      	uxtb	r3, r3
 8027c9c:	fb17 f700 	smulbb	r7, r7, r0
 8027ca0:	fb02 1103 	mla	r1, r2, r3, r1
 8027ca4:	fb1a f000 	smulbb	r0, sl, r0
 8027ca8:	b289      	uxth	r1, r1
 8027caa:	1c4a      	adds	r2, r1, #1
 8027cac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027cb0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8027cb4:	fb02 7703 	mla	r7, r2, r3, r7
 8027cb8:	1209      	asrs	r1, r1, #8
 8027cba:	b2bf      	uxth	r7, r7
 8027cbc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8027cc0:	1c7a      	adds	r2, r7, #1
 8027cc2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8027cc6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8027cca:	fb02 0303 	mla	r3, r2, r3, r0
 8027cce:	123f      	asrs	r7, r7, #8
 8027cd0:	b29b      	uxth	r3, r3
 8027cd2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8027cd6:	1c5a      	adds	r2, r3, #1
 8027cd8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027cdc:	121b      	asrs	r3, r3, #8
 8027cde:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8027ce2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027ce4:	f10c 0c03 	add.w	ip, ip, #3
 8027ce8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8027cec:	441d      	add	r5, r3
 8027cee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027cf0:	441e      	add	r6, r3
 8027cf2:	e6e7      	b.n	8027ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8027cf4:	2f00      	cmp	r7, #0
 8027cf6:	d0a5      	beq.n	8027c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027cf8:	444b      	add	r3, r9
 8027cfa:	0859      	lsrs	r1, r3, #1
 8027cfc:	07db      	lsls	r3, r3, #31
 8027cfe:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027d02:	bf54      	ite	pl
 8027d04:	f001 010f 	andpl.w	r1, r1, #15
 8027d08:	1109      	asrmi	r1, r1, #4
 8027d0a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027d0e:	b2c9      	uxtb	r1, r1
 8027d10:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027d12:	e797      	b.n	8027c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027d14:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8027d18:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8027d1c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8027d20:	e7df      	b.n	8027ce2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8027d22:	b013      	add	sp, #76	@ 0x4c
 8027d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d28:	240621c8 	.word	0x240621c8

08027d2c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8027d2c:	b530      	push	{r4, r5, lr}
 8027d2e:	b29d      	uxth	r5, r3
 8027d30:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8027d34:	780c      	ldrb	r4, [r1, #0]
 8027d36:	b298      	uxth	r0, r3
 8027d38:	7813      	ldrb	r3, [r2, #0]
 8027d3a:	fb14 f405 	smulbb	r4, r4, r5
 8027d3e:	fb13 f300 	smulbb	r3, r3, r0
 8027d42:	441c      	add	r4, r3
 8027d44:	b2a4      	uxth	r4, r4
 8027d46:	1c63      	adds	r3, r4, #1
 8027d48:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027d4c:	7853      	ldrb	r3, [r2, #1]
 8027d4e:	fb13 f300 	smulbb	r3, r3, r0
 8027d52:	1224      	asrs	r4, r4, #8
 8027d54:	7014      	strb	r4, [r2, #0]
 8027d56:	784c      	ldrb	r4, [r1, #1]
 8027d58:	fb14 f405 	smulbb	r4, r4, r5
 8027d5c:	441c      	add	r4, r3
 8027d5e:	b2a4      	uxth	r4, r4
 8027d60:	1c63      	adds	r3, r4, #1
 8027d62:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027d66:	1224      	asrs	r4, r4, #8
 8027d68:	7054      	strb	r4, [r2, #1]
 8027d6a:	788b      	ldrb	r3, [r1, #2]
 8027d6c:	7891      	ldrb	r1, [r2, #2]
 8027d6e:	fb13 f305 	smulbb	r3, r3, r5
 8027d72:	fb11 f000 	smulbb	r0, r1, r0
 8027d76:	4403      	add	r3, r0
 8027d78:	b29b      	uxth	r3, r3
 8027d7a:	1c59      	adds	r1, r3, #1
 8027d7c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027d80:	121b      	asrs	r3, r3, #8
 8027d82:	7093      	strb	r3, [r2, #2]
 8027d84:	bd30      	pop	{r4, r5, pc}
	...

08027d88 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8027d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d8c:	461c      	mov	r4, r3
 8027d8e:	b08b      	sub	sp, #44	@ 0x2c
 8027d90:	460e      	mov	r6, r1
 8027d92:	4615      	mov	r5, r2
 8027d94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027d96:	4682      	mov	sl, r0
 8027d98:	6861      	ldr	r1, [r4, #4]
 8027d9a:	aa06      	add	r2, sp, #24
 8027d9c:	6820      	ldr	r0, [r4, #0]
 8027d9e:	2702      	movs	r7, #2
 8027da0:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8027da4:	3504      	adds	r5, #4
 8027da6:	c203      	stmia	r2!, {r0, r1}
 8027da8:	6818      	ldr	r0, [r3, #0]
 8027daa:	aa08      	add	r2, sp, #32
 8027dac:	6859      	ldr	r1, [r3, #4]
 8027dae:	c203      	stmia	r2!, {r0, r1}
 8027db0:	a806      	add	r0, sp, #24
 8027db2:	f7f2 ff39 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027db6:	4621      	mov	r1, r4
 8027db8:	a808      	add	r0, sp, #32
 8027dba:	f7f2 ff79 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027dbe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8027dc2:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8027dc6:	f002 0301 	and.w	r3, r2, #1
 8027dca:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8027dce:	9302      	str	r3, [sp, #8]
 8027dd0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8027dd4:	f003 0101 	and.w	r1, r3, #1
 8027dd8:	9101      	str	r1, [sp, #4]
 8027dda:	9801      	ldr	r0, [sp, #4]
 8027ddc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8027de0:	4403      	add	r3, r0
 8027de2:	fb01 2303 	mla	r3, r1, r3, r2
 8027de6:	fb93 f3f7 	sdiv	r3, r3, r7
 8027dea:	441e      	add	r6, r3
 8027dec:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8027df0:	441a      	add	r2, r3
 8027df2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8027df6:	4419      	add	r1, r3
 8027df8:	4b70      	ldr	r3, [pc, #448]	@ (8027fbc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8027dfa:	f8ad 2020 	strh.w	r2, [sp, #32]
 8027dfe:	6818      	ldr	r0, [r3, #0]
 8027e00:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8027e04:	6803      	ldr	r3, [r0, #0]
 8027e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027e08:	4798      	blx	r3
 8027e0a:	4a6d      	ldr	r2, [pc, #436]	@ (8027fc0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8027e0c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8027e10:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027e14:	8813      	ldrh	r3, [r2, #0]
 8027e16:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8027e1a:	fb03 1404 	mla	r4, r3, r4, r1
 8027e1e:	4611      	mov	r1, r2
 8027e20:	fb0b f303 	mul.w	r3, fp, r3
 8027e24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027e28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027e2c:	4404      	add	r4, r0
 8027e2e:	4423      	add	r3, r4
 8027e30:	d073      	beq.n	8027f1a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8027e32:	9705      	str	r7, [sp, #20]
 8027e34:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8027e38:	9b03      	ldr	r3, [sp, #12]
 8027e3a:	429c      	cmp	r4, r3
 8027e3c:	f080 80b5 	bcs.w	8027faa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8027e40:	9b02      	ldr	r3, [sp, #8]
 8027e42:	b35b      	cbz	r3, 8027e9c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8027e44:	7831      	ldrb	r1, [r6, #0]
 8027e46:	4622      	mov	r2, r4
 8027e48:	1c77      	adds	r7, r6, #1
 8027e4a:	3403      	adds	r4, #3
 8027e4c:	f001 010f 	and.w	r1, r1, #15
 8027e50:	f108 3bff 	add.w	fp, r8, #4294967295
 8027e54:	464b      	mov	r3, r9
 8027e56:	4650      	mov	r0, sl
 8027e58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027e5c:	4429      	add	r1, r5
 8027e5e:	f7ff ff65 	bl	8027d2c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027e62:	f1bb 0f01 	cmp.w	fp, #1
 8027e66:	dd1c      	ble.n	8027ea2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8027e68:	7839      	ldrb	r1, [r7, #0]
 8027e6a:	4622      	mov	r2, r4
 8027e6c:	464b      	mov	r3, r9
 8027e6e:	4650      	mov	r0, sl
 8027e70:	0909      	lsrs	r1, r1, #4
 8027e72:	f1ab 0b02 	sub.w	fp, fp, #2
 8027e76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027e7a:	4429      	add	r1, r5
 8027e7c:	f7ff ff56 	bl	8027d2c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027e80:	f817 1b01 	ldrb.w	r1, [r7], #1
 8027e84:	1ce2      	adds	r2, r4, #3
 8027e86:	464b      	mov	r3, r9
 8027e88:	f001 010f 	and.w	r1, r1, #15
 8027e8c:	4650      	mov	r0, sl
 8027e8e:	3406      	adds	r4, #6
 8027e90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027e94:	4429      	add	r1, r5
 8027e96:	f7ff ff49 	bl	8027d2c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027e9a:	e7e2      	b.n	8027e62 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8027e9c:	4637      	mov	r7, r6
 8027e9e:	46c3      	mov	fp, r8
 8027ea0:	e7df      	b.n	8027e62 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8027ea2:	d10a      	bne.n	8027eba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8027ea4:	7839      	ldrb	r1, [r7, #0]
 8027ea6:	4622      	mov	r2, r4
 8027ea8:	3403      	adds	r4, #3
 8027eaa:	464b      	mov	r3, r9
 8027eac:	0909      	lsrs	r1, r1, #4
 8027eae:	4650      	mov	r0, sl
 8027eb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027eb4:	4429      	add	r1, r5
 8027eb6:	f7ff ff39 	bl	8027d2c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027eba:	9b04      	ldr	r3, [sp, #16]
 8027ebc:	9a01      	ldr	r2, [sp, #4]
 8027ebe:	881b      	ldrh	r3, [r3, #0]
 8027ec0:	eba3 0308 	sub.w	r3, r3, r8
 8027ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027ec8:	441c      	add	r4, r3
 8027eca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8027ece:	4413      	add	r3, r2
 8027ed0:	9a05      	ldr	r2, [sp, #20]
 8027ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8027ed6:	441e      	add	r6, r3
 8027ed8:	e7ae      	b.n	8027e38 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8027eda:	4632      	mov	r2, r6
 8027edc:	46c4      	mov	ip, r8
 8027ede:	e037      	b.n	8027f50 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8027ee0:	d10e      	bne.n	8027f00 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8027ee2:	7812      	ldrb	r2, [r2, #0]
 8027ee4:	3003      	adds	r0, #3
 8027ee6:	0912      	lsrs	r2, r2, #4
 8027ee8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027eec:	18ac      	adds	r4, r5, r2
 8027eee:	5caa      	ldrb	r2, [r5, r2]
 8027ef0:	f800 2c03 	strb.w	r2, [r0, #-3]
 8027ef4:	7862      	ldrb	r2, [r4, #1]
 8027ef6:	f800 2c02 	strb.w	r2, [r0, #-2]
 8027efa:	78a2      	ldrb	r2, [r4, #2]
 8027efc:	f800 2c01 	strb.w	r2, [r0, #-1]
 8027f00:	880c      	ldrh	r4, [r1, #0]
 8027f02:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8027f06:	eba4 0408 	sub.w	r4, r4, r8
 8027f0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027f0e:	4404      	add	r4, r0
 8027f10:	9801      	ldr	r0, [sp, #4]
 8027f12:	4402      	add	r2, r0
 8027f14:	fb92 f2f7 	sdiv	r2, r2, r7
 8027f18:	4416      	add	r6, r2
 8027f1a:	429c      	cmp	r4, r3
 8027f1c:	d245      	bcs.n	8027faa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8027f1e:	9a02      	ldr	r2, [sp, #8]
 8027f20:	2a00      	cmp	r2, #0
 8027f22:	d0da      	beq.n	8027eda <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8027f24:	7830      	ldrb	r0, [r6, #0]
 8027f26:	1c72      	adds	r2, r6, #1
 8027f28:	3403      	adds	r4, #3
 8027f2a:	f000 000f 	and.w	r0, r0, #15
 8027f2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027f32:	eb05 0c00 	add.w	ip, r5, r0
 8027f36:	5c28      	ldrb	r0, [r5, r0]
 8027f38:	f804 0c03 	strb.w	r0, [r4, #-3]
 8027f3c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8027f40:	f804 0c02 	strb.w	r0, [r4, #-2]
 8027f44:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8027f48:	f108 3cff 	add.w	ip, r8, #4294967295
 8027f4c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8027f50:	f1bc 0f01 	cmp.w	ip, #1
 8027f54:	4620      	mov	r0, r4
 8027f56:	f104 0406 	add.w	r4, r4, #6
 8027f5a:	ddc1      	ble.n	8027ee0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8027f5c:	7810      	ldrb	r0, [r2, #0]
 8027f5e:	f1ac 0c02 	sub.w	ip, ip, #2
 8027f62:	0900      	lsrs	r0, r0, #4
 8027f64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027f68:	eb05 0e00 	add.w	lr, r5, r0
 8027f6c:	5c28      	ldrb	r0, [r5, r0]
 8027f6e:	f804 0c06 	strb.w	r0, [r4, #-6]
 8027f72:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8027f76:	f804 0c05 	strb.w	r0, [r4, #-5]
 8027f7a:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8027f7e:	f804 0c04 	strb.w	r0, [r4, #-4]
 8027f82:	f812 0b01 	ldrb.w	r0, [r2], #1
 8027f86:	f000 000f 	and.w	r0, r0, #15
 8027f8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027f8e:	eb05 0e00 	add.w	lr, r5, r0
 8027f92:	5c28      	ldrb	r0, [r5, r0]
 8027f94:	f804 0c03 	strb.w	r0, [r4, #-3]
 8027f98:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8027f9c:	f804 0c02 	strb.w	r0, [r4, #-2]
 8027fa0:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8027fa4:	f804 0c01 	strb.w	r0, [r4, #-1]
 8027fa8:	e7d2      	b.n	8027f50 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8027faa:	4b04      	ldr	r3, [pc, #16]	@ (8027fbc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8027fac:	6818      	ldr	r0, [r3, #0]
 8027fae:	6803      	ldr	r3, [r0, #0]
 8027fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027fb2:	4798      	blx	r3
 8027fb4:	b00b      	add	sp, #44	@ 0x2c
 8027fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027fba:	bf00      	nop
 8027fbc:	240621b8 	.word	0x240621b8
 8027fc0:	240621b2 	.word	0x240621b2

08027fc4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8027fc4:	b530      	push	{r4, r5, lr}
 8027fc6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8027fca:	780d      	ldrb	r5, [r1, #0]
 8027fcc:	28ff      	cmp	r0, #255	@ 0xff
 8027fce:	d107      	bne.n	8027fe0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8027fd0:	2bff      	cmp	r3, #255	@ 0xff
 8027fd2:	d105      	bne.n	8027fe0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8027fd4:	7015      	strb	r5, [r2, #0]
 8027fd6:	784b      	ldrb	r3, [r1, #1]
 8027fd8:	7053      	strb	r3, [r2, #1]
 8027fda:	788b      	ldrb	r3, [r1, #2]
 8027fdc:	7093      	strb	r3, [r2, #2]
 8027fde:	bd30      	pop	{r4, r5, pc}
 8027fe0:	fb10 f003 	smulbb	r0, r0, r3
 8027fe4:	b283      	uxth	r3, r0
 8027fe6:	1c58      	adds	r0, r3, #1
 8027fe8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027fec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027ff0:	b284      	uxth	r4, r0
 8027ff2:	43c0      	mvns	r0, r0
 8027ff4:	fb15 f504 	smulbb	r5, r5, r4
 8027ff8:	b2c3      	uxtb	r3, r0
 8027ffa:	7810      	ldrb	r0, [r2, #0]
 8027ffc:	fb00 5003 	mla	r0, r0, r3, r5
 8028000:	b280      	uxth	r0, r0
 8028002:	1c45      	adds	r5, r0, #1
 8028004:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028008:	7855      	ldrb	r5, [r2, #1]
 802800a:	fb15 f503 	smulbb	r5, r5, r3
 802800e:	1200      	asrs	r0, r0, #8
 8028010:	7010      	strb	r0, [r2, #0]
 8028012:	7848      	ldrb	r0, [r1, #1]
 8028014:	fb00 5004 	mla	r0, r0, r4, r5
 8028018:	b280      	uxth	r0, r0
 802801a:	1c45      	adds	r5, r0, #1
 802801c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028020:	1200      	asrs	r0, r0, #8
 8028022:	7050      	strb	r0, [r2, #1]
 8028024:	7888      	ldrb	r0, [r1, #2]
 8028026:	7891      	ldrb	r1, [r2, #2]
 8028028:	fb11 f303 	smulbb	r3, r1, r3
 802802c:	fb00 3304 	mla	r3, r0, r4, r3
 8028030:	b29b      	uxth	r3, r3
 8028032:	1c59      	adds	r1, r3, #1
 8028034:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028038:	121b      	asrs	r3, r3, #8
 802803a:	e7cf      	b.n	8027fdc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0802803c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028040:	461d      	mov	r5, r3
 8028042:	b08f      	sub	sp, #60	@ 0x3c
 8028044:	460c      	mov	r4, r1
 8028046:	4616      	mov	r6, r2
 8028048:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802804a:	4680      	mov	r8, r0
 802804c:	6869      	ldr	r1, [r5, #4]
 802804e:	aa0a      	add	r2, sp, #40	@ 0x28
 8028050:	6828      	ldr	r0, [r5, #0]
 8028052:	3604      	adds	r6, #4
 8028054:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8028058:	4f57      	ldr	r7, [pc, #348]	@ (80281b8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 802805a:	c203      	stmia	r2!, {r0, r1}
 802805c:	6818      	ldr	r0, [r3, #0]
 802805e:	aa0c      	add	r2, sp, #48	@ 0x30
 8028060:	6859      	ldr	r1, [r3, #4]
 8028062:	c203      	stmia	r2!, {r0, r1}
 8028064:	a80a      	add	r0, sp, #40	@ 0x28
 8028066:	f7f2 fddf 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802806a:	4629      	mov	r1, r5
 802806c:	a80c      	add	r0, sp, #48	@ 0x30
 802806e:	2502      	movs	r5, #2
 8028070:	f7f2 fe1e 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028074:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028078:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 802807c:	f002 0301 	and.w	r3, r2, #1
 8028080:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8028084:	9304      	str	r3, [sp, #16]
 8028086:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802808a:	f003 0101 	and.w	r1, r3, #1
 802808e:	9103      	str	r1, [sp, #12]
 8028090:	9803      	ldr	r0, [sp, #12]
 8028092:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8028096:	4403      	add	r3, r0
 8028098:	6838      	ldr	r0, [r7, #0]
 802809a:	fb01 2303 	mla	r3, r1, r3, r2
 802809e:	fb93 f3f5 	sdiv	r3, r3, r5
 80280a2:	18e5      	adds	r5, r4, r3
 80280a4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80280a8:	441a      	add	r2, r3
 80280aa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80280ae:	4419      	add	r1, r3
 80280b0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80280b4:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80280b8:	6803      	ldr	r3, [r0, #0]
 80280ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80280bc:	4798      	blx	r3
 80280be:	4a3f      	ldr	r2, [pc, #252]	@ (80281bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80280c0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80280c4:	8813      	ldrh	r3, [r2, #0]
 80280c6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80280ca:	9207      	str	r2, [sp, #28]
 80280cc:	fb03 1404 	mla	r4, r3, r4, r1
 80280d0:	fb0a f303 	mul.w	r3, sl, r3
 80280d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80280d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80280dc:	4404      	add	r4, r0
 80280de:	18e3      	adds	r3, r4, r3
 80280e0:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80280e4:	9b05      	ldr	r3, [sp, #20]
 80280e6:	429c      	cmp	r4, r3
 80280e8:	d25d      	bcs.n	80281a6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 80280ea:	9b04      	ldr	r3, [sp, #16]
 80280ec:	2b00      	cmp	r3, #0
 80280ee:	d037      	beq.n	8028160 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80280f0:	782b      	ldrb	r3, [r5, #0]
 80280f2:	1c6f      	adds	r7, r5, #1
 80280f4:	f003 030f 	and.w	r3, r3, #15
 80280f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80280fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80280fe:	0e1b      	lsrs	r3, r3, #24
 8028100:	d006      	beq.n	8028110 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8028102:	9300      	str	r3, [sp, #0]
 8028104:	4622      	mov	r2, r4
 8028106:	464b      	mov	r3, r9
 8028108:	a909      	add	r1, sp, #36	@ 0x24
 802810a:	4640      	mov	r0, r8
 802810c:	f7ff ff5a 	bl	8027fc4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028110:	3403      	adds	r4, #3
 8028112:	f10b 3aff 	add.w	sl, fp, #4294967295
 8028116:	f1ba 0f01 	cmp.w	sl, #1
 802811a:	dd24      	ble.n	8028166 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 802811c:	783b      	ldrb	r3, [r7, #0]
 802811e:	091b      	lsrs	r3, r3, #4
 8028120:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028124:	9308      	str	r3, [sp, #32]
 8028126:	0e1b      	lsrs	r3, r3, #24
 8028128:	d006      	beq.n	8028138 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 802812a:	9300      	str	r3, [sp, #0]
 802812c:	4622      	mov	r2, r4
 802812e:	464b      	mov	r3, r9
 8028130:	a908      	add	r1, sp, #32
 8028132:	4640      	mov	r0, r8
 8028134:	f7ff ff46 	bl	8027fc4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028138:	f817 3b01 	ldrb.w	r3, [r7], #1
 802813c:	f003 030f 	and.w	r3, r3, #15
 8028140:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028144:	9309      	str	r3, [sp, #36]	@ 0x24
 8028146:	0e1b      	lsrs	r3, r3, #24
 8028148:	d006      	beq.n	8028158 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802814a:	9300      	str	r3, [sp, #0]
 802814c:	1ce2      	adds	r2, r4, #3
 802814e:	464b      	mov	r3, r9
 8028150:	a909      	add	r1, sp, #36	@ 0x24
 8028152:	4640      	mov	r0, r8
 8028154:	f7ff ff36 	bl	8027fc4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028158:	3406      	adds	r4, #6
 802815a:	f1aa 0a02 	sub.w	sl, sl, #2
 802815e:	e7da      	b.n	8028116 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028160:	462f      	mov	r7, r5
 8028162:	46da      	mov	sl, fp
 8028164:	e7d7      	b.n	8028116 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028166:	d10e      	bne.n	8028186 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8028168:	783b      	ldrb	r3, [r7, #0]
 802816a:	091b      	lsrs	r3, r3, #4
 802816c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028170:	9309      	str	r3, [sp, #36]	@ 0x24
 8028172:	0e1b      	lsrs	r3, r3, #24
 8028174:	d006      	beq.n	8028184 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8028176:	9300      	str	r3, [sp, #0]
 8028178:	4622      	mov	r2, r4
 802817a:	464b      	mov	r3, r9
 802817c:	a909      	add	r1, sp, #36	@ 0x24
 802817e:	4640      	mov	r0, r8
 8028180:	f7ff ff20 	bl	8027fc4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028184:	3403      	adds	r4, #3
 8028186:	9b07      	ldr	r3, [sp, #28]
 8028188:	9a03      	ldr	r2, [sp, #12]
 802818a:	881b      	ldrh	r3, [r3, #0]
 802818c:	eba3 030b 	sub.w	r3, r3, fp
 8028190:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028194:	441c      	add	r4, r3
 8028196:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802819a:	4413      	add	r3, r2
 802819c:	2202      	movs	r2, #2
 802819e:	fb93 f3f2 	sdiv	r3, r3, r2
 80281a2:	441d      	add	r5, r3
 80281a4:	e79e      	b.n	80280e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 80281a6:	9b06      	ldr	r3, [sp, #24]
 80281a8:	6818      	ldr	r0, [r3, #0]
 80281aa:	6803      	ldr	r3, [r0, #0]
 80281ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80281ae:	4798      	blx	r3
 80281b0:	b00f      	add	sp, #60	@ 0x3c
 80281b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281b6:	bf00      	nop
 80281b8:	240621b8 	.word	0x240621b8
 80281bc:	240621b2 	.word	0x240621b2

080281c0 <CRC_Lock>:
 80281c0:	4a2d      	ldr	r2, [pc, #180]	@ (8028278 <CRC_Lock+0xb8>)
 80281c2:	b530      	push	{r4, r5, lr}
 80281c4:	6813      	ldr	r3, [r2, #0]
 80281c6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80281ca:	f023 0301 	bic.w	r3, r3, #1
 80281ce:	6013      	str	r3, [r2, #0]
 80281d0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80281d4:	4b29      	ldr	r3, [pc, #164]	@ (802827c <CRC_Lock+0xbc>)
 80281d6:	681c      	ldr	r4, [r3, #0]
 80281d8:	4014      	ands	r4, r2
 80281da:	42ac      	cmp	r4, r5
 80281dc:	d005      	beq.n	80281ea <CRC_Lock+0x2a>
 80281de:	681c      	ldr	r4, [r3, #0]
 80281e0:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80281e4:	4014      	ands	r4, r2
 80281e6:	42ac      	cmp	r4, r5
 80281e8:	d125      	bne.n	8028236 <CRC_Lock+0x76>
 80281ea:	4b25      	ldr	r3, [pc, #148]	@ (8028280 <CRC_Lock+0xc0>)
 80281ec:	681b      	ldr	r3, [r3, #0]
 80281ee:	2b00      	cmp	r3, #0
 80281f0:	d139      	bne.n	8028266 <CRC_Lock+0xa6>
 80281f2:	4b24      	ldr	r3, [pc, #144]	@ (8028284 <CRC_Lock+0xc4>)
 80281f4:	681a      	ldr	r2, [r3, #0]
 80281f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80281fa:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80281fe:	d00d      	beq.n	802821c <CRC_Lock+0x5c>
 8028200:	681a      	ldr	r2, [r3, #0]
 8028202:	f240 4483 	movw	r4, #1155	@ 0x483
 8028206:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802820a:	42a2      	cmp	r2, r4
 802820c:	d006      	beq.n	802821c <CRC_Lock+0x5c>
 802820e:	681b      	ldr	r3, [r3, #0]
 8028210:	f240 4285 	movw	r2, #1157	@ 0x485
 8028214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028218:	4293      	cmp	r3, r2
 802821a:	d124      	bne.n	8028266 <CRC_Lock+0xa6>
 802821c:	4b1a      	ldr	r3, [pc, #104]	@ (8028288 <CRC_Lock+0xc8>)
 802821e:	2201      	movs	r2, #1
 8028220:	601a      	str	r2, [r3, #0]
 8028222:	681a      	ldr	r2, [r3, #0]
 8028224:	2a00      	cmp	r2, #0
 8028226:	d1fc      	bne.n	8028222 <CRC_Lock+0x62>
 8028228:	4b18      	ldr	r3, [pc, #96]	@ (802828c <CRC_Lock+0xcc>)
 802822a:	6018      	str	r0, [r3, #0]
 802822c:	6818      	ldr	r0, [r3, #0]
 802822e:	1a43      	subs	r3, r0, r1
 8028230:	4258      	negs	r0, r3
 8028232:	4158      	adcs	r0, r3
 8028234:	e00e      	b.n	8028254 <CRC_Lock+0x94>
 8028236:	681b      	ldr	r3, [r3, #0]
 8028238:	4013      	ands	r3, r2
 802823a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802823e:	4293      	cmp	r3, r2
 8028240:	d111      	bne.n	8028266 <CRC_Lock+0xa6>
 8028242:	4b13      	ldr	r3, [pc, #76]	@ (8028290 <CRC_Lock+0xd0>)
 8028244:	f240 4286 	movw	r2, #1158	@ 0x486
 8028248:	681b      	ldr	r3, [r3, #0]
 802824a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802824e:	4293      	cmp	r3, r2
 8028250:	d001      	beq.n	8028256 <CRC_Lock+0x96>
 8028252:	2000      	movs	r0, #0
 8028254:	bd30      	pop	{r4, r5, pc}
 8028256:	4b0f      	ldr	r3, [pc, #60]	@ (8028294 <CRC_Lock+0xd4>)
 8028258:	2201      	movs	r2, #1
 802825a:	601a      	str	r2, [r3, #0]
 802825c:	681a      	ldr	r2, [r3, #0]
 802825e:	2a00      	cmp	r2, #0
 8028260:	d1fc      	bne.n	802825c <CRC_Lock+0x9c>
 8028262:	4b0d      	ldr	r3, [pc, #52]	@ (8028298 <CRC_Lock+0xd8>)
 8028264:	e7e1      	b.n	802822a <CRC_Lock+0x6a>
 8028266:	4b0d      	ldr	r3, [pc, #52]	@ (802829c <CRC_Lock+0xdc>)
 8028268:	2201      	movs	r2, #1
 802826a:	601a      	str	r2, [r3, #0]
 802826c:	681a      	ldr	r2, [r3, #0]
 802826e:	2a00      	cmp	r2, #0
 8028270:	d1fc      	bne.n	802826c <CRC_Lock+0xac>
 8028272:	4b0b      	ldr	r3, [pc, #44]	@ (80282a0 <CRC_Lock+0xe0>)
 8028274:	e7d9      	b.n	802822a <CRC_Lock+0x6a>
 8028276:	bf00      	nop
 8028278:	e0002000 	.word	0xe0002000
 802827c:	e000ed00 	.word	0xe000ed00
 8028280:	e0042000 	.word	0xe0042000
 8028284:	5c001000 	.word	0x5c001000
 8028288:	58024c08 	.word	0x58024c08
 802828c:	58024c00 	.word	0x58024c00
 8028290:	46008ff0 	.word	0x46008ff0
 8028294:	46024c08 	.word	0x46024c08
 8028298:	46024c00 	.word	0x46024c00
 802829c:	40023008 	.word	0x40023008
 80282a0:	40023000 	.word	0x40023000

080282a4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80282a4:	6101      	str	r1, [r0, #16]
 80282a6:	4770      	bx	lr

080282a8 <_ZN8touchgfx8Gestures4tickEv>:
 80282a8:	7b83      	ldrb	r3, [r0, #14]
 80282aa:	b14b      	cbz	r3, 80282c0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80282ac:	8903      	ldrh	r3, [r0, #8]
 80282ae:	3301      	adds	r3, #1
 80282b0:	b29b      	uxth	r3, r3
 80282b2:	2b07      	cmp	r3, #7
 80282b4:	8103      	strh	r3, [r0, #8]
 80282b6:	bf81      	itttt	hi
 80282b8:	2300      	movhi	r3, #0
 80282ba:	8143      	strhhi	r3, [r0, #10]
 80282bc:	8183      	strhhi	r3, [r0, #12]
 80282be:	7383      	strbhi	r3, [r0, #14]
 80282c0:	4770      	bx	lr
	...

080282c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80282c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80282c8:	4698      	mov	r8, r3
 80282ca:	8883      	ldrh	r3, [r0, #4]
 80282cc:	4604      	mov	r4, r0
 80282ce:	4617      	mov	r7, r2
 80282d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80282d4:	eba8 0303 	sub.w	r3, r8, r3
 80282d8:	4a19      	ldr	r2, [pc, #100]	@ (8028340 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80282da:	460e      	mov	r6, r1
 80282dc:	b21b      	sxth	r3, r3
 80282de:	88c1      	ldrh	r1, [r0, #6]
 80282e0:	9200      	str	r2, [sp, #0]
 80282e2:	2000      	movs	r0, #0
 80282e4:	2b00      	cmp	r3, #0
 80282e6:	8aa2      	ldrh	r2, [r4, #20]
 80282e8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80282ec:	bfb8      	it	lt
 80282ee:	425b      	neglt	r3, r3
 80282f0:	f88d 0004 	strb.w	r0, [sp, #4]
 80282f4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80282f8:	b21b      	sxth	r3, r3
 80282fa:	f8ad 800a 	strh.w	r8, [sp, #10]
 80282fe:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028302:	4293      	cmp	r3, r2
 8028304:	dc07      	bgt.n	8028316 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028306:	1a69      	subs	r1, r5, r1
 8028308:	b209      	sxth	r1, r1
 802830a:	2900      	cmp	r1, #0
 802830c:	bfb8      	it	lt
 802830e:	4249      	neglt	r1, r1
 8028310:	b209      	sxth	r1, r1
 8028312:	428a      	cmp	r2, r1
 8028314:	da10      	bge.n	8028338 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028316:	6920      	ldr	r0, [r4, #16]
 8028318:	4669      	mov	r1, sp
 802831a:	eba8 0606 	sub.w	r6, r8, r6
 802831e:	1bef      	subs	r7, r5, r7
 8028320:	6803      	ldr	r3, [r0, #0]
 8028322:	685b      	ldr	r3, [r3, #4]
 8028324:	4798      	blx	r3
 8028326:	2300      	movs	r3, #0
 8028328:	2001      	movs	r0, #1
 802832a:	8166      	strh	r6, [r4, #10]
 802832c:	8123      	strh	r3, [r4, #8]
 802832e:	81a7      	strh	r7, [r4, #12]
 8028330:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028334:	80e5      	strh	r5, [r4, #6]
 8028336:	73a0      	strb	r0, [r4, #14]
 8028338:	b004      	add	sp, #16
 802833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802833e:	bf00      	nop
 8028340:	0802e514 	.word	0x0802e514

08028344 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028346:	461e      	mov	r6, r3
 8028348:	1e4b      	subs	r3, r1, #1
 802834a:	b085      	sub	sp, #20
 802834c:	4604      	mov	r4, r0
 802834e:	2b01      	cmp	r3, #1
 8028350:	460d      	mov	r5, r1
 8028352:	4617      	mov	r7, r2
 8028354:	d84b      	bhi.n	80283ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028356:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802835a:	1cd3      	adds	r3, r2, #3
 802835c:	b29b      	uxth	r3, r3
 802835e:	2b06      	cmp	r3, #6
 8028360:	d916      	bls.n	8028390 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028362:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8028404 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028366:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802836a:	f8cd c004 	str.w	ip, [sp, #4]
 802836e:	f04f 0c00 	mov.w	ip, #0
 8028372:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028376:	6900      	ldr	r0, [r0, #16]
 8028378:	f8ad 100c 	strh.w	r1, [sp, #12]
 802837c:	a901      	add	r1, sp, #4
 802837e:	f88d c008 	strb.w	ip, [sp, #8]
 8028382:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028386:	f8ad 300e 	strh.w	r3, [sp, #14]
 802838a:	6803      	ldr	r3, [r0, #0]
 802838c:	689b      	ldr	r3, [r3, #8]
 802838e:	4798      	blx	r3
 8028390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028394:	1cd3      	adds	r3, r2, #3
 8028396:	b29b      	uxth	r3, r3
 8028398:	2b06      	cmp	r3, #6
 802839a:	d916      	bls.n	80283ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802839c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8028404 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80283a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80283a4:	f8cd c004 	str.w	ip, [sp, #4]
 80283a8:	f04f 0c01 	mov.w	ip, #1
 80283ac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80283b0:	6920      	ldr	r0, [r4, #16]
 80283b2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80283b6:	a901      	add	r1, sp, #4
 80283b8:	f88d c008 	strb.w	ip, [sp, #8]
 80283bc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80283c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80283c4:	6803      	ldr	r3, [r0, #0]
 80283c6:	689b      	ldr	r3, [r3, #8]
 80283c8:	4798      	blx	r3
 80283ca:	4b0d      	ldr	r3, [pc, #52]	@ (8028400 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80283cc:	a901      	add	r1, sp, #4
 80283ce:	6920      	ldr	r0, [r4, #16]
 80283d0:	9301      	str	r3, [sp, #4]
 80283d2:	2300      	movs	r3, #0
 80283d4:	f88d 5008 	strb.w	r5, [sp, #8]
 80283d8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80283dc:	f8ad 600c 	strh.w	r6, [sp, #12]
 80283e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80283e4:	6803      	ldr	r3, [r0, #0]
 80283e6:	681b      	ldr	r3, [r3, #0]
 80283e8:	4798      	blx	r3
 80283ea:	b005      	add	sp, #20
 80283ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80283ee:	2900      	cmp	r1, #0
 80283f0:	d1eb      	bne.n	80283ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80283f2:	80a2      	strh	r2, [r4, #4]
 80283f4:	80c6      	strh	r6, [r0, #6]
 80283f6:	60a1      	str	r1, [r4, #8]
 80283f8:	81a1      	strh	r1, [r4, #12]
 80283fa:	73a1      	strb	r1, [r4, #14]
 80283fc:	e7e5      	b.n	80283ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80283fe:	bf00      	nop
 8028400:	0802e500 	.word	0x0802e500
 8028404:	0802e528 	.word	0x0802e528

08028408 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8028408:	10c9      	asrs	r1, r1, #3
 802840a:	2900      	cmp	r1, #0
 802840c:	bfb8      	it	lt
 802840e:	4249      	neglt	r1, r1
 8028410:	2801      	cmp	r0, #1
 8028412:	d108      	bne.n	8028426 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8028414:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028418:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802841c:	4601      	mov	r1, r0
 802841e:	dd02      	ble.n	8028426 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8028420:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8028424:	4770      	bx	lr
 8028426:	29ff      	cmp	r1, #255	@ 0xff
 8028428:	bfa8      	it	ge
 802842a:	21ff      	movge	r1, #255	@ 0xff
 802842c:	4608      	mov	r0, r1
 802842e:	4770      	bx	lr

08028430 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8028430:	b410      	push	{r4}
 8028432:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8028436:	429c      	cmp	r4, r3
 8028438:	d803      	bhi.n	8028442 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802843a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802843e:	f7f0 bee9 	b.w	8019214 <_ZN8touchgfx7Outline6lineToEii>
 8028442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028446:	4770      	bx	lr

08028448 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8028448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802844c:	b08b      	sub	sp, #44	@ 0x2c
 802844e:	4606      	mov	r6, r0
 8028450:	468a      	mov	sl, r1
 8028452:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028456:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802845a:	9308      	str	r3, [sp, #32]
 802845c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8028460:	9309      	str	r3, [sp, #36]	@ 0x24
 8028462:	f7f1 f842 	bl	80194ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8028466:	68b5      	ldr	r5, [r6, #8]
 8028468:	4604      	mov	r4, r0
 802846a:	2d00      	cmp	r5, #0
 802846c:	d044      	beq.n	80284f8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802846e:	6873      	ldr	r3, [r6, #4]
 8028470:	42ab      	cmp	r3, r5
 8028472:	d33d      	bcc.n	80284f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8028474:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8028478:	f04f 0800 	mov.w	r8, #0
 802847c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8028480:	eb02 0b03 	add.w	fp, r2, r3
 8028484:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8028488:	fb02 1203 	mla	r2, r2, r3, r1
 802848c:	9205      	str	r2, [sp, #20]
 802848e:	1e6a      	subs	r2, r5, #1
 8028490:	9204      	str	r2, [sp, #16]
 8028492:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8028496:	f9b4 7000 	ldrsh.w	r7, [r4]
 802849a:	454b      	cmp	r3, r9
 802849c:	463a      	mov	r2, r7
 802849e:	d008      	beq.n	80284b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80284a0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80284a4:	eb03 0b09 	add.w	fp, r3, r9
 80284a8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80284ac:	fb03 1309 	mla	r3, r3, r9, r1
 80284b0:	9305      	str	r3, [sp, #20]
 80284b2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80284b6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80284ba:	4498      	add	r8, r3
 80284bc:	9b04      	ldr	r3, [sp, #16]
 80284be:	3b01      	subs	r3, #1
 80284c0:	9304      	str	r3, [sp, #16]
 80284c2:	9b04      	ldr	r3, [sp, #16]
 80284c4:	3301      	adds	r3, #1
 80284c6:	d015      	beq.n	80284f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80284c8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80284cc:	42bb      	cmp	r3, r7
 80284ce:	d117      	bne.n	8028500 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80284d0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80284d4:	9b04      	ldr	r3, [sp, #16]
 80284d6:	4548      	cmp	r0, r9
 80284d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80284dc:	d17d      	bne.n	80285da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80284de:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80284e2:	4401      	add	r1, r0
 80284e4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80284e8:	4480      	add	r8, r0
 80284ea:	e7e9      	b.n	80284c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80284ec:	461f      	mov	r7, r3
 80284ee:	e042      	b.n	8028576 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80284f0:	2000      	movs	r0, #0
 80284f2:	e002      	b.n	80284fa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80284f4:	2900      	cmp	r1, #0
 80284f6:	d16d      	bne.n	80285d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80284f8:	2001      	movs	r0, #1
 80284fa:	b00b      	add	sp, #44	@ 0x2c
 80284fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028500:	b379      	cbz	r1, 8028562 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8028502:	2f00      	cmp	r7, #0
 8028504:	db29      	blt.n	802855a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028506:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802850a:	42bb      	cmp	r3, r7
 802850c:	dd25      	ble.n	802855a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802850e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8028512:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8028516:	f7ff ff77 	bl	8028408 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802851a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802851c:	fb10 f003 	smulbb	r0, r0, r3
 8028520:	b280      	uxth	r0, r0
 8028522:	1c41      	adds	r1, r0, #1
 8028524:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028528:	1209      	asrs	r1, r1, #8
 802852a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802852e:	d014      	beq.n	802855a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028530:	b2c9      	uxtb	r1, r1
 8028532:	9808      	ldr	r0, [sp, #32]
 8028534:	b2ba      	uxth	r2, r7
 8028536:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8028538:	9102      	str	r1, [sp, #8]
 802853a:	2101      	movs	r1, #1
 802853c:	4413      	add	r3, r2
 802853e:	4402      	add	r2, r0
 8028540:	9101      	str	r1, [sp, #4]
 8028542:	fa0f f18b 	sxth.w	r1, fp
 8028546:	f8da 0000 	ldr.w	r0, [sl]
 802854a:	b21b      	sxth	r3, r3
 802854c:	9100      	str	r1, [sp, #0]
 802854e:	b212      	sxth	r2, r2
 8028550:	6941      	ldr	r1, [r0, #20]
 8028552:	4650      	mov	r0, sl
 8028554:	460d      	mov	r5, r1
 8028556:	9905      	ldr	r1, [sp, #20]
 8028558:	47a8      	blx	r5
 802855a:	9b04      	ldr	r3, [sp, #16]
 802855c:	1c7a      	adds	r2, r7, #1
 802855e:	3301      	adds	r3, #1
 8028560:	d0ca      	beq.n	80284f8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028562:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028566:	1abb      	subs	r3, r7, r2
 8028568:	2b00      	cmp	r3, #0
 802856a:	dd31      	ble.n	80285d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802856c:	2a00      	cmp	r2, #0
 802856e:	dabd      	bge.n	80284ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8028570:	2f00      	cmp	r7, #0
 8028572:	dd2d      	ble.n	80285d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028574:	2200      	movs	r2, #0
 8028576:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802857a:	19d1      	adds	r1, r2, r7
 802857c:	4299      	cmp	r1, r3
 802857e:	db02      	blt.n	8028586 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8028580:	1a9f      	subs	r7, r3, r2
 8028582:	2f00      	cmp	r7, #0
 8028584:	dd24      	ble.n	80285d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028586:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802858a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802858e:	f7ff ff3b 	bl	8028408 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8028592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028594:	fb10 f003 	smulbb	r0, r0, r3
 8028598:	b280      	uxth	r0, r0
 802859a:	1c41      	adds	r1, r0, #1
 802859c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80285a0:	1209      	asrs	r1, r1, #8
 80285a2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80285a6:	d013      	beq.n	80285d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80285a8:	b292      	uxth	r2, r2
 80285aa:	9808      	ldr	r0, [sp, #32]
 80285ac:	b2c9      	uxtb	r1, r1
 80285ae:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80285b0:	b23f      	sxth	r7, r7
 80285b2:	4413      	add	r3, r2
 80285b4:	9102      	str	r1, [sp, #8]
 80285b6:	4402      	add	r2, r0
 80285b8:	fa0f f18b 	sxth.w	r1, fp
 80285bc:	f8da 0000 	ldr.w	r0, [sl]
 80285c0:	b21b      	sxth	r3, r3
 80285c2:	9100      	str	r1, [sp, #0]
 80285c4:	b212      	sxth	r2, r2
 80285c6:	9701      	str	r7, [sp, #4]
 80285c8:	9905      	ldr	r1, [sp, #20]
 80285ca:	6947      	ldr	r7, [r0, #20]
 80285cc:	4650      	mov	r0, sl
 80285ce:	47b8      	blx	r7
 80285d0:	464b      	mov	r3, r9
 80285d2:	e75e      	b.n	8028492 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80285d4:	2f00      	cmp	r7, #0
 80285d6:	da96      	bge.n	8028506 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80285d8:	e78e      	b.n	80284f8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80285da:	2900      	cmp	r1, #0
 80285dc:	d0f8      	beq.n	80285d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80285de:	e790      	b.n	8028502 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080285e0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 80285e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80285e4:	461e      	mov	r6, r3
 80285e6:	4b36      	ldr	r3, [pc, #216]	@ (80286c0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 80285e8:	2500      	movs	r5, #0
 80285ea:	f100 0814 	add.w	r8, r0, #20
 80285ee:	4604      	mov	r4, r0
 80285f0:	4617      	mov	r7, r2
 80285f2:	e9c0 3100 	strd	r3, r1, [r0]
 80285f6:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80285fa:	8185      	strh	r5, [r0, #12]
 80285fc:	8103      	strh	r3, [r0, #8]
 80285fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8028602:	81c5      	strh	r5, [r0, #14]
 8028604:	7283      	strb	r3, [r0, #10]
 8028606:	8205      	strh	r5, [r0, #16]
 8028608:	8245      	strh	r5, [r0, #18]
 802860a:	4640      	mov	r0, r8
 802860c:	f7f0 f948 	bl	80188a0 <_ZN8touchgfx7OutlineC1Ev>
 8028610:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8028614:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8028618:	466b      	mov	r3, sp
 802861a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802861e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8028622:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8028626:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802862a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802862e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8028632:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8028636:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802863a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802863e:	6830      	ldr	r0, [r6, #0]
 8028640:	6871      	ldr	r1, [r6, #4]
 8028642:	8872      	ldrh	r2, [r6, #2]
 8028644:	8835      	ldrh	r5, [r6, #0]
 8028646:	c303      	stmia	r3!, {r0, r1}
 8028648:	887b      	ldrh	r3, [r7, #2]
 802864a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802864e:	4413      	add	r3, r2
 8028650:	883a      	ldrh	r2, [r7, #0]
 8028652:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8028656:	442a      	add	r2, r5
 8028658:	81e3      	strh	r3, [r4, #14]
 802865a:	8220      	strh	r0, [r4, #16]
 802865c:	4668      	mov	r0, sp
 802865e:	81a2      	strh	r2, [r4, #12]
 8028660:	8261      	strh	r1, [r4, #18]
 8028662:	4639      	mov	r1, r7
 8028664:	f7f2 fb24 	bl	801acb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028668:	f104 000c 	add.w	r0, r4, #12
 802866c:	f7f2 fadc 	bl	801ac28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028670:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028674:	f8bd 2000 	ldrh.w	r2, [sp]
 8028678:	4640      	mov	r0, r8
 802867a:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802867e:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8028682:	f7f0 f8f1 	bl	8018868 <_ZN8touchgfx7Outline5resetEv>
 8028686:	f9bd 3000 	ldrsh.w	r3, [sp]
 802868a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802868e:	4620      	mov	r0, r4
 8028690:	015b      	lsls	r3, r3, #5
 8028692:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8028694:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028698:	015b      	lsls	r3, r3, #5
 802869a:	6523      	str	r3, [r4, #80]	@ 0x50
 802869c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80286a0:	015b      	lsls	r3, r3, #5
 80286a2:	6563      	str	r3, [r4, #84]	@ 0x54
 80286a4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80286a8:	015b      	lsls	r3, r3, #5
 80286aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80286ac:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80286b0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80286b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80286b8:	b002      	add	sp, #8
 80286ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80286be:	bf00      	nop
 80286c0:	0802e7b8 	.word	0x0802e7b8

080286c4 <_ZN8touchgfx6Canvas5closeEv>:
 80286c4:	b538      	push	{r3, r4, r5, lr}
 80286c6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80286ca:	4604      	mov	r4, r0
 80286cc:	b193      	cbz	r3, 80286f4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80286ce:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80286d2:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 80286d6:	4213      	tst	r3, r2
 80286d8:	d10c      	bne.n	80286f4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80286da:	f100 0514 	add.w	r5, r0, #20
 80286de:	b123      	cbz	r3, 80286ea <_ZN8touchgfx6Canvas5closeEv+0x26>
 80286e0:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 80286e4:	4628      	mov	r0, r5
 80286e6:	f7ff fea3 	bl	8028430 <_ZN8touchgfx10Rasterizer6lineToEii>
 80286ea:	4628      	mov	r0, r5
 80286ec:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 80286f0:	f7ff fe9e 	bl	8028430 <_ZN8touchgfx10Rasterizer6lineToEii>
 80286f4:	2300      	movs	r3, #0
 80286f6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80286fa:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 80286fe:	4298      	cmp	r0, r3
 8028700:	bf34      	ite	cc
 8028702:	2000      	movcc	r0, #0
 8028704:	2001      	movcs	r0, #1
 8028706:	bd38      	pop	{r3, r4, r5, pc}

08028708 <_ZN8touchgfx6Canvas6renderEh>:
 8028708:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802870c:	7a85      	ldrb	r5, [r0, #10]
 802870e:	4604      	mov	r4, r0
 8028710:	4369      	muls	r1, r5
 8028712:	1c4d      	adds	r5, r1, #1
 8028714:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028718:	122d      	asrs	r5, r5, #8
 802871a:	f000 8098 	beq.w	802884e <_ZN8touchgfx6Canvas6renderEh+0x146>
 802871e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8028722:	2b00      	cmp	r3, #0
 8028724:	f000 8093 	beq.w	802884e <_ZN8touchgfx6Canvas6renderEh+0x146>
 8028728:	f7ff ffcc 	bl	80286c4 <_ZN8touchgfx6Canvas5closeEv>
 802872c:	4607      	mov	r7, r0
 802872e:	2800      	cmp	r0, #0
 8028730:	d045      	beq.n	80287be <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8028732:	6860      	ldr	r0, [r4, #4]
 8028734:	4e47      	ldr	r6, [pc, #284]	@ (8028854 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8028736:	6803      	ldr	r3, [r0, #0]
 8028738:	6837      	ldr	r7, [r6, #0]
 802873a:	689b      	ldr	r3, [r3, #8]
 802873c:	4798      	blx	r3
 802873e:	4601      	mov	r1, r0
 8028740:	4638      	mov	r0, r7
 8028742:	f7ec fddb 	bl	80152fc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8028746:	4607      	mov	r7, r0
 8028748:	f7ec f99c 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 802874c:	6803      	ldr	r3, [r0, #0]
 802874e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028750:	4798      	blx	r3
 8028752:	4680      	mov	r8, r0
 8028754:	f7ec f996 	bl	8014a84 <_ZN8touchgfx3HAL3lcdEv>
 8028758:	6803      	ldr	r3, [r0, #0]
 802875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802875c:	4798      	blx	r3
 802875e:	280b      	cmp	r0, #11
 8028760:	d85a      	bhi.n	8028818 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8028762:	e8df f000 	tbb	[pc, r0]
 8028766:	5b50      	.short	0x5b50
 8028768:	3059066b 	.word	0x3059066b
 802876c:	64646440 	.word	0x64646440
 8028770:	6464      	.short	0x6464
 8028772:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8028776:	2208      	movs	r2, #8
 8028778:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802877c:	fb91 f2f2 	sdiv	r2, r1, r2
 8028780:	fb08 2303 	mla	r3, r8, r3, r2
 8028784:	441f      	add	r7, r3
 8028786:	424b      	negs	r3, r1
 8028788:	f001 0107 	and.w	r1, r1, #7
 802878c:	f003 0307 	and.w	r3, r3, #7
 8028790:	bf58      	it	pl
 8028792:	4259      	negpl	r1, r3
 8028794:	b2c9      	uxtb	r1, r1
 8028796:	b2ed      	uxtb	r5, r5
 8028798:	463a      	mov	r2, r7
 802879a:	fa0f f388 	sxth.w	r3, r8
 802879e:	f104 0014 	add.w	r0, r4, #20
 80287a2:	e9cd 1500 	strd	r1, r5, [sp]
 80287a6:	6861      	ldr	r1, [r4, #4]
 80287a8:	f7ff fe4e 	bl	8028448 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80287ac:	4607      	mov	r7, r0
 80287ae:	6860      	ldr	r0, [r4, #4]
 80287b0:	6803      	ldr	r3, [r0, #0]
 80287b2:	691b      	ldr	r3, [r3, #16]
 80287b4:	4798      	blx	r3
 80287b6:	6830      	ldr	r0, [r6, #0]
 80287b8:	6803      	ldr	r3, [r0, #0]
 80287ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80287bc:	4798      	blx	r3
 80287be:	4638      	mov	r0, r7
 80287c0:	b002      	add	sp, #8
 80287c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80287c6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80287ca:	2204      	movs	r2, #4
 80287cc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80287d0:	fb91 f2f2 	sdiv	r2, r1, r2
 80287d4:	fb08 2303 	mla	r3, r8, r3, r2
 80287d8:	441f      	add	r7, r3
 80287da:	424b      	negs	r3, r1
 80287dc:	f001 0103 	and.w	r1, r1, #3
 80287e0:	f003 0303 	and.w	r3, r3, #3
 80287e4:	e7d4      	b.n	8028790 <_ZN8touchgfx6Canvas6renderEh+0x88>
 80287e6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80287ea:	2202      	movs	r2, #2
 80287ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80287f0:	2900      	cmp	r1, #0
 80287f2:	fb91 f2f2 	sdiv	r2, r1, r2
 80287f6:	f001 0101 	and.w	r1, r1, #1
 80287fa:	fb08 2303 	mla	r3, r8, r3, r2
 80287fe:	bfb8      	it	lt
 8028800:	4249      	neglt	r1, r1
 8028802:	441f      	add	r7, r3
 8028804:	e7c6      	b.n	8028794 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8028806:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802880a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802880e:	fb08 f303 	mul.w	r3, r8, r3
 8028812:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8028816:	441f      	add	r7, r3
 8028818:	2100      	movs	r1, #0
 802881a:	e7bc      	b.n	8028796 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802881c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028820:	2103      	movs	r1, #3
 8028822:	fb08 f203 	mul.w	r2, r8, r3
 8028826:	89a3      	ldrh	r3, [r4, #12]
 8028828:	fb13 2301 	smlabb	r3, r3, r1, r2
 802882c:	e7f3      	b.n	8028816 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802882e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028836:	fb08 2303 	mla	r3, r8, r3, r2
 802883a:	e7ec      	b.n	8028816 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802883c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028844:	fb08 f303 	mul.w	r3, r8, r3
 8028848:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802884c:	e7e3      	b.n	8028816 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802884e:	2701      	movs	r7, #1
 8028850:	e7b5      	b.n	80287be <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8028852:	bf00      	nop
 8028854:	240621b8 	.word	0x240621b8

08028858 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8028858:	4b06      	ldr	r3, [pc, #24]	@ (8028874 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802885a:	b510      	push	{r4, lr}
 802885c:	781b      	ldrb	r3, [r3, #0]
 802885e:	2b01      	cmp	r3, #1
 8028860:	d107      	bne.n	8028872 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8028862:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8028866:	680b      	ldr	r3, [r1, #0]
 8028868:	6814      	ldr	r4, [r2, #0]
 802886a:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802886e:	6013      	str	r3, [r2, #0]
 8028870:	600c      	str	r4, [r1, #0]
 8028872:	bd10      	pop	{r4, pc}
 8028874:	240621b0 	.word	0x240621b0

08028878 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8028878:	b513      	push	{r0, r1, r4, lr}
 802887a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802887e:	4604      	mov	r4, r0
 8028880:	e9cd 2100 	strd	r2, r1, [sp]
 8028884:	b9a3      	cbnz	r3, 80288b0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8028886:	466a      	mov	r2, sp
 8028888:	a901      	add	r1, sp, #4
 802888a:	4620      	mov	r0, r4
 802888c:	f7ff ffe4 	bl	8028858 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028890:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8028892:	9901      	ldr	r1, [sp, #4]
 8028894:	9a00      	ldr	r2, [sp, #0]
 8028896:	1ac9      	subs	r1, r1, r3
 8028898:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802889a:	1ad2      	subs	r2, r2, r3
 802889c:	9101      	str	r1, [sp, #4]
 802889e:	2a00      	cmp	r2, #0
 80288a0:	9200      	str	r2, [sp, #0]
 80288a2:	da0b      	bge.n	80288bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80288a4:	2301      	movs	r3, #1
 80288a6:	2900      	cmp	r1, #0
 80288a8:	da0e      	bge.n	80288c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80288aa:	f043 0304 	orr.w	r3, r3, #4
 80288ae:	e013      	b.n	80288d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80288b0:	f7ff ff08 	bl	80286c4 <_ZN8touchgfx6Canvas5closeEv>
 80288b4:	2800      	cmp	r0, #0
 80288b6:	d1e6      	bne.n	8028886 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80288b8:	b002      	add	sp, #8
 80288ba:	bd10      	pop	{r4, pc}
 80288bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80288be:	429a      	cmp	r2, r3
 80288c0:	bfac      	ite	ge
 80288c2:	2302      	movge	r3, #2
 80288c4:	2300      	movlt	r3, #0
 80288c6:	e7ee      	b.n	80288a6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80288c8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80288ca:	4281      	cmp	r1, r0
 80288cc:	bfac      	ite	ge
 80288ce:	2008      	movge	r0, #8
 80288d0:	2000      	movlt	r0, #0
 80288d2:	4318      	orrs	r0, r3
 80288d4:	b2c3      	uxtb	r3, r0
 80288d6:	b158      	cbz	r0, 80288f0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80288d8:	2200      	movs	r2, #0
 80288da:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 80288de:	9901      	ldr	r1, [sp, #4]
 80288e0:	9a00      	ldr	r2, [sp, #0]
 80288e2:	66e1      	str	r1, [r4, #108]	@ 0x6c
 80288e4:	6722      	str	r2, [r4, #112]	@ 0x70
 80288e6:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80288ea:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 80288ee:	e7e3      	b.n	80288b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80288f0:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80288f4:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80288f8:	4298      	cmp	r0, r3
 80288fa:	d803      	bhi.n	8028904 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80288fc:	f104 0014 	add.w	r0, r4, #20
 8028900:	f7f0 fca2 	bl	8019248 <_ZN8touchgfx7Outline6moveToEii>
 8028904:	2301      	movs	r3, #1
 8028906:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802890a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802890e:	2300      	movs	r3, #0
 8028910:	e7e5      	b.n	80288de <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08028912 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8028912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028914:	ab02      	add	r3, sp, #8
 8028916:	4604      	mov	r4, r0
 8028918:	9101      	str	r1, [sp, #4]
 802891a:	a901      	add	r1, sp, #4
 802891c:	f843 2d08 	str.w	r2, [r3, #-8]!
 8028920:	461a      	mov	r2, r3
 8028922:	f7ff ff99 	bl	8028858 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028926:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8028928:	9901      	ldr	r1, [sp, #4]
 802892a:	9a00      	ldr	r2, [sp, #0]
 802892c:	1ac9      	subs	r1, r1, r3
 802892e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8028930:	1ad2      	subs	r2, r2, r3
 8028932:	9101      	str	r1, [sp, #4]
 8028934:	2a00      	cmp	r2, #0
 8028936:	9200      	str	r2, [sp, #0]
 8028938:	db1c      	blt.n	8028974 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802893a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802893c:	429a      	cmp	r2, r3
 802893e:	bfac      	ite	ge
 8028940:	2002      	movge	r0, #2
 8028942:	2000      	movlt	r0, #0
 8028944:	2900      	cmp	r1, #0
 8028946:	db17      	blt.n	8028978 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8028948:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802894a:	4299      	cmp	r1, r3
 802894c:	bfac      	ite	ge
 802894e:	2308      	movge	r3, #8
 8028950:	2300      	movlt	r3, #0
 8028952:	4303      	orrs	r3, r0
 8028954:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8028958:	b2dd      	uxtb	r5, r3
 802895a:	b978      	cbnz	r0, 802897c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802895c:	f104 0014 	add.w	r0, r4, #20
 8028960:	f7ff fd66 	bl	8028430 <_ZN8touchgfx10Rasterizer6lineToEii>
 8028964:	9b01      	ldr	r3, [sp, #4]
 8028966:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802896a:	6623      	str	r3, [r4, #96]	@ 0x60
 802896c:	9b00      	ldr	r3, [sp, #0]
 802896e:	6663      	str	r3, [r4, #100]	@ 0x64
 8028970:	b002      	add	sp, #8
 8028972:	bd70      	pop	{r4, r5, r6, pc}
 8028974:	2001      	movs	r0, #1
 8028976:	e7e5      	b.n	8028944 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8028978:	2304      	movs	r3, #4
 802897a:	e7ea      	b.n	8028952 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802897c:	b113      	cbz	r3, 8028984 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802897e:	ea10 0305 	ands.w	r3, r0, r5
 8028982:	d11c      	bne.n	80289be <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8028984:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8028988:	f104 0614 	add.w	r6, r4, #20
 802898c:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8028990:	b98b      	cbnz	r3, 80289b6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8028992:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8028996:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802899a:	4298      	cmp	r0, r3
 802899c:	d802      	bhi.n	80289a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802899e:	4630      	mov	r0, r6
 80289a0:	f7f0 fc52 	bl	8019248 <_ZN8touchgfx7Outline6moveToEii>
 80289a4:	2301      	movs	r3, #1
 80289a6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80289aa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80289ae:	4630      	mov	r0, r6
 80289b0:	e9dd 2100 	ldrd	r2, r1, [sp]
 80289b4:	e7d4      	b.n	8028960 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80289b6:	4630      	mov	r0, r6
 80289b8:	f7ff fd3a 	bl	8028430 <_ZN8touchgfx10Rasterizer6lineToEii>
 80289bc:	e7f7      	b.n	80289ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80289be:	461d      	mov	r5, r3
 80289c0:	e7d0      	b.n	8028964 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080289c4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 80289c4:	b538      	push	{r3, r4, r5, lr}
 80289c6:	ed2d 8b10 	vpush	{d8-d15}
 80289ca:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 80289ce:	4605      	mov	r5, r0
 80289d0:	eeb0 ca40 	vmov.f32	s24, s0
 80289d4:	460c      	mov	r4, r1
 80289d6:	eef0 ca60 	vmov.f32	s25, s1
 80289da:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8028b38 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 80289de:	eeb0 da41 	vmov.f32	s26, s2
 80289e2:	eef0 da61 	vmov.f32	s27, s3
 80289e6:	eeb0 ea42 	vmov.f32	s28, s4
 80289ea:	eef0 ea62 	vmov.f32	s29, s5
 80289ee:	eef0 aa6b 	vmov.f32	s21, s23
 80289f2:	2c08      	cmp	r4, #8
 80289f4:	d86e      	bhi.n	8028ad4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 80289f6:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 80289fa:	ee7d 7aee 	vsub.f32	s15, s27, s29
 80289fe:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8028a02:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8028a06:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8028a0a:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8028a0e:	ee7c faad 	vadd.f32	s31, s25, s27
 8028a12:	eee6 7a07 	vfma.f32	s15, s12, s14
 8028a16:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8028a1a:	ee3d aaae 	vadd.f32	s20, s27, s29
 8028a1e:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8028a22:	ee6f faab 	vmul.f32	s31, s31, s23
 8028a26:	ee69 9aab 	vmul.f32	s19, s19, s23
 8028a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8028a2e:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8028a32:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8028a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028a3a:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8028a3e:	ee68 8aab 	vmul.f32	s17, s17, s23
 8028a42:	bf48      	it	mi
 8028a44:	eef1 7a67 	vnegmi.f32	s15, s15
 8028a48:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8028a4c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8028a50:	eef4 7acb 	vcmpe.f32	s15, s22
 8028a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028a58:	dd3f      	ble.n	8028ada <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8028a5a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8028a5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8028a62:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8028a66:	ee27 7a06 	vmul.f32	s14, s14, s12
 8028a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8028a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028a72:	d847      	bhi.n	8028b04 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8028a74:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8028a78:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8028a7c:	f000 fa57 	bl	8028f2e <atan2f>
 8028a80:	eeb0 8a40 	vmov.f32	s16, s0
 8028a84:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8028a88:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8028a8c:	f000 fa4f 	bl	8028f2e <atan2f>
 8028a90:	ee38 0a40 	vsub.f32	s0, s16, s0
 8028a94:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8028b3c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8028a98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8028a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028aa0:	bf48      	it	mi
 8028aa2:	eeb1 0a40 	vnegmi.f32	s0, s0
 8028aa6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028aae:	bfa4      	itt	ge
 8028ab0:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8028b40 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8028ab4:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8028ab8:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8028b44 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8028abc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ac4:	d51e      	bpl.n	8028b04 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8028ac6:	eef0 0a49 	vmov.f32	s1, s18
 8028aca:	4628      	mov	r0, r5
 8028acc:	eeb0 0a68 	vmov.f32	s0, s17
 8028ad0:	f7ed fa94 	bl	8015ffc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8028ad4:	ecbd 8b10 	vpop	{d8-d15}
 8028ad8:	bd38      	pop	{r3, r4, r5, pc}
 8028ada:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8028ade:	eeb0 7a68 	vmov.f32	s14, s17
 8028ae2:	eef0 6a49 	vmov.f32	s13, s18
 8028ae6:	eea7 7aea 	vfms.f32	s14, s15, s21
 8028aea:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8028aee:	eee7 6aea 	vfms.f32	s13, s15, s21
 8028af2:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8028af6:	eee7 7a07 	vfma.f32	s15, s14, s14
 8028afa:	eef4 7ac6 	vcmpe.f32	s15, s12
 8028afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b02:	d9e0      	bls.n	8028ac6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8028b04:	3401      	adds	r4, #1
 8028b06:	eef0 0a6c 	vmov.f32	s1, s25
 8028b0a:	eeb0 0a4c 	vmov.f32	s0, s24
 8028b0e:	4628      	mov	r0, r5
 8028b10:	4621      	mov	r1, r4
 8028b12:	eef0 2a49 	vmov.f32	s5, s18
 8028b16:	eeb0 2a68 	vmov.f32	s4, s17
 8028b1a:	eef0 1a6f 	vmov.f32	s3, s31
 8028b1e:	eeb0 1a4f 	vmov.f32	s2, s30
 8028b22:	f7ff ff4f 	bl	80289c4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8028b26:	eef0 da4a 	vmov.f32	s27, s20
 8028b2a:	eeb0 da69 	vmov.f32	s26, s19
 8028b2e:	eef0 ca49 	vmov.f32	s25, s18
 8028b32:	eeb0 ca68 	vmov.f32	s24, s17
 8028b36:	e75c      	b.n	80289f2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8028b38:	2edbe6ff 	.word	0x2edbe6ff
 8028b3c:	40490fdb 	.word	0x40490fdb
 8028b40:	40c90fdb 	.word	0x40c90fdb
 8028b44:	3dcccccd 	.word	0x3dcccccd

08028b48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8028b48:	b530      	push	{r4, r5, lr}
 8028b4a:	ed2d 8b10 	vpush	{d8-d15}
 8028b4e:	eef0 8a40 	vmov.f32	s17, s0
 8028b52:	b085      	sub	sp, #20
 8028b54:	eef0 9a60 	vmov.f32	s19, s1
 8028b58:	4604      	mov	r4, r0
 8028b5a:	eef0 fa41 	vmov.f32	s31, s2
 8028b5e:	460d      	mov	r5, r1
 8028b60:	eeb0 fa61 	vmov.f32	s30, s3
 8028b64:	eef0 ba42 	vmov.f32	s23, s4
 8028b68:	eeb0 ca62 	vmov.f32	s24, s5
 8028b6c:	eef0 aa43 	vmov.f32	s21, s6
 8028b70:	eeb0 ba63 	vmov.f32	s22, s7
 8028b74:	2d08      	cmp	r5, #8
 8028b76:	f200 8113 	bhi.w	8028da0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8028b7a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8028b7e:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8028b82:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8028b86:	ee38 daaf 	vadd.f32	s26, s17, s31
 8028b8a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8028b8e:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8028b92:	ee2d da27 	vmul.f32	s26, s26, s15
 8028b96:	ed8d 6a01 	vstr	s12, [sp, #4]
 8028b9a:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8028b9e:	ee6c caa7 	vmul.f32	s25, s25, s15
 8028ba2:	eeb0 ea4d 	vmov.f32	s28, s26
 8028ba6:	ee79 da8f 	vadd.f32	s27, s19, s30
 8028baa:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8028bae:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8028bb2:	ee66 6a27 	vmul.f32	s13, s12, s15
 8028bb6:	ee6d daa7 	vmul.f32	s27, s27, s15
 8028bba:	edcd 6a03 	vstr	s13, [sp, #12]
 8028bbe:	eef0 6a6c 	vmov.f32	s13, s25
 8028bc2:	eef0 ea6d 	vmov.f32	s29, s27
 8028bc6:	ee2e ea27 	vmul.f32	s28, s28, s15
 8028bca:	eee7 6a27 	vfma.f32	s13, s14, s15
 8028bce:	eee7 ea27 	vfma.f32	s29, s14, s15
 8028bd2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8028bd6:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8028bda:	eef0 6a67 	vmov.f32	s13, s15
 8028bde:	ed8d 7a02 	vstr	s14, [sp, #8]
 8028be2:	ed9d 7a03 	vldr	s14, [sp, #12]
 8028be6:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8028bea:	ed9d 7a02 	vldr	s14, [sp, #8]
 8028bee:	ee3e aa87 	vadd.f32	s20, s29, s14
 8028bf2:	ee29 9a27 	vmul.f32	s18, s18, s15
 8028bf6:	ee2a aa27 	vmul.f32	s20, s20, s15
 8028bfa:	2d00      	cmp	r5, #0
 8028bfc:	f000 810b 	beq.w	8028e16 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028c00:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8028c04:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8028e5c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8028c08:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8028c0c:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8028c10:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8028c14:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8028c18:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8028c1c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8028c20:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8028c24:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8028c28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8028c2c:	eea5 6a27 	vfma.f32	s12, s10, s15
 8028c30:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8028c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028c38:	bf48      	it	mi
 8028c3a:	eeb1 7a47 	vnegmi.f32	s14, s14
 8028c3e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8028c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028c46:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8028c4a:	bf48      	it	mi
 8028c4c:	eeb1 6a46 	vnegmi.f32	s12, s12
 8028c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028c54:	f340 80a8 	ble.w	8028da8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8028c58:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8028c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028c60:	dd5a      	ble.n	8028d18 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8028c62:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8028c66:	ee37 7a06 	vadd.f32	s14, s14, s12
 8028c6a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8028c6e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8028c72:	ee65 7a85 	vmul.f32	s15, s11, s10
 8028c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8028c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028c7e:	f200 80ca 	bhi.w	8028e16 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028c82:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8028c86:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8028c8a:	f000 f950 	bl	8028f2e <atan2f>
 8028c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8028c92:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8028c96:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8028c9a:	f000 f948 	bl	8028f2e <atan2f>
 8028c9e:	ee38 fa40 	vsub.f32	s30, s16, s0
 8028ca2:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8028ca6:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8028caa:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8028cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cb2:	bf48      	it	mi
 8028cb4:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8028cb8:	f000 f939 	bl	8028f2e <atan2f>
 8028cbc:	ee30 0a48 	vsub.f32	s0, s0, s16
 8028cc0:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8028e60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8028cc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8028cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ccc:	eeb4 fae7 	vcmpe.f32	s30, s15
 8028cd0:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8028e60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8028cd4:	bf48      	it	mi
 8028cd6:	eeb1 0a40 	vnegmi.f32	s0, s0
 8028cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cde:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028ce2:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8028e64 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8028ce6:	bfa4      	itt	ge
 8028ce8:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8028e68 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8028cec:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8028cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cf4:	bfa4      	itt	ge
 8028cf6:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8028e68 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8028cfa:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8028cfe:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8028d02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d0a:	f140 8084 	bpl.w	8028e16 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028d0e:	eef0 0a4a 	vmov.f32	s1, s20
 8028d12:	eeb0 0a49 	vmov.f32	s0, s18
 8028d16:	e040      	b.n	8028d9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8028d18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8028d1c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8028d20:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8028d24:	ee67 7a85 	vmul.f32	s15, s15, s10
 8028d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8028d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d30:	d871      	bhi.n	8028e16 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028d32:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8028d36:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8028d3a:	f000 f8f8 	bl	8028f2e <atan2f>
 8028d3e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8028d42:	eeb0 8a40 	vmov.f32	s16, s0
 8028d46:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8028d4a:	f000 f8f0 	bl	8028f2e <atan2f>
 8028d4e:	ee38 0a40 	vsub.f32	s0, s16, s0
 8028d52:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8028e60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8028d56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8028d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d5e:	bf48      	it	mi
 8028d60:	eeb1 0a40 	vnegmi.f32	s0, s0
 8028d64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d6c:	bfa4      	itt	ge
 8028d6e:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8028e68 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8028d72:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8028d76:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8028e64 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8028d7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d82:	d548      	bpl.n	8028e16 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028d84:	eef0 0a4f 	vmov.f32	s1, s30
 8028d88:	4620      	mov	r0, r4
 8028d8a:	eeb0 0a6f 	vmov.f32	s0, s31
 8028d8e:	f7ed f935 	bl	8015ffc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8028d92:	eef0 0a4c 	vmov.f32	s1, s24
 8028d96:	eeb0 0a6b 	vmov.f32	s0, s23
 8028d9a:	4620      	mov	r0, r4
 8028d9c:	f7ed f92e 	bl	8015ffc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8028da0:	b005      	add	sp, #20
 8028da2:	ecbd 8b10 	vpop	{d8-d15}
 8028da6:	bd30      	pop	{r4, r5, pc}
 8028da8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8028e5c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8028dac:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8028db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028db4:	dd19      	ble.n	8028dea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8028db6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8028dba:	ee26 7a06 	vmul.f32	s14, s12, s12
 8028dbe:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8028dc2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8028dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8028dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028dce:	d822      	bhi.n	8028e16 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028dd0:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8028dd4:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8028dd8:	f000 f8a9 	bl	8028f2e <atan2f>
 8028ddc:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8028de0:	eeb0 8a40 	vmov.f32	s16, s0
 8028de4:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8028de8:	e7af      	b.n	8028d4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8028dea:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8028dee:	eeb0 7a49 	vmov.f32	s14, s18
 8028df2:	eeb0 6a4a 	vmov.f32	s12, s20
 8028df6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8028dfa:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8028dfe:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8028e02:	ee66 7a06 	vmul.f32	s15, s12, s12
 8028e06:	eee7 7a07 	vfma.f32	s15, s14, s14
 8028e0a:	eef4 7ac5 	vcmpe.f32	s15, s10
 8028e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e12:	f67f af7c 	bls.w	8028d0e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8028e16:	3501      	adds	r5, #1
 8028e18:	eef0 0a69 	vmov.f32	s1, s19
 8028e1c:	eeb0 0a68 	vmov.f32	s0, s17
 8028e20:	4620      	mov	r0, r4
 8028e22:	4629      	mov	r1, r5
 8028e24:	eef0 3a4a 	vmov.f32	s7, s20
 8028e28:	eeb0 3a49 	vmov.f32	s6, s18
 8028e2c:	eef0 2a6e 	vmov.f32	s5, s29
 8028e30:	eeb0 2a4e 	vmov.f32	s4, s28
 8028e34:	eef0 1a6d 	vmov.f32	s3, s27
 8028e38:	eeb0 1a4d 	vmov.f32	s2, s26
 8028e3c:	f7ff fe84 	bl	8028b48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8028e40:	eeb0 ca6c 	vmov.f32	s24, s25
 8028e44:	eddd ba01 	vldr	s23, [sp, #4]
 8028e48:	eef0 9a4a 	vmov.f32	s19, s20
 8028e4c:	ed9d fa02 	vldr	s30, [sp, #8]
 8028e50:	eef0 8a49 	vmov.f32	s17, s18
 8028e54:	eddd fa03 	vldr	s31, [sp, #12]
 8028e58:	e68c      	b.n	8028b74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8028e5a:	bf00      	nop
 8028e5c:	2edbe6ff 	.word	0x2edbe6ff
 8028e60:	40490fdb 	.word	0x40490fdb
 8028e64:	3dcccccd 	.word	0x3dcccccd
 8028e68:	40c90fdb 	.word	0x40c90fdb

08028e6c <_ZN8touchgfx6CanvasD1Ev>:
 8028e6c:	4b04      	ldr	r3, [pc, #16]	@ (8028e80 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8028e6e:	b510      	push	{r4, lr}
 8028e70:	4604      	mov	r4, r0
 8028e72:	f840 3b14 	str.w	r3, [r0], #20
 8028e76:	f7ef fcef 	bl	8018858 <_ZN8touchgfx7OutlineD1Ev>
 8028e7a:	4620      	mov	r0, r4
 8028e7c:	bd10      	pop	{r4, pc}
 8028e7e:	bf00      	nop
 8028e80:	0802e7b8 	.word	0x0802e7b8

08028e84 <_ZN8touchgfx6CanvasD0Ev>:
 8028e84:	b510      	push	{r4, lr}
 8028e86:	4604      	mov	r4, r0
 8028e88:	f7ff fff0 	bl	8028e6c <_ZN8touchgfx6CanvasD1Ev>
 8028e8c:	2174      	movs	r1, #116	@ 0x74
 8028e8e:	4620      	mov	r0, r4
 8028e90:	f000 f826 	bl	8028ee0 <_ZdlPvj>
 8028e94:	4620      	mov	r0, r4
 8028e96:	bd10      	pop	{r4, pc}

08028e98 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8028e98:	790b      	ldrb	r3, [r1, #4]
 8028e9a:	2b00      	cmp	r3, #0
 8028e9c:	bf0c      	ite	eq
 8028e9e:	2301      	moveq	r3, #1
 8028ea0:	2300      	movne	r3, #0
 8028ea2:	b570      	push	{r4, r5, r6, lr}
 8028ea4:	4604      	mov	r4, r0
 8028ea6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8028eaa:	460e      	mov	r6, r1
 8028eac:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8028eb0:	d109      	bne.n	8028ec6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8028eb2:	b14d      	cbz	r5, 8028ec8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8028eb4:	7933      	ldrb	r3, [r6, #4]
 8028eb6:	2b01      	cmp	r3, #1
 8028eb8:	d10c      	bne.n	8028ed4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028eba:	6823      	ldr	r3, [r4, #0]
 8028ebc:	4620      	mov	r0, r4
 8028ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8028ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028ec4:	4718      	bx	r3
 8028ec6:	b12d      	cbz	r5, 8028ed4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028ec8:	6823      	ldr	r3, [r4, #0]
 8028eca:	4620      	mov	r0, r4
 8028ecc:	695b      	ldr	r3, [r3, #20]
 8028ece:	4798      	blx	r3
 8028ed0:	2d00      	cmp	r5, #0
 8028ed2:	d1ef      	bne.n	8028eb4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8028ed4:	bd70      	pop	{r4, r5, r6, pc}

08028ed6 <__aeabi_atexit>:
 8028ed6:	460b      	mov	r3, r1
 8028ed8:	4601      	mov	r1, r0
 8028eda:	4618      	mov	r0, r3
 8028edc:	f000 bc5a 	b.w	8029794 <__cxa_atexit>

08028ee0 <_ZdlPvj>:
 8028ee0:	f000 b812 	b.w	8028f08 <_ZdlPv>

08028ee4 <__cxa_guard_acquire>:
 8028ee4:	6802      	ldr	r2, [r0, #0]
 8028ee6:	07d2      	lsls	r2, r2, #31
 8028ee8:	4603      	mov	r3, r0
 8028eea:	d405      	bmi.n	8028ef8 <__cxa_guard_acquire+0x14>
 8028eec:	7842      	ldrb	r2, [r0, #1]
 8028eee:	b102      	cbz	r2, 8028ef2 <__cxa_guard_acquire+0xe>
 8028ef0:	deff      	udf	#255	@ 0xff
 8028ef2:	2001      	movs	r0, #1
 8028ef4:	7058      	strb	r0, [r3, #1]
 8028ef6:	4770      	bx	lr
 8028ef8:	2000      	movs	r0, #0
 8028efa:	4770      	bx	lr

08028efc <__cxa_guard_release>:
 8028efc:	2301      	movs	r3, #1
 8028efe:	6003      	str	r3, [r0, #0]
 8028f00:	4770      	bx	lr

08028f02 <__cxa_pure_virtual>:
 8028f02:	b508      	push	{r3, lr}
 8028f04:	f000 f80e 	bl	8028f24 <_ZSt9terminatev>

08028f08 <_ZdlPv>:
 8028f08:	f000 bb8e 	b.w	8029628 <free>

08028f0c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028f0c:	b508      	push	{r3, lr}
 8028f0e:	4780      	blx	r0
 8028f10:	f000 fb57 	bl	80295c2 <abort>

08028f14 <_ZSt13get_terminatev>:
 8028f14:	4b02      	ldr	r3, [pc, #8]	@ (8028f20 <_ZSt13get_terminatev+0xc>)
 8028f16:	6818      	ldr	r0, [r3, #0]
 8028f18:	f3bf 8f5b 	dmb	ish
 8028f1c:	4770      	bx	lr
 8028f1e:	bf00      	nop
 8028f20:	240000d8 	.word	0x240000d8

08028f24 <_ZSt9terminatev>:
 8028f24:	b508      	push	{r3, lr}
 8028f26:	f7ff fff5 	bl	8028f14 <_ZSt13get_terminatev>
 8028f2a:	f7ff ffef 	bl	8028f0c <_ZN10__cxxabiv111__terminateEPFvvE>

08028f2e <atan2f>:
 8028f2e:	f000 b9cf 	b.w	80292d0 <__ieee754_atan2f>
	...

08028f34 <sqrtf>:
 8028f34:	b508      	push	{r3, lr}
 8028f36:	ed2d 8b02 	vpush	{d8}
 8028f3a:	eeb0 8a40 	vmov.f32	s16, s0
 8028f3e:	f000 f9c4 	bl	80292ca <__ieee754_sqrtf>
 8028f42:	eeb4 8a48 	vcmp.f32	s16, s16
 8028f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028f4a:	d60c      	bvs.n	8028f66 <sqrtf+0x32>
 8028f4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8028f6c <sqrtf+0x38>
 8028f50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8028f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028f58:	d505      	bpl.n	8028f66 <sqrtf+0x32>
 8028f5a:	f000 fe89 	bl	8029c70 <__errno>
 8028f5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8028f62:	2321      	movs	r3, #33	@ 0x21
 8028f64:	6003      	str	r3, [r0, #0]
 8028f66:	ecbd 8b02 	vpop	{d8}
 8028f6a:	bd08      	pop	{r3, pc}
 8028f6c:	00000000 	.word	0x00000000

08028f70 <sinf_poly>:
 8028f70:	07cb      	lsls	r3, r1, #31
 8028f72:	d412      	bmi.n	8028f9a <sinf_poly+0x2a>
 8028f74:	ee21 5b00 	vmul.f64	d5, d1, d0
 8028f78:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8028f7c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8028f80:	eea6 7b01 	vfma.f64	d7, d6, d1
 8028f84:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8028f88:	ee21 1b05 	vmul.f64	d1, d1, d5
 8028f8c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8028f90:	eea7 0b01 	vfma.f64	d0, d7, d1
 8028f94:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028f98:	4770      	bx	lr
 8028f9a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8028f9e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8028fa2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8028fa6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8028faa:	eea1 7b06 	vfma.f64	d7, d1, d6
 8028fae:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8028fb2:	eea1 0b06 	vfma.f64	d0, d1, d6
 8028fb6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8028fba:	ee21 1b05 	vmul.f64	d1, d1, d5
 8028fbe:	eea5 0b06 	vfma.f64	d0, d5, d6
 8028fc2:	e7e5      	b.n	8028f90 <sinf_poly+0x20>
 8028fc4:	0000      	movs	r0, r0
	...

08028fc8 <sinf>:
 8028fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028fca:	ee10 4a10 	vmov	r4, s0
 8028fce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8028fd2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8028fd6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8028fda:	eef0 7a40 	vmov.f32	s15, s0
 8028fde:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8028fe2:	d218      	bcs.n	8029016 <sinf+0x4e>
 8028fe4:	ee26 1b06 	vmul.f64	d1, d6, d6
 8028fe8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8028fec:	d20a      	bcs.n	8029004 <sinf+0x3c>
 8028fee:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8028ff2:	d103      	bne.n	8028ffc <sinf+0x34>
 8028ff4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8028ff8:	ed8d 1a01 	vstr	s2, [sp, #4]
 8028ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8029000:	b003      	add	sp, #12
 8029002:	bd30      	pop	{r4, r5, pc}
 8029004:	483a      	ldr	r0, [pc, #232]	@ (80290f0 <sinf+0x128>)
 8029006:	eeb0 0b46 	vmov.f64	d0, d6
 802900a:	2100      	movs	r1, #0
 802900c:	b003      	add	sp, #12
 802900e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029012:	f7ff bfad 	b.w	8028f70 <sinf_poly>
 8029016:	f240 422e 	movw	r2, #1070	@ 0x42e
 802901a:	4293      	cmp	r3, r2
 802901c:	d824      	bhi.n	8029068 <sinf+0xa0>
 802901e:	4b34      	ldr	r3, [pc, #208]	@ (80290f0 <sinf+0x128>)
 8029020:	ed93 7b08 	vldr	d7, [r3, #32]
 8029024:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029028:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802902c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029030:	ee17 1a90 	vmov	r1, s15
 8029034:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8029038:	1609      	asrs	r1, r1, #24
 802903a:	ee07 1a90 	vmov	s15, r1
 802903e:	f001 0203 	and.w	r2, r1, #3
 8029042:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029046:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802904a:	ed92 0b00 	vldr	d0, [r2]
 802904e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8029052:	f011 0f02 	tst.w	r1, #2
 8029056:	eea5 6b47 	vfms.f64	d6, d5, d7
 802905a:	bf08      	it	eq
 802905c:	4618      	moveq	r0, r3
 802905e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029062:	ee20 0b06 	vmul.f64	d0, d0, d6
 8029066:	e7d1      	b.n	802900c <sinf+0x44>
 8029068:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802906c:	d237      	bcs.n	80290de <sinf+0x116>
 802906e:	4921      	ldr	r1, [pc, #132]	@ (80290f4 <sinf+0x12c>)
 8029070:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029074:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029078:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802907c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029080:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029084:	6a10      	ldr	r0, [r2, #32]
 8029086:	6912      	ldr	r2, [r2, #16]
 8029088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802908c:	40ab      	lsls	r3, r5
 802908e:	fba0 5003 	umull	r5, r0, r0, r3
 8029092:	4359      	muls	r1, r3
 8029094:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029098:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802909c:	0f9d      	lsrs	r5, r3, #30
 802909e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80290a2:	1ac9      	subs	r1, r1, r3
 80290a4:	f7d7 fafa 	bl	800069c <__aeabi_l2d>
 80290a8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80290ac:	4b10      	ldr	r3, [pc, #64]	@ (80290f0 <sinf+0x128>)
 80290ae:	f004 0203 	and.w	r2, r4, #3
 80290b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80290b6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80290e8 <sinf+0x120>
 80290ba:	ed92 0b00 	vldr	d0, [r2]
 80290be:	ec41 0b17 	vmov	d7, r0, r1
 80290c2:	f014 0f02 	tst.w	r4, #2
 80290c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80290ca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80290ce:	4629      	mov	r1, r5
 80290d0:	bf08      	it	eq
 80290d2:	4618      	moveq	r0, r3
 80290d4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80290d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80290dc:	e796      	b.n	802900c <sinf+0x44>
 80290de:	b003      	add	sp, #12
 80290e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80290e4:	f000 b8e2 	b.w	80292ac <__math_invalidf>
 80290e8:	54442d18 	.word	0x54442d18
 80290ec:	3c1921fb 	.word	0x3c1921fb
 80290f0:	0802e828 	.word	0x0802e828
 80290f4:	0802e7c4 	.word	0x0802e7c4

080290f8 <sinf_poly>:
 80290f8:	07cb      	lsls	r3, r1, #31
 80290fa:	d412      	bmi.n	8029122 <sinf_poly+0x2a>
 80290fc:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029100:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029104:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029108:	eea6 7b01 	vfma.f64	d7, d6, d1
 802910c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029110:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029114:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029118:	eea7 0b01 	vfma.f64	d0, d7, d1
 802911c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029120:	4770      	bx	lr
 8029122:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029126:	ee21 5b01 	vmul.f64	d5, d1, d1
 802912a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802912e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029132:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029136:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802913a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802913e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029142:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029146:	eea5 0b06 	vfma.f64	d0, d5, d6
 802914a:	e7e5      	b.n	8029118 <sinf_poly+0x20>
 802914c:	0000      	movs	r0, r0
	...

08029150 <cosf>:
 8029150:	b538      	push	{r3, r4, r5, lr}
 8029152:	ee10 4a10 	vmov	r4, s0
 8029156:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802915a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802915e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8029162:	d21f      	bcs.n	80291a4 <cosf+0x54>
 8029164:	ee27 7b07 	vmul.f64	d7, d7, d7
 8029168:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802916c:	f0c0 8082 	bcc.w	8029274 <cosf+0x124>
 8029170:	ee27 4b07 	vmul.f64	d4, d7, d7
 8029174:	4b44      	ldr	r3, [pc, #272]	@ (8029288 <cosf+0x138>)
 8029176:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802917a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802917e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8029182:	eea7 6b05 	vfma.f64	d6, d7, d5
 8029186:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802918a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802918e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8029192:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029196:	eea4 0b05 	vfma.f64	d0, d4, d5
 802919a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802919e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80291a2:	bd38      	pop	{r3, r4, r5, pc}
 80291a4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80291a8:	4293      	cmp	r3, r2
 80291aa:	d829      	bhi.n	8029200 <cosf+0xb0>
 80291ac:	4b36      	ldr	r3, [pc, #216]	@ (8029288 <cosf+0x138>)
 80291ae:	ed93 6b08 	vldr	d6, [r3, #32]
 80291b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80291b6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80291ba:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80291be:	ee16 1a90 	vmov	r1, s13
 80291c2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80291c6:	1609      	asrs	r1, r1, #24
 80291c8:	ee06 1a90 	vmov	s13, r1
 80291cc:	f001 0203 	and.w	r2, r1, #3
 80291d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80291d4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80291d8:	ed92 0b00 	vldr	d0, [r2]
 80291dc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80291e0:	f011 0f02 	tst.w	r1, #2
 80291e4:	f081 0101 	eor.w	r1, r1, #1
 80291e8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80291ec:	bf08      	it	eq
 80291ee:	4618      	moveq	r0, r3
 80291f0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80291f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80291f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80291fc:	f7ff bf7c 	b.w	80290f8 <sinf_poly>
 8029200:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029204:	d232      	bcs.n	802926c <cosf+0x11c>
 8029206:	4921      	ldr	r1, [pc, #132]	@ (802928c <cosf+0x13c>)
 8029208:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802920c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029210:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029214:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029218:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802921c:	6a10      	ldr	r0, [r2, #32]
 802921e:	6912      	ldr	r2, [r2, #16]
 8029220:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029224:	40ab      	lsls	r3, r5
 8029226:	fba0 5003 	umull	r5, r0, r0, r3
 802922a:	4359      	muls	r1, r3
 802922c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029230:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029234:	0f9d      	lsrs	r5, r3, #30
 8029236:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802923a:	1ac9      	subs	r1, r1, r3
 802923c:	f7d7 fa2e 	bl	800069c <__aeabi_l2d>
 8029240:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029244:	4b10      	ldr	r3, [pc, #64]	@ (8029288 <cosf+0x138>)
 8029246:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8029280 <cosf+0x130>
 802924a:	ec41 0b17 	vmov	d7, r0, r1
 802924e:	f004 0203 	and.w	r2, r4, #3
 8029252:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029256:	ed92 0b00 	vldr	d0, [r2]
 802925a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802925e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029262:	f014 0f02 	tst.w	r4, #2
 8029266:	f085 0101 	eor.w	r1, r5, #1
 802926a:	e7bf      	b.n	80291ec <cosf+0x9c>
 802926c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029270:	f000 b81c 	b.w	80292ac <__math_invalidf>
 8029274:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8029278:	e793      	b.n	80291a2 <cosf+0x52>
 802927a:	bf00      	nop
 802927c:	f3af 8000 	nop.w
 8029280:	54442d18 	.word	0x54442d18
 8029284:	3c1921fb 	.word	0x3c1921fb
 8029288:	0802e828 	.word	0x0802e828
 802928c:	0802e7c4 	.word	0x0802e7c4

08029290 <with_errnof>:
 8029290:	b510      	push	{r4, lr}
 8029292:	ed2d 8b02 	vpush	{d8}
 8029296:	eeb0 8a40 	vmov.f32	s16, s0
 802929a:	4604      	mov	r4, r0
 802929c:	f000 fce8 	bl	8029c70 <__errno>
 80292a0:	eeb0 0a48 	vmov.f32	s0, s16
 80292a4:	ecbd 8b02 	vpop	{d8}
 80292a8:	6004      	str	r4, [r0, #0]
 80292aa:	bd10      	pop	{r4, pc}

080292ac <__math_invalidf>:
 80292ac:	eef0 7a40 	vmov.f32	s15, s0
 80292b0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80292b4:	eef4 7a67 	vcmp.f32	s15, s15
 80292b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292bc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80292c0:	d602      	bvs.n	80292c8 <__math_invalidf+0x1c>
 80292c2:	2021      	movs	r0, #33	@ 0x21
 80292c4:	f7ff bfe4 	b.w	8029290 <with_errnof>
 80292c8:	4770      	bx	lr

080292ca <__ieee754_sqrtf>:
 80292ca:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80292ce:	4770      	bx	lr

080292d0 <__ieee754_atan2f>:
 80292d0:	ee10 2a90 	vmov	r2, s1
 80292d4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80292d8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80292dc:	b510      	push	{r4, lr}
 80292de:	eef0 7a40 	vmov.f32	s15, s0
 80292e2:	d806      	bhi.n	80292f2 <__ieee754_atan2f+0x22>
 80292e4:	ee10 0a10 	vmov	r0, s0
 80292e8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80292ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80292f0:	d904      	bls.n	80292fc <__ieee754_atan2f+0x2c>
 80292f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80292f6:	eeb0 0a67 	vmov.f32	s0, s15
 80292fa:	bd10      	pop	{r4, pc}
 80292fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8029300:	d103      	bne.n	802930a <__ieee754_atan2f+0x3a>
 8029302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029306:	f000 b881 	b.w	802940c <atanf>
 802930a:	1794      	asrs	r4, r2, #30
 802930c:	f004 0402 	and.w	r4, r4, #2
 8029310:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8029314:	b93b      	cbnz	r3, 8029326 <__ieee754_atan2f+0x56>
 8029316:	2c02      	cmp	r4, #2
 8029318:	d05c      	beq.n	80293d4 <__ieee754_atan2f+0x104>
 802931a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80293e8 <__ieee754_atan2f+0x118>
 802931e:	2c03      	cmp	r4, #3
 8029320:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8029324:	e7e7      	b.n	80292f6 <__ieee754_atan2f+0x26>
 8029326:	b939      	cbnz	r1, 8029338 <__ieee754_atan2f+0x68>
 8029328:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80293ec <__ieee754_atan2f+0x11c>
 802932c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80293f0 <__ieee754_atan2f+0x120>
 8029330:	2800      	cmp	r0, #0
 8029332:	fe67 7a87 	vselge.f32	s15, s15, s14
 8029336:	e7de      	b.n	80292f6 <__ieee754_atan2f+0x26>
 8029338:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802933c:	d110      	bne.n	8029360 <__ieee754_atan2f+0x90>
 802933e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029342:	f104 34ff 	add.w	r4, r4, #4294967295
 8029346:	d107      	bne.n	8029358 <__ieee754_atan2f+0x88>
 8029348:	2c02      	cmp	r4, #2
 802934a:	d846      	bhi.n	80293da <__ieee754_atan2f+0x10a>
 802934c:	4b29      	ldr	r3, [pc, #164]	@ (80293f4 <__ieee754_atan2f+0x124>)
 802934e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8029352:	edd3 7a00 	vldr	s15, [r3]
 8029356:	e7ce      	b.n	80292f6 <__ieee754_atan2f+0x26>
 8029358:	2c02      	cmp	r4, #2
 802935a:	d841      	bhi.n	80293e0 <__ieee754_atan2f+0x110>
 802935c:	4b26      	ldr	r3, [pc, #152]	@ (80293f8 <__ieee754_atan2f+0x128>)
 802935e:	e7f6      	b.n	802934e <__ieee754_atan2f+0x7e>
 8029360:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029364:	d0e0      	beq.n	8029328 <__ieee754_atan2f+0x58>
 8029366:	1a5b      	subs	r3, r3, r1
 8029368:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802936c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8029370:	da1a      	bge.n	80293a8 <__ieee754_atan2f+0xd8>
 8029372:	2a00      	cmp	r2, #0
 8029374:	da01      	bge.n	802937a <__ieee754_atan2f+0xaa>
 8029376:	313c      	adds	r1, #60	@ 0x3c
 8029378:	db19      	blt.n	80293ae <__ieee754_atan2f+0xde>
 802937a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802937e:	f000 f919 	bl	80295b4 <fabsf>
 8029382:	f000 f843 	bl	802940c <atanf>
 8029386:	eef0 7a40 	vmov.f32	s15, s0
 802938a:	2c01      	cmp	r4, #1
 802938c:	d012      	beq.n	80293b4 <__ieee754_atan2f+0xe4>
 802938e:	2c02      	cmp	r4, #2
 8029390:	d017      	beq.n	80293c2 <__ieee754_atan2f+0xf2>
 8029392:	2c00      	cmp	r4, #0
 8029394:	d0af      	beq.n	80292f6 <__ieee754_atan2f+0x26>
 8029396:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80293fc <__ieee754_atan2f+0x12c>
 802939a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802939e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8029400 <__ieee754_atan2f+0x130>
 80293a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80293a6:	e7a6      	b.n	80292f6 <__ieee754_atan2f+0x26>
 80293a8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80293ec <__ieee754_atan2f+0x11c>
 80293ac:	e7ed      	b.n	802938a <__ieee754_atan2f+0xba>
 80293ae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8029404 <__ieee754_atan2f+0x134>
 80293b2:	e7ea      	b.n	802938a <__ieee754_atan2f+0xba>
 80293b4:	ee17 3a90 	vmov	r3, s15
 80293b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80293bc:	ee07 3a90 	vmov	s15, r3
 80293c0:	e799      	b.n	80292f6 <__ieee754_atan2f+0x26>
 80293c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80293fc <__ieee754_atan2f+0x12c>
 80293c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80293ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8029400 <__ieee754_atan2f+0x130>
 80293ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80293d2:	e790      	b.n	80292f6 <__ieee754_atan2f+0x26>
 80293d4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8029400 <__ieee754_atan2f+0x130>
 80293d8:	e78d      	b.n	80292f6 <__ieee754_atan2f+0x26>
 80293da:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8029408 <__ieee754_atan2f+0x138>
 80293de:	e78a      	b.n	80292f6 <__ieee754_atan2f+0x26>
 80293e0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8029404 <__ieee754_atan2f+0x134>
 80293e4:	e787      	b.n	80292f6 <__ieee754_atan2f+0x26>
 80293e6:	bf00      	nop
 80293e8:	c0490fdb 	.word	0xc0490fdb
 80293ec:	3fc90fdb 	.word	0x3fc90fdb
 80293f0:	bfc90fdb 	.word	0xbfc90fdb
 80293f4:	0802e914 	.word	0x0802e914
 80293f8:	0802e908 	.word	0x0802e908
 80293fc:	33bbbd2e 	.word	0x33bbbd2e
 8029400:	40490fdb 	.word	0x40490fdb
 8029404:	00000000 	.word	0x00000000
 8029408:	3f490fdb 	.word	0x3f490fdb

0802940c <atanf>:
 802940c:	b538      	push	{r3, r4, r5, lr}
 802940e:	ee10 5a10 	vmov	r5, s0
 8029412:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8029416:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802941a:	eef0 7a40 	vmov.f32	s15, s0
 802941e:	d30f      	bcc.n	8029440 <atanf+0x34>
 8029420:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8029424:	d904      	bls.n	8029430 <atanf+0x24>
 8029426:	ee70 7a00 	vadd.f32	s15, s0, s0
 802942a:	eeb0 0a67 	vmov.f32	s0, s15
 802942e:	bd38      	pop	{r3, r4, r5, pc}
 8029430:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8029568 <atanf+0x15c>
 8029434:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802956c <atanf+0x160>
 8029438:	2d00      	cmp	r5, #0
 802943a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802943e:	e7f4      	b.n	802942a <atanf+0x1e>
 8029440:	4b4b      	ldr	r3, [pc, #300]	@ (8029570 <atanf+0x164>)
 8029442:	429c      	cmp	r4, r3
 8029444:	d810      	bhi.n	8029468 <atanf+0x5c>
 8029446:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802944a:	d20a      	bcs.n	8029462 <atanf+0x56>
 802944c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8029574 <atanf+0x168>
 8029450:	ee30 7a07 	vadd.f32	s14, s0, s14
 8029454:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8029458:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802945c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029460:	dce3      	bgt.n	802942a <atanf+0x1e>
 8029462:	f04f 33ff 	mov.w	r3, #4294967295
 8029466:	e013      	b.n	8029490 <atanf+0x84>
 8029468:	f000 f8a4 	bl	80295b4 <fabsf>
 802946c:	4b42      	ldr	r3, [pc, #264]	@ (8029578 <atanf+0x16c>)
 802946e:	429c      	cmp	r4, r3
 8029470:	d84f      	bhi.n	8029512 <atanf+0x106>
 8029472:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8029476:	429c      	cmp	r4, r3
 8029478:	d841      	bhi.n	80294fe <atanf+0xf2>
 802947a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802947e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8029482:	eea0 7a27 	vfma.f32	s14, s0, s15
 8029486:	2300      	movs	r3, #0
 8029488:	ee30 0a27 	vadd.f32	s0, s0, s15
 802948c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029490:	1c5a      	adds	r2, r3, #1
 8029492:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8029496:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802957c <atanf+0x170>
 802949a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8029580 <atanf+0x174>
 802949e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8029584 <atanf+0x178>
 80294a2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80294a6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80294aa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8029588 <atanf+0x17c>
 80294ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80294b2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802958c <atanf+0x180>
 80294b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80294ba:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8029590 <atanf+0x184>
 80294be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80294c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8029594 <atanf+0x188>
 80294c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80294ca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8029598 <atanf+0x18c>
 80294ce:	eea6 5a87 	vfma.f32	s10, s13, s14
 80294d2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802959c <atanf+0x190>
 80294d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80294da:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80295a0 <atanf+0x194>
 80294de:	eea7 5a26 	vfma.f32	s10, s14, s13
 80294e2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80295a4 <atanf+0x198>
 80294e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80294ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 80294ee:	eea5 7a86 	vfma.f32	s14, s11, s12
 80294f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80294f6:	d121      	bne.n	802953c <atanf+0x130>
 80294f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80294fc:	e795      	b.n	802942a <atanf+0x1e>
 80294fe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8029502:	ee30 7a67 	vsub.f32	s14, s0, s15
 8029506:	ee30 0a27 	vadd.f32	s0, s0, s15
 802950a:	2301      	movs	r3, #1
 802950c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029510:	e7be      	b.n	8029490 <atanf+0x84>
 8029512:	4b25      	ldr	r3, [pc, #148]	@ (80295a8 <atanf+0x19c>)
 8029514:	429c      	cmp	r4, r3
 8029516:	d80b      	bhi.n	8029530 <atanf+0x124>
 8029518:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802951c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029520:	eea0 7a27 	vfma.f32	s14, s0, s15
 8029524:	2302      	movs	r3, #2
 8029526:	ee70 6a67 	vsub.f32	s13, s0, s15
 802952a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802952e:	e7af      	b.n	8029490 <atanf+0x84>
 8029530:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8029534:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029538:	2303      	movs	r3, #3
 802953a:	e7a9      	b.n	8029490 <atanf+0x84>
 802953c:	4a1b      	ldr	r2, [pc, #108]	@ (80295ac <atanf+0x1a0>)
 802953e:	491c      	ldr	r1, [pc, #112]	@ (80295b0 <atanf+0x1a4>)
 8029540:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8029544:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8029548:	edd3 6a00 	vldr	s13, [r3]
 802954c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8029550:	2d00      	cmp	r5, #0
 8029552:	ee37 7a67 	vsub.f32	s14, s14, s15
 8029556:	edd2 7a00 	vldr	s15, [r2]
 802955a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802955e:	bfb8      	it	lt
 8029560:	eef1 7a67 	vneglt.f32	s15, s15
 8029564:	e761      	b.n	802942a <atanf+0x1e>
 8029566:	bf00      	nop
 8029568:	bfc90fdb 	.word	0xbfc90fdb
 802956c:	3fc90fdb 	.word	0x3fc90fdb
 8029570:	3edfffff 	.word	0x3edfffff
 8029574:	7149f2ca 	.word	0x7149f2ca
 8029578:	3f97ffff 	.word	0x3f97ffff
 802957c:	3c8569d7 	.word	0x3c8569d7
 8029580:	3d4bda59 	.word	0x3d4bda59
 8029584:	bd6ef16b 	.word	0xbd6ef16b
 8029588:	3d886b35 	.word	0x3d886b35
 802958c:	3dba2e6e 	.word	0x3dba2e6e
 8029590:	3e124925 	.word	0x3e124925
 8029594:	3eaaaaab 	.word	0x3eaaaaab
 8029598:	bd15a221 	.word	0xbd15a221
 802959c:	bd9d8795 	.word	0xbd9d8795
 80295a0:	bde38e38 	.word	0xbde38e38
 80295a4:	be4ccccd 	.word	0xbe4ccccd
 80295a8:	401bffff 	.word	0x401bffff
 80295ac:	0802e930 	.word	0x0802e930
 80295b0:	0802e920 	.word	0x0802e920

080295b4 <fabsf>:
 80295b4:	ee10 3a10 	vmov	r3, s0
 80295b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80295bc:	ee00 3a10 	vmov	s0, r3
 80295c0:	4770      	bx	lr

080295c2 <abort>:
 80295c2:	b508      	push	{r3, lr}
 80295c4:	2006      	movs	r0, #6
 80295c6:	f000 fae1 	bl	8029b8c <raise>
 80295ca:	2001      	movs	r0, #1
 80295cc:	f7d8 f964 	bl	8001898 <_exit>

080295d0 <__assert_func>:
 80295d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80295d2:	4614      	mov	r4, r2
 80295d4:	461a      	mov	r2, r3
 80295d6:	4b09      	ldr	r3, [pc, #36]	@ (80295fc <__assert_func+0x2c>)
 80295d8:	681b      	ldr	r3, [r3, #0]
 80295da:	4605      	mov	r5, r0
 80295dc:	68d8      	ldr	r0, [r3, #12]
 80295de:	b954      	cbnz	r4, 80295f6 <__assert_func+0x26>
 80295e0:	4b07      	ldr	r3, [pc, #28]	@ (8029600 <__assert_func+0x30>)
 80295e2:	461c      	mov	r4, r3
 80295e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80295e8:	9100      	str	r1, [sp, #0]
 80295ea:	462b      	mov	r3, r5
 80295ec:	4905      	ldr	r1, [pc, #20]	@ (8029604 <__assert_func+0x34>)
 80295ee:	f000 f983 	bl	80298f8 <fiprintf>
 80295f2:	f7ff ffe6 	bl	80295c2 <abort>
 80295f6:	4b04      	ldr	r3, [pc, #16]	@ (8029608 <__assert_func+0x38>)
 80295f8:	e7f4      	b.n	80295e4 <__assert_func+0x14>
 80295fa:	bf00      	nop
 80295fc:	240000e8 	.word	0x240000e8
 8029600:	0802e97b 	.word	0x0802e97b
 8029604:	0802e94d 	.word	0x0802e94d
 8029608:	0802e940 	.word	0x0802e940

0802960c <atexit>:
 802960c:	2300      	movs	r3, #0
 802960e:	4601      	mov	r1, r0
 8029610:	461a      	mov	r2, r3
 8029612:	4618      	mov	r0, r3
 8029614:	f000 bb68 	b.w	8029ce8 <__register_exitproc>

08029618 <malloc>:
 8029618:	4b02      	ldr	r3, [pc, #8]	@ (8029624 <malloc+0xc>)
 802961a:	4601      	mov	r1, r0
 802961c:	6818      	ldr	r0, [r3, #0]
 802961e:	f000 b82d 	b.w	802967c <_malloc_r>
 8029622:	bf00      	nop
 8029624:	240000e8 	.word	0x240000e8

08029628 <free>:
 8029628:	4b02      	ldr	r3, [pc, #8]	@ (8029634 <free+0xc>)
 802962a:	4601      	mov	r1, r0
 802962c:	6818      	ldr	r0, [r3, #0]
 802962e:	f000 bbb7 	b.w	8029da0 <_free_r>
 8029632:	bf00      	nop
 8029634:	240000e8 	.word	0x240000e8

08029638 <sbrk_aligned>:
 8029638:	b570      	push	{r4, r5, r6, lr}
 802963a:	4e0f      	ldr	r6, [pc, #60]	@ (8029678 <sbrk_aligned+0x40>)
 802963c:	460c      	mov	r4, r1
 802963e:	6831      	ldr	r1, [r6, #0]
 8029640:	4605      	mov	r5, r0
 8029642:	b911      	cbnz	r1, 802964a <sbrk_aligned+0x12>
 8029644:	f000 faf2 	bl	8029c2c <_sbrk_r>
 8029648:	6030      	str	r0, [r6, #0]
 802964a:	4621      	mov	r1, r4
 802964c:	4628      	mov	r0, r5
 802964e:	f000 faed 	bl	8029c2c <_sbrk_r>
 8029652:	1c43      	adds	r3, r0, #1
 8029654:	d103      	bne.n	802965e <sbrk_aligned+0x26>
 8029656:	f04f 34ff 	mov.w	r4, #4294967295
 802965a:	4620      	mov	r0, r4
 802965c:	bd70      	pop	{r4, r5, r6, pc}
 802965e:	1cc4      	adds	r4, r0, #3
 8029660:	f024 0403 	bic.w	r4, r4, #3
 8029664:	42a0      	cmp	r0, r4
 8029666:	d0f8      	beq.n	802965a <sbrk_aligned+0x22>
 8029668:	1a21      	subs	r1, r4, r0
 802966a:	4628      	mov	r0, r5
 802966c:	f000 fade 	bl	8029c2c <_sbrk_r>
 8029670:	3001      	adds	r0, #1
 8029672:	d1f2      	bne.n	802965a <sbrk_aligned+0x22>
 8029674:	e7ef      	b.n	8029656 <sbrk_aligned+0x1e>
 8029676:	bf00      	nop
 8029678:	24062bf4 	.word	0x24062bf4

0802967c <_malloc_r>:
 802967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029680:	1ccd      	adds	r5, r1, #3
 8029682:	f025 0503 	bic.w	r5, r5, #3
 8029686:	3508      	adds	r5, #8
 8029688:	2d0c      	cmp	r5, #12
 802968a:	bf38      	it	cc
 802968c:	250c      	movcc	r5, #12
 802968e:	2d00      	cmp	r5, #0
 8029690:	4606      	mov	r6, r0
 8029692:	db01      	blt.n	8029698 <_malloc_r+0x1c>
 8029694:	42a9      	cmp	r1, r5
 8029696:	d904      	bls.n	80296a2 <_malloc_r+0x26>
 8029698:	230c      	movs	r3, #12
 802969a:	6033      	str	r3, [r6, #0]
 802969c:	2000      	movs	r0, #0
 802969e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80296a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8029778 <_malloc_r+0xfc>
 80296a6:	f000 f869 	bl	802977c <__malloc_lock>
 80296aa:	f8d8 3000 	ldr.w	r3, [r8]
 80296ae:	461c      	mov	r4, r3
 80296b0:	bb44      	cbnz	r4, 8029704 <_malloc_r+0x88>
 80296b2:	4629      	mov	r1, r5
 80296b4:	4630      	mov	r0, r6
 80296b6:	f7ff ffbf 	bl	8029638 <sbrk_aligned>
 80296ba:	1c43      	adds	r3, r0, #1
 80296bc:	4604      	mov	r4, r0
 80296be:	d158      	bne.n	8029772 <_malloc_r+0xf6>
 80296c0:	f8d8 4000 	ldr.w	r4, [r8]
 80296c4:	4627      	mov	r7, r4
 80296c6:	2f00      	cmp	r7, #0
 80296c8:	d143      	bne.n	8029752 <_malloc_r+0xd6>
 80296ca:	2c00      	cmp	r4, #0
 80296cc:	d04b      	beq.n	8029766 <_malloc_r+0xea>
 80296ce:	6823      	ldr	r3, [r4, #0]
 80296d0:	4639      	mov	r1, r7
 80296d2:	4630      	mov	r0, r6
 80296d4:	eb04 0903 	add.w	r9, r4, r3
 80296d8:	f000 faa8 	bl	8029c2c <_sbrk_r>
 80296dc:	4581      	cmp	r9, r0
 80296de:	d142      	bne.n	8029766 <_malloc_r+0xea>
 80296e0:	6821      	ldr	r1, [r4, #0]
 80296e2:	1a6d      	subs	r5, r5, r1
 80296e4:	4629      	mov	r1, r5
 80296e6:	4630      	mov	r0, r6
 80296e8:	f7ff ffa6 	bl	8029638 <sbrk_aligned>
 80296ec:	3001      	adds	r0, #1
 80296ee:	d03a      	beq.n	8029766 <_malloc_r+0xea>
 80296f0:	6823      	ldr	r3, [r4, #0]
 80296f2:	442b      	add	r3, r5
 80296f4:	6023      	str	r3, [r4, #0]
 80296f6:	f8d8 3000 	ldr.w	r3, [r8]
 80296fa:	685a      	ldr	r2, [r3, #4]
 80296fc:	bb62      	cbnz	r2, 8029758 <_malloc_r+0xdc>
 80296fe:	f8c8 7000 	str.w	r7, [r8]
 8029702:	e00f      	b.n	8029724 <_malloc_r+0xa8>
 8029704:	6822      	ldr	r2, [r4, #0]
 8029706:	1b52      	subs	r2, r2, r5
 8029708:	d420      	bmi.n	802974c <_malloc_r+0xd0>
 802970a:	2a0b      	cmp	r2, #11
 802970c:	d917      	bls.n	802973e <_malloc_r+0xc2>
 802970e:	1961      	adds	r1, r4, r5
 8029710:	42a3      	cmp	r3, r4
 8029712:	6025      	str	r5, [r4, #0]
 8029714:	bf18      	it	ne
 8029716:	6059      	strne	r1, [r3, #4]
 8029718:	6863      	ldr	r3, [r4, #4]
 802971a:	bf08      	it	eq
 802971c:	f8c8 1000 	streq.w	r1, [r8]
 8029720:	5162      	str	r2, [r4, r5]
 8029722:	604b      	str	r3, [r1, #4]
 8029724:	4630      	mov	r0, r6
 8029726:	f000 f82f 	bl	8029788 <__malloc_unlock>
 802972a:	f104 000b 	add.w	r0, r4, #11
 802972e:	1d23      	adds	r3, r4, #4
 8029730:	f020 0007 	bic.w	r0, r0, #7
 8029734:	1ac2      	subs	r2, r0, r3
 8029736:	bf1c      	itt	ne
 8029738:	1a1b      	subne	r3, r3, r0
 802973a:	50a3      	strne	r3, [r4, r2]
 802973c:	e7af      	b.n	802969e <_malloc_r+0x22>
 802973e:	6862      	ldr	r2, [r4, #4]
 8029740:	42a3      	cmp	r3, r4
 8029742:	bf0c      	ite	eq
 8029744:	f8c8 2000 	streq.w	r2, [r8]
 8029748:	605a      	strne	r2, [r3, #4]
 802974a:	e7eb      	b.n	8029724 <_malloc_r+0xa8>
 802974c:	4623      	mov	r3, r4
 802974e:	6864      	ldr	r4, [r4, #4]
 8029750:	e7ae      	b.n	80296b0 <_malloc_r+0x34>
 8029752:	463c      	mov	r4, r7
 8029754:	687f      	ldr	r7, [r7, #4]
 8029756:	e7b6      	b.n	80296c6 <_malloc_r+0x4a>
 8029758:	461a      	mov	r2, r3
 802975a:	685b      	ldr	r3, [r3, #4]
 802975c:	42a3      	cmp	r3, r4
 802975e:	d1fb      	bne.n	8029758 <_malloc_r+0xdc>
 8029760:	2300      	movs	r3, #0
 8029762:	6053      	str	r3, [r2, #4]
 8029764:	e7de      	b.n	8029724 <_malloc_r+0xa8>
 8029766:	230c      	movs	r3, #12
 8029768:	6033      	str	r3, [r6, #0]
 802976a:	4630      	mov	r0, r6
 802976c:	f000 f80c 	bl	8029788 <__malloc_unlock>
 8029770:	e794      	b.n	802969c <_malloc_r+0x20>
 8029772:	6005      	str	r5, [r0, #0]
 8029774:	e7d6      	b.n	8029724 <_malloc_r+0xa8>
 8029776:	bf00      	nop
 8029778:	24062bf8 	.word	0x24062bf8

0802977c <__malloc_lock>:
 802977c:	4801      	ldr	r0, [pc, #4]	@ (8029784 <__malloc_lock+0x8>)
 802977e:	f000 baa2 	b.w	8029cc6 <__retarget_lock_acquire_recursive>
 8029782:	bf00      	nop
 8029784:	24062d3c 	.word	0x24062d3c

08029788 <__malloc_unlock>:
 8029788:	4801      	ldr	r0, [pc, #4]	@ (8029790 <__malloc_unlock+0x8>)
 802978a:	f000 ba9d 	b.w	8029cc8 <__retarget_lock_release_recursive>
 802978e:	bf00      	nop
 8029790:	24062d3c 	.word	0x24062d3c

08029794 <__cxa_atexit>:
 8029794:	b510      	push	{r4, lr}
 8029796:	4604      	mov	r4, r0
 8029798:	4804      	ldr	r0, [pc, #16]	@ (80297ac <__cxa_atexit+0x18>)
 802979a:	4613      	mov	r3, r2
 802979c:	b120      	cbz	r0, 80297a8 <__cxa_atexit+0x14>
 802979e:	460a      	mov	r2, r1
 80297a0:	2002      	movs	r0, #2
 80297a2:	4621      	mov	r1, r4
 80297a4:	f000 faa0 	bl	8029ce8 <__register_exitproc>
 80297a8:	bd10      	pop	{r4, pc}
 80297aa:	bf00      	nop
 80297ac:	08029ce9 	.word	0x08029ce9

080297b0 <std>:
 80297b0:	2300      	movs	r3, #0
 80297b2:	b510      	push	{r4, lr}
 80297b4:	4604      	mov	r4, r0
 80297b6:	e9c0 3300 	strd	r3, r3, [r0]
 80297ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80297be:	6083      	str	r3, [r0, #8]
 80297c0:	8181      	strh	r1, [r0, #12]
 80297c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80297c4:	81c2      	strh	r2, [r0, #14]
 80297c6:	6183      	str	r3, [r0, #24]
 80297c8:	4619      	mov	r1, r3
 80297ca:	2208      	movs	r2, #8
 80297cc:	305c      	adds	r0, #92	@ 0x5c
 80297ce:	f000 f99b 	bl	8029b08 <memset>
 80297d2:	4b0d      	ldr	r3, [pc, #52]	@ (8029808 <std+0x58>)
 80297d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80297d6:	4b0d      	ldr	r3, [pc, #52]	@ (802980c <std+0x5c>)
 80297d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80297da:	4b0d      	ldr	r3, [pc, #52]	@ (8029810 <std+0x60>)
 80297dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80297de:	4b0d      	ldr	r3, [pc, #52]	@ (8029814 <std+0x64>)
 80297e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80297e2:	4b0d      	ldr	r3, [pc, #52]	@ (8029818 <std+0x68>)
 80297e4:	6224      	str	r4, [r4, #32]
 80297e6:	429c      	cmp	r4, r3
 80297e8:	d006      	beq.n	80297f8 <std+0x48>
 80297ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80297ee:	4294      	cmp	r4, r2
 80297f0:	d002      	beq.n	80297f8 <std+0x48>
 80297f2:	33d0      	adds	r3, #208	@ 0xd0
 80297f4:	429c      	cmp	r4, r3
 80297f6:	d105      	bne.n	8029804 <std+0x54>
 80297f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80297fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029800:	f000 ba60 	b.w	8029cc4 <__retarget_lock_init_recursive>
 8029804:	bd10      	pop	{r4, pc}
 8029806:	bf00      	nop
 8029808:	08029959 	.word	0x08029959
 802980c:	0802997b 	.word	0x0802997b
 8029810:	080299b3 	.word	0x080299b3
 8029814:	080299d7 	.word	0x080299d7
 8029818:	24062bfc 	.word	0x24062bfc

0802981c <stdio_exit_handler>:
 802981c:	4a02      	ldr	r2, [pc, #8]	@ (8029828 <stdio_exit_handler+0xc>)
 802981e:	4903      	ldr	r1, [pc, #12]	@ (802982c <stdio_exit_handler+0x10>)
 8029820:	4803      	ldr	r0, [pc, #12]	@ (8029830 <stdio_exit_handler+0x14>)
 8029822:	f000 b87b 	b.w	802991c <_fwalk_sglue>
 8029826:	bf00      	nop
 8029828:	240000dc 	.word	0x240000dc
 802982c:	0802a4dd 	.word	0x0802a4dd
 8029830:	240000ec 	.word	0x240000ec

08029834 <cleanup_stdio>:
 8029834:	6841      	ldr	r1, [r0, #4]
 8029836:	4b0c      	ldr	r3, [pc, #48]	@ (8029868 <cleanup_stdio+0x34>)
 8029838:	4299      	cmp	r1, r3
 802983a:	b510      	push	{r4, lr}
 802983c:	4604      	mov	r4, r0
 802983e:	d001      	beq.n	8029844 <cleanup_stdio+0x10>
 8029840:	f000 fe4c 	bl	802a4dc <_fflush_r>
 8029844:	68a1      	ldr	r1, [r4, #8]
 8029846:	4b09      	ldr	r3, [pc, #36]	@ (802986c <cleanup_stdio+0x38>)
 8029848:	4299      	cmp	r1, r3
 802984a:	d002      	beq.n	8029852 <cleanup_stdio+0x1e>
 802984c:	4620      	mov	r0, r4
 802984e:	f000 fe45 	bl	802a4dc <_fflush_r>
 8029852:	68e1      	ldr	r1, [r4, #12]
 8029854:	4b06      	ldr	r3, [pc, #24]	@ (8029870 <cleanup_stdio+0x3c>)
 8029856:	4299      	cmp	r1, r3
 8029858:	d004      	beq.n	8029864 <cleanup_stdio+0x30>
 802985a:	4620      	mov	r0, r4
 802985c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029860:	f000 be3c 	b.w	802a4dc <_fflush_r>
 8029864:	bd10      	pop	{r4, pc}
 8029866:	bf00      	nop
 8029868:	24062bfc 	.word	0x24062bfc
 802986c:	24062c64 	.word	0x24062c64
 8029870:	24062ccc 	.word	0x24062ccc

08029874 <global_stdio_init.part.0>:
 8029874:	b510      	push	{r4, lr}
 8029876:	4b0b      	ldr	r3, [pc, #44]	@ (80298a4 <global_stdio_init.part.0+0x30>)
 8029878:	4c0b      	ldr	r4, [pc, #44]	@ (80298a8 <global_stdio_init.part.0+0x34>)
 802987a:	4a0c      	ldr	r2, [pc, #48]	@ (80298ac <global_stdio_init.part.0+0x38>)
 802987c:	601a      	str	r2, [r3, #0]
 802987e:	4620      	mov	r0, r4
 8029880:	2200      	movs	r2, #0
 8029882:	2104      	movs	r1, #4
 8029884:	f7ff ff94 	bl	80297b0 <std>
 8029888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802988c:	2201      	movs	r2, #1
 802988e:	2109      	movs	r1, #9
 8029890:	f7ff ff8e 	bl	80297b0 <std>
 8029894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029898:	2202      	movs	r2, #2
 802989a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802989e:	2112      	movs	r1, #18
 80298a0:	f7ff bf86 	b.w	80297b0 <std>
 80298a4:	24062d34 	.word	0x24062d34
 80298a8:	24062bfc 	.word	0x24062bfc
 80298ac:	0802981d 	.word	0x0802981d

080298b0 <__sfp_lock_acquire>:
 80298b0:	4801      	ldr	r0, [pc, #4]	@ (80298b8 <__sfp_lock_acquire+0x8>)
 80298b2:	f000 ba08 	b.w	8029cc6 <__retarget_lock_acquire_recursive>
 80298b6:	bf00      	nop
 80298b8:	24062d3e 	.word	0x24062d3e

080298bc <__sfp_lock_release>:
 80298bc:	4801      	ldr	r0, [pc, #4]	@ (80298c4 <__sfp_lock_release+0x8>)
 80298be:	f000 ba03 	b.w	8029cc8 <__retarget_lock_release_recursive>
 80298c2:	bf00      	nop
 80298c4:	24062d3e 	.word	0x24062d3e

080298c8 <__sinit>:
 80298c8:	b510      	push	{r4, lr}
 80298ca:	4604      	mov	r4, r0
 80298cc:	f7ff fff0 	bl	80298b0 <__sfp_lock_acquire>
 80298d0:	6a23      	ldr	r3, [r4, #32]
 80298d2:	b11b      	cbz	r3, 80298dc <__sinit+0x14>
 80298d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80298d8:	f7ff bff0 	b.w	80298bc <__sfp_lock_release>
 80298dc:	4b04      	ldr	r3, [pc, #16]	@ (80298f0 <__sinit+0x28>)
 80298de:	6223      	str	r3, [r4, #32]
 80298e0:	4b04      	ldr	r3, [pc, #16]	@ (80298f4 <__sinit+0x2c>)
 80298e2:	681b      	ldr	r3, [r3, #0]
 80298e4:	2b00      	cmp	r3, #0
 80298e6:	d1f5      	bne.n	80298d4 <__sinit+0xc>
 80298e8:	f7ff ffc4 	bl	8029874 <global_stdio_init.part.0>
 80298ec:	e7f2      	b.n	80298d4 <__sinit+0xc>
 80298ee:	bf00      	nop
 80298f0:	08029835 	.word	0x08029835
 80298f4:	24062d34 	.word	0x24062d34

080298f8 <fiprintf>:
 80298f8:	b40e      	push	{r1, r2, r3}
 80298fa:	b503      	push	{r0, r1, lr}
 80298fc:	4601      	mov	r1, r0
 80298fe:	ab03      	add	r3, sp, #12
 8029900:	4805      	ldr	r0, [pc, #20]	@ (8029918 <fiprintf+0x20>)
 8029902:	f853 2b04 	ldr.w	r2, [r3], #4
 8029906:	6800      	ldr	r0, [r0, #0]
 8029908:	9301      	str	r3, [sp, #4]
 802990a:	f000 fabd 	bl	8029e88 <_vfiprintf_r>
 802990e:	b002      	add	sp, #8
 8029910:	f85d eb04 	ldr.w	lr, [sp], #4
 8029914:	b003      	add	sp, #12
 8029916:	4770      	bx	lr
 8029918:	240000e8 	.word	0x240000e8

0802991c <_fwalk_sglue>:
 802991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029920:	4607      	mov	r7, r0
 8029922:	4688      	mov	r8, r1
 8029924:	4614      	mov	r4, r2
 8029926:	2600      	movs	r6, #0
 8029928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802992c:	f1b9 0901 	subs.w	r9, r9, #1
 8029930:	d505      	bpl.n	802993e <_fwalk_sglue+0x22>
 8029932:	6824      	ldr	r4, [r4, #0]
 8029934:	2c00      	cmp	r4, #0
 8029936:	d1f7      	bne.n	8029928 <_fwalk_sglue+0xc>
 8029938:	4630      	mov	r0, r6
 802993a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802993e:	89ab      	ldrh	r3, [r5, #12]
 8029940:	2b01      	cmp	r3, #1
 8029942:	d907      	bls.n	8029954 <_fwalk_sglue+0x38>
 8029944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029948:	3301      	adds	r3, #1
 802994a:	d003      	beq.n	8029954 <_fwalk_sglue+0x38>
 802994c:	4629      	mov	r1, r5
 802994e:	4638      	mov	r0, r7
 8029950:	47c0      	blx	r8
 8029952:	4306      	orrs	r6, r0
 8029954:	3568      	adds	r5, #104	@ 0x68
 8029956:	e7e9      	b.n	802992c <_fwalk_sglue+0x10>

08029958 <__sread>:
 8029958:	b510      	push	{r4, lr}
 802995a:	460c      	mov	r4, r1
 802995c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029960:	f000 f93e 	bl	8029be0 <_read_r>
 8029964:	2800      	cmp	r0, #0
 8029966:	bfab      	itete	ge
 8029968:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802996a:	89a3      	ldrhlt	r3, [r4, #12]
 802996c:	181b      	addge	r3, r3, r0
 802996e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8029972:	bfac      	ite	ge
 8029974:	6563      	strge	r3, [r4, #84]	@ 0x54
 8029976:	81a3      	strhlt	r3, [r4, #12]
 8029978:	bd10      	pop	{r4, pc}

0802997a <__swrite>:
 802997a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802997e:	461f      	mov	r7, r3
 8029980:	898b      	ldrh	r3, [r1, #12]
 8029982:	05db      	lsls	r3, r3, #23
 8029984:	4605      	mov	r5, r0
 8029986:	460c      	mov	r4, r1
 8029988:	4616      	mov	r6, r2
 802998a:	d505      	bpl.n	8029998 <__swrite+0x1e>
 802998c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029990:	2302      	movs	r3, #2
 8029992:	2200      	movs	r2, #0
 8029994:	f000 f912 	bl	8029bbc <_lseek_r>
 8029998:	89a3      	ldrh	r3, [r4, #12]
 802999a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802999e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80299a2:	81a3      	strh	r3, [r4, #12]
 80299a4:	4632      	mov	r2, r6
 80299a6:	463b      	mov	r3, r7
 80299a8:	4628      	mov	r0, r5
 80299aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80299ae:	f000 b94d 	b.w	8029c4c <_write_r>

080299b2 <__sseek>:
 80299b2:	b510      	push	{r4, lr}
 80299b4:	460c      	mov	r4, r1
 80299b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80299ba:	f000 f8ff 	bl	8029bbc <_lseek_r>
 80299be:	1c43      	adds	r3, r0, #1
 80299c0:	89a3      	ldrh	r3, [r4, #12]
 80299c2:	bf15      	itete	ne
 80299c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80299c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80299ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80299ce:	81a3      	strheq	r3, [r4, #12]
 80299d0:	bf18      	it	ne
 80299d2:	81a3      	strhne	r3, [r4, #12]
 80299d4:	bd10      	pop	{r4, pc}

080299d6 <__sclose>:
 80299d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80299da:	f000 b8df 	b.w	8029b9c <_close_r>

080299de <__swbuf_r>:
 80299de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80299e0:	460e      	mov	r6, r1
 80299e2:	4614      	mov	r4, r2
 80299e4:	4605      	mov	r5, r0
 80299e6:	b118      	cbz	r0, 80299f0 <__swbuf_r+0x12>
 80299e8:	6a03      	ldr	r3, [r0, #32]
 80299ea:	b90b      	cbnz	r3, 80299f0 <__swbuf_r+0x12>
 80299ec:	f7ff ff6c 	bl	80298c8 <__sinit>
 80299f0:	69a3      	ldr	r3, [r4, #24]
 80299f2:	60a3      	str	r3, [r4, #8]
 80299f4:	89a3      	ldrh	r3, [r4, #12]
 80299f6:	071a      	lsls	r2, r3, #28
 80299f8:	d501      	bpl.n	80299fe <__swbuf_r+0x20>
 80299fa:	6923      	ldr	r3, [r4, #16]
 80299fc:	b943      	cbnz	r3, 8029a10 <__swbuf_r+0x32>
 80299fe:	4621      	mov	r1, r4
 8029a00:	4628      	mov	r0, r5
 8029a02:	f000 f82b 	bl	8029a5c <__swsetup_r>
 8029a06:	b118      	cbz	r0, 8029a10 <__swbuf_r+0x32>
 8029a08:	f04f 37ff 	mov.w	r7, #4294967295
 8029a0c:	4638      	mov	r0, r7
 8029a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029a10:	6823      	ldr	r3, [r4, #0]
 8029a12:	6922      	ldr	r2, [r4, #16]
 8029a14:	1a98      	subs	r0, r3, r2
 8029a16:	6963      	ldr	r3, [r4, #20]
 8029a18:	b2f6      	uxtb	r6, r6
 8029a1a:	4283      	cmp	r3, r0
 8029a1c:	4637      	mov	r7, r6
 8029a1e:	dc05      	bgt.n	8029a2c <__swbuf_r+0x4e>
 8029a20:	4621      	mov	r1, r4
 8029a22:	4628      	mov	r0, r5
 8029a24:	f000 fd5a 	bl	802a4dc <_fflush_r>
 8029a28:	2800      	cmp	r0, #0
 8029a2a:	d1ed      	bne.n	8029a08 <__swbuf_r+0x2a>
 8029a2c:	68a3      	ldr	r3, [r4, #8]
 8029a2e:	3b01      	subs	r3, #1
 8029a30:	60a3      	str	r3, [r4, #8]
 8029a32:	6823      	ldr	r3, [r4, #0]
 8029a34:	1c5a      	adds	r2, r3, #1
 8029a36:	6022      	str	r2, [r4, #0]
 8029a38:	701e      	strb	r6, [r3, #0]
 8029a3a:	6962      	ldr	r2, [r4, #20]
 8029a3c:	1c43      	adds	r3, r0, #1
 8029a3e:	429a      	cmp	r2, r3
 8029a40:	d004      	beq.n	8029a4c <__swbuf_r+0x6e>
 8029a42:	89a3      	ldrh	r3, [r4, #12]
 8029a44:	07db      	lsls	r3, r3, #31
 8029a46:	d5e1      	bpl.n	8029a0c <__swbuf_r+0x2e>
 8029a48:	2e0a      	cmp	r6, #10
 8029a4a:	d1df      	bne.n	8029a0c <__swbuf_r+0x2e>
 8029a4c:	4621      	mov	r1, r4
 8029a4e:	4628      	mov	r0, r5
 8029a50:	f000 fd44 	bl	802a4dc <_fflush_r>
 8029a54:	2800      	cmp	r0, #0
 8029a56:	d0d9      	beq.n	8029a0c <__swbuf_r+0x2e>
 8029a58:	e7d6      	b.n	8029a08 <__swbuf_r+0x2a>
	...

08029a5c <__swsetup_r>:
 8029a5c:	b538      	push	{r3, r4, r5, lr}
 8029a5e:	4b29      	ldr	r3, [pc, #164]	@ (8029b04 <__swsetup_r+0xa8>)
 8029a60:	4605      	mov	r5, r0
 8029a62:	6818      	ldr	r0, [r3, #0]
 8029a64:	460c      	mov	r4, r1
 8029a66:	b118      	cbz	r0, 8029a70 <__swsetup_r+0x14>
 8029a68:	6a03      	ldr	r3, [r0, #32]
 8029a6a:	b90b      	cbnz	r3, 8029a70 <__swsetup_r+0x14>
 8029a6c:	f7ff ff2c 	bl	80298c8 <__sinit>
 8029a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029a74:	0719      	lsls	r1, r3, #28
 8029a76:	d422      	bmi.n	8029abe <__swsetup_r+0x62>
 8029a78:	06da      	lsls	r2, r3, #27
 8029a7a:	d407      	bmi.n	8029a8c <__swsetup_r+0x30>
 8029a7c:	2209      	movs	r2, #9
 8029a7e:	602a      	str	r2, [r5, #0]
 8029a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029a84:	81a3      	strh	r3, [r4, #12]
 8029a86:	f04f 30ff 	mov.w	r0, #4294967295
 8029a8a:	e033      	b.n	8029af4 <__swsetup_r+0x98>
 8029a8c:	0758      	lsls	r0, r3, #29
 8029a8e:	d512      	bpl.n	8029ab6 <__swsetup_r+0x5a>
 8029a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029a92:	b141      	cbz	r1, 8029aa6 <__swsetup_r+0x4a>
 8029a94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029a98:	4299      	cmp	r1, r3
 8029a9a:	d002      	beq.n	8029aa2 <__swsetup_r+0x46>
 8029a9c:	4628      	mov	r0, r5
 8029a9e:	f000 f97f 	bl	8029da0 <_free_r>
 8029aa2:	2300      	movs	r3, #0
 8029aa4:	6363      	str	r3, [r4, #52]	@ 0x34
 8029aa6:	89a3      	ldrh	r3, [r4, #12]
 8029aa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029aac:	81a3      	strh	r3, [r4, #12]
 8029aae:	2300      	movs	r3, #0
 8029ab0:	6063      	str	r3, [r4, #4]
 8029ab2:	6923      	ldr	r3, [r4, #16]
 8029ab4:	6023      	str	r3, [r4, #0]
 8029ab6:	89a3      	ldrh	r3, [r4, #12]
 8029ab8:	f043 0308 	orr.w	r3, r3, #8
 8029abc:	81a3      	strh	r3, [r4, #12]
 8029abe:	6923      	ldr	r3, [r4, #16]
 8029ac0:	b94b      	cbnz	r3, 8029ad6 <__swsetup_r+0x7a>
 8029ac2:	89a3      	ldrh	r3, [r4, #12]
 8029ac4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8029acc:	d003      	beq.n	8029ad6 <__swsetup_r+0x7a>
 8029ace:	4621      	mov	r1, r4
 8029ad0:	4628      	mov	r0, r5
 8029ad2:	f000 fd51 	bl	802a578 <__smakebuf_r>
 8029ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029ada:	f013 0201 	ands.w	r2, r3, #1
 8029ade:	d00a      	beq.n	8029af6 <__swsetup_r+0x9a>
 8029ae0:	2200      	movs	r2, #0
 8029ae2:	60a2      	str	r2, [r4, #8]
 8029ae4:	6962      	ldr	r2, [r4, #20]
 8029ae6:	4252      	negs	r2, r2
 8029ae8:	61a2      	str	r2, [r4, #24]
 8029aea:	6922      	ldr	r2, [r4, #16]
 8029aec:	b942      	cbnz	r2, 8029b00 <__swsetup_r+0xa4>
 8029aee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8029af2:	d1c5      	bne.n	8029a80 <__swsetup_r+0x24>
 8029af4:	bd38      	pop	{r3, r4, r5, pc}
 8029af6:	0799      	lsls	r1, r3, #30
 8029af8:	bf58      	it	pl
 8029afa:	6962      	ldrpl	r2, [r4, #20]
 8029afc:	60a2      	str	r2, [r4, #8]
 8029afe:	e7f4      	b.n	8029aea <__swsetup_r+0x8e>
 8029b00:	2000      	movs	r0, #0
 8029b02:	e7f7      	b.n	8029af4 <__swsetup_r+0x98>
 8029b04:	240000e8 	.word	0x240000e8

08029b08 <memset>:
 8029b08:	4402      	add	r2, r0
 8029b0a:	4603      	mov	r3, r0
 8029b0c:	4293      	cmp	r3, r2
 8029b0e:	d100      	bne.n	8029b12 <memset+0xa>
 8029b10:	4770      	bx	lr
 8029b12:	f803 1b01 	strb.w	r1, [r3], #1
 8029b16:	e7f9      	b.n	8029b0c <memset+0x4>

08029b18 <strncmp>:
 8029b18:	b510      	push	{r4, lr}
 8029b1a:	b16a      	cbz	r2, 8029b38 <strncmp+0x20>
 8029b1c:	3901      	subs	r1, #1
 8029b1e:	1884      	adds	r4, r0, r2
 8029b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029b24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8029b28:	429a      	cmp	r2, r3
 8029b2a:	d103      	bne.n	8029b34 <strncmp+0x1c>
 8029b2c:	42a0      	cmp	r0, r4
 8029b2e:	d001      	beq.n	8029b34 <strncmp+0x1c>
 8029b30:	2a00      	cmp	r2, #0
 8029b32:	d1f5      	bne.n	8029b20 <strncmp+0x8>
 8029b34:	1ad0      	subs	r0, r2, r3
 8029b36:	bd10      	pop	{r4, pc}
 8029b38:	4610      	mov	r0, r2
 8029b3a:	e7fc      	b.n	8029b36 <strncmp+0x1e>

08029b3c <_raise_r>:
 8029b3c:	291f      	cmp	r1, #31
 8029b3e:	b538      	push	{r3, r4, r5, lr}
 8029b40:	4605      	mov	r5, r0
 8029b42:	460c      	mov	r4, r1
 8029b44:	d904      	bls.n	8029b50 <_raise_r+0x14>
 8029b46:	2316      	movs	r3, #22
 8029b48:	6003      	str	r3, [r0, #0]
 8029b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8029b4e:	bd38      	pop	{r3, r4, r5, pc}
 8029b50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8029b52:	b112      	cbz	r2, 8029b5a <_raise_r+0x1e>
 8029b54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029b58:	b94b      	cbnz	r3, 8029b6e <_raise_r+0x32>
 8029b5a:	4628      	mov	r0, r5
 8029b5c:	f000 f864 	bl	8029c28 <_getpid_r>
 8029b60:	4622      	mov	r2, r4
 8029b62:	4601      	mov	r1, r0
 8029b64:	4628      	mov	r0, r5
 8029b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029b6a:	f000 b84b 	b.w	8029c04 <_kill_r>
 8029b6e:	2b01      	cmp	r3, #1
 8029b70:	d00a      	beq.n	8029b88 <_raise_r+0x4c>
 8029b72:	1c59      	adds	r1, r3, #1
 8029b74:	d103      	bne.n	8029b7e <_raise_r+0x42>
 8029b76:	2316      	movs	r3, #22
 8029b78:	6003      	str	r3, [r0, #0]
 8029b7a:	2001      	movs	r0, #1
 8029b7c:	e7e7      	b.n	8029b4e <_raise_r+0x12>
 8029b7e:	2100      	movs	r1, #0
 8029b80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8029b84:	4620      	mov	r0, r4
 8029b86:	4798      	blx	r3
 8029b88:	2000      	movs	r0, #0
 8029b8a:	e7e0      	b.n	8029b4e <_raise_r+0x12>

08029b8c <raise>:
 8029b8c:	4b02      	ldr	r3, [pc, #8]	@ (8029b98 <raise+0xc>)
 8029b8e:	4601      	mov	r1, r0
 8029b90:	6818      	ldr	r0, [r3, #0]
 8029b92:	f7ff bfd3 	b.w	8029b3c <_raise_r>
 8029b96:	bf00      	nop
 8029b98:	240000e8 	.word	0x240000e8

08029b9c <_close_r>:
 8029b9c:	b538      	push	{r3, r4, r5, lr}
 8029b9e:	4d06      	ldr	r5, [pc, #24]	@ (8029bb8 <_close_r+0x1c>)
 8029ba0:	2300      	movs	r3, #0
 8029ba2:	4604      	mov	r4, r0
 8029ba4:	4608      	mov	r0, r1
 8029ba6:	602b      	str	r3, [r5, #0]
 8029ba8:	f7d7 fe96 	bl	80018d8 <_close>
 8029bac:	1c43      	adds	r3, r0, #1
 8029bae:	d102      	bne.n	8029bb6 <_close_r+0x1a>
 8029bb0:	682b      	ldr	r3, [r5, #0]
 8029bb2:	b103      	cbz	r3, 8029bb6 <_close_r+0x1a>
 8029bb4:	6023      	str	r3, [r4, #0]
 8029bb6:	bd38      	pop	{r3, r4, r5, pc}
 8029bb8:	24062d38 	.word	0x24062d38

08029bbc <_lseek_r>:
 8029bbc:	b538      	push	{r3, r4, r5, lr}
 8029bbe:	4d07      	ldr	r5, [pc, #28]	@ (8029bdc <_lseek_r+0x20>)
 8029bc0:	4604      	mov	r4, r0
 8029bc2:	4608      	mov	r0, r1
 8029bc4:	4611      	mov	r1, r2
 8029bc6:	2200      	movs	r2, #0
 8029bc8:	602a      	str	r2, [r5, #0]
 8029bca:	461a      	mov	r2, r3
 8029bcc:	f7d7 fe8e 	bl	80018ec <_lseek>
 8029bd0:	1c43      	adds	r3, r0, #1
 8029bd2:	d102      	bne.n	8029bda <_lseek_r+0x1e>
 8029bd4:	682b      	ldr	r3, [r5, #0]
 8029bd6:	b103      	cbz	r3, 8029bda <_lseek_r+0x1e>
 8029bd8:	6023      	str	r3, [r4, #0]
 8029bda:	bd38      	pop	{r3, r4, r5, pc}
 8029bdc:	24062d38 	.word	0x24062d38

08029be0 <_read_r>:
 8029be0:	b538      	push	{r3, r4, r5, lr}
 8029be2:	4d07      	ldr	r5, [pc, #28]	@ (8029c00 <_read_r+0x20>)
 8029be4:	4604      	mov	r4, r0
 8029be6:	4608      	mov	r0, r1
 8029be8:	4611      	mov	r1, r2
 8029bea:	2200      	movs	r2, #0
 8029bec:	602a      	str	r2, [r5, #0]
 8029bee:	461a      	mov	r2, r3
 8029bf0:	f7d7 fe58 	bl	80018a4 <_read>
 8029bf4:	1c43      	adds	r3, r0, #1
 8029bf6:	d102      	bne.n	8029bfe <_read_r+0x1e>
 8029bf8:	682b      	ldr	r3, [r5, #0]
 8029bfa:	b103      	cbz	r3, 8029bfe <_read_r+0x1e>
 8029bfc:	6023      	str	r3, [r4, #0]
 8029bfe:	bd38      	pop	{r3, r4, r5, pc}
 8029c00:	24062d38 	.word	0x24062d38

08029c04 <_kill_r>:
 8029c04:	b538      	push	{r3, r4, r5, lr}
 8029c06:	4d07      	ldr	r5, [pc, #28]	@ (8029c24 <_kill_r+0x20>)
 8029c08:	2300      	movs	r3, #0
 8029c0a:	4604      	mov	r4, r0
 8029c0c:	4608      	mov	r0, r1
 8029c0e:	4611      	mov	r1, r2
 8029c10:	602b      	str	r3, [r5, #0]
 8029c12:	f7d7 fe39 	bl	8001888 <_kill>
 8029c16:	1c43      	adds	r3, r0, #1
 8029c18:	d102      	bne.n	8029c20 <_kill_r+0x1c>
 8029c1a:	682b      	ldr	r3, [r5, #0]
 8029c1c:	b103      	cbz	r3, 8029c20 <_kill_r+0x1c>
 8029c1e:	6023      	str	r3, [r4, #0]
 8029c20:	bd38      	pop	{r3, r4, r5, pc}
 8029c22:	bf00      	nop
 8029c24:	24062d38 	.word	0x24062d38

08029c28 <_getpid_r>:
 8029c28:	f7d7 be2c 	b.w	8001884 <_getpid>

08029c2c <_sbrk_r>:
 8029c2c:	b538      	push	{r3, r4, r5, lr}
 8029c2e:	4d06      	ldr	r5, [pc, #24]	@ (8029c48 <_sbrk_r+0x1c>)
 8029c30:	2300      	movs	r3, #0
 8029c32:	4604      	mov	r4, r0
 8029c34:	4608      	mov	r0, r1
 8029c36:	602b      	str	r3, [r5, #0]
 8029c38:	f7d7 fe5a 	bl	80018f0 <_sbrk>
 8029c3c:	1c43      	adds	r3, r0, #1
 8029c3e:	d102      	bne.n	8029c46 <_sbrk_r+0x1a>
 8029c40:	682b      	ldr	r3, [r5, #0]
 8029c42:	b103      	cbz	r3, 8029c46 <_sbrk_r+0x1a>
 8029c44:	6023      	str	r3, [r4, #0]
 8029c46:	bd38      	pop	{r3, r4, r5, pc}
 8029c48:	24062d38 	.word	0x24062d38

08029c4c <_write_r>:
 8029c4c:	b538      	push	{r3, r4, r5, lr}
 8029c4e:	4d07      	ldr	r5, [pc, #28]	@ (8029c6c <_write_r+0x20>)
 8029c50:	4604      	mov	r4, r0
 8029c52:	4608      	mov	r0, r1
 8029c54:	4611      	mov	r1, r2
 8029c56:	2200      	movs	r2, #0
 8029c58:	602a      	str	r2, [r5, #0]
 8029c5a:	461a      	mov	r2, r3
 8029c5c:	f7d7 fe2f 	bl	80018be <_write>
 8029c60:	1c43      	adds	r3, r0, #1
 8029c62:	d102      	bne.n	8029c6a <_write_r+0x1e>
 8029c64:	682b      	ldr	r3, [r5, #0]
 8029c66:	b103      	cbz	r3, 8029c6a <_write_r+0x1e>
 8029c68:	6023      	str	r3, [r4, #0]
 8029c6a:	bd38      	pop	{r3, r4, r5, pc}
 8029c6c:	24062d38 	.word	0x24062d38

08029c70 <__errno>:
 8029c70:	4b01      	ldr	r3, [pc, #4]	@ (8029c78 <__errno+0x8>)
 8029c72:	6818      	ldr	r0, [r3, #0]
 8029c74:	4770      	bx	lr
 8029c76:	bf00      	nop
 8029c78:	240000e8 	.word	0x240000e8

08029c7c <__libc_init_array>:
 8029c7c:	b570      	push	{r4, r5, r6, lr}
 8029c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8029cb4 <__libc_init_array+0x38>)
 8029c80:	4c0d      	ldr	r4, [pc, #52]	@ (8029cb8 <__libc_init_array+0x3c>)
 8029c82:	1b64      	subs	r4, r4, r5
 8029c84:	10a4      	asrs	r4, r4, #2
 8029c86:	2600      	movs	r6, #0
 8029c88:	42a6      	cmp	r6, r4
 8029c8a:	d109      	bne.n	8029ca0 <__libc_init_array+0x24>
 8029c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8029cbc <__libc_init_array+0x40>)
 8029c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8029cc0 <__libc_init_array+0x44>)
 8029c90:	f000 fcd0 	bl	802a634 <_init>
 8029c94:	1b64      	subs	r4, r4, r5
 8029c96:	10a4      	asrs	r4, r4, #2
 8029c98:	2600      	movs	r6, #0
 8029c9a:	42a6      	cmp	r6, r4
 8029c9c:	d105      	bne.n	8029caa <__libc_init_array+0x2e>
 8029c9e:	bd70      	pop	{r4, r5, r6, pc}
 8029ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8029ca4:	4798      	blx	r3
 8029ca6:	3601      	adds	r6, #1
 8029ca8:	e7ee      	b.n	8029c88 <__libc_init_array+0xc>
 8029caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8029cae:	4798      	blx	r3
 8029cb0:	3601      	adds	r6, #1
 8029cb2:	e7f2      	b.n	8029c9a <__libc_init_array+0x1e>
 8029cb4:	080328dc 	.word	0x080328dc
 8029cb8:	080328dc 	.word	0x080328dc
 8029cbc:	080328dc 	.word	0x080328dc
 8029cc0:	080328fc 	.word	0x080328fc

08029cc4 <__retarget_lock_init_recursive>:
 8029cc4:	4770      	bx	lr

08029cc6 <__retarget_lock_acquire_recursive>:
 8029cc6:	4770      	bx	lr

08029cc8 <__retarget_lock_release_recursive>:
 8029cc8:	4770      	bx	lr

08029cca <memcpy>:
 8029cca:	440a      	add	r2, r1
 8029ccc:	4291      	cmp	r1, r2
 8029cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8029cd2:	d100      	bne.n	8029cd6 <memcpy+0xc>
 8029cd4:	4770      	bx	lr
 8029cd6:	b510      	push	{r4, lr}
 8029cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029ce0:	4291      	cmp	r1, r2
 8029ce2:	d1f9      	bne.n	8029cd8 <memcpy+0xe>
 8029ce4:	bd10      	pop	{r4, pc}
	...

08029ce8 <__register_exitproc>:
 8029ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029cec:	4d27      	ldr	r5, [pc, #156]	@ (8029d8c <__register_exitproc+0xa4>)
 8029cee:	4607      	mov	r7, r0
 8029cf0:	6828      	ldr	r0, [r5, #0]
 8029cf2:	4691      	mov	r9, r2
 8029cf4:	460e      	mov	r6, r1
 8029cf6:	4698      	mov	r8, r3
 8029cf8:	f7ff ffe5 	bl	8029cc6 <__retarget_lock_acquire_recursive>
 8029cfc:	4a24      	ldr	r2, [pc, #144]	@ (8029d90 <__register_exitproc+0xa8>)
 8029cfe:	6814      	ldr	r4, [r2, #0]
 8029d00:	b93c      	cbnz	r4, 8029d12 <__register_exitproc+0x2a>
 8029d02:	4b24      	ldr	r3, [pc, #144]	@ (8029d94 <__register_exitproc+0xac>)
 8029d04:	6013      	str	r3, [r2, #0]
 8029d06:	4a24      	ldr	r2, [pc, #144]	@ (8029d98 <__register_exitproc+0xb0>)
 8029d08:	b112      	cbz	r2, 8029d10 <__register_exitproc+0x28>
 8029d0a:	6812      	ldr	r2, [r2, #0]
 8029d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8029d10:	4c20      	ldr	r4, [pc, #128]	@ (8029d94 <__register_exitproc+0xac>)
 8029d12:	6863      	ldr	r3, [r4, #4]
 8029d14:	2b1f      	cmp	r3, #31
 8029d16:	dd06      	ble.n	8029d26 <__register_exitproc+0x3e>
 8029d18:	6828      	ldr	r0, [r5, #0]
 8029d1a:	f7ff ffd5 	bl	8029cc8 <__retarget_lock_release_recursive>
 8029d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8029d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029d26:	b32f      	cbz	r7, 8029d74 <__register_exitproc+0x8c>
 8029d28:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8029d2c:	b968      	cbnz	r0, 8029d4a <__register_exitproc+0x62>
 8029d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8029d9c <__register_exitproc+0xb4>)
 8029d30:	2b00      	cmp	r3, #0
 8029d32:	d0f1      	beq.n	8029d18 <__register_exitproc+0x30>
 8029d34:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8029d38:	f7ff fc6e 	bl	8029618 <malloc>
 8029d3c:	2800      	cmp	r0, #0
 8029d3e:	d0eb      	beq.n	8029d18 <__register_exitproc+0x30>
 8029d40:	2300      	movs	r3, #0
 8029d42:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8029d46:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8029d4a:	6863      	ldr	r3, [r4, #4]
 8029d4c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029d50:	2201      	movs	r2, #1
 8029d52:	409a      	lsls	r2, r3
 8029d54:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029d58:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8029d5c:	4313      	orrs	r3, r2
 8029d5e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8029d62:	2f02      	cmp	r7, #2
 8029d64:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8029d68:	bf02      	ittt	eq
 8029d6a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8029d6e:	4313      	orreq	r3, r2
 8029d70:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8029d74:	6863      	ldr	r3, [r4, #4]
 8029d76:	6828      	ldr	r0, [r5, #0]
 8029d78:	1c5a      	adds	r2, r3, #1
 8029d7a:	3302      	adds	r3, #2
 8029d7c:	6062      	str	r2, [r4, #4]
 8029d7e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8029d82:	f7ff ffa1 	bl	8029cc8 <__retarget_lock_release_recursive>
 8029d86:	2000      	movs	r0, #0
 8029d88:	e7cb      	b.n	8029d22 <__register_exitproc+0x3a>
 8029d8a:	bf00      	nop
 8029d8c:	24000138 	.word	0x24000138
 8029d90:	24062dcc 	.word	0x24062dcc
 8029d94:	24062d40 	.word	0x24062d40
 8029d98:	0802e97c 	.word	0x0802e97c
 8029d9c:	08029619 	.word	0x08029619

08029da0 <_free_r>:
 8029da0:	b538      	push	{r3, r4, r5, lr}
 8029da2:	4605      	mov	r5, r0
 8029da4:	2900      	cmp	r1, #0
 8029da6:	d041      	beq.n	8029e2c <_free_r+0x8c>
 8029da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029dac:	1f0c      	subs	r4, r1, #4
 8029dae:	2b00      	cmp	r3, #0
 8029db0:	bfb8      	it	lt
 8029db2:	18e4      	addlt	r4, r4, r3
 8029db4:	f7ff fce2 	bl	802977c <__malloc_lock>
 8029db8:	4a1d      	ldr	r2, [pc, #116]	@ (8029e30 <_free_r+0x90>)
 8029dba:	6813      	ldr	r3, [r2, #0]
 8029dbc:	b933      	cbnz	r3, 8029dcc <_free_r+0x2c>
 8029dbe:	6063      	str	r3, [r4, #4]
 8029dc0:	6014      	str	r4, [r2, #0]
 8029dc2:	4628      	mov	r0, r5
 8029dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029dc8:	f7ff bcde 	b.w	8029788 <__malloc_unlock>
 8029dcc:	42a3      	cmp	r3, r4
 8029dce:	d908      	bls.n	8029de2 <_free_r+0x42>
 8029dd0:	6820      	ldr	r0, [r4, #0]
 8029dd2:	1821      	adds	r1, r4, r0
 8029dd4:	428b      	cmp	r3, r1
 8029dd6:	bf01      	itttt	eq
 8029dd8:	6819      	ldreq	r1, [r3, #0]
 8029dda:	685b      	ldreq	r3, [r3, #4]
 8029ddc:	1809      	addeq	r1, r1, r0
 8029dde:	6021      	streq	r1, [r4, #0]
 8029de0:	e7ed      	b.n	8029dbe <_free_r+0x1e>
 8029de2:	461a      	mov	r2, r3
 8029de4:	685b      	ldr	r3, [r3, #4]
 8029de6:	b10b      	cbz	r3, 8029dec <_free_r+0x4c>
 8029de8:	42a3      	cmp	r3, r4
 8029dea:	d9fa      	bls.n	8029de2 <_free_r+0x42>
 8029dec:	6811      	ldr	r1, [r2, #0]
 8029dee:	1850      	adds	r0, r2, r1
 8029df0:	42a0      	cmp	r0, r4
 8029df2:	d10b      	bne.n	8029e0c <_free_r+0x6c>
 8029df4:	6820      	ldr	r0, [r4, #0]
 8029df6:	4401      	add	r1, r0
 8029df8:	1850      	adds	r0, r2, r1
 8029dfa:	4283      	cmp	r3, r0
 8029dfc:	6011      	str	r1, [r2, #0]
 8029dfe:	d1e0      	bne.n	8029dc2 <_free_r+0x22>
 8029e00:	6818      	ldr	r0, [r3, #0]
 8029e02:	685b      	ldr	r3, [r3, #4]
 8029e04:	6053      	str	r3, [r2, #4]
 8029e06:	4408      	add	r0, r1
 8029e08:	6010      	str	r0, [r2, #0]
 8029e0a:	e7da      	b.n	8029dc2 <_free_r+0x22>
 8029e0c:	d902      	bls.n	8029e14 <_free_r+0x74>
 8029e0e:	230c      	movs	r3, #12
 8029e10:	602b      	str	r3, [r5, #0]
 8029e12:	e7d6      	b.n	8029dc2 <_free_r+0x22>
 8029e14:	6820      	ldr	r0, [r4, #0]
 8029e16:	1821      	adds	r1, r4, r0
 8029e18:	428b      	cmp	r3, r1
 8029e1a:	bf04      	itt	eq
 8029e1c:	6819      	ldreq	r1, [r3, #0]
 8029e1e:	685b      	ldreq	r3, [r3, #4]
 8029e20:	6063      	str	r3, [r4, #4]
 8029e22:	bf04      	itt	eq
 8029e24:	1809      	addeq	r1, r1, r0
 8029e26:	6021      	streq	r1, [r4, #0]
 8029e28:	6054      	str	r4, [r2, #4]
 8029e2a:	e7ca      	b.n	8029dc2 <_free_r+0x22>
 8029e2c:	bd38      	pop	{r3, r4, r5, pc}
 8029e2e:	bf00      	nop
 8029e30:	24062bf8 	.word	0x24062bf8

08029e34 <__sfputc_r>:
 8029e34:	6893      	ldr	r3, [r2, #8]
 8029e36:	3b01      	subs	r3, #1
 8029e38:	2b00      	cmp	r3, #0
 8029e3a:	b410      	push	{r4}
 8029e3c:	6093      	str	r3, [r2, #8]
 8029e3e:	da08      	bge.n	8029e52 <__sfputc_r+0x1e>
 8029e40:	6994      	ldr	r4, [r2, #24]
 8029e42:	42a3      	cmp	r3, r4
 8029e44:	db01      	blt.n	8029e4a <__sfputc_r+0x16>
 8029e46:	290a      	cmp	r1, #10
 8029e48:	d103      	bne.n	8029e52 <__sfputc_r+0x1e>
 8029e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029e4e:	f7ff bdc6 	b.w	80299de <__swbuf_r>
 8029e52:	6813      	ldr	r3, [r2, #0]
 8029e54:	1c58      	adds	r0, r3, #1
 8029e56:	6010      	str	r0, [r2, #0]
 8029e58:	7019      	strb	r1, [r3, #0]
 8029e5a:	4608      	mov	r0, r1
 8029e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029e60:	4770      	bx	lr

08029e62 <__sfputs_r>:
 8029e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029e64:	4606      	mov	r6, r0
 8029e66:	460f      	mov	r7, r1
 8029e68:	4614      	mov	r4, r2
 8029e6a:	18d5      	adds	r5, r2, r3
 8029e6c:	42ac      	cmp	r4, r5
 8029e6e:	d101      	bne.n	8029e74 <__sfputs_r+0x12>
 8029e70:	2000      	movs	r0, #0
 8029e72:	e007      	b.n	8029e84 <__sfputs_r+0x22>
 8029e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029e78:	463a      	mov	r2, r7
 8029e7a:	4630      	mov	r0, r6
 8029e7c:	f7ff ffda 	bl	8029e34 <__sfputc_r>
 8029e80:	1c43      	adds	r3, r0, #1
 8029e82:	d1f3      	bne.n	8029e6c <__sfputs_r+0xa>
 8029e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029e88 <_vfiprintf_r>:
 8029e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e8c:	460d      	mov	r5, r1
 8029e8e:	b09d      	sub	sp, #116	@ 0x74
 8029e90:	4614      	mov	r4, r2
 8029e92:	4698      	mov	r8, r3
 8029e94:	4606      	mov	r6, r0
 8029e96:	b118      	cbz	r0, 8029ea0 <_vfiprintf_r+0x18>
 8029e98:	6a03      	ldr	r3, [r0, #32]
 8029e9a:	b90b      	cbnz	r3, 8029ea0 <_vfiprintf_r+0x18>
 8029e9c:	f7ff fd14 	bl	80298c8 <__sinit>
 8029ea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029ea2:	07d9      	lsls	r1, r3, #31
 8029ea4:	d405      	bmi.n	8029eb2 <_vfiprintf_r+0x2a>
 8029ea6:	89ab      	ldrh	r3, [r5, #12]
 8029ea8:	059a      	lsls	r2, r3, #22
 8029eaa:	d402      	bmi.n	8029eb2 <_vfiprintf_r+0x2a>
 8029eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029eae:	f7ff ff0a 	bl	8029cc6 <__retarget_lock_acquire_recursive>
 8029eb2:	89ab      	ldrh	r3, [r5, #12]
 8029eb4:	071b      	lsls	r3, r3, #28
 8029eb6:	d501      	bpl.n	8029ebc <_vfiprintf_r+0x34>
 8029eb8:	692b      	ldr	r3, [r5, #16]
 8029eba:	b99b      	cbnz	r3, 8029ee4 <_vfiprintf_r+0x5c>
 8029ebc:	4629      	mov	r1, r5
 8029ebe:	4630      	mov	r0, r6
 8029ec0:	f7ff fdcc 	bl	8029a5c <__swsetup_r>
 8029ec4:	b170      	cbz	r0, 8029ee4 <_vfiprintf_r+0x5c>
 8029ec6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029ec8:	07dc      	lsls	r4, r3, #31
 8029eca:	d504      	bpl.n	8029ed6 <_vfiprintf_r+0x4e>
 8029ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8029ed0:	b01d      	add	sp, #116	@ 0x74
 8029ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ed6:	89ab      	ldrh	r3, [r5, #12]
 8029ed8:	0598      	lsls	r0, r3, #22
 8029eda:	d4f7      	bmi.n	8029ecc <_vfiprintf_r+0x44>
 8029edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029ede:	f7ff fef3 	bl	8029cc8 <__retarget_lock_release_recursive>
 8029ee2:	e7f3      	b.n	8029ecc <_vfiprintf_r+0x44>
 8029ee4:	2300      	movs	r3, #0
 8029ee6:	9309      	str	r3, [sp, #36]	@ 0x24
 8029ee8:	2320      	movs	r3, #32
 8029eea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8029eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8029ef2:	2330      	movs	r3, #48	@ 0x30
 8029ef4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802a0a4 <_vfiprintf_r+0x21c>
 8029ef8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029efc:	f04f 0901 	mov.w	r9, #1
 8029f00:	4623      	mov	r3, r4
 8029f02:	469a      	mov	sl, r3
 8029f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029f08:	b10a      	cbz	r2, 8029f0e <_vfiprintf_r+0x86>
 8029f0a:	2a25      	cmp	r2, #37	@ 0x25
 8029f0c:	d1f9      	bne.n	8029f02 <_vfiprintf_r+0x7a>
 8029f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8029f12:	d00b      	beq.n	8029f2c <_vfiprintf_r+0xa4>
 8029f14:	465b      	mov	r3, fp
 8029f16:	4622      	mov	r2, r4
 8029f18:	4629      	mov	r1, r5
 8029f1a:	4630      	mov	r0, r6
 8029f1c:	f7ff ffa1 	bl	8029e62 <__sfputs_r>
 8029f20:	3001      	adds	r0, #1
 8029f22:	f000 80a7 	beq.w	802a074 <_vfiprintf_r+0x1ec>
 8029f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029f28:	445a      	add	r2, fp
 8029f2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8029f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8029f30:	2b00      	cmp	r3, #0
 8029f32:	f000 809f 	beq.w	802a074 <_vfiprintf_r+0x1ec>
 8029f36:	2300      	movs	r3, #0
 8029f38:	f04f 32ff 	mov.w	r2, #4294967295
 8029f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029f40:	f10a 0a01 	add.w	sl, sl, #1
 8029f44:	9304      	str	r3, [sp, #16]
 8029f46:	9307      	str	r3, [sp, #28]
 8029f48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029f4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8029f4e:	4654      	mov	r4, sl
 8029f50:	2205      	movs	r2, #5
 8029f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029f56:	4853      	ldr	r0, [pc, #332]	@ (802a0a4 <_vfiprintf_r+0x21c>)
 8029f58:	f7d6 f9c2 	bl	80002e0 <memchr>
 8029f5c:	9a04      	ldr	r2, [sp, #16]
 8029f5e:	b9d8      	cbnz	r0, 8029f98 <_vfiprintf_r+0x110>
 8029f60:	06d1      	lsls	r1, r2, #27
 8029f62:	bf44      	itt	mi
 8029f64:	2320      	movmi	r3, #32
 8029f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029f6a:	0713      	lsls	r3, r2, #28
 8029f6c:	bf44      	itt	mi
 8029f6e:	232b      	movmi	r3, #43	@ 0x2b
 8029f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029f74:	f89a 3000 	ldrb.w	r3, [sl]
 8029f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8029f7a:	d015      	beq.n	8029fa8 <_vfiprintf_r+0x120>
 8029f7c:	9a07      	ldr	r2, [sp, #28]
 8029f7e:	4654      	mov	r4, sl
 8029f80:	2000      	movs	r0, #0
 8029f82:	f04f 0c0a 	mov.w	ip, #10
 8029f86:	4621      	mov	r1, r4
 8029f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029f8c:	3b30      	subs	r3, #48	@ 0x30
 8029f8e:	2b09      	cmp	r3, #9
 8029f90:	d94b      	bls.n	802a02a <_vfiprintf_r+0x1a2>
 8029f92:	b1b0      	cbz	r0, 8029fc2 <_vfiprintf_r+0x13a>
 8029f94:	9207      	str	r2, [sp, #28]
 8029f96:	e014      	b.n	8029fc2 <_vfiprintf_r+0x13a>
 8029f98:	eba0 0308 	sub.w	r3, r0, r8
 8029f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8029fa0:	4313      	orrs	r3, r2
 8029fa2:	9304      	str	r3, [sp, #16]
 8029fa4:	46a2      	mov	sl, r4
 8029fa6:	e7d2      	b.n	8029f4e <_vfiprintf_r+0xc6>
 8029fa8:	9b03      	ldr	r3, [sp, #12]
 8029faa:	1d19      	adds	r1, r3, #4
 8029fac:	681b      	ldr	r3, [r3, #0]
 8029fae:	9103      	str	r1, [sp, #12]
 8029fb0:	2b00      	cmp	r3, #0
 8029fb2:	bfbb      	ittet	lt
 8029fb4:	425b      	neglt	r3, r3
 8029fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8029fba:	9307      	strge	r3, [sp, #28]
 8029fbc:	9307      	strlt	r3, [sp, #28]
 8029fbe:	bfb8      	it	lt
 8029fc0:	9204      	strlt	r2, [sp, #16]
 8029fc2:	7823      	ldrb	r3, [r4, #0]
 8029fc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8029fc6:	d10a      	bne.n	8029fde <_vfiprintf_r+0x156>
 8029fc8:	7863      	ldrb	r3, [r4, #1]
 8029fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8029fcc:	d132      	bne.n	802a034 <_vfiprintf_r+0x1ac>
 8029fce:	9b03      	ldr	r3, [sp, #12]
 8029fd0:	1d1a      	adds	r2, r3, #4
 8029fd2:	681b      	ldr	r3, [r3, #0]
 8029fd4:	9203      	str	r2, [sp, #12]
 8029fd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8029fda:	3402      	adds	r4, #2
 8029fdc:	9305      	str	r3, [sp, #20]
 8029fde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802a0b4 <_vfiprintf_r+0x22c>
 8029fe2:	7821      	ldrb	r1, [r4, #0]
 8029fe4:	2203      	movs	r2, #3
 8029fe6:	4650      	mov	r0, sl
 8029fe8:	f7d6 f97a 	bl	80002e0 <memchr>
 8029fec:	b138      	cbz	r0, 8029ffe <_vfiprintf_r+0x176>
 8029fee:	9b04      	ldr	r3, [sp, #16]
 8029ff0:	eba0 000a 	sub.w	r0, r0, sl
 8029ff4:	2240      	movs	r2, #64	@ 0x40
 8029ff6:	4082      	lsls	r2, r0
 8029ff8:	4313      	orrs	r3, r2
 8029ffa:	3401      	adds	r4, #1
 8029ffc:	9304      	str	r3, [sp, #16]
 8029ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a002:	4829      	ldr	r0, [pc, #164]	@ (802a0a8 <_vfiprintf_r+0x220>)
 802a004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802a008:	2206      	movs	r2, #6
 802a00a:	f7d6 f969 	bl	80002e0 <memchr>
 802a00e:	2800      	cmp	r0, #0
 802a010:	d03f      	beq.n	802a092 <_vfiprintf_r+0x20a>
 802a012:	4b26      	ldr	r3, [pc, #152]	@ (802a0ac <_vfiprintf_r+0x224>)
 802a014:	bb1b      	cbnz	r3, 802a05e <_vfiprintf_r+0x1d6>
 802a016:	9b03      	ldr	r3, [sp, #12]
 802a018:	3307      	adds	r3, #7
 802a01a:	f023 0307 	bic.w	r3, r3, #7
 802a01e:	3308      	adds	r3, #8
 802a020:	9303      	str	r3, [sp, #12]
 802a022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a024:	443b      	add	r3, r7
 802a026:	9309      	str	r3, [sp, #36]	@ 0x24
 802a028:	e76a      	b.n	8029f00 <_vfiprintf_r+0x78>
 802a02a:	fb0c 3202 	mla	r2, ip, r2, r3
 802a02e:	460c      	mov	r4, r1
 802a030:	2001      	movs	r0, #1
 802a032:	e7a8      	b.n	8029f86 <_vfiprintf_r+0xfe>
 802a034:	2300      	movs	r3, #0
 802a036:	3401      	adds	r4, #1
 802a038:	9305      	str	r3, [sp, #20]
 802a03a:	4619      	mov	r1, r3
 802a03c:	f04f 0c0a 	mov.w	ip, #10
 802a040:	4620      	mov	r0, r4
 802a042:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a046:	3a30      	subs	r2, #48	@ 0x30
 802a048:	2a09      	cmp	r2, #9
 802a04a:	d903      	bls.n	802a054 <_vfiprintf_r+0x1cc>
 802a04c:	2b00      	cmp	r3, #0
 802a04e:	d0c6      	beq.n	8029fde <_vfiprintf_r+0x156>
 802a050:	9105      	str	r1, [sp, #20]
 802a052:	e7c4      	b.n	8029fde <_vfiprintf_r+0x156>
 802a054:	fb0c 2101 	mla	r1, ip, r1, r2
 802a058:	4604      	mov	r4, r0
 802a05a:	2301      	movs	r3, #1
 802a05c:	e7f0      	b.n	802a040 <_vfiprintf_r+0x1b8>
 802a05e:	ab03      	add	r3, sp, #12
 802a060:	9300      	str	r3, [sp, #0]
 802a062:	462a      	mov	r2, r5
 802a064:	4b12      	ldr	r3, [pc, #72]	@ (802a0b0 <_vfiprintf_r+0x228>)
 802a066:	a904      	add	r1, sp, #16
 802a068:	4630      	mov	r0, r6
 802a06a:	f3af 8000 	nop.w
 802a06e:	4607      	mov	r7, r0
 802a070:	1c78      	adds	r0, r7, #1
 802a072:	d1d6      	bne.n	802a022 <_vfiprintf_r+0x19a>
 802a074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a076:	07d9      	lsls	r1, r3, #31
 802a078:	d405      	bmi.n	802a086 <_vfiprintf_r+0x1fe>
 802a07a:	89ab      	ldrh	r3, [r5, #12]
 802a07c:	059a      	lsls	r2, r3, #22
 802a07e:	d402      	bmi.n	802a086 <_vfiprintf_r+0x1fe>
 802a080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a082:	f7ff fe21 	bl	8029cc8 <__retarget_lock_release_recursive>
 802a086:	89ab      	ldrh	r3, [r5, #12]
 802a088:	065b      	lsls	r3, r3, #25
 802a08a:	f53f af1f 	bmi.w	8029ecc <_vfiprintf_r+0x44>
 802a08e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a090:	e71e      	b.n	8029ed0 <_vfiprintf_r+0x48>
 802a092:	ab03      	add	r3, sp, #12
 802a094:	9300      	str	r3, [sp, #0]
 802a096:	462a      	mov	r2, r5
 802a098:	4b05      	ldr	r3, [pc, #20]	@ (802a0b0 <_vfiprintf_r+0x228>)
 802a09a:	a904      	add	r1, sp, #16
 802a09c:	4630      	mov	r0, r6
 802a09e:	f000 f879 	bl	802a194 <_printf_i>
 802a0a2:	e7e4      	b.n	802a06e <_vfiprintf_r+0x1e6>
 802a0a4:	0802e980 	.word	0x0802e980
 802a0a8:	0802e98a 	.word	0x0802e98a
 802a0ac:	00000000 	.word	0x00000000
 802a0b0:	08029e63 	.word	0x08029e63
 802a0b4:	0802e986 	.word	0x0802e986

0802a0b8 <_printf_common>:
 802a0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a0bc:	4616      	mov	r6, r2
 802a0be:	4698      	mov	r8, r3
 802a0c0:	688a      	ldr	r2, [r1, #8]
 802a0c2:	690b      	ldr	r3, [r1, #16]
 802a0c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802a0c8:	4293      	cmp	r3, r2
 802a0ca:	bfb8      	it	lt
 802a0cc:	4613      	movlt	r3, r2
 802a0ce:	6033      	str	r3, [r6, #0]
 802a0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802a0d4:	4607      	mov	r7, r0
 802a0d6:	460c      	mov	r4, r1
 802a0d8:	b10a      	cbz	r2, 802a0de <_printf_common+0x26>
 802a0da:	3301      	adds	r3, #1
 802a0dc:	6033      	str	r3, [r6, #0]
 802a0de:	6823      	ldr	r3, [r4, #0]
 802a0e0:	0699      	lsls	r1, r3, #26
 802a0e2:	bf42      	ittt	mi
 802a0e4:	6833      	ldrmi	r3, [r6, #0]
 802a0e6:	3302      	addmi	r3, #2
 802a0e8:	6033      	strmi	r3, [r6, #0]
 802a0ea:	6825      	ldr	r5, [r4, #0]
 802a0ec:	f015 0506 	ands.w	r5, r5, #6
 802a0f0:	d106      	bne.n	802a100 <_printf_common+0x48>
 802a0f2:	f104 0a19 	add.w	sl, r4, #25
 802a0f6:	68e3      	ldr	r3, [r4, #12]
 802a0f8:	6832      	ldr	r2, [r6, #0]
 802a0fa:	1a9b      	subs	r3, r3, r2
 802a0fc:	42ab      	cmp	r3, r5
 802a0fe:	dc26      	bgt.n	802a14e <_printf_common+0x96>
 802a100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802a104:	6822      	ldr	r2, [r4, #0]
 802a106:	3b00      	subs	r3, #0
 802a108:	bf18      	it	ne
 802a10a:	2301      	movne	r3, #1
 802a10c:	0692      	lsls	r2, r2, #26
 802a10e:	d42b      	bmi.n	802a168 <_printf_common+0xb0>
 802a110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802a114:	4641      	mov	r1, r8
 802a116:	4638      	mov	r0, r7
 802a118:	47c8      	blx	r9
 802a11a:	3001      	adds	r0, #1
 802a11c:	d01e      	beq.n	802a15c <_printf_common+0xa4>
 802a11e:	6823      	ldr	r3, [r4, #0]
 802a120:	6922      	ldr	r2, [r4, #16]
 802a122:	f003 0306 	and.w	r3, r3, #6
 802a126:	2b04      	cmp	r3, #4
 802a128:	bf02      	ittt	eq
 802a12a:	68e5      	ldreq	r5, [r4, #12]
 802a12c:	6833      	ldreq	r3, [r6, #0]
 802a12e:	1aed      	subeq	r5, r5, r3
 802a130:	68a3      	ldr	r3, [r4, #8]
 802a132:	bf0c      	ite	eq
 802a134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a138:	2500      	movne	r5, #0
 802a13a:	4293      	cmp	r3, r2
 802a13c:	bfc4      	itt	gt
 802a13e:	1a9b      	subgt	r3, r3, r2
 802a140:	18ed      	addgt	r5, r5, r3
 802a142:	2600      	movs	r6, #0
 802a144:	341a      	adds	r4, #26
 802a146:	42b5      	cmp	r5, r6
 802a148:	d11a      	bne.n	802a180 <_printf_common+0xc8>
 802a14a:	2000      	movs	r0, #0
 802a14c:	e008      	b.n	802a160 <_printf_common+0xa8>
 802a14e:	2301      	movs	r3, #1
 802a150:	4652      	mov	r2, sl
 802a152:	4641      	mov	r1, r8
 802a154:	4638      	mov	r0, r7
 802a156:	47c8      	blx	r9
 802a158:	3001      	adds	r0, #1
 802a15a:	d103      	bne.n	802a164 <_printf_common+0xac>
 802a15c:	f04f 30ff 	mov.w	r0, #4294967295
 802a160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a164:	3501      	adds	r5, #1
 802a166:	e7c6      	b.n	802a0f6 <_printf_common+0x3e>
 802a168:	18e1      	adds	r1, r4, r3
 802a16a:	1c5a      	adds	r2, r3, #1
 802a16c:	2030      	movs	r0, #48	@ 0x30
 802a16e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802a172:	4422      	add	r2, r4
 802a174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802a178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802a17c:	3302      	adds	r3, #2
 802a17e:	e7c7      	b.n	802a110 <_printf_common+0x58>
 802a180:	2301      	movs	r3, #1
 802a182:	4622      	mov	r2, r4
 802a184:	4641      	mov	r1, r8
 802a186:	4638      	mov	r0, r7
 802a188:	47c8      	blx	r9
 802a18a:	3001      	adds	r0, #1
 802a18c:	d0e6      	beq.n	802a15c <_printf_common+0xa4>
 802a18e:	3601      	adds	r6, #1
 802a190:	e7d9      	b.n	802a146 <_printf_common+0x8e>
	...

0802a194 <_printf_i>:
 802a194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a198:	7e0f      	ldrb	r7, [r1, #24]
 802a19a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802a19c:	2f78      	cmp	r7, #120	@ 0x78
 802a19e:	4691      	mov	r9, r2
 802a1a0:	4680      	mov	r8, r0
 802a1a2:	460c      	mov	r4, r1
 802a1a4:	469a      	mov	sl, r3
 802a1a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802a1aa:	d807      	bhi.n	802a1bc <_printf_i+0x28>
 802a1ac:	2f62      	cmp	r7, #98	@ 0x62
 802a1ae:	d80a      	bhi.n	802a1c6 <_printf_i+0x32>
 802a1b0:	2f00      	cmp	r7, #0
 802a1b2:	f000 80d2 	beq.w	802a35a <_printf_i+0x1c6>
 802a1b6:	2f58      	cmp	r7, #88	@ 0x58
 802a1b8:	f000 80b9 	beq.w	802a32e <_printf_i+0x19a>
 802a1bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802a1c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802a1c4:	e03a      	b.n	802a23c <_printf_i+0xa8>
 802a1c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802a1ca:	2b15      	cmp	r3, #21
 802a1cc:	d8f6      	bhi.n	802a1bc <_printf_i+0x28>
 802a1ce:	a101      	add	r1, pc, #4	@ (adr r1, 802a1d4 <_printf_i+0x40>)
 802a1d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802a1d4:	0802a22d 	.word	0x0802a22d
 802a1d8:	0802a241 	.word	0x0802a241
 802a1dc:	0802a1bd 	.word	0x0802a1bd
 802a1e0:	0802a1bd 	.word	0x0802a1bd
 802a1e4:	0802a1bd 	.word	0x0802a1bd
 802a1e8:	0802a1bd 	.word	0x0802a1bd
 802a1ec:	0802a241 	.word	0x0802a241
 802a1f0:	0802a1bd 	.word	0x0802a1bd
 802a1f4:	0802a1bd 	.word	0x0802a1bd
 802a1f8:	0802a1bd 	.word	0x0802a1bd
 802a1fc:	0802a1bd 	.word	0x0802a1bd
 802a200:	0802a341 	.word	0x0802a341
 802a204:	0802a26b 	.word	0x0802a26b
 802a208:	0802a2fb 	.word	0x0802a2fb
 802a20c:	0802a1bd 	.word	0x0802a1bd
 802a210:	0802a1bd 	.word	0x0802a1bd
 802a214:	0802a363 	.word	0x0802a363
 802a218:	0802a1bd 	.word	0x0802a1bd
 802a21c:	0802a26b 	.word	0x0802a26b
 802a220:	0802a1bd 	.word	0x0802a1bd
 802a224:	0802a1bd 	.word	0x0802a1bd
 802a228:	0802a303 	.word	0x0802a303
 802a22c:	6833      	ldr	r3, [r6, #0]
 802a22e:	1d1a      	adds	r2, r3, #4
 802a230:	681b      	ldr	r3, [r3, #0]
 802a232:	6032      	str	r2, [r6, #0]
 802a234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802a238:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802a23c:	2301      	movs	r3, #1
 802a23e:	e09d      	b.n	802a37c <_printf_i+0x1e8>
 802a240:	6833      	ldr	r3, [r6, #0]
 802a242:	6820      	ldr	r0, [r4, #0]
 802a244:	1d19      	adds	r1, r3, #4
 802a246:	6031      	str	r1, [r6, #0]
 802a248:	0606      	lsls	r6, r0, #24
 802a24a:	d501      	bpl.n	802a250 <_printf_i+0xbc>
 802a24c:	681d      	ldr	r5, [r3, #0]
 802a24e:	e003      	b.n	802a258 <_printf_i+0xc4>
 802a250:	0645      	lsls	r5, r0, #25
 802a252:	d5fb      	bpl.n	802a24c <_printf_i+0xb8>
 802a254:	f9b3 5000 	ldrsh.w	r5, [r3]
 802a258:	2d00      	cmp	r5, #0
 802a25a:	da03      	bge.n	802a264 <_printf_i+0xd0>
 802a25c:	232d      	movs	r3, #45	@ 0x2d
 802a25e:	426d      	negs	r5, r5
 802a260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a264:	4859      	ldr	r0, [pc, #356]	@ (802a3cc <_printf_i+0x238>)
 802a266:	230a      	movs	r3, #10
 802a268:	e011      	b.n	802a28e <_printf_i+0xfa>
 802a26a:	6821      	ldr	r1, [r4, #0]
 802a26c:	6833      	ldr	r3, [r6, #0]
 802a26e:	0608      	lsls	r0, r1, #24
 802a270:	f853 5b04 	ldr.w	r5, [r3], #4
 802a274:	d402      	bmi.n	802a27c <_printf_i+0xe8>
 802a276:	0649      	lsls	r1, r1, #25
 802a278:	bf48      	it	mi
 802a27a:	b2ad      	uxthmi	r5, r5
 802a27c:	2f6f      	cmp	r7, #111	@ 0x6f
 802a27e:	4853      	ldr	r0, [pc, #332]	@ (802a3cc <_printf_i+0x238>)
 802a280:	6033      	str	r3, [r6, #0]
 802a282:	bf14      	ite	ne
 802a284:	230a      	movne	r3, #10
 802a286:	2308      	moveq	r3, #8
 802a288:	2100      	movs	r1, #0
 802a28a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802a28e:	6866      	ldr	r6, [r4, #4]
 802a290:	60a6      	str	r6, [r4, #8]
 802a292:	2e00      	cmp	r6, #0
 802a294:	bfa2      	ittt	ge
 802a296:	6821      	ldrge	r1, [r4, #0]
 802a298:	f021 0104 	bicge.w	r1, r1, #4
 802a29c:	6021      	strge	r1, [r4, #0]
 802a29e:	b90d      	cbnz	r5, 802a2a4 <_printf_i+0x110>
 802a2a0:	2e00      	cmp	r6, #0
 802a2a2:	d04b      	beq.n	802a33c <_printf_i+0x1a8>
 802a2a4:	4616      	mov	r6, r2
 802a2a6:	fbb5 f1f3 	udiv	r1, r5, r3
 802a2aa:	fb03 5711 	mls	r7, r3, r1, r5
 802a2ae:	5dc7      	ldrb	r7, [r0, r7]
 802a2b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802a2b4:	462f      	mov	r7, r5
 802a2b6:	42bb      	cmp	r3, r7
 802a2b8:	460d      	mov	r5, r1
 802a2ba:	d9f4      	bls.n	802a2a6 <_printf_i+0x112>
 802a2bc:	2b08      	cmp	r3, #8
 802a2be:	d10b      	bne.n	802a2d8 <_printf_i+0x144>
 802a2c0:	6823      	ldr	r3, [r4, #0]
 802a2c2:	07df      	lsls	r7, r3, #31
 802a2c4:	d508      	bpl.n	802a2d8 <_printf_i+0x144>
 802a2c6:	6923      	ldr	r3, [r4, #16]
 802a2c8:	6861      	ldr	r1, [r4, #4]
 802a2ca:	4299      	cmp	r1, r3
 802a2cc:	bfde      	ittt	le
 802a2ce:	2330      	movle	r3, #48	@ 0x30
 802a2d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 802a2d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 802a2d8:	1b92      	subs	r2, r2, r6
 802a2da:	6122      	str	r2, [r4, #16]
 802a2dc:	f8cd a000 	str.w	sl, [sp]
 802a2e0:	464b      	mov	r3, r9
 802a2e2:	aa03      	add	r2, sp, #12
 802a2e4:	4621      	mov	r1, r4
 802a2e6:	4640      	mov	r0, r8
 802a2e8:	f7ff fee6 	bl	802a0b8 <_printf_common>
 802a2ec:	3001      	adds	r0, #1
 802a2ee:	d14a      	bne.n	802a386 <_printf_i+0x1f2>
 802a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 802a2f4:	b004      	add	sp, #16
 802a2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a2fa:	6823      	ldr	r3, [r4, #0]
 802a2fc:	f043 0320 	orr.w	r3, r3, #32
 802a300:	6023      	str	r3, [r4, #0]
 802a302:	4833      	ldr	r0, [pc, #204]	@ (802a3d0 <_printf_i+0x23c>)
 802a304:	2778      	movs	r7, #120	@ 0x78
 802a306:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802a30a:	6823      	ldr	r3, [r4, #0]
 802a30c:	6831      	ldr	r1, [r6, #0]
 802a30e:	061f      	lsls	r7, r3, #24
 802a310:	f851 5b04 	ldr.w	r5, [r1], #4
 802a314:	d402      	bmi.n	802a31c <_printf_i+0x188>
 802a316:	065f      	lsls	r7, r3, #25
 802a318:	bf48      	it	mi
 802a31a:	b2ad      	uxthmi	r5, r5
 802a31c:	6031      	str	r1, [r6, #0]
 802a31e:	07d9      	lsls	r1, r3, #31
 802a320:	bf44      	itt	mi
 802a322:	f043 0320 	orrmi.w	r3, r3, #32
 802a326:	6023      	strmi	r3, [r4, #0]
 802a328:	b11d      	cbz	r5, 802a332 <_printf_i+0x19e>
 802a32a:	2310      	movs	r3, #16
 802a32c:	e7ac      	b.n	802a288 <_printf_i+0xf4>
 802a32e:	4827      	ldr	r0, [pc, #156]	@ (802a3cc <_printf_i+0x238>)
 802a330:	e7e9      	b.n	802a306 <_printf_i+0x172>
 802a332:	6823      	ldr	r3, [r4, #0]
 802a334:	f023 0320 	bic.w	r3, r3, #32
 802a338:	6023      	str	r3, [r4, #0]
 802a33a:	e7f6      	b.n	802a32a <_printf_i+0x196>
 802a33c:	4616      	mov	r6, r2
 802a33e:	e7bd      	b.n	802a2bc <_printf_i+0x128>
 802a340:	6833      	ldr	r3, [r6, #0]
 802a342:	6825      	ldr	r5, [r4, #0]
 802a344:	6961      	ldr	r1, [r4, #20]
 802a346:	1d18      	adds	r0, r3, #4
 802a348:	6030      	str	r0, [r6, #0]
 802a34a:	062e      	lsls	r6, r5, #24
 802a34c:	681b      	ldr	r3, [r3, #0]
 802a34e:	d501      	bpl.n	802a354 <_printf_i+0x1c0>
 802a350:	6019      	str	r1, [r3, #0]
 802a352:	e002      	b.n	802a35a <_printf_i+0x1c6>
 802a354:	0668      	lsls	r0, r5, #25
 802a356:	d5fb      	bpl.n	802a350 <_printf_i+0x1bc>
 802a358:	8019      	strh	r1, [r3, #0]
 802a35a:	2300      	movs	r3, #0
 802a35c:	6123      	str	r3, [r4, #16]
 802a35e:	4616      	mov	r6, r2
 802a360:	e7bc      	b.n	802a2dc <_printf_i+0x148>
 802a362:	6833      	ldr	r3, [r6, #0]
 802a364:	1d1a      	adds	r2, r3, #4
 802a366:	6032      	str	r2, [r6, #0]
 802a368:	681e      	ldr	r6, [r3, #0]
 802a36a:	6862      	ldr	r2, [r4, #4]
 802a36c:	2100      	movs	r1, #0
 802a36e:	4630      	mov	r0, r6
 802a370:	f7d5 ffb6 	bl	80002e0 <memchr>
 802a374:	b108      	cbz	r0, 802a37a <_printf_i+0x1e6>
 802a376:	1b80      	subs	r0, r0, r6
 802a378:	6060      	str	r0, [r4, #4]
 802a37a:	6863      	ldr	r3, [r4, #4]
 802a37c:	6123      	str	r3, [r4, #16]
 802a37e:	2300      	movs	r3, #0
 802a380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a384:	e7aa      	b.n	802a2dc <_printf_i+0x148>
 802a386:	6923      	ldr	r3, [r4, #16]
 802a388:	4632      	mov	r2, r6
 802a38a:	4649      	mov	r1, r9
 802a38c:	4640      	mov	r0, r8
 802a38e:	47d0      	blx	sl
 802a390:	3001      	adds	r0, #1
 802a392:	d0ad      	beq.n	802a2f0 <_printf_i+0x15c>
 802a394:	6823      	ldr	r3, [r4, #0]
 802a396:	079b      	lsls	r3, r3, #30
 802a398:	d413      	bmi.n	802a3c2 <_printf_i+0x22e>
 802a39a:	68e0      	ldr	r0, [r4, #12]
 802a39c:	9b03      	ldr	r3, [sp, #12]
 802a39e:	4298      	cmp	r0, r3
 802a3a0:	bfb8      	it	lt
 802a3a2:	4618      	movlt	r0, r3
 802a3a4:	e7a6      	b.n	802a2f4 <_printf_i+0x160>
 802a3a6:	2301      	movs	r3, #1
 802a3a8:	4632      	mov	r2, r6
 802a3aa:	4649      	mov	r1, r9
 802a3ac:	4640      	mov	r0, r8
 802a3ae:	47d0      	blx	sl
 802a3b0:	3001      	adds	r0, #1
 802a3b2:	d09d      	beq.n	802a2f0 <_printf_i+0x15c>
 802a3b4:	3501      	adds	r5, #1
 802a3b6:	68e3      	ldr	r3, [r4, #12]
 802a3b8:	9903      	ldr	r1, [sp, #12]
 802a3ba:	1a5b      	subs	r3, r3, r1
 802a3bc:	42ab      	cmp	r3, r5
 802a3be:	dcf2      	bgt.n	802a3a6 <_printf_i+0x212>
 802a3c0:	e7eb      	b.n	802a39a <_printf_i+0x206>
 802a3c2:	2500      	movs	r5, #0
 802a3c4:	f104 0619 	add.w	r6, r4, #25
 802a3c8:	e7f5      	b.n	802a3b6 <_printf_i+0x222>
 802a3ca:	bf00      	nop
 802a3cc:	0802e991 	.word	0x0802e991
 802a3d0:	0802e9a2 	.word	0x0802e9a2

0802a3d4 <__sflush_r>:
 802a3d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a3dc:	0716      	lsls	r6, r2, #28
 802a3de:	4605      	mov	r5, r0
 802a3e0:	460c      	mov	r4, r1
 802a3e2:	d454      	bmi.n	802a48e <__sflush_r+0xba>
 802a3e4:	684b      	ldr	r3, [r1, #4]
 802a3e6:	2b00      	cmp	r3, #0
 802a3e8:	dc02      	bgt.n	802a3f0 <__sflush_r+0x1c>
 802a3ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802a3ec:	2b00      	cmp	r3, #0
 802a3ee:	dd48      	ble.n	802a482 <__sflush_r+0xae>
 802a3f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a3f2:	2e00      	cmp	r6, #0
 802a3f4:	d045      	beq.n	802a482 <__sflush_r+0xae>
 802a3f6:	2300      	movs	r3, #0
 802a3f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802a3fc:	682f      	ldr	r7, [r5, #0]
 802a3fe:	6a21      	ldr	r1, [r4, #32]
 802a400:	602b      	str	r3, [r5, #0]
 802a402:	d030      	beq.n	802a466 <__sflush_r+0x92>
 802a404:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802a406:	89a3      	ldrh	r3, [r4, #12]
 802a408:	0759      	lsls	r1, r3, #29
 802a40a:	d505      	bpl.n	802a418 <__sflush_r+0x44>
 802a40c:	6863      	ldr	r3, [r4, #4]
 802a40e:	1ad2      	subs	r2, r2, r3
 802a410:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802a412:	b10b      	cbz	r3, 802a418 <__sflush_r+0x44>
 802a414:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802a416:	1ad2      	subs	r2, r2, r3
 802a418:	2300      	movs	r3, #0
 802a41a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a41c:	6a21      	ldr	r1, [r4, #32]
 802a41e:	4628      	mov	r0, r5
 802a420:	47b0      	blx	r6
 802a422:	1c43      	adds	r3, r0, #1
 802a424:	89a3      	ldrh	r3, [r4, #12]
 802a426:	d106      	bne.n	802a436 <__sflush_r+0x62>
 802a428:	6829      	ldr	r1, [r5, #0]
 802a42a:	291d      	cmp	r1, #29
 802a42c:	d82b      	bhi.n	802a486 <__sflush_r+0xb2>
 802a42e:	4a2a      	ldr	r2, [pc, #168]	@ (802a4d8 <__sflush_r+0x104>)
 802a430:	410a      	asrs	r2, r1
 802a432:	07d6      	lsls	r6, r2, #31
 802a434:	d427      	bmi.n	802a486 <__sflush_r+0xb2>
 802a436:	2200      	movs	r2, #0
 802a438:	6062      	str	r2, [r4, #4]
 802a43a:	04d9      	lsls	r1, r3, #19
 802a43c:	6922      	ldr	r2, [r4, #16]
 802a43e:	6022      	str	r2, [r4, #0]
 802a440:	d504      	bpl.n	802a44c <__sflush_r+0x78>
 802a442:	1c42      	adds	r2, r0, #1
 802a444:	d101      	bne.n	802a44a <__sflush_r+0x76>
 802a446:	682b      	ldr	r3, [r5, #0]
 802a448:	b903      	cbnz	r3, 802a44c <__sflush_r+0x78>
 802a44a:	6560      	str	r0, [r4, #84]	@ 0x54
 802a44c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a44e:	602f      	str	r7, [r5, #0]
 802a450:	b1b9      	cbz	r1, 802a482 <__sflush_r+0xae>
 802a452:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a456:	4299      	cmp	r1, r3
 802a458:	d002      	beq.n	802a460 <__sflush_r+0x8c>
 802a45a:	4628      	mov	r0, r5
 802a45c:	f7ff fca0 	bl	8029da0 <_free_r>
 802a460:	2300      	movs	r3, #0
 802a462:	6363      	str	r3, [r4, #52]	@ 0x34
 802a464:	e00d      	b.n	802a482 <__sflush_r+0xae>
 802a466:	2301      	movs	r3, #1
 802a468:	4628      	mov	r0, r5
 802a46a:	47b0      	blx	r6
 802a46c:	4602      	mov	r2, r0
 802a46e:	1c50      	adds	r0, r2, #1
 802a470:	d1c9      	bne.n	802a406 <__sflush_r+0x32>
 802a472:	682b      	ldr	r3, [r5, #0]
 802a474:	2b00      	cmp	r3, #0
 802a476:	d0c6      	beq.n	802a406 <__sflush_r+0x32>
 802a478:	2b1d      	cmp	r3, #29
 802a47a:	d001      	beq.n	802a480 <__sflush_r+0xac>
 802a47c:	2b16      	cmp	r3, #22
 802a47e:	d11e      	bne.n	802a4be <__sflush_r+0xea>
 802a480:	602f      	str	r7, [r5, #0]
 802a482:	2000      	movs	r0, #0
 802a484:	e022      	b.n	802a4cc <__sflush_r+0xf8>
 802a486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a48a:	b21b      	sxth	r3, r3
 802a48c:	e01b      	b.n	802a4c6 <__sflush_r+0xf2>
 802a48e:	690f      	ldr	r7, [r1, #16]
 802a490:	2f00      	cmp	r7, #0
 802a492:	d0f6      	beq.n	802a482 <__sflush_r+0xae>
 802a494:	0793      	lsls	r3, r2, #30
 802a496:	680e      	ldr	r6, [r1, #0]
 802a498:	bf08      	it	eq
 802a49a:	694b      	ldreq	r3, [r1, #20]
 802a49c:	600f      	str	r7, [r1, #0]
 802a49e:	bf18      	it	ne
 802a4a0:	2300      	movne	r3, #0
 802a4a2:	eba6 0807 	sub.w	r8, r6, r7
 802a4a6:	608b      	str	r3, [r1, #8]
 802a4a8:	f1b8 0f00 	cmp.w	r8, #0
 802a4ac:	dde9      	ble.n	802a482 <__sflush_r+0xae>
 802a4ae:	6a21      	ldr	r1, [r4, #32]
 802a4b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802a4b2:	4643      	mov	r3, r8
 802a4b4:	463a      	mov	r2, r7
 802a4b6:	4628      	mov	r0, r5
 802a4b8:	47b0      	blx	r6
 802a4ba:	2800      	cmp	r0, #0
 802a4bc:	dc08      	bgt.n	802a4d0 <__sflush_r+0xfc>
 802a4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a4c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a4c6:	81a3      	strh	r3, [r4, #12]
 802a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 802a4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a4d0:	4407      	add	r7, r0
 802a4d2:	eba8 0800 	sub.w	r8, r8, r0
 802a4d6:	e7e7      	b.n	802a4a8 <__sflush_r+0xd4>
 802a4d8:	dfbffffe 	.word	0xdfbffffe

0802a4dc <_fflush_r>:
 802a4dc:	b538      	push	{r3, r4, r5, lr}
 802a4de:	690b      	ldr	r3, [r1, #16]
 802a4e0:	4605      	mov	r5, r0
 802a4e2:	460c      	mov	r4, r1
 802a4e4:	b913      	cbnz	r3, 802a4ec <_fflush_r+0x10>
 802a4e6:	2500      	movs	r5, #0
 802a4e8:	4628      	mov	r0, r5
 802a4ea:	bd38      	pop	{r3, r4, r5, pc}
 802a4ec:	b118      	cbz	r0, 802a4f6 <_fflush_r+0x1a>
 802a4ee:	6a03      	ldr	r3, [r0, #32]
 802a4f0:	b90b      	cbnz	r3, 802a4f6 <_fflush_r+0x1a>
 802a4f2:	f7ff f9e9 	bl	80298c8 <__sinit>
 802a4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a4fa:	2b00      	cmp	r3, #0
 802a4fc:	d0f3      	beq.n	802a4e6 <_fflush_r+0xa>
 802a4fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802a500:	07d0      	lsls	r0, r2, #31
 802a502:	d404      	bmi.n	802a50e <_fflush_r+0x32>
 802a504:	0599      	lsls	r1, r3, #22
 802a506:	d402      	bmi.n	802a50e <_fflush_r+0x32>
 802a508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a50a:	f7ff fbdc 	bl	8029cc6 <__retarget_lock_acquire_recursive>
 802a50e:	4628      	mov	r0, r5
 802a510:	4621      	mov	r1, r4
 802a512:	f7ff ff5f 	bl	802a3d4 <__sflush_r>
 802a516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a518:	07da      	lsls	r2, r3, #31
 802a51a:	4605      	mov	r5, r0
 802a51c:	d4e4      	bmi.n	802a4e8 <_fflush_r+0xc>
 802a51e:	89a3      	ldrh	r3, [r4, #12]
 802a520:	059b      	lsls	r3, r3, #22
 802a522:	d4e1      	bmi.n	802a4e8 <_fflush_r+0xc>
 802a524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a526:	f7ff fbcf 	bl	8029cc8 <__retarget_lock_release_recursive>
 802a52a:	e7dd      	b.n	802a4e8 <_fflush_r+0xc>

0802a52c <__swhatbuf_r>:
 802a52c:	b570      	push	{r4, r5, r6, lr}
 802a52e:	460c      	mov	r4, r1
 802a530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a534:	2900      	cmp	r1, #0
 802a536:	b096      	sub	sp, #88	@ 0x58
 802a538:	4615      	mov	r5, r2
 802a53a:	461e      	mov	r6, r3
 802a53c:	da0d      	bge.n	802a55a <__swhatbuf_r+0x2e>
 802a53e:	89a3      	ldrh	r3, [r4, #12]
 802a540:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802a544:	f04f 0100 	mov.w	r1, #0
 802a548:	bf14      	ite	ne
 802a54a:	2340      	movne	r3, #64	@ 0x40
 802a54c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802a550:	2000      	movs	r0, #0
 802a552:	6031      	str	r1, [r6, #0]
 802a554:	602b      	str	r3, [r5, #0]
 802a556:	b016      	add	sp, #88	@ 0x58
 802a558:	bd70      	pop	{r4, r5, r6, pc}
 802a55a:	466a      	mov	r2, sp
 802a55c:	f000 f848 	bl	802a5f0 <_fstat_r>
 802a560:	2800      	cmp	r0, #0
 802a562:	dbec      	blt.n	802a53e <__swhatbuf_r+0x12>
 802a564:	9901      	ldr	r1, [sp, #4]
 802a566:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802a56a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802a56e:	4259      	negs	r1, r3
 802a570:	4159      	adcs	r1, r3
 802a572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802a576:	e7eb      	b.n	802a550 <__swhatbuf_r+0x24>

0802a578 <__smakebuf_r>:
 802a578:	898b      	ldrh	r3, [r1, #12]
 802a57a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a57c:	079d      	lsls	r5, r3, #30
 802a57e:	4606      	mov	r6, r0
 802a580:	460c      	mov	r4, r1
 802a582:	d507      	bpl.n	802a594 <__smakebuf_r+0x1c>
 802a584:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802a588:	6023      	str	r3, [r4, #0]
 802a58a:	6123      	str	r3, [r4, #16]
 802a58c:	2301      	movs	r3, #1
 802a58e:	6163      	str	r3, [r4, #20]
 802a590:	b003      	add	sp, #12
 802a592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a594:	ab01      	add	r3, sp, #4
 802a596:	466a      	mov	r2, sp
 802a598:	f7ff ffc8 	bl	802a52c <__swhatbuf_r>
 802a59c:	9f00      	ldr	r7, [sp, #0]
 802a59e:	4605      	mov	r5, r0
 802a5a0:	4639      	mov	r1, r7
 802a5a2:	4630      	mov	r0, r6
 802a5a4:	f7ff f86a 	bl	802967c <_malloc_r>
 802a5a8:	b948      	cbnz	r0, 802a5be <__smakebuf_r+0x46>
 802a5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a5ae:	059a      	lsls	r2, r3, #22
 802a5b0:	d4ee      	bmi.n	802a590 <__smakebuf_r+0x18>
 802a5b2:	f023 0303 	bic.w	r3, r3, #3
 802a5b6:	f043 0302 	orr.w	r3, r3, #2
 802a5ba:	81a3      	strh	r3, [r4, #12]
 802a5bc:	e7e2      	b.n	802a584 <__smakebuf_r+0xc>
 802a5be:	89a3      	ldrh	r3, [r4, #12]
 802a5c0:	6020      	str	r0, [r4, #0]
 802a5c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a5c6:	81a3      	strh	r3, [r4, #12]
 802a5c8:	9b01      	ldr	r3, [sp, #4]
 802a5ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802a5ce:	b15b      	cbz	r3, 802a5e8 <__smakebuf_r+0x70>
 802a5d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a5d4:	4630      	mov	r0, r6
 802a5d6:	f000 f81d 	bl	802a614 <_isatty_r>
 802a5da:	b128      	cbz	r0, 802a5e8 <__smakebuf_r+0x70>
 802a5dc:	89a3      	ldrh	r3, [r4, #12]
 802a5de:	f023 0303 	bic.w	r3, r3, #3
 802a5e2:	f043 0301 	orr.w	r3, r3, #1
 802a5e6:	81a3      	strh	r3, [r4, #12]
 802a5e8:	89a3      	ldrh	r3, [r4, #12]
 802a5ea:	431d      	orrs	r5, r3
 802a5ec:	81a5      	strh	r5, [r4, #12]
 802a5ee:	e7cf      	b.n	802a590 <__smakebuf_r+0x18>

0802a5f0 <_fstat_r>:
 802a5f0:	b538      	push	{r3, r4, r5, lr}
 802a5f2:	4d07      	ldr	r5, [pc, #28]	@ (802a610 <_fstat_r+0x20>)
 802a5f4:	2300      	movs	r3, #0
 802a5f6:	4604      	mov	r4, r0
 802a5f8:	4608      	mov	r0, r1
 802a5fa:	4611      	mov	r1, r2
 802a5fc:	602b      	str	r3, [r5, #0]
 802a5fe:	f7d7 f96e 	bl	80018de <_fstat>
 802a602:	1c43      	adds	r3, r0, #1
 802a604:	d102      	bne.n	802a60c <_fstat_r+0x1c>
 802a606:	682b      	ldr	r3, [r5, #0]
 802a608:	b103      	cbz	r3, 802a60c <_fstat_r+0x1c>
 802a60a:	6023      	str	r3, [r4, #0]
 802a60c:	bd38      	pop	{r3, r4, r5, pc}
 802a60e:	bf00      	nop
 802a610:	24062d38 	.word	0x24062d38

0802a614 <_isatty_r>:
 802a614:	b538      	push	{r3, r4, r5, lr}
 802a616:	4d06      	ldr	r5, [pc, #24]	@ (802a630 <_isatty_r+0x1c>)
 802a618:	2300      	movs	r3, #0
 802a61a:	4604      	mov	r4, r0
 802a61c:	4608      	mov	r0, r1
 802a61e:	602b      	str	r3, [r5, #0]
 802a620:	f7d7 f962 	bl	80018e8 <_isatty>
 802a624:	1c43      	adds	r3, r0, #1
 802a626:	d102      	bne.n	802a62e <_isatty_r+0x1a>
 802a628:	682b      	ldr	r3, [r5, #0]
 802a62a:	b103      	cbz	r3, 802a62e <_isatty_r+0x1a>
 802a62c:	6023      	str	r3, [r4, #0]
 802a62e:	bd38      	pop	{r3, r4, r5, pc}
 802a630:	24062d38 	.word	0x24062d38

0802a634 <_init>:
 802a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a636:	bf00      	nop
 802a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a63a:	bc08      	pop	{r3}
 802a63c:	469e      	mov	lr, r3
 802a63e:	4770      	bx	lr

0802a640 <_fini>:
 802a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a642:	bf00      	nop
 802a644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a646:	bc08      	pop	{r3}
 802a648:	469e      	mov	lr, r3
 802a64a:	4770      	bx	lr
