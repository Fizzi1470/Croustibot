/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TEST_LIDARVIEWBASE_HPP
#define TEST_LIDARVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/test_lidar_screen/Test_lidarPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>

class Test_lidarViewBase : public touchgfx::View<Test_lidarPresenter>
{
public:
    Test_lidarViewBase();
    virtual ~Test_lidarViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void donnees_lidar_bas_avant()
    {
        // Override and implement this function in Test_lidar
    }
    virtual void donnees_lidar_bas_arriere()
    {
        // Override and implement this function in Test_lidar
    }
    virtual void reception_can_lidars_test_lidar_bas_avant()
    {
        // Override and implement this function in Test_lidar
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box fond;
    touchgfx::TextArea texte_menu_tests_lidar_1;
    touchgfx::ButtonWithIcon bouton_retour;
    touchgfx::ButtonWithIcon bouton_home;
    touchgfx::ScalableImage repere_polaire;
    touchgfx::ScalableImage image_lidar_bas;
    touchgfx::MoveAnimator< touchgfx::Circle > point;
    touchgfx::PainterRGB888 pointPainter;
    touchgfx::Line line1;
    touchgfx::PainterRGB888 line1Painter;
    touchgfx::ScalableImage scalableImage1;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Test_lidarViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // TEST_LIDARVIEWBASE_HPP
