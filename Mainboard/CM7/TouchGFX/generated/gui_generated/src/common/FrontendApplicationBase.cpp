/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD24bpp.hpp>
#include <gui/home_screen/HomeView.hpp>
#include <gui/home_screen/HomePresenter.hpp>
#include <gui/choix_strategie_screen/Choix_strategieView.hpp>
#include <gui/choix_strategie_screen/Choix_strategiePresenter.hpp>
#include <gui/robot_pret_screen/Robot_pretView.hpp>
#include <gui/robot_pret_screen/Robot_pretPresenter.hpp>
#include <gui/robot_en_match_screen/Robot_en_matchView.hpp>
#include <gui/robot_en_match_screen/Robot_en_matchPresenter.hpp>
#include <gui/choix_tests_screen/Choix_testsView.hpp>
#include <gui/choix_tests_screen/Choix_testsPresenter.hpp>
#include <gui/tests_moteurs_screen/Tests_moteursView.hpp>
#include <gui/tests_moteurs_screen/Tests_moteursPresenter.hpp>
#include <gui/test_lidar_screen/Test_lidarView.hpp>
#include <gui/test_lidar_screen/Test_lidarPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
}

/*
 * Screen Transition Declarations
 */

// Home

void FrontendApplicationBase::gotoHomeScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoHomeScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoHomeScreenNoTransitionImpl()
{
    touchgfx::makeTransition<HomeView, HomePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Choix_strategie

void FrontendApplicationBase::gotoChoix_strategieScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoChoix_strategieScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoChoix_strategieScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Choix_strategieView, Choix_strategiePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Robot_pret

void FrontendApplicationBase::gotoRobot_pretScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoRobot_pretScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoRobot_pretScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Robot_pretView, Robot_pretPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Robot_en_match

void FrontendApplicationBase::gotoRobot_en_matchScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoRobot_en_matchScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoRobot_en_matchScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Robot_en_matchView, Robot_en_matchPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Choix_tests

void FrontendApplicationBase::gotoChoix_testsScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoChoix_testsScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoChoix_testsScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Choix_testsView, Choix_testsPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Tests_moteurs

void FrontendApplicationBase::gotoTests_moteursScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoTests_moteursScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoTests_moteursScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Tests_moteursView, Tests_moteursPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Test_lidar

void FrontendApplicationBase::gotoTest_lidarScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoTest_lidarScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoTest_lidarScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Test_lidarView, Test_lidarPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
